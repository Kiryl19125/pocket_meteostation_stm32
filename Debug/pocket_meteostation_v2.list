
pocket_meteostation_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000facc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e58  0800fc70  0800fc70  00010c70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012ac8  08012ac8  000141e0  2**0
                  CONTENTS
  4 .ARM          00000008  08012ac8  08012ac8  00013ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012ad0  08012ad0  000141e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012ad0  08012ad0  00013ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012ad4  08012ad4  00013ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08012ad8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000141e0  2**0
                  CONTENTS
 10 .bss          000033f0  200001e0  200001e0  000141e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200035d0  200035d0  000141e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000141e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002410e  00000000  00000000  00014210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005180  00000000  00000000  0003831e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d30  00000000  00000000  0003d4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001696  00000000  00000000  0003f1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026a21  00000000  00000000  00040866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000256f1  00000000  00000000  00067287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2b3e  00000000  00000000  0008c978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016f4b6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008de4  00000000  00000000  0016f4fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  001782e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fc54 	.word	0x0800fc54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800fc54 	.word	0x0800fc54

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <Error>:
extern char str1[100];
BME280_CalibData CalibData;
int32_t temper_int;
//------------------------------------------------
void Error(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  LED_OFF;
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2120      	movs	r1, #32
 8000d0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d10:	f003 fac6 	bl	80042a0 <HAL_GPIO_WritePin>
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <I2Cx_WriteData>:
//------------------------------------------------
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af04      	add	r7, sp, #16
 8000d1e:	4603      	mov	r3, r0
 8000d20:	80fb      	strh	r3, [r7, #6]
 8000d22:	460b      	mov	r3, r1
 8000d24:	717b      	strb	r3, [r7, #5]
 8000d26:	4613      	mov	r3, r2
 8000d28:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 8000d2e:	797b      	ldrb	r3, [r7, #5]
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	88f9      	ldrh	r1, [r7, #6]
 8000d34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d38:	9302      	str	r3, [sp, #8]
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	9301      	str	r3, [sp, #4]
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	2301      	movs	r3, #1
 8000d44:	4806      	ldr	r0, [pc, #24]	@ (8000d60 <I2Cx_WriteData+0x48>)
 8000d46:	f003 fd87 	bl	8004858 <HAL_I2C_Mem_Write>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <I2Cx_WriteData+0x40>
 8000d54:	f7ff ffd6 	bl	8000d04 <Error>
}
 8000d58:	bf00      	nop
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000320 	.word	0x20000320

08000d64 <I2Cx_ReadData>:
//------------------------------------------------
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af04      	add	r7, sp, #16
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	460a      	mov	r2, r1
 8000d6e:	80fb      	strh	r3, [r7, #6]
 8000d70:	4613      	mov	r3, r2
 8000d72:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000d74:	2300      	movs	r3, #0
 8000d76:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	73bb      	strb	r3, [r7, #14]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8000d7c:	797b      	ldrb	r3, [r7, #5]
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	88f9      	ldrh	r1, [r7, #6]
 8000d82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d86:	9302      	str	r3, [sp, #8]
 8000d88:	2301      	movs	r3, #1
 8000d8a:	9301      	str	r3, [sp, #4]
 8000d8c:	f107 030e 	add.w	r3, r7, #14
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	2301      	movs	r3, #1
 8000d94:	4807      	ldr	r0, [pc, #28]	@ (8000db4 <I2Cx_ReadData+0x50>)
 8000d96:	f003 fe73 	bl	8004a80 <HAL_I2C_Mem_Read>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <I2Cx_ReadData+0x44>
 8000da4:	f7ff ffae 	bl	8000d04 <Error>
  return value;
 8000da8:	7bbb      	ldrb	r3, [r7, #14]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000320 	.word	0x20000320

08000db8 <I2Cx_ReadData16>:
//------------------------------------------------
static void I2Cx_ReadData16(uint16_t Addr, uint8_t Reg, uint16_t *Value)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af04      	add	r7, sp, #16
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	603a      	str	r2, [r7, #0]
 8000dc2:	80fb      	strh	r3, [r7, #6]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 2, 0x10000);
 8000dcc:	797b      	ldrb	r3, [r7, #5]
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	88f9      	ldrh	r1, [r7, #6]
 8000dd2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dd6:	9302      	str	r3, [sp, #8]
 8000dd8:	2302      	movs	r3, #2
 8000dda:	9301      	str	r3, [sp, #4]
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	2301      	movs	r3, #1
 8000de2:	4807      	ldr	r0, [pc, #28]	@ (8000e00 <I2Cx_ReadData16+0x48>)
 8000de4:	f003 fe4c 	bl	8004a80 <HAL_I2C_Mem_Read>
 8000de8:	4603      	mov	r3, r0
 8000dea:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <I2Cx_ReadData16+0x3e>
 8000df2:	f7ff ff87 	bl	8000d04 <Error>
}
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000320 	.word	0x20000320

08000e04 <I2Cx_ReadData24>:
//------------------------------------------------
static void I2Cx_ReadData24(uint16_t Addr, uint8_t Reg, uint32_t *Value)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af04      	add	r7, sp, #16
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	603a      	str	r2, [r7, #0]
 8000e0e:	80fb      	strh	r3, [r7, #6]
 8000e10:	460b      	mov	r3, r1
 8000e12:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000e14:	2300      	movs	r3, #0
 8000e16:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
 8000e18:	797b      	ldrb	r3, [r7, #5]
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	88f9      	ldrh	r1, [r7, #6]
 8000e1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e22:	9302      	str	r3, [sp, #8]
 8000e24:	2303      	movs	r3, #3
 8000e26:	9301      	str	r3, [sp, #4]
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	4807      	ldr	r0, [pc, #28]	@ (8000e4c <I2Cx_ReadData24+0x48>)
 8000e30:	f003 fe26 	bl	8004a80 <HAL_I2C_Mem_Read>
 8000e34:	4603      	mov	r3, r0
 8000e36:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <I2Cx_ReadData24+0x3e>
 8000e3e:	f7ff ff61 	bl	8000d04 <Error>
}
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000320 	.word	0x20000320

08000e50 <BME280_WriteReg>:
//------------------------------------------------
void BME280_WriteReg(uint8_t Reg, uint8_t Value)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	460a      	mov	r2, r1
 8000e5a:	71fb      	strb	r3, [r7, #7]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	71bb      	strb	r3, [r7, #6]
  I2Cx_WriteData(BME280_ADDRESS, Reg, Value);
 8000e60:	79ba      	ldrb	r2, [r7, #6]
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	4619      	mov	r1, r3
 8000e66:	20ec      	movs	r0, #236	@ 0xec
 8000e68:	f7ff ff56 	bl	8000d18 <I2Cx_WriteData>
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <BME280_ReadReg>:
//------------------------------------------------
uint8_t BME280_ReadReg(uint8_t Reg)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
  uint8_t res = I2Cx_ReadData(BME280_ADDRESS,Reg);
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	4619      	mov	r1, r3
 8000e82:	20ec      	movs	r0, #236	@ 0xec
 8000e84:	f7ff ff6e 	bl	8000d64 <I2Cx_ReadData>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	73fb      	strb	r3, [r7, #15]
  return res;
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <BME280_ReadReg_U16>:
//------------------------------------------------
void BME280_ReadReg_U16(uint8_t Reg, uint16_t *Value)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	6039      	str	r1, [r7, #0]
 8000ea0:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg,Value);
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	683a      	ldr	r2, [r7, #0]
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	20ec      	movs	r0, #236	@ 0xec
 8000eaa:	f7ff ff85 	bl	8000db8 <I2Cx_ReadData16>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <BME280_ReadReg_S16>:
//------------------------------------------------
void BME280_ReadReg_S16(uint8_t Reg, int16_t *Value)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	6039      	str	r1, [r7, #0]
 8000ec0:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg, (uint16_t*) Value);
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	683a      	ldr	r2, [r7, #0]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	20ec      	movs	r0, #236	@ 0xec
 8000eca:	f7ff ff75 	bl	8000db8 <I2Cx_ReadData16>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <BME280_ReadReg_BE_U24>:
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
  *(uint32_t *) Value &= 0x00FFFFFF;
}
//------------------------------------------------
void BME280_ReadReg_BE_U24(uint8_t Reg, uint32_t *Value)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	6039      	str	r1, [r7, #0]
 8000ee0:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	683a      	ldr	r2, [r7, #0]
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	20ec      	movs	r0, #236	@ 0xec
 8000eea:	f7ff ff8b 	bl	8000e04 <I2Cx_ReadData24>
  *(uint32_t *) Value = be24toword(*(uint32_t *) Value) & 0x00FFFFFF;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	0c1b      	lsrs	r3, r3, #16
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8000efe:	431a      	orrs	r2, r3
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	041b      	lsls	r3, r3, #16
 8000f06:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	601a      	str	r2, [r3, #0]
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <BME280_ReadStatus>:
//------------------------------------------------
uint8_t BME280_ReadStatus(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
  //clear unuset bits
  uint8_t res = BME280_ReadReg(BME280_REGISTER_STATUS)&0x09;
 8000f22:	20f3      	movs	r0, #243	@ 0xf3
 8000f24:	f7ff ffa6 	bl	8000e74 <BME280_ReadReg>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	f003 0309 	and.w	r3, r3, #9
 8000f2e:	71fb      	strb	r3, [r7, #7]
  return res;
 8000f30:	79fb      	ldrb	r3, [r7, #7]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <BME280_ReadCoefficients>:
//------------------------------------------------
void BME280_ReadCoefficients(void)
{
 8000f3c:	b598      	push	{r3, r4, r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  BME280_ReadReg_U16(BME280_REGISTER_DIG_T1,&CalibData.dig_T1);
 8000f40:	4937      	ldr	r1, [pc, #220]	@ (8001020 <BME280_ReadCoefficients+0xe4>)
 8000f42:	2088      	movs	r0, #136	@ 0x88
 8000f44:	f7ff ffa7 	bl	8000e96 <BME280_ReadReg_U16>
//  sprintf(str1, "DIG_T1: %u\r\n", CalibData.dig_T1);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T2,&CalibData.dig_T2);
 8000f48:	4936      	ldr	r1, [pc, #216]	@ (8001024 <BME280_ReadCoefficients+0xe8>)
 8000f4a:	208a      	movs	r0, #138	@ 0x8a
 8000f4c:	f7ff ffb3 	bl	8000eb6 <BME280_ReadReg_S16>
//  sprintf(str1, "DIG_T2: %d\r\n", CalibData.dig_T2);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T3,&CalibData.dig_T3);
 8000f50:	4935      	ldr	r1, [pc, #212]	@ (8001028 <BME280_ReadCoefficients+0xec>)
 8000f52:	208c      	movs	r0, #140	@ 0x8c
 8000f54:	f7ff ffaf 	bl	8000eb6 <BME280_ReadReg_S16>
//  sprintf(str1, "DIG_T3: %d\r\n", CalibData.dig_T3);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_U16(BME280_REGISTER_DIG_P1,&CalibData.dig_P1);
 8000f58:	4934      	ldr	r1, [pc, #208]	@ (800102c <BME280_ReadCoefficients+0xf0>)
 8000f5a:	208e      	movs	r0, #142	@ 0x8e
 8000f5c:	f7ff ff9b 	bl	8000e96 <BME280_ReadReg_U16>
//  sprintf(str1, "DIG_P1: %u\r\n", CalibData.dig_P1);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P2,&CalibData.dig_P2);
 8000f60:	4933      	ldr	r1, [pc, #204]	@ (8001030 <BME280_ReadCoefficients+0xf4>)
 8000f62:	2090      	movs	r0, #144	@ 0x90
 8000f64:	f7ff ffa7 	bl	8000eb6 <BME280_ReadReg_S16>
//  sprintf(str1, "DIG_P2: %d\r\n", CalibData.dig_P2);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P3,&CalibData.dig_P3);
 8000f68:	4932      	ldr	r1, [pc, #200]	@ (8001034 <BME280_ReadCoefficients+0xf8>)
 8000f6a:	2092      	movs	r0, #146	@ 0x92
 8000f6c:	f7ff ffa3 	bl	8000eb6 <BME280_ReadReg_S16>
//  sprintf(str1, "DIG_P3: %d\r\n", CalibData.dig_P3);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P4,&CalibData.dig_P4);
 8000f70:	4931      	ldr	r1, [pc, #196]	@ (8001038 <BME280_ReadCoefficients+0xfc>)
 8000f72:	2094      	movs	r0, #148	@ 0x94
 8000f74:	f7ff ff9f 	bl	8000eb6 <BME280_ReadReg_S16>
//  sprintf(str1, "DIG_P4: %d\r\n", CalibData.dig_P4);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P5,&CalibData.dig_P5);
 8000f78:	4930      	ldr	r1, [pc, #192]	@ (800103c <BME280_ReadCoefficients+0x100>)
 8000f7a:	2096      	movs	r0, #150	@ 0x96
 8000f7c:	f7ff ff9b 	bl	8000eb6 <BME280_ReadReg_S16>
//  sprintf(str1, "DIG_P5: %d\r\n", CalibData.dig_P5);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P6,&CalibData.dig_P6);
 8000f80:	492f      	ldr	r1, [pc, #188]	@ (8001040 <BME280_ReadCoefficients+0x104>)
 8000f82:	2098      	movs	r0, #152	@ 0x98
 8000f84:	f7ff ff97 	bl	8000eb6 <BME280_ReadReg_S16>
//  sprintf(str1, "DIG_P6: %d\r\n", CalibData.dig_P6);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P7,&CalibData.dig_P7);
 8000f88:	492e      	ldr	r1, [pc, #184]	@ (8001044 <BME280_ReadCoefficients+0x108>)
 8000f8a:	209a      	movs	r0, #154	@ 0x9a
 8000f8c:	f7ff ff93 	bl	8000eb6 <BME280_ReadReg_S16>
//  sprintf(str1, "DIG_P7: %d\r\n", CalibData.dig_P7);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P8,&CalibData.dig_P8);
 8000f90:	492d      	ldr	r1, [pc, #180]	@ (8001048 <BME280_ReadCoefficients+0x10c>)
 8000f92:	209c      	movs	r0, #156	@ 0x9c
 8000f94:	f7ff ff8f 	bl	8000eb6 <BME280_ReadReg_S16>
//  sprintf(str1, "DIG_P8: %d\r\n", CalibData.dig_P8);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P9,&CalibData.dig_P9);
 8000f98:	492c      	ldr	r1, [pc, #176]	@ (800104c <BME280_ReadCoefficients+0x110>)
 8000f9a:	209e      	movs	r0, #158	@ 0x9e
 8000f9c:	f7ff ff8b 	bl	8000eb6 <BME280_ReadReg_S16>
//  sprintf(str1, "DIG_P9: %d\r\n", CalibData.dig_P9);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  CalibData.dig_H1 = BME280_ReadReg(BME280_REGISTER_DIG_H1);
 8000fa0:	20a1      	movs	r0, #161	@ 0xa1
 8000fa2:	f7ff ff67 	bl	8000e74 <BME280_ReadReg>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b1d      	ldr	r3, [pc, #116]	@ (8001020 <BME280_ReadCoefficients+0xe4>)
 8000fac:	761a      	strb	r2, [r3, #24]
//  sprintf(str1, "DIG_H1: %d\r\n", CalibData.dig_H1);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_H2,&CalibData.dig_H2);
 8000fae:	4928      	ldr	r1, [pc, #160]	@ (8001050 <BME280_ReadCoefficients+0x114>)
 8000fb0:	20e1      	movs	r0, #225	@ 0xe1
 8000fb2:	f7ff ff80 	bl	8000eb6 <BME280_ReadReg_S16>
//  sprintf(str1, "DIG_H2: %d\r\n", CalibData.dig_H2);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  CalibData.dig_H3 = BME280_ReadReg(BME280_REGISTER_DIG_H3);
 8000fb6:	20e3      	movs	r0, #227	@ 0xe3
 8000fb8:	f7ff ff5c 	bl	8000e74 <BME280_ReadReg>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	4b17      	ldr	r3, [pc, #92]	@ (8001020 <BME280_ReadCoefficients+0xe4>)
 8000fc2:	771a      	strb	r2, [r3, #28]
//  sprintf(str1, "DIG_H3: %d\r\n", CalibData.dig_H3);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  CalibData.dig_H4 = (BME280_ReadReg(BME280_REGISTER_DIG_H4) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H4+1) & 0xF);
 8000fc4:	20e4      	movs	r0, #228	@ 0xe4
 8000fc6:	f7ff ff55 	bl	8000e74 <BME280_ReadReg>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	011b      	lsls	r3, r3, #4
 8000fce:	b21c      	sxth	r4, r3
 8000fd0:	20e5      	movs	r0, #229	@ 0xe5
 8000fd2:	f7ff ff4f 	bl	8000e74 <BME280_ReadReg>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	b21b      	sxth	r3, r3
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	b21b      	sxth	r3, r3
 8000fe0:	4323      	orrs	r3, r4
 8000fe2:	b21a      	sxth	r2, r3
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8001020 <BME280_ReadCoefficients+0xe4>)
 8000fe6:	83da      	strh	r2, [r3, #30]
//  sprintf(str1, "DIG_H4: %d\r\n", CalibData.dig_H4);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  CalibData.dig_H5 = (BME280_ReadReg(BME280_REGISTER_DIG_H5+1) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H5) >> 4);
 8000fe8:	20e6      	movs	r0, #230	@ 0xe6
 8000fea:	f7ff ff43 	bl	8000e74 <BME280_ReadReg>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	011b      	lsls	r3, r3, #4
 8000ff2:	b21c      	sxth	r4, r3
 8000ff4:	20e5      	movs	r0, #229	@ 0xe5
 8000ff6:	f7ff ff3d 	bl	8000e74 <BME280_ReadReg>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	091b      	lsrs	r3, r3, #4
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	b21b      	sxth	r3, r3
 8001002:	4323      	orrs	r3, r4
 8001004:	b21a      	sxth	r2, r3
 8001006:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <BME280_ReadCoefficients+0xe4>)
 8001008:	841a      	strh	r2, [r3, #32]
//  sprintf(str1, "DIG_H5: %d\r\n", CalibData.dig_H5);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  CalibData.dig_H6 = (int8_t)BME280_ReadReg(BME280_REGISTER_DIG_H6);
 800100a:	20e7      	movs	r0, #231	@ 0xe7
 800100c:	f7ff ff32 	bl	8000e74 <BME280_ReadReg>
 8001010:	4603      	mov	r3, r0
 8001012:	b25a      	sxtb	r2, r3
 8001014:	4b02      	ldr	r3, [pc, #8]	@ (8001020 <BME280_ReadCoefficients+0xe4>)
 8001016:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
//  sprintf(str1, "DIG_H6: %d\r\n", CalibData.dig_H3);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
}
 800101a:	bf00      	nop
 800101c:	bd98      	pop	{r3, r4, r7, pc}
 800101e:	bf00      	nop
 8001020:	200001fc 	.word	0x200001fc
 8001024:	200001fe 	.word	0x200001fe
 8001028:	20000200 	.word	0x20000200
 800102c:	20000202 	.word	0x20000202
 8001030:	20000204 	.word	0x20000204
 8001034:	20000206 	.word	0x20000206
 8001038:	20000208 	.word	0x20000208
 800103c:	2000020a 	.word	0x2000020a
 8001040:	2000020c 	.word	0x2000020c
 8001044:	2000020e 	.word	0x2000020e
 8001048:	20000210 	.word	0x20000210
 800104c:	20000212 	.word	0x20000212
 8001050:	20000216 	.word	0x20000216

08001054 <BME280_SetStandby>:
//------------------------------------------------
void BME280_SetStandby(uint8_t tsb) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_STBY_MSK;
 800105e:	20f5      	movs	r0, #245	@ 0xf5
 8001060:	f7ff ff08 	bl	8000e74 <BME280_ReadReg>
 8001064:	4603      	mov	r3, r0
 8001066:	f003 031f 	and.w	r3, r3, #31
 800106a:	73fb      	strb	r3, [r7, #15]
  reg |= tsb & BME280_STBY_MSK;
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	f023 031f 	bic.w	r3, r3, #31
 8001074:	b25a      	sxtb	r2, r3
 8001076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107a:	4313      	orrs	r3, r2
 800107c:	b25b      	sxtb	r3, r3
 800107e:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	4619      	mov	r1, r3
 8001084:	20f5      	movs	r0, #245	@ 0xf5
 8001086:	f7ff fee3 	bl	8000e50 <BME280_WriteReg>
}
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <BME280_SetFilter>:
//------------------------------------------------
  void BME280_SetFilter(uint8_t filter) {
 8001092:	b580      	push	{r7, lr}
 8001094:	b084      	sub	sp, #16
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_FILTER_MSK;
 800109c:	20f5      	movs	r0, #245	@ 0xf5
 800109e:	f7ff fee9 	bl	8000e74 <BME280_ReadReg>
 80010a2:	4603      	mov	r3, r0
 80010a4:	f023 031c 	bic.w	r3, r3, #28
 80010a8:	73fb      	strb	r3, [r7, #15]
  reg |= filter & BME280_FILTER_MSK;
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	f003 031c 	and.w	r3, r3, #28
 80010b2:	b25a      	sxtb	r2, r3
 80010b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	b25b      	sxtb	r3, r3
 80010bc:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	4619      	mov	r1, r3
 80010c2:	20f5      	movs	r0, #245	@ 0xf5
 80010c4:	f7ff fec4 	bl	8000e50 <BME280_WriteReg>
}
 80010c8:	bf00      	nop
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <BME280_SetOversamplingTemper>:
//------------------------------------------------
void BME280_SetOversamplingTemper(uint8_t osrs)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_T_MSK;
 80010da:	20f4      	movs	r0, #244	@ 0xf4
 80010dc:	f7ff feca 	bl	8000e74 <BME280_ReadReg>
 80010e0:	4603      	mov	r3, r0
 80010e2:	f003 031f 	and.w	r3, r3, #31
 80010e6:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_T_MSK;
 80010e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ec:	f023 031f 	bic.w	r3, r3, #31
 80010f0:	b25a      	sxtb	r2, r3
 80010f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	b25b      	sxtb	r3, r3
 80010fa:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	4619      	mov	r1, r3
 8001100:	20f4      	movs	r0, #244	@ 0xf4
 8001102:	f7ff fea5 	bl	8000e50 <BME280_WriteReg>
}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <BME280_SetOversamplingPressure>:
//------------------------------------------------
void BME280_SetOversamplingPressure(uint8_t osrs)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b084      	sub	sp, #16
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_P_MSK;
 8001118:	20f4      	movs	r0, #244	@ 0xf4
 800111a:	f7ff feab 	bl	8000e74 <BME280_ReadReg>
 800111e:	4603      	mov	r3, r0
 8001120:	f023 031c 	bic.w	r3, r3, #28
 8001124:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_P_MSK;
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	f003 031c 	and.w	r3, r3, #28
 800112e:	b25a      	sxtb	r2, r3
 8001130:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001134:	4313      	orrs	r3, r2
 8001136:	b25b      	sxtb	r3, r3
 8001138:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	4619      	mov	r1, r3
 800113e:	20f4      	movs	r0, #244	@ 0xf4
 8001140:	f7ff fe86 	bl	8000e50 <BME280_WriteReg>
}
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <BME280_SetOversamplingHum>:
//------------------------------------------------
void BME280_SetOversamplingHum(uint8_t osrs)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_HUM) & ~BME280_OSRS_H_MSK;
 8001156:	20f2      	movs	r0, #242	@ 0xf2
 8001158:	f7ff fe8c 	bl	8000e74 <BME280_ReadReg>
 800115c:	4603      	mov	r3, r0
 800115e:	f023 0307 	bic.w	r3, r3, #7
 8001162:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_H_MSK;
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	f003 0307 	and.w	r3, r3, #7
 800116c:	b25a      	sxtb	r2, r3
 800116e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001172:	4313      	orrs	r3, r2
 8001174:	b25b      	sxtb	r3, r3
 8001176:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_HUM,reg);
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	4619      	mov	r1, r3
 800117c:	20f2      	movs	r0, #242	@ 0xf2
 800117e:	f7ff fe67 	bl	8000e50 <BME280_WriteReg>
  //The 'ctrl_hum' register needs to be written
  //after changing 'ctrl_hum' for the changes to become effwctive.
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 8001182:	20f4      	movs	r0, #244	@ 0xf4
 8001184:	f7ff fe76 	bl	8000e74 <BME280_ReadReg>
 8001188:	4603      	mov	r3, r0
 800118a:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	4619      	mov	r1, r3
 8001190:	20f4      	movs	r0, #244	@ 0xf4
 8001192:	f7ff fe5d 	bl	8000e50 <BME280_WriteReg>
}
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <BME280_SetMode>:
//------------------------------------------------
void BME280_SetMode(uint8_t mode) {
 800119e:	b580      	push	{r7, lr}
 80011a0:	b084      	sub	sp, #16
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_MODE_MSK;
 80011a8:	20f4      	movs	r0, #244	@ 0xf4
 80011aa:	f7ff fe63 	bl	8000e74 <BME280_ReadReg>
 80011ae:	4603      	mov	r3, r0
 80011b0:	f023 0303 	bic.w	r3, r3, #3
 80011b4:	73fb      	strb	r3, [r7, #15]
  reg |= mode & BME280_MODE_MSK;
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	b25a      	sxtb	r2, r3
 80011c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	b25b      	sxtb	r3, r3
 80011c8:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	4619      	mov	r1, r3
 80011ce:	20f4      	movs	r0, #244	@ 0xf4
 80011d0:	f7ff fe3e 	bl	8000e50 <BME280_WriteReg>
}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <BME280_ReadTemperature>:
//------------------------------------------------
float BME280_ReadTemperature(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
  float temper_float = 0.0f;
 80011e2:	f04f 0300 	mov.w	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
	uint32_t temper_raw;
	int32_t val1, val2;
	BME280_ReadReg_BE_U24(BME280_REGISTER_TEMPDATA,&temper_raw);
 80011e8:	463b      	mov	r3, r7
 80011ea:	4619      	mov	r1, r3
 80011ec:	20fa      	movs	r0, #250	@ 0xfa
 80011ee:	f7ff fe72 	bl	8000ed6 <BME280_ReadReg_BE_U24>
	temper_raw >>= 4;
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	091b      	lsrs	r3, r3, #4
 80011f6:	603b      	str	r3, [r7, #0]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	08da      	lsrs	r2, r3, #3
 80011fc:	4b20      	ldr	r3, [pc, #128]	@ (8001280 <BME280_ReadTemperature+0xa4>)
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	1ad3      	subs	r3, r2, r3
		((int32_t)CalibData.dig_T2)) >> 11;
 8001204:	4a1e      	ldr	r2, [pc, #120]	@ (8001280 <BME280_ReadTemperature+0xa4>)
 8001206:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 800120a:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.dig_T2)) >> 11;
 800120e:	0adb      	lsrs	r3, r3, #11
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 8001210:	60bb      	str	r3, [r7, #8]
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	091b      	lsrs	r3, r3, #4
 8001216:	4a1a      	ldr	r2, [pc, #104]	@ (8001280 <BME280_ReadTemperature+0xa4>)
 8001218:	8812      	ldrh	r2, [r2, #0]
 800121a:	1a9b      	subs	r3, r3, r2
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	0912      	lsrs	r2, r2, #4
 8001220:	4917      	ldr	r1, [pc, #92]	@ (8001280 <BME280_ReadTemperature+0xa4>)
 8001222:	8809      	ldrh	r1, [r1, #0]
 8001224:	1a52      	subs	r2, r2, r1
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 8001226:	fb02 f303 	mul.w	r3, r2, r3
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 800122a:	0b1b      	lsrs	r3, r3, #12
		((int32_t)CalibData.dig_T3)) >> 14;
 800122c:	4a14      	ldr	r2, [pc, #80]	@ (8001280 <BME280_ReadTemperature+0xa4>)
 800122e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8001232:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.dig_T3)) >> 14;
 8001236:	0b9b      	lsrs	r3, r3, #14
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 8001238:	607b      	str	r3, [r7, #4]
	temper_int = val1 + val2;
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4413      	add	r3, r2
 8001240:	4a10      	ldr	r2, [pc, #64]	@ (8001284 <BME280_ReadTemperature+0xa8>)
 8001242:	6013      	str	r3, [r2, #0]
	temper_float = ((temper_int * 5 + 128) >> 8);
 8001244:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <BME280_ReadTemperature+0xa8>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4613      	mov	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	3380      	adds	r3, #128	@ 0x80
 8001250:	121b      	asrs	r3, r3, #8
 8001252:	ee07 3a90 	vmov	s15, r3
 8001256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800125a:	edc7 7a03 	vstr	s15, [r7, #12]
	temper_float /= 100.0f;
 800125e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001262:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001288 <BME280_ReadTemperature+0xac>
 8001266:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800126a:	edc7 7a03 	vstr	s15, [r7, #12]
  return temper_float;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	ee07 3a90 	vmov	s15, r3
}
 8001274:	eeb0 0a67 	vmov.f32	s0, s15
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200001fc 	.word	0x200001fc
 8001284:	20000220 	.word	0x20000220
 8001288:	42c80000 	.word	0x42c80000

0800128c <BME280_Init>:
	att = 44330.0 * (1.0 - pow(atm / seaLevel, 0.1903));
  return att;
}
//------------------------------------------------
void BME280_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
  uint8_t value=0;
 8001292:	2300      	movs	r3, #0
 8001294:	71fb      	strb	r3, [r7, #7]
  uint32_t value32=0;
 8001296:	2300      	movs	r3, #0
 8001298:	603b      	str	r3, [r7, #0]
  LED_ON;
 800129a:	2201      	movs	r2, #1
 800129c:	2120      	movs	r1, #32
 800129e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a2:	f002 fffd 	bl	80042a0 <HAL_GPIO_WritePin>
	value = BME280_ReadReg(BME280_REG_ID);
 80012a6:	20d0      	movs	r0, #208	@ 0xd0
 80012a8:	f7ff fde4 	bl	8000e74 <BME280_ReadReg>
 80012ac:	4603      	mov	r3, r0
 80012ae:	71fb      	strb	r3, [r7, #7]
//	sprintf(str1, "\r\n\r\nID: 0x%02X\r\n", value);
//	HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
	if(value !=BME280_ID)
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	2b60      	cmp	r3, #96	@ 0x60
 80012b4:	d002      	beq.n	80012bc <BME280_Init+0x30>
	{
		Error();
 80012b6:	f7ff fd25 	bl	8000d04 <Error>
		return;
 80012ba:	e02d      	b.n	8001318 <BME280_Init+0x8c>
	}
	BME280_WriteReg(BME280_REG_SOFTRESET,BME280_SOFTRESET_VALUE);
 80012bc:	21b6      	movs	r1, #182	@ 0xb6
 80012be:	20e0      	movs	r0, #224	@ 0xe0
 80012c0:	f7ff fdc6 	bl	8000e50 <BME280_WriteReg>
	while (BME280_ReadStatus() & BME280_STATUS_IM_UPDATE) ;
 80012c4:	bf00      	nop
 80012c6:	f7ff fe29 	bl	8000f1c <BME280_ReadStatus>
 80012ca:	4603      	mov	r3, r0
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1f8      	bne.n	80012c6 <BME280_Init+0x3a>
	BME280_ReadCoefficients();
 80012d4:	f7ff fe32 	bl	8000f3c <BME280_ReadCoefficients>
	BME280_SetStandby(BME280_STBY_1000);
 80012d8:	20a0      	movs	r0, #160	@ 0xa0
 80012da:	f7ff febb 	bl	8001054 <BME280_SetStandby>
	BME280_SetFilter(BME280_FILTER_4);
 80012de:	2008      	movs	r0, #8
 80012e0:	f7ff fed7 	bl	8001092 <BME280_SetFilter>
	BME280_SetOversamplingTemper(BME280_OSRS_T_x4);
 80012e4:	2060      	movs	r0, #96	@ 0x60
 80012e6:	f7ff fef3 	bl	80010d0 <BME280_SetOversamplingTemper>
	BME280_SetOversamplingPressure(BME280_OSRS_P_x2);
 80012ea:	2008      	movs	r0, #8
 80012ec:	f7ff ff0f 	bl	800110e <BME280_SetOversamplingPressure>
	BME280_SetOversamplingHum(BME280_OSRS_H_x1);
 80012f0:	2001      	movs	r0, #1
 80012f2:	f7ff ff2b 	bl	800114c <BME280_SetOversamplingHum>
	value32 = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 80012f6:	20f4      	movs	r0, #244	@ 0xf4
 80012f8:	f7ff fdbc 	bl	8000e74 <BME280_ReadReg>
 80012fc:	4603      	mov	r3, r0
 80012fe:	603b      	str	r3, [r7, #0]
	value32 |= BME280_ReadReg(BME280_REG_CTRL_HUM) << 8;
 8001300:	20f2      	movs	r0, #242	@ 0xf2
 8001302:	f7ff fdb7 	bl	8000e74 <BME280_ReadReg>
 8001306:	4603      	mov	r3, r0
 8001308:	021b      	lsls	r3, r3, #8
 800130a:	461a      	mov	r2, r3
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	4313      	orrs	r3, r2
 8001310:	603b      	str	r3, [r7, #0]
//	sprintf(str1, "Temperature: %s\r\nPressure: %s\r\nHumidity: %s\r\n",
//		(value32 & BME280_OSRS_T_MSK) ? "ON" : "OFF",
//		(value32 & BME280_OSRS_P_MSK) ? "ON" : "OFF",
//		((value32 >> 8) & BME280_OSRS_H_MSK) ? "ON" : "OFF");
//	HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
	BME280_SetMode(BME280_MODE_NORMAL);
 8001312:	2003      	movs	r0, #3
 8001314:	f7ff ff43 	bl	800119e <BME280_SetMode>
}
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <pollKeypad>:

#include "Keypad.h"
#include "main.h"

Key pollKeypad()
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	// check left key
	HAL_GPIO_WritePin(Keypad_C1_OUT_GPIO_Port, Keypad_C1_OUT_Pin, GPIO_PIN_SET);
 8001324:	2201      	movs	r2, #1
 8001326:	2104      	movs	r1, #4
 8001328:	4833      	ldr	r0, [pc, #204]	@ (80013f8 <pollKeypad+0xd8>)
 800132a:	f002 ffb9 	bl	80042a0 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(Keypad_R2_IN_GPIO_Port, Keypad_R2_IN_Pin) == GPIO_PIN_SET)
 800132e:	2101      	movs	r1, #1
 8001330:	4831      	ldr	r0, [pc, #196]	@ (80013f8 <pollKeypad+0xd8>)
 8001332:	f002 ff9d 	bl	8004270 <HAL_GPIO_ReadPin>
 8001336:	4603      	mov	r3, r0
 8001338:	2b01      	cmp	r3, #1
 800133a:	d101      	bne.n	8001340 <pollKeypad+0x20>
	{
		return Left;
 800133c:	2303      	movs	r3, #3
 800133e:	e059      	b.n	80013f4 <pollKeypad+0xd4>
	}
	HAL_GPIO_WritePin(Keypad_C1_OUT_GPIO_Port, Keypad_C1_OUT_Pin, GPIO_PIN_RESET);
 8001340:	2200      	movs	r2, #0
 8001342:	2104      	movs	r1, #4
 8001344:	482c      	ldr	r0, [pc, #176]	@ (80013f8 <pollKeypad+0xd8>)
 8001346:	f002 ffab 	bl	80042a0 <HAL_GPIO_WritePin>

	// check up key
	HAL_GPIO_WritePin(Keypad_C2_OUT_GPIO_Port, Keypad_C2_OUT_Pin, GPIO_PIN_SET);
 800134a:	2201      	movs	r2, #1
 800134c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001350:	4829      	ldr	r0, [pc, #164]	@ (80013f8 <pollKeypad+0xd8>)
 8001352:	f002 ffa5 	bl	80042a0 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(Keypad_R1_IN_GPIO_Port, Keypad_R1_IN_Pin))
 8001356:	2102      	movs	r1, #2
 8001358:	4827      	ldr	r0, [pc, #156]	@ (80013f8 <pollKeypad+0xd8>)
 800135a:	f002 ff89 	bl	8004270 <HAL_GPIO_ReadPin>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <pollKeypad+0x48>
	{
		return Up;
 8001364:	2301      	movs	r3, #1
 8001366:	e045      	b.n	80013f4 <pollKeypad+0xd4>
	}
	HAL_GPIO_WritePin(Keypad_C2_OUT_GPIO_Port, Keypad_C2_OUT_Pin, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800136e:	4822      	ldr	r0, [pc, #136]	@ (80013f8 <pollKeypad+0xd8>)
 8001370:	f002 ff96 	bl	80042a0 <HAL_GPIO_WritePin>

	// check middle key
	HAL_GPIO_WritePin(Keypad_C2_OUT_GPIO_Port, Keypad_C2_OUT_Pin, GPIO_PIN_SET);
 8001374:	2201      	movs	r2, #1
 8001376:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800137a:	481f      	ldr	r0, [pc, #124]	@ (80013f8 <pollKeypad+0xd8>)
 800137c:	f002 ff90 	bl	80042a0 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(Keypad_R2_IN_GPIO_Port, Keypad_R2_IN_Pin))
 8001380:	2101      	movs	r1, #1
 8001382:	481d      	ldr	r0, [pc, #116]	@ (80013f8 <pollKeypad+0xd8>)
 8001384:	f002 ff74 	bl	8004270 <HAL_GPIO_ReadPin>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <pollKeypad+0x72>
	{
		return Middle;
 800138e:	2305      	movs	r3, #5
 8001390:	e030      	b.n	80013f4 <pollKeypad+0xd4>
	}
	HAL_GPIO_WritePin(Keypad_C2_OUT_GPIO_Port, Keypad_C2_OUT_Pin, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001398:	4817      	ldr	r0, [pc, #92]	@ (80013f8 <pollKeypad+0xd8>)
 800139a:	f002 ff81 	bl	80042a0 <HAL_GPIO_WritePin>

	// check down key
	HAL_GPIO_WritePin(Keypad_C2_OUT_GPIO_Port, Keypad_C2_OUT_Pin, GPIO_PIN_SET);
 800139e:	2201      	movs	r2, #1
 80013a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013a4:	4814      	ldr	r0, [pc, #80]	@ (80013f8 <pollKeypad+0xd8>)
 80013a6:	f002 ff7b 	bl	80042a0 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(Keypad_R3_IN_GPIO_Port, Keypad_R3_IN_Pin))
 80013aa:	2101      	movs	r1, #1
 80013ac:	4813      	ldr	r0, [pc, #76]	@ (80013fc <pollKeypad+0xdc>)
 80013ae:	f002 ff5f 	bl	8004270 <HAL_GPIO_ReadPin>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <pollKeypad+0x9c>
	{
		return Down;
 80013b8:	2302      	movs	r3, #2
 80013ba:	e01b      	b.n	80013f4 <pollKeypad+0xd4>
	}
	HAL_GPIO_WritePin(Keypad_C2_OUT_GPIO_Port, Keypad_C2_OUT_Pin, GPIO_PIN_RESET);
 80013bc:	2200      	movs	r2, #0
 80013be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013c2:	480d      	ldr	r0, [pc, #52]	@ (80013f8 <pollKeypad+0xd8>)
 80013c4:	f002 ff6c 	bl	80042a0 <HAL_GPIO_WritePin>

	// check right key
	HAL_GPIO_WritePin(Keypad_C3_OUT_GPIO_Port, Keypad_C3_OUT_Pin, GPIO_PIN_SET);
 80013c8:	2201      	movs	r2, #1
 80013ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013ce:	480a      	ldr	r0, [pc, #40]	@ (80013f8 <pollKeypad+0xd8>)
 80013d0:	f002 ff66 	bl	80042a0 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(Keypad_R2_IN_GPIO_Port, Keypad_R2_IN_Pin))
 80013d4:	2101      	movs	r1, #1
 80013d6:	4808      	ldr	r0, [pc, #32]	@ (80013f8 <pollKeypad+0xd8>)
 80013d8:	f002 ff4a 	bl	8004270 <HAL_GPIO_ReadPin>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <pollKeypad+0xc6>
	{
		return Right;
 80013e2:	2304      	movs	r3, #4
 80013e4:	e006      	b.n	80013f4 <pollKeypad+0xd4>
	}
	HAL_GPIO_WritePin(Keypad_C3_OUT_GPIO_Port, Keypad_C3_OUT_Pin, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013ec:	4802      	ldr	r0, [pc, #8]	@ (80013f8 <pollKeypad+0xd8>)
 80013ee:	f002 ff57 	bl	80042a0 <HAL_GPIO_WritePin>

	return None;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	48000800 	.word	0x48000800
 80013fc:	48000400 	.word	0x48000400

08001400 <keyToString>:

const char* keyToString(Key key)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
	switch (key)
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	3b01      	subs	r3, #1
 800140e:	2b04      	cmp	r3, #4
 8001410:	d816      	bhi.n	8001440 <keyToString+0x40>
 8001412:	a201      	add	r2, pc, #4	@ (adr r2, 8001418 <keyToString+0x18>)
 8001414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001418:	0800142d 	.word	0x0800142d
 800141c:	08001435 	.word	0x08001435
 8001420:	08001439 	.word	0x08001439
 8001424:	0800143d 	.word	0x0800143d
 8001428:	08001431 	.word	0x08001431
	{
	case Up:
		return "Up";
 800142c:	4b08      	ldr	r3, [pc, #32]	@ (8001450 <keyToString+0x50>)
 800142e:	e008      	b.n	8001442 <keyToString+0x42>
	case Middle:
		return "Middle";
 8001430:	4b08      	ldr	r3, [pc, #32]	@ (8001454 <keyToString+0x54>)
 8001432:	e006      	b.n	8001442 <keyToString+0x42>
	case Down:
		return "Down";
 8001434:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <keyToString+0x58>)
 8001436:	e004      	b.n	8001442 <keyToString+0x42>
	case Left:
		return "Left";
 8001438:	4b08      	ldr	r3, [pc, #32]	@ (800145c <keyToString+0x5c>)
 800143a:	e002      	b.n	8001442 <keyToString+0x42>
	case Right:
		return "Right";
 800143c:	4b08      	ldr	r3, [pc, #32]	@ (8001460 <keyToString+0x60>)
 800143e:	e000      	b.n	8001442 <keyToString+0x42>
	default:
		return "None";
 8001440:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <keyToString+0x64>)
	}
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	0800fc70 	.word	0x0800fc70
 8001454:	0800fc74 	.word	0x0800fc74
 8001458:	0800fc7c 	.word	0x0800fc7c
 800145c:	0800fc84 	.word	0x0800fc84
 8001460:	0800fc8c 	.word	0x0800fc8c
 8001464:	0800fc94 	.word	0x0800fc94

08001468 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800146e:	463b      	mov	r3, r7
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
 800147c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800147e:	4b27      	ldr	r3, [pc, #156]	@ (800151c <MX_ADC2_Init+0xb4>)
 8001480:	4a27      	ldr	r2, [pc, #156]	@ (8001520 <MX_ADC2_Init+0xb8>)
 8001482:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001484:	4b25      	ldr	r3, [pc, #148]	@ (800151c <MX_ADC2_Init+0xb4>)
 8001486:	2200      	movs	r2, #0
 8001488:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800148a:	4b24      	ldr	r3, [pc, #144]	@ (800151c <MX_ADC2_Init+0xb4>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001490:	4b22      	ldr	r3, [pc, #136]	@ (800151c <MX_ADC2_Init+0xb4>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001496:	4b21      	ldr	r3, [pc, #132]	@ (800151c <MX_ADC2_Init+0xb4>)
 8001498:	2200      	movs	r2, #0
 800149a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800149c:	4b1f      	ldr	r3, [pc, #124]	@ (800151c <MX_ADC2_Init+0xb4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014a4:	4b1d      	ldr	r3, [pc, #116]	@ (800151c <MX_ADC2_Init+0xb4>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014aa:	4b1c      	ldr	r3, [pc, #112]	@ (800151c <MX_ADC2_Init+0xb4>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014b0:	4b1a      	ldr	r3, [pc, #104]	@ (800151c <MX_ADC2_Init+0xb4>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80014b6:	4b19      	ldr	r3, [pc, #100]	@ (800151c <MX_ADC2_Init+0xb4>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80014bc:	4b17      	ldr	r3, [pc, #92]	@ (800151c <MX_ADC2_Init+0xb4>)
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014c4:	4b15      	ldr	r3, [pc, #84]	@ (800151c <MX_ADC2_Init+0xb4>)
 80014c6:	2204      	movs	r2, #4
 80014c8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80014ca:	4b14      	ldr	r3, [pc, #80]	@ (800151c <MX_ADC2_Init+0xb4>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014d0:	4b12      	ldr	r3, [pc, #72]	@ (800151c <MX_ADC2_Init+0xb4>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80014d6:	4811      	ldr	r0, [pc, #68]	@ (800151c <MX_ADC2_Init+0xb4>)
 80014d8:	f001 fb2c 	bl	8002b34 <HAL_ADC_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80014e2:	f000 fdad 	bl	8002040 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014e6:	2301      	movs	r3, #1
 80014e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014ea:	2301      	movs	r3, #1
 80014ec:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014fe:	463b      	mov	r3, r7
 8001500:	4619      	mov	r1, r3
 8001502:	4806      	ldr	r0, [pc, #24]	@ (800151c <MX_ADC2_Init+0xb4>)
 8001504:	f001 ffde 	bl	80034c4 <HAL_ADC_ConfigChannel>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800150e:	f000 fd97 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000224 	.word	0x20000224
 8001520:	50000100 	.word	0x50000100

08001524 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	@ 0x28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a15      	ldr	r2, [pc, #84]	@ (8001598 <HAL_ADC_MspInit+0x74>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d124      	bne.n	8001590 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001546:	4b15      	ldr	r3, [pc, #84]	@ (800159c <HAL_ADC_MspInit+0x78>)
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	4a14      	ldr	r2, [pc, #80]	@ (800159c <HAL_ADC_MspInit+0x78>)
 800154c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001550:	6153      	str	r3, [r2, #20]
 8001552:	4b12      	ldr	r3, [pc, #72]	@ (800159c <HAL_ADC_MspInit+0x78>)
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	4b0f      	ldr	r3, [pc, #60]	@ (800159c <HAL_ADC_MspInit+0x78>)
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	4a0e      	ldr	r2, [pc, #56]	@ (800159c <HAL_ADC_MspInit+0x78>)
 8001564:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001568:	6153      	str	r3, [r2, #20]
 800156a:	4b0c      	ldr	r3, [pc, #48]	@ (800159c <HAL_ADC_MspInit+0x78>)
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = BATT_ADC_Pin;
 8001576:	2310      	movs	r3, #16
 8001578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800157a:	2303      	movs	r3, #3
 800157c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_ADC_GPIO_Port, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800158c:	f002 fce6 	bl	8003f5c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001590:	bf00      	nop
 8001592:	3728      	adds	r7, #40	@ 0x28
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	50000100 	.word	0x50000100
 800159c:	40021000 	.word	0x40021000

080015a0 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 80015a8:	4a09      	ldr	r2, [pc, #36]	@ (80015d0 <DS3231_Init+0x30>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 80015ae:	2000      	movs	r0, #0
 80015b0:	f000 f8a9 	bl	8001706 <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 80015b4:	2000      	movs	r0, #0
 80015b6:	f000 f86d 	bl	8001694 <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 80015ba:	f000 f8c6 	bl	800174a <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 80015be:	f000 f88c 	bl	80016da <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80015c2:	2001      	movs	r0, #1
 80015c4:	f000 f846 	bl	8001654 <DS3231_SetInterruptMode>
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000274 	.word	0x20000274

080015d4 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af02      	add	r7, sp, #8
 80015da:	4603      	mov	r3, r0
 80015dc:	460a      	mov	r2, r1
 80015de:	71fb      	strb	r3, [r7, #7]
 80015e0:	4613      	mov	r3, r2
 80015e2:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	733b      	strb	r3, [r7, #12]
 80015e8:	79bb      	ldrb	r3, [r7, #6]
 80015ea:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 80015ec:	4b07      	ldr	r3, [pc, #28]	@ (800160c <DS3231_SetRegByte+0x38>)
 80015ee:	6818      	ldr	r0, [r3, #0]
 80015f0:	f107 020c 	add.w	r2, r7, #12
 80015f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	2302      	movs	r3, #2
 80015fc:	21d0      	movs	r1, #208	@ 0xd0
 80015fe:	f002 ff1d 	bl	800443c <HAL_I2C_Master_Transmit>
}
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000274 	.word	0x20000274

08001610 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af02      	add	r7, sp, #8
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 800161a:	4b0d      	ldr	r3, [pc, #52]	@ (8001650 <DS3231_GetRegByte+0x40>)
 800161c:	6818      	ldr	r0, [r3, #0]
 800161e:	1dfa      	adds	r2, r7, #7
 8001620:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	2301      	movs	r3, #1
 8001628:	21d0      	movs	r1, #208	@ 0xd0
 800162a:	f002 ff07 	bl	800443c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 800162e:	4b08      	ldr	r3, [pc, #32]	@ (8001650 <DS3231_GetRegByte+0x40>)
 8001630:	6818      	ldr	r0, [r3, #0]
 8001632:	f107 020f 	add.w	r2, r7, #15
 8001636:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2301      	movs	r3, #1
 800163e:	21d0      	movs	r1, #208	@ 0xd0
 8001640:	f003 f814 	bl	800466c <HAL_I2C_Master_Receive>
	return val;
 8001644:	7bfb      	ldrb	r3, [r7, #15]
}
 8001646:	4618      	mov	r0, r3
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000274 	.word	0x20000274

08001654 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 800165e:	200e      	movs	r0, #14
 8001660:	f7ff ffd6 	bl	8001610 <DS3231_GetRegByte>
 8001664:	4603      	mov	r3, r0
 8001666:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 8001668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800166c:	f023 0304 	bic.w	r3, r3, #4
 8001670:	b25a      	sxtb	r2, r3
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	b25b      	sxtb	r3, r3
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	b25b      	sxtb	r3, r3
 800167e:	4313      	orrs	r3, r2
 8001680:	b25b      	sxtb	r3, r3
 8001682:	b2db      	uxtb	r3, r3
 8001684:	4619      	mov	r1, r3
 8001686:	200e      	movs	r0, #14
 8001688:	f7ff ffa4 	bl	80015d4 <DS3231_SetRegByte>
}
 800168c:	bf00      	nop
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 800169e:	200e      	movs	r0, #14
 80016a0:	f7ff ffb6 	bl	8001610 <DS3231_GetRegByte>
 80016a4:	4603      	mov	r3, r0
 80016a6:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 80016a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ac:	f023 0302 	bic.w	r3, r3, #2
 80016b0:	b25a      	sxtb	r2, r3
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	b25b      	sxtb	r3, r3
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	4313      	orrs	r3, r2
 80016c0:	b25b      	sxtb	r3, r3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	4619      	mov	r1, r3
 80016c6:	200e      	movs	r0, #14
 80016c8:	f7ff ff84 	bl	80015d4 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80016cc:	2001      	movs	r0, #1
 80016ce:	f7ff ffc1 	bl	8001654 <DS3231_SetInterruptMode>
}
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 80016e0:	200f      	movs	r0, #15
 80016e2:	f7ff ff95 	bl	8001610 <DS3231_GetRegByte>
 80016e6:	4603      	mov	r3, r0
 80016e8:	f023 0302 	bic.w	r3, r3, #2
 80016ec:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	f023 0302 	bic.w	r3, r3, #2
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	4619      	mov	r1, r3
 80016f8:	200f      	movs	r0, #15
 80016fa:	f7ff ff6b 	bl	80015d4 <DS3231_SetRegByte>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 8001706:	b580      	push	{r7, lr}
 8001708:	b084      	sub	sp, #16
 800170a:	af00      	add	r7, sp, #0
 800170c:	4603      	mov	r3, r0
 800170e:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8001710:	200e      	movs	r0, #14
 8001712:	f7ff ff7d 	bl	8001610 <DS3231_GetRegByte>
 8001716:	4603      	mov	r3, r0
 8001718:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 800171a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171e:	f023 0301 	bic.w	r3, r3, #1
 8001722:	b25a      	sxtb	r2, r3
 8001724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	b25b      	sxtb	r3, r3
 800172e:	4313      	orrs	r3, r2
 8001730:	b25b      	sxtb	r3, r3
 8001732:	b2db      	uxtb	r3, r3
 8001734:	4619      	mov	r1, r3
 8001736:	200e      	movs	r0, #14
 8001738:	f7ff ff4c 	bl	80015d4 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 800173c:	2001      	movs	r0, #1
 800173e:	f7ff ff89 	bl	8001654 <DS3231_SetInterruptMode>
}
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8001750:	200f      	movs	r0, #15
 8001752:	f7ff ff5d 	bl	8001610 <DS3231_GetRegByte>
 8001756:	4603      	mov	r3, r0
 8001758:	f023 0301 	bic.w	r3, r3, #1
 800175c:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	f023 0301 	bic.w	r3, r3, #1
 8001764:	b2db      	uxtb	r3, r3
 8001766:	4619      	mov	r1, r3
 8001768:	200f      	movs	r0, #15
 800176a:	f7ff ff33 	bl	80015d4 <DS3231_SetRegByte>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 8001776:	b580      	push	{r7, lr}
 8001778:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 800177a:	2002      	movs	r0, #2
 800177c:	f7ff ff48 	bl	8001610 <DS3231_GetRegByte>
 8001780:	4603      	mov	r3, r0
 8001782:	4618      	mov	r0, r3
 8001784:	f000 f842 	bl	800180c <DS3231_DecodeBCD>
 8001788:	4603      	mov	r3, r0
}
 800178a:	4618      	mov	r0, r3
 800178c:	bd80      	pop	{r7, pc}

0800178e <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 800178e:	b580      	push	{r7, lr}
 8001790:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 8001792:	2001      	movs	r0, #1
 8001794:	f7ff ff3c 	bl	8001610 <DS3231_GetRegByte>
 8001798:	4603      	mov	r3, r0
 800179a:	4618      	mov	r0, r3
 800179c:	f000 f836 	bl	800180c <DS3231_DecodeBCD>
 80017a0:	4603      	mov	r3, r0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <DS3231_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS3231_GetSecond(void) {
 80017a6:	b580      	push	{r7, lr}
 80017a8:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_SECOND));
 80017aa:	2000      	movs	r0, #0
 80017ac:	f7ff ff30 	bl	8001610 <DS3231_GetRegByte>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f82a 	bl	800180c <DS3231_DecodeBCD>
 80017b8:	4603      	mov	r3, r0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	bd80      	pop	{r7, pc}

080017be <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	4603      	mov	r3, r0
 80017c6:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 f835 	bl	8001840 <DS3231_EncodeBCD>
 80017d6:	4603      	mov	r3, r0
 80017d8:	4619      	mov	r1, r3
 80017da:	2002      	movs	r0, #2
 80017dc:	f7ff fefa 	bl	80015d4 <DS3231_SetRegByte>
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f000 f823 	bl	8001840 <DS3231_EncodeBCD>
 80017fa:	4603      	mov	r3, r0
 80017fc:	4619      	mov	r1, r3
 80017fe:	2001      	movs	r0, #1
 8001800:	f7ff fee8 	bl	80015d4 <DS3231_SetRegByte>
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	091b      	lsrs	r3, r3, #4
 800181a:	b2db      	uxtb	r3, r3
 800181c:	461a      	mov	r2, r3
 800181e:	0092      	lsls	r2, r2, #2
 8001820:	4413      	add	r3, r2
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	b2da      	uxtb	r2, r3
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	f003 030f 	and.w	r3, r3, #15
 800182c:	b2db      	uxtb	r3, r3
 800182e:	4413      	add	r3, r2
 8001830:	b2db      	uxtb	r3, r3
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 800184a:	79fa      	ldrb	r2, [r7, #7]
 800184c:	4b0c      	ldr	r3, [pc, #48]	@ (8001880 <DS3231_EncodeBCD+0x40>)
 800184e:	fba3 1302 	umull	r1, r3, r3, r2
 8001852:	08d9      	lsrs	r1, r3, #3
 8001854:	460b      	mov	r3, r1
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	b2da      	uxtb	r2, r3
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	4907      	ldr	r1, [pc, #28]	@ (8001880 <DS3231_EncodeBCD+0x40>)
 8001864:	fba1 1303 	umull	r1, r3, r1, r3
 8001868:	08db      	lsrs	r3, r3, #3
 800186a:	b2db      	uxtb	r3, r3
 800186c:	011b      	lsls	r3, r3, #4
 800186e:	b2db      	uxtb	r3, r3
 8001870:	4413      	add	r3, r2
 8001872:	b2db      	uxtb	r3, r3
}
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	cccccccd 	.word	0xcccccccd

08001884 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of readBattVoltage */
	readBattVoltageHandle = osThreadNew(StartReadBattVoltageTask, NULL, &readBattVoltage_attributes);
 8001888:	4a18      	ldr	r2, [pc, #96]	@ (80018ec <MX_FREERTOS_Init+0x68>)
 800188a:	2100      	movs	r1, #0
 800188c:	4818      	ldr	r0, [pc, #96]	@ (80018f0 <MX_FREERTOS_Init+0x6c>)
 800188e:	f007 f8df 	bl	8008a50 <osThreadNew>
 8001892:	4603      	mov	r3, r0
 8001894:	4a17      	ldr	r2, [pc, #92]	@ (80018f4 <MX_FREERTOS_Init+0x70>)
 8001896:	6013      	str	r3, [r2, #0]

	/* creation of renderUI */
	renderUIHandle = osThreadNew(StartRenderUITask, NULL, &renderUI_attributes);
 8001898:	4a17      	ldr	r2, [pc, #92]	@ (80018f8 <MX_FREERTOS_Init+0x74>)
 800189a:	2100      	movs	r1, #0
 800189c:	4817      	ldr	r0, [pc, #92]	@ (80018fc <MX_FREERTOS_Init+0x78>)
 800189e:	f007 f8d7 	bl	8008a50 <osThreadNew>
 80018a2:	4603      	mov	r3, r0
 80018a4:	4a16      	ldr	r2, [pc, #88]	@ (8001900 <MX_FREERTOS_Init+0x7c>)
 80018a6:	6013      	str	r3, [r2, #0]

	/* creation of pollKeypad */
	pollKeypadHandle = osThreadNew(StartPollKeypadTask, NULL, &pollKeypad_attributes);
 80018a8:	4a16      	ldr	r2, [pc, #88]	@ (8001904 <MX_FREERTOS_Init+0x80>)
 80018aa:	2100      	movs	r1, #0
 80018ac:	4816      	ldr	r0, [pc, #88]	@ (8001908 <MX_FREERTOS_Init+0x84>)
 80018ae:	f007 f8cf 	bl	8008a50 <osThreadNew>
 80018b2:	4603      	mov	r3, r0
 80018b4:	4a15      	ldr	r2, [pc, #84]	@ (800190c <MX_FREERTOS_Init+0x88>)
 80018b6:	6013      	str	r3, [r2, #0]

	/* creation of readBMEValues */
	readBMEValuesHandle = osThreadNew(StartReadBMEValuesTask, NULL, &readBMEValues_attributes);
 80018b8:	4a15      	ldr	r2, [pc, #84]	@ (8001910 <MX_FREERTOS_Init+0x8c>)
 80018ba:	2100      	movs	r1, #0
 80018bc:	4815      	ldr	r0, [pc, #84]	@ (8001914 <MX_FREERTOS_Init+0x90>)
 80018be:	f007 f8c7 	bl	8008a50 <osThreadNew>
 80018c2:	4603      	mov	r3, r0
 80018c4:	4a14      	ldr	r2, [pc, #80]	@ (8001918 <MX_FREERTOS_Init+0x94>)
 80018c6:	6013      	str	r3, [r2, #0]

	/* creation of readDateTime */
	readDateTimeHandle = osThreadNew(StartReadDateTimeTask, NULL, &readDateTime_attributes);
 80018c8:	4a14      	ldr	r2, [pc, #80]	@ (800191c <MX_FREERTOS_Init+0x98>)
 80018ca:	2100      	movs	r1, #0
 80018cc:	4814      	ldr	r0, [pc, #80]	@ (8001920 <MX_FREERTOS_Init+0x9c>)
 80018ce:	f007 f8bf 	bl	8008a50 <osThreadNew>
 80018d2:	4603      	mov	r3, r0
 80018d4:	4a13      	ldr	r2, [pc, #76]	@ (8001924 <MX_FREERTOS_Init+0xa0>)
 80018d6:	6013      	str	r3, [r2, #0]

	/* creation of blinkStatusLED */
	blinkStatusLEDHandle = osThreadNew(StartBlinkStatusLEDTask, NULL, &blinkStatusLED_attributes);
 80018d8:	4a13      	ldr	r2, [pc, #76]	@ (8001928 <MX_FREERTOS_Init+0xa4>)
 80018da:	2100      	movs	r1, #0
 80018dc:	4813      	ldr	r0, [pc, #76]	@ (800192c <MX_FREERTOS_Init+0xa8>)
 80018de:	f007 f8b7 	bl	8008a50 <osThreadNew>
 80018e2:	4603      	mov	r3, r0
 80018e4:	4a12      	ldr	r2, [pc, #72]	@ (8001930 <MX_FREERTOS_Init+0xac>)
 80018e6:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	0800fd54 	.word	0x0800fd54
 80018f0:	08001935 	.word	0x08001935
 80018f4:	20000308 	.word	0x20000308
 80018f8:	0800fd78 	.word	0x0800fd78
 80018fc:	080019d5 	.word	0x080019d5
 8001900:	2000030c 	.word	0x2000030c
 8001904:	0800fd9c 	.word	0x0800fd9c
 8001908:	08001a21 	.word	0x08001a21
 800190c:	20000310 	.word	0x20000310
 8001910:	0800fdc0 	.word	0x0800fdc0
 8001914:	08001af5 	.word	0x08001af5
 8001918:	20000314 	.word	0x20000314
 800191c:	0800fde4 	.word	0x0800fde4
 8001920:	08001b1d 	.word	0x08001b1d
 8001924:	20000318 	.word	0x20000318
 8001928:	0800fe08 	.word	0x0800fe08
 800192c:	08001b99 	.word	0x08001b99
 8001930:	2000031c 	.word	0x2000031c

08001934 <StartReadBattVoltageTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartReadBattVoltageTask */
void StartReadBattVoltageTask(void *argument)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartReadBattVoltageTask */
	/* Infinite loop */

	for (;;)
	{
		HAL_ADC_Start(&hadc2);
 800193c:	4821      	ldr	r0, [pc, #132]	@ (80019c4 <StartReadBattVoltageTask+0x90>)
 800193e:	f001 faf3 	bl	8002f28 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, 10);
 8001942:	210a      	movs	r1, #10
 8001944:	481f      	ldr	r0, [pc, #124]	@ (80019c4 <StartReadBattVoltageTask+0x90>)
 8001946:	f001 fc3b 	bl	80031c0 <HAL_ADC_PollForConversion>
		battery.raw_adc_value = HAL_ADC_GetValue(&hadc2);
 800194a:	481e      	ldr	r0, [pc, #120]	@ (80019c4 <StartReadBattVoltageTask+0x90>)
 800194c:	f001 fd3a 	bl	80033c4 <HAL_ADC_GetValue>
 8001950:	4603      	mov	r3, r0
 8001952:	b29a      	uxth	r2, r3
 8001954:	4b1c      	ldr	r3, [pc, #112]	@ (80019c8 <StartReadBattVoltageTask+0x94>)
 8001956:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc2);
 8001958:	481a      	ldr	r0, [pc, #104]	@ (80019c4 <StartReadBattVoltageTask+0x90>)
 800195a:	f001 fbfb 	bl	8003154 <HAL_ADC_Stop>
		battery.voltage = (float) (battery.raw_adc_value * (3.3f / 4096.0f));
 800195e:	4b1a      	ldr	r3, [pc, #104]	@ (80019c8 <StartReadBattVoltageTask+0x94>)
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	ee07 3a90 	vmov	s15, r3
 8001966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800196a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80019cc <StartReadBattVoltageTask+0x98>
 800196e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001972:	4b15      	ldr	r3, [pc, #84]	@ (80019c8 <StartReadBattVoltageTask+0x94>)
 8001974:	edc3 7a01 	vstr	s15, [r3, #4]
		battery.voltage_integer_part = (int) battery.voltage;
 8001978:	4b13      	ldr	r3, [pc, #76]	@ (80019c8 <StartReadBattVoltageTask+0x94>)
 800197a:	edd3 7a01 	vldr	s15, [r3, #4]
 800197e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001982:	edc7 7a00 	vstr	s15, [r7]
 8001986:	783a      	ldrb	r2, [r7, #0]
 8001988:	4b0f      	ldr	r3, [pc, #60]	@ (80019c8 <StartReadBattVoltageTask+0x94>)
 800198a:	709a      	strb	r2, [r3, #2]
		battery.voltage_float_part = (int) ((battery.voltage - battery.voltage_integer_part) * 100); // тут костыль надо будет разобратся
 800198c:	4b0e      	ldr	r3, [pc, #56]	@ (80019c8 <StartReadBattVoltageTask+0x94>)
 800198e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001992:	4b0d      	ldr	r3, [pc, #52]	@ (80019c8 <StartReadBattVoltageTask+0x94>)
 8001994:	789b      	ldrb	r3, [r3, #2]
 8001996:	ee07 3a90 	vmov	s15, r3
 800199a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800199e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019a2:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80019d0 <StartReadBattVoltageTask+0x9c>
 80019a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019ae:	edc7 7a00 	vstr	s15, [r7]
 80019b2:	783a      	ldrb	r2, [r7, #0]
 80019b4:	4b04      	ldr	r3, [pc, #16]	@ (80019c8 <StartReadBattVoltageTask+0x94>)
 80019b6:	70da      	strb	r2, [r3, #3]
//		HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
		osDelay(100);
 80019b8:	2064      	movs	r0, #100	@ 0x64
 80019ba:	f007 f8f3 	bl	8008ba4 <osDelay>
		HAL_ADC_Start(&hadc2);
 80019be:	bf00      	nop
 80019c0:	e7bc      	b.n	800193c <StartReadBattVoltageTask+0x8>
 80019c2:	bf00      	nop
 80019c4:	20000224 	.word	0x20000224
 80019c8:	200002e0 	.word	0x200002e0
 80019cc:	3a533333 	.word	0x3a533333
 80019d0:	42c80000 	.word	0x42c80000

080019d4 <StartRenderUITask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartRenderUITask */
void StartRenderUITask(void *argument)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartRenderUITask */

	/* Infinite loop */
	for (;;)
	{
		switch (menu_pages[menu_kursor])
 80019dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001a18 <StartRenderUITask+0x44>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a1c <StartRenderUITask+0x48>)
 80019e4:	5c9b      	ldrb	r3, [r3, r2]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d00c      	beq.n	8001a04 <StartRenderUITask+0x30>
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	dc0d      	bgt.n	8001a0a <StartRenderUITask+0x36>
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d002      	beq.n	80019f8 <StartRenderUITask+0x24>
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d003      	beq.n	80019fe <StartRenderUITask+0x2a>
 80019f6:	e008      	b.n	8001a0a <StartRenderUITask+0x36>
		{
		case BatteryMenu:
			showBatteryMenu();
 80019f8:	f000 f8de 	bl	8001bb8 <showBatteryMenu>
			break;
 80019fc:	e008      	b.n	8001a10 <StartRenderUITask+0x3c>
		case TemperatureMenu:
			showTemperatureMenu();
 80019fe:	f000 f903 	bl	8001c08 <showTemperatureMenu>
			break;
 8001a02:	e005      	b.n	8001a10 <StartRenderUITask+0x3c>
		case TimeMenu:
			showTimeMenu();
 8001a04:	f000 f92a 	bl	8001c5c <showTimeMenu>
			break;
 8001a08:	e002      	b.n	8001a10 <StartRenderUITask+0x3c>
		default:
			showBatteryMenu();
 8001a0a:	f000 f8d5 	bl	8001bb8 <showBatteryMenu>
			break;
 8001a0e:	bf00      	nop
		}

		osDelay(25); // refresh rate
 8001a10:	2019      	movs	r0, #25
 8001a12:	f007 f8c7 	bl	8008ba4 <osDelay>
		switch (menu_pages[menu_kursor])
 8001a16:	e7e1      	b.n	80019dc <StartRenderUITask+0x8>
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	20000004 	.word	0x20000004

08001a20 <StartPollKeypadTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartPollKeypadTask */
void StartPollKeypadTask(void *argument)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartPollKeypadTask */
	/* Infinite loop */
	for (;;)
	{
		key_pressed = pollKeypad();
 8001a28:	f7ff fc7a 	bl	8001320 <pollKeypad>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	461a      	mov	r2, r3
 8001a30:	4b29      	ldr	r3, [pc, #164]	@ (8001ad8 <StartPollKeypadTask+0xb8>)
 8001a32:	701a      	strb	r2, [r3, #0]

		if ((previos_key != key_pressed) && (key_pressed != None))
 8001a34:	4b29      	ldr	r3, [pc, #164]	@ (8001adc <StartPollKeypadTask+0xbc>)
 8001a36:	781a      	ldrb	r2, [r3, #0]
 8001a38:	4b27      	ldr	r3, [pc, #156]	@ (8001ad8 <StartPollKeypadTask+0xb8>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d046      	beq.n	8001ace <StartPollKeypadTask+0xae>
 8001a40:	4b25      	ldr	r3, [pc, #148]	@ (8001ad8 <StartPollKeypadTask+0xb8>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d042      	beq.n	8001ace <StartPollKeypadTask+0xae>
		{
			previos_key = key_pressed;
 8001a48:	4b23      	ldr	r3, [pc, #140]	@ (8001ad8 <StartPollKeypadTask+0xb8>)
 8001a4a:	781a      	ldrb	r2, [r3, #0]
 8001a4c:	4b23      	ldr	r3, [pc, #140]	@ (8001adc <StartPollKeypadTask+0xbc>)
 8001a4e:	701a      	strb	r2, [r3, #0]

			// print key for debugging
			sprintf(msg_buffer, "Key pressed: %s\r\n", keyToString(key_pressed));
 8001a50:	4b21      	ldr	r3, [pc, #132]	@ (8001ad8 <StartPollKeypadTask+0xb8>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fcd3 	bl	8001400 <keyToString>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4920      	ldr	r1, [pc, #128]	@ (8001ae0 <StartPollKeypadTask+0xc0>)
 8001a60:	4820      	ldr	r0, [pc, #128]	@ (8001ae4 <StartPollKeypadTask+0xc4>)
 8001a62:	f00a fc69 	bl	800c338 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msg_buffer, strlen(msg_buffer), 1000);
 8001a66:	481f      	ldr	r0, [pc, #124]	@ (8001ae4 <StartPollKeypadTask+0xc4>)
 8001a68:	f7fe fc0a 	bl	8000280 <strlen>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a74:	491b      	ldr	r1, [pc, #108]	@ (8001ae4 <StartPollKeypadTask+0xc4>)
 8001a76:	481c      	ldr	r0, [pc, #112]	@ (8001ae8 <StartPollKeypadTask+0xc8>)
 8001a78:	f006 fb08 	bl	800808c <HAL_UART_Transmit>

			// make beep sound
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 500);
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001aec <StartPollKeypadTask+0xcc>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001a84:	635a      	str	r2, [r3, #52]	@ 0x34
			osDelay(100);
 8001a86:	2064      	movs	r0, #100	@ 0x64
 8001a88:	f007 f88c 	bl	8008ba4 <osDelay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001a8c:	4b17      	ldr	r3, [pc, #92]	@ (8001aec <StartPollKeypadTask+0xcc>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2200      	movs	r2, #0
 8001a92:	635a      	str	r2, [r3, #52]	@ 0x34

			// change if needed menu cursor
			if (key_pressed == Left && menu_kursor > 0)
 8001a94:	4b10      	ldr	r3, [pc, #64]	@ (8001ad8 <StartPollKeypadTask+0xb8>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	d10a      	bne.n	8001ab2 <StartPollKeypadTask+0x92>
 8001a9c:	4b14      	ldr	r3, [pc, #80]	@ (8001af0 <StartPollKeypadTask+0xd0>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d006      	beq.n	8001ab2 <StartPollKeypadTask+0x92>
			{
//				if (menu_kursor == 0)
//				{
//					menu_kursor = sizeof(menu_pages) / sizeof(menu_pages[0]);
//				}
				menu_kursor--;
 8001aa4:	4b12      	ldr	r3, [pc, #72]	@ (8001af0 <StartPollKeypadTask+0xd0>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	4b10      	ldr	r3, [pc, #64]	@ (8001af0 <StartPollKeypadTask+0xd0>)
 8001aae:	701a      	strb	r2, [r3, #0]
 8001ab0:	e00d      	b.n	8001ace <StartPollKeypadTask+0xae>
			}
			else if (key_pressed == Right && menu_kursor < (sizeof(menu_pages) / sizeof(menu_pages[0])))
 8001ab2:	4b09      	ldr	r3, [pc, #36]	@ (8001ad8 <StartPollKeypadTask+0xb8>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d109      	bne.n	8001ace <StartPollKeypadTask+0xae>
 8001aba:	4b0d      	ldr	r3, [pc, #52]	@ (8001af0 <StartPollKeypadTask+0xd0>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d805      	bhi.n	8001ace <StartPollKeypadTask+0xae>
			{
//				if (menu_kursor == (sizeof(menu_pages) / sizeof(menu_pages[0]) - 1))
//				{
//					menu_kursor = 0;
//				}
				menu_kursor++;
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8001af0 <StartPollKeypadTask+0xd0>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <StartPollKeypadTask+0xd0>)
 8001acc:	701a      	strb	r2, [r3, #0]
			}

		}
		osDelay(100);
 8001ace:	2064      	movs	r0, #100	@ 0x64
 8001ad0:	f007 f868 	bl	8008ba4 <osDelay>
		key_pressed = pollKeypad();
 8001ad4:	e7a8      	b.n	8001a28 <StartPollKeypadTask+0x8>
 8001ad6:	bf00      	nop
 8001ad8:	200002dc 	.word	0x200002dc
 8001adc:	200002dd 	.word	0x200002dd
 8001ae0:	0800fcf4 	.word	0x0800fcf4
 8001ae4:	20000278 	.word	0x20000278
 8001ae8:	20000618 	.word	0x20000618
 8001aec:	200005cc 	.word	0x200005cc
 8001af0:	20000000 	.word	0x20000000

08001af4 <StartReadBMEValuesTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartReadBMEValuesTask */
void StartReadBMEValuesTask(void *argument)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartReadBMEValuesTask */
	/* Infinite loop */
	for (;;)
	{
		// temperature
		bme_values.temperature = BME280_ReadTemperature();
 8001afc:	f7ff fb6e 	bl	80011dc <BME280_ReadTemperature>
 8001b00:	eef0 7a40 	vmov.f32	s15, s0
 8001b04:	4b04      	ldr	r3, [pc, #16]	@ (8001b18 <StartReadBMEValuesTask+0x24>)
 8001b06:	edc3 7a00 	vstr	s15, [r3]
//		bme_values.altitude = BME280_ReadAltitude(SEALEVELPRESSURE_PA);
//
//		// humidity
//		bme_values.humidity = BME280_ReadHumidity();

		osDelay(2000);
 8001b0a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b0e:	f007 f849 	bl	8008ba4 <osDelay>
		bme_values.temperature = BME280_ReadTemperature();
 8001b12:	bf00      	nop
 8001b14:	e7f2      	b.n	8001afc <StartReadBMEValuesTask+0x8>
 8001b16:	bf00      	nop
 8001b18:	200002f0 	.word	0x200002f0

08001b1c <StartReadDateTimeTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartReadDateTimeTask */
void StartReadDateTimeTask(void *argument)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af02      	add	r7, sp, #8
 8001b22:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartReadDateTimeTask */
	/* Infinite loop */
	for (;;)
	{
		date_time.hour = DS3231_GetHour();
 8001b24:	f7ff fe27 	bl	8001776 <DS3231_GetHour>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	4b16      	ldr	r3, [pc, #88]	@ (8001b88 <StartReadDateTimeTask+0x6c>)
 8001b2e:	70da      	strb	r2, [r3, #3]
		date_time.minute = DS3231_GetMinute();
 8001b30:	f7ff fe2d 	bl	800178e <DS3231_GetMinute>
 8001b34:	4603      	mov	r3, r0
 8001b36:	461a      	mov	r2, r3
 8001b38:	4b13      	ldr	r3, [pc, #76]	@ (8001b88 <StartReadDateTimeTask+0x6c>)
 8001b3a:	711a      	strb	r2, [r3, #4]
		date_time.second = DS3231_GetSecond();
 8001b3c:	f7ff fe33 	bl	80017a6 <DS3231_GetSecond>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b10      	ldr	r3, [pc, #64]	@ (8001b88 <StartReadDateTimeTask+0x6c>)
 8001b46:	715a      	strb	r2, [r3, #5]
		sprintf(msg_buffer, "%d : %d : %d\r\n", date_time.hour, date_time.minute, date_time.second);
 8001b48:	4b0f      	ldr	r3, [pc, #60]	@ (8001b88 <StartReadDateTimeTask+0x6c>)
 8001b4a:	78db      	ldrb	r3, [r3, #3]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b88 <StartReadDateTimeTask+0x6c>)
 8001b50:	791b      	ldrb	r3, [r3, #4]
 8001b52:	4619      	mov	r1, r3
 8001b54:	4b0c      	ldr	r3, [pc, #48]	@ (8001b88 <StartReadDateTimeTask+0x6c>)
 8001b56:	795b      	ldrb	r3, [r3, #5]
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	490b      	ldr	r1, [pc, #44]	@ (8001b8c <StartReadDateTimeTask+0x70>)
 8001b5e:	480c      	ldr	r0, [pc, #48]	@ (8001b90 <StartReadDateTimeTask+0x74>)
 8001b60:	f00a fbea 	bl	800c338 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg_buffer, strlen(msg_buffer), 1000);
 8001b64:	480a      	ldr	r0, [pc, #40]	@ (8001b90 <StartReadDateTimeTask+0x74>)
 8001b66:	f7fe fb8b 	bl	8000280 <strlen>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b72:	4907      	ldr	r1, [pc, #28]	@ (8001b90 <StartReadDateTimeTask+0x74>)
 8001b74:	4807      	ldr	r0, [pc, #28]	@ (8001b94 <StartReadDateTimeTask+0x78>)
 8001b76:	f006 fa89 	bl	800808c <HAL_UART_Transmit>
		osDelay(1000);
 8001b7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b7e:	f007 f811 	bl	8008ba4 <osDelay>
		date_time.hour = DS3231_GetHour();
 8001b82:	bf00      	nop
 8001b84:	e7ce      	b.n	8001b24 <StartReadDateTimeTask+0x8>
 8001b86:	bf00      	nop
 8001b88:	200002e8 	.word	0x200002e8
 8001b8c:	0800fd08 	.word	0x0800fd08
 8001b90:	20000278 	.word	0x20000278
 8001b94:	20000618 	.word	0x20000618

08001b98 <StartBlinkStatusLEDTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinkStatusLEDTask */
void StartBlinkStatusLEDTask(void *argument)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartBlinkStatusLEDTask */
	/* Infinite loop */
	for (;;)
	{
		HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8001ba0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ba4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ba8:	f002 fb92 	bl	80042d0 <HAL_GPIO_TogglePin>
		osDelay(1000);
 8001bac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bb0:	f006 fff8 	bl	8008ba4 <osDelay>
		HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8001bb4:	bf00      	nop
 8001bb6:	e7f3      	b.n	8001ba0 <StartBlinkStatusLEDTask+0x8>

08001bb8 <showBatteryMenu>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void showBatteryMenu()
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black); // clear display
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f000 fae8 	bl	8002194 <ssd1306_Fill>
	ssd1306_SetCursor(20, 5);
 8001bc4:	2105      	movs	r1, #5
 8001bc6:	2014      	movs	r0, #20
 8001bc8:	f000 fc2e 	bl	8002428 <ssd1306_SetCursor>
	sprintf(msg_buffer, "%d.%02d V", battery.voltage_integer_part, battery.voltage_float_part);
 8001bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf8 <showBatteryMenu+0x40>)
 8001bce:	789b      	ldrb	r3, [r3, #2]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b09      	ldr	r3, [pc, #36]	@ (8001bf8 <showBatteryMenu+0x40>)
 8001bd4:	78db      	ldrb	r3, [r3, #3]
 8001bd6:	4909      	ldr	r1, [pc, #36]	@ (8001bfc <showBatteryMenu+0x44>)
 8001bd8:	4809      	ldr	r0, [pc, #36]	@ (8001c00 <showBatteryMenu+0x48>)
 8001bda:	f00a fbad 	bl	800c338 <siprintf>
	ssd1306_WriteString(msg_buffer, Font_16x26, White);
 8001bde:	4b09      	ldr	r3, [pc, #36]	@ (8001c04 <showBatteryMenu+0x4c>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	9200      	str	r2, [sp, #0]
 8001be4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001be6:	4806      	ldr	r0, [pc, #24]	@ (8001c00 <showBatteryMenu+0x48>)
 8001be8:	f000 fbf8 	bl	80023dc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001bec:	f000 faea 	bl	80021c4 <ssd1306_UpdateScreen>
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200002e0 	.word	0x200002e0
 8001bfc:	0800fd18 	.word	0x0800fd18
 8001c00:	20000278 	.word	0x20000278
 8001c04:	08012658 	.word	0x08012658

08001c08 <showTemperatureMenu>:

void showTemperatureMenu()
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black); // clear display
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f000 fac0 	bl	8002194 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8001c14:	2100      	movs	r1, #0
 8001c16:	2000      	movs	r0, #0
 8001c18:	f000 fc06 	bl	8002428 <ssd1306_SetCursor>
	sprintf(msg_buffer, "%d *C", (int) bme_values.temperature);
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c4c <showTemperatureMenu+0x44>)
 8001c1e:	edd3 7a00 	vldr	s15, [r3]
 8001c22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c26:	ee17 2a90 	vmov	r2, s15
 8001c2a:	4909      	ldr	r1, [pc, #36]	@ (8001c50 <showTemperatureMenu+0x48>)
 8001c2c:	4809      	ldr	r0, [pc, #36]	@ (8001c54 <showTemperatureMenu+0x4c>)
 8001c2e:	f00a fb83 	bl	800c338 <siprintf>
	ssd1306_WriteString(msg_buffer, Font_11x18, White);
 8001c32:	4b09      	ldr	r3, [pc, #36]	@ (8001c58 <showTemperatureMenu+0x50>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	9200      	str	r2, [sp, #0]
 8001c38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c3a:	4806      	ldr	r0, [pc, #24]	@ (8001c54 <showTemperatureMenu+0x4c>)
 8001c3c:	f000 fbce 	bl	80023dc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001c40:	f000 fac0 	bl	80021c4 <ssd1306_UpdateScreen>
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200002f0 	.word	0x200002f0
 8001c50:	0800fd24 	.word	0x0800fd24
 8001c54:	20000278 	.word	0x20000278
 8001c58:	0801264c 	.word	0x0801264c

08001c5c <showTimeMenu>:

void showTimeMenu()
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black); // clear display
 8001c62:	2000      	movs	r0, #0
 8001c64:	f000 fa96 	bl	8002194 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8001c68:	2100      	movs	r1, #0
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f000 fbdc 	bl	8002428 <ssd1306_SetCursor>
	sprintf(msg_buffer, "%d : %d : %d", date_time.hour, date_time.minute, date_time.second);
 8001c70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <showTimeMenu+0x48>)
 8001c72:	78db      	ldrb	r3, [r3, #3]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca4 <showTimeMenu+0x48>)
 8001c78:	791b      	ldrb	r3, [r3, #4]
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <showTimeMenu+0x48>)
 8001c7e:	795b      	ldrb	r3, [r3, #5]
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	460b      	mov	r3, r1
 8001c84:	4908      	ldr	r1, [pc, #32]	@ (8001ca8 <showTimeMenu+0x4c>)
 8001c86:	4809      	ldr	r0, [pc, #36]	@ (8001cac <showTimeMenu+0x50>)
 8001c88:	f00a fb56 	bl	800c338 <siprintf>
	ssd1306_WriteString(msg_buffer, Font_7x10, White);
 8001c8c:	4b08      	ldr	r3, [pc, #32]	@ (8001cb0 <showTimeMenu+0x54>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	9200      	str	r2, [sp, #0]
 8001c92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c94:	4805      	ldr	r0, [pc, #20]	@ (8001cac <showTimeMenu+0x50>)
 8001c96:	f000 fba1 	bl	80023dc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001c9a:	f000 fa93 	bl	80021c4 <ssd1306_UpdateScreen>
}
 8001c9e:	bf00      	nop
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	200002e8 	.word	0x200002e8
 8001ca8:	0800fd2c 	.word	0x0800fd2c
 8001cac:	20000278 	.word	0x20000278
 8001cb0:	08012640 	.word	0x08012640

08001cb4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	@ 0x28
 8001cb8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
 8001cc6:	60da      	str	r2, [r3, #12]
 8001cc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cca:	4b42      	ldr	r3, [pc, #264]	@ (8001dd4 <MX_GPIO_Init+0x120>)
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	4a41      	ldr	r2, [pc, #260]	@ (8001dd4 <MX_GPIO_Init+0x120>)
 8001cd0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001cd4:	6153      	str	r3, [r2, #20]
 8001cd6:	4b3f      	ldr	r3, [pc, #252]	@ (8001dd4 <MX_GPIO_Init+0x120>)
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ce2:	4b3c      	ldr	r3, [pc, #240]	@ (8001dd4 <MX_GPIO_Init+0x120>)
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	4a3b      	ldr	r2, [pc, #236]	@ (8001dd4 <MX_GPIO_Init+0x120>)
 8001ce8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001cec:	6153      	str	r3, [r2, #20]
 8001cee:	4b39      	ldr	r3, [pc, #228]	@ (8001dd4 <MX_GPIO_Init+0x120>)
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfa:	4b36      	ldr	r3, [pc, #216]	@ (8001dd4 <MX_GPIO_Init+0x120>)
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	4a35      	ldr	r2, [pc, #212]	@ (8001dd4 <MX_GPIO_Init+0x120>)
 8001d00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d04:	6153      	str	r3, [r2, #20]
 8001d06:	4b33      	ldr	r3, [pc, #204]	@ (8001dd4 <MX_GPIO_Init+0x120>)
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d12:	4b30      	ldr	r3, [pc, #192]	@ (8001dd4 <MX_GPIO_Init+0x120>)
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	4a2f      	ldr	r2, [pc, #188]	@ (8001dd4 <MX_GPIO_Init+0x120>)
 8001d18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d1c:	6153      	str	r3, [r2, #20]
 8001d1e:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd4 <MX_GPIO_Init+0x120>)
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Keypad_C2_OUT_Pin|Keypad_C1_OUT_Pin|Keypad_C4_OUT_Pin|Keypad_C3_OUT_Pin, GPIO_PIN_RESET);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f243 4104 	movw	r1, #13316	@ 0x3404
 8001d30:	4829      	ldr	r0, [pc, #164]	@ (8001dd8 <MX_GPIO_Init+0x124>)
 8001d32:	f002 fab5 	bl	80042a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_RESET);
 8001d36:	2200      	movs	r2, #0
 8001d38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d40:	f002 faae 	bl	80042a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Keypad_C2_OUT_Pin|Keypad_C1_OUT_Pin|Keypad_C4_OUT_Pin|Keypad_C3_OUT_Pin;
 8001d44:	f243 4304 	movw	r3, #13316	@ 0x3404
 8001d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d52:	2300      	movs	r3, #0
 8001d54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	481e      	ldr	r0, [pc, #120]	@ (8001dd8 <MX_GPIO_Init+0x124>)
 8001d5e:	f002 f8fd 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Keypad_R2_IN_Pin|Keypad_R1_IN_Pin;
 8001d62:	2303      	movs	r3, #3
 8001d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d6e:	f107 0314 	add.w	r3, r7, #20
 8001d72:	4619      	mov	r1, r3
 8001d74:	4818      	ldr	r0, [pc, #96]	@ (8001dd8 <MX_GPIO_Init+0x124>)
 8001d76:	f002 f8f1 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Keypad_R4_IN_Pin;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d82:	2302      	movs	r3, #2
 8001d84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Keypad_R4_IN_GPIO_Port, &GPIO_InitStruct);
 8001d86:	f107 0314 	add.w	r3, r7, #20
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d90:	f002 f8e4 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Keypad_R3_IN_Pin;
 8001d94:	2301      	movs	r3, #1
 8001d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Keypad_R3_IN_GPIO_Port, &GPIO_InitStruct);
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	4619      	mov	r1, r3
 8001da6:	480d      	ldr	r0, [pc, #52]	@ (8001ddc <MX_GPIO_Init+0x128>)
 8001da8:	f002 f8d8 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin;
 8001dac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db2:	2301      	movs	r3, #1
 8001db4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 8001dbe:	f107 0314 	add.w	r3, r7, #20
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dc8:	f002 f8c8 	bl	8003f5c <HAL_GPIO_Init>

}
 8001dcc:	bf00      	nop
 8001dce:	3728      	adds	r7, #40	@ 0x28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	48000800 	.word	0x48000800
 8001ddc:	48000400 	.word	0x48000400

08001de0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001de4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e54 <MX_I2C1_Init+0x74>)
 8001de6:	4a1c      	ldr	r2, [pc, #112]	@ (8001e58 <MX_I2C1_Init+0x78>)
 8001de8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8001dea:	4b1a      	ldr	r3, [pc, #104]	@ (8001e54 <MX_I2C1_Init+0x74>)
 8001dec:	f240 220b 	movw	r2, #523	@ 0x20b
 8001df0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001df2:	4b18      	ldr	r3, [pc, #96]	@ (8001e54 <MX_I2C1_Init+0x74>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001df8:	4b16      	ldr	r3, [pc, #88]	@ (8001e54 <MX_I2C1_Init+0x74>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dfe:	4b15      	ldr	r3, [pc, #84]	@ (8001e54 <MX_I2C1_Init+0x74>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001e04:	4b13      	ldr	r3, [pc, #76]	@ (8001e54 <MX_I2C1_Init+0x74>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e0a:	4b12      	ldr	r3, [pc, #72]	@ (8001e54 <MX_I2C1_Init+0x74>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e10:	4b10      	ldr	r3, [pc, #64]	@ (8001e54 <MX_I2C1_Init+0x74>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e16:	4b0f      	ldr	r3, [pc, #60]	@ (8001e54 <MX_I2C1_Init+0x74>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e1c:	480d      	ldr	r0, [pc, #52]	@ (8001e54 <MX_I2C1_Init+0x74>)
 8001e1e:	f002 fa71 	bl	8004304 <HAL_I2C_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e28:	f000 f90a 	bl	8002040 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	4809      	ldr	r0, [pc, #36]	@ (8001e54 <MX_I2C1_Init+0x74>)
 8001e30:	f003 fa8e 	bl	8005350 <HAL_I2CEx_ConfigAnalogFilter>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001e3a:	f000 f901 	bl	8002040 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4804      	ldr	r0, [pc, #16]	@ (8001e54 <MX_I2C1_Init+0x74>)
 8001e42:	f003 fad0 	bl	80053e6 <HAL_I2CEx_ConfigDigitalFilter>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001e4c:	f000 f8f8 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000320 	.word	0x20000320
 8001e58:	40005400 	.word	0x40005400

08001e5c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	@ 0x28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a17      	ldr	r2, [pc, #92]	@ (8001ed8 <HAL_I2C_MspInit+0x7c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d128      	bne.n	8001ed0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7e:	4b17      	ldr	r3, [pc, #92]	@ (8001edc <HAL_I2C_MspInit+0x80>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	4a16      	ldr	r2, [pc, #88]	@ (8001edc <HAL_I2C_MspInit+0x80>)
 8001e84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e88:	6153      	str	r3, [r2, #20]
 8001e8a:	4b14      	ldr	r3, [pc, #80]	@ (8001edc <HAL_I2C_MspInit+0x80>)
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e96:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e9c:	2312      	movs	r3, #18
 8001e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ea8:	2304      	movs	r3, #4
 8001eaa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	480b      	ldr	r0, [pc, #44]	@ (8001ee0 <HAL_I2C_MspInit+0x84>)
 8001eb4:	f002 f852 	bl	8003f5c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eb8:	4b08      	ldr	r3, [pc, #32]	@ (8001edc <HAL_I2C_MspInit+0x80>)
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	4a07      	ldr	r2, [pc, #28]	@ (8001edc <HAL_I2C_MspInit+0x80>)
 8001ebe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ec2:	61d3      	str	r3, [r2, #28]
 8001ec4:	4b05      	ldr	r3, [pc, #20]	@ (8001edc <HAL_I2C_MspInit+0x80>)
 8001ec6:	69db      	ldr	r3, [r3, #28]
 8001ec8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	3728      	adds	r7, #40	@ 0x28
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40005400 	.word	0x40005400
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	48000400 	.word	0x48000400

08001ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ee8:	f000 fdca 	bl	8002a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eec:	f000 f82e 	bl	8001f4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ef0:	f7ff fee0 	bl	8001cb4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001ef4:	f000 fd28 	bl	8002948 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8001ef8:	f7ff fab6 	bl	8001468 <MX_ADC2_Init>
  MX_I2C1_Init();
 8001efc:	f7ff ff70 	bl	8001de0 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001f00:	f000 fc72 	bl	80027e8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001f04:	2100      	movs	r1, #0
 8001f06:	480e      	ldr	r0, [pc, #56]	@ (8001f40 <main+0x5c>)
 8001f08:	f001 fa69 	bl	80033de <HAL_ADCEx_Calibration_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	480d      	ldr	r0, [pc, #52]	@ (8001f44 <main+0x60>)
 8001f10:	f005 f8a4 	bl	800705c <HAL_TIM_PWM_Start>
	ssd1306_Init();
 8001f14:	f000 f8d4 	bl	80020c0 <ssd1306_Init>
	BME280_Init();
 8001f18:	f7ff f9b8 	bl	800128c <BME280_Init>
	DS3231_Init(&hi2c1);
 8001f1c:	480a      	ldr	r0, [pc, #40]	@ (8001f48 <main+0x64>)
 8001f1e:	f7ff fb3f 	bl	80015a0 <DS3231_Init>
	DS3231_SetHour(23);
 8001f22:	2017      	movs	r0, #23
 8001f24:	f7ff fc4b 	bl	80017be <DS3231_SetHour>
	DS3231_SetMinute(7);
 8001f28:	2007      	movs	r0, #7
 8001f2a:	f7ff fc5d 	bl	80017e8 <DS3231_SetMinute>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001f2e:	f006 fd27 	bl	8008980 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001f32:	f7ff fca7 	bl	8001884 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001f36:	f006 fd57 	bl	80089e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001f3a:	bf00      	nop
 8001f3c:	e7fd      	b.n	8001f3a <main+0x56>
 8001f3e:	bf00      	nop
 8001f40:	20000224 	.word	0x20000224
 8001f44:	200005cc 	.word	0x200005cc
 8001f48:	20000320 	.word	0x20000320

08001f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b0a6      	sub	sp, #152	@ 0x98
 8001f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f52:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001f56:	2228      	movs	r2, #40	@ 0x28
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f00a fa69 	bl	800c432 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f60:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f70:	1d3b      	adds	r3, r7, #4
 8001f72:	2258      	movs	r2, #88	@ 0x58
 8001f74:	2100      	movs	r1, #0
 8001f76:	4618      	mov	r0, r3
 8001f78:	f00a fa5b 	bl	800c432 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f80:	2301      	movs	r3, #1
 8001f82:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f84:	2310      	movs	r3, #16
 8001f86:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f98:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001f9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fa6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001faa:	4618      	mov	r0, r3
 8001fac:	f003 fa68 	bl	8005480 <HAL_RCC_OscConfig>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001fb6:	f000 f843 	bl	8002040 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fba:	230f      	movs	r3, #15
 8001fbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fca:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fd0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001fd4:	2102      	movs	r1, #2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f004 faa6 	bl	8006528 <HAL_RCC_ClockConfig>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001fe2:	f000 f82d 	bl	8002040 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8002018 <SystemClock_Config+0xcc>)
 8001fe8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001fee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ffc:	1d3b      	adds	r3, r7, #4
 8001ffe:	4618      	mov	r0, r3
 8002000:	f004 fce4 	bl	80069cc <HAL_RCCEx_PeriphCLKConfig>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800200a:	f000 f819 	bl	8002040 <Error_Handler>
  }
}
 800200e:	bf00      	nop
 8002010:	3798      	adds	r7, #152	@ 0x98
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	002000a2 	.word	0x002000a2

0800201c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a04      	ldr	r2, [pc, #16]	@ (800203c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d101      	bne.n	8002032 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800202e:	f000 fd3d 	bl	8002aac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40014800 	.word	0x40014800

08002040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002044:	b672      	cpsid	i
}
 8002046:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002048:	bf00      	nop
 800204a:	e7fd      	b.n	8002048 <Error_Handler+0x8>

0800204c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
	...

0800205c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af04      	add	r7, sp, #16
 8002062:	4603      	mov	r3, r0
 8002064:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002066:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800206a:	9302      	str	r3, [sp, #8]
 800206c:	2301      	movs	r3, #1
 800206e:	9301      	str	r3, [sp, #4]
 8002070:	1dfb      	adds	r3, r7, #7
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	2301      	movs	r3, #1
 8002076:	2200      	movs	r2, #0
 8002078:	2178      	movs	r1, #120	@ 0x78
 800207a:	4803      	ldr	r0, [pc, #12]	@ (8002088 <ssd1306_WriteCommand+0x2c>)
 800207c:	f002 fbec 	bl	8004858 <HAL_I2C_Mem_Write>
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20000320 	.word	0x20000320

0800208c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af04      	add	r7, sp, #16
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	b29b      	uxth	r3, r3
 800209a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800209e:	9202      	str	r2, [sp, #8]
 80020a0:	9301      	str	r3, [sp, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	2301      	movs	r3, #1
 80020a8:	2240      	movs	r2, #64	@ 0x40
 80020aa:	2178      	movs	r1, #120	@ 0x78
 80020ac:	4803      	ldr	r0, [pc, #12]	@ (80020bc <ssd1306_WriteData+0x30>)
 80020ae:	f002 fbd3 	bl	8004858 <HAL_I2C_Mem_Write>
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000320 	.word	0x20000320

080020c0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80020c4:	f7ff ffc2 	bl	800204c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80020c8:	2064      	movs	r0, #100	@ 0x64
 80020ca:	f000 fd0f 	bl	8002aec <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80020ce:	2000      	movs	r0, #0
 80020d0:	f000 f9d6 	bl	8002480 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80020d4:	2020      	movs	r0, #32
 80020d6:	f7ff ffc1 	bl	800205c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80020da:	2000      	movs	r0, #0
 80020dc:	f7ff ffbe 	bl	800205c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80020e0:	20b0      	movs	r0, #176	@ 0xb0
 80020e2:	f7ff ffbb 	bl	800205c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80020e6:	20c8      	movs	r0, #200	@ 0xc8
 80020e8:	f7ff ffb8 	bl	800205c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80020ec:	2000      	movs	r0, #0
 80020ee:	f7ff ffb5 	bl	800205c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80020f2:	2010      	movs	r0, #16
 80020f4:	f7ff ffb2 	bl	800205c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80020f8:	2040      	movs	r0, #64	@ 0x40
 80020fa:	f7ff ffaf 	bl	800205c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80020fe:	20ff      	movs	r0, #255	@ 0xff
 8002100:	f000 f9aa 	bl	8002458 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002104:	20a1      	movs	r0, #161	@ 0xa1
 8002106:	f7ff ffa9 	bl	800205c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800210a:	20a6      	movs	r0, #166	@ 0xa6
 800210c:	f7ff ffa6 	bl	800205c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002110:	20a8      	movs	r0, #168	@ 0xa8
 8002112:	f7ff ffa3 	bl	800205c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8002116:	201f      	movs	r0, #31
 8002118:	f7ff ffa0 	bl	800205c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800211c:	20a4      	movs	r0, #164	@ 0xa4
 800211e:	f7ff ff9d 	bl	800205c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002122:	20d3      	movs	r0, #211	@ 0xd3
 8002124:	f7ff ff9a 	bl	800205c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002128:	2000      	movs	r0, #0
 800212a:	f7ff ff97 	bl	800205c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800212e:	20d5      	movs	r0, #213	@ 0xd5
 8002130:	f7ff ff94 	bl	800205c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002134:	20f0      	movs	r0, #240	@ 0xf0
 8002136:	f7ff ff91 	bl	800205c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800213a:	20d9      	movs	r0, #217	@ 0xd9
 800213c:	f7ff ff8e 	bl	800205c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002140:	2022      	movs	r0, #34	@ 0x22
 8002142:	f7ff ff8b 	bl	800205c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002146:	20da      	movs	r0, #218	@ 0xda
 8002148:	f7ff ff88 	bl	800205c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 800214c:	2002      	movs	r0, #2
 800214e:	f7ff ff85 	bl	800205c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002152:	20db      	movs	r0, #219	@ 0xdb
 8002154:	f7ff ff82 	bl	800205c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002158:	2020      	movs	r0, #32
 800215a:	f7ff ff7f 	bl	800205c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800215e:	208d      	movs	r0, #141	@ 0x8d
 8002160:	f7ff ff7c 	bl	800205c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002164:	2014      	movs	r0, #20
 8002166:	f7ff ff79 	bl	800205c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800216a:	2001      	movs	r0, #1
 800216c:	f000 f988 	bl	8002480 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002170:	2000      	movs	r0, #0
 8002172:	f000 f80f 	bl	8002194 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002176:	f000 f825 	bl	80021c4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800217a:	4b05      	ldr	r3, [pc, #20]	@ (8002190 <ssd1306_Init+0xd0>)
 800217c:	2200      	movs	r2, #0
 800217e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002180:	4b03      	ldr	r3, [pc, #12]	@ (8002190 <ssd1306_Init+0xd0>)
 8002182:	2200      	movs	r2, #0
 8002184:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002186:	4b02      	ldr	r3, [pc, #8]	@ (8002190 <ssd1306_Init+0xd0>)
 8002188:	2201      	movs	r2, #1
 800218a:	711a      	strb	r2, [r3, #4]
}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20000574 	.word	0x20000574

08002194 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <ssd1306_Fill+0x14>
 80021a4:	2300      	movs	r3, #0
 80021a6:	e000      	b.n	80021aa <ssd1306_Fill+0x16>
 80021a8:	23ff      	movs	r3, #255	@ 0xff
 80021aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021ae:	4619      	mov	r1, r3
 80021b0:	4803      	ldr	r0, [pc, #12]	@ (80021c0 <ssd1306_Fill+0x2c>)
 80021b2:	f00a f93e 	bl	800c432 <memset>
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000374 	.word	0x20000374

080021c4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80021ca:	2300      	movs	r3, #0
 80021cc:	71fb      	strb	r3, [r7, #7]
 80021ce:	e016      	b.n	80021fe <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	3b50      	subs	r3, #80	@ 0x50
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff ff40 	bl	800205c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80021dc:	2000      	movs	r0, #0
 80021de:	f7ff ff3d 	bl	800205c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80021e2:	2010      	movs	r0, #16
 80021e4:	f7ff ff3a 	bl	800205c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	01db      	lsls	r3, r3, #7
 80021ec:	4a08      	ldr	r2, [pc, #32]	@ (8002210 <ssd1306_UpdateScreen+0x4c>)
 80021ee:	4413      	add	r3, r2
 80021f0:	2180      	movs	r1, #128	@ 0x80
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff ff4a 	bl	800208c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	3301      	adds	r3, #1
 80021fc:	71fb      	strb	r3, [r7, #7]
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	2b03      	cmp	r3, #3
 8002202:	d9e5      	bls.n	80021d0 <ssd1306_UpdateScreen+0xc>
    }
}
 8002204:	bf00      	nop
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000374 	.word	0x20000374

08002214 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
 800221e:	460b      	mov	r3, r1
 8002220:	71bb      	strb	r3, [r7, #6]
 8002222:	4613      	mov	r3, r2
 8002224:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	2b00      	cmp	r3, #0
 800222c:	db3d      	blt.n	80022aa <ssd1306_DrawPixel+0x96>
 800222e:	79bb      	ldrb	r3, [r7, #6]
 8002230:	2b1f      	cmp	r3, #31
 8002232:	d83a      	bhi.n	80022aa <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002234:	797b      	ldrb	r3, [r7, #5]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d11a      	bne.n	8002270 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800223a:	79fa      	ldrb	r2, [r7, #7]
 800223c:	79bb      	ldrb	r3, [r7, #6]
 800223e:	08db      	lsrs	r3, r3, #3
 8002240:	b2d8      	uxtb	r0, r3
 8002242:	4603      	mov	r3, r0
 8002244:	01db      	lsls	r3, r3, #7
 8002246:	4413      	add	r3, r2
 8002248:	4a1b      	ldr	r2, [pc, #108]	@ (80022b8 <ssd1306_DrawPixel+0xa4>)
 800224a:	5cd3      	ldrb	r3, [r2, r3]
 800224c:	b25a      	sxtb	r2, r3
 800224e:	79bb      	ldrb	r3, [r7, #6]
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	2101      	movs	r1, #1
 8002256:	fa01 f303 	lsl.w	r3, r1, r3
 800225a:	b25b      	sxtb	r3, r3
 800225c:	4313      	orrs	r3, r2
 800225e:	b259      	sxtb	r1, r3
 8002260:	79fa      	ldrb	r2, [r7, #7]
 8002262:	4603      	mov	r3, r0
 8002264:	01db      	lsls	r3, r3, #7
 8002266:	4413      	add	r3, r2
 8002268:	b2c9      	uxtb	r1, r1
 800226a:	4a13      	ldr	r2, [pc, #76]	@ (80022b8 <ssd1306_DrawPixel+0xa4>)
 800226c:	54d1      	strb	r1, [r2, r3]
 800226e:	e01d      	b.n	80022ac <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002270:	79fa      	ldrb	r2, [r7, #7]
 8002272:	79bb      	ldrb	r3, [r7, #6]
 8002274:	08db      	lsrs	r3, r3, #3
 8002276:	b2d8      	uxtb	r0, r3
 8002278:	4603      	mov	r3, r0
 800227a:	01db      	lsls	r3, r3, #7
 800227c:	4413      	add	r3, r2
 800227e:	4a0e      	ldr	r2, [pc, #56]	@ (80022b8 <ssd1306_DrawPixel+0xa4>)
 8002280:	5cd3      	ldrb	r3, [r2, r3]
 8002282:	b25a      	sxtb	r2, r3
 8002284:	79bb      	ldrb	r3, [r7, #6]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	2101      	movs	r1, #1
 800228c:	fa01 f303 	lsl.w	r3, r1, r3
 8002290:	b25b      	sxtb	r3, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	b25b      	sxtb	r3, r3
 8002296:	4013      	ands	r3, r2
 8002298:	b259      	sxtb	r1, r3
 800229a:	79fa      	ldrb	r2, [r7, #7]
 800229c:	4603      	mov	r3, r0
 800229e:	01db      	lsls	r3, r3, #7
 80022a0:	4413      	add	r3, r2
 80022a2:	b2c9      	uxtb	r1, r1
 80022a4:	4a04      	ldr	r2, [pc, #16]	@ (80022b8 <ssd1306_DrawPixel+0xa4>)
 80022a6:	54d1      	strb	r1, [r2, r3]
 80022a8:	e000      	b.n	80022ac <ssd1306_DrawPixel+0x98>
        return;
 80022aa:	bf00      	nop
    }
}
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	20000374 	.word	0x20000374

080022bc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80022bc:	b590      	push	{r4, r7, lr}
 80022be:	b089      	sub	sp, #36	@ 0x24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4604      	mov	r4, r0
 80022c4:	4638      	mov	r0, r7
 80022c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80022ca:	4623      	mov	r3, r4
 80022cc:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80022ce:	7bfb      	ldrb	r3, [r7, #15]
 80022d0:	2b1f      	cmp	r3, #31
 80022d2:	d902      	bls.n	80022da <ssd1306_WriteChar+0x1e>
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	2b7e      	cmp	r3, #126	@ 0x7e
 80022d8:	d901      	bls.n	80022de <ssd1306_WriteChar+0x22>
        return 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	e077      	b.n	80023ce <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80022de:	4b3e      	ldr	r3, [pc, #248]	@ (80023d8 <ssd1306_WriteChar+0x11c>)
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	783b      	ldrb	r3, [r7, #0]
 80022e6:	4413      	add	r3, r2
 80022e8:	2b80      	cmp	r3, #128	@ 0x80
 80022ea:	dc06      	bgt.n	80022fa <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80022ec:	4b3a      	ldr	r3, [pc, #232]	@ (80023d8 <ssd1306_WriteChar+0x11c>)
 80022ee:	885b      	ldrh	r3, [r3, #2]
 80022f0:	461a      	mov	r2, r3
 80022f2:	787b      	ldrb	r3, [r7, #1]
 80022f4:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80022f6:	2b20      	cmp	r3, #32
 80022f8:	dd01      	ble.n	80022fe <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	e067      	b.n	80023ce <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	e04e      	b.n	80023a2 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	7bfb      	ldrb	r3, [r7, #15]
 8002308:	3b20      	subs	r3, #32
 800230a:	7879      	ldrb	r1, [r7, #1]
 800230c:	fb01 f303 	mul.w	r3, r1, r3
 8002310:	4619      	mov	r1, r3
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	440b      	add	r3, r1
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	4413      	add	r3, r2
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800231e:	2300      	movs	r3, #0
 8002320:	61bb      	str	r3, [r7, #24]
 8002322:	e036      	b.n	8002392 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d013      	beq.n	800235c <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002334:	4b28      	ldr	r3, [pc, #160]	@ (80023d8 <ssd1306_WriteChar+0x11c>)
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	b2da      	uxtb	r2, r3
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	b2db      	uxtb	r3, r3
 800233e:	4413      	add	r3, r2
 8002340:	b2d8      	uxtb	r0, r3
 8002342:	4b25      	ldr	r3, [pc, #148]	@ (80023d8 <ssd1306_WriteChar+0x11c>)
 8002344:	885b      	ldrh	r3, [r3, #2]
 8002346:	b2da      	uxtb	r2, r3
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	4413      	add	r3, r2
 800234e:	b2db      	uxtb	r3, r3
 8002350:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002354:	4619      	mov	r1, r3
 8002356:	f7ff ff5d 	bl	8002214 <ssd1306_DrawPixel>
 800235a:	e017      	b.n	800238c <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800235c:	4b1e      	ldr	r3, [pc, #120]	@ (80023d8 <ssd1306_WriteChar+0x11c>)
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	b2da      	uxtb	r2, r3
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	4413      	add	r3, r2
 8002368:	b2d8      	uxtb	r0, r3
 800236a:	4b1b      	ldr	r3, [pc, #108]	@ (80023d8 <ssd1306_WriteChar+0x11c>)
 800236c:	885b      	ldrh	r3, [r3, #2]
 800236e:	b2da      	uxtb	r2, r3
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	4413      	add	r3, r2
 8002376:	b2d9      	uxtb	r1, r3
 8002378:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800237c:	2b00      	cmp	r3, #0
 800237e:	bf0c      	ite	eq
 8002380:	2301      	moveq	r3, #1
 8002382:	2300      	movne	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	461a      	mov	r2, r3
 8002388:	f7ff ff44 	bl	8002214 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	3301      	adds	r3, #1
 8002390:	61bb      	str	r3, [r7, #24]
 8002392:	783b      	ldrb	r3, [r7, #0]
 8002394:	461a      	mov	r2, r3
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	4293      	cmp	r3, r2
 800239a:	d3c3      	bcc.n	8002324 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	3301      	adds	r3, #1
 80023a0:	61fb      	str	r3, [r7, #28]
 80023a2:	787b      	ldrb	r3, [r7, #1]
 80023a4:	461a      	mov	r2, r3
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d3ab      	bcc.n	8002304 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80023ac:	4b0a      	ldr	r3, [pc, #40]	@ (80023d8 <ssd1306_WriteChar+0x11c>)
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	2a00      	cmp	r2, #0
 80023b4:	d005      	beq.n	80023c2 <ssd1306_WriteChar+0x106>
 80023b6:	68b9      	ldr	r1, [r7, #8]
 80023b8:	7bfa      	ldrb	r2, [r7, #15]
 80023ba:	3a20      	subs	r2, #32
 80023bc:	440a      	add	r2, r1
 80023be:	7812      	ldrb	r2, [r2, #0]
 80023c0:	e000      	b.n	80023c4 <ssd1306_WriteChar+0x108>
 80023c2:	783a      	ldrb	r2, [r7, #0]
 80023c4:	4413      	add	r3, r2
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	4b03      	ldr	r3, [pc, #12]	@ (80023d8 <ssd1306_WriteChar+0x11c>)
 80023ca:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3724      	adds	r7, #36	@ 0x24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd90      	pop	{r4, r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000574 	.word	0x20000574

080023dc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	4638      	mov	r0, r7
 80023e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80023ea:	e013      	b.n	8002414 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	7818      	ldrb	r0, [r3, #0]
 80023f0:	7e3b      	ldrb	r3, [r7, #24]
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	463b      	mov	r3, r7
 80023f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023f8:	f7ff ff60 	bl	80022bc <ssd1306_WriteChar>
 80023fc:	4603      	mov	r3, r0
 80023fe:	461a      	mov	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	429a      	cmp	r2, r3
 8002406:	d002      	beq.n	800240e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	e008      	b.n	8002420 <ssd1306_WriteString+0x44>
        }
        str++;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	3301      	adds	r3, #1
 8002412:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1e7      	bne.n	80023ec <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	781b      	ldrb	r3, [r3, #0]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	460a      	mov	r2, r1
 8002432:	71fb      	strb	r3, [r7, #7]
 8002434:	4613      	mov	r3, r2
 8002436:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	b29a      	uxth	r2, r3
 800243c:	4b05      	ldr	r3, [pc, #20]	@ (8002454 <ssd1306_SetCursor+0x2c>)
 800243e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002440:	79bb      	ldrb	r3, [r7, #6]
 8002442:	b29a      	uxth	r2, r3
 8002444:	4b03      	ldr	r3, [pc, #12]	@ (8002454 <ssd1306_SetCursor+0x2c>)
 8002446:	805a      	strh	r2, [r3, #2]
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	20000574 	.word	0x20000574

08002458 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002462:	2381      	movs	r3, #129	@ 0x81
 8002464:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff fdf7 	bl	800205c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff fdf3 	bl	800205c <ssd1306_WriteCommand>
}
 8002476:	bf00      	nop
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002490:	23af      	movs	r3, #175	@ 0xaf
 8002492:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002494:	4b08      	ldr	r3, [pc, #32]	@ (80024b8 <ssd1306_SetDisplayOn+0x38>)
 8002496:	2201      	movs	r2, #1
 8002498:	715a      	strb	r2, [r3, #5]
 800249a:	e004      	b.n	80024a6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800249c:	23ae      	movs	r3, #174	@ 0xae
 800249e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80024a0:	4b05      	ldr	r3, [pc, #20]	@ (80024b8 <ssd1306_SetDisplayOn+0x38>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff fdd7 	bl	800205c <ssd1306_WriteCommand>
}
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000574 	.word	0x20000574

080024bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024c2:	4b11      	ldr	r3, [pc, #68]	@ (8002508 <HAL_MspInit+0x4c>)
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	4a10      	ldr	r2, [pc, #64]	@ (8002508 <HAL_MspInit+0x4c>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	6193      	str	r3, [r2, #24]
 80024ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002508 <HAL_MspInit+0x4c>)
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	607b      	str	r3, [r7, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024da:	4b0b      	ldr	r3, [pc, #44]	@ (8002508 <HAL_MspInit+0x4c>)
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	4a0a      	ldr	r2, [pc, #40]	@ (8002508 <HAL_MspInit+0x4c>)
 80024e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024e4:	61d3      	str	r3, [r2, #28]
 80024e6:	4b08      	ldr	r3, [pc, #32]	@ (8002508 <HAL_MspInit+0x4c>)
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ee:	603b      	str	r3, [r7, #0]
 80024f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024f2:	2200      	movs	r2, #0
 80024f4:	210f      	movs	r1, #15
 80024f6:	f06f 0001 	mvn.w	r0, #1
 80024fa:	f001 fd05 	bl	8003f08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40021000 	.word	0x40021000

0800250c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08c      	sub	sp, #48	@ 0x30
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 800251c:	4b2e      	ldr	r3, [pc, #184]	@ (80025d8 <HAL_InitTick+0xcc>)
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	4a2d      	ldr	r2, [pc, #180]	@ (80025d8 <HAL_InitTick+0xcc>)
 8002522:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002526:	6193      	str	r3, [r2, #24]
 8002528:	4b2b      	ldr	r3, [pc, #172]	@ (80025d8 <HAL_InitTick+0xcc>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002534:	f107 020c 	add.w	r2, r7, #12
 8002538:	f107 0310 	add.w	r3, r7, #16
 800253c:	4611      	mov	r1, r2
 800253e:	4618      	mov	r0, r3
 8002540:	f004 fa12 	bl	8006968 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002544:	f004 f9ee 	bl	8006924 <HAL_RCC_GetPCLK2Freq>
 8002548:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800254a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800254c:	4a23      	ldr	r2, [pc, #140]	@ (80025dc <HAL_InitTick+0xd0>)
 800254e:	fba2 2303 	umull	r2, r3, r2, r3
 8002552:	0c9b      	lsrs	r3, r3, #18
 8002554:	3b01      	subs	r3, #1
 8002556:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8002558:	4b21      	ldr	r3, [pc, #132]	@ (80025e0 <HAL_InitTick+0xd4>)
 800255a:	4a22      	ldr	r2, [pc, #136]	@ (80025e4 <HAL_InitTick+0xd8>)
 800255c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800255e:	4b20      	ldr	r3, [pc, #128]	@ (80025e0 <HAL_InitTick+0xd4>)
 8002560:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002564:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8002566:	4a1e      	ldr	r2, [pc, #120]	@ (80025e0 <HAL_InitTick+0xd4>)
 8002568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256a:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800256c:	4b1c      	ldr	r3, [pc, #112]	@ (80025e0 <HAL_InitTick+0xd4>)
 800256e:	2200      	movs	r2, #0
 8002570:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002572:	4b1b      	ldr	r3, [pc, #108]	@ (80025e0 <HAL_InitTick+0xd4>)
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002578:	4b19      	ldr	r3, [pc, #100]	@ (80025e0 <HAL_InitTick+0xd4>)
 800257a:	2200      	movs	r2, #0
 800257c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 800257e:	4818      	ldr	r0, [pc, #96]	@ (80025e0 <HAL_InitTick+0xd4>)
 8002580:	f004 fc42 	bl	8006e08 <HAL_TIM_Base_Init>
 8002584:	4603      	mov	r3, r0
 8002586:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800258a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800258e:	2b00      	cmp	r3, #0
 8002590:	d11b      	bne.n	80025ca <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8002592:	4813      	ldr	r0, [pc, #76]	@ (80025e0 <HAL_InitTick+0xd4>)
 8002594:	f004 fc9a 	bl	8006ecc <HAL_TIM_Base_Start_IT>
 8002598:	4603      	mov	r3, r0
 800259a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800259e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d111      	bne.n	80025ca <HAL_InitTick+0xbe>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80025a6:	201a      	movs	r0, #26
 80025a8:	f001 fcca 	bl	8003f40 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b0f      	cmp	r3, #15
 80025b0:	d808      	bhi.n	80025c4 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 80025b2:	2200      	movs	r2, #0
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	201a      	movs	r0, #26
 80025b8:	f001 fca6 	bl	8003f08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025bc:	4a0a      	ldr	r2, [pc, #40]	@ (80025e8 <HAL_InitTick+0xdc>)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	e002      	b.n	80025ca <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80025ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3730      	adds	r7, #48	@ 0x30
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40021000 	.word	0x40021000
 80025dc:	431bde83 	.word	0x431bde83
 80025e0:	2000057c 	.word	0x2000057c
 80025e4:	40014800 	.word	0x40014800
 80025e8:	2000000c 	.word	0x2000000c

080025ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025f0:	bf00      	nop
 80025f2:	e7fd      	b.n	80025f0 <NMI_Handler+0x4>

080025f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025f8:	bf00      	nop
 80025fa:	e7fd      	b.n	80025f8 <HardFault_Handler+0x4>

080025fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002600:	bf00      	nop
 8002602:	e7fd      	b.n	8002600 <MemManage_Handler+0x4>

08002604 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002608:	bf00      	nop
 800260a:	e7fd      	b.n	8002608 <BusFault_Handler+0x4>

0800260c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002610:	bf00      	nop
 8002612:	e7fd      	b.n	8002610 <UsageFault_Handler+0x4>

08002614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
	...

08002624 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002628:	4802      	ldr	r0, [pc, #8]	@ (8002634 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800262a:	f004 fe23 	bl	8007274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	2000057c 	.word	0x2000057c

08002638 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return 1;
 800263c:	2301      	movs	r3, #1
}
 800263e:	4618      	mov	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <_kill>:

int _kill(int pid, int sig)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002652:	f009 ff97 	bl	800c584 <__errno>
 8002656:	4603      	mov	r3, r0
 8002658:	2216      	movs	r2, #22
 800265a:	601a      	str	r2, [r3, #0]
  return -1;
 800265c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002660:	4618      	mov	r0, r3
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <_exit>:

void _exit (int status)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002670:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff ffe7 	bl	8002648 <_kill>
  while (1) {}    /* Make sure we hang here */
 800267a:	bf00      	nop
 800267c:	e7fd      	b.n	800267a <_exit+0x12>

0800267e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b086      	sub	sp, #24
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	e00a      	b.n	80026a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002690:	f3af 8000 	nop.w
 8002694:	4601      	mov	r1, r0
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	60ba      	str	r2, [r7, #8]
 800269c:	b2ca      	uxtb	r2, r1
 800269e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	3301      	adds	r3, #1
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	dbf0      	blt.n	8002690 <_read+0x12>
  }

  return len;
 80026ae:	687b      	ldr	r3, [r7, #4]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	e009      	b.n	80026de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	60ba      	str	r2, [r7, #8]
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	3301      	adds	r3, #1
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	dbf1      	blt.n	80026ca <_write+0x12>
  }
  return len;
 80026e6:	687b      	ldr	r3, [r7, #4]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <_close>:

int _close(int file)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002718:	605a      	str	r2, [r3, #4]
  return 0;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <_isatty>:

int _isatty(int file)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002730:	2301      	movs	r3, #1
}
 8002732:	4618      	mov	r0, r3
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800273e:	b480      	push	{r7}
 8002740:	b085      	sub	sp, #20
 8002742:	af00      	add	r7, sp, #0
 8002744:	60f8      	str	r0, [r7, #12]
 8002746:	60b9      	str	r1, [r7, #8]
 8002748:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002760:	4a14      	ldr	r2, [pc, #80]	@ (80027b4 <_sbrk+0x5c>)
 8002762:	4b15      	ldr	r3, [pc, #84]	@ (80027b8 <_sbrk+0x60>)
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800276c:	4b13      	ldr	r3, [pc, #76]	@ (80027bc <_sbrk+0x64>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d102      	bne.n	800277a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002774:	4b11      	ldr	r3, [pc, #68]	@ (80027bc <_sbrk+0x64>)
 8002776:	4a12      	ldr	r2, [pc, #72]	@ (80027c0 <_sbrk+0x68>)
 8002778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800277a:	4b10      	ldr	r3, [pc, #64]	@ (80027bc <_sbrk+0x64>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4413      	add	r3, r2
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	429a      	cmp	r2, r3
 8002786:	d207      	bcs.n	8002798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002788:	f009 fefc 	bl	800c584 <__errno>
 800278c:	4603      	mov	r3, r0
 800278e:	220c      	movs	r2, #12
 8002790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002792:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002796:	e009      	b.n	80027ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002798:	4b08      	ldr	r3, [pc, #32]	@ (80027bc <_sbrk+0x64>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800279e:	4b07      	ldr	r3, [pc, #28]	@ (80027bc <_sbrk+0x64>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4413      	add	r3, r2
 80027a6:	4a05      	ldr	r2, [pc, #20]	@ (80027bc <_sbrk+0x64>)
 80027a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027aa:	68fb      	ldr	r3, [r7, #12]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20010000 	.word	0x20010000
 80027b8:	00000400 	.word	0x00000400
 80027bc:	200005c8 	.word	0x200005c8
 80027c0:	200035d0 	.word	0x200035d0

080027c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027c8:	4b06      	ldr	r3, [pc, #24]	@ (80027e4 <SystemInit+0x20>)
 80027ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ce:	4a05      	ldr	r2, [pc, #20]	@ (80027e4 <SystemInit+0x20>)
 80027d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08a      	sub	sp, #40	@ 0x28
 80027ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ee:	f107 031c 	add.w	r3, r7, #28
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	605a      	str	r2, [r3, #4]
 80027f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027fa:	463b      	mov	r3, r7
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	60da      	str	r2, [r3, #12]
 8002806:	611a      	str	r2, [r3, #16]
 8002808:	615a      	str	r2, [r3, #20]
 800280a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800280c:	4b21      	ldr	r3, [pc, #132]	@ (8002894 <MX_TIM3_Init+0xac>)
 800280e:	4a22      	ldr	r2, [pc, #136]	@ (8002898 <MX_TIM3_Init+0xb0>)
 8002810:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002812:	4b20      	ldr	r3, [pc, #128]	@ (8002894 <MX_TIM3_Init+0xac>)
 8002814:	2247      	movs	r2, #71	@ 0x47
 8002816:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002818:	4b1e      	ldr	r3, [pc, #120]	@ (8002894 <MX_TIM3_Init+0xac>)
 800281a:	2200      	movs	r2, #0
 800281c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800281e:	4b1d      	ldr	r3, [pc, #116]	@ (8002894 <MX_TIM3_Init+0xac>)
 8002820:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002824:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002826:	4b1b      	ldr	r3, [pc, #108]	@ (8002894 <MX_TIM3_Init+0xac>)
 8002828:	2200      	movs	r2, #0
 800282a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800282c:	4b19      	ldr	r3, [pc, #100]	@ (8002894 <MX_TIM3_Init+0xac>)
 800282e:	2280      	movs	r2, #128	@ 0x80
 8002830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002832:	4818      	ldr	r0, [pc, #96]	@ (8002894 <MX_TIM3_Init+0xac>)
 8002834:	f004 fbba 	bl	8006fac <HAL_TIM_PWM_Init>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800283e:	f7ff fbff 	bl	8002040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002846:	2300      	movs	r3, #0
 8002848:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800284a:	f107 031c 	add.w	r3, r7, #28
 800284e:	4619      	mov	r1, r3
 8002850:	4810      	ldr	r0, [pc, #64]	@ (8002894 <MX_TIM3_Init+0xac>)
 8002852:	f005 fb23 	bl	8007e9c <HAL_TIMEx_MasterConfigSynchronization>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800285c:	f7ff fbf0 	bl	8002040 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002860:	2360      	movs	r3, #96	@ 0x60
 8002862:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002868:	2300      	movs	r3, #0
 800286a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800286c:	2300      	movs	r3, #0
 800286e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002870:	463b      	mov	r3, r7
 8002872:	2200      	movs	r2, #0
 8002874:	4619      	mov	r1, r3
 8002876:	4807      	ldr	r0, [pc, #28]	@ (8002894 <MX_TIM3_Init+0xac>)
 8002878:	f004 fdfe 	bl	8007478 <HAL_TIM_PWM_ConfigChannel>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002882:	f7ff fbdd 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002886:	4803      	ldr	r0, [pc, #12]	@ (8002894 <MX_TIM3_Init+0xac>)
 8002888:	f000 f828 	bl	80028dc <HAL_TIM_MspPostInit>

}
 800288c:	bf00      	nop
 800288e:	3728      	adds	r7, #40	@ 0x28
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	200005cc 	.word	0x200005cc
 8002898:	40000400 	.word	0x40000400

0800289c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a0a      	ldr	r2, [pc, #40]	@ (80028d4 <HAL_TIM_PWM_MspInit+0x38>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d10b      	bne.n	80028c6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028ae:	4b0a      	ldr	r3, [pc, #40]	@ (80028d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	4a09      	ldr	r2, [pc, #36]	@ (80028d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80028b4:	f043 0302 	orr.w	r3, r3, #2
 80028b8:	61d3      	str	r3, [r2, #28]
 80028ba:	4b07      	ldr	r3, [pc, #28]	@ (80028d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80028c6:	bf00      	nop
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	40000400 	.word	0x40000400
 80028d8:	40021000 	.word	0x40021000

080028dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e4:	f107 030c 	add.w	r3, r7, #12
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	60da      	str	r2, [r3, #12]
 80028f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a11      	ldr	r2, [pc, #68]	@ (8002940 <HAL_TIM_MspPostInit+0x64>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d11c      	bne.n	8002938 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fe:	4b11      	ldr	r3, [pc, #68]	@ (8002944 <HAL_TIM_MspPostInit+0x68>)
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	4a10      	ldr	r2, [pc, #64]	@ (8002944 <HAL_TIM_MspPostInit+0x68>)
 8002904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002908:	6153      	str	r3, [r2, #20]
 800290a:	4b0e      	ldr	r3, [pc, #56]	@ (8002944 <HAL_TIM_MspPostInit+0x68>)
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8002916:	2340      	movs	r3, #64	@ 0x40
 8002918:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291a:	2302      	movs	r3, #2
 800291c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291e:	2300      	movs	r3, #0
 8002920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002922:	2300      	movs	r3, #0
 8002924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002926:	2302      	movs	r3, #2
 8002928:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800292a:	f107 030c 	add.w	r3, r7, #12
 800292e:	4619      	mov	r1, r3
 8002930:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002934:	f001 fb12 	bl	8003f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002938:	bf00      	nop
 800293a:	3720      	adds	r7, #32
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40000400 	.word	0x40000400
 8002944:	40021000 	.word	0x40021000

08002948 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800294c:	4b14      	ldr	r3, [pc, #80]	@ (80029a0 <MX_USART2_UART_Init+0x58>)
 800294e:	4a15      	ldr	r2, [pc, #84]	@ (80029a4 <MX_USART2_UART_Init+0x5c>)
 8002950:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002952:	4b13      	ldr	r3, [pc, #76]	@ (80029a0 <MX_USART2_UART_Init+0x58>)
 8002954:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002958:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800295a:	4b11      	ldr	r3, [pc, #68]	@ (80029a0 <MX_USART2_UART_Init+0x58>)
 800295c:	2200      	movs	r2, #0
 800295e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002960:	4b0f      	ldr	r3, [pc, #60]	@ (80029a0 <MX_USART2_UART_Init+0x58>)
 8002962:	2200      	movs	r2, #0
 8002964:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002966:	4b0e      	ldr	r3, [pc, #56]	@ (80029a0 <MX_USART2_UART_Init+0x58>)
 8002968:	2200      	movs	r2, #0
 800296a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800296c:	4b0c      	ldr	r3, [pc, #48]	@ (80029a0 <MX_USART2_UART_Init+0x58>)
 800296e:	220c      	movs	r2, #12
 8002970:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002972:	4b0b      	ldr	r3, [pc, #44]	@ (80029a0 <MX_USART2_UART_Init+0x58>)
 8002974:	2200      	movs	r2, #0
 8002976:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002978:	4b09      	ldr	r3, [pc, #36]	@ (80029a0 <MX_USART2_UART_Init+0x58>)
 800297a:	2200      	movs	r2, #0
 800297c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800297e:	4b08      	ldr	r3, [pc, #32]	@ (80029a0 <MX_USART2_UART_Init+0x58>)
 8002980:	2200      	movs	r2, #0
 8002982:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002984:	4b06      	ldr	r3, [pc, #24]	@ (80029a0 <MX_USART2_UART_Init+0x58>)
 8002986:	2200      	movs	r2, #0
 8002988:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800298a:	4805      	ldr	r0, [pc, #20]	@ (80029a0 <MX_USART2_UART_Init+0x58>)
 800298c:	f005 fb30 	bl	8007ff0 <HAL_UART_Init>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002996:	f7ff fb53 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20000618 	.word	0x20000618
 80029a4:	40004400 	.word	0x40004400

080029a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	@ 0x28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b0:	f107 0314 	add.w	r3, r7, #20
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a17      	ldr	r2, [pc, #92]	@ (8002a24 <HAL_UART_MspInit+0x7c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d128      	bne.n	8002a1c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029ca:	4b17      	ldr	r3, [pc, #92]	@ (8002a28 <HAL_UART_MspInit+0x80>)
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	4a16      	ldr	r2, [pc, #88]	@ (8002a28 <HAL_UART_MspInit+0x80>)
 80029d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029d4:	61d3      	str	r3, [r2, #28]
 80029d6:	4b14      	ldr	r3, [pc, #80]	@ (8002a28 <HAL_UART_MspInit+0x80>)
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029de:	613b      	str	r3, [r7, #16]
 80029e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e2:	4b11      	ldr	r3, [pc, #68]	@ (8002a28 <HAL_UART_MspInit+0x80>)
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	4a10      	ldr	r2, [pc, #64]	@ (8002a28 <HAL_UART_MspInit+0x80>)
 80029e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029ec:	6153      	str	r3, [r2, #20]
 80029ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002a28 <HAL_UART_MspInit+0x80>)
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80029fa:	230c      	movs	r3, #12
 80029fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fe:	2302      	movs	r3, #2
 8002a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a06:	2300      	movs	r3, #0
 8002a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a0a:	2307      	movs	r3, #7
 8002a0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a0e:	f107 0314 	add.w	r3, r7, #20
 8002a12:	4619      	mov	r1, r3
 8002a14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a18:	f001 faa0 	bl	8003f5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	3728      	adds	r7, #40	@ 0x28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40004400 	.word	0x40004400
 8002a28:	40021000 	.word	0x40021000

08002a2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a64 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a30:	f7ff fec8 	bl	80027c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a34:	480c      	ldr	r0, [pc, #48]	@ (8002a68 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a36:	490d      	ldr	r1, [pc, #52]	@ (8002a6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a38:	4a0d      	ldr	r2, [pc, #52]	@ (8002a70 <LoopForever+0xe>)
  movs r3, #0
 8002a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a3c:	e002      	b.n	8002a44 <LoopCopyDataInit>

08002a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a42:	3304      	adds	r3, #4

08002a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a48:	d3f9      	bcc.n	8002a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a4c:	4c0a      	ldr	r4, [pc, #40]	@ (8002a78 <LoopForever+0x16>)
  movs r3, #0
 8002a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a50:	e001      	b.n	8002a56 <LoopFillZerobss>

08002a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a54:	3204      	adds	r2, #4

08002a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a58:	d3fb      	bcc.n	8002a52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a5a:	f009 fd99 	bl	800c590 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a5e:	f7ff fa41 	bl	8001ee4 <main>

08002a62 <LoopForever>:

LoopForever:
    b LoopForever
 8002a62:	e7fe      	b.n	8002a62 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a64:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a6c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002a70:	08012ad8 	.word	0x08012ad8
  ldr r2, =_sbss
 8002a74:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002a78:	200035d0 	.word	0x200035d0

08002a7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a7c:	e7fe      	b.n	8002a7c <ADC1_2_IRQHandler>
	...

08002a80 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a84:	4b08      	ldr	r3, [pc, #32]	@ (8002aa8 <HAL_Init+0x28>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a07      	ldr	r2, [pc, #28]	@ (8002aa8 <HAL_Init+0x28>)
 8002a8a:	f043 0310 	orr.w	r3, r3, #16
 8002a8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a90:	2003      	movs	r0, #3
 8002a92:	f001 fa2e 	bl	8003ef2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a96:	200f      	movs	r0, #15
 8002a98:	f7ff fd38 	bl	800250c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a9c:	f7ff fd0e 	bl	80024bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40022000 	.word	0x40022000

08002aac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ab0:	4b06      	ldr	r3, [pc, #24]	@ (8002acc <HAL_IncTick+0x20>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	4b06      	ldr	r3, [pc, #24]	@ (8002ad0 <HAL_IncTick+0x24>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4413      	add	r3, r2
 8002abc:	4a04      	ldr	r2, [pc, #16]	@ (8002ad0 <HAL_IncTick+0x24>)
 8002abe:	6013      	str	r3, [r2, #0]
}
 8002ac0:	bf00      	nop
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	20000010 	.word	0x20000010
 8002ad0:	200006a0 	.word	0x200006a0

08002ad4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  return uwTick;  
 8002ad8:	4b03      	ldr	r3, [pc, #12]	@ (8002ae8 <HAL_GetTick+0x14>)
 8002ada:	681b      	ldr	r3, [r3, #0]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	200006a0 	.word	0x200006a0

08002aec <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002af4:	f7ff ffee 	bl	8002ad4 <HAL_GetTick>
 8002af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b04:	d005      	beq.n	8002b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b06:	4b0a      	ldr	r3, [pc, #40]	@ (8002b30 <HAL_Delay+0x44>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4413      	add	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002b12:	bf00      	nop
 8002b14:	f7ff ffde 	bl	8002ad4 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d8f7      	bhi.n	8002b14 <HAL_Delay+0x28>
  {
  }
}
 8002b24:	bf00      	nop
 8002b26:	bf00      	nop
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000010 	.word	0x20000010

08002b34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b09a      	sub	sp, #104	@ 0x68
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e1e3      	b.n	8002f1c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5e:	f003 0310 	and.w	r3, r3, #16
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d176      	bne.n	8002c54 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d152      	bne.n	8002c14 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7fe fccb 	bl	8001524 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d13b      	bne.n	8002c14 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 ffdf 	bl	8003b60 <ADC_Disable>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d12f      	bne.n	8002c14 <HAL_ADC_Init+0xe0>
 8002bb4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d12b      	bne.n	8002c14 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002bc4:	f023 0302 	bic.w	r3, r3, #2
 8002bc8:	f043 0202 	orr.w	r2, r3, #2
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002bde:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002bee:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bf0:	4b92      	ldr	r3, [pc, #584]	@ (8002e3c <HAL_ADC_Init+0x308>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a92      	ldr	r2, [pc, #584]	@ (8002e40 <HAL_ADC_Init+0x30c>)
 8002bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfa:	0c9a      	lsrs	r2, r3, #18
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c06:	e002      	b.n	8002c0e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1f9      	bne.n	8002c08 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d007      	beq.n	8002c32 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002c2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c30:	d110      	bne.n	8002c54 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	f023 0312 	bic.w	r3, r3, #18
 8002c3a:	f043 0210 	orr.w	r2, r3, #16
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c46:	f043 0201 	orr.w	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c58:	f003 0310 	and.w	r3, r3, #16
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f040 8150 	bne.w	8002f02 <HAL_ADC_Init+0x3ce>
 8002c62:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f040 814b 	bne.w	8002f02 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f040 8143 	bne.w	8002f02 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c80:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002c84:	f043 0202 	orr.w	r2, r3, #2
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c94:	d004      	beq.n	8002ca0 <HAL_ADC_Init+0x16c>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a6a      	ldr	r2, [pc, #424]	@ (8002e44 <HAL_ADC_Init+0x310>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d101      	bne.n	8002ca4 <HAL_ADC_Init+0x170>
 8002ca0:	4b69      	ldr	r3, [pc, #420]	@ (8002e48 <HAL_ADC_Init+0x314>)
 8002ca2:	e000      	b.n	8002ca6 <HAL_ADC_Init+0x172>
 8002ca4:	4b69      	ldr	r3, [pc, #420]	@ (8002e4c <HAL_ADC_Init+0x318>)
 8002ca6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cb0:	d102      	bne.n	8002cb8 <HAL_ADC_Init+0x184>
 8002cb2:	4b64      	ldr	r3, [pc, #400]	@ (8002e44 <HAL_ADC_Init+0x310>)
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	e01a      	b.n	8002cee <HAL_ADC_Init+0x1ba>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a61      	ldr	r2, [pc, #388]	@ (8002e44 <HAL_ADC_Init+0x310>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d103      	bne.n	8002cca <HAL_ADC_Init+0x196>
 8002cc2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	e011      	b.n	8002cee <HAL_ADC_Init+0x1ba>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a60      	ldr	r2, [pc, #384]	@ (8002e50 <HAL_ADC_Init+0x31c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d102      	bne.n	8002cda <HAL_ADC_Init+0x1a6>
 8002cd4:	4b5f      	ldr	r3, [pc, #380]	@ (8002e54 <HAL_ADC_Init+0x320>)
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	e009      	b.n	8002cee <HAL_ADC_Init+0x1ba>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a5d      	ldr	r2, [pc, #372]	@ (8002e54 <HAL_ADC_Init+0x320>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d102      	bne.n	8002cea <HAL_ADC_Init+0x1b6>
 8002ce4:	4b5a      	ldr	r3, [pc, #360]	@ (8002e50 <HAL_ADC_Init+0x31c>)
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	e001      	b.n	8002cee <HAL_ADC_Init+0x1ba>
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 0303 	and.w	r3, r3, #3
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d108      	bne.n	8002d0e <HAL_ADC_Init+0x1da>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <HAL_ADC_Init+0x1da>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <HAL_ADC_Init+0x1dc>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d11c      	bne.n	8002d4e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002d14:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d010      	beq.n	8002d3c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d107      	bne.n	8002d36 <HAL_ADC_Init+0x202>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <HAL_ADC_Init+0x202>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e000      	b.n	8002d38 <HAL_ADC_Init+0x204>
 8002d36:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d108      	bne.n	8002d4e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002d3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d4c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	7e5b      	ldrb	r3, [r3, #25]
 8002d52:	035b      	lsls	r3, r3, #13
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d58:	2a01      	cmp	r2, #1
 8002d5a:	d002      	beq.n	8002d62 <HAL_ADC_Init+0x22e>
 8002d5c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002d60:	e000      	b.n	8002d64 <HAL_ADC_Init+0x230>
 8002d62:	2200      	movs	r2, #0
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002d74:	4313      	orrs	r3, r2
 8002d76:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d11b      	bne.n	8002dba <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	7e5b      	ldrb	r3, [r3, #25]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d109      	bne.n	8002d9e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	045a      	lsls	r2, r3, #17
 8002d92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d9a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d9c:	e00d      	b.n	8002dba <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002da6:	f043 0220 	orr.w	r2, r3, #32
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db2:	f043 0201 	orr.w	r2, r3, #1
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d054      	beq.n	8002e6c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a22      	ldr	r2, [pc, #136]	@ (8002e50 <HAL_ADC_Init+0x31c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d004      	beq.n	8002dd6 <HAL_ADC_Init+0x2a2>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a20      	ldr	r2, [pc, #128]	@ (8002e54 <HAL_ADC_Init+0x320>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d140      	bne.n	8002e58 <HAL_ADC_Init+0x324>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dda:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8002dde:	d02a      	beq.n	8002e36 <HAL_ADC_Init+0x302>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002de8:	d022      	beq.n	8002e30 <HAL_ADC_Init+0x2fc>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dee:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8002df2:	d01a      	beq.n	8002e2a <HAL_ADC_Init+0x2f6>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df8:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8002dfc:	d012      	beq.n	8002e24 <HAL_ADC_Init+0x2f0>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e02:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8002e06:	d00a      	beq.n	8002e1e <HAL_ADC_Init+0x2ea>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0c:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8002e10:	d002      	beq.n	8002e18 <HAL_ADC_Init+0x2e4>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e16:	e023      	b.n	8002e60 <HAL_ADC_Init+0x32c>
 8002e18:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002e1c:	e020      	b.n	8002e60 <HAL_ADC_Init+0x32c>
 8002e1e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002e22:	e01d      	b.n	8002e60 <HAL_ADC_Init+0x32c>
 8002e24:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002e28:	e01a      	b.n	8002e60 <HAL_ADC_Init+0x32c>
 8002e2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e2e:	e017      	b.n	8002e60 <HAL_ADC_Init+0x32c>
 8002e30:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8002e34:	e014      	b.n	8002e60 <HAL_ADC_Init+0x32c>
 8002e36:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002e3a:	e011      	b.n	8002e60 <HAL_ADC_Init+0x32c>
 8002e3c:	20000008 	.word	0x20000008
 8002e40:	431bde83 	.word	0x431bde83
 8002e44:	50000100 	.word	0x50000100
 8002e48:	50000300 	.word	0x50000300
 8002e4c:	50000700 	.word	0x50000700
 8002e50:	50000400 	.word	0x50000400
 8002e54:	50000500 	.word	0x50000500
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002e64:	4313      	orrs	r3, r2
 8002e66:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 030c 	and.w	r3, r3, #12
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d114      	bne.n	8002ea4 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e88:	f023 0302 	bic.w	r3, r3, #2
 8002e8c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	7e1b      	ldrb	r3, [r3, #24]
 8002e92:	039a      	lsls	r2, r3, #14
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8002f24 <HAL_ADC_Init+0x3f0>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6812      	ldr	r2, [r2, #0]
 8002eb2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d10c      	bne.n	8002eda <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec6:	f023 010f 	bic.w	r1, r3, #15
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	1e5a      	subs	r2, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ed8:	e007      	b.n	8002eea <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 020f 	bic.w	r2, r2, #15
 8002ee8:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef4:	f023 0303 	bic.w	r3, r3, #3
 8002ef8:	f043 0201 	orr.w	r2, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f00:	e00a      	b.n	8002f18 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f06:	f023 0312 	bic.w	r3, r3, #18
 8002f0a:	f043 0210 	orr.w	r2, r3, #16
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002f12:	2301      	movs	r3, #1
 8002f14:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002f18:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3768      	adds	r7, #104	@ 0x68
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	fff0c007 	.word	0xfff0c007

08002f28 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f040 80f9 	bne.w	8003136 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <HAL_ADC_Start+0x2a>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e0f4      	b.n	800313c <HAL_ADC_Start+0x214>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fd9c 	bl	8003a98 <ADC_Enable>
 8002f60:	4603      	mov	r3, r0
 8002f62:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f040 80e0 	bne.w	800312c <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f70:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f74:	f023 0301 	bic.w	r3, r3, #1
 8002f78:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f88:	d004      	beq.n	8002f94 <HAL_ADC_Start+0x6c>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a6d      	ldr	r2, [pc, #436]	@ (8003144 <HAL_ADC_Start+0x21c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d106      	bne.n	8002fa2 <HAL_ADC_Start+0x7a>
 8002f94:	4b6c      	ldr	r3, [pc, #432]	@ (8003148 <HAL_ADC_Start+0x220>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 031f 	and.w	r3, r3, #31
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d010      	beq.n	8002fc2 <HAL_ADC_Start+0x9a>
 8002fa0:	e005      	b.n	8002fae <HAL_ADC_Start+0x86>
 8002fa2:	4b6a      	ldr	r3, [pc, #424]	@ (800314c <HAL_ADC_Start+0x224>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 031f 	and.w	r3, r3, #31
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d009      	beq.n	8002fc2 <HAL_ADC_Start+0x9a>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fb6:	d004      	beq.n	8002fc2 <HAL_ADC_Start+0x9a>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a64      	ldr	r2, [pc, #400]	@ (8003150 <HAL_ADC_Start+0x228>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d115      	bne.n	8002fee <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d036      	beq.n	800304a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002fe4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002fec:	e02d      	b.n	800304a <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003002:	d004      	beq.n	800300e <HAL_ADC_Start+0xe6>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a4e      	ldr	r2, [pc, #312]	@ (8003144 <HAL_ADC_Start+0x21c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d10a      	bne.n	8003024 <HAL_ADC_Start+0xfc>
 800300e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	bf14      	ite	ne
 800301c:	2301      	movne	r3, #1
 800301e:	2300      	moveq	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	e008      	b.n	8003036 <HAL_ADC_Start+0x10e>
 8003024:	4b4a      	ldr	r3, [pc, #296]	@ (8003150 <HAL_ADC_Start+0x228>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	bf14      	ite	ne
 8003030:	2301      	movne	r3, #1
 8003032:	2300      	moveq	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d007      	beq.n	800304a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003042:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003052:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003056:	d106      	bne.n	8003066 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800305c:	f023 0206 	bic.w	r2, r3, #6
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	645a      	str	r2, [r3, #68]	@ 0x44
 8003064:	e002      	b.n	800306c <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	221c      	movs	r2, #28
 800307a:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003084:	d004      	beq.n	8003090 <HAL_ADC_Start+0x168>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a2e      	ldr	r2, [pc, #184]	@ (8003144 <HAL_ADC_Start+0x21c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d106      	bne.n	800309e <HAL_ADC_Start+0x176>
 8003090:	4b2d      	ldr	r3, [pc, #180]	@ (8003148 <HAL_ADC_Start+0x220>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 031f 	and.w	r3, r3, #31
 8003098:	2b00      	cmp	r3, #0
 800309a:	d03e      	beq.n	800311a <HAL_ADC_Start+0x1f2>
 800309c:	e005      	b.n	80030aa <HAL_ADC_Start+0x182>
 800309e:	4b2b      	ldr	r3, [pc, #172]	@ (800314c <HAL_ADC_Start+0x224>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 031f 	and.w	r3, r3, #31
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d037      	beq.n	800311a <HAL_ADC_Start+0x1f2>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030b2:	d004      	beq.n	80030be <HAL_ADC_Start+0x196>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a22      	ldr	r2, [pc, #136]	@ (8003144 <HAL_ADC_Start+0x21c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d106      	bne.n	80030cc <HAL_ADC_Start+0x1a4>
 80030be:	4b22      	ldr	r3, [pc, #136]	@ (8003148 <HAL_ADC_Start+0x220>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 031f 	and.w	r3, r3, #31
 80030c6:	2b05      	cmp	r3, #5
 80030c8:	d027      	beq.n	800311a <HAL_ADC_Start+0x1f2>
 80030ca:	e005      	b.n	80030d8 <HAL_ADC_Start+0x1b0>
 80030cc:	4b1f      	ldr	r3, [pc, #124]	@ (800314c <HAL_ADC_Start+0x224>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 031f 	and.w	r3, r3, #31
 80030d4:	2b05      	cmp	r3, #5
 80030d6:	d020      	beq.n	800311a <HAL_ADC_Start+0x1f2>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030e0:	d004      	beq.n	80030ec <HAL_ADC_Start+0x1c4>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a17      	ldr	r2, [pc, #92]	@ (8003144 <HAL_ADC_Start+0x21c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d106      	bne.n	80030fa <HAL_ADC_Start+0x1d2>
 80030ec:	4b16      	ldr	r3, [pc, #88]	@ (8003148 <HAL_ADC_Start+0x220>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 031f 	and.w	r3, r3, #31
 80030f4:	2b09      	cmp	r3, #9
 80030f6:	d010      	beq.n	800311a <HAL_ADC_Start+0x1f2>
 80030f8:	e005      	b.n	8003106 <HAL_ADC_Start+0x1de>
 80030fa:	4b14      	ldr	r3, [pc, #80]	@ (800314c <HAL_ADC_Start+0x224>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 031f 	and.w	r3, r3, #31
 8003102:	2b09      	cmp	r3, #9
 8003104:	d009      	beq.n	800311a <HAL_ADC_Start+0x1f2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800310e:	d004      	beq.n	800311a <HAL_ADC_Start+0x1f2>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a0e      	ldr	r2, [pc, #56]	@ (8003150 <HAL_ADC_Start+0x228>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d10f      	bne.n	800313a <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f042 0204 	orr.w	r2, r2, #4
 8003128:	609a      	str	r2, [r3, #8]
 800312a:	e006      	b.n	800313a <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003134:	e001      	b.n	800313a <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003136:	2302      	movs	r3, #2
 8003138:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800313a:	7bfb      	ldrb	r3, [r7, #15]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	50000100 	.word	0x50000100
 8003148:	50000300 	.word	0x50000300
 800314c:	50000700 	.word	0x50000700
 8003150:	50000400 	.word	0x50000400

08003154 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003166:	2b01      	cmp	r3, #1
 8003168:	d101      	bne.n	800316e <HAL_ADC_Stop+0x1a>
 800316a:	2302      	movs	r3, #2
 800316c:	e023      	b.n	80031b6 <HAL_ADC_Stop+0x62>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003176:	216c      	movs	r1, #108	@ 0x6c
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 fd57 	bl	8003c2c <ADC_ConversionStop>
 800317e:	4603      	mov	r3, r0
 8003180:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003182:	7bfb      	ldrb	r3, [r7, #15]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d111      	bne.n	80031ac <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 fce9 	bl	8003b60 <ADC_Disable>
 800318e:	4603      	mov	r3, r0
 8003190:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003192:	7bfb      	ldrb	r3, [r7, #15]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d109      	bne.n	80031ac <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80031a0:	f023 0301 	bic.w	r3, r3, #1
 80031a4:	f043 0201 	orr.w	r2, r3, #1
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d102      	bne.n	80031dc <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80031d6:	2308      	movs	r3, #8
 80031d8:	617b      	str	r3, [r7, #20]
 80031da:	e03a      	b.n	8003252 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031e4:	d004      	beq.n	80031f0 <HAL_ADC_PollForConversion+0x30>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a72      	ldr	r2, [pc, #456]	@ (80033b4 <HAL_ADC_PollForConversion+0x1f4>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d101      	bne.n	80031f4 <HAL_ADC_PollForConversion+0x34>
 80031f0:	4b71      	ldr	r3, [pc, #452]	@ (80033b8 <HAL_ADC_PollForConversion+0x1f8>)
 80031f2:	e000      	b.n	80031f6 <HAL_ADC_PollForConversion+0x36>
 80031f4:	4b71      	ldr	r3, [pc, #452]	@ (80033bc <HAL_ADC_PollForConversion+0x1fc>)
 80031f6:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 031f 	and.w	r3, r3, #31
 8003200:	2b00      	cmp	r3, #0
 8003202:	d112      	bne.n	800322a <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b01      	cmp	r3, #1
 8003210:	d11d      	bne.n	800324e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003216:	f043 0220 	orr.w	r2, r3, #32
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e0bf      	b.n	80033aa <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00b      	beq.n	800324e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323a:	f043 0220 	orr.w	r2, r3, #32
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e0ad      	b.n	80033aa <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800324e:	230c      	movs	r3, #12
 8003250:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800325a:	d004      	beq.n	8003266 <HAL_ADC_PollForConversion+0xa6>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a54      	ldr	r2, [pc, #336]	@ (80033b4 <HAL_ADC_PollForConversion+0x1f4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d106      	bne.n	8003274 <HAL_ADC_PollForConversion+0xb4>
 8003266:	4b54      	ldr	r3, [pc, #336]	@ (80033b8 <HAL_ADC_PollForConversion+0x1f8>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 031f 	and.w	r3, r3, #31
 800326e:	2b00      	cmp	r3, #0
 8003270:	d010      	beq.n	8003294 <HAL_ADC_PollForConversion+0xd4>
 8003272:	e005      	b.n	8003280 <HAL_ADC_PollForConversion+0xc0>
 8003274:	4b51      	ldr	r3, [pc, #324]	@ (80033bc <HAL_ADC_PollForConversion+0x1fc>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 031f 	and.w	r3, r3, #31
 800327c:	2b00      	cmp	r3, #0
 800327e:	d009      	beq.n	8003294 <HAL_ADC_PollForConversion+0xd4>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003288:	d004      	beq.n	8003294 <HAL_ADC_PollForConversion+0xd4>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a4c      	ldr	r2, [pc, #304]	@ (80033c0 <HAL_ADC_PollForConversion+0x200>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d104      	bne.n	800329e <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	613b      	str	r3, [r7, #16]
 800329c:	e00f      	b.n	80032be <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032a6:	d004      	beq.n	80032b2 <HAL_ADC_PollForConversion+0xf2>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a41      	ldr	r2, [pc, #260]	@ (80033b4 <HAL_ADC_PollForConversion+0x1f4>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d102      	bne.n	80032b8 <HAL_ADC_PollForConversion+0xf8>
 80032b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80032b6:	e000      	b.n	80032ba <HAL_ADC_PollForConversion+0xfa>
 80032b8:	4b41      	ldr	r3, [pc, #260]	@ (80033c0 <HAL_ADC_PollForConversion+0x200>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80032be:	f7ff fc09 	bl	8002ad4 <HAL_GetTick>
 80032c2:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80032c4:	e021      	b.n	800330a <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032cc:	d01d      	beq.n	800330a <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d007      	beq.n	80032e4 <HAL_ADC_PollForConversion+0x124>
 80032d4:	f7ff fbfe 	bl	8002ad4 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d212      	bcs.n	800330a <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	4013      	ands	r3, r2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10b      	bne.n	800330a <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f6:	f043 0204 	orr.w	r2, r3, #4
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e04f      	b.n	80033aa <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	4013      	ands	r3, r2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0d6      	beq.n	80032c6 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800332e:	2b00      	cmp	r3, #0
 8003330:	d131      	bne.n	8003396 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003338:	2b00      	cmp	r3, #0
 800333a:	d12c      	bne.n	8003396 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b08      	cmp	r3, #8
 8003348:	d125      	bne.n	8003396 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b00      	cmp	r3, #0
 8003356:	d112      	bne.n	800337e <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003368:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d112      	bne.n	8003396 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003374:	f043 0201 	orr.w	r2, r3, #1
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	641a      	str	r2, [r3, #64]	@ 0x40
 800337c:	e00b      	b.n	8003396 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003382:	f043 0220 	orr.w	r2, r3, #32
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800338e:	f043 0201 	orr.w	r2, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d103      	bne.n	80033a8 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	50000100 	.word	0x50000100
 80033b8:	50000300 	.word	0x50000300
 80033bc:	50000700 	.word	0x50000700
 80033c0:	50000400 	.word	0x50000400

080033c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b084      	sub	sp, #16
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033e8:	2300      	movs	r3, #0
 80033ea:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_ADCEx_Calibration_Start+0x1c>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e05f      	b.n	80034ba <HAL_ADCEx_Calibration_Start+0xdc>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fbac 	bl	8003b60 <ADC_Disable>
 8003408:	4603      	mov	r3, r0
 800340a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800340c:	7bfb      	ldrb	r3, [r7, #15]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d14e      	bne.n	80034b0 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8003426:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d107      	bne.n	800343e <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800343c:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800344c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800344e:	f7ff fb41 	bl	8002ad4 <HAL_GetTick>
 8003452:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003454:	e01c      	b.n	8003490 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003456:	f7ff fb3d 	bl	8002ad4 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b0a      	cmp	r3, #10
 8003462:	d915      	bls.n	8003490 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800346e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003472:	d10d      	bne.n	8003490 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003478:	f023 0312 	bic.w	r3, r3, #18
 800347c:	f043 0210 	orr.w	r2, r3, #16
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e014      	b.n	80034ba <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800349a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800349e:	d0da      	beq.n	8003456 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a4:	f023 0303 	bic.w	r3, r3, #3
 80034a8:	f043 0201 	orr.w	r2, r3, #1
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
	...

080034c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b09b      	sub	sp, #108	@ 0x6c
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d101      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x22>
 80034e2:	2302      	movs	r3, #2
 80034e4:	e2c8      	b.n	8003a78 <HAL_ADC_ConfigChannel+0x5b4>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f040 82ac 	bne.w	8003a56 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b04      	cmp	r3, #4
 8003504:	d81c      	bhi.n	8003540 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	4613      	mov	r3, r2
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	4413      	add	r3, r2
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	461a      	mov	r2, r3
 800351a:	231f      	movs	r3, #31
 800351c:	4093      	lsls	r3, r2
 800351e:	43db      	mvns	r3, r3
 8003520:	4019      	ands	r1, r3
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	6818      	ldr	r0, [r3, #0]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4413      	add	r3, r2
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	fa00 f203 	lsl.w	r2, r0, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	631a      	str	r2, [r3, #48]	@ 0x30
 800353e:	e063      	b.n	8003608 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b09      	cmp	r3, #9
 8003546:	d81e      	bhi.n	8003586 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	4413      	add	r3, r2
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	3b1e      	subs	r3, #30
 800355c:	221f      	movs	r2, #31
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	43db      	mvns	r3, r3
 8003564:	4019      	ands	r1, r3
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	6818      	ldr	r0, [r3, #0]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	4413      	add	r3, r2
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	3b1e      	subs	r3, #30
 8003578:	fa00 f203 	lsl.w	r2, r0, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	635a      	str	r2, [r3, #52]	@ 0x34
 8003584:	e040      	b.n	8003608 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b0e      	cmp	r3, #14
 800358c:	d81e      	bhi.n	80035cc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	4413      	add	r3, r2
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	3b3c      	subs	r3, #60	@ 0x3c
 80035a2:	221f      	movs	r2, #31
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	43db      	mvns	r3, r3
 80035aa:	4019      	ands	r1, r3
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	6818      	ldr	r0, [r3, #0]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	4413      	add	r3, r2
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	3b3c      	subs	r3, #60	@ 0x3c
 80035be:	fa00 f203 	lsl.w	r2, r0, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	639a      	str	r2, [r3, #56]	@ 0x38
 80035ca:	e01d      	b.n	8003608 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	4413      	add	r3, r2
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	3b5a      	subs	r3, #90	@ 0x5a
 80035e0:	221f      	movs	r2, #31
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	43db      	mvns	r3, r3
 80035e8:	4019      	ands	r1, r3
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	6818      	ldr	r0, [r3, #0]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	4413      	add	r3, r2
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	3b5a      	subs	r3, #90	@ 0x5a
 80035fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 030c 	and.w	r3, r3, #12
 8003612:	2b00      	cmp	r3, #0
 8003614:	f040 80e5 	bne.w	80037e2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b09      	cmp	r3, #9
 800361e:	d91c      	bls.n	800365a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6999      	ldr	r1, [r3, #24]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	4613      	mov	r3, r2
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	4413      	add	r3, r2
 8003630:	3b1e      	subs	r3, #30
 8003632:	2207      	movs	r2, #7
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	43db      	mvns	r3, r3
 800363a:	4019      	ands	r1, r3
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	6898      	ldr	r0, [r3, #8]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	4613      	mov	r3, r2
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	4413      	add	r3, r2
 800364a:	3b1e      	subs	r3, #30
 800364c:	fa00 f203 	lsl.w	r2, r0, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	619a      	str	r2, [r3, #24]
 8003658:	e019      	b.n	800368e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6959      	ldr	r1, [r3, #20]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	4613      	mov	r3, r2
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	4413      	add	r3, r2
 800366a:	2207      	movs	r2, #7
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	43db      	mvns	r3, r3
 8003672:	4019      	ands	r1, r3
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	6898      	ldr	r0, [r3, #8]
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	4613      	mov	r3, r2
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	4413      	add	r3, r2
 8003682:	fa00 f203 	lsl.w	r2, r0, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	695a      	ldr	r2, [r3, #20]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	08db      	lsrs	r3, r3, #3
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	2b03      	cmp	r3, #3
 80036ae:	d84f      	bhi.n	8003750 <HAL_ADC_ConfigChannel+0x28c>
 80036b0:	a201      	add	r2, pc, #4	@ (adr r2, 80036b8 <HAL_ADC_ConfigChannel+0x1f4>)
 80036b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b6:	bf00      	nop
 80036b8:	080036c9 	.word	0x080036c9
 80036bc:	080036eb 	.word	0x080036eb
 80036c0:	0800370d 	.word	0x0800370d
 80036c4:	0800372f 	.word	0x0800372f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80036ce:	4b99      	ldr	r3, [pc, #612]	@ (8003934 <HAL_ADC_ConfigChannel+0x470>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	6812      	ldr	r2, [r2, #0]
 80036d6:	0691      	lsls	r1, r2, #26
 80036d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80036da:	430a      	orrs	r2, r1
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80036e6:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80036e8:	e07b      	b.n	80037e2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80036f0:	4b90      	ldr	r3, [pc, #576]	@ (8003934 <HAL_ADC_ConfigChannel+0x470>)
 80036f2:	4013      	ands	r3, r2
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	6812      	ldr	r2, [r2, #0]
 80036f8:	0691      	lsls	r1, r2, #26
 80036fa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80036fc:	430a      	orrs	r2, r1
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003708:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800370a:	e06a      	b.n	80037e2 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003712:	4b88      	ldr	r3, [pc, #544]	@ (8003934 <HAL_ADC_ConfigChannel+0x470>)
 8003714:	4013      	ands	r3, r2
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	6812      	ldr	r2, [r2, #0]
 800371a:	0691      	lsls	r1, r2, #26
 800371c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800371e:	430a      	orrs	r2, r1
 8003720:	431a      	orrs	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800372a:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800372c:	e059      	b.n	80037e2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003734:	4b7f      	ldr	r3, [pc, #508]	@ (8003934 <HAL_ADC_ConfigChannel+0x470>)
 8003736:	4013      	ands	r3, r2
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	6812      	ldr	r2, [r2, #0]
 800373c:	0691      	lsls	r1, r2, #26
 800373e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003740:	430a      	orrs	r2, r1
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800374c:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800374e:	e048      	b.n	80037e2 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003756:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	069b      	lsls	r3, r3, #26
 8003760:	429a      	cmp	r2, r3
 8003762:	d107      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003772:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800377a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	069b      	lsls	r3, r3, #26
 8003784:	429a      	cmp	r2, r3
 8003786:	d107      	bne.n	8003798 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003796:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800379e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	069b      	lsls	r3, r3, #26
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d107      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80037ba:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	069b      	lsls	r3, r3, #26
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d107      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80037de:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80037e0:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f003 0303 	and.w	r3, r3, #3
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d108      	bne.n	8003802 <HAL_ADC_ConfigChannel+0x33e>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d101      	bne.n	8003802 <HAL_ADC_ConfigChannel+0x33e>
 80037fe:	2301      	movs	r3, #1
 8003800:	e000      	b.n	8003804 <HAL_ADC_ConfigChannel+0x340>
 8003802:	2300      	movs	r3, #0
 8003804:	2b00      	cmp	r3, #0
 8003806:	f040 8131 	bne.w	8003a6c <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d00f      	beq.n	8003832 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2201      	movs	r2, #1
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	43da      	mvns	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	400a      	ands	r2, r1
 800382c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8003830:	e049      	b.n	80038c6 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2201      	movs	r2, #1
 8003840:	409a      	lsls	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b09      	cmp	r3, #9
 8003852:	d91c      	bls.n	800388e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6999      	ldr	r1, [r3, #24]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	4613      	mov	r3, r2
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	4413      	add	r3, r2
 8003864:	3b1b      	subs	r3, #27
 8003866:	2207      	movs	r2, #7
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	43db      	mvns	r3, r3
 800386e:	4019      	ands	r1, r3
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	6898      	ldr	r0, [r3, #8]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	4613      	mov	r3, r2
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	4413      	add	r3, r2
 800387e:	3b1b      	subs	r3, #27
 8003880:	fa00 f203 	lsl.w	r2, r0, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	619a      	str	r2, [r3, #24]
 800388c:	e01b      	b.n	80038c6 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6959      	ldr	r1, [r3, #20]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	4613      	mov	r3, r2
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	4413      	add	r3, r2
 80038a0:	2207      	movs	r2, #7
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	43db      	mvns	r3, r3
 80038a8:	4019      	ands	r1, r3
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	6898      	ldr	r0, [r3, #8]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	4613      	mov	r3, r2
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	4413      	add	r3, r2
 80038ba:	fa00 f203 	lsl.w	r2, r0, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038ce:	d004      	beq.n	80038da <HAL_ADC_ConfigChannel+0x416>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a18      	ldr	r2, [pc, #96]	@ (8003938 <HAL_ADC_ConfigChannel+0x474>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d101      	bne.n	80038de <HAL_ADC_ConfigChannel+0x41a>
 80038da:	4b18      	ldr	r3, [pc, #96]	@ (800393c <HAL_ADC_ConfigChannel+0x478>)
 80038dc:	e000      	b.n	80038e0 <HAL_ADC_ConfigChannel+0x41c>
 80038de:	4b18      	ldr	r3, [pc, #96]	@ (8003940 <HAL_ADC_ConfigChannel+0x47c>)
 80038e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b10      	cmp	r3, #16
 80038e8:	d105      	bne.n	80038f6 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80038ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d015      	beq.n	8003922 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80038fa:	2b11      	cmp	r3, #17
 80038fc:	d105      	bne.n	800390a <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80038fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00b      	beq.n	8003922 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800390e:	2b12      	cmp	r3, #18
 8003910:	f040 80ac 	bne.w	8003a6c <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003914:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800391c:	2b00      	cmp	r3, #0
 800391e:	f040 80a5 	bne.w	8003a6c <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800392a:	d10b      	bne.n	8003944 <HAL_ADC_ConfigChannel+0x480>
 800392c:	4b02      	ldr	r3, [pc, #8]	@ (8003938 <HAL_ADC_ConfigChannel+0x474>)
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	e023      	b.n	800397a <HAL_ADC_ConfigChannel+0x4b6>
 8003932:	bf00      	nop
 8003934:	83fff000 	.word	0x83fff000
 8003938:	50000100 	.word	0x50000100
 800393c:	50000300 	.word	0x50000300
 8003940:	50000700 	.word	0x50000700
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a4e      	ldr	r2, [pc, #312]	@ (8003a84 <HAL_ADC_ConfigChannel+0x5c0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d103      	bne.n	8003956 <HAL_ADC_ConfigChannel+0x492>
 800394e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	e011      	b.n	800397a <HAL_ADC_ConfigChannel+0x4b6>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a4b      	ldr	r2, [pc, #300]	@ (8003a88 <HAL_ADC_ConfigChannel+0x5c4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d102      	bne.n	8003966 <HAL_ADC_ConfigChannel+0x4a2>
 8003960:	4b4a      	ldr	r3, [pc, #296]	@ (8003a8c <HAL_ADC_ConfigChannel+0x5c8>)
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	e009      	b.n	800397a <HAL_ADC_ConfigChannel+0x4b6>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a48      	ldr	r2, [pc, #288]	@ (8003a8c <HAL_ADC_ConfigChannel+0x5c8>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d102      	bne.n	8003976 <HAL_ADC_ConfigChannel+0x4b2>
 8003970:	4b45      	ldr	r3, [pc, #276]	@ (8003a88 <HAL_ADC_ConfigChannel+0x5c4>)
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	e001      	b.n	800397a <HAL_ADC_ConfigChannel+0x4b6>
 8003976:	2300      	movs	r3, #0
 8003978:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 0303 	and.w	r3, r3, #3
 8003984:	2b01      	cmp	r3, #1
 8003986:	d108      	bne.n	800399a <HAL_ADC_ConfigChannel+0x4d6>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <HAL_ADC_ConfigChannel+0x4d6>
 8003996:	2301      	movs	r3, #1
 8003998:	e000      	b.n	800399c <HAL_ADC_ConfigChannel+0x4d8>
 800399a:	2300      	movs	r3, #0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d150      	bne.n	8003a42 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80039a0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d010      	beq.n	80039c8 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d107      	bne.n	80039c2 <HAL_ADC_ConfigChannel+0x4fe>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d101      	bne.n	80039c2 <HAL_ADC_ConfigChannel+0x4fe>
 80039be:	2301      	movs	r3, #1
 80039c0:	e000      	b.n	80039c4 <HAL_ADC_ConfigChannel+0x500>
 80039c2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d13c      	bne.n	8003a42 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b10      	cmp	r3, #16
 80039ce:	d11d      	bne.n	8003a0c <HAL_ADC_ConfigChannel+0x548>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039d8:	d118      	bne.n	8003a0c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80039da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80039e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039e4:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003a90 <HAL_ADC_ConfigChannel+0x5cc>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a2a      	ldr	r2, [pc, #168]	@ (8003a94 <HAL_ADC_ConfigChannel+0x5d0>)
 80039ec:	fba2 2303 	umull	r2, r3, r2, r3
 80039f0:	0c9a      	lsrs	r2, r3, #18
 80039f2:	4613      	mov	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80039fc:	e002      	b.n	8003a04 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	3b01      	subs	r3, #1
 8003a02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f9      	bne.n	80039fe <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003a0a:	e02e      	b.n	8003a6a <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b11      	cmp	r3, #17
 8003a12:	d10b      	bne.n	8003a2c <HAL_ADC_ConfigChannel+0x568>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a1c:	d106      	bne.n	8003a2c <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003a1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8003a26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a28:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003a2a:	e01e      	b.n	8003a6a <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b12      	cmp	r3, #18
 8003a32:	d11a      	bne.n	8003a6a <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003a34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003a3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a3e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003a40:	e013      	b.n	8003a6a <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a46:	f043 0220 	orr.w	r2, r3, #32
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8003a54:	e00a      	b.n	8003a6c <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5a:	f043 0220 	orr.w	r2, r3, #32
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8003a68:	e000      	b.n	8003a6c <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003a6a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003a74:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	376c      	adds	r7, #108	@ 0x6c
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	50000100 	.word	0x50000100
 8003a88:	50000400 	.word	0x50000400
 8003a8c:	50000500 	.word	0x50000500
 8003a90:	20000008 	.word	0x20000008
 8003a94:	431bde83 	.word	0x431bde83

08003a98 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d108      	bne.n	8003ac4 <ADC_Enable+0x2c>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <ADC_Enable+0x2c>
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e000      	b.n	8003ac6 <ADC_Enable+0x2e>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d143      	bne.n	8003b52 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	4b22      	ldr	r3, [pc, #136]	@ (8003b5c <ADC_Enable+0xc4>)
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00d      	beq.n	8003af4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003adc:	f043 0210 	orr.w	r2, r3, #16
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae8:	f043 0201 	orr.w	r2, r3, #1
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e02f      	b.n	8003b54 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689a      	ldr	r2, [r3, #8]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0201 	orr.w	r2, r2, #1
 8003b02:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003b04:	f7fe ffe6 	bl	8002ad4 <HAL_GetTick>
 8003b08:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003b0a:	e01b      	b.n	8003b44 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b0c:	f7fe ffe2 	bl	8002ad4 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d914      	bls.n	8003b44 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d00d      	beq.n	8003b44 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2c:	f043 0210 	orr.w	r2, r3, #16
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b38:	f043 0201 	orr.w	r2, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e007      	b.n	8003b54 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d1dc      	bne.n	8003b0c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	8000003f 	.word	0x8000003f

08003b60 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d108      	bne.n	8003b8c <ADC_Disable+0x2c>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d101      	bne.n	8003b8c <ADC_Disable+0x2c>
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e000      	b.n	8003b8e <ADC_Disable+0x2e>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d047      	beq.n	8003c22 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f003 030d 	and.w	r3, r3, #13
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d10f      	bne.n	8003bc0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689a      	ldr	r2, [r3, #8]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0202 	orr.w	r2, r2, #2
 8003bae:	609a      	str	r2, [r3, #8]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003bb8:	f7fe ff8c 	bl	8002ad4 <HAL_GetTick>
 8003bbc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003bbe:	e029      	b.n	8003c14 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc4:	f043 0210 	orr.w	r2, r3, #16
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd0:	f043 0201 	orr.w	r2, r3, #1
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e023      	b.n	8003c24 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003bdc:	f7fe ff7a 	bl	8002ad4 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d914      	bls.n	8003c14 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d10d      	bne.n	8003c14 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfc:	f043 0210 	orr.w	r2, r3, #16
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c08:	f043 0201 	orr.w	r2, r3, #1
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e007      	b.n	8003c24 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d0dc      	beq.n	8003bdc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 030c 	and.w	r3, r3, #12
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 809b 	beq.w	8003d88 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c60:	d12a      	bne.n	8003cb8 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d126      	bne.n	8003cb8 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d122      	bne.n	8003cb8 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8003c72:	230c      	movs	r3, #12
 8003c74:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003c76:	e014      	b.n	8003ca2 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	4a46      	ldr	r2, [pc, #280]	@ (8003d94 <ADC_ConversionStop+0x168>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d90d      	bls.n	8003c9c <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c84:	f043 0210 	orr.w	r2, r3, #16
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c90:	f043 0201 	orr.w	r2, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	645a      	str	r2, [r3, #68]	@ 0x44
          
          return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e076      	b.n	8003d8a <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cac:	2b40      	cmp	r3, #64	@ 0x40
 8003cae:	d1e3      	bne.n	8003c78 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2240      	movs	r2, #64	@ 0x40
 8003cb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2b60      	cmp	r3, #96	@ 0x60
 8003cbc:	d015      	beq.n	8003cea <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b04      	cmp	r3, #4
 8003cca:	d10e      	bne.n	8003cea <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d107      	bne.n	8003cea <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f042 0210 	orr.w	r2, r2, #16
 8003ce8:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b0c      	cmp	r3, #12
 8003cee:	d015      	beq.n	8003d1c <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d10e      	bne.n	8003d1c <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d107      	bne.n	8003d1c <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0220 	orr.w	r2, r2, #32
 8003d1a:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	2b60      	cmp	r3, #96	@ 0x60
 8003d20:	d005      	beq.n	8003d2e <ADC_ConversionStop+0x102>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2b6c      	cmp	r3, #108	@ 0x6c
 8003d26:	d105      	bne.n	8003d34 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003d28:	230c      	movs	r3, #12
 8003d2a:	617b      	str	r3, [r7, #20]
        break;
 8003d2c:	e005      	b.n	8003d3a <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003d2e:	2308      	movs	r3, #8
 8003d30:	617b      	str	r3, [r7, #20]
        break;
 8003d32:	e002      	b.n	8003d3a <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003d34:	2304      	movs	r3, #4
 8003d36:	617b      	str	r3, [r7, #20]
        break;
 8003d38:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003d3a:	f7fe fecb 	bl	8002ad4 <HAL_GetTick>
 8003d3e:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003d40:	e01b      	b.n	8003d7a <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003d42:	f7fe fec7 	bl	8002ad4 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b0b      	cmp	r3, #11
 8003d4e:	d914      	bls.n	8003d7a <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00d      	beq.n	8003d7a <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d62:	f043 0210 	orr.w	r2, r3, #16
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6e:	f043 0201 	orr.w	r2, r3, #1
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	645a      	str	r2, [r3, #68]	@ 0x44
        
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e007      	b.n	8003d8a <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	4013      	ands	r3, r2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1dc      	bne.n	8003d42 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3718      	adds	r7, #24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	000993ff 	.word	0x000993ff

08003d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003da8:	4b0c      	ldr	r3, [pc, #48]	@ (8003ddc <__NVIC_SetPriorityGrouping+0x44>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003db4:	4013      	ands	r3, r2
 8003db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dca:	4a04      	ldr	r2, [pc, #16]	@ (8003ddc <__NVIC_SetPriorityGrouping+0x44>)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	60d3      	str	r3, [r2, #12]
}
 8003dd0:	bf00      	nop
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	e000ed00 	.word	0xe000ed00

08003de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003de4:	4b04      	ldr	r3, [pc, #16]	@ (8003df8 <__NVIC_GetPriorityGrouping+0x18>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	0a1b      	lsrs	r3, r3, #8
 8003dea:	f003 0307 	and.w	r3, r3, #7
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	e000ed00 	.word	0xe000ed00

08003dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	4603      	mov	r3, r0
 8003e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	db0b      	blt.n	8003e26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e0e:	79fb      	ldrb	r3, [r7, #7]
 8003e10:	f003 021f 	and.w	r2, r3, #31
 8003e14:	4907      	ldr	r1, [pc, #28]	@ (8003e34 <__NVIC_EnableIRQ+0x38>)
 8003e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1a:	095b      	lsrs	r3, r3, #5
 8003e1c:	2001      	movs	r0, #1
 8003e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	e000e100 	.word	0xe000e100

08003e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	6039      	str	r1, [r7, #0]
 8003e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	db0a      	blt.n	8003e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	b2da      	uxtb	r2, r3
 8003e50:	490c      	ldr	r1, [pc, #48]	@ (8003e84 <__NVIC_SetPriority+0x4c>)
 8003e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e56:	0112      	lsls	r2, r2, #4
 8003e58:	b2d2      	uxtb	r2, r2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e60:	e00a      	b.n	8003e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	4908      	ldr	r1, [pc, #32]	@ (8003e88 <__NVIC_SetPriority+0x50>)
 8003e68:	79fb      	ldrb	r3, [r7, #7]
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	3b04      	subs	r3, #4
 8003e70:	0112      	lsls	r2, r2, #4
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	440b      	add	r3, r1
 8003e76:	761a      	strb	r2, [r3, #24]
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	e000e100 	.word	0xe000e100
 8003e88:	e000ed00 	.word	0xe000ed00

08003e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b089      	sub	sp, #36	@ 0x24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f1c3 0307 	rsb	r3, r3, #7
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	bf28      	it	cs
 8003eaa:	2304      	movcs	r3, #4
 8003eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	2b06      	cmp	r3, #6
 8003eb4:	d902      	bls.n	8003ebc <NVIC_EncodePriority+0x30>
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	3b03      	subs	r3, #3
 8003eba:	e000      	b.n	8003ebe <NVIC_EncodePriority+0x32>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	43da      	mvns	r2, r3
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	401a      	ands	r2, r3
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ed4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	fa01 f303 	lsl.w	r3, r1, r3
 8003ede:	43d9      	mvns	r1, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ee4:	4313      	orrs	r3, r2
         );
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3724      	adds	r7, #36	@ 0x24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b082      	sub	sp, #8
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7ff ff4c 	bl	8003d98 <__NVIC_SetPriorityGrouping>
}
 8003f00:	bf00      	nop
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	4603      	mov	r3, r0
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f16:	2300      	movs	r3, #0
 8003f18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f1a:	f7ff ff61 	bl	8003de0 <__NVIC_GetPriorityGrouping>
 8003f1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	68b9      	ldr	r1, [r7, #8]
 8003f24:	6978      	ldr	r0, [r7, #20]
 8003f26:	f7ff ffb1 	bl	8003e8c <NVIC_EncodePriority>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f30:	4611      	mov	r1, r2
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff ff80 	bl	8003e38 <__NVIC_SetPriority>
}
 8003f38:	bf00      	nop
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7ff ff54 	bl	8003dfc <__NVIC_EnableIRQ>
}
 8003f54:	bf00      	nop
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b087      	sub	sp, #28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f66:	2300      	movs	r3, #0
 8003f68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f6a:	e160      	b.n	800422e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	2101      	movs	r1, #1
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	fa01 f303 	lsl.w	r3, r1, r3
 8003f78:	4013      	ands	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 8152 	beq.w	8004228 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 0303 	and.w	r3, r3, #3
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d005      	beq.n	8003f9c <HAL_GPIO_Init+0x40>
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d130      	bne.n	8003ffe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	2203      	movs	r2, #3
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	43db      	mvns	r3, r3
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	091b      	lsrs	r3, r3, #4
 8003fe8:	f003 0201 	and.w	r2, r3, #1
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	2b03      	cmp	r3, #3
 8004008:	d017      	beq.n	800403a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	2203      	movs	r2, #3
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	43db      	mvns	r3, r3
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	4013      	ands	r3, r2
 8004020:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	4313      	orrs	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d123      	bne.n	800408e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	08da      	lsrs	r2, r3, #3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3208      	adds	r2, #8
 800404e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004052:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	220f      	movs	r2, #15
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	43db      	mvns	r3, r3
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	4013      	ands	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	691a      	ldr	r2, [r3, #16]
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	4313      	orrs	r3, r2
 800407e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	08da      	lsrs	r2, r3, #3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3208      	adds	r2, #8
 8004088:	6939      	ldr	r1, [r7, #16]
 800408a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	2203      	movs	r2, #3
 800409a:	fa02 f303 	lsl.w	r3, r2, r3
 800409e:	43db      	mvns	r3, r3
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4013      	ands	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f003 0203 	and.w	r2, r3, #3
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	fa02 f303 	lsl.w	r3, r2, r3
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 80ac 	beq.w	8004228 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040d0:	4b5e      	ldr	r3, [pc, #376]	@ (800424c <HAL_GPIO_Init+0x2f0>)
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	4a5d      	ldr	r2, [pc, #372]	@ (800424c <HAL_GPIO_Init+0x2f0>)
 80040d6:	f043 0301 	orr.w	r3, r3, #1
 80040da:	6193      	str	r3, [r2, #24]
 80040dc:	4b5b      	ldr	r3, [pc, #364]	@ (800424c <HAL_GPIO_Init+0x2f0>)
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	60bb      	str	r3, [r7, #8]
 80040e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80040e8:	4a59      	ldr	r2, [pc, #356]	@ (8004250 <HAL_GPIO_Init+0x2f4>)
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	089b      	lsrs	r3, r3, #2
 80040ee:	3302      	adds	r3, #2
 80040f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f003 0303 	and.w	r3, r3, #3
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	220f      	movs	r2, #15
 8004100:	fa02 f303 	lsl.w	r3, r2, r3
 8004104:	43db      	mvns	r3, r3
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	4013      	ands	r3, r2
 800410a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004112:	d025      	beq.n	8004160 <HAL_GPIO_Init+0x204>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a4f      	ldr	r2, [pc, #316]	@ (8004254 <HAL_GPIO_Init+0x2f8>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d01f      	beq.n	800415c <HAL_GPIO_Init+0x200>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a4e      	ldr	r2, [pc, #312]	@ (8004258 <HAL_GPIO_Init+0x2fc>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d019      	beq.n	8004158 <HAL_GPIO_Init+0x1fc>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a4d      	ldr	r2, [pc, #308]	@ (800425c <HAL_GPIO_Init+0x300>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d013      	beq.n	8004154 <HAL_GPIO_Init+0x1f8>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a4c      	ldr	r2, [pc, #304]	@ (8004260 <HAL_GPIO_Init+0x304>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d00d      	beq.n	8004150 <HAL_GPIO_Init+0x1f4>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a4b      	ldr	r2, [pc, #300]	@ (8004264 <HAL_GPIO_Init+0x308>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d007      	beq.n	800414c <HAL_GPIO_Init+0x1f0>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a4a      	ldr	r2, [pc, #296]	@ (8004268 <HAL_GPIO_Init+0x30c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d101      	bne.n	8004148 <HAL_GPIO_Init+0x1ec>
 8004144:	2306      	movs	r3, #6
 8004146:	e00c      	b.n	8004162 <HAL_GPIO_Init+0x206>
 8004148:	2307      	movs	r3, #7
 800414a:	e00a      	b.n	8004162 <HAL_GPIO_Init+0x206>
 800414c:	2305      	movs	r3, #5
 800414e:	e008      	b.n	8004162 <HAL_GPIO_Init+0x206>
 8004150:	2304      	movs	r3, #4
 8004152:	e006      	b.n	8004162 <HAL_GPIO_Init+0x206>
 8004154:	2303      	movs	r3, #3
 8004156:	e004      	b.n	8004162 <HAL_GPIO_Init+0x206>
 8004158:	2302      	movs	r3, #2
 800415a:	e002      	b.n	8004162 <HAL_GPIO_Init+0x206>
 800415c:	2301      	movs	r3, #1
 800415e:	e000      	b.n	8004162 <HAL_GPIO_Init+0x206>
 8004160:	2300      	movs	r3, #0
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	f002 0203 	and.w	r2, r2, #3
 8004168:	0092      	lsls	r2, r2, #2
 800416a:	4093      	lsls	r3, r2
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4313      	orrs	r3, r2
 8004170:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004172:	4937      	ldr	r1, [pc, #220]	@ (8004250 <HAL_GPIO_Init+0x2f4>)
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	089b      	lsrs	r3, r3, #2
 8004178:	3302      	adds	r3, #2
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004180:	4b3a      	ldr	r3, [pc, #232]	@ (800426c <HAL_GPIO_Init+0x310>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	43db      	mvns	r3, r3
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4013      	ands	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80041a4:	4a31      	ldr	r2, [pc, #196]	@ (800426c <HAL_GPIO_Init+0x310>)
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041aa:	4b30      	ldr	r3, [pc, #192]	@ (800426c <HAL_GPIO_Init+0x310>)
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	43db      	mvns	r3, r3
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4013      	ands	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80041ce:	4a27      	ldr	r2, [pc, #156]	@ (800426c <HAL_GPIO_Init+0x310>)
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041d4:	4b25      	ldr	r3, [pc, #148]	@ (800426c <HAL_GPIO_Init+0x310>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	43db      	mvns	r3, r3
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4013      	ands	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80041f8:	4a1c      	ldr	r2, [pc, #112]	@ (800426c <HAL_GPIO_Init+0x310>)
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041fe:	4b1b      	ldr	r3, [pc, #108]	@ (800426c <HAL_GPIO_Init+0x310>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	43db      	mvns	r3, r3
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4013      	ands	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4313      	orrs	r3, r2
 8004220:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004222:	4a12      	ldr	r2, [pc, #72]	@ (800426c <HAL_GPIO_Init+0x310>)
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	3301      	adds	r3, #1
 800422c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	fa22 f303 	lsr.w	r3, r2, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	f47f ae97 	bne.w	8003f6c <HAL_GPIO_Init+0x10>
  }
}
 800423e:	bf00      	nop
 8004240:	bf00      	nop
 8004242:	371c      	adds	r7, #28
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	40021000 	.word	0x40021000
 8004250:	40010000 	.word	0x40010000
 8004254:	48000400 	.word	0x48000400
 8004258:	48000800 	.word	0x48000800
 800425c:	48000c00 	.word	0x48000c00
 8004260:	48001000 	.word	0x48001000
 8004264:	48001400 	.word	0x48001400
 8004268:	48001800 	.word	0x48001800
 800426c:	40010400 	.word	0x40010400

08004270 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	460b      	mov	r3, r1
 800427a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	887b      	ldrh	r3, [r7, #2]
 8004282:	4013      	ands	r3, r2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d002      	beq.n	800428e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004288:	2301      	movs	r3, #1
 800428a:	73fb      	strb	r3, [r7, #15]
 800428c:	e001      	b.n	8004292 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800428e:	2300      	movs	r3, #0
 8004290:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004292:	7bfb      	ldrb	r3, [r7, #15]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	807b      	strh	r3, [r7, #2]
 80042ac:	4613      	mov	r3, r2
 80042ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042b0:	787b      	ldrb	r3, [r7, #1]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042b6:	887a      	ldrh	r2, [r7, #2]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042bc:	e002      	b.n	80042c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042be:	887a      	ldrh	r2, [r7, #2]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	460b      	mov	r3, r1
 80042da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80042e2:	887a      	ldrh	r2, [r7, #2]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4013      	ands	r3, r2
 80042e8:	041a      	lsls	r2, r3, #16
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	43d9      	mvns	r1, r3
 80042ee:	887b      	ldrh	r3, [r7, #2]
 80042f0:	400b      	ands	r3, r1
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	619a      	str	r2, [r3, #24]
}
 80042f8:	bf00      	nop
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e08d      	b.n	8004432 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d106      	bne.n	8004330 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fd fd96 	bl	8001e5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2224      	movs	r2, #36	@ 0x24
 8004334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0201 	bic.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004354:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004364:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d107      	bne.n	800437e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800437a:	609a      	str	r2, [r3, #8]
 800437c:	e006      	b.n	800438c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800438a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	2b02      	cmp	r3, #2
 8004392:	d108      	bne.n	80043a6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685a      	ldr	r2, [r3, #4]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043a2:	605a      	str	r2, [r3, #4]
 80043a4:	e007      	b.n	80043b6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6812      	ldr	r2, [r2, #0]
 80043c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80043c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68da      	ldr	r2, [r3, #12]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80043d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691a      	ldr	r2, [r3, #16]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	69d9      	ldr	r1, [r3, #28]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a1a      	ldr	r2, [r3, #32]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0201 	orr.w	r2, r2, #1
 8004412:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2220      	movs	r2, #32
 800441e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
	...

0800443c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b088      	sub	sp, #32
 8004440:	af02      	add	r7, sp, #8
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	607a      	str	r2, [r7, #4]
 8004446:	461a      	mov	r2, r3
 8004448:	460b      	mov	r3, r1
 800444a:	817b      	strh	r3, [r7, #10]
 800444c:	4613      	mov	r3, r2
 800444e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b20      	cmp	r3, #32
 800445a:	f040 80fd 	bne.w	8004658 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004464:	2b01      	cmp	r3, #1
 8004466:	d101      	bne.n	800446c <HAL_I2C_Master_Transmit+0x30>
 8004468:	2302      	movs	r3, #2
 800446a:	e0f6      	b.n	800465a <HAL_I2C_Master_Transmit+0x21e>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004474:	f7fe fb2e 	bl	8002ad4 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	2319      	movs	r3, #25
 8004480:	2201      	movs	r2, #1
 8004482:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 fce0 	bl	8004e4c <I2C_WaitOnFlagUntilTimeout>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e0e1      	b.n	800465a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2221      	movs	r2, #33	@ 0x21
 800449a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2210      	movs	r2, #16
 80044a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	893a      	ldrh	r2, [r7, #8]
 80044b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	2bff      	cmp	r3, #255	@ 0xff
 80044c6:	d906      	bls.n	80044d6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	22ff      	movs	r2, #255	@ 0xff
 80044cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80044ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	e007      	b.n	80044e6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80044e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044e4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d024      	beq.n	8004538 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f2:	781a      	ldrb	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004516:	3b01      	subs	r3, #1
 8004518:	b29a      	uxth	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004522:	b2db      	uxtb	r3, r3
 8004524:	3301      	adds	r3, #1
 8004526:	b2da      	uxtb	r2, r3
 8004528:	8979      	ldrh	r1, [r7, #10]
 800452a:	4b4e      	ldr	r3, [pc, #312]	@ (8004664 <HAL_I2C_Master_Transmit+0x228>)
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 fedb 	bl	80052ec <I2C_TransferConfig>
 8004536:	e066      	b.n	8004606 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800453c:	b2da      	uxtb	r2, r3
 800453e:	8979      	ldrh	r1, [r7, #10]
 8004540:	4b48      	ldr	r3, [pc, #288]	@ (8004664 <HAL_I2C_Master_Transmit+0x228>)
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 fed0 	bl	80052ec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800454c:	e05b      	b.n	8004606 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	6a39      	ldr	r1, [r7, #32]
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f000 fcd3 	bl	8004efe <I2C_WaitOnTXISFlagUntilTimeout>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e07b      	b.n	800465a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004566:	781a      	ldrb	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800457c:	b29b      	uxth	r3, r3
 800457e:	3b01      	subs	r3, #1
 8004580:	b29a      	uxth	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800458a:	3b01      	subs	r3, #1
 800458c:	b29a      	uxth	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004596:	b29b      	uxth	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	d034      	beq.n	8004606 <HAL_I2C_Master_Transmit+0x1ca>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d130      	bne.n	8004606 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	6a3b      	ldr	r3, [r7, #32]
 80045aa:	2200      	movs	r2, #0
 80045ac:	2180      	movs	r1, #128	@ 0x80
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 fc4c 	bl	8004e4c <I2C_WaitOnFlagUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e04d      	b.n	800465a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	2bff      	cmp	r3, #255	@ 0xff
 80045c6:	d90e      	bls.n	80045e6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	22ff      	movs	r2, #255	@ 0xff
 80045cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	8979      	ldrh	r1, [r7, #10]
 80045d6:	2300      	movs	r3, #0
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 fe84 	bl	80052ec <I2C_TransferConfig>
 80045e4:	e00f      	b.n	8004606 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	8979      	ldrh	r1, [r7, #10]
 80045f8:	2300      	movs	r3, #0
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 fe73 	bl	80052ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800460a:	b29b      	uxth	r3, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	d19e      	bne.n	800454e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	6a39      	ldr	r1, [r7, #32]
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 fcb9 	bl	8004f8c <I2C_WaitOnSTOPFlagUntilTimeout>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e01a      	b.n	800465a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2220      	movs	r2, #32
 800462a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6859      	ldr	r1, [r3, #4]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	4b0c      	ldr	r3, [pc, #48]	@ (8004668 <HAL_I2C_Master_Transmit+0x22c>)
 8004638:	400b      	ands	r3, r1
 800463a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004654:	2300      	movs	r3, #0
 8004656:	e000      	b.n	800465a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004658:	2302      	movs	r3, #2
  }
}
 800465a:	4618      	mov	r0, r3
 800465c:	3718      	adds	r7, #24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	80002000 	.word	0x80002000
 8004668:	fe00e800 	.word	0xfe00e800

0800466c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b088      	sub	sp, #32
 8004670:	af02      	add	r7, sp, #8
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	607a      	str	r2, [r7, #4]
 8004676:	461a      	mov	r2, r3
 8004678:	460b      	mov	r3, r1
 800467a:	817b      	strh	r3, [r7, #10]
 800467c:	4613      	mov	r3, r2
 800467e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b20      	cmp	r3, #32
 800468a:	f040 80db 	bne.w	8004844 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004694:	2b01      	cmp	r3, #1
 8004696:	d101      	bne.n	800469c <HAL_I2C_Master_Receive+0x30>
 8004698:	2302      	movs	r3, #2
 800469a:	e0d4      	b.n	8004846 <HAL_I2C_Master_Receive+0x1da>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046a4:	f7fe fa16 	bl	8002ad4 <HAL_GetTick>
 80046a8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	2319      	movs	r3, #25
 80046b0:	2201      	movs	r2, #1
 80046b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 fbc8 	bl	8004e4c <I2C_WaitOnFlagUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e0bf      	b.n	8004846 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2222      	movs	r2, #34	@ 0x22
 80046ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2210      	movs	r2, #16
 80046d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	893a      	ldrh	r2, [r7, #8]
 80046e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	2bff      	cmp	r3, #255	@ 0xff
 80046f6:	d90e      	bls.n	8004716 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2201      	movs	r2, #1
 80046fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004702:	b2da      	uxtb	r2, r3
 8004704:	8979      	ldrh	r1, [r7, #10]
 8004706:	4b52      	ldr	r3, [pc, #328]	@ (8004850 <HAL_I2C_Master_Receive+0x1e4>)
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 fdec 	bl	80052ec <I2C_TransferConfig>
 8004714:	e06d      	b.n	80047f2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800471a:	b29a      	uxth	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004724:	b2da      	uxtb	r2, r3
 8004726:	8979      	ldrh	r1, [r7, #10]
 8004728:	4b49      	ldr	r3, [pc, #292]	@ (8004850 <HAL_I2C_Master_Receive+0x1e4>)
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 fddb 	bl	80052ec <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004736:	e05c      	b.n	80047f2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	6a39      	ldr	r1, [r7, #32]
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 fc69 	bl	8005014 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e07c      	b.n	8004846 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004768:	3b01      	subs	r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004774:	b29b      	uxth	r3, r3
 8004776:	3b01      	subs	r3, #1
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004782:	b29b      	uxth	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	d034      	beq.n	80047f2 <HAL_I2C_Master_Receive+0x186>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800478c:	2b00      	cmp	r3, #0
 800478e:	d130      	bne.n	80047f2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	2200      	movs	r2, #0
 8004798:	2180      	movs	r1, #128	@ 0x80
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 fb56 	bl	8004e4c <I2C_WaitOnFlagUntilTimeout>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e04d      	b.n	8004846 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	2bff      	cmp	r3, #255	@ 0xff
 80047b2:	d90e      	bls.n	80047d2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	22ff      	movs	r2, #255	@ 0xff
 80047b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047be:	b2da      	uxtb	r2, r3
 80047c0:	8979      	ldrh	r1, [r7, #10]
 80047c2:	2300      	movs	r3, #0
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 fd8e 	bl	80052ec <I2C_TransferConfig>
 80047d0:	e00f      	b.n	80047f2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	8979      	ldrh	r1, [r7, #10]
 80047e4:	2300      	movs	r3, #0
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 fd7d 	bl	80052ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d19d      	bne.n	8004738 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	6a39      	ldr	r1, [r7, #32]
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 fbc3 	bl	8004f8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e01a      	b.n	8004846 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2220      	movs	r2, #32
 8004816:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6859      	ldr	r1, [r3, #4]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	4b0c      	ldr	r3, [pc, #48]	@ (8004854 <HAL_I2C_Master_Receive+0x1e8>)
 8004824:	400b      	ands	r3, r1
 8004826:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004840:	2300      	movs	r3, #0
 8004842:	e000      	b.n	8004846 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004844:	2302      	movs	r3, #2
  }
}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	80002400 	.word	0x80002400
 8004854:	fe00e800 	.word	0xfe00e800

08004858 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b088      	sub	sp, #32
 800485c:	af02      	add	r7, sp, #8
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	4608      	mov	r0, r1
 8004862:	4611      	mov	r1, r2
 8004864:	461a      	mov	r2, r3
 8004866:	4603      	mov	r3, r0
 8004868:	817b      	strh	r3, [r7, #10]
 800486a:	460b      	mov	r3, r1
 800486c:	813b      	strh	r3, [r7, #8]
 800486e:	4613      	mov	r3, r2
 8004870:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b20      	cmp	r3, #32
 800487c:	f040 80f9 	bne.w	8004a72 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <HAL_I2C_Mem_Write+0x34>
 8004886:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004888:	2b00      	cmp	r3, #0
 800488a:	d105      	bne.n	8004898 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004892:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e0ed      	b.n	8004a74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <HAL_I2C_Mem_Write+0x4e>
 80048a2:	2302      	movs	r3, #2
 80048a4:	e0e6      	b.n	8004a74 <HAL_I2C_Mem_Write+0x21c>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80048ae:	f7fe f911 	bl	8002ad4 <HAL_GetTick>
 80048b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	2319      	movs	r3, #25
 80048ba:	2201      	movs	r2, #1
 80048bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 fac3 	bl	8004e4c <I2C_WaitOnFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e0d1      	b.n	8004a74 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2221      	movs	r2, #33	@ 0x21
 80048d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2240      	movs	r2, #64	@ 0x40
 80048dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a3a      	ldr	r2, [r7, #32]
 80048ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80048f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048f8:	88f8      	ldrh	r0, [r7, #6]
 80048fa:	893a      	ldrh	r2, [r7, #8]
 80048fc:	8979      	ldrh	r1, [r7, #10]
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	9301      	str	r3, [sp, #4]
 8004902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	4603      	mov	r3, r0
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f000 f9d3 	bl	8004cb4 <I2C_RequestMemoryWrite>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d005      	beq.n	8004920 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0a9      	b.n	8004a74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004924:	b29b      	uxth	r3, r3
 8004926:	2bff      	cmp	r3, #255	@ 0xff
 8004928:	d90e      	bls.n	8004948 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	22ff      	movs	r2, #255	@ 0xff
 800492e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004934:	b2da      	uxtb	r2, r3
 8004936:	8979      	ldrh	r1, [r7, #10]
 8004938:	2300      	movs	r3, #0
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f000 fcd3 	bl	80052ec <I2C_TransferConfig>
 8004946:	e00f      	b.n	8004968 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800494c:	b29a      	uxth	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004956:	b2da      	uxtb	r2, r3
 8004958:	8979      	ldrh	r1, [r7, #10]
 800495a:	2300      	movs	r3, #0
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 fcc2 	bl	80052ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 fac6 	bl	8004efe <I2C_WaitOnTXISFlagUntilTimeout>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d001      	beq.n	800497c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e07b      	b.n	8004a74 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004980:	781a      	ldrb	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004996:	b29b      	uxth	r3, r3
 8004998:	3b01      	subs	r3, #1
 800499a:	b29a      	uxth	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049a4:	3b01      	subs	r3, #1
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d034      	beq.n	8004a20 <HAL_I2C_Mem_Write+0x1c8>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d130      	bne.n	8004a20 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c4:	2200      	movs	r2, #0
 80049c6:	2180      	movs	r1, #128	@ 0x80
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 fa3f 	bl	8004e4c <I2C_WaitOnFlagUntilTimeout>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e04d      	b.n	8004a74 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049dc:	b29b      	uxth	r3, r3
 80049de:	2bff      	cmp	r3, #255	@ 0xff
 80049e0:	d90e      	bls.n	8004a00 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	22ff      	movs	r2, #255	@ 0xff
 80049e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	8979      	ldrh	r1, [r7, #10]
 80049f0:	2300      	movs	r3, #0
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 fc77 	bl	80052ec <I2C_TransferConfig>
 80049fe:	e00f      	b.n	8004a20 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	8979      	ldrh	r1, [r7, #10]
 8004a12:	2300      	movs	r3, #0
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 fc66 	bl	80052ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d19e      	bne.n	8004968 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 faac 	bl	8004f8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e01a      	b.n	8004a74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2220      	movs	r2, #32
 8004a44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6859      	ldr	r1, [r3, #4]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	4b0a      	ldr	r3, [pc, #40]	@ (8004a7c <HAL_I2C_Mem_Write+0x224>)
 8004a52:	400b      	ands	r3, r1
 8004a54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	e000      	b.n	8004a74 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004a72:	2302      	movs	r3, #2
  }
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	fe00e800 	.word	0xfe00e800

08004a80 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b088      	sub	sp, #32
 8004a84:	af02      	add	r7, sp, #8
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	4608      	mov	r0, r1
 8004a8a:	4611      	mov	r1, r2
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	4603      	mov	r3, r0
 8004a90:	817b      	strh	r3, [r7, #10]
 8004a92:	460b      	mov	r3, r1
 8004a94:	813b      	strh	r3, [r7, #8]
 8004a96:	4613      	mov	r3, r2
 8004a98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b20      	cmp	r3, #32
 8004aa4:	f040 80fd 	bne.w	8004ca2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aa8:	6a3b      	ldr	r3, [r7, #32]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <HAL_I2C_Mem_Read+0x34>
 8004aae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d105      	bne.n	8004ac0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004aba:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e0f1      	b.n	8004ca4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d101      	bne.n	8004ace <HAL_I2C_Mem_Read+0x4e>
 8004aca:	2302      	movs	r3, #2
 8004acc:	e0ea      	b.n	8004ca4 <HAL_I2C_Mem_Read+0x224>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ad6:	f7fd fffd 	bl	8002ad4 <HAL_GetTick>
 8004ada:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	2319      	movs	r3, #25
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 f9af 	bl	8004e4c <I2C_WaitOnFlagUntilTimeout>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e0d5      	b.n	8004ca4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2222      	movs	r2, #34	@ 0x22
 8004afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2240      	movs	r2, #64	@ 0x40
 8004b04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6a3a      	ldr	r2, [r7, #32]
 8004b12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004b18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b20:	88f8      	ldrh	r0, [r7, #6]
 8004b22:	893a      	ldrh	r2, [r7, #8]
 8004b24:	8979      	ldrh	r1, [r7, #10]
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	9301      	str	r3, [sp, #4]
 8004b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	4603      	mov	r3, r0
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 f913 	bl	8004d5c <I2C_RequestMemoryRead>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d005      	beq.n	8004b48 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e0ad      	b.n	8004ca4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2bff      	cmp	r3, #255	@ 0xff
 8004b50:	d90e      	bls.n	8004b70 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2201      	movs	r2, #1
 8004b56:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	8979      	ldrh	r1, [r7, #10]
 8004b60:	4b52      	ldr	r3, [pc, #328]	@ (8004cac <HAL_I2C_Mem_Read+0x22c>)
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 fbbf 	bl	80052ec <I2C_TransferConfig>
 8004b6e:	e00f      	b.n	8004b90 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	8979      	ldrh	r1, [r7, #10]
 8004b82:	4b4a      	ldr	r3, [pc, #296]	@ (8004cac <HAL_I2C_Mem_Read+0x22c>)
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 fbae 	bl	80052ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b96:	2200      	movs	r2, #0
 8004b98:	2104      	movs	r1, #4
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f000 f956 	bl	8004e4c <I2C_WaitOnFlagUntilTimeout>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e07c      	b.n	8004ca4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb4:	b2d2      	uxtb	r2, r2
 8004bb6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bbc:	1c5a      	adds	r2, r3, #1
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d034      	beq.n	8004c50 <HAL_I2C_Mem_Read+0x1d0>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d130      	bne.n	8004c50 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	2180      	movs	r1, #128	@ 0x80
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 f927 	bl	8004e4c <I2C_WaitOnFlagUntilTimeout>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e04d      	b.n	8004ca4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	2bff      	cmp	r3, #255	@ 0xff
 8004c10:	d90e      	bls.n	8004c30 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2201      	movs	r2, #1
 8004c16:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	8979      	ldrh	r1, [r7, #10]
 8004c20:	2300      	movs	r3, #0
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 fb5f 	bl	80052ec <I2C_TransferConfig>
 8004c2e:	e00f      	b.n	8004c50 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	8979      	ldrh	r1, [r7, #10]
 8004c42:	2300      	movs	r3, #0
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 fb4e 	bl	80052ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d19a      	bne.n	8004b90 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 f994 	bl	8004f8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e01a      	b.n	8004ca4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2220      	movs	r2, #32
 8004c74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6859      	ldr	r1, [r3, #4]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	4b0b      	ldr	r3, [pc, #44]	@ (8004cb0 <HAL_I2C_Mem_Read+0x230>)
 8004c82:	400b      	ands	r3, r1
 8004c84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	e000      	b.n	8004ca4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004ca2:	2302      	movs	r3, #2
  }
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3718      	adds	r7, #24
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	80002400 	.word	0x80002400
 8004cb0:	fe00e800 	.word	0xfe00e800

08004cb4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	4608      	mov	r0, r1
 8004cbe:	4611      	mov	r1, r2
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	817b      	strh	r3, [r7, #10]
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	813b      	strh	r3, [r7, #8]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004cce:	88fb      	ldrh	r3, [r7, #6]
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	8979      	ldrh	r1, [r7, #10]
 8004cd4:	4b20      	ldr	r3, [pc, #128]	@ (8004d58 <I2C_RequestMemoryWrite+0xa4>)
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 fb05 	bl	80052ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ce2:	69fa      	ldr	r2, [r7, #28]
 8004ce4:	69b9      	ldr	r1, [r7, #24]
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 f909 	bl	8004efe <I2C_WaitOnTXISFlagUntilTimeout>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e02c      	b.n	8004d50 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cf6:	88fb      	ldrh	r3, [r7, #6]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d105      	bne.n	8004d08 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cfc:	893b      	ldrh	r3, [r7, #8]
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d06:	e015      	b.n	8004d34 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004d08:	893b      	ldrh	r3, [r7, #8]
 8004d0a:	0a1b      	lsrs	r3, r3, #8
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d16:	69fa      	ldr	r2, [r7, #28]
 8004d18:	69b9      	ldr	r1, [r7, #24]
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 f8ef 	bl	8004efe <I2C_WaitOnTXISFlagUntilTimeout>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e012      	b.n	8004d50 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d2a:	893b      	ldrh	r3, [r7, #8]
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	2180      	movs	r1, #128	@ 0x80
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 f884 	bl	8004e4c <I2C_WaitOnFlagUntilTimeout>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e000      	b.n	8004d50 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	80002000 	.word	0x80002000

08004d5c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af02      	add	r7, sp, #8
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	4608      	mov	r0, r1
 8004d66:	4611      	mov	r1, r2
 8004d68:	461a      	mov	r2, r3
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	817b      	strh	r3, [r7, #10]
 8004d6e:	460b      	mov	r3, r1
 8004d70:	813b      	strh	r3, [r7, #8]
 8004d72:	4613      	mov	r3, r2
 8004d74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004d76:	88fb      	ldrh	r3, [r7, #6]
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	8979      	ldrh	r1, [r7, #10]
 8004d7c:	4b20      	ldr	r3, [pc, #128]	@ (8004e00 <I2C_RequestMemoryRead+0xa4>)
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	2300      	movs	r3, #0
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 fab2 	bl	80052ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d88:	69fa      	ldr	r2, [r7, #28]
 8004d8a:	69b9      	ldr	r1, [r7, #24]
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 f8b6 	bl	8004efe <I2C_WaitOnTXISFlagUntilTimeout>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d001      	beq.n	8004d9c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e02c      	b.n	8004df6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d9c:	88fb      	ldrh	r3, [r7, #6]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d105      	bne.n	8004dae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004da2:	893b      	ldrh	r3, [r7, #8]
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	629a      	str	r2, [r3, #40]	@ 0x28
 8004dac:	e015      	b.n	8004dda <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004dae:	893b      	ldrh	r3, [r7, #8]
 8004db0:	0a1b      	lsrs	r3, r3, #8
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dbc:	69fa      	ldr	r2, [r7, #28]
 8004dbe:	69b9      	ldr	r1, [r7, #24]
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 f89c 	bl	8004efe <I2C_WaitOnTXISFlagUntilTimeout>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e012      	b.n	8004df6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004dd0:	893b      	ldrh	r3, [r7, #8]
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	2200      	movs	r2, #0
 8004de2:	2140      	movs	r1, #64	@ 0x40
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 f831 	bl	8004e4c <I2C_WaitOnFlagUntilTimeout>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e000      	b.n	8004df6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	80002000 	.word	0x80002000

08004e04 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d103      	bne.n	8004e22 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d007      	beq.n	8004e40 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f042 0201 	orr.w	r2, r2, #1
 8004e3e:	619a      	str	r2, [r3, #24]
  }
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	603b      	str	r3, [r7, #0]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e5c:	e03b      	b.n	8004ed6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	6839      	ldr	r1, [r7, #0]
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 f962 	bl	800512c <I2C_IsErrorOccurred>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e041      	b.n	8004ef6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e78:	d02d      	beq.n	8004ed6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e7a:	f7fd fe2b 	bl	8002ad4 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d302      	bcc.n	8004e90 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d122      	bne.n	8004ed6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699a      	ldr	r2, [r3, #24]
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	bf0c      	ite	eq
 8004ea0:	2301      	moveq	r3, #1
 8004ea2:	2300      	movne	r3, #0
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	79fb      	ldrb	r3, [r7, #7]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d113      	bne.n	8004ed6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eb2:	f043 0220 	orr.w	r2, r3, #32
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e00f      	b.n	8004ef6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	699a      	ldr	r2, [r3, #24]
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	4013      	ands	r3, r2
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	bf0c      	ite	eq
 8004ee6:	2301      	moveq	r3, #1
 8004ee8:	2300      	movne	r3, #0
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	461a      	mov	r2, r3
 8004eee:	79fb      	ldrb	r3, [r7, #7]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d0b4      	beq.n	8004e5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b084      	sub	sp, #16
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	60f8      	str	r0, [r7, #12]
 8004f06:	60b9      	str	r1, [r7, #8]
 8004f08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f0a:	e033      	b.n	8004f74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	68b9      	ldr	r1, [r7, #8]
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 f90b 	bl	800512c <I2C_IsErrorOccurred>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e031      	b.n	8004f84 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f26:	d025      	beq.n	8004f74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f28:	f7fd fdd4 	bl	8002ad4 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d302      	bcc.n	8004f3e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d11a      	bne.n	8004f74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d013      	beq.n	8004f74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f50:	f043 0220 	orr.w	r2, r3, #32
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e007      	b.n	8004f84 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d1c4      	bne.n	8004f0c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f98:	e02f      	b.n	8004ffa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	68b9      	ldr	r1, [r7, #8]
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 f8c4 	bl	800512c <I2C_IsErrorOccurred>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e02d      	b.n	800500a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fae:	f7fd fd91 	bl	8002ad4 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d302      	bcc.n	8004fc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d11a      	bne.n	8004ffa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	f003 0320 	and.w	r3, r3, #32
 8004fce:	2b20      	cmp	r3, #32
 8004fd0:	d013      	beq.n	8004ffa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd6:	f043 0220 	orr.w	r2, r3, #32
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e007      	b.n	800500a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	f003 0320 	and.w	r3, r3, #32
 8005004:	2b20      	cmp	r3, #32
 8005006:	d1c8      	bne.n	8004f9a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
	...

08005014 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005020:	2300      	movs	r3, #0
 8005022:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005024:	e071      	b.n	800510a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	68b9      	ldr	r1, [r7, #8]
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 f87e 	bl	800512c <I2C_IsErrorOccurred>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	f003 0320 	and.w	r3, r3, #32
 8005044:	2b20      	cmp	r3, #32
 8005046:	d13b      	bne.n	80050c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8005048:	7dfb      	ldrb	r3, [r7, #23]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d138      	bne.n	80050c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	f003 0304 	and.w	r3, r3, #4
 8005058:	2b04      	cmp	r3, #4
 800505a:	d105      	bne.n	8005068 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005064:	2300      	movs	r3, #0
 8005066:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	f003 0310 	and.w	r3, r3, #16
 8005072:	2b10      	cmp	r3, #16
 8005074:	d121      	bne.n	80050ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2210      	movs	r2, #16
 800507c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2204      	movs	r2, #4
 8005082:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2220      	movs	r2, #32
 800508a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6859      	ldr	r1, [r3, #4]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	4b24      	ldr	r3, [pc, #144]	@ (8005128 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8005098:	400b      	ands	r3, r1
 800509a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2220      	movs	r2, #32
 80050a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	75fb      	strb	r3, [r7, #23]
 80050b8:	e002      	b.n	80050c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80050c0:	f7fd fd08 	bl	8002ad4 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d302      	bcc.n	80050d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d119      	bne.n	800510a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80050d6:	7dfb      	ldrb	r3, [r7, #23]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d116      	bne.n	800510a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	f003 0304 	and.w	r3, r3, #4
 80050e6:	2b04      	cmp	r3, #4
 80050e8:	d00f      	beq.n	800510a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ee:	f043 0220 	orr.w	r2, r3, #32
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	f003 0304 	and.w	r3, r3, #4
 8005114:	2b04      	cmp	r3, #4
 8005116:	d002      	beq.n	800511e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8005118:	7dfb      	ldrb	r3, [r7, #23]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d083      	beq.n	8005026 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800511e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	fe00e800 	.word	0xfe00e800

0800512c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b08a      	sub	sp, #40	@ 0x28
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005138:	2300      	movs	r3, #0
 800513a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005146:	2300      	movs	r3, #0
 8005148:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	f003 0310 	and.w	r3, r3, #16
 8005154:	2b00      	cmp	r3, #0
 8005156:	d068      	beq.n	800522a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2210      	movs	r2, #16
 800515e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005160:	e049      	b.n	80051f6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005168:	d045      	beq.n	80051f6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800516a:	f7fd fcb3 	bl	8002ad4 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	429a      	cmp	r2, r3
 8005178:	d302      	bcc.n	8005180 <I2C_IsErrorOccurred+0x54>
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d13a      	bne.n	80051f6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800518a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005192:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800519e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051a2:	d121      	bne.n	80051e8 <I2C_IsErrorOccurred+0xbc>
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051aa:	d01d      	beq.n	80051e8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80051ac:	7cfb      	ldrb	r3, [r7, #19]
 80051ae:	2b20      	cmp	r3, #32
 80051b0:	d01a      	beq.n	80051e8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051c0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80051c2:	f7fd fc87 	bl	8002ad4 <HAL_GetTick>
 80051c6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051c8:	e00e      	b.n	80051e8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80051ca:	f7fd fc83 	bl	8002ad4 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	2b19      	cmp	r3, #25
 80051d6:	d907      	bls.n	80051e8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80051d8:	6a3b      	ldr	r3, [r7, #32]
 80051da:	f043 0320 	orr.w	r3, r3, #32
 80051de:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80051e6:	e006      	b.n	80051f6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	f003 0320 	and.w	r3, r3, #32
 80051f2:	2b20      	cmp	r3, #32
 80051f4:	d1e9      	bne.n	80051ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	f003 0320 	and.w	r3, r3, #32
 8005200:	2b20      	cmp	r3, #32
 8005202:	d003      	beq.n	800520c <I2C_IsErrorOccurred+0xe0>
 8005204:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005208:	2b00      	cmp	r3, #0
 800520a:	d0aa      	beq.n	8005162 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800520c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005210:	2b00      	cmp	r3, #0
 8005212:	d103      	bne.n	800521c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2220      	movs	r2, #32
 800521a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800521c:	6a3b      	ldr	r3, [r7, #32]
 800521e:	f043 0304 	orr.w	r3, r3, #4
 8005222:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00b      	beq.n	8005254 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800523c:	6a3b      	ldr	r3, [r7, #32]
 800523e:	f043 0301 	orr.w	r3, r3, #1
 8005242:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800524c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00b      	beq.n	8005276 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	f043 0308 	orr.w	r3, r3, #8
 8005264:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800526e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00b      	beq.n	8005298 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	f043 0302 	orr.w	r3, r3, #2
 8005286:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005290:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005298:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800529c:	2b00      	cmp	r3, #0
 800529e:	d01c      	beq.n	80052da <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f7ff fdaf 	bl	8004e04 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6859      	ldr	r1, [r3, #4]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	4b0d      	ldr	r3, [pc, #52]	@ (80052e8 <I2C_IsErrorOccurred+0x1bc>)
 80052b2:	400b      	ands	r3, r1
 80052b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	431a      	orrs	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2220      	movs	r2, #32
 80052c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80052da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3728      	adds	r7, #40	@ 0x28
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	fe00e800 	.word	0xfe00e800

080052ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	607b      	str	r3, [r7, #4]
 80052f6:	460b      	mov	r3, r1
 80052f8:	817b      	strh	r3, [r7, #10]
 80052fa:	4613      	mov	r3, r2
 80052fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052fe:	897b      	ldrh	r3, [r7, #10]
 8005300:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005304:	7a7b      	ldrb	r3, [r7, #9]
 8005306:	041b      	lsls	r3, r3, #16
 8005308:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800530c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	4313      	orrs	r3, r2
 8005316:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800531a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	6a3b      	ldr	r3, [r7, #32]
 8005324:	0d5b      	lsrs	r3, r3, #21
 8005326:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800532a:	4b08      	ldr	r3, [pc, #32]	@ (800534c <I2C_TransferConfig+0x60>)
 800532c:	430b      	orrs	r3, r1
 800532e:	43db      	mvns	r3, r3
 8005330:	ea02 0103 	and.w	r1, r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	430a      	orrs	r2, r1
 800533c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800533e:	bf00      	nop
 8005340:	371c      	adds	r7, #28
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	03ff63ff 	.word	0x03ff63ff

08005350 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b20      	cmp	r3, #32
 8005364:	d138      	bne.n	80053d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800536c:	2b01      	cmp	r3, #1
 800536e:	d101      	bne.n	8005374 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005370:	2302      	movs	r3, #2
 8005372:	e032      	b.n	80053da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2224      	movs	r2, #36	@ 0x24
 8005380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0201 	bic.w	r2, r2, #1
 8005392:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80053a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6819      	ldr	r1, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0201 	orr.w	r2, r2, #1
 80053c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80053d4:	2300      	movs	r3, #0
 80053d6:	e000      	b.n	80053da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80053d8:	2302      	movs	r3, #2
  }
}
 80053da:	4618      	mov	r0, r3
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b085      	sub	sp, #20
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
 80053ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b20      	cmp	r3, #32
 80053fa:	d139      	bne.n	8005470 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005402:	2b01      	cmp	r3, #1
 8005404:	d101      	bne.n	800540a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005406:	2302      	movs	r3, #2
 8005408:	e033      	b.n	8005472 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2224      	movs	r2, #36	@ 0x24
 8005416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 0201 	bic.w	r2, r2, #1
 8005428:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005438:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	021b      	lsls	r3, r3, #8
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4313      	orrs	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f042 0201 	orr.w	r2, r2, #1
 800545a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2220      	movs	r2, #32
 8005460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800546c:	2300      	movs	r3, #0
 800546e:	e000      	b.n	8005472 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005470:	2302      	movs	r3, #2
  }
}
 8005472:	4618      	mov	r0, r3
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
	...

08005480 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8005486:	af00      	add	r7, sp, #0
 8005488:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800548c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005490:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005492:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005496:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d102      	bne.n	80054a6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	f001 b83a 	b.w	800651a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80054aa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f000 816f 	beq.w	800579a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80054bc:	4bb5      	ldr	r3, [pc, #724]	@ (8005794 <HAL_RCC_OscConfig+0x314>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f003 030c 	and.w	r3, r3, #12
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	d00c      	beq.n	80054e2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80054c8:	4bb2      	ldr	r3, [pc, #712]	@ (8005794 <HAL_RCC_OscConfig+0x314>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f003 030c 	and.w	r3, r3, #12
 80054d0:	2b08      	cmp	r3, #8
 80054d2:	d15c      	bne.n	800558e <HAL_RCC_OscConfig+0x10e>
 80054d4:	4baf      	ldr	r3, [pc, #700]	@ (8005794 <HAL_RCC_OscConfig+0x314>)
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80054dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054e0:	d155      	bne.n	800558e <HAL_RCC_OscConfig+0x10e>
 80054e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80054e6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80054ee:	fa93 f3a3 	rbit	r3, r3
 80054f2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80054f6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054fa:	fab3 f383 	clz	r3, r3
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	095b      	lsrs	r3, r3, #5
 8005502:	b2db      	uxtb	r3, r3
 8005504:	f043 0301 	orr.w	r3, r3, #1
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b01      	cmp	r3, #1
 800550c:	d102      	bne.n	8005514 <HAL_RCC_OscConfig+0x94>
 800550e:	4ba1      	ldr	r3, [pc, #644]	@ (8005794 <HAL_RCC_OscConfig+0x314>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	e015      	b.n	8005540 <HAL_RCC_OscConfig+0xc0>
 8005514:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005518:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800551c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8005520:	fa93 f3a3 	rbit	r3, r3
 8005524:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8005528:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800552c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8005530:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8005534:	fa93 f3a3 	rbit	r3, r3
 8005538:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800553c:	4b95      	ldr	r3, [pc, #596]	@ (8005794 <HAL_RCC_OscConfig+0x314>)
 800553e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005540:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005544:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8005548:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 800554c:	fa92 f2a2 	rbit	r2, r2
 8005550:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8005554:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8005558:	fab2 f282 	clz	r2, r2
 800555c:	b2d2      	uxtb	r2, r2
 800555e:	f042 0220 	orr.w	r2, r2, #32
 8005562:	b2d2      	uxtb	r2, r2
 8005564:	f002 021f 	and.w	r2, r2, #31
 8005568:	2101      	movs	r1, #1
 800556a:	fa01 f202 	lsl.w	r2, r1, r2
 800556e:	4013      	ands	r3, r2
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 8111 	beq.w	8005798 <HAL_RCC_OscConfig+0x318>
 8005576:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800557a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	f040 8108 	bne.w	8005798 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	f000 bfc6 	b.w	800651a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800558e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005592:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800559e:	d106      	bne.n	80055ae <HAL_RCC_OscConfig+0x12e>
 80055a0:	4b7c      	ldr	r3, [pc, #496]	@ (8005794 <HAL_RCC_OscConfig+0x314>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a7b      	ldr	r2, [pc, #492]	@ (8005794 <HAL_RCC_OscConfig+0x314>)
 80055a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055aa:	6013      	str	r3, [r2, #0]
 80055ac:	e036      	b.n	800561c <HAL_RCC_OscConfig+0x19c>
 80055ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10c      	bne.n	80055d8 <HAL_RCC_OscConfig+0x158>
 80055be:	4b75      	ldr	r3, [pc, #468]	@ (8005794 <HAL_RCC_OscConfig+0x314>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a74      	ldr	r2, [pc, #464]	@ (8005794 <HAL_RCC_OscConfig+0x314>)
 80055c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055c8:	6013      	str	r3, [r2, #0]
 80055ca:	4b72      	ldr	r3, [pc, #456]	@ (8005794 <HAL_RCC_OscConfig+0x314>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a71      	ldr	r2, [pc, #452]	@ (8005794 <HAL_RCC_OscConfig+0x314>)
 80055d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055d4:	6013      	str	r3, [r2, #0]
 80055d6:	e021      	b.n	800561c <HAL_RCC_OscConfig+0x19c>
 80055d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055dc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80055e8:	d10c      	bne.n	8005604 <HAL_RCC_OscConfig+0x184>
 80055ea:	4b6a      	ldr	r3, [pc, #424]	@ (8005794 <HAL_RCC_OscConfig+0x314>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a69      	ldr	r2, [pc, #420]	@ (8005794 <HAL_RCC_OscConfig+0x314>)
 80055f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80055f4:	6013      	str	r3, [r2, #0]
 80055f6:	4b67      	ldr	r3, [pc, #412]	@ (8005794 <HAL_RCC_OscConfig+0x314>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a66      	ldr	r2, [pc, #408]	@ (8005794 <HAL_RCC_OscConfig+0x314>)
 80055fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005600:	6013      	str	r3, [r2, #0]
 8005602:	e00b      	b.n	800561c <HAL_RCC_OscConfig+0x19c>
 8005604:	4b63      	ldr	r3, [pc, #396]	@ (8005794 <HAL_RCC_OscConfig+0x314>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a62      	ldr	r2, [pc, #392]	@ (8005794 <HAL_RCC_OscConfig+0x314>)
 800560a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800560e:	6013      	str	r3, [r2, #0]
 8005610:	4b60      	ldr	r3, [pc, #384]	@ (8005794 <HAL_RCC_OscConfig+0x314>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a5f      	ldr	r2, [pc, #380]	@ (8005794 <HAL_RCC_OscConfig+0x314>)
 8005616:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800561a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800561c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005620:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d059      	beq.n	80056e0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800562c:	f7fd fa52 	bl	8002ad4 <HAL_GetTick>
 8005630:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005634:	e00a      	b.n	800564c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005636:	f7fd fa4d 	bl	8002ad4 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	2b64      	cmp	r3, #100	@ 0x64
 8005644:	d902      	bls.n	800564c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	f000 bf67 	b.w	800651a <HAL_RCC_OscConfig+0x109a>
 800564c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005650:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005654:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8005658:	fa93 f3a3 	rbit	r3, r3
 800565c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8005660:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005664:	fab3 f383 	clz	r3, r3
 8005668:	b2db      	uxtb	r3, r3
 800566a:	095b      	lsrs	r3, r3, #5
 800566c:	b2db      	uxtb	r3, r3
 800566e:	f043 0301 	orr.w	r3, r3, #1
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b01      	cmp	r3, #1
 8005676:	d102      	bne.n	800567e <HAL_RCC_OscConfig+0x1fe>
 8005678:	4b46      	ldr	r3, [pc, #280]	@ (8005794 <HAL_RCC_OscConfig+0x314>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	e015      	b.n	80056aa <HAL_RCC_OscConfig+0x22a>
 800567e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005682:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005686:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800568a:	fa93 f3a3 	rbit	r3, r3
 800568e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8005692:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005696:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800569a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800569e:	fa93 f3a3 	rbit	r3, r3
 80056a2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80056a6:	4b3b      	ldr	r3, [pc, #236]	@ (8005794 <HAL_RCC_OscConfig+0x314>)
 80056a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056aa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80056ae:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80056b2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80056b6:	fa92 f2a2 	rbit	r2, r2
 80056ba:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80056be:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80056c2:	fab2 f282 	clz	r2, r2
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	f042 0220 	orr.w	r2, r2, #32
 80056cc:	b2d2      	uxtb	r2, r2
 80056ce:	f002 021f 	and.w	r2, r2, #31
 80056d2:	2101      	movs	r1, #1
 80056d4:	fa01 f202 	lsl.w	r2, r1, r2
 80056d8:	4013      	ands	r3, r2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d0ab      	beq.n	8005636 <HAL_RCC_OscConfig+0x1b6>
 80056de:	e05c      	b.n	800579a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e0:	f7fd f9f8 	bl	8002ad4 <HAL_GetTick>
 80056e4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056e8:	e00a      	b.n	8005700 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056ea:	f7fd f9f3 	bl	8002ad4 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b64      	cmp	r3, #100	@ 0x64
 80056f8:	d902      	bls.n	8005700 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	f000 bf0d 	b.w	800651a <HAL_RCC_OscConfig+0x109a>
 8005700:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005704:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005708:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800570c:	fa93 f3a3 	rbit	r3, r3
 8005710:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8005714:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005718:	fab3 f383 	clz	r3, r3
 800571c:	b2db      	uxtb	r3, r3
 800571e:	095b      	lsrs	r3, r3, #5
 8005720:	b2db      	uxtb	r3, r3
 8005722:	f043 0301 	orr.w	r3, r3, #1
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b01      	cmp	r3, #1
 800572a:	d102      	bne.n	8005732 <HAL_RCC_OscConfig+0x2b2>
 800572c:	4b19      	ldr	r3, [pc, #100]	@ (8005794 <HAL_RCC_OscConfig+0x314>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	e015      	b.n	800575e <HAL_RCC_OscConfig+0x2de>
 8005732:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005736:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800573a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800573e:	fa93 f3a3 	rbit	r3, r3
 8005742:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8005746:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800574a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800574e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8005752:	fa93 f3a3 	rbit	r3, r3
 8005756:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800575a:	4b0e      	ldr	r3, [pc, #56]	@ (8005794 <HAL_RCC_OscConfig+0x314>)
 800575c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800575e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005762:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8005766:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800576a:	fa92 f2a2 	rbit	r2, r2
 800576e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8005772:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8005776:	fab2 f282 	clz	r2, r2
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	f042 0220 	orr.w	r2, r2, #32
 8005780:	b2d2      	uxtb	r2, r2
 8005782:	f002 021f 	and.w	r2, r2, #31
 8005786:	2101      	movs	r1, #1
 8005788:	fa01 f202 	lsl.w	r2, r1, r2
 800578c:	4013      	ands	r3, r2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1ab      	bne.n	80056ea <HAL_RCC_OscConfig+0x26a>
 8005792:	e002      	b.n	800579a <HAL_RCC_OscConfig+0x31a>
 8005794:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800579a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800579e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f000 817f 	beq.w	8005aae <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80057b0:	4ba7      	ldr	r3, [pc, #668]	@ (8005a50 <HAL_RCC_OscConfig+0x5d0>)
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f003 030c 	and.w	r3, r3, #12
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00c      	beq.n	80057d6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80057bc:	4ba4      	ldr	r3, [pc, #656]	@ (8005a50 <HAL_RCC_OscConfig+0x5d0>)
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f003 030c 	and.w	r3, r3, #12
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	d173      	bne.n	80058b0 <HAL_RCC_OscConfig+0x430>
 80057c8:	4ba1      	ldr	r3, [pc, #644]	@ (8005a50 <HAL_RCC_OscConfig+0x5d0>)
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80057d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057d4:	d16c      	bne.n	80058b0 <HAL_RCC_OscConfig+0x430>
 80057d6:	2302      	movs	r3, #2
 80057d8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057dc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80057e0:	fa93 f3a3 	rbit	r3, r3
 80057e4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80057e8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057ec:	fab3 f383 	clz	r3, r3
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	095b      	lsrs	r3, r3, #5
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	f043 0301 	orr.w	r3, r3, #1
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d102      	bne.n	8005806 <HAL_RCC_OscConfig+0x386>
 8005800:	4b93      	ldr	r3, [pc, #588]	@ (8005a50 <HAL_RCC_OscConfig+0x5d0>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	e013      	b.n	800582e <HAL_RCC_OscConfig+0x3ae>
 8005806:	2302      	movs	r3, #2
 8005808:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800580c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8005810:	fa93 f3a3 	rbit	r3, r3
 8005814:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8005818:	2302      	movs	r3, #2
 800581a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800581e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005822:	fa93 f3a3 	rbit	r3, r3
 8005826:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800582a:	4b89      	ldr	r3, [pc, #548]	@ (8005a50 <HAL_RCC_OscConfig+0x5d0>)
 800582c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582e:	2202      	movs	r2, #2
 8005830:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8005834:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8005838:	fa92 f2a2 	rbit	r2, r2
 800583c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8005840:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8005844:	fab2 f282 	clz	r2, r2
 8005848:	b2d2      	uxtb	r2, r2
 800584a:	f042 0220 	orr.w	r2, r2, #32
 800584e:	b2d2      	uxtb	r2, r2
 8005850:	f002 021f 	and.w	r2, r2, #31
 8005854:	2101      	movs	r1, #1
 8005856:	fa01 f202 	lsl.w	r2, r1, r2
 800585a:	4013      	ands	r3, r2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00a      	beq.n	8005876 <HAL_RCC_OscConfig+0x3f6>
 8005860:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005864:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d002      	beq.n	8005876 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	f000 be52 	b.w	800651a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005876:	4b76      	ldr	r3, [pc, #472]	@ (8005a50 <HAL_RCC_OscConfig+0x5d0>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800587e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005882:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	21f8      	movs	r1, #248	@ 0xf8
 800588c:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005890:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8005894:	fa91 f1a1 	rbit	r1, r1
 8005898:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 800589c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80058a0:	fab1 f181 	clz	r1, r1
 80058a4:	b2c9      	uxtb	r1, r1
 80058a6:	408b      	lsls	r3, r1
 80058a8:	4969      	ldr	r1, [pc, #420]	@ (8005a50 <HAL_RCC_OscConfig+0x5d0>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ae:	e0fe      	b.n	8005aae <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 8088 	beq.w	80059d2 <HAL_RCC_OscConfig+0x552>
 80058c2:	2301      	movs	r3, #1
 80058c4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c8:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80058cc:	fa93 f3a3 	rbit	r3, r3
 80058d0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80058d4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058d8:	fab3 f383 	clz	r3, r3
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80058e2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	461a      	mov	r2, r3
 80058ea:	2301      	movs	r3, #1
 80058ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ee:	f7fd f8f1 	bl	8002ad4 <HAL_GetTick>
 80058f2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058f6:	e00a      	b.n	800590e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058f8:	f7fd f8ec 	bl	8002ad4 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	2b02      	cmp	r3, #2
 8005906:	d902      	bls.n	800590e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	f000 be06 	b.w	800651a <HAL_RCC_OscConfig+0x109a>
 800590e:	2302      	movs	r3, #2
 8005910:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005914:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8005918:	fa93 f3a3 	rbit	r3, r3
 800591c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8005920:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005924:	fab3 f383 	clz	r3, r3
 8005928:	b2db      	uxtb	r3, r3
 800592a:	095b      	lsrs	r3, r3, #5
 800592c:	b2db      	uxtb	r3, r3
 800592e:	f043 0301 	orr.w	r3, r3, #1
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b01      	cmp	r3, #1
 8005936:	d102      	bne.n	800593e <HAL_RCC_OscConfig+0x4be>
 8005938:	4b45      	ldr	r3, [pc, #276]	@ (8005a50 <HAL_RCC_OscConfig+0x5d0>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	e013      	b.n	8005966 <HAL_RCC_OscConfig+0x4e6>
 800593e:	2302      	movs	r3, #2
 8005940:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005944:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8005948:	fa93 f3a3 	rbit	r3, r3
 800594c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8005950:	2302      	movs	r3, #2
 8005952:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8005956:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800595a:	fa93 f3a3 	rbit	r3, r3
 800595e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8005962:	4b3b      	ldr	r3, [pc, #236]	@ (8005a50 <HAL_RCC_OscConfig+0x5d0>)
 8005964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005966:	2202      	movs	r2, #2
 8005968:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800596c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8005970:	fa92 f2a2 	rbit	r2, r2
 8005974:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8005978:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800597c:	fab2 f282 	clz	r2, r2
 8005980:	b2d2      	uxtb	r2, r2
 8005982:	f042 0220 	orr.w	r2, r2, #32
 8005986:	b2d2      	uxtb	r2, r2
 8005988:	f002 021f 	and.w	r2, r2, #31
 800598c:	2101      	movs	r1, #1
 800598e:	fa01 f202 	lsl.w	r2, r1, r2
 8005992:	4013      	ands	r3, r2
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0af      	beq.n	80058f8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005998:	4b2d      	ldr	r3, [pc, #180]	@ (8005a50 <HAL_RCC_OscConfig+0x5d0>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80059a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80059a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	21f8      	movs	r1, #248	@ 0xf8
 80059ae:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b2:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80059b6:	fa91 f1a1 	rbit	r1, r1
 80059ba:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80059be:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80059c2:	fab1 f181 	clz	r1, r1
 80059c6:	b2c9      	uxtb	r1, r1
 80059c8:	408b      	lsls	r3, r1
 80059ca:	4921      	ldr	r1, [pc, #132]	@ (8005a50 <HAL_RCC_OscConfig+0x5d0>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	600b      	str	r3, [r1, #0]
 80059d0:	e06d      	b.n	8005aae <HAL_RCC_OscConfig+0x62e>
 80059d2:	2301      	movs	r3, #1
 80059d4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80059dc:	fa93 f3a3 	rbit	r3, r3
 80059e0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80059e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059e8:	fab3 f383 	clz	r3, r3
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80059f2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	461a      	mov	r2, r3
 80059fa:	2300      	movs	r3, #0
 80059fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059fe:	f7fd f869 	bl	8002ad4 <HAL_GetTick>
 8005a02:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a06:	e00a      	b.n	8005a1e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a08:	f7fd f864 	bl	8002ad4 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d902      	bls.n	8005a1e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	f000 bd7e 	b.w	800651a <HAL_RCC_OscConfig+0x109a>
 8005a1e:	2302      	movs	r3, #2
 8005a20:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a24:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005a28:	fa93 f3a3 	rbit	r3, r3
 8005a2c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8005a30:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a34:	fab3 f383 	clz	r3, r3
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	095b      	lsrs	r3, r3, #5
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	f043 0301 	orr.w	r3, r3, #1
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d105      	bne.n	8005a54 <HAL_RCC_OscConfig+0x5d4>
 8005a48:	4b01      	ldr	r3, [pc, #4]	@ (8005a50 <HAL_RCC_OscConfig+0x5d0>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	e016      	b.n	8005a7c <HAL_RCC_OscConfig+0x5fc>
 8005a4e:	bf00      	nop
 8005a50:	40021000 	.word	0x40021000
 8005a54:	2302      	movs	r3, #2
 8005a56:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005a5e:	fa93 f3a3 	rbit	r3, r3
 8005a62:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005a66:	2302      	movs	r3, #2
 8005a68:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8005a6c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005a70:	fa93 f3a3 	rbit	r3, r3
 8005a74:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005a78:	4bbf      	ldr	r3, [pc, #764]	@ (8005d78 <HAL_RCC_OscConfig+0x8f8>)
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8005a82:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8005a86:	fa92 f2a2 	rbit	r2, r2
 8005a8a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8005a8e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005a92:	fab2 f282 	clz	r2, r2
 8005a96:	b2d2      	uxtb	r2, r2
 8005a98:	f042 0220 	orr.w	r2, r2, #32
 8005a9c:	b2d2      	uxtb	r2, r2
 8005a9e:	f002 021f 	and.w	r2, r2, #31
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1ac      	bne.n	8005a08 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005aae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005ab2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0308 	and.w	r3, r3, #8
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 8113 	beq.w	8005cea <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ac4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005ac8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d07c      	beq.n	8005bce <HAL_RCC_OscConfig+0x74e>
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ade:	fa93 f3a3 	rbit	r3, r3
 8005ae2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8005ae6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005aea:	fab3 f383 	clz	r3, r3
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	461a      	mov	r2, r3
 8005af2:	4ba2      	ldr	r3, [pc, #648]	@ (8005d7c <HAL_RCC_OscConfig+0x8fc>)
 8005af4:	4413      	add	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	461a      	mov	r2, r3
 8005afa:	2301      	movs	r3, #1
 8005afc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005afe:	f7fc ffe9 	bl	8002ad4 <HAL_GetTick>
 8005b02:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b06:	e00a      	b.n	8005b1e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b08:	f7fc ffe4 	bl	8002ad4 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d902      	bls.n	8005b1e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	f000 bcfe 	b.w	800651a <HAL_RCC_OscConfig+0x109a>
 8005b1e:	2302      	movs	r3, #2
 8005b20:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b28:	fa93 f2a3 	rbit	r2, r3
 8005b2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b30:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005b34:	601a      	str	r2, [r3, #0]
 8005b36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b3e:	2202      	movs	r2, #2
 8005b40:	601a      	str	r2, [r3, #0]
 8005b42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	fa93 f2a3 	rbit	r2, r3
 8005b50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b5e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005b62:	2202      	movs	r2, #2
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b6a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	fa93 f2a3 	rbit	r2, r3
 8005b74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b78:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005b7c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b7e:	4b7e      	ldr	r3, [pc, #504]	@ (8005d78 <HAL_RCC_OscConfig+0x8f8>)
 8005b80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b86:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005b8a:	2102      	movs	r1, #2
 8005b8c:	6019      	str	r1, [r3, #0]
 8005b8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b92:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	fa93 f1a3 	rbit	r1, r3
 8005b9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005ba0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005ba4:	6019      	str	r1, [r3, #0]
  return result;
 8005ba6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005baa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	fab3 f383 	clz	r3, r3
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	f003 031f 	and.w	r3, r3, #31
 8005bc0:	2101      	movs	r1, #1
 8005bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d09d      	beq.n	8005b08 <HAL_RCC_OscConfig+0x688>
 8005bcc:	e08d      	b.n	8005cea <HAL_RCC_OscConfig+0x86a>
 8005bce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005bd2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005bde:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	fa93 f2a3 	rbit	r2, r3
 8005be8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005bec:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005bf0:	601a      	str	r2, [r3, #0]
  return result;
 8005bf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005bf6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005bfa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bfc:	fab3 f383 	clz	r3, r3
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	461a      	mov	r2, r3
 8005c04:	4b5d      	ldr	r3, [pc, #372]	@ (8005d7c <HAL_RCC_OscConfig+0x8fc>)
 8005c06:	4413      	add	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c10:	f7fc ff60 	bl	8002ad4 <HAL_GetTick>
 8005c14:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c18:	e00a      	b.n	8005c30 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c1a:	f7fc ff5b 	bl	8002ad4 <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d902      	bls.n	8005c30 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	f000 bc75 	b.w	800651a <HAL_RCC_OscConfig+0x109a>
 8005c30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005c34:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005c38:	2202      	movs	r2, #2
 8005c3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005c40:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	fa93 f2a3 	rbit	r2, r3
 8005c4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005c4e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005c58:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	601a      	str	r2, [r3, #0]
 8005c60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005c64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	fa93 f2a3 	rbit	r2, r3
 8005c6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005c72:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005c7c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8005c80:	2202      	movs	r2, #2
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005c88:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	fa93 f2a3 	rbit	r2, r3
 8005c92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005c96:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005c9a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c9c:	4b36      	ldr	r3, [pc, #216]	@ (8005d78 <HAL_RCC_OscConfig+0x8f8>)
 8005c9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ca0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005ca4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005ca8:	2102      	movs	r1, #2
 8005caa:	6019      	str	r1, [r3, #0]
 8005cac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005cb0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	fa93 f1a3 	rbit	r1, r3
 8005cba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005cbe:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005cc2:	6019      	str	r1, [r3, #0]
  return result;
 8005cc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005cc8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	fab3 f383 	clz	r3, r3
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	f003 031f 	and.w	r3, r3, #31
 8005cde:	2101      	movs	r1, #1
 8005ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d197      	bne.n	8005c1a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005cee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0304 	and.w	r3, r3, #4
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f000 81a5 	beq.w	800604a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d00:	2300      	movs	r3, #0
 8005d02:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d06:	4b1c      	ldr	r3, [pc, #112]	@ (8005d78 <HAL_RCC_OscConfig+0x8f8>)
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d116      	bne.n	8005d40 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d12:	4b19      	ldr	r3, [pc, #100]	@ (8005d78 <HAL_RCC_OscConfig+0x8f8>)
 8005d14:	69db      	ldr	r3, [r3, #28]
 8005d16:	4a18      	ldr	r2, [pc, #96]	@ (8005d78 <HAL_RCC_OscConfig+0x8f8>)
 8005d18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d1c:	61d3      	str	r3, [r2, #28]
 8005d1e:	4b16      	ldr	r3, [pc, #88]	@ (8005d78 <HAL_RCC_OscConfig+0x8f8>)
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8005d26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005d2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005d34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d38:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d40:	4b0f      	ldr	r3, [pc, #60]	@ (8005d80 <HAL_RCC_OscConfig+0x900>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d121      	bne.n	8005d90 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8005d80 <HAL_RCC_OscConfig+0x900>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a0b      	ldr	r2, [pc, #44]	@ (8005d80 <HAL_RCC_OscConfig+0x900>)
 8005d52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d56:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d58:	f7fc febc 	bl	8002ad4 <HAL_GetTick>
 8005d5c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d60:	e010      	b.n	8005d84 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d62:	f7fc feb7 	bl	8002ad4 <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	2b64      	cmp	r3, #100	@ 0x64
 8005d70:	d908      	bls.n	8005d84 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e3d1      	b.n	800651a <HAL_RCC_OscConfig+0x109a>
 8005d76:	bf00      	nop
 8005d78:	40021000 	.word	0x40021000
 8005d7c:	10908120 	.word	0x10908120
 8005d80:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d84:	4b8d      	ldr	r3, [pc, #564]	@ (8005fbc <HAL_RCC_OscConfig+0xb3c>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d0e8      	beq.n	8005d62 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005d94:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d106      	bne.n	8005dae <HAL_RCC_OscConfig+0x92e>
 8005da0:	4b87      	ldr	r3, [pc, #540]	@ (8005fc0 <HAL_RCC_OscConfig+0xb40>)
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	4a86      	ldr	r2, [pc, #536]	@ (8005fc0 <HAL_RCC_OscConfig+0xb40>)
 8005da6:	f043 0301 	orr.w	r3, r3, #1
 8005daa:	6213      	str	r3, [r2, #32]
 8005dac:	e035      	b.n	8005e1a <HAL_RCC_OscConfig+0x99a>
 8005dae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005db2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10c      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x958>
 8005dbe:	4b80      	ldr	r3, [pc, #512]	@ (8005fc0 <HAL_RCC_OscConfig+0xb40>)
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	4a7f      	ldr	r2, [pc, #508]	@ (8005fc0 <HAL_RCC_OscConfig+0xb40>)
 8005dc4:	f023 0301 	bic.w	r3, r3, #1
 8005dc8:	6213      	str	r3, [r2, #32]
 8005dca:	4b7d      	ldr	r3, [pc, #500]	@ (8005fc0 <HAL_RCC_OscConfig+0xb40>)
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	4a7c      	ldr	r2, [pc, #496]	@ (8005fc0 <HAL_RCC_OscConfig+0xb40>)
 8005dd0:	f023 0304 	bic.w	r3, r3, #4
 8005dd4:	6213      	str	r3, [r2, #32]
 8005dd6:	e020      	b.n	8005e1a <HAL_RCC_OscConfig+0x99a>
 8005dd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005ddc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	2b05      	cmp	r3, #5
 8005de6:	d10c      	bne.n	8005e02 <HAL_RCC_OscConfig+0x982>
 8005de8:	4b75      	ldr	r3, [pc, #468]	@ (8005fc0 <HAL_RCC_OscConfig+0xb40>)
 8005dea:	6a1b      	ldr	r3, [r3, #32]
 8005dec:	4a74      	ldr	r2, [pc, #464]	@ (8005fc0 <HAL_RCC_OscConfig+0xb40>)
 8005dee:	f043 0304 	orr.w	r3, r3, #4
 8005df2:	6213      	str	r3, [r2, #32]
 8005df4:	4b72      	ldr	r3, [pc, #456]	@ (8005fc0 <HAL_RCC_OscConfig+0xb40>)
 8005df6:	6a1b      	ldr	r3, [r3, #32]
 8005df8:	4a71      	ldr	r2, [pc, #452]	@ (8005fc0 <HAL_RCC_OscConfig+0xb40>)
 8005dfa:	f043 0301 	orr.w	r3, r3, #1
 8005dfe:	6213      	str	r3, [r2, #32]
 8005e00:	e00b      	b.n	8005e1a <HAL_RCC_OscConfig+0x99a>
 8005e02:	4b6f      	ldr	r3, [pc, #444]	@ (8005fc0 <HAL_RCC_OscConfig+0xb40>)
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	4a6e      	ldr	r2, [pc, #440]	@ (8005fc0 <HAL_RCC_OscConfig+0xb40>)
 8005e08:	f023 0301 	bic.w	r3, r3, #1
 8005e0c:	6213      	str	r3, [r2, #32]
 8005e0e:	4b6c      	ldr	r3, [pc, #432]	@ (8005fc0 <HAL_RCC_OscConfig+0xb40>)
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	4a6b      	ldr	r2, [pc, #428]	@ (8005fc0 <HAL_RCC_OscConfig+0xb40>)
 8005e14:	f023 0304 	bic.w	r3, r3, #4
 8005e18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005e1e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f000 8081 	beq.w	8005f2e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e2c:	f7fc fe52 	bl	8002ad4 <HAL_GetTick>
 8005e30:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e34:	e00b      	b.n	8005e4e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e36:	f7fc fe4d 	bl	8002ad4 <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d901      	bls.n	8005e4e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e365      	b.n	800651a <HAL_RCC_OscConfig+0x109a>
 8005e4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005e52:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005e56:	2202      	movs	r2, #2
 8005e58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005e5e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	fa93 f2a3 	rbit	r2, r3
 8005e68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005e6c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005e76:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	601a      	str	r2, [r3, #0]
 8005e7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005e82:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	fa93 f2a3 	rbit	r2, r3
 8005e8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005e90:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005e94:	601a      	str	r2, [r3, #0]
  return result;
 8005e96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005e9a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005e9e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ea0:	fab3 f383 	clz	r3, r3
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	095b      	lsrs	r3, r3, #5
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	f043 0302 	orr.w	r3, r3, #2
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d102      	bne.n	8005eba <HAL_RCC_OscConfig+0xa3a>
 8005eb4:	4b42      	ldr	r3, [pc, #264]	@ (8005fc0 <HAL_RCC_OscConfig+0xb40>)
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	e013      	b.n	8005ee2 <HAL_RCC_OscConfig+0xa62>
 8005eba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005ebe:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ec6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005eca:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	fa93 f2a3 	rbit	r2, r3
 8005ed4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005ed8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8005edc:	601a      	str	r2, [r3, #0]
 8005ede:	4b38      	ldr	r3, [pc, #224]	@ (8005fc0 <HAL_RCC_OscConfig+0xb40>)
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005ee6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8005eea:	2102      	movs	r1, #2
 8005eec:	6011      	str	r1, [r2, #0]
 8005eee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005ef2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8005ef6:	6812      	ldr	r2, [r2, #0]
 8005ef8:	fa92 f1a2 	rbit	r1, r2
 8005efc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005f00:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8005f04:	6011      	str	r1, [r2, #0]
  return result;
 8005f06:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005f0a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8005f0e:	6812      	ldr	r2, [r2, #0]
 8005f10:	fab2 f282 	clz	r2, r2
 8005f14:	b2d2      	uxtb	r2, r2
 8005f16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f1a:	b2d2      	uxtb	r2, r2
 8005f1c:	f002 021f 	and.w	r2, r2, #31
 8005f20:	2101      	movs	r1, #1
 8005f22:	fa01 f202 	lsl.w	r2, r1, r2
 8005f26:	4013      	ands	r3, r2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d084      	beq.n	8005e36 <HAL_RCC_OscConfig+0x9b6>
 8005f2c:	e083      	b.n	8006036 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f2e:	f7fc fdd1 	bl	8002ad4 <HAL_GetTick>
 8005f32:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f36:	e00b      	b.n	8005f50 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f38:	f7fc fdcc 	bl	8002ad4 <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d901      	bls.n	8005f50 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e2e4      	b.n	800651a <HAL_RCC_OscConfig+0x109a>
 8005f50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005f54:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005f58:	2202      	movs	r2, #2
 8005f5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005f60:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	fa93 f2a3 	rbit	r2, r3
 8005f6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005f6e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8005f72:	601a      	str	r2, [r3, #0]
 8005f74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005f78:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	601a      	str	r2, [r3, #0]
 8005f80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005f84:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	fa93 f2a3 	rbit	r2, r3
 8005f8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005f92:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005f96:	601a      	str	r2, [r3, #0]
  return result;
 8005f98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005f9c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005fa0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fa2:	fab3 f383 	clz	r3, r3
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	095b      	lsrs	r3, r3, #5
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	f043 0302 	orr.w	r3, r3, #2
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d106      	bne.n	8005fc4 <HAL_RCC_OscConfig+0xb44>
 8005fb6:	4b02      	ldr	r3, [pc, #8]	@ (8005fc0 <HAL_RCC_OscConfig+0xb40>)
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	e017      	b.n	8005fec <HAL_RCC_OscConfig+0xb6c>
 8005fbc:	40007000 	.word	0x40007000
 8005fc0:	40021000 	.word	0x40021000
 8005fc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005fc8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8005fcc:	2202      	movs	r2, #2
 8005fce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005fd4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	fa93 f2a3 	rbit	r2, r3
 8005fde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005fe2:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8005fe6:	601a      	str	r2, [r3, #0]
 8005fe8:	4bb3      	ldr	r3, [pc, #716]	@ (80062b8 <HAL_RCC_OscConfig+0xe38>)
 8005fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005ff0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8005ff4:	2102      	movs	r1, #2
 8005ff6:	6011      	str	r1, [r2, #0]
 8005ff8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005ffc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8006000:	6812      	ldr	r2, [r2, #0]
 8006002:	fa92 f1a2 	rbit	r1, r2
 8006006:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800600a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800600e:	6011      	str	r1, [r2, #0]
  return result;
 8006010:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006014:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8006018:	6812      	ldr	r2, [r2, #0]
 800601a:	fab2 f282 	clz	r2, r2
 800601e:	b2d2      	uxtb	r2, r2
 8006020:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006024:	b2d2      	uxtb	r2, r2
 8006026:	f002 021f 	and.w	r2, r2, #31
 800602a:	2101      	movs	r1, #1
 800602c:	fa01 f202 	lsl.w	r2, r1, r2
 8006030:	4013      	ands	r3, r2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d180      	bne.n	8005f38 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006036:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800603a:	2b01      	cmp	r3, #1
 800603c:	d105      	bne.n	800604a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800603e:	4b9e      	ldr	r3, [pc, #632]	@ (80062b8 <HAL_RCC_OscConfig+0xe38>)
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	4a9d      	ldr	r2, [pc, #628]	@ (80062b8 <HAL_RCC_OscConfig+0xe38>)
 8006044:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006048:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800604a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800604e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	2b00      	cmp	r3, #0
 8006058:	f000 825e 	beq.w	8006518 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800605c:	4b96      	ldr	r3, [pc, #600]	@ (80062b8 <HAL_RCC_OscConfig+0xe38>)
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f003 030c 	and.w	r3, r3, #12
 8006064:	2b08      	cmp	r3, #8
 8006066:	f000 821f 	beq.w	80064a8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800606a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800606e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	2b02      	cmp	r3, #2
 8006078:	f040 8170 	bne.w	800635c <HAL_RCC_OscConfig+0xedc>
 800607c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006080:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006084:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006088:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800608a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800608e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	fa93 f2a3 	rbit	r2, r3
 8006098:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800609c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80060a0:	601a      	str	r2, [r3, #0]
  return result;
 80060a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80060a6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80060aa:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ac:	fab3 f383 	clz	r3, r3
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80060b6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	461a      	mov	r2, r3
 80060be:	2300      	movs	r3, #0
 80060c0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c2:	f7fc fd07 	bl	8002ad4 <HAL_GetTick>
 80060c6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060ca:	e009      	b.n	80060e0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060cc:	f7fc fd02 	bl	8002ad4 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d901      	bls.n	80060e0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e21c      	b.n	800651a <HAL_RCC_OscConfig+0x109a>
 80060e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80060e4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80060e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80060ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80060f2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	fa93 f2a3 	rbit	r2, r3
 80060fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006100:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8006104:	601a      	str	r2, [r3, #0]
  return result;
 8006106:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800610a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800610e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006110:	fab3 f383 	clz	r3, r3
 8006114:	b2db      	uxtb	r3, r3
 8006116:	095b      	lsrs	r3, r3, #5
 8006118:	b2db      	uxtb	r3, r3
 800611a:	f043 0301 	orr.w	r3, r3, #1
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b01      	cmp	r3, #1
 8006122:	d102      	bne.n	800612a <HAL_RCC_OscConfig+0xcaa>
 8006124:	4b64      	ldr	r3, [pc, #400]	@ (80062b8 <HAL_RCC_OscConfig+0xe38>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	e027      	b.n	800617a <HAL_RCC_OscConfig+0xcfa>
 800612a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800612e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006132:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006136:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006138:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800613c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	fa93 f2a3 	rbit	r2, r3
 8006146:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800614a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800614e:	601a      	str	r2, [r3, #0]
 8006150:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006154:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006158:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800615c:	601a      	str	r2, [r3, #0]
 800615e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006162:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	fa93 f2a3 	rbit	r2, r3
 800616c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006170:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	4b50      	ldr	r3, [pc, #320]	@ (80062b8 <HAL_RCC_OscConfig+0xe38>)
 8006178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800617a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800617e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8006182:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006186:	6011      	str	r1, [r2, #0]
 8006188:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800618c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8006190:	6812      	ldr	r2, [r2, #0]
 8006192:	fa92 f1a2 	rbit	r1, r2
 8006196:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800619a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800619e:	6011      	str	r1, [r2, #0]
  return result;
 80061a0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80061a4:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80061a8:	6812      	ldr	r2, [r2, #0]
 80061aa:	fab2 f282 	clz	r2, r2
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	f042 0220 	orr.w	r2, r2, #32
 80061b4:	b2d2      	uxtb	r2, r2
 80061b6:	f002 021f 	and.w	r2, r2, #31
 80061ba:	2101      	movs	r1, #1
 80061bc:	fa01 f202 	lsl.w	r2, r1, r2
 80061c0:	4013      	ands	r3, r2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d182      	bne.n	80060cc <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061c6:	4b3c      	ldr	r3, [pc, #240]	@ (80062b8 <HAL_RCC_OscConfig+0xe38>)
 80061c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ca:	f023 020f 	bic.w	r2, r3, #15
 80061ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80061d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061da:	4937      	ldr	r1, [pc, #220]	@ (80062b8 <HAL_RCC_OscConfig+0xe38>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80061e0:	4b35      	ldr	r3, [pc, #212]	@ (80062b8 <HAL_RCC_OscConfig+0xe38>)
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80061e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80061ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	6a19      	ldr	r1, [r3, #32]
 80061f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80061f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	69db      	ldr	r3, [r3, #28]
 8006200:	430b      	orrs	r3, r1
 8006202:	492d      	ldr	r1, [pc, #180]	@ (80062b8 <HAL_RCC_OscConfig+0xe38>)
 8006204:	4313      	orrs	r3, r2
 8006206:	604b      	str	r3, [r1, #4]
 8006208:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800620c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8006210:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006214:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006216:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800621a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	fa93 f2a3 	rbit	r2, r3
 8006224:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006228:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800622c:	601a      	str	r2, [r3, #0]
  return result;
 800622e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006232:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8006236:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006238:	fab3 f383 	clz	r3, r3
 800623c:	b2db      	uxtb	r3, r3
 800623e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006242:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	461a      	mov	r2, r3
 800624a:	2301      	movs	r3, #1
 800624c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800624e:	f7fc fc41 	bl	8002ad4 <HAL_GetTick>
 8006252:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006256:	e009      	b.n	800626c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006258:	f7fc fc3c 	bl	8002ad4 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	2b02      	cmp	r3, #2
 8006266:	d901      	bls.n	800626c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e156      	b.n	800651a <HAL_RCC_OscConfig+0x109a>
 800626c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006270:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8006274:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006278:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800627a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800627e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	fa93 f2a3 	rbit	r2, r3
 8006288:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800628c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006290:	601a      	str	r2, [r3, #0]
  return result;
 8006292:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006296:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800629a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800629c:	fab3 f383 	clz	r3, r3
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	095b      	lsrs	r3, r3, #5
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	f043 0301 	orr.w	r3, r3, #1
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d105      	bne.n	80062bc <HAL_RCC_OscConfig+0xe3c>
 80062b0:	4b01      	ldr	r3, [pc, #4]	@ (80062b8 <HAL_RCC_OscConfig+0xe38>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	e02a      	b.n	800630c <HAL_RCC_OscConfig+0xe8c>
 80062b6:	bf00      	nop
 80062b8:	40021000 	.word	0x40021000
 80062bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80062c0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80062c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80062c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80062ce:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	fa93 f2a3 	rbit	r2, r3
 80062d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80062dc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80062e6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80062ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80062ee:	601a      	str	r2, [r3, #0]
 80062f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80062f4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	fa93 f2a3 	rbit	r2, r3
 80062fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006302:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	4b86      	ldr	r3, [pc, #536]	@ (8006524 <HAL_RCC_OscConfig+0x10a4>)
 800630a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800630c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006310:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8006314:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006318:	6011      	str	r1, [r2, #0]
 800631a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800631e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8006322:	6812      	ldr	r2, [r2, #0]
 8006324:	fa92 f1a2 	rbit	r1, r2
 8006328:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800632c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8006330:	6011      	str	r1, [r2, #0]
  return result;
 8006332:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006336:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800633a:	6812      	ldr	r2, [r2, #0]
 800633c:	fab2 f282 	clz	r2, r2
 8006340:	b2d2      	uxtb	r2, r2
 8006342:	f042 0220 	orr.w	r2, r2, #32
 8006346:	b2d2      	uxtb	r2, r2
 8006348:	f002 021f 	and.w	r2, r2, #31
 800634c:	2101      	movs	r1, #1
 800634e:	fa01 f202 	lsl.w	r2, r1, r2
 8006352:	4013      	ands	r3, r2
 8006354:	2b00      	cmp	r3, #0
 8006356:	f43f af7f 	beq.w	8006258 <HAL_RCC_OscConfig+0xdd8>
 800635a:	e0dd      	b.n	8006518 <HAL_RCC_OscConfig+0x1098>
 800635c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006360:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8006364:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006368:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800636a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800636e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	fa93 f2a3 	rbit	r2, r3
 8006378:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800637c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8006380:	601a      	str	r2, [r3, #0]
  return result;
 8006382:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006386:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800638a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800638c:	fab3 f383 	clz	r3, r3
 8006390:	b2db      	uxtb	r3, r3
 8006392:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006396:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	461a      	mov	r2, r3
 800639e:	2300      	movs	r3, #0
 80063a0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063a2:	f7fc fb97 	bl	8002ad4 <HAL_GetTick>
 80063a6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063aa:	e009      	b.n	80063c0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063ac:	f7fc fb92 	bl	8002ad4 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d901      	bls.n	80063c0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e0ac      	b.n	800651a <HAL_RCC_OscConfig+0x109a>
 80063c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80063c4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80063c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80063cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80063d2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	fa93 f2a3 	rbit	r2, r3
 80063dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80063e0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80063e4:	601a      	str	r2, [r3, #0]
  return result;
 80063e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80063ea:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80063ee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063f0:	fab3 f383 	clz	r3, r3
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	095b      	lsrs	r3, r3, #5
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	f043 0301 	orr.w	r3, r3, #1
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b01      	cmp	r3, #1
 8006402:	d102      	bne.n	800640a <HAL_RCC_OscConfig+0xf8a>
 8006404:	4b47      	ldr	r3, [pc, #284]	@ (8006524 <HAL_RCC_OscConfig+0x10a4>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	e027      	b.n	800645a <HAL_RCC_OscConfig+0xfda>
 800640a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800640e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8006412:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006416:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006418:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800641c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	fa93 f2a3 	rbit	r2, r3
 8006426:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800642a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006434:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8006438:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006442:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	fa93 f2a3 	rbit	r2, r3
 800644c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006450:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	4b33      	ldr	r3, [pc, #204]	@ (8006524 <HAL_RCC_OscConfig+0x10a4>)
 8006458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800645a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800645e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8006462:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006466:	6011      	str	r1, [r2, #0]
 8006468:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800646c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8006470:	6812      	ldr	r2, [r2, #0]
 8006472:	fa92 f1a2 	rbit	r1, r2
 8006476:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800647a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800647e:	6011      	str	r1, [r2, #0]
  return result;
 8006480:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006484:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8006488:	6812      	ldr	r2, [r2, #0]
 800648a:	fab2 f282 	clz	r2, r2
 800648e:	b2d2      	uxtb	r2, r2
 8006490:	f042 0220 	orr.w	r2, r2, #32
 8006494:	b2d2      	uxtb	r2, r2
 8006496:	f002 021f 	and.w	r2, r2, #31
 800649a:	2101      	movs	r1, #1
 800649c:	fa01 f202 	lsl.w	r2, r1, r2
 80064a0:	4013      	ands	r3, r2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d182      	bne.n	80063ac <HAL_RCC_OscConfig+0xf2c>
 80064a6:	e037      	b.n	8006518 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80064ac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d101      	bne.n	80064bc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e02e      	b.n	800651a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80064bc:	4b19      	ldr	r3, [pc, #100]	@ (8006524 <HAL_RCC_OscConfig+0x10a4>)
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80064c4:	4b17      	ldr	r3, [pc, #92]	@ (8006524 <HAL_RCC_OscConfig+0x10a4>)
 80064c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c8:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80064cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80064d0:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80064d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80064d8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	69db      	ldr	r3, [r3, #28]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d117      	bne.n	8006514 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80064e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80064e8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80064ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80064f0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d10b      	bne.n	8006514 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80064fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006500:	f003 020f 	and.w	r2, r3, #15
 8006504:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006508:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006510:	429a      	cmp	r2, r3
 8006512:	d001      	beq.n	8006518 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e000      	b.n	800651a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	40021000 	.word	0x40021000

08006528 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b09e      	sub	sp, #120	@ 0x78
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006532:	2300      	movs	r3, #0
 8006534:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e162      	b.n	8006806 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006540:	4b90      	ldr	r3, [pc, #576]	@ (8006784 <HAL_RCC_ClockConfig+0x25c>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0307 	and.w	r3, r3, #7
 8006548:	683a      	ldr	r2, [r7, #0]
 800654a:	429a      	cmp	r2, r3
 800654c:	d910      	bls.n	8006570 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800654e:	4b8d      	ldr	r3, [pc, #564]	@ (8006784 <HAL_RCC_ClockConfig+0x25c>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f023 0207 	bic.w	r2, r3, #7
 8006556:	498b      	ldr	r1, [pc, #556]	@ (8006784 <HAL_RCC_ClockConfig+0x25c>)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	4313      	orrs	r3, r2
 800655c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800655e:	4b89      	ldr	r3, [pc, #548]	@ (8006784 <HAL_RCC_ClockConfig+0x25c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0307 	and.w	r3, r3, #7
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	429a      	cmp	r2, r3
 800656a:	d001      	beq.n	8006570 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e14a      	b.n	8006806 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0302 	and.w	r3, r3, #2
 8006578:	2b00      	cmp	r3, #0
 800657a:	d008      	beq.n	800658e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800657c:	4b82      	ldr	r3, [pc, #520]	@ (8006788 <HAL_RCC_ClockConfig+0x260>)
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	497f      	ldr	r1, [pc, #508]	@ (8006788 <HAL_RCC_ClockConfig+0x260>)
 800658a:	4313      	orrs	r3, r2
 800658c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 80dc 	beq.w	8006754 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d13c      	bne.n	800661e <HAL_RCC_ClockConfig+0xf6>
 80065a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80065a8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065ac:	fa93 f3a3 	rbit	r3, r3
 80065b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80065b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065b4:	fab3 f383 	clz	r3, r3
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	095b      	lsrs	r3, r3, #5
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	f043 0301 	orr.w	r3, r3, #1
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d102      	bne.n	80065ce <HAL_RCC_ClockConfig+0xa6>
 80065c8:	4b6f      	ldr	r3, [pc, #444]	@ (8006788 <HAL_RCC_ClockConfig+0x260>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	e00f      	b.n	80065ee <HAL_RCC_ClockConfig+0xc6>
 80065ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80065d2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80065d6:	fa93 f3a3 	rbit	r3, r3
 80065da:	667b      	str	r3, [r7, #100]	@ 0x64
 80065dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80065e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80065e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80065e4:	fa93 f3a3 	rbit	r3, r3
 80065e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065ea:	4b67      	ldr	r3, [pc, #412]	@ (8006788 <HAL_RCC_ClockConfig+0x260>)
 80065ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80065f2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80065f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065f6:	fa92 f2a2 	rbit	r2, r2
 80065fa:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80065fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80065fe:	fab2 f282 	clz	r2, r2
 8006602:	b2d2      	uxtb	r2, r2
 8006604:	f042 0220 	orr.w	r2, r2, #32
 8006608:	b2d2      	uxtb	r2, r2
 800660a:	f002 021f 	and.w	r2, r2, #31
 800660e:	2101      	movs	r1, #1
 8006610:	fa01 f202 	lsl.w	r2, r1, r2
 8006614:	4013      	ands	r3, r2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d17b      	bne.n	8006712 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e0f3      	b.n	8006806 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	2b02      	cmp	r3, #2
 8006624:	d13c      	bne.n	80066a0 <HAL_RCC_ClockConfig+0x178>
 8006626:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800662a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800662c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800662e:	fa93 f3a3 	rbit	r3, r3
 8006632:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006634:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006636:	fab3 f383 	clz	r3, r3
 800663a:	b2db      	uxtb	r3, r3
 800663c:	095b      	lsrs	r3, r3, #5
 800663e:	b2db      	uxtb	r3, r3
 8006640:	f043 0301 	orr.w	r3, r3, #1
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b01      	cmp	r3, #1
 8006648:	d102      	bne.n	8006650 <HAL_RCC_ClockConfig+0x128>
 800664a:	4b4f      	ldr	r3, [pc, #316]	@ (8006788 <HAL_RCC_ClockConfig+0x260>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	e00f      	b.n	8006670 <HAL_RCC_ClockConfig+0x148>
 8006650:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006654:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006656:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006658:	fa93 f3a3 	rbit	r3, r3
 800665c:	647b      	str	r3, [r7, #68]	@ 0x44
 800665e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006662:	643b      	str	r3, [r7, #64]	@ 0x40
 8006664:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006666:	fa93 f3a3 	rbit	r3, r3
 800666a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800666c:	4b46      	ldr	r3, [pc, #280]	@ (8006788 <HAL_RCC_ClockConfig+0x260>)
 800666e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006670:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006674:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006676:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006678:	fa92 f2a2 	rbit	r2, r2
 800667c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800667e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006680:	fab2 f282 	clz	r2, r2
 8006684:	b2d2      	uxtb	r2, r2
 8006686:	f042 0220 	orr.w	r2, r2, #32
 800668a:	b2d2      	uxtb	r2, r2
 800668c:	f002 021f 	and.w	r2, r2, #31
 8006690:	2101      	movs	r1, #1
 8006692:	fa01 f202 	lsl.w	r2, r1, r2
 8006696:	4013      	ands	r3, r2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d13a      	bne.n	8006712 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e0b2      	b.n	8006806 <HAL_RCC_ClockConfig+0x2de>
 80066a0:	2302      	movs	r3, #2
 80066a2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a6:	fa93 f3a3 	rbit	r3, r3
 80066aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80066ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066ae:	fab3 f383 	clz	r3, r3
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	095b      	lsrs	r3, r3, #5
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	f043 0301 	orr.w	r3, r3, #1
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d102      	bne.n	80066c8 <HAL_RCC_ClockConfig+0x1a0>
 80066c2:	4b31      	ldr	r3, [pc, #196]	@ (8006788 <HAL_RCC_ClockConfig+0x260>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	e00d      	b.n	80066e4 <HAL_RCC_ClockConfig+0x1bc>
 80066c8:	2302      	movs	r3, #2
 80066ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ce:	fa93 f3a3 	rbit	r3, r3
 80066d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80066d4:	2302      	movs	r3, #2
 80066d6:	623b      	str	r3, [r7, #32]
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	fa93 f3a3 	rbit	r3, r3
 80066de:	61fb      	str	r3, [r7, #28]
 80066e0:	4b29      	ldr	r3, [pc, #164]	@ (8006788 <HAL_RCC_ClockConfig+0x260>)
 80066e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e4:	2202      	movs	r2, #2
 80066e6:	61ba      	str	r2, [r7, #24]
 80066e8:	69ba      	ldr	r2, [r7, #24]
 80066ea:	fa92 f2a2 	rbit	r2, r2
 80066ee:	617a      	str	r2, [r7, #20]
  return result;
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	fab2 f282 	clz	r2, r2
 80066f6:	b2d2      	uxtb	r2, r2
 80066f8:	f042 0220 	orr.w	r2, r2, #32
 80066fc:	b2d2      	uxtb	r2, r2
 80066fe:	f002 021f 	and.w	r2, r2, #31
 8006702:	2101      	movs	r1, #1
 8006704:	fa01 f202 	lsl.w	r2, r1, r2
 8006708:	4013      	ands	r3, r2
 800670a:	2b00      	cmp	r3, #0
 800670c:	d101      	bne.n	8006712 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e079      	b.n	8006806 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006712:	4b1d      	ldr	r3, [pc, #116]	@ (8006788 <HAL_RCC_ClockConfig+0x260>)
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f023 0203 	bic.w	r2, r3, #3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	491a      	ldr	r1, [pc, #104]	@ (8006788 <HAL_RCC_ClockConfig+0x260>)
 8006720:	4313      	orrs	r3, r2
 8006722:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006724:	f7fc f9d6 	bl	8002ad4 <HAL_GetTick>
 8006728:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800672a:	e00a      	b.n	8006742 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800672c:	f7fc f9d2 	bl	8002ad4 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800673a:	4293      	cmp	r3, r2
 800673c:	d901      	bls.n	8006742 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e061      	b.n	8006806 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006742:	4b11      	ldr	r3, [pc, #68]	@ (8006788 <HAL_RCC_ClockConfig+0x260>)
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f003 020c 	and.w	r2, r3, #12
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	429a      	cmp	r2, r3
 8006752:	d1eb      	bne.n	800672c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006754:	4b0b      	ldr	r3, [pc, #44]	@ (8006784 <HAL_RCC_ClockConfig+0x25c>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0307 	and.w	r3, r3, #7
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	429a      	cmp	r2, r3
 8006760:	d214      	bcs.n	800678c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006762:	4b08      	ldr	r3, [pc, #32]	@ (8006784 <HAL_RCC_ClockConfig+0x25c>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f023 0207 	bic.w	r2, r3, #7
 800676a:	4906      	ldr	r1, [pc, #24]	@ (8006784 <HAL_RCC_ClockConfig+0x25c>)
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	4313      	orrs	r3, r2
 8006770:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006772:	4b04      	ldr	r3, [pc, #16]	@ (8006784 <HAL_RCC_ClockConfig+0x25c>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0307 	and.w	r3, r3, #7
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	429a      	cmp	r2, r3
 800677e:	d005      	beq.n	800678c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e040      	b.n	8006806 <HAL_RCC_ClockConfig+0x2de>
 8006784:	40022000 	.word	0x40022000
 8006788:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0304 	and.w	r3, r3, #4
 8006794:	2b00      	cmp	r3, #0
 8006796:	d008      	beq.n	80067aa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006798:	4b1d      	ldr	r3, [pc, #116]	@ (8006810 <HAL_RCC_ClockConfig+0x2e8>)
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	491a      	ldr	r1, [pc, #104]	@ (8006810 <HAL_RCC_ClockConfig+0x2e8>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0308 	and.w	r3, r3, #8
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d009      	beq.n	80067ca <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067b6:	4b16      	ldr	r3, [pc, #88]	@ (8006810 <HAL_RCC_ClockConfig+0x2e8>)
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	4912      	ldr	r1, [pc, #72]	@ (8006810 <HAL_RCC_ClockConfig+0x2e8>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80067ca:	f000 f829 	bl	8006820 <HAL_RCC_GetSysClockFreq>
 80067ce:	4601      	mov	r1, r0
 80067d0:	4b0f      	ldr	r3, [pc, #60]	@ (8006810 <HAL_RCC_ClockConfig+0x2e8>)
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80067d8:	22f0      	movs	r2, #240	@ 0xf0
 80067da:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	fa92 f2a2 	rbit	r2, r2
 80067e2:	60fa      	str	r2, [r7, #12]
  return result;
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	fab2 f282 	clz	r2, r2
 80067ea:	b2d2      	uxtb	r2, r2
 80067ec:	40d3      	lsrs	r3, r2
 80067ee:	4a09      	ldr	r2, [pc, #36]	@ (8006814 <HAL_RCC_ClockConfig+0x2ec>)
 80067f0:	5cd3      	ldrb	r3, [r2, r3]
 80067f2:	fa21 f303 	lsr.w	r3, r1, r3
 80067f6:	4a08      	ldr	r2, [pc, #32]	@ (8006818 <HAL_RCC_ClockConfig+0x2f0>)
 80067f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80067fa:	4b08      	ldr	r3, [pc, #32]	@ (800681c <HAL_RCC_ClockConfig+0x2f4>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4618      	mov	r0, r3
 8006800:	f7fb fe84 	bl	800250c <HAL_InitTick>
  
  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3778      	adds	r7, #120	@ 0x78
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	40021000 	.word	0x40021000
 8006814:	08012664 	.word	0x08012664
 8006818:	20000008 	.word	0x20000008
 800681c:	2000000c 	.word	0x2000000c

08006820 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006820:	b480      	push	{r7}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006826:	2300      	movs	r3, #0
 8006828:	60fb      	str	r3, [r7, #12]
 800682a:	2300      	movs	r3, #0
 800682c:	60bb      	str	r3, [r7, #8]
 800682e:	2300      	movs	r3, #0
 8006830:	617b      	str	r3, [r7, #20]
 8006832:	2300      	movs	r3, #0
 8006834:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006836:	2300      	movs	r3, #0
 8006838:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800683a:	4b1f      	ldr	r3, [pc, #124]	@ (80068b8 <HAL_RCC_GetSysClockFreq+0x98>)
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f003 030c 	and.w	r3, r3, #12
 8006846:	2b04      	cmp	r3, #4
 8006848:	d002      	beq.n	8006850 <HAL_RCC_GetSysClockFreq+0x30>
 800684a:	2b08      	cmp	r3, #8
 800684c:	d003      	beq.n	8006856 <HAL_RCC_GetSysClockFreq+0x36>
 800684e:	e029      	b.n	80068a4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006850:	4b1a      	ldr	r3, [pc, #104]	@ (80068bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8006852:	613b      	str	r3, [r7, #16]
      break;
 8006854:	e029      	b.n	80068aa <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	0c9b      	lsrs	r3, r3, #18
 800685a:	f003 030f 	and.w	r3, r3, #15
 800685e:	4a18      	ldr	r2, [pc, #96]	@ (80068c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006860:	5cd3      	ldrb	r3, [r2, r3]
 8006862:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8006864:	4b14      	ldr	r3, [pc, #80]	@ (80068b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8006866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006868:	f003 030f 	and.w	r3, r3, #15
 800686c:	4a15      	ldr	r2, [pc, #84]	@ (80068c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800686e:	5cd3      	ldrb	r3, [r2, r3]
 8006870:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d008      	beq.n	800688e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800687c:	4a0f      	ldr	r2, [pc, #60]	@ (80068bc <HAL_RCC_GetSysClockFreq+0x9c>)
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	fbb2 f2f3 	udiv	r2, r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	fb02 f303 	mul.w	r3, r2, r3
 800688a:	617b      	str	r3, [r7, #20]
 800688c:	e007      	b.n	800689e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800688e:	4a0b      	ldr	r2, [pc, #44]	@ (80068bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	fbb2 f2f3 	udiv	r2, r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	fb02 f303 	mul.w	r3, r2, r3
 800689c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	613b      	str	r3, [r7, #16]
      break;
 80068a2:	e002      	b.n	80068aa <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80068a4:	4b05      	ldr	r3, [pc, #20]	@ (80068bc <HAL_RCC_GetSysClockFreq+0x9c>)
 80068a6:	613b      	str	r3, [r7, #16]
      break;
 80068a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068aa:	693b      	ldr	r3, [r7, #16]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	371c      	adds	r7, #28
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr
 80068b8:	40021000 	.word	0x40021000
 80068bc:	007a1200 	.word	0x007a1200
 80068c0:	0801267c 	.word	0x0801267c
 80068c4:	0801268c 	.word	0x0801268c

080068c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068c8:	b480      	push	{r7}
 80068ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068cc:	4b03      	ldr	r3, [pc, #12]	@ (80068dc <HAL_RCC_GetHCLKFreq+0x14>)
 80068ce:	681b      	ldr	r3, [r3, #0]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	20000008 	.word	0x20000008

080068e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80068e6:	f7ff ffef 	bl	80068c8 <HAL_RCC_GetHCLKFreq>
 80068ea:	4601      	mov	r1, r0
 80068ec:	4b0b      	ldr	r3, [pc, #44]	@ (800691c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80068f4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80068f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	fa92 f2a2 	rbit	r2, r2
 8006900:	603a      	str	r2, [r7, #0]
  return result;
 8006902:	683a      	ldr	r2, [r7, #0]
 8006904:	fab2 f282 	clz	r2, r2
 8006908:	b2d2      	uxtb	r2, r2
 800690a:	40d3      	lsrs	r3, r2
 800690c:	4a04      	ldr	r2, [pc, #16]	@ (8006920 <HAL_RCC_GetPCLK1Freq+0x40>)
 800690e:	5cd3      	ldrb	r3, [r2, r3]
 8006910:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006914:	4618      	mov	r0, r3
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	40021000 	.word	0x40021000
 8006920:	08012674 	.word	0x08012674

08006924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800692a:	f7ff ffcd 	bl	80068c8 <HAL_RCC_GetHCLKFreq>
 800692e:	4601      	mov	r1, r0
 8006930:	4b0b      	ldr	r3, [pc, #44]	@ (8006960 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8006938:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800693c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	fa92 f2a2 	rbit	r2, r2
 8006944:	603a      	str	r2, [r7, #0]
  return result;
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	fab2 f282 	clz	r2, r2
 800694c:	b2d2      	uxtb	r2, r2
 800694e:	40d3      	lsrs	r3, r2
 8006950:	4a04      	ldr	r2, [pc, #16]	@ (8006964 <HAL_RCC_GetPCLK2Freq+0x40>)
 8006952:	5cd3      	ldrb	r3, [r2, r3]
 8006954:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006958:	4618      	mov	r0, r3
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	40021000 	.word	0x40021000
 8006964:	08012674 	.word	0x08012674

08006968 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	220f      	movs	r2, #15
 8006976:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006978:	4b12      	ldr	r3, [pc, #72]	@ (80069c4 <HAL_RCC_GetClockConfig+0x5c>)
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	f003 0203 	and.w	r2, r3, #3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8006984:	4b0f      	ldr	r3, [pc, #60]	@ (80069c4 <HAL_RCC_GetClockConfig+0x5c>)
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8006990:	4b0c      	ldr	r3, [pc, #48]	@ (80069c4 <HAL_RCC_GetClockConfig+0x5c>)
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800699c:	4b09      	ldr	r3, [pc, #36]	@ (80069c4 <HAL_RCC_GetClockConfig+0x5c>)
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	08db      	lsrs	r3, r3, #3
 80069a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80069aa:	4b07      	ldr	r3, [pc, #28]	@ (80069c8 <HAL_RCC_GetClockConfig+0x60>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0207 	and.w	r2, r3, #7
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	601a      	str	r2, [r3, #0]
}
 80069b6:	bf00      	nop
 80069b8:	370c      	adds	r7, #12
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	40021000 	.word	0x40021000
 80069c8:	40022000 	.word	0x40022000

080069cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b092      	sub	sp, #72	@ 0x48
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80069d8:	2300      	movs	r3, #0
 80069da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80069dc:	2300      	movs	r3, #0
 80069de:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f000 80d4 	beq.w	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069f0:	4b4e      	ldr	r3, [pc, #312]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069f2:	69db      	ldr	r3, [r3, #28]
 80069f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10e      	bne.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069fc:	4b4b      	ldr	r3, [pc, #300]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	4a4a      	ldr	r2, [pc, #296]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a06:	61d3      	str	r3, [r2, #28]
 8006a08:	4b48      	ldr	r3, [pc, #288]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a0a:	69db      	ldr	r3, [r3, #28]
 8006a0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a10:	60bb      	str	r3, [r7, #8]
 8006a12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a14:	2301      	movs	r3, #1
 8006a16:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a1a:	4b45      	ldr	r3, [pc, #276]	@ (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d118      	bne.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a26:	4b42      	ldr	r3, [pc, #264]	@ (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a41      	ldr	r2, [pc, #260]	@ (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a30:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a32:	f7fc f84f 	bl	8002ad4 <HAL_GetTick>
 8006a36:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a38:	e008      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a3a:	f7fc f84b 	bl	8002ad4 <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	2b64      	cmp	r3, #100	@ 0x64
 8006a46:	d901      	bls.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e1d6      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a4c:	4b38      	ldr	r3, [pc, #224]	@ (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d0f0      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a58:	4b34      	ldr	r3, [pc, #208]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a5a:	6a1b      	ldr	r3, [r3, #32]
 8006a5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f000 8084 	beq.w	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a72:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d07c      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a78:	4b2c      	ldr	r3, [pc, #176]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006a86:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8a:	fa93 f3a3 	rbit	r3, r3
 8006a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8006a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a92:	fab3 f383 	clz	r3, r3
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	461a      	mov	r2, r3
 8006a9a:	4b26      	ldr	r3, [pc, #152]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006a9c:	4413      	add	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	6013      	str	r3, [r2, #0]
 8006aa6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aae:	fa93 f3a3 	rbit	r3, r3
 8006ab2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ab6:	fab3 f383 	clz	r3, r3
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	461a      	mov	r2, r3
 8006abe:	4b1d      	ldr	r3, [pc, #116]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006ac0:	4413      	add	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006aca:	4a18      	ldr	r2, [pc, #96]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006acc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ace:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006ad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d04b      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ada:	f7fb fffb 	bl	8002ad4 <HAL_GetTick>
 8006ade:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ae0:	e00a      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ae2:	f7fb fff7 	bl	8002ad4 <HAL_GetTick>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d901      	bls.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e180      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006af8:	2302      	movs	r3, #2
 8006afa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006afe:	fa93 f3a3 	rbit	r3, r3
 8006b02:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b04:	2302      	movs	r3, #2
 8006b06:	623b      	str	r3, [r7, #32]
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	fa93 f3a3 	rbit	r3, r3
 8006b0e:	61fb      	str	r3, [r7, #28]
  return result;
 8006b10:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b12:	fab3 f383 	clz	r3, r3
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	095b      	lsrs	r3, r3, #5
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	f043 0302 	orr.w	r3, r3, #2
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d108      	bne.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006b26:	4b01      	ldr	r3, [pc, #4]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	e00d      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006b2c:	40021000 	.word	0x40021000
 8006b30:	40007000 	.word	0x40007000
 8006b34:	10908100 	.word	0x10908100
 8006b38:	2302      	movs	r3, #2
 8006b3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	fa93 f3a3 	rbit	r3, r3
 8006b42:	617b      	str	r3, [r7, #20]
 8006b44:	4b9a      	ldr	r3, [pc, #616]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b48:	2202      	movs	r2, #2
 8006b4a:	613a      	str	r2, [r7, #16]
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	fa92 f2a2 	rbit	r2, r2
 8006b52:	60fa      	str	r2, [r7, #12]
  return result;
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	fab2 f282 	clz	r2, r2
 8006b5a:	b2d2      	uxtb	r2, r2
 8006b5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b60:	b2d2      	uxtb	r2, r2
 8006b62:	f002 021f 	and.w	r2, r2, #31
 8006b66:	2101      	movs	r1, #1
 8006b68:	fa01 f202 	lsl.w	r2, r1, r2
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d0b7      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006b72:	4b8f      	ldr	r3, [pc, #572]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	498c      	ldr	r1, [pc, #560]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006b80:	4313      	orrs	r3, r2
 8006b82:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006b84:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d105      	bne.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b8c:	4b88      	ldr	r3, [pc, #544]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006b8e:	69db      	ldr	r3, [r3, #28]
 8006b90:	4a87      	ldr	r2, [pc, #540]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006b92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b96:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d008      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ba4:	4b82      	ldr	r3, [pc, #520]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ba8:	f023 0203 	bic.w	r2, r3, #3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	497f      	ldr	r1, [pc, #508]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0302 	and.w	r3, r3, #2
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d008      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006bc2:	4b7b      	ldr	r3, [pc, #492]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	4978      	ldr	r1, [pc, #480]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0304 	and.w	r3, r3, #4
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d008      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006be0:	4b73      	ldr	r3, [pc, #460]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006be4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	4970      	ldr	r1, [pc, #448]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0320 	and.w	r3, r3, #32
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d008      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006bfe:	4b6c      	ldr	r3, [pc, #432]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c02:	f023 0210 	bic.w	r2, r3, #16
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	4969      	ldr	r1, [pc, #420]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d008      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006c1c:	4b64      	ldr	r3, [pc, #400]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c28:	4961      	ldr	r1, [pc, #388]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d008      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c3a:	4b5d      	ldr	r3, [pc, #372]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c3e:	f023 0220 	bic.w	r2, r3, #32
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	495a      	ldr	r1, [pc, #360]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d008      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c58:	4b55      	ldr	r3, [pc, #340]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c5c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c64:	4952      	ldr	r1, [pc, #328]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c66:	4313      	orrs	r3, r2
 8006c68:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0308 	and.w	r3, r3, #8
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d008      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006c76:	4b4e      	ldr	r3, [pc, #312]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	494b      	ldr	r1, [pc, #300]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0310 	and.w	r3, r3, #16
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d008      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006c94:	4b46      	ldr	r3, [pc, #280]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c98:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	4943      	ldr	r1, [pc, #268]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d008      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006cb2:	4b3f      	ldr	r3, [pc, #252]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cbe:	493c      	ldr	r1, [pc, #240]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d008      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006cd0:	4b37      	ldr	r3, [pc, #220]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd4:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cdc:	4934      	ldr	r1, [pc, #208]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d008      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006cee:	4b30      	ldr	r3, [pc, #192]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf2:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cfa:	492d      	ldr	r1, [pc, #180]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d008      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006d0c:	4b28      	ldr	r3, [pc, #160]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d18:	4925      	ldr	r1, [pc, #148]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d008      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006d2a:	4b21      	ldr	r3, [pc, #132]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d2e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d36:	491e      	ldr	r1, [pc, #120]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d008      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8006d48:	4b19      	ldr	r3, [pc, #100]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d4c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d54:	4916      	ldr	r1, [pc, #88]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d008      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8006d66:	4b12      	ldr	r3, [pc, #72]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d6a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d72:	490f      	ldr	r1, [pc, #60]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d008      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006d84:	4b0a      	ldr	r3, [pc, #40]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d88:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d90:	4907      	ldr	r1, [pc, #28]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00c      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8006da2:	4b03      	ldr	r3, [pc, #12]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006da6:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	e002      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006dae:	bf00      	nop
 8006db0:	40021000 	.word	0x40021000
 8006db4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006db6:	4913      	ldr	r1, [pc, #76]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006db8:	4313      	orrs	r3, r2
 8006dba:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d008      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8006dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dcc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dd4:	490b      	ldr	r1, [pc, #44]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d008      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8006de6:	4b07      	ldr	r3, [pc, #28]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dea:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006df2:	4904      	ldr	r1, [pc, #16]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3748      	adds	r7, #72	@ 0x48
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	40021000 	.word	0x40021000

08006e08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e049      	b.n	8006eae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d106      	bne.n	8006e34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f841 	bl	8006eb6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2202      	movs	r2, #2
 8006e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	3304      	adds	r3, #4
 8006e44:	4619      	mov	r1, r3
 8006e46:	4610      	mov	r0, r2
 8006e48:	f000 fc52 	bl	80076f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3708      	adds	r7, #8
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b083      	sub	sp, #12
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006ebe:	bf00      	nop
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
	...

08006ecc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d001      	beq.n	8006ee4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e04f      	b.n	8006f84 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68da      	ldr	r2, [r3, #12]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f042 0201 	orr.w	r2, r2, #1
 8006efa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a23      	ldr	r2, [pc, #140]	@ (8006f90 <HAL_TIM_Base_Start_IT+0xc4>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d01d      	beq.n	8006f42 <HAL_TIM_Base_Start_IT+0x76>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f0e:	d018      	beq.n	8006f42 <HAL_TIM_Base_Start_IT+0x76>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a1f      	ldr	r2, [pc, #124]	@ (8006f94 <HAL_TIM_Base_Start_IT+0xc8>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d013      	beq.n	8006f42 <HAL_TIM_Base_Start_IT+0x76>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8006f98 <HAL_TIM_Base_Start_IT+0xcc>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d00e      	beq.n	8006f42 <HAL_TIM_Base_Start_IT+0x76>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a1c      	ldr	r2, [pc, #112]	@ (8006f9c <HAL_TIM_Base_Start_IT+0xd0>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d009      	beq.n	8006f42 <HAL_TIM_Base_Start_IT+0x76>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a1b      	ldr	r2, [pc, #108]	@ (8006fa0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d004      	beq.n	8006f42 <HAL_TIM_Base_Start_IT+0x76>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a19      	ldr	r2, [pc, #100]	@ (8006fa4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d115      	bne.n	8006f6e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	689a      	ldr	r2, [r3, #8]
 8006f48:	4b17      	ldr	r3, [pc, #92]	@ (8006fa8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2b06      	cmp	r3, #6
 8006f52:	d015      	beq.n	8006f80 <HAL_TIM_Base_Start_IT+0xb4>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f5a:	d011      	beq.n	8006f80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f042 0201 	orr.w	r2, r2, #1
 8006f6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f6c:	e008      	b.n	8006f80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f042 0201 	orr.w	r2, r2, #1
 8006f7c:	601a      	str	r2, [r3, #0]
 8006f7e:	e000      	b.n	8006f82 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	40012c00 	.word	0x40012c00
 8006f94:	40000400 	.word	0x40000400
 8006f98:	40000800 	.word	0x40000800
 8006f9c:	40013400 	.word	0x40013400
 8006fa0:	40014000 	.word	0x40014000
 8006fa4:	40015000 	.word	0x40015000
 8006fa8:	00010007 	.word	0x00010007

08006fac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d101      	bne.n	8006fbe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e049      	b.n	8007052 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d106      	bne.n	8006fd8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7fb fc62 	bl	800289c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2202      	movs	r2, #2
 8006fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	3304      	adds	r3, #4
 8006fe8:	4619      	mov	r1, r3
 8006fea:	4610      	mov	r0, r2
 8006fec:	f000 fb80 	bl	80076f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3708      	adds	r7, #8
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
	...

0800705c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d109      	bne.n	8007080 <HAL_TIM_PWM_Start+0x24>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b01      	cmp	r3, #1
 8007076:	bf14      	ite	ne
 8007078:	2301      	movne	r3, #1
 800707a:	2300      	moveq	r3, #0
 800707c:	b2db      	uxtb	r3, r3
 800707e:	e03c      	b.n	80070fa <HAL_TIM_PWM_Start+0x9e>
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	2b04      	cmp	r3, #4
 8007084:	d109      	bne.n	800709a <HAL_TIM_PWM_Start+0x3e>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b01      	cmp	r3, #1
 8007090:	bf14      	ite	ne
 8007092:	2301      	movne	r3, #1
 8007094:	2300      	moveq	r3, #0
 8007096:	b2db      	uxtb	r3, r3
 8007098:	e02f      	b.n	80070fa <HAL_TIM_PWM_Start+0x9e>
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2b08      	cmp	r3, #8
 800709e:	d109      	bne.n	80070b4 <HAL_TIM_PWM_Start+0x58>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	bf14      	ite	ne
 80070ac:	2301      	movne	r3, #1
 80070ae:	2300      	moveq	r3, #0
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	e022      	b.n	80070fa <HAL_TIM_PWM_Start+0x9e>
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	2b0c      	cmp	r3, #12
 80070b8:	d109      	bne.n	80070ce <HAL_TIM_PWM_Start+0x72>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	bf14      	ite	ne
 80070c6:	2301      	movne	r3, #1
 80070c8:	2300      	moveq	r3, #0
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	e015      	b.n	80070fa <HAL_TIM_PWM_Start+0x9e>
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	2b10      	cmp	r3, #16
 80070d2:	d109      	bne.n	80070e8 <HAL_TIM_PWM_Start+0x8c>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	2b01      	cmp	r3, #1
 80070de:	bf14      	ite	ne
 80070e0:	2301      	movne	r3, #1
 80070e2:	2300      	moveq	r3, #0
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	e008      	b.n	80070fa <HAL_TIM_PWM_Start+0x9e>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	bf14      	ite	ne
 80070f4:	2301      	movne	r3, #1
 80070f6:	2300      	moveq	r3, #0
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d001      	beq.n	8007102 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e0a1      	b.n	8007246 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d104      	bne.n	8007112 <HAL_TIM_PWM_Start+0xb6>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2202      	movs	r2, #2
 800710c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007110:	e023      	b.n	800715a <HAL_TIM_PWM_Start+0xfe>
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	2b04      	cmp	r3, #4
 8007116:	d104      	bne.n	8007122 <HAL_TIM_PWM_Start+0xc6>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2202      	movs	r2, #2
 800711c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007120:	e01b      	b.n	800715a <HAL_TIM_PWM_Start+0xfe>
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	2b08      	cmp	r3, #8
 8007126:	d104      	bne.n	8007132 <HAL_TIM_PWM_Start+0xd6>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2202      	movs	r2, #2
 800712c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007130:	e013      	b.n	800715a <HAL_TIM_PWM_Start+0xfe>
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	2b0c      	cmp	r3, #12
 8007136:	d104      	bne.n	8007142 <HAL_TIM_PWM_Start+0xe6>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2202      	movs	r2, #2
 800713c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007140:	e00b      	b.n	800715a <HAL_TIM_PWM_Start+0xfe>
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	2b10      	cmp	r3, #16
 8007146:	d104      	bne.n	8007152 <HAL_TIM_PWM_Start+0xf6>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2202      	movs	r2, #2
 800714c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007150:	e003      	b.n	800715a <HAL_TIM_PWM_Start+0xfe>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2202      	movs	r2, #2
 8007156:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2201      	movs	r2, #1
 8007160:	6839      	ldr	r1, [r7, #0]
 8007162:	4618      	mov	r0, r3
 8007164:	f000 fe74 	bl	8007e50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a38      	ldr	r2, [pc, #224]	@ (8007250 <HAL_TIM_PWM_Start+0x1f4>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d018      	beq.n	80071a4 <HAL_TIM_PWM_Start+0x148>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a37      	ldr	r2, [pc, #220]	@ (8007254 <HAL_TIM_PWM_Start+0x1f8>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d013      	beq.n	80071a4 <HAL_TIM_PWM_Start+0x148>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a35      	ldr	r2, [pc, #212]	@ (8007258 <HAL_TIM_PWM_Start+0x1fc>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d00e      	beq.n	80071a4 <HAL_TIM_PWM_Start+0x148>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a34      	ldr	r2, [pc, #208]	@ (800725c <HAL_TIM_PWM_Start+0x200>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d009      	beq.n	80071a4 <HAL_TIM_PWM_Start+0x148>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a32      	ldr	r2, [pc, #200]	@ (8007260 <HAL_TIM_PWM_Start+0x204>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d004      	beq.n	80071a4 <HAL_TIM_PWM_Start+0x148>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a31      	ldr	r2, [pc, #196]	@ (8007264 <HAL_TIM_PWM_Start+0x208>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d101      	bne.n	80071a8 <HAL_TIM_PWM_Start+0x14c>
 80071a4:	2301      	movs	r3, #1
 80071a6:	e000      	b.n	80071aa <HAL_TIM_PWM_Start+0x14e>
 80071a8:	2300      	movs	r3, #0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d007      	beq.n	80071be <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80071bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a23      	ldr	r2, [pc, #140]	@ (8007250 <HAL_TIM_PWM_Start+0x1f4>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d01d      	beq.n	8007204 <HAL_TIM_PWM_Start+0x1a8>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071d0:	d018      	beq.n	8007204 <HAL_TIM_PWM_Start+0x1a8>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a24      	ldr	r2, [pc, #144]	@ (8007268 <HAL_TIM_PWM_Start+0x20c>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d013      	beq.n	8007204 <HAL_TIM_PWM_Start+0x1a8>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a22      	ldr	r2, [pc, #136]	@ (800726c <HAL_TIM_PWM_Start+0x210>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d00e      	beq.n	8007204 <HAL_TIM_PWM_Start+0x1a8>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a1a      	ldr	r2, [pc, #104]	@ (8007254 <HAL_TIM_PWM_Start+0x1f8>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d009      	beq.n	8007204 <HAL_TIM_PWM_Start+0x1a8>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a18      	ldr	r2, [pc, #96]	@ (8007258 <HAL_TIM_PWM_Start+0x1fc>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d004      	beq.n	8007204 <HAL_TIM_PWM_Start+0x1a8>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a19      	ldr	r2, [pc, #100]	@ (8007264 <HAL_TIM_PWM_Start+0x208>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d115      	bne.n	8007230 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	689a      	ldr	r2, [r3, #8]
 800720a:	4b19      	ldr	r3, [pc, #100]	@ (8007270 <HAL_TIM_PWM_Start+0x214>)
 800720c:	4013      	ands	r3, r2
 800720e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2b06      	cmp	r3, #6
 8007214:	d015      	beq.n	8007242 <HAL_TIM_PWM_Start+0x1e6>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800721c:	d011      	beq.n	8007242 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f042 0201 	orr.w	r2, r2, #1
 800722c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800722e:	e008      	b.n	8007242 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f042 0201 	orr.w	r2, r2, #1
 800723e:	601a      	str	r2, [r3, #0]
 8007240:	e000      	b.n	8007244 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007242:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	40012c00 	.word	0x40012c00
 8007254:	40013400 	.word	0x40013400
 8007258:	40014000 	.word	0x40014000
 800725c:	40014400 	.word	0x40014400
 8007260:	40014800 	.word	0x40014800
 8007264:	40015000 	.word	0x40015000
 8007268:	40000400 	.word	0x40000400
 800726c:	40000800 	.word	0x40000800
 8007270:	00010007 	.word	0x00010007

08007274 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	2b00      	cmp	r3, #0
 8007294:	d020      	beq.n	80072d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f003 0302 	and.w	r3, r3, #2
 800729c:	2b00      	cmp	r3, #0
 800729e:	d01b      	beq.n	80072d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f06f 0202 	mvn.w	r2, #2
 80072a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2201      	movs	r2, #1
 80072ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	699b      	ldr	r3, [r3, #24]
 80072b6:	f003 0303 	and.w	r3, r3, #3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d003      	beq.n	80072c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f9f8 	bl	80076b4 <HAL_TIM_IC_CaptureCallback>
 80072c4:	e005      	b.n	80072d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f9ea 	bl	80076a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 f9fb 	bl	80076c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	f003 0304 	and.w	r3, r3, #4
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d020      	beq.n	8007324 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f003 0304 	and.w	r3, r3, #4
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d01b      	beq.n	8007324 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f06f 0204 	mvn.w	r2, #4
 80072f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2202      	movs	r2, #2
 80072fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007306:	2b00      	cmp	r3, #0
 8007308:	d003      	beq.n	8007312 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f9d2 	bl	80076b4 <HAL_TIM_IC_CaptureCallback>
 8007310:	e005      	b.n	800731e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f9c4 	bl	80076a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f9d5 	bl	80076c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	f003 0308 	and.w	r3, r3, #8
 800732a:	2b00      	cmp	r3, #0
 800732c:	d020      	beq.n	8007370 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f003 0308 	and.w	r3, r3, #8
 8007334:	2b00      	cmp	r3, #0
 8007336:	d01b      	beq.n	8007370 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f06f 0208 	mvn.w	r2, #8
 8007340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2204      	movs	r2, #4
 8007346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	f003 0303 	and.w	r3, r3, #3
 8007352:	2b00      	cmp	r3, #0
 8007354:	d003      	beq.n	800735e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 f9ac 	bl	80076b4 <HAL_TIM_IC_CaptureCallback>
 800735c:	e005      	b.n	800736a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f99e 	bl	80076a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 f9af 	bl	80076c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	f003 0310 	and.w	r3, r3, #16
 8007376:	2b00      	cmp	r3, #0
 8007378:	d020      	beq.n	80073bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f003 0310 	and.w	r3, r3, #16
 8007380:	2b00      	cmp	r3, #0
 8007382:	d01b      	beq.n	80073bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f06f 0210 	mvn.w	r2, #16
 800738c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2208      	movs	r2, #8
 8007392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d003      	beq.n	80073aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f986 	bl	80076b4 <HAL_TIM_IC_CaptureCallback>
 80073a8:	e005      	b.n	80073b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f978 	bl	80076a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 f989 	bl	80076c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00c      	beq.n	80073e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d007      	beq.n	80073e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f06f 0201 	mvn.w	r2, #1
 80073d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f7fa fe1e 	bl	800201c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00c      	beq.n	8007404 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d007      	beq.n	8007404 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80073fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fde2 	bl	8007fc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00c      	beq.n	8007428 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007414:	2b00      	cmp	r3, #0
 8007416:	d007      	beq.n	8007428 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fdda 	bl	8007fdc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00c      	beq.n	800744c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007438:	2b00      	cmp	r3, #0
 800743a:	d007      	beq.n	800744c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f948 	bl	80076dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	f003 0320 	and.w	r3, r3, #32
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00c      	beq.n	8007470 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f003 0320 	and.w	r3, r3, #32
 800745c:	2b00      	cmp	r3, #0
 800745e:	d007      	beq.n	8007470 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f06f 0220 	mvn.w	r2, #32
 8007468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fda2 	bl	8007fb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007470:	bf00      	nop
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007484:	2300      	movs	r3, #0
 8007486:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800748e:	2b01      	cmp	r3, #1
 8007490:	d101      	bne.n	8007496 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007492:	2302      	movs	r3, #2
 8007494:	e0ff      	b.n	8007696 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2b14      	cmp	r3, #20
 80074a2:	f200 80f0 	bhi.w	8007686 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80074a6:	a201      	add	r2, pc, #4	@ (adr r2, 80074ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80074a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ac:	08007501 	.word	0x08007501
 80074b0:	08007687 	.word	0x08007687
 80074b4:	08007687 	.word	0x08007687
 80074b8:	08007687 	.word	0x08007687
 80074bc:	08007541 	.word	0x08007541
 80074c0:	08007687 	.word	0x08007687
 80074c4:	08007687 	.word	0x08007687
 80074c8:	08007687 	.word	0x08007687
 80074cc:	08007583 	.word	0x08007583
 80074d0:	08007687 	.word	0x08007687
 80074d4:	08007687 	.word	0x08007687
 80074d8:	08007687 	.word	0x08007687
 80074dc:	080075c3 	.word	0x080075c3
 80074e0:	08007687 	.word	0x08007687
 80074e4:	08007687 	.word	0x08007687
 80074e8:	08007687 	.word	0x08007687
 80074ec:	08007605 	.word	0x08007605
 80074f0:	08007687 	.word	0x08007687
 80074f4:	08007687 	.word	0x08007687
 80074f8:	08007687 	.word	0x08007687
 80074fc:	08007645 	.word	0x08007645
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68b9      	ldr	r1, [r7, #8]
 8007506:	4618      	mov	r0, r3
 8007508:	f000 f99c 	bl	8007844 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	699a      	ldr	r2, [r3, #24]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f042 0208 	orr.w	r2, r2, #8
 800751a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	699a      	ldr	r2, [r3, #24]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f022 0204 	bic.w	r2, r2, #4
 800752a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6999      	ldr	r1, [r3, #24]
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	691a      	ldr	r2, [r3, #16]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	430a      	orrs	r2, r1
 800753c:	619a      	str	r2, [r3, #24]
      break;
 800753e:	e0a5      	b.n	800768c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68b9      	ldr	r1, [r7, #8]
 8007546:	4618      	mov	r0, r3
 8007548:	f000 fa16 	bl	8007978 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	699a      	ldr	r2, [r3, #24]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800755a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	699a      	ldr	r2, [r3, #24]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800756a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6999      	ldr	r1, [r3, #24]
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	021a      	lsls	r2, r3, #8
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	430a      	orrs	r2, r1
 800757e:	619a      	str	r2, [r3, #24]
      break;
 8007580:	e084      	b.n	800768c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68b9      	ldr	r1, [r7, #8]
 8007588:	4618      	mov	r0, r3
 800758a:	f000 fa89 	bl	8007aa0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	69da      	ldr	r2, [r3, #28]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f042 0208 	orr.w	r2, r2, #8
 800759c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	69da      	ldr	r2, [r3, #28]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f022 0204 	bic.w	r2, r2, #4
 80075ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	69d9      	ldr	r1, [r3, #28]
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	691a      	ldr	r2, [r3, #16]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	430a      	orrs	r2, r1
 80075be:	61da      	str	r2, [r3, #28]
      break;
 80075c0:	e064      	b.n	800768c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68b9      	ldr	r1, [r7, #8]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f000 fafb 	bl	8007bc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	69da      	ldr	r2, [r3, #28]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	69da      	ldr	r2, [r3, #28]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	69d9      	ldr	r1, [r3, #28]
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	021a      	lsls	r2, r3, #8
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	430a      	orrs	r2, r1
 8007600:	61da      	str	r2, [r3, #28]
      break;
 8007602:	e043      	b.n	800768c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68b9      	ldr	r1, [r7, #8]
 800760a:	4618      	mov	r0, r3
 800760c:	f000 fb4a 	bl	8007ca4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f042 0208 	orr.w	r2, r2, #8
 800761e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f022 0204 	bic.w	r2, r2, #4
 800762e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	691a      	ldr	r2, [r3, #16]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	430a      	orrs	r2, r1
 8007640:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007642:	e023      	b.n	800768c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68b9      	ldr	r1, [r7, #8]
 800764a:	4618      	mov	r0, r3
 800764c:	f000 fb94 	bl	8007d78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800765e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800766e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	021a      	lsls	r2, r3, #8
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	430a      	orrs	r2, r1
 8007682:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007684:	e002      	b.n	800768c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	75fb      	strb	r3, [r7, #23]
      break;
 800768a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007694:	7dfb      	ldrb	r3, [r7, #23]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3718      	adds	r7, #24
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop

080076a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076e4:	bf00      	nop
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a48      	ldr	r2, [pc, #288]	@ (8007824 <TIM_Base_SetConfig+0x134>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d013      	beq.n	8007730 <TIM_Base_SetConfig+0x40>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800770e:	d00f      	beq.n	8007730 <TIM_Base_SetConfig+0x40>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a45      	ldr	r2, [pc, #276]	@ (8007828 <TIM_Base_SetConfig+0x138>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d00b      	beq.n	8007730 <TIM_Base_SetConfig+0x40>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a44      	ldr	r2, [pc, #272]	@ (800782c <TIM_Base_SetConfig+0x13c>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d007      	beq.n	8007730 <TIM_Base_SetConfig+0x40>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a43      	ldr	r2, [pc, #268]	@ (8007830 <TIM_Base_SetConfig+0x140>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d003      	beq.n	8007730 <TIM_Base_SetConfig+0x40>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a42      	ldr	r2, [pc, #264]	@ (8007834 <TIM_Base_SetConfig+0x144>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d108      	bne.n	8007742 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	4313      	orrs	r3, r2
 8007740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a37      	ldr	r2, [pc, #220]	@ (8007824 <TIM_Base_SetConfig+0x134>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d01f      	beq.n	800778a <TIM_Base_SetConfig+0x9a>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007750:	d01b      	beq.n	800778a <TIM_Base_SetConfig+0x9a>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a34      	ldr	r2, [pc, #208]	@ (8007828 <TIM_Base_SetConfig+0x138>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d017      	beq.n	800778a <TIM_Base_SetConfig+0x9a>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a33      	ldr	r2, [pc, #204]	@ (800782c <TIM_Base_SetConfig+0x13c>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d013      	beq.n	800778a <TIM_Base_SetConfig+0x9a>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a32      	ldr	r2, [pc, #200]	@ (8007830 <TIM_Base_SetConfig+0x140>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d00f      	beq.n	800778a <TIM_Base_SetConfig+0x9a>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a32      	ldr	r2, [pc, #200]	@ (8007838 <TIM_Base_SetConfig+0x148>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d00b      	beq.n	800778a <TIM_Base_SetConfig+0x9a>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a31      	ldr	r2, [pc, #196]	@ (800783c <TIM_Base_SetConfig+0x14c>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d007      	beq.n	800778a <TIM_Base_SetConfig+0x9a>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a30      	ldr	r2, [pc, #192]	@ (8007840 <TIM_Base_SetConfig+0x150>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d003      	beq.n	800778a <TIM_Base_SetConfig+0x9a>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a2b      	ldr	r2, [pc, #172]	@ (8007834 <TIM_Base_SetConfig+0x144>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d108      	bne.n	800779c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	4313      	orrs	r3, r2
 800779a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	689a      	ldr	r2, [r3, #8]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a18      	ldr	r2, [pc, #96]	@ (8007824 <TIM_Base_SetConfig+0x134>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d013      	beq.n	80077f0 <TIM_Base_SetConfig+0x100>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a19      	ldr	r2, [pc, #100]	@ (8007830 <TIM_Base_SetConfig+0x140>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d00f      	beq.n	80077f0 <TIM_Base_SetConfig+0x100>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a19      	ldr	r2, [pc, #100]	@ (8007838 <TIM_Base_SetConfig+0x148>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d00b      	beq.n	80077f0 <TIM_Base_SetConfig+0x100>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a18      	ldr	r2, [pc, #96]	@ (800783c <TIM_Base_SetConfig+0x14c>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d007      	beq.n	80077f0 <TIM_Base_SetConfig+0x100>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a17      	ldr	r2, [pc, #92]	@ (8007840 <TIM_Base_SetConfig+0x150>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d003      	beq.n	80077f0 <TIM_Base_SetConfig+0x100>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a12      	ldr	r2, [pc, #72]	@ (8007834 <TIM_Base_SetConfig+0x144>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d103      	bne.n	80077f8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	691a      	ldr	r2, [r3, #16]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	f003 0301 	and.w	r3, r3, #1
 8007806:	2b01      	cmp	r3, #1
 8007808:	d105      	bne.n	8007816 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	f023 0201 	bic.w	r2, r3, #1
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	611a      	str	r2, [r3, #16]
  }
}
 8007816:	bf00      	nop
 8007818:	3714      	adds	r7, #20
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	40012c00 	.word	0x40012c00
 8007828:	40000400 	.word	0x40000400
 800782c:	40000800 	.word	0x40000800
 8007830:	40013400 	.word	0x40013400
 8007834:	40015000 	.word	0x40015000
 8007838:	40014000 	.word	0x40014000
 800783c:	40014400 	.word	0x40014400
 8007840:	40014800 	.word	0x40014800

08007844 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007844:	b480      	push	{r7}
 8007846:	b087      	sub	sp, #28
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a1b      	ldr	r3, [r3, #32]
 8007858:	f023 0201 	bic.w	r2, r3, #1
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f023 0303 	bic.w	r3, r3, #3
 800787e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	4313      	orrs	r3, r2
 8007888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f023 0302 	bic.w	r3, r3, #2
 8007890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	4313      	orrs	r3, r2
 800789a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4a30      	ldr	r2, [pc, #192]	@ (8007960 <TIM_OC1_SetConfig+0x11c>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d013      	beq.n	80078cc <TIM_OC1_SetConfig+0x88>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4a2f      	ldr	r2, [pc, #188]	@ (8007964 <TIM_OC1_SetConfig+0x120>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d00f      	beq.n	80078cc <TIM_OC1_SetConfig+0x88>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a2e      	ldr	r2, [pc, #184]	@ (8007968 <TIM_OC1_SetConfig+0x124>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d00b      	beq.n	80078cc <TIM_OC1_SetConfig+0x88>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a2d      	ldr	r2, [pc, #180]	@ (800796c <TIM_OC1_SetConfig+0x128>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d007      	beq.n	80078cc <TIM_OC1_SetConfig+0x88>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a2c      	ldr	r2, [pc, #176]	@ (8007970 <TIM_OC1_SetConfig+0x12c>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d003      	beq.n	80078cc <TIM_OC1_SetConfig+0x88>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a2b      	ldr	r2, [pc, #172]	@ (8007974 <TIM_OC1_SetConfig+0x130>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d10c      	bne.n	80078e6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	f023 0308 	bic.w	r3, r3, #8
 80078d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	697a      	ldr	r2, [r7, #20]
 80078da:	4313      	orrs	r3, r2
 80078dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	f023 0304 	bic.w	r3, r3, #4
 80078e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007960 <TIM_OC1_SetConfig+0x11c>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d013      	beq.n	8007916 <TIM_OC1_SetConfig+0xd2>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a1c      	ldr	r2, [pc, #112]	@ (8007964 <TIM_OC1_SetConfig+0x120>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d00f      	beq.n	8007916 <TIM_OC1_SetConfig+0xd2>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a1b      	ldr	r2, [pc, #108]	@ (8007968 <TIM_OC1_SetConfig+0x124>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d00b      	beq.n	8007916 <TIM_OC1_SetConfig+0xd2>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a1a      	ldr	r2, [pc, #104]	@ (800796c <TIM_OC1_SetConfig+0x128>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d007      	beq.n	8007916 <TIM_OC1_SetConfig+0xd2>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a19      	ldr	r2, [pc, #100]	@ (8007970 <TIM_OC1_SetConfig+0x12c>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d003      	beq.n	8007916 <TIM_OC1_SetConfig+0xd2>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a18      	ldr	r2, [pc, #96]	@ (8007974 <TIM_OC1_SetConfig+0x130>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d111      	bne.n	800793a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800791c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007924:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	4313      	orrs	r3, r2
 800792e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	693a      	ldr	r2, [r7, #16]
 8007936:	4313      	orrs	r3, r2
 8007938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	685a      	ldr	r2, [r3, #4]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	621a      	str	r2, [r3, #32]
}
 8007954:	bf00      	nop
 8007956:	371c      	adds	r7, #28
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr
 8007960:	40012c00 	.word	0x40012c00
 8007964:	40013400 	.word	0x40013400
 8007968:	40014000 	.word	0x40014000
 800796c:	40014400 	.word	0x40014400
 8007970:	40014800 	.word	0x40014800
 8007974:	40015000 	.word	0x40015000

08007978 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007978:	b480      	push	{r7}
 800797a:	b087      	sub	sp, #28
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a1b      	ldr	r3, [r3, #32]
 800798c:	f023 0210 	bic.w	r2, r3, #16
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80079a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	021b      	lsls	r3, r3, #8
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	4313      	orrs	r3, r2
 80079be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	f023 0320 	bic.w	r3, r3, #32
 80079c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	011b      	lsls	r3, r3, #4
 80079ce:	697a      	ldr	r2, [r7, #20]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a2c      	ldr	r2, [pc, #176]	@ (8007a88 <TIM_OC2_SetConfig+0x110>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d007      	beq.n	80079ec <TIM_OC2_SetConfig+0x74>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a2b      	ldr	r2, [pc, #172]	@ (8007a8c <TIM_OC2_SetConfig+0x114>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d003      	beq.n	80079ec <TIM_OC2_SetConfig+0x74>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a2a      	ldr	r2, [pc, #168]	@ (8007a90 <TIM_OC2_SetConfig+0x118>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d10d      	bne.n	8007a08 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	011b      	lsls	r3, r3, #4
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a1f      	ldr	r2, [pc, #124]	@ (8007a88 <TIM_OC2_SetConfig+0x110>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d013      	beq.n	8007a38 <TIM_OC2_SetConfig+0xc0>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a1e      	ldr	r2, [pc, #120]	@ (8007a8c <TIM_OC2_SetConfig+0x114>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d00f      	beq.n	8007a38 <TIM_OC2_SetConfig+0xc0>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a1e      	ldr	r2, [pc, #120]	@ (8007a94 <TIM_OC2_SetConfig+0x11c>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d00b      	beq.n	8007a38 <TIM_OC2_SetConfig+0xc0>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a1d      	ldr	r2, [pc, #116]	@ (8007a98 <TIM_OC2_SetConfig+0x120>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d007      	beq.n	8007a38 <TIM_OC2_SetConfig+0xc0>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a1c      	ldr	r2, [pc, #112]	@ (8007a9c <TIM_OC2_SetConfig+0x124>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d003      	beq.n	8007a38 <TIM_OC2_SetConfig+0xc0>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a17      	ldr	r2, [pc, #92]	@ (8007a90 <TIM_OC2_SetConfig+0x118>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d113      	bne.n	8007a60 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007a3e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007a46:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	695b      	ldr	r3, [r3, #20]
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	699b      	ldr	r3, [r3, #24]
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	693a      	ldr	r2, [r7, #16]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	693a      	ldr	r2, [r7, #16]
 8007a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	685a      	ldr	r2, [r3, #4]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	621a      	str	r2, [r3, #32]
}
 8007a7a:	bf00      	nop
 8007a7c:	371c      	adds	r7, #28
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	40012c00 	.word	0x40012c00
 8007a8c:	40013400 	.word	0x40013400
 8007a90:	40015000 	.word	0x40015000
 8007a94:	40014000 	.word	0x40014000
 8007a98:	40014400 	.word	0x40014400
 8007a9c:	40014800 	.word	0x40014800

08007aa0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b087      	sub	sp, #28
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a1b      	ldr	r3, [r3, #32]
 8007ab4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	69db      	ldr	r3, [r3, #28]
 8007ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ace:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f023 0303 	bic.w	r3, r3, #3
 8007ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007aec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	021b      	lsls	r3, r3, #8
 8007af4:	697a      	ldr	r2, [r7, #20]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a2b      	ldr	r2, [pc, #172]	@ (8007bac <TIM_OC3_SetConfig+0x10c>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d007      	beq.n	8007b12 <TIM_OC3_SetConfig+0x72>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a2a      	ldr	r2, [pc, #168]	@ (8007bb0 <TIM_OC3_SetConfig+0x110>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d003      	beq.n	8007b12 <TIM_OC3_SetConfig+0x72>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a29      	ldr	r2, [pc, #164]	@ (8007bb4 <TIM_OC3_SetConfig+0x114>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d10d      	bne.n	8007b2e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007b18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	021b      	lsls	r3, r3, #8
 8007b20:	697a      	ldr	r2, [r7, #20]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007b2c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a1e      	ldr	r2, [pc, #120]	@ (8007bac <TIM_OC3_SetConfig+0x10c>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d013      	beq.n	8007b5e <TIM_OC3_SetConfig+0xbe>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a1d      	ldr	r2, [pc, #116]	@ (8007bb0 <TIM_OC3_SetConfig+0x110>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d00f      	beq.n	8007b5e <TIM_OC3_SetConfig+0xbe>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a1d      	ldr	r2, [pc, #116]	@ (8007bb8 <TIM_OC3_SetConfig+0x118>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d00b      	beq.n	8007b5e <TIM_OC3_SetConfig+0xbe>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a1c      	ldr	r2, [pc, #112]	@ (8007bbc <TIM_OC3_SetConfig+0x11c>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d007      	beq.n	8007b5e <TIM_OC3_SetConfig+0xbe>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a1b      	ldr	r2, [pc, #108]	@ (8007bc0 <TIM_OC3_SetConfig+0x120>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d003      	beq.n	8007b5e <TIM_OC3_SetConfig+0xbe>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a16      	ldr	r2, [pc, #88]	@ (8007bb4 <TIM_OC3_SetConfig+0x114>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d113      	bne.n	8007b86 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	011b      	lsls	r3, r3, #4
 8007b74:	693a      	ldr	r2, [r7, #16]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	699b      	ldr	r3, [r3, #24]
 8007b7e:	011b      	lsls	r3, r3, #4
 8007b80:	693a      	ldr	r2, [r7, #16]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	693a      	ldr	r2, [r7, #16]
 8007b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	685a      	ldr	r2, [r3, #4]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	621a      	str	r2, [r3, #32]
}
 8007ba0:	bf00      	nop
 8007ba2:	371c      	adds	r7, #28
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr
 8007bac:	40012c00 	.word	0x40012c00
 8007bb0:	40013400 	.word	0x40013400
 8007bb4:	40015000 	.word	0x40015000
 8007bb8:	40014000 	.word	0x40014000
 8007bbc:	40014400 	.word	0x40014400
 8007bc0:	40014800 	.word	0x40014800

08007bc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b087      	sub	sp, #28
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6a1b      	ldr	r3, [r3, #32]
 8007bd8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	69db      	ldr	r3, [r3, #28]
 8007bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007bf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	021b      	lsls	r3, r3, #8
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007c12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	031b      	lsls	r3, r3, #12
 8007c1a:	693a      	ldr	r2, [r7, #16]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4a1a      	ldr	r2, [pc, #104]	@ (8007c8c <TIM_OC4_SetConfig+0xc8>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d013      	beq.n	8007c50 <TIM_OC4_SetConfig+0x8c>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4a19      	ldr	r2, [pc, #100]	@ (8007c90 <TIM_OC4_SetConfig+0xcc>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d00f      	beq.n	8007c50 <TIM_OC4_SetConfig+0x8c>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4a18      	ldr	r2, [pc, #96]	@ (8007c94 <TIM_OC4_SetConfig+0xd0>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d00b      	beq.n	8007c50 <TIM_OC4_SetConfig+0x8c>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4a17      	ldr	r2, [pc, #92]	@ (8007c98 <TIM_OC4_SetConfig+0xd4>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d007      	beq.n	8007c50 <TIM_OC4_SetConfig+0x8c>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4a16      	ldr	r2, [pc, #88]	@ (8007c9c <TIM_OC4_SetConfig+0xd8>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d003      	beq.n	8007c50 <TIM_OC4_SetConfig+0x8c>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4a15      	ldr	r2, [pc, #84]	@ (8007ca0 <TIM_OC4_SetConfig+0xdc>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d109      	bne.n	8007c64 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	695b      	ldr	r3, [r3, #20]
 8007c5c:	019b      	lsls	r3, r3, #6
 8007c5e:	697a      	ldr	r2, [r7, #20]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	697a      	ldr	r2, [r7, #20]
 8007c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	685a      	ldr	r2, [r3, #4]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	693a      	ldr	r2, [r7, #16]
 8007c7c:	621a      	str	r2, [r3, #32]
}
 8007c7e:	bf00      	nop
 8007c80:	371c      	adds	r7, #28
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	40012c00 	.word	0x40012c00
 8007c90:	40013400 	.word	0x40013400
 8007c94:	40014000 	.word	0x40014000
 8007c98:	40014400 	.word	0x40014400
 8007c9c:	40014800 	.word	0x40014800
 8007ca0:	40015000 	.word	0x40015000

08007ca4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b087      	sub	sp, #28
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a1b      	ldr	r3, [r3, #32]
 8007cb8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007ce8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	041b      	lsls	r3, r3, #16
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a19      	ldr	r2, [pc, #100]	@ (8007d60 <TIM_OC5_SetConfig+0xbc>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d013      	beq.n	8007d26 <TIM_OC5_SetConfig+0x82>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a18      	ldr	r2, [pc, #96]	@ (8007d64 <TIM_OC5_SetConfig+0xc0>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d00f      	beq.n	8007d26 <TIM_OC5_SetConfig+0x82>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a17      	ldr	r2, [pc, #92]	@ (8007d68 <TIM_OC5_SetConfig+0xc4>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d00b      	beq.n	8007d26 <TIM_OC5_SetConfig+0x82>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4a16      	ldr	r2, [pc, #88]	@ (8007d6c <TIM_OC5_SetConfig+0xc8>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d007      	beq.n	8007d26 <TIM_OC5_SetConfig+0x82>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4a15      	ldr	r2, [pc, #84]	@ (8007d70 <TIM_OC5_SetConfig+0xcc>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d003      	beq.n	8007d26 <TIM_OC5_SetConfig+0x82>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4a14      	ldr	r2, [pc, #80]	@ (8007d74 <TIM_OC5_SetConfig+0xd0>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d109      	bne.n	8007d3a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	695b      	ldr	r3, [r3, #20]
 8007d32:	021b      	lsls	r3, r3, #8
 8007d34:	697a      	ldr	r2, [r7, #20]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	685a      	ldr	r2, [r3, #4]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	693a      	ldr	r2, [r7, #16]
 8007d52:	621a      	str	r2, [r3, #32]
}
 8007d54:	bf00      	nop
 8007d56:	371c      	adds	r7, #28
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr
 8007d60:	40012c00 	.word	0x40012c00
 8007d64:	40013400 	.word	0x40013400
 8007d68:	40014000 	.word	0x40014000
 8007d6c:	40014400 	.word	0x40014400
 8007d70:	40014800 	.word	0x40014800
 8007d74:	40015000 	.word	0x40015000

08007d78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b087      	sub	sp, #28
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a1b      	ldr	r3, [r3, #32]
 8007d86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6a1b      	ldr	r3, [r3, #32]
 8007d8c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007da6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	021b      	lsls	r3, r3, #8
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007dbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	051b      	lsls	r3, r3, #20
 8007dc6:	693a      	ldr	r2, [r7, #16]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4a1a      	ldr	r2, [pc, #104]	@ (8007e38 <TIM_OC6_SetConfig+0xc0>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d013      	beq.n	8007dfc <TIM_OC6_SetConfig+0x84>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4a19      	ldr	r2, [pc, #100]	@ (8007e3c <TIM_OC6_SetConfig+0xc4>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d00f      	beq.n	8007dfc <TIM_OC6_SetConfig+0x84>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4a18      	ldr	r2, [pc, #96]	@ (8007e40 <TIM_OC6_SetConfig+0xc8>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d00b      	beq.n	8007dfc <TIM_OC6_SetConfig+0x84>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a17      	ldr	r2, [pc, #92]	@ (8007e44 <TIM_OC6_SetConfig+0xcc>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d007      	beq.n	8007dfc <TIM_OC6_SetConfig+0x84>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4a16      	ldr	r2, [pc, #88]	@ (8007e48 <TIM_OC6_SetConfig+0xd0>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d003      	beq.n	8007dfc <TIM_OC6_SetConfig+0x84>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a15      	ldr	r2, [pc, #84]	@ (8007e4c <TIM_OC6_SetConfig+0xd4>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d109      	bne.n	8007e10 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007e02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	695b      	ldr	r3, [r3, #20]
 8007e08:	029b      	lsls	r3, r3, #10
 8007e0a:	697a      	ldr	r2, [r7, #20]
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	697a      	ldr	r2, [r7, #20]
 8007e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	685a      	ldr	r2, [r3, #4]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	693a      	ldr	r2, [r7, #16]
 8007e28:	621a      	str	r2, [r3, #32]
}
 8007e2a:	bf00      	nop
 8007e2c:	371c      	adds	r7, #28
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	40012c00 	.word	0x40012c00
 8007e3c:	40013400 	.word	0x40013400
 8007e40:	40014000 	.word	0x40014000
 8007e44:	40014400 	.word	0x40014400
 8007e48:	40014800 	.word	0x40014800
 8007e4c:	40015000 	.word	0x40015000

08007e50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b087      	sub	sp, #28
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	f003 031f 	and.w	r3, r3, #31
 8007e62:	2201      	movs	r2, #1
 8007e64:	fa02 f303 	lsl.w	r3, r2, r3
 8007e68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6a1a      	ldr	r2, [r3, #32]
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	43db      	mvns	r3, r3
 8007e72:	401a      	ands	r2, r3
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6a1a      	ldr	r2, [r3, #32]
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	f003 031f 	and.w	r3, r3, #31
 8007e82:	6879      	ldr	r1, [r7, #4]
 8007e84:	fa01 f303 	lsl.w	r3, r1, r3
 8007e88:	431a      	orrs	r2, r3
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	621a      	str	r2, [r3, #32]
}
 8007e8e:	bf00      	nop
 8007e90:	371c      	adds	r7, #28
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
	...

08007e9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d101      	bne.n	8007eb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	e06d      	b.n	8007f90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2202      	movs	r2, #2
 8007ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a30      	ldr	r2, [pc, #192]	@ (8007f9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d009      	beq.n	8007ef2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a2f      	ldr	r2, [pc, #188]	@ (8007fa0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d004      	beq.n	8007ef2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a2d      	ldr	r2, [pc, #180]	@ (8007fa4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d108      	bne.n	8007f04 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007ef8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a1e      	ldr	r2, [pc, #120]	@ (8007f9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d01d      	beq.n	8007f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f30:	d018      	beq.n	8007f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a1c      	ldr	r2, [pc, #112]	@ (8007fa8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d013      	beq.n	8007f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a1a      	ldr	r2, [pc, #104]	@ (8007fac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d00e      	beq.n	8007f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a15      	ldr	r2, [pc, #84]	@ (8007fa0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d009      	beq.n	8007f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a16      	ldr	r2, [pc, #88]	@ (8007fb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d004      	beq.n	8007f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a11      	ldr	r2, [pc, #68]	@ (8007fa4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d10c      	bne.n	8007f7e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	68ba      	ldr	r2, [r7, #8]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68ba      	ldr	r2, [r7, #8]
 8007f7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3714      	adds	r7, #20
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr
 8007f9c:	40012c00 	.word	0x40012c00
 8007fa0:	40013400 	.word	0x40013400
 8007fa4:	40015000 	.word	0x40015000
 8007fa8:	40000400 	.word	0x40000400
 8007fac:	40000800 	.word	0x40000800
 8007fb0:	40014000 	.word	0x40014000

08007fb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d101      	bne.n	8008002 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e040      	b.n	8008084 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008006:	2b00      	cmp	r3, #0
 8008008:	d106      	bne.n	8008018 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7fa fcc8 	bl	80029a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2224      	movs	r2, #36	@ 0x24
 800801c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f022 0201 	bic.w	r2, r2, #1
 800802c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008032:	2b00      	cmp	r3, #0
 8008034:	d002      	beq.n	800803c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 fa86 	bl	8008548 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 f8af 	bl	80081a0 <UART_SetConfig>
 8008042:	4603      	mov	r3, r0
 8008044:	2b01      	cmp	r3, #1
 8008046:	d101      	bne.n	800804c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	e01b      	b.n	8008084 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	685a      	ldr	r2, [r3, #4]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800805a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	689a      	ldr	r2, [r3, #8]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800806a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f042 0201 	orr.w	r2, r2, #1
 800807a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fb05 	bl	800868c <UART_CheckIdleState>
 8008082:	4603      	mov	r3, r0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3708      	adds	r7, #8
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b08a      	sub	sp, #40	@ 0x28
 8008090:	af02      	add	r7, sp, #8
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	603b      	str	r3, [r7, #0]
 8008098:	4613      	mov	r3, r2
 800809a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080a0:	2b20      	cmp	r3, #32
 80080a2:	d177      	bne.n	8008194 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d002      	beq.n	80080b0 <HAL_UART_Transmit+0x24>
 80080aa:	88fb      	ldrh	r3, [r7, #6]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d101      	bne.n	80080b4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	e070      	b.n	8008196 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2221      	movs	r2, #33	@ 0x21
 80080c0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80080c2:	f7fa fd07 	bl	8002ad4 <HAL_GetTick>
 80080c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	88fa      	ldrh	r2, [r7, #6]
 80080cc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	88fa      	ldrh	r2, [r7, #6]
 80080d4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080e0:	d108      	bne.n	80080f4 <HAL_UART_Transmit+0x68>
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d104      	bne.n	80080f4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80080ea:	2300      	movs	r3, #0
 80080ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	61bb      	str	r3, [r7, #24]
 80080f2:	e003      	b.n	80080fc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80080f8:	2300      	movs	r3, #0
 80080fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80080fc:	e02f      	b.n	800815e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	2200      	movs	r2, #0
 8008106:	2180      	movs	r1, #128	@ 0x80
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f000 fb67 	bl	80087dc <UART_WaitOnFlagUntilTimeout>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d004      	beq.n	800811e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2220      	movs	r2, #32
 8008118:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800811a:	2303      	movs	r3, #3
 800811c:	e03b      	b.n	8008196 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10b      	bne.n	800813c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	881a      	ldrh	r2, [r3, #0]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008130:	b292      	uxth	r2, r2
 8008132:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	3302      	adds	r3, #2
 8008138:	61bb      	str	r3, [r7, #24]
 800813a:	e007      	b.n	800814c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	781a      	ldrb	r2, [r3, #0]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	3301      	adds	r3, #1
 800814a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008152:	b29b      	uxth	r3, r3
 8008154:	3b01      	subs	r3, #1
 8008156:	b29a      	uxth	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008164:	b29b      	uxth	r3, r3
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1c9      	bne.n	80080fe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	2200      	movs	r2, #0
 8008172:	2140      	movs	r1, #64	@ 0x40
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f000 fb31 	bl	80087dc <UART_WaitOnFlagUntilTimeout>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d004      	beq.n	800818a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2220      	movs	r2, #32
 8008184:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008186:	2303      	movs	r3, #3
 8008188:	e005      	b.n	8008196 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2220      	movs	r2, #32
 800818e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008190:	2300      	movs	r3, #0
 8008192:	e000      	b.n	8008196 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008194:	2302      	movs	r3, #2
  }
}
 8008196:	4618      	mov	r0, r3
 8008198:	3720      	adds	r7, #32
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
	...

080081a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b088      	sub	sp, #32
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	689a      	ldr	r2, [r3, #8]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	431a      	orrs	r2, r3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	695b      	ldr	r3, [r3, #20]
 80081ba:	431a      	orrs	r2, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	69db      	ldr	r3, [r3, #28]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	4b92      	ldr	r3, [pc, #584]	@ (8008414 <UART_SetConfig+0x274>)
 80081cc:	4013      	ands	r3, r2
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	6812      	ldr	r2, [r2, #0]
 80081d2:	6979      	ldr	r1, [r7, #20]
 80081d4:	430b      	orrs	r3, r1
 80081d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	68da      	ldr	r2, [r3, #12]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	430a      	orrs	r2, r1
 80081ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6a1b      	ldr	r3, [r3, #32]
 80081f8:	697a      	ldr	r2, [r7, #20]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	697a      	ldr	r2, [r7, #20]
 800820e:	430a      	orrs	r2, r1
 8008210:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a80      	ldr	r2, [pc, #512]	@ (8008418 <UART_SetConfig+0x278>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d120      	bne.n	800825e <UART_SetConfig+0xbe>
 800821c:	4b7f      	ldr	r3, [pc, #508]	@ (800841c <UART_SetConfig+0x27c>)
 800821e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008220:	f003 0303 	and.w	r3, r3, #3
 8008224:	2b03      	cmp	r3, #3
 8008226:	d817      	bhi.n	8008258 <UART_SetConfig+0xb8>
 8008228:	a201      	add	r2, pc, #4	@ (adr r2, 8008230 <UART_SetConfig+0x90>)
 800822a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822e:	bf00      	nop
 8008230:	08008241 	.word	0x08008241
 8008234:	0800824d 	.word	0x0800824d
 8008238:	08008253 	.word	0x08008253
 800823c:	08008247 	.word	0x08008247
 8008240:	2301      	movs	r3, #1
 8008242:	77fb      	strb	r3, [r7, #31]
 8008244:	e0b5      	b.n	80083b2 <UART_SetConfig+0x212>
 8008246:	2302      	movs	r3, #2
 8008248:	77fb      	strb	r3, [r7, #31]
 800824a:	e0b2      	b.n	80083b2 <UART_SetConfig+0x212>
 800824c:	2304      	movs	r3, #4
 800824e:	77fb      	strb	r3, [r7, #31]
 8008250:	e0af      	b.n	80083b2 <UART_SetConfig+0x212>
 8008252:	2308      	movs	r3, #8
 8008254:	77fb      	strb	r3, [r7, #31]
 8008256:	e0ac      	b.n	80083b2 <UART_SetConfig+0x212>
 8008258:	2310      	movs	r3, #16
 800825a:	77fb      	strb	r3, [r7, #31]
 800825c:	e0a9      	b.n	80083b2 <UART_SetConfig+0x212>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a6f      	ldr	r2, [pc, #444]	@ (8008420 <UART_SetConfig+0x280>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d124      	bne.n	80082b2 <UART_SetConfig+0x112>
 8008268:	4b6c      	ldr	r3, [pc, #432]	@ (800841c <UART_SetConfig+0x27c>)
 800826a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800826c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008270:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008274:	d011      	beq.n	800829a <UART_SetConfig+0xfa>
 8008276:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800827a:	d817      	bhi.n	80082ac <UART_SetConfig+0x10c>
 800827c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008280:	d011      	beq.n	80082a6 <UART_SetConfig+0x106>
 8008282:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008286:	d811      	bhi.n	80082ac <UART_SetConfig+0x10c>
 8008288:	2b00      	cmp	r3, #0
 800828a:	d003      	beq.n	8008294 <UART_SetConfig+0xf4>
 800828c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008290:	d006      	beq.n	80082a0 <UART_SetConfig+0x100>
 8008292:	e00b      	b.n	80082ac <UART_SetConfig+0x10c>
 8008294:	2300      	movs	r3, #0
 8008296:	77fb      	strb	r3, [r7, #31]
 8008298:	e08b      	b.n	80083b2 <UART_SetConfig+0x212>
 800829a:	2302      	movs	r3, #2
 800829c:	77fb      	strb	r3, [r7, #31]
 800829e:	e088      	b.n	80083b2 <UART_SetConfig+0x212>
 80082a0:	2304      	movs	r3, #4
 80082a2:	77fb      	strb	r3, [r7, #31]
 80082a4:	e085      	b.n	80083b2 <UART_SetConfig+0x212>
 80082a6:	2308      	movs	r3, #8
 80082a8:	77fb      	strb	r3, [r7, #31]
 80082aa:	e082      	b.n	80083b2 <UART_SetConfig+0x212>
 80082ac:	2310      	movs	r3, #16
 80082ae:	77fb      	strb	r3, [r7, #31]
 80082b0:	e07f      	b.n	80083b2 <UART_SetConfig+0x212>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a5b      	ldr	r2, [pc, #364]	@ (8008424 <UART_SetConfig+0x284>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d124      	bne.n	8008306 <UART_SetConfig+0x166>
 80082bc:	4b57      	ldr	r3, [pc, #348]	@ (800841c <UART_SetConfig+0x27c>)
 80082be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082c0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80082c4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80082c8:	d011      	beq.n	80082ee <UART_SetConfig+0x14e>
 80082ca:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80082ce:	d817      	bhi.n	8008300 <UART_SetConfig+0x160>
 80082d0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80082d4:	d011      	beq.n	80082fa <UART_SetConfig+0x15a>
 80082d6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80082da:	d811      	bhi.n	8008300 <UART_SetConfig+0x160>
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d003      	beq.n	80082e8 <UART_SetConfig+0x148>
 80082e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80082e4:	d006      	beq.n	80082f4 <UART_SetConfig+0x154>
 80082e6:	e00b      	b.n	8008300 <UART_SetConfig+0x160>
 80082e8:	2300      	movs	r3, #0
 80082ea:	77fb      	strb	r3, [r7, #31]
 80082ec:	e061      	b.n	80083b2 <UART_SetConfig+0x212>
 80082ee:	2302      	movs	r3, #2
 80082f0:	77fb      	strb	r3, [r7, #31]
 80082f2:	e05e      	b.n	80083b2 <UART_SetConfig+0x212>
 80082f4:	2304      	movs	r3, #4
 80082f6:	77fb      	strb	r3, [r7, #31]
 80082f8:	e05b      	b.n	80083b2 <UART_SetConfig+0x212>
 80082fa:	2308      	movs	r3, #8
 80082fc:	77fb      	strb	r3, [r7, #31]
 80082fe:	e058      	b.n	80083b2 <UART_SetConfig+0x212>
 8008300:	2310      	movs	r3, #16
 8008302:	77fb      	strb	r3, [r7, #31]
 8008304:	e055      	b.n	80083b2 <UART_SetConfig+0x212>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a47      	ldr	r2, [pc, #284]	@ (8008428 <UART_SetConfig+0x288>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d124      	bne.n	800835a <UART_SetConfig+0x1ba>
 8008310:	4b42      	ldr	r3, [pc, #264]	@ (800841c <UART_SetConfig+0x27c>)
 8008312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008314:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008318:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800831c:	d011      	beq.n	8008342 <UART_SetConfig+0x1a2>
 800831e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008322:	d817      	bhi.n	8008354 <UART_SetConfig+0x1b4>
 8008324:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008328:	d011      	beq.n	800834e <UART_SetConfig+0x1ae>
 800832a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800832e:	d811      	bhi.n	8008354 <UART_SetConfig+0x1b4>
 8008330:	2b00      	cmp	r3, #0
 8008332:	d003      	beq.n	800833c <UART_SetConfig+0x19c>
 8008334:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008338:	d006      	beq.n	8008348 <UART_SetConfig+0x1a8>
 800833a:	e00b      	b.n	8008354 <UART_SetConfig+0x1b4>
 800833c:	2300      	movs	r3, #0
 800833e:	77fb      	strb	r3, [r7, #31]
 8008340:	e037      	b.n	80083b2 <UART_SetConfig+0x212>
 8008342:	2302      	movs	r3, #2
 8008344:	77fb      	strb	r3, [r7, #31]
 8008346:	e034      	b.n	80083b2 <UART_SetConfig+0x212>
 8008348:	2304      	movs	r3, #4
 800834a:	77fb      	strb	r3, [r7, #31]
 800834c:	e031      	b.n	80083b2 <UART_SetConfig+0x212>
 800834e:	2308      	movs	r3, #8
 8008350:	77fb      	strb	r3, [r7, #31]
 8008352:	e02e      	b.n	80083b2 <UART_SetConfig+0x212>
 8008354:	2310      	movs	r3, #16
 8008356:	77fb      	strb	r3, [r7, #31]
 8008358:	e02b      	b.n	80083b2 <UART_SetConfig+0x212>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a33      	ldr	r2, [pc, #204]	@ (800842c <UART_SetConfig+0x28c>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d124      	bne.n	80083ae <UART_SetConfig+0x20e>
 8008364:	4b2d      	ldr	r3, [pc, #180]	@ (800841c <UART_SetConfig+0x27c>)
 8008366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008368:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800836c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008370:	d011      	beq.n	8008396 <UART_SetConfig+0x1f6>
 8008372:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008376:	d817      	bhi.n	80083a8 <UART_SetConfig+0x208>
 8008378:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800837c:	d011      	beq.n	80083a2 <UART_SetConfig+0x202>
 800837e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008382:	d811      	bhi.n	80083a8 <UART_SetConfig+0x208>
 8008384:	2b00      	cmp	r3, #0
 8008386:	d003      	beq.n	8008390 <UART_SetConfig+0x1f0>
 8008388:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800838c:	d006      	beq.n	800839c <UART_SetConfig+0x1fc>
 800838e:	e00b      	b.n	80083a8 <UART_SetConfig+0x208>
 8008390:	2300      	movs	r3, #0
 8008392:	77fb      	strb	r3, [r7, #31]
 8008394:	e00d      	b.n	80083b2 <UART_SetConfig+0x212>
 8008396:	2302      	movs	r3, #2
 8008398:	77fb      	strb	r3, [r7, #31]
 800839a:	e00a      	b.n	80083b2 <UART_SetConfig+0x212>
 800839c:	2304      	movs	r3, #4
 800839e:	77fb      	strb	r3, [r7, #31]
 80083a0:	e007      	b.n	80083b2 <UART_SetConfig+0x212>
 80083a2:	2308      	movs	r3, #8
 80083a4:	77fb      	strb	r3, [r7, #31]
 80083a6:	e004      	b.n	80083b2 <UART_SetConfig+0x212>
 80083a8:	2310      	movs	r3, #16
 80083aa:	77fb      	strb	r3, [r7, #31]
 80083ac:	e001      	b.n	80083b2 <UART_SetConfig+0x212>
 80083ae:	2310      	movs	r3, #16
 80083b0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	69db      	ldr	r3, [r3, #28]
 80083b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083ba:	d16b      	bne.n	8008494 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80083bc:	7ffb      	ldrb	r3, [r7, #31]
 80083be:	2b08      	cmp	r3, #8
 80083c0:	d838      	bhi.n	8008434 <UART_SetConfig+0x294>
 80083c2:	a201      	add	r2, pc, #4	@ (adr r2, 80083c8 <UART_SetConfig+0x228>)
 80083c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c8:	080083ed 	.word	0x080083ed
 80083cc:	080083f5 	.word	0x080083f5
 80083d0:	080083fd 	.word	0x080083fd
 80083d4:	08008435 	.word	0x08008435
 80083d8:	08008403 	.word	0x08008403
 80083dc:	08008435 	.word	0x08008435
 80083e0:	08008435 	.word	0x08008435
 80083e4:	08008435 	.word	0x08008435
 80083e8:	0800840b 	.word	0x0800840b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083ec:	f7fe fa78 	bl	80068e0 <HAL_RCC_GetPCLK1Freq>
 80083f0:	61b8      	str	r0, [r7, #24]
        break;
 80083f2:	e024      	b.n	800843e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083f4:	f7fe fa96 	bl	8006924 <HAL_RCC_GetPCLK2Freq>
 80083f8:	61b8      	str	r0, [r7, #24]
        break;
 80083fa:	e020      	b.n	800843e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083fc:	4b0c      	ldr	r3, [pc, #48]	@ (8008430 <UART_SetConfig+0x290>)
 80083fe:	61bb      	str	r3, [r7, #24]
        break;
 8008400:	e01d      	b.n	800843e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008402:	f7fe fa0d 	bl	8006820 <HAL_RCC_GetSysClockFreq>
 8008406:	61b8      	str	r0, [r7, #24]
        break;
 8008408:	e019      	b.n	800843e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800840a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800840e:	61bb      	str	r3, [r7, #24]
        break;
 8008410:	e015      	b.n	800843e <UART_SetConfig+0x29e>
 8008412:	bf00      	nop
 8008414:	efff69f3 	.word	0xefff69f3
 8008418:	40013800 	.word	0x40013800
 800841c:	40021000 	.word	0x40021000
 8008420:	40004400 	.word	0x40004400
 8008424:	40004800 	.word	0x40004800
 8008428:	40004c00 	.word	0x40004c00
 800842c:	40005000 	.word	0x40005000
 8008430:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8008434:	2300      	movs	r3, #0
 8008436:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	77bb      	strb	r3, [r7, #30]
        break;
 800843c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d073      	beq.n	800852c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	005a      	lsls	r2, r3, #1
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	085b      	lsrs	r3, r3, #1
 800844e:	441a      	add	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	fbb2 f3f3 	udiv	r3, r2, r3
 8008458:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	2b0f      	cmp	r3, #15
 800845e:	d916      	bls.n	800848e <UART_SetConfig+0x2ee>
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008466:	d212      	bcs.n	800848e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	b29b      	uxth	r3, r3
 800846c:	f023 030f 	bic.w	r3, r3, #15
 8008470:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	085b      	lsrs	r3, r3, #1
 8008476:	b29b      	uxth	r3, r3
 8008478:	f003 0307 	and.w	r3, r3, #7
 800847c:	b29a      	uxth	r2, r3
 800847e:	89fb      	ldrh	r3, [r7, #14]
 8008480:	4313      	orrs	r3, r2
 8008482:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	89fa      	ldrh	r2, [r7, #14]
 800848a:	60da      	str	r2, [r3, #12]
 800848c:	e04e      	b.n	800852c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	77bb      	strb	r3, [r7, #30]
 8008492:	e04b      	b.n	800852c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008494:	7ffb      	ldrb	r3, [r7, #31]
 8008496:	2b08      	cmp	r3, #8
 8008498:	d827      	bhi.n	80084ea <UART_SetConfig+0x34a>
 800849a:	a201      	add	r2, pc, #4	@ (adr r2, 80084a0 <UART_SetConfig+0x300>)
 800849c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a0:	080084c5 	.word	0x080084c5
 80084a4:	080084cd 	.word	0x080084cd
 80084a8:	080084d5 	.word	0x080084d5
 80084ac:	080084eb 	.word	0x080084eb
 80084b0:	080084db 	.word	0x080084db
 80084b4:	080084eb 	.word	0x080084eb
 80084b8:	080084eb 	.word	0x080084eb
 80084bc:	080084eb 	.word	0x080084eb
 80084c0:	080084e3 	.word	0x080084e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084c4:	f7fe fa0c 	bl	80068e0 <HAL_RCC_GetPCLK1Freq>
 80084c8:	61b8      	str	r0, [r7, #24]
        break;
 80084ca:	e013      	b.n	80084f4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084cc:	f7fe fa2a 	bl	8006924 <HAL_RCC_GetPCLK2Freq>
 80084d0:	61b8      	str	r0, [r7, #24]
        break;
 80084d2:	e00f      	b.n	80084f4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084d4:	4b1b      	ldr	r3, [pc, #108]	@ (8008544 <UART_SetConfig+0x3a4>)
 80084d6:	61bb      	str	r3, [r7, #24]
        break;
 80084d8:	e00c      	b.n	80084f4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084da:	f7fe f9a1 	bl	8006820 <HAL_RCC_GetSysClockFreq>
 80084de:	61b8      	str	r0, [r7, #24]
        break;
 80084e0:	e008      	b.n	80084f4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084e6:	61bb      	str	r3, [r7, #24]
        break;
 80084e8:	e004      	b.n	80084f4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80084ea:	2300      	movs	r3, #0
 80084ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	77bb      	strb	r3, [r7, #30]
        break;
 80084f2:	bf00      	nop
    }

    if (pclk != 0U)
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d018      	beq.n	800852c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	085a      	lsrs	r2, r3, #1
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	441a      	add	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	fbb2 f3f3 	udiv	r3, r2, r3
 800850c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	2b0f      	cmp	r3, #15
 8008512:	d909      	bls.n	8008528 <UART_SetConfig+0x388>
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800851a:	d205      	bcs.n	8008528 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	b29a      	uxth	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	60da      	str	r2, [r3, #12]
 8008526:	e001      	b.n	800852c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008538:	7fbb      	ldrb	r3, [r7, #30]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3720      	adds	r7, #32
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	007a1200 	.word	0x007a1200

08008548 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008554:	f003 0308 	and.w	r3, r3, #8
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00a      	beq.n	8008572 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	430a      	orrs	r2, r1
 8008570:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008576:	f003 0301 	and.w	r3, r3, #1
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00a      	beq.n	8008594 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	430a      	orrs	r2, r1
 8008592:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008598:	f003 0302 	and.w	r3, r3, #2
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00a      	beq.n	80085b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	430a      	orrs	r2, r1
 80085b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ba:	f003 0304 	and.w	r3, r3, #4
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00a      	beq.n	80085d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	430a      	orrs	r2, r1
 80085d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085dc:	f003 0310 	and.w	r3, r3, #16
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00a      	beq.n	80085fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	430a      	orrs	r2, r1
 80085f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085fe:	f003 0320 	and.w	r3, r3, #32
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00a      	beq.n	800861c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	430a      	orrs	r2, r1
 800861a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008624:	2b00      	cmp	r3, #0
 8008626:	d01a      	beq.n	800865e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	430a      	orrs	r2, r1
 800863c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008642:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008646:	d10a      	bne.n	800865e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	430a      	orrs	r2, r1
 800865c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00a      	beq.n	8008680 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	430a      	orrs	r2, r1
 800867e:	605a      	str	r2, [r3, #4]
  }
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b098      	sub	sp, #96	@ 0x60
 8008690:	af02      	add	r7, sp, #8
 8008692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800869c:	f7fa fa1a 	bl	8002ad4 <HAL_GetTick>
 80086a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f003 0308 	and.w	r3, r3, #8
 80086ac:	2b08      	cmp	r3, #8
 80086ae:	d12e      	bne.n	800870e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80086b4:	9300      	str	r3, [sp, #0]
 80086b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086b8:	2200      	movs	r2, #0
 80086ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 f88c 	bl	80087dc <UART_WaitOnFlagUntilTimeout>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d021      	beq.n	800870e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d2:	e853 3f00 	ldrex	r3, [r3]
 80086d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80086d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086de:	653b      	str	r3, [r7, #80]	@ 0x50
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	461a      	mov	r2, r3
 80086e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80086ea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80086ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086f0:	e841 2300 	strex	r3, r2, [r1]
 80086f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80086f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1e6      	bne.n	80086ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2220      	movs	r2, #32
 8008700:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800870a:	2303      	movs	r3, #3
 800870c:	e062      	b.n	80087d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 0304 	and.w	r3, r3, #4
 8008718:	2b04      	cmp	r3, #4
 800871a:	d149      	bne.n	80087b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800871c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008720:	9300      	str	r3, [sp, #0]
 8008722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008724:	2200      	movs	r2, #0
 8008726:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f856 	bl	80087dc <UART_WaitOnFlagUntilTimeout>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d03c      	beq.n	80087b0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800873e:	e853 3f00 	ldrex	r3, [r3]
 8008742:	623b      	str	r3, [r7, #32]
   return(result);
 8008744:	6a3b      	ldr	r3, [r7, #32]
 8008746:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800874a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	461a      	mov	r2, r3
 8008752:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008754:	633b      	str	r3, [r7, #48]	@ 0x30
 8008756:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008758:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800875a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800875c:	e841 2300 	strex	r3, r2, [r1]
 8008760:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1e6      	bne.n	8008736 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	3308      	adds	r3, #8
 800876e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	e853 3f00 	ldrex	r3, [r3]
 8008776:	60fb      	str	r3, [r7, #12]
   return(result);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f023 0301 	bic.w	r3, r3, #1
 800877e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	3308      	adds	r3, #8
 8008786:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008788:	61fa      	str	r2, [r7, #28]
 800878a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878c:	69b9      	ldr	r1, [r7, #24]
 800878e:	69fa      	ldr	r2, [r7, #28]
 8008790:	e841 2300 	strex	r3, r2, [r1]
 8008794:	617b      	str	r3, [r7, #20]
   return(result);
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1e5      	bne.n	8008768 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2220      	movs	r2, #32
 80087a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087ac:	2303      	movs	r3, #3
 80087ae:	e011      	b.n	80087d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2220      	movs	r2, #32
 80087b4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2220      	movs	r2, #32
 80087ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3758      	adds	r7, #88	@ 0x58
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	603b      	str	r3, [r7, #0]
 80087e8:	4613      	mov	r3, r2
 80087ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087ec:	e04f      	b.n	800888e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087f4:	d04b      	beq.n	800888e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087f6:	f7fa f96d 	bl	8002ad4 <HAL_GetTick>
 80087fa:	4602      	mov	r2, r0
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	1ad3      	subs	r3, r2, r3
 8008800:	69ba      	ldr	r2, [r7, #24]
 8008802:	429a      	cmp	r2, r3
 8008804:	d302      	bcc.n	800880c <UART_WaitOnFlagUntilTimeout+0x30>
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d101      	bne.n	8008810 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800880c:	2303      	movs	r3, #3
 800880e:	e04e      	b.n	80088ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 0304 	and.w	r3, r3, #4
 800881a:	2b00      	cmp	r3, #0
 800881c:	d037      	beq.n	800888e <UART_WaitOnFlagUntilTimeout+0xb2>
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	2b80      	cmp	r3, #128	@ 0x80
 8008822:	d034      	beq.n	800888e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2b40      	cmp	r3, #64	@ 0x40
 8008828:	d031      	beq.n	800888e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	69db      	ldr	r3, [r3, #28]
 8008830:	f003 0308 	and.w	r3, r3, #8
 8008834:	2b08      	cmp	r3, #8
 8008836:	d110      	bne.n	800885a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2208      	movs	r2, #8
 800883e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f000 f838 	bl	80088b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2208      	movs	r2, #8
 800884a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2200      	movs	r2, #0
 8008852:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	e029      	b.n	80088ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	69db      	ldr	r3, [r3, #28]
 8008860:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008864:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008868:	d111      	bne.n	800888e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008872:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f000 f81e 	bl	80088b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2220      	movs	r2, #32
 800887e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800888a:	2303      	movs	r3, #3
 800888c:	e00f      	b.n	80088ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	69da      	ldr	r2, [r3, #28]
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	4013      	ands	r3, r2
 8008898:	68ba      	ldr	r2, [r7, #8]
 800889a:	429a      	cmp	r2, r3
 800889c:	bf0c      	ite	eq
 800889e:	2301      	moveq	r3, #1
 80088a0:	2300      	movne	r3, #0
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	461a      	mov	r2, r3
 80088a6:	79fb      	ldrb	r3, [r7, #7]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d0a0      	beq.n	80087ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088b6:	b480      	push	{r7}
 80088b8:	b095      	sub	sp, #84	@ 0x54
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088c6:	e853 3f00 	ldrex	r3, [r3]
 80088ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80088cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	461a      	mov	r2, r3
 80088da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80088de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80088e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80088e4:	e841 2300 	strex	r3, r2, [r1]
 80088e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80088ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1e6      	bne.n	80088be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	3308      	adds	r3, #8
 80088f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f8:	6a3b      	ldr	r3, [r7, #32]
 80088fa:	e853 3f00 	ldrex	r3, [r3]
 80088fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	f023 0301 	bic.w	r3, r3, #1
 8008906:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	3308      	adds	r3, #8
 800890e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008910:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008912:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008914:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008916:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008918:	e841 2300 	strex	r3, r2, [r1]
 800891c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800891e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008920:	2b00      	cmp	r3, #0
 8008922:	d1e5      	bne.n	80088f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008928:	2b01      	cmp	r3, #1
 800892a:	d118      	bne.n	800895e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	e853 3f00 	ldrex	r3, [r3]
 8008938:	60bb      	str	r3, [r7, #8]
   return(result);
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	f023 0310 	bic.w	r3, r3, #16
 8008940:	647b      	str	r3, [r7, #68]	@ 0x44
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	461a      	mov	r2, r3
 8008948:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800894a:	61bb      	str	r3, [r7, #24]
 800894c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894e:	6979      	ldr	r1, [r7, #20]
 8008950:	69ba      	ldr	r2, [r7, #24]
 8008952:	e841 2300 	strex	r3, r2, [r1]
 8008956:	613b      	str	r3, [r7, #16]
   return(result);
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1e6      	bne.n	800892c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2220      	movs	r2, #32
 8008962:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008972:	bf00      	nop
 8008974:	3754      	adds	r7, #84	@ 0x54
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr
	...

08008980 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008980:	b480      	push	{r7}
 8008982:	b085      	sub	sp, #20
 8008984:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008986:	f3ef 8305 	mrs	r3, IPSR
 800898a:	60bb      	str	r3, [r7, #8]
  return(result);
 800898c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10f      	bne.n	80089b2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008992:	f3ef 8310 	mrs	r3, PRIMASK
 8008996:	607b      	str	r3, [r7, #4]
  return(result);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d109      	bne.n	80089b2 <osKernelInitialize+0x32>
 800899e:	4b11      	ldr	r3, [pc, #68]	@ (80089e4 <osKernelInitialize+0x64>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2b02      	cmp	r3, #2
 80089a4:	d109      	bne.n	80089ba <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80089a6:	f3ef 8311 	mrs	r3, BASEPRI
 80089aa:	603b      	str	r3, [r7, #0]
  return(result);
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d003      	beq.n	80089ba <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80089b2:	f06f 0305 	mvn.w	r3, #5
 80089b6:	60fb      	str	r3, [r7, #12]
 80089b8:	e00c      	b.n	80089d4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80089ba:	4b0a      	ldr	r3, [pc, #40]	@ (80089e4 <osKernelInitialize+0x64>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d105      	bne.n	80089ce <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80089c2:	4b08      	ldr	r3, [pc, #32]	@ (80089e4 <osKernelInitialize+0x64>)
 80089c4:	2201      	movs	r2, #1
 80089c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80089c8:	2300      	movs	r3, #0
 80089ca:	60fb      	str	r3, [r7, #12]
 80089cc:	e002      	b.n	80089d4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80089ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80089d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80089d4:	68fb      	ldr	r3, [r7, #12]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3714      	adds	r7, #20
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	200006a4 	.word	0x200006a4

080089e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089ee:	f3ef 8305 	mrs	r3, IPSR
 80089f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80089f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10f      	bne.n	8008a1a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089fa:	f3ef 8310 	mrs	r3, PRIMASK
 80089fe:	607b      	str	r3, [r7, #4]
  return(result);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d109      	bne.n	8008a1a <osKernelStart+0x32>
 8008a06:	4b11      	ldr	r3, [pc, #68]	@ (8008a4c <osKernelStart+0x64>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	d109      	bne.n	8008a22 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a0e:	f3ef 8311 	mrs	r3, BASEPRI
 8008a12:	603b      	str	r3, [r7, #0]
  return(result);
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d003      	beq.n	8008a22 <osKernelStart+0x3a>
    stat = osErrorISR;
 8008a1a:	f06f 0305 	mvn.w	r3, #5
 8008a1e:	60fb      	str	r3, [r7, #12]
 8008a20:	e00e      	b.n	8008a40 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8008a22:	4b0a      	ldr	r3, [pc, #40]	@ (8008a4c <osKernelStart+0x64>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d107      	bne.n	8008a3a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8008a2a:	4b08      	ldr	r3, [pc, #32]	@ (8008a4c <osKernelStart+0x64>)
 8008a2c:	2202      	movs	r2, #2
 8008a2e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8008a30:	f001 f8b0 	bl	8009b94 <vTaskStartScheduler>
      stat = osOK;
 8008a34:	2300      	movs	r3, #0
 8008a36:	60fb      	str	r3, [r7, #12]
 8008a38:	e002      	b.n	8008a40 <osKernelStart+0x58>
    } else {
      stat = osError;
 8008a3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008a3e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008a40:	68fb      	ldr	r3, [r7, #12]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	200006a4 	.word	0x200006a4

08008a50 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b092      	sub	sp, #72	@ 0x48
 8008a54:	af04      	add	r7, sp, #16
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a60:	f3ef 8305 	mrs	r3, IPSR
 8008a64:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f040 8094 	bne.w	8008b96 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8008a72:	623b      	str	r3, [r7, #32]
  return(result);
 8008a74:	6a3b      	ldr	r3, [r7, #32]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f040 808d 	bne.w	8008b96 <osThreadNew+0x146>
 8008a7c:	4b48      	ldr	r3, [pc, #288]	@ (8008ba0 <osThreadNew+0x150>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	d106      	bne.n	8008a92 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a84:	f3ef 8311 	mrs	r3, BASEPRI
 8008a88:	61fb      	str	r3, [r7, #28]
  return(result);
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f040 8082 	bne.w	8008b96 <osThreadNew+0x146>
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d07e      	beq.n	8008b96 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8008a98:	2380      	movs	r3, #128	@ 0x80
 8008a9a:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8008a9c:	2318      	movs	r3, #24
 8008a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8008aa4:	f107 031b 	add.w	r3, r7, #27
 8008aa8:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8008aaa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008aae:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d045      	beq.n	8008b42 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d002      	beq.n	8008ac4 <osThreadNew+0x74>
        name = attr->name;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	699b      	ldr	r3, [r3, #24]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d002      	beq.n	8008ad2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d008      	beq.n	8008aea <osThreadNew+0x9a>
 8008ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ada:	2b38      	cmp	r3, #56	@ 0x38
 8008adc:	d805      	bhi.n	8008aea <osThreadNew+0x9a>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	f003 0301 	and.w	r3, r3, #1
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d001      	beq.n	8008aee <osThreadNew+0x9e>
        return (NULL);
 8008aea:	2300      	movs	r3, #0
 8008aec:	e054      	b.n	8008b98 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	695b      	ldr	r3, [r3, #20]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d003      	beq.n	8008afe <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	695b      	ldr	r3, [r3, #20]
 8008afa:	089b      	lsrs	r3, r3, #2
 8008afc:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00e      	beq.n	8008b24 <osThreadNew+0xd4>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	2ba7      	cmp	r3, #167	@ 0xa7
 8008b0c:	d90a      	bls.n	8008b24 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d006      	beq.n	8008b24 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	695b      	ldr	r3, [r3, #20]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d002      	beq.n	8008b24 <osThreadNew+0xd4>
        mem = 1;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b22:	e010      	b.n	8008b46 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d10c      	bne.n	8008b46 <osThreadNew+0xf6>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d108      	bne.n	8008b46 <osThreadNew+0xf6>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	691b      	ldr	r3, [r3, #16]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d104      	bne.n	8008b46 <osThreadNew+0xf6>
          mem = 0;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b40:	e001      	b.n	8008b46 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8008b42:	2300      	movs	r3, #0
 8008b44:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8008b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d110      	bne.n	8008b6e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008b54:	9202      	str	r2, [sp, #8]
 8008b56:	9301      	str	r3, [sp, #4]
 8008b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b5a:	9300      	str	r3, [sp, #0]
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b60:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f000 fe2c 	bl	80097c0 <xTaskCreateStatic>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	617b      	str	r3, [r7, #20]
 8008b6c:	e013      	b.n	8008b96 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8008b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d110      	bne.n	8008b96 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b76:	b29a      	uxth	r2, r3
 8008b78:	f107 0314 	add.w	r3, r7, #20
 8008b7c:	9301      	str	r3, [sp, #4]
 8008b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b80:	9300      	str	r3, [sp, #0]
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	f000 fe79 	bl	800987e <xTaskCreate>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d001      	beq.n	8008b96 <osThreadNew+0x146>
          hTask = NULL;
 8008b92:	2300      	movs	r3, #0
 8008b94:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008b96:	697b      	ldr	r3, [r7, #20]
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3738      	adds	r7, #56	@ 0x38
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	200006a4 	.word	0x200006a4

08008ba4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b086      	sub	sp, #24
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bac:	f3ef 8305 	mrs	r3, IPSR
 8008bb0:	613b      	str	r3, [r7, #16]
  return(result);
 8008bb2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d10f      	bne.n	8008bd8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bb8:	f3ef 8310 	mrs	r3, PRIMASK
 8008bbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d109      	bne.n	8008bd8 <osDelay+0x34>
 8008bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8008bfc <osDelay+0x58>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	d109      	bne.n	8008be0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008bcc:	f3ef 8311 	mrs	r3, BASEPRI
 8008bd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d003      	beq.n	8008be0 <osDelay+0x3c>
    stat = osErrorISR;
 8008bd8:	f06f 0305 	mvn.w	r3, #5
 8008bdc:	617b      	str	r3, [r7, #20]
 8008bde:	e007      	b.n	8008bf0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008be0:	2300      	movs	r3, #0
 8008be2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d002      	beq.n	8008bf0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 ff9c 	bl	8009b28 <vTaskDelay>
    }
  }

  return (stat);
 8008bf0:	697b      	ldr	r3, [r7, #20]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3718      	adds	r7, #24
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	200006a4 	.word	0x200006a4

08008c00 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	4a07      	ldr	r2, [pc, #28]	@ (8008c2c <vApplicationGetIdleTaskMemory+0x2c>)
 8008c10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	4a06      	ldr	r2, [pc, #24]	@ (8008c30 <vApplicationGetIdleTaskMemory+0x30>)
 8008c16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2280      	movs	r2, #128	@ 0x80
 8008c1c:	601a      	str	r2, [r3, #0]
}
 8008c1e:	bf00      	nop
 8008c20:	3714      	adds	r7, #20
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr
 8008c2a:	bf00      	nop
 8008c2c:	200006a8 	.word	0x200006a8
 8008c30:	20000750 	.word	0x20000750

08008c34 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008c34:	b480      	push	{r7}
 8008c36:	b085      	sub	sp, #20
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	4a07      	ldr	r2, [pc, #28]	@ (8008c60 <vApplicationGetTimerTaskMemory+0x2c>)
 8008c44:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	4a06      	ldr	r2, [pc, #24]	@ (8008c64 <vApplicationGetTimerTaskMemory+0x30>)
 8008c4a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008c52:	601a      	str	r2, [r3, #0]
}
 8008c54:	bf00      	nop
 8008c56:	3714      	adds	r7, #20
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr
 8008c60:	20000950 	.word	0x20000950
 8008c64:	200009f8 	.word	0x200009f8

08008c68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f103 0208 	add.w	r2, r3, #8
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008c80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f103 0208 	add.w	r2, r3, #8
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f103 0208 	add.w	r2, r3, #8
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008c9c:	bf00      	nop
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008cb6:	bf00      	nop
 8008cb8:	370c      	adds	r7, #12
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr

08008cc2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008cc2:	b480      	push	{r7}
 8008cc4:	b085      	sub	sp, #20
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
 8008cca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	689a      	ldr	r2, [r3, #8]
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	683a      	ldr	r2, [r7, #0]
 8008ce6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	683a      	ldr	r2, [r7, #0]
 8008cec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	1c5a      	adds	r2, r3, #1
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	601a      	str	r2, [r3, #0]
}
 8008cfe:	bf00      	nop
 8008d00:	3714      	adds	r7, #20
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr

08008d0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d0a:	b480      	push	{r7}
 8008d0c:	b085      	sub	sp, #20
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
 8008d12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d20:	d103      	bne.n	8008d2a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	691b      	ldr	r3, [r3, #16]
 8008d26:	60fb      	str	r3, [r7, #12]
 8008d28:	e00c      	b.n	8008d44 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	3308      	adds	r3, #8
 8008d2e:	60fb      	str	r3, [r7, #12]
 8008d30:	e002      	b.n	8008d38 <vListInsert+0x2e>
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	60fb      	str	r3, [r7, #12]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68ba      	ldr	r2, [r7, #8]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d2f6      	bcs.n	8008d32 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	685a      	ldr	r2, [r3, #4]
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	683a      	ldr	r2, [r7, #0]
 8008d52:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	683a      	ldr	r2, [r7, #0]
 8008d5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	1c5a      	adds	r2, r3, #1
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	601a      	str	r2, [r3, #0]
}
 8008d70:	bf00      	nop
 8008d72:	3714      	adds	r7, #20
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b085      	sub	sp, #20
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	6892      	ldr	r2, [r2, #8]
 8008d92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	6852      	ldr	r2, [r2, #4]
 8008d9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d103      	bne.n	8008db0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	689a      	ldr	r2, [r3, #8]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	1e5a      	subs	r2, r3, #1
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3714      	adds	r7, #20
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d10b      	bne.n	8008dfc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de8:	f383 8811 	msr	BASEPRI, r3
 8008dec:	f3bf 8f6f 	isb	sy
 8008df0:	f3bf 8f4f 	dsb	sy
 8008df4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008df6:	bf00      	nop
 8008df8:	bf00      	nop
 8008dfa:	e7fd      	b.n	8008df8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008dfc:	f002 f86c 	bl	800aed8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e08:	68f9      	ldr	r1, [r7, #12]
 8008e0a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008e0c:	fb01 f303 	mul.w	r3, r1, r3
 8008e10:	441a      	add	r2, r3
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	68f9      	ldr	r1, [r7, #12]
 8008e30:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008e32:	fb01 f303 	mul.w	r3, r1, r3
 8008e36:	441a      	add	r2, r3
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	22ff      	movs	r2, #255	@ 0xff
 8008e40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	22ff      	movs	r2, #255	@ 0xff
 8008e48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d114      	bne.n	8008e7c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d01a      	beq.n	8008e90 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	3310      	adds	r3, #16
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f001 f93c 	bl	800a0dc <xTaskRemoveFromEventList>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d012      	beq.n	8008e90 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8008ea0 <xQueueGenericReset+0xd0>)
 8008e6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e70:	601a      	str	r2, [r3, #0]
 8008e72:	f3bf 8f4f 	dsb	sy
 8008e76:	f3bf 8f6f 	isb	sy
 8008e7a:	e009      	b.n	8008e90 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	3310      	adds	r3, #16
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7ff fef1 	bl	8008c68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	3324      	adds	r3, #36	@ 0x24
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7ff feec 	bl	8008c68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008e90:	f002 f854 	bl	800af3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008e94:	2301      	movs	r3, #1
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	e000ed04 	.word	0xe000ed04

08008ea4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b08e      	sub	sp, #56	@ 0x38
 8008ea8:	af02      	add	r7, sp, #8
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]
 8008eb0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10b      	bne.n	8008ed0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008eca:	bf00      	nop
 8008ecc:	bf00      	nop
 8008ece:	e7fd      	b.n	8008ecc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d10b      	bne.n	8008eee <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eda:	f383 8811 	msr	BASEPRI, r3
 8008ede:	f3bf 8f6f 	isb	sy
 8008ee2:	f3bf 8f4f 	dsb	sy
 8008ee6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008ee8:	bf00      	nop
 8008eea:	bf00      	nop
 8008eec:	e7fd      	b.n	8008eea <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d002      	beq.n	8008efa <xQueueGenericCreateStatic+0x56>
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d001      	beq.n	8008efe <xQueueGenericCreateStatic+0x5a>
 8008efa:	2301      	movs	r3, #1
 8008efc:	e000      	b.n	8008f00 <xQueueGenericCreateStatic+0x5c>
 8008efe:	2300      	movs	r3, #0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10b      	bne.n	8008f1c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f08:	f383 8811 	msr	BASEPRI, r3
 8008f0c:	f3bf 8f6f 	isb	sy
 8008f10:	f3bf 8f4f 	dsb	sy
 8008f14:	623b      	str	r3, [r7, #32]
}
 8008f16:	bf00      	nop
 8008f18:	bf00      	nop
 8008f1a:	e7fd      	b.n	8008f18 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d102      	bne.n	8008f28 <xQueueGenericCreateStatic+0x84>
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d101      	bne.n	8008f2c <xQueueGenericCreateStatic+0x88>
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e000      	b.n	8008f2e <xQueueGenericCreateStatic+0x8a>
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d10b      	bne.n	8008f4a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f36:	f383 8811 	msr	BASEPRI, r3
 8008f3a:	f3bf 8f6f 	isb	sy
 8008f3e:	f3bf 8f4f 	dsb	sy
 8008f42:	61fb      	str	r3, [r7, #28]
}
 8008f44:	bf00      	nop
 8008f46:	bf00      	nop
 8008f48:	e7fd      	b.n	8008f46 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008f4a:	2350      	movs	r3, #80	@ 0x50
 8008f4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	2b50      	cmp	r3, #80	@ 0x50
 8008f52:	d00b      	beq.n	8008f6c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f58:	f383 8811 	msr	BASEPRI, r3
 8008f5c:	f3bf 8f6f 	isb	sy
 8008f60:	f3bf 8f4f 	dsb	sy
 8008f64:	61bb      	str	r3, [r7, #24]
}
 8008f66:	bf00      	nop
 8008f68:	bf00      	nop
 8008f6a:	e7fd      	b.n	8008f68 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00d      	beq.n	8008f92 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f78:	2201      	movs	r2, #1
 8008f7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f7e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	4613      	mov	r3, r2
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	68b9      	ldr	r1, [r7, #8]
 8008f8c:	68f8      	ldr	r0, [r7, #12]
 8008f8e:	f000 f805 	bl	8008f9c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3730      	adds	r7, #48	@ 0x30
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
 8008fa8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d103      	bne.n	8008fb8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008fb0:	69bb      	ldr	r3, [r7, #24]
 8008fb2:	69ba      	ldr	r2, [r7, #24]
 8008fb4:	601a      	str	r2, [r3, #0]
 8008fb6:	e002      	b.n	8008fbe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008fca:	2101      	movs	r1, #1
 8008fcc:	69b8      	ldr	r0, [r7, #24]
 8008fce:	f7ff feff 	bl	8008dd0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	78fa      	ldrb	r2, [r7, #3]
 8008fd6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008fda:	bf00      	nop
 8008fdc:	3710      	adds	r7, #16
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
	...

08008fe4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b08e      	sub	sp, #56	@ 0x38
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	607a      	str	r2, [r7, #4]
 8008ff0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10b      	bne.n	8009018 <xQueueGenericSend+0x34>
	__asm volatile
 8009000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009012:	bf00      	nop
 8009014:	bf00      	nop
 8009016:	e7fd      	b.n	8009014 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d103      	bne.n	8009026 <xQueueGenericSend+0x42>
 800901e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009022:	2b00      	cmp	r3, #0
 8009024:	d101      	bne.n	800902a <xQueueGenericSend+0x46>
 8009026:	2301      	movs	r3, #1
 8009028:	e000      	b.n	800902c <xQueueGenericSend+0x48>
 800902a:	2300      	movs	r3, #0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d10b      	bne.n	8009048 <xQueueGenericSend+0x64>
	__asm volatile
 8009030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009034:	f383 8811 	msr	BASEPRI, r3
 8009038:	f3bf 8f6f 	isb	sy
 800903c:	f3bf 8f4f 	dsb	sy
 8009040:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009042:	bf00      	nop
 8009044:	bf00      	nop
 8009046:	e7fd      	b.n	8009044 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	2b02      	cmp	r3, #2
 800904c:	d103      	bne.n	8009056 <xQueueGenericSend+0x72>
 800904e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009052:	2b01      	cmp	r3, #1
 8009054:	d101      	bne.n	800905a <xQueueGenericSend+0x76>
 8009056:	2301      	movs	r3, #1
 8009058:	e000      	b.n	800905c <xQueueGenericSend+0x78>
 800905a:	2300      	movs	r3, #0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d10b      	bne.n	8009078 <xQueueGenericSend+0x94>
	__asm volatile
 8009060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009064:	f383 8811 	msr	BASEPRI, r3
 8009068:	f3bf 8f6f 	isb	sy
 800906c:	f3bf 8f4f 	dsb	sy
 8009070:	623b      	str	r3, [r7, #32]
}
 8009072:	bf00      	nop
 8009074:	bf00      	nop
 8009076:	e7fd      	b.n	8009074 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009078:	f001 f9fc 	bl	800a474 <xTaskGetSchedulerState>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	d102      	bne.n	8009088 <xQueueGenericSend+0xa4>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d101      	bne.n	800908c <xQueueGenericSend+0xa8>
 8009088:	2301      	movs	r3, #1
 800908a:	e000      	b.n	800908e <xQueueGenericSend+0xaa>
 800908c:	2300      	movs	r3, #0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d10b      	bne.n	80090aa <xQueueGenericSend+0xc6>
	__asm volatile
 8009092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009096:	f383 8811 	msr	BASEPRI, r3
 800909a:	f3bf 8f6f 	isb	sy
 800909e:	f3bf 8f4f 	dsb	sy
 80090a2:	61fb      	str	r3, [r7, #28]
}
 80090a4:	bf00      	nop
 80090a6:	bf00      	nop
 80090a8:	e7fd      	b.n	80090a6 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090aa:	f001 ff15 	bl	800aed8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80090ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d302      	bcc.n	80090c0 <xQueueGenericSend+0xdc>
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	2b02      	cmp	r3, #2
 80090be:	d129      	bne.n	8009114 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090c0:	683a      	ldr	r2, [r7, #0]
 80090c2:	68b9      	ldr	r1, [r7, #8]
 80090c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80090c6:	f000 fa0d 	bl	80094e4 <prvCopyDataToQueue>
 80090ca:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d010      	beq.n	80090f6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d6:	3324      	adds	r3, #36	@ 0x24
 80090d8:	4618      	mov	r0, r3
 80090da:	f000 ffff 	bl	800a0dc <xTaskRemoveFromEventList>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d013      	beq.n	800910c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80090e4:	4b3f      	ldr	r3, [pc, #252]	@ (80091e4 <xQueueGenericSend+0x200>)
 80090e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090ea:	601a      	str	r2, [r3, #0]
 80090ec:	f3bf 8f4f 	dsb	sy
 80090f0:	f3bf 8f6f 	isb	sy
 80090f4:	e00a      	b.n	800910c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80090f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d007      	beq.n	800910c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80090fc:	4b39      	ldr	r3, [pc, #228]	@ (80091e4 <xQueueGenericSend+0x200>)
 80090fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009102:	601a      	str	r2, [r3, #0]
 8009104:	f3bf 8f4f 	dsb	sy
 8009108:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800910c:	f001 ff16 	bl	800af3c <vPortExitCritical>
				return pdPASS;
 8009110:	2301      	movs	r3, #1
 8009112:	e063      	b.n	80091dc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d103      	bne.n	8009122 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800911a:	f001 ff0f 	bl	800af3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800911e:	2300      	movs	r3, #0
 8009120:	e05c      	b.n	80091dc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009124:	2b00      	cmp	r3, #0
 8009126:	d106      	bne.n	8009136 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009128:	f107 0314 	add.w	r3, r7, #20
 800912c:	4618      	mov	r0, r3
 800912e:	f001 f839 	bl	800a1a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009132:	2301      	movs	r3, #1
 8009134:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009136:	f001 ff01 	bl	800af3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800913a:	f000 fd9b 	bl	8009c74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800913e:	f001 fecb 	bl	800aed8 <vPortEnterCritical>
 8009142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009144:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009148:	b25b      	sxtb	r3, r3
 800914a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800914e:	d103      	bne.n	8009158 <xQueueGenericSend+0x174>
 8009150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009152:	2200      	movs	r2, #0
 8009154:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800915e:	b25b      	sxtb	r3, r3
 8009160:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009164:	d103      	bne.n	800916e <xQueueGenericSend+0x18a>
 8009166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009168:	2200      	movs	r2, #0
 800916a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800916e:	f001 fee5 	bl	800af3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009172:	1d3a      	adds	r2, r7, #4
 8009174:	f107 0314 	add.w	r3, r7, #20
 8009178:	4611      	mov	r1, r2
 800917a:	4618      	mov	r0, r3
 800917c:	f001 f828 	bl	800a1d0 <xTaskCheckForTimeOut>
 8009180:	4603      	mov	r3, r0
 8009182:	2b00      	cmp	r3, #0
 8009184:	d124      	bne.n	80091d0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009186:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009188:	f000 faa4 	bl	80096d4 <prvIsQueueFull>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d018      	beq.n	80091c4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009194:	3310      	adds	r3, #16
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	4611      	mov	r1, r2
 800919a:	4618      	mov	r0, r3
 800919c:	f000 ff4c 	bl	800a038 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80091a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091a2:	f000 fa2f 	bl	8009604 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80091a6:	f000 fd73 	bl	8009c90 <xTaskResumeAll>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f47f af7c 	bne.w	80090aa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80091b2:	4b0c      	ldr	r3, [pc, #48]	@ (80091e4 <xQueueGenericSend+0x200>)
 80091b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091b8:	601a      	str	r2, [r3, #0]
 80091ba:	f3bf 8f4f 	dsb	sy
 80091be:	f3bf 8f6f 	isb	sy
 80091c2:	e772      	b.n	80090aa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80091c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091c6:	f000 fa1d 	bl	8009604 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091ca:	f000 fd61 	bl	8009c90 <xTaskResumeAll>
 80091ce:	e76c      	b.n	80090aa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80091d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091d2:	f000 fa17 	bl	8009604 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091d6:	f000 fd5b 	bl	8009c90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80091da:	2300      	movs	r3, #0
		}
	}
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3738      	adds	r7, #56	@ 0x38
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	e000ed04 	.word	0xe000ed04

080091e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b08e      	sub	sp, #56	@ 0x38
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	607a      	str	r2, [r7, #4]
 80091f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80091fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d10b      	bne.n	8009218 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009204:	f383 8811 	msr	BASEPRI, r3
 8009208:	f3bf 8f6f 	isb	sy
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009212:	bf00      	nop
 8009214:	bf00      	nop
 8009216:	e7fd      	b.n	8009214 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d103      	bne.n	8009226 <xQueueGenericSendFromISR+0x3e>
 800921e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009222:	2b00      	cmp	r3, #0
 8009224:	d101      	bne.n	800922a <xQueueGenericSendFromISR+0x42>
 8009226:	2301      	movs	r3, #1
 8009228:	e000      	b.n	800922c <xQueueGenericSendFromISR+0x44>
 800922a:	2300      	movs	r3, #0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d10b      	bne.n	8009248 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009234:	f383 8811 	msr	BASEPRI, r3
 8009238:	f3bf 8f6f 	isb	sy
 800923c:	f3bf 8f4f 	dsb	sy
 8009240:	623b      	str	r3, [r7, #32]
}
 8009242:	bf00      	nop
 8009244:	bf00      	nop
 8009246:	e7fd      	b.n	8009244 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	2b02      	cmp	r3, #2
 800924c:	d103      	bne.n	8009256 <xQueueGenericSendFromISR+0x6e>
 800924e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009252:	2b01      	cmp	r3, #1
 8009254:	d101      	bne.n	800925a <xQueueGenericSendFromISR+0x72>
 8009256:	2301      	movs	r3, #1
 8009258:	e000      	b.n	800925c <xQueueGenericSendFromISR+0x74>
 800925a:	2300      	movs	r3, #0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d10b      	bne.n	8009278 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	61fb      	str	r3, [r7, #28]
}
 8009272:	bf00      	nop
 8009274:	bf00      	nop
 8009276:	e7fd      	b.n	8009274 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009278:	f001 ff0e 	bl	800b098 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800927c:	f3ef 8211 	mrs	r2, BASEPRI
 8009280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009284:	f383 8811 	msr	BASEPRI, r3
 8009288:	f3bf 8f6f 	isb	sy
 800928c:	f3bf 8f4f 	dsb	sy
 8009290:	61ba      	str	r2, [r7, #24]
 8009292:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009294:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009296:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800929a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800929c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800929e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d302      	bcc.n	80092aa <xQueueGenericSendFromISR+0xc2>
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	2b02      	cmp	r3, #2
 80092a8:	d12c      	bne.n	8009304 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80092aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80092b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092b4:	683a      	ldr	r2, [r7, #0]
 80092b6:	68b9      	ldr	r1, [r7, #8]
 80092b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80092ba:	f000 f913 	bl	80094e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80092be:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80092c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80092c6:	d112      	bne.n	80092ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d016      	beq.n	80092fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d2:	3324      	adds	r3, #36	@ 0x24
 80092d4:	4618      	mov	r0, r3
 80092d6:	f000 ff01 	bl	800a0dc <xTaskRemoveFromEventList>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00e      	beq.n	80092fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00b      	beq.n	80092fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2201      	movs	r2, #1
 80092ea:	601a      	str	r2, [r3, #0]
 80092ec:	e007      	b.n	80092fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80092ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80092f2:	3301      	adds	r3, #1
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	b25a      	sxtb	r2, r3
 80092f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80092fe:	2301      	movs	r3, #1
 8009300:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8009302:	e001      	b.n	8009308 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009304:	2300      	movs	r3, #0
 8009306:	637b      	str	r3, [r7, #52]	@ 0x34
 8009308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800930a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009312:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009316:	4618      	mov	r0, r3
 8009318:	3738      	adds	r7, #56	@ 0x38
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
	...

08009320 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b08c      	sub	sp, #48	@ 0x30
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800932c:	2300      	movs	r3, #0
 800932e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009336:	2b00      	cmp	r3, #0
 8009338:	d10b      	bne.n	8009352 <xQueueReceive+0x32>
	__asm volatile
 800933a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800933e:	f383 8811 	msr	BASEPRI, r3
 8009342:	f3bf 8f6f 	isb	sy
 8009346:	f3bf 8f4f 	dsb	sy
 800934a:	623b      	str	r3, [r7, #32]
}
 800934c:	bf00      	nop
 800934e:	bf00      	nop
 8009350:	e7fd      	b.n	800934e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d103      	bne.n	8009360 <xQueueReceive+0x40>
 8009358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800935a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800935c:	2b00      	cmp	r3, #0
 800935e:	d101      	bne.n	8009364 <xQueueReceive+0x44>
 8009360:	2301      	movs	r3, #1
 8009362:	e000      	b.n	8009366 <xQueueReceive+0x46>
 8009364:	2300      	movs	r3, #0
 8009366:	2b00      	cmp	r3, #0
 8009368:	d10b      	bne.n	8009382 <xQueueReceive+0x62>
	__asm volatile
 800936a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800936e:	f383 8811 	msr	BASEPRI, r3
 8009372:	f3bf 8f6f 	isb	sy
 8009376:	f3bf 8f4f 	dsb	sy
 800937a:	61fb      	str	r3, [r7, #28]
}
 800937c:	bf00      	nop
 800937e:	bf00      	nop
 8009380:	e7fd      	b.n	800937e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009382:	f001 f877 	bl	800a474 <xTaskGetSchedulerState>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d102      	bne.n	8009392 <xQueueReceive+0x72>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d101      	bne.n	8009396 <xQueueReceive+0x76>
 8009392:	2301      	movs	r3, #1
 8009394:	e000      	b.n	8009398 <xQueueReceive+0x78>
 8009396:	2300      	movs	r3, #0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d10b      	bne.n	80093b4 <xQueueReceive+0x94>
	__asm volatile
 800939c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093a0:	f383 8811 	msr	BASEPRI, r3
 80093a4:	f3bf 8f6f 	isb	sy
 80093a8:	f3bf 8f4f 	dsb	sy
 80093ac:	61bb      	str	r3, [r7, #24]
}
 80093ae:	bf00      	nop
 80093b0:	bf00      	nop
 80093b2:	e7fd      	b.n	80093b0 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80093b4:	f001 fd90 	bl	800aed8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093bc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80093be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d01f      	beq.n	8009404 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80093c4:	68b9      	ldr	r1, [r7, #8]
 80093c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093c8:	f000 f8f6 	bl	80095b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80093cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ce:	1e5a      	subs	r2, r3, #1
 80093d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d6:	691b      	ldr	r3, [r3, #16]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d00f      	beq.n	80093fc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093de:	3310      	adds	r3, #16
 80093e0:	4618      	mov	r0, r3
 80093e2:	f000 fe7b 	bl	800a0dc <xTaskRemoveFromEventList>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d007      	beq.n	80093fc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80093ec:	4b3c      	ldr	r3, [pc, #240]	@ (80094e0 <xQueueReceive+0x1c0>)
 80093ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093f2:	601a      	str	r2, [r3, #0]
 80093f4:	f3bf 8f4f 	dsb	sy
 80093f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80093fc:	f001 fd9e 	bl	800af3c <vPortExitCritical>
				return pdPASS;
 8009400:	2301      	movs	r3, #1
 8009402:	e069      	b.n	80094d8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d103      	bne.n	8009412 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800940a:	f001 fd97 	bl	800af3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800940e:	2300      	movs	r3, #0
 8009410:	e062      	b.n	80094d8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009414:	2b00      	cmp	r3, #0
 8009416:	d106      	bne.n	8009426 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009418:	f107 0310 	add.w	r3, r7, #16
 800941c:	4618      	mov	r0, r3
 800941e:	f000 fec1 	bl	800a1a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009422:	2301      	movs	r3, #1
 8009424:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009426:	f001 fd89 	bl	800af3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800942a:	f000 fc23 	bl	8009c74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800942e:	f001 fd53 	bl	800aed8 <vPortEnterCritical>
 8009432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009434:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009438:	b25b      	sxtb	r3, r3
 800943a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800943e:	d103      	bne.n	8009448 <xQueueReceive+0x128>
 8009440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009442:	2200      	movs	r2, #0
 8009444:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800944a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800944e:	b25b      	sxtb	r3, r3
 8009450:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009454:	d103      	bne.n	800945e <xQueueReceive+0x13e>
 8009456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009458:	2200      	movs	r2, #0
 800945a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800945e:	f001 fd6d 	bl	800af3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009462:	1d3a      	adds	r2, r7, #4
 8009464:	f107 0310 	add.w	r3, r7, #16
 8009468:	4611      	mov	r1, r2
 800946a:	4618      	mov	r0, r3
 800946c:	f000 feb0 	bl	800a1d0 <xTaskCheckForTimeOut>
 8009470:	4603      	mov	r3, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	d123      	bne.n	80094be <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009476:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009478:	f000 f916 	bl	80096a8 <prvIsQueueEmpty>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d017      	beq.n	80094b2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009484:	3324      	adds	r3, #36	@ 0x24
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	4611      	mov	r1, r2
 800948a:	4618      	mov	r0, r3
 800948c:	f000 fdd4 	bl	800a038 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009490:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009492:	f000 f8b7 	bl	8009604 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009496:	f000 fbfb 	bl	8009c90 <xTaskResumeAll>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	d189      	bne.n	80093b4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80094a0:	4b0f      	ldr	r3, [pc, #60]	@ (80094e0 <xQueueReceive+0x1c0>)
 80094a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094a6:	601a      	str	r2, [r3, #0]
 80094a8:	f3bf 8f4f 	dsb	sy
 80094ac:	f3bf 8f6f 	isb	sy
 80094b0:	e780      	b.n	80093b4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80094b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094b4:	f000 f8a6 	bl	8009604 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80094b8:	f000 fbea 	bl	8009c90 <xTaskResumeAll>
 80094bc:	e77a      	b.n	80093b4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80094be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094c0:	f000 f8a0 	bl	8009604 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094c4:	f000 fbe4 	bl	8009c90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094ca:	f000 f8ed 	bl	80096a8 <prvIsQueueEmpty>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f43f af6f 	beq.w	80093b4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80094d6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3730      	adds	r7, #48	@ 0x30
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	e000ed04 	.word	0xe000ed04

080094e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b086      	sub	sp, #24
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80094f0:	2300      	movs	r3, #0
 80094f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10d      	bne.n	800951e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d14d      	bne.n	80095a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	4618      	mov	r0, r3
 8009510:	f000 ffce 	bl	800a4b0 <xTaskPriorityDisinherit>
 8009514:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2200      	movs	r2, #0
 800951a:	605a      	str	r2, [r3, #4]
 800951c:	e043      	b.n	80095a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d119      	bne.n	8009558 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6898      	ldr	r0, [r3, #8]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800952c:	461a      	mov	r2, r3
 800952e:	68b9      	ldr	r1, [r7, #8]
 8009530:	f003 f855 	bl	800c5de <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	689a      	ldr	r2, [r3, #8]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800953c:	441a      	add	r2, r3
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	689a      	ldr	r2, [r3, #8]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	429a      	cmp	r2, r3
 800954c:	d32b      	bcc.n	80095a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	609a      	str	r2, [r3, #8]
 8009556:	e026      	b.n	80095a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	68d8      	ldr	r0, [r3, #12]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009560:	461a      	mov	r2, r3
 8009562:	68b9      	ldr	r1, [r7, #8]
 8009564:	f003 f83b 	bl	800c5de <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	68da      	ldr	r2, [r3, #12]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009570:	425b      	negs	r3, r3
 8009572:	441a      	add	r2, r3
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	68da      	ldr	r2, [r3, #12]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	429a      	cmp	r2, r3
 8009582:	d207      	bcs.n	8009594 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	685a      	ldr	r2, [r3, #4]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800958c:	425b      	negs	r3, r3
 800958e:	441a      	add	r2, r3
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2b02      	cmp	r3, #2
 8009598:	d105      	bne.n	80095a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d002      	beq.n	80095a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	3b01      	subs	r3, #1
 80095a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	1c5a      	adds	r2, r3, #1
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80095ae:	697b      	ldr	r3, [r7, #20]
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3718      	adds	r7, #24
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d018      	beq.n	80095fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	68da      	ldr	r2, [r3, #12]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095d2:	441a      	add	r2, r3
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	68da      	ldr	r2, [r3, #12]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d303      	bcc.n	80095ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	68d9      	ldr	r1, [r3, #12]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095f4:	461a      	mov	r2, r3
 80095f6:	6838      	ldr	r0, [r7, #0]
 80095f8:	f002 fff1 	bl	800c5de <memcpy>
	}
}
 80095fc:	bf00      	nop
 80095fe:	3708      	adds	r7, #8
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800960c:	f001 fc64 	bl	800aed8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009616:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009618:	e011      	b.n	800963e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800961e:	2b00      	cmp	r3, #0
 8009620:	d012      	beq.n	8009648 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	3324      	adds	r3, #36	@ 0x24
 8009626:	4618      	mov	r0, r3
 8009628:	f000 fd58 	bl	800a0dc <xTaskRemoveFromEventList>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d001      	beq.n	8009636 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009632:	f000 fe31 	bl	800a298 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009636:	7bfb      	ldrb	r3, [r7, #15]
 8009638:	3b01      	subs	r3, #1
 800963a:	b2db      	uxtb	r3, r3
 800963c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800963e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009642:	2b00      	cmp	r3, #0
 8009644:	dce9      	bgt.n	800961a <prvUnlockQueue+0x16>
 8009646:	e000      	b.n	800964a <prvUnlockQueue+0x46>
					break;
 8009648:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	22ff      	movs	r2, #255	@ 0xff
 800964e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009652:	f001 fc73 	bl	800af3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009656:	f001 fc3f 	bl	800aed8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009660:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009662:	e011      	b.n	8009688 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d012      	beq.n	8009692 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	3310      	adds	r3, #16
 8009670:	4618      	mov	r0, r3
 8009672:	f000 fd33 	bl	800a0dc <xTaskRemoveFromEventList>
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d001      	beq.n	8009680 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800967c:	f000 fe0c 	bl	800a298 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009680:	7bbb      	ldrb	r3, [r7, #14]
 8009682:	3b01      	subs	r3, #1
 8009684:	b2db      	uxtb	r3, r3
 8009686:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009688:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800968c:	2b00      	cmp	r3, #0
 800968e:	dce9      	bgt.n	8009664 <prvUnlockQueue+0x60>
 8009690:	e000      	b.n	8009694 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009692:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	22ff      	movs	r2, #255	@ 0xff
 8009698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800969c:	f001 fc4e 	bl	800af3c <vPortExitCritical>
}
 80096a0:	bf00      	nop
 80096a2:	3710      	adds	r7, #16
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096b0:	f001 fc12 	bl	800aed8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d102      	bne.n	80096c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80096bc:	2301      	movs	r3, #1
 80096be:	60fb      	str	r3, [r7, #12]
 80096c0:	e001      	b.n	80096c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80096c2:	2300      	movs	r3, #0
 80096c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096c6:	f001 fc39 	bl	800af3c <vPortExitCritical>

	return xReturn;
 80096ca:	68fb      	ldr	r3, [r7, #12]
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096dc:	f001 fbfc 	bl	800aed8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d102      	bne.n	80096f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80096ec:	2301      	movs	r3, #1
 80096ee:	60fb      	str	r3, [r7, #12]
 80096f0:	e001      	b.n	80096f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80096f2:	2300      	movs	r3, #0
 80096f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096f6:	f001 fc21 	bl	800af3c <vPortExitCritical>

	return xReturn;
 80096fa:	68fb      	ldr	r3, [r7, #12]
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3710      	adds	r7, #16
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800970e:	2300      	movs	r3, #0
 8009710:	60fb      	str	r3, [r7, #12]
 8009712:	e014      	b.n	800973e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009714:	4a0f      	ldr	r2, [pc, #60]	@ (8009754 <vQueueAddToRegistry+0x50>)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d10b      	bne.n	8009738 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009720:	490c      	ldr	r1, [pc, #48]	@ (8009754 <vQueueAddToRegistry+0x50>)
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	683a      	ldr	r2, [r7, #0]
 8009726:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800972a:	4a0a      	ldr	r2, [pc, #40]	@ (8009754 <vQueueAddToRegistry+0x50>)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	00db      	lsls	r3, r3, #3
 8009730:	4413      	add	r3, r2
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009736:	e006      	b.n	8009746 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	3301      	adds	r3, #1
 800973c:	60fb      	str	r3, [r7, #12]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2b07      	cmp	r3, #7
 8009742:	d9e7      	bls.n	8009714 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009744:	bf00      	nop
 8009746:	bf00      	nop
 8009748:	3714      	adds	r7, #20
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop
 8009754:	20000df8 	.word	0x20000df8

08009758 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009758:	b580      	push	{r7, lr}
 800975a:	b086      	sub	sp, #24
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009768:	f001 fbb6 	bl	800aed8 <vPortEnterCritical>
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009772:	b25b      	sxtb	r3, r3
 8009774:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009778:	d103      	bne.n	8009782 <vQueueWaitForMessageRestricted+0x2a>
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	2200      	movs	r2, #0
 800977e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009788:	b25b      	sxtb	r3, r3
 800978a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800978e:	d103      	bne.n	8009798 <vQueueWaitForMessageRestricted+0x40>
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	2200      	movs	r2, #0
 8009794:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009798:	f001 fbd0 	bl	800af3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d106      	bne.n	80097b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	3324      	adds	r3, #36	@ 0x24
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	68b9      	ldr	r1, [r7, #8]
 80097ac:	4618      	mov	r0, r3
 80097ae:	f000 fc69 	bl	800a084 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80097b2:	6978      	ldr	r0, [r7, #20]
 80097b4:	f7ff ff26 	bl	8009604 <prvUnlockQueue>
	}
 80097b8:	bf00      	nop
 80097ba:	3718      	adds	r7, #24
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b08e      	sub	sp, #56	@ 0x38
 80097c4:	af04      	add	r7, sp, #16
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
 80097cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80097ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10b      	bne.n	80097ec <xTaskCreateStatic+0x2c>
	__asm volatile
 80097d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d8:	f383 8811 	msr	BASEPRI, r3
 80097dc:	f3bf 8f6f 	isb	sy
 80097e0:	f3bf 8f4f 	dsb	sy
 80097e4:	623b      	str	r3, [r7, #32]
}
 80097e6:	bf00      	nop
 80097e8:	bf00      	nop
 80097ea:	e7fd      	b.n	80097e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80097ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10b      	bne.n	800980a <xTaskCreateStatic+0x4a>
	__asm volatile
 80097f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f6:	f383 8811 	msr	BASEPRI, r3
 80097fa:	f3bf 8f6f 	isb	sy
 80097fe:	f3bf 8f4f 	dsb	sy
 8009802:	61fb      	str	r3, [r7, #28]
}
 8009804:	bf00      	nop
 8009806:	bf00      	nop
 8009808:	e7fd      	b.n	8009806 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800980a:	23a8      	movs	r3, #168	@ 0xa8
 800980c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	2ba8      	cmp	r3, #168	@ 0xa8
 8009812:	d00b      	beq.n	800982c <xTaskCreateStatic+0x6c>
	__asm volatile
 8009814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009818:	f383 8811 	msr	BASEPRI, r3
 800981c:	f3bf 8f6f 	isb	sy
 8009820:	f3bf 8f4f 	dsb	sy
 8009824:	61bb      	str	r3, [r7, #24]
}
 8009826:	bf00      	nop
 8009828:	bf00      	nop
 800982a:	e7fd      	b.n	8009828 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800982c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800982e:	2b00      	cmp	r3, #0
 8009830:	d01e      	beq.n	8009870 <xTaskCreateStatic+0xb0>
 8009832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009834:	2b00      	cmp	r3, #0
 8009836:	d01b      	beq.n	8009870 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800983a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800983c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800983e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009840:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009844:	2202      	movs	r2, #2
 8009846:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800984a:	2300      	movs	r3, #0
 800984c:	9303      	str	r3, [sp, #12]
 800984e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009850:	9302      	str	r3, [sp, #8]
 8009852:	f107 0314 	add.w	r3, r7, #20
 8009856:	9301      	str	r3, [sp, #4]
 8009858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	68b9      	ldr	r1, [r7, #8]
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f000 f850 	bl	8009908 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009868:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800986a:	f000 f8ed 	bl	8009a48 <prvAddNewTaskToReadyList>
 800986e:	e001      	b.n	8009874 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8009870:	2300      	movs	r3, #0
 8009872:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009874:	697b      	ldr	r3, [r7, #20]
	}
 8009876:	4618      	mov	r0, r3
 8009878:	3728      	adds	r7, #40	@ 0x28
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800987e:	b580      	push	{r7, lr}
 8009880:	b08c      	sub	sp, #48	@ 0x30
 8009882:	af04      	add	r7, sp, #16
 8009884:	60f8      	str	r0, [r7, #12]
 8009886:	60b9      	str	r1, [r7, #8]
 8009888:	603b      	str	r3, [r7, #0]
 800988a:	4613      	mov	r3, r2
 800988c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800988e:	88fb      	ldrh	r3, [r7, #6]
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	4618      	mov	r0, r3
 8009894:	f001 fc42 	bl	800b11c <pvPortMalloc>
 8009898:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d00e      	beq.n	80098be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80098a0:	20a8      	movs	r0, #168	@ 0xa8
 80098a2:	f001 fc3b 	bl	800b11c <pvPortMalloc>
 80098a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80098a8:	69fb      	ldr	r3, [r7, #28]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d003      	beq.n	80098b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80098ae:	69fb      	ldr	r3, [r7, #28]
 80098b0:	697a      	ldr	r2, [r7, #20]
 80098b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80098b4:	e005      	b.n	80098c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80098b6:	6978      	ldr	r0, [r7, #20]
 80098b8:	f001 fcf8 	bl	800b2ac <vPortFree>
 80098bc:	e001      	b.n	80098c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80098be:	2300      	movs	r3, #0
 80098c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80098c2:	69fb      	ldr	r3, [r7, #28]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d017      	beq.n	80098f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80098d0:	88fa      	ldrh	r2, [r7, #6]
 80098d2:	2300      	movs	r3, #0
 80098d4:	9303      	str	r3, [sp, #12]
 80098d6:	69fb      	ldr	r3, [r7, #28]
 80098d8:	9302      	str	r3, [sp, #8]
 80098da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098dc:	9301      	str	r3, [sp, #4]
 80098de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098e0:	9300      	str	r3, [sp, #0]
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	68b9      	ldr	r1, [r7, #8]
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	f000 f80e 	bl	8009908 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098ec:	69f8      	ldr	r0, [r7, #28]
 80098ee:	f000 f8ab 	bl	8009a48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80098f2:	2301      	movs	r3, #1
 80098f4:	61bb      	str	r3, [r7, #24]
 80098f6:	e002      	b.n	80098fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80098f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80098fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80098fe:	69bb      	ldr	r3, [r7, #24]
	}
 8009900:	4618      	mov	r0, r3
 8009902:	3720      	adds	r7, #32
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b088      	sub	sp, #32
 800990c:	af00      	add	r7, sp, #0
 800990e:	60f8      	str	r0, [r7, #12]
 8009910:	60b9      	str	r1, [r7, #8]
 8009912:	607a      	str	r2, [r7, #4]
 8009914:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009918:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	461a      	mov	r2, r3
 8009920:	21a5      	movs	r1, #165	@ 0xa5
 8009922:	f002 fd86 	bl	800c432 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009928:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009930:	3b01      	subs	r3, #1
 8009932:	009b      	lsls	r3, r3, #2
 8009934:	4413      	add	r3, r2
 8009936:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	f023 0307 	bic.w	r3, r3, #7
 800993e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009940:	69bb      	ldr	r3, [r7, #24]
 8009942:	f003 0307 	and.w	r3, r3, #7
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00b      	beq.n	8009962 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800994a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800994e:	f383 8811 	msr	BASEPRI, r3
 8009952:	f3bf 8f6f 	isb	sy
 8009956:	f3bf 8f4f 	dsb	sy
 800995a:	617b      	str	r3, [r7, #20]
}
 800995c:	bf00      	nop
 800995e:	bf00      	nop
 8009960:	e7fd      	b.n	800995e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009962:	2300      	movs	r3, #0
 8009964:	61fb      	str	r3, [r7, #28]
 8009966:	e012      	b.n	800998e <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009968:	68ba      	ldr	r2, [r7, #8]
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	4413      	add	r3, r2
 800996e:	7819      	ldrb	r1, [r3, #0]
 8009970:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	4413      	add	r3, r2
 8009976:	3334      	adds	r3, #52	@ 0x34
 8009978:	460a      	mov	r2, r1
 800997a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	4413      	add	r3, r2
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d006      	beq.n	8009996 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	3301      	adds	r3, #1
 800998c:	61fb      	str	r3, [r7, #28]
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	2b0f      	cmp	r3, #15
 8009992:	d9e9      	bls.n	8009968 <prvInitialiseNewTask+0x60>
 8009994:	e000      	b.n	8009998 <prvInitialiseNewTask+0x90>
		{
			break;
 8009996:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800999a:	2200      	movs	r2, #0
 800999c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80099a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a2:	2b37      	cmp	r3, #55	@ 0x37
 80099a4:	d901      	bls.n	80099aa <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80099a6:	2337      	movs	r3, #55	@ 0x37
 80099a8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80099aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80099b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099b4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80099b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b8:	2200      	movs	r2, #0
 80099ba:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80099bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099be:	3304      	adds	r3, #4
 80099c0:	4618      	mov	r0, r3
 80099c2:	f7ff f971 	bl	8008ca8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80099c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c8:	3318      	adds	r3, #24
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7ff f96c 	bl	8008ca8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80099d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099d4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80099dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099de:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80099e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099e4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80099e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e8:	2200      	movs	r2, #0
 80099ea:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80099ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f0:	2200      	movs	r2, #0
 80099f2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80099f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f8:	3354      	adds	r3, #84	@ 0x54
 80099fa:	224c      	movs	r2, #76	@ 0x4c
 80099fc:	2100      	movs	r1, #0
 80099fe:	4618      	mov	r0, r3
 8009a00:	f002 fd17 	bl	800c432 <memset>
 8009a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a06:	4a0d      	ldr	r2, [pc, #52]	@ (8009a3c <prvInitialiseNewTask+0x134>)
 8009a08:	659a      	str	r2, [r3, #88]	@ 0x58
 8009a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a0c:	4a0c      	ldr	r2, [pc, #48]	@ (8009a40 <prvInitialiseNewTask+0x138>)
 8009a0e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a12:	4a0c      	ldr	r2, [pc, #48]	@ (8009a44 <prvInitialiseNewTask+0x13c>)
 8009a14:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009a16:	683a      	ldr	r2, [r7, #0]
 8009a18:	68f9      	ldr	r1, [r7, #12]
 8009a1a:	69b8      	ldr	r0, [r7, #24]
 8009a1c:	f001 f92c 	bl	800ac78 <pxPortInitialiseStack>
 8009a20:	4602      	mov	r2, r0
 8009a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a24:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d002      	beq.n	8009a32 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a32:	bf00      	nop
 8009a34:	3720      	adds	r7, #32
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	20003484 	.word	0x20003484
 8009a40:	200034ec 	.word	0x200034ec
 8009a44:	20003554 	.word	0x20003554

08009a48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a50:	f001 fa42 	bl	800aed8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009a54:	4b2d      	ldr	r3, [pc, #180]	@ (8009b0c <prvAddNewTaskToReadyList+0xc4>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	4a2c      	ldr	r2, [pc, #176]	@ (8009b0c <prvAddNewTaskToReadyList+0xc4>)
 8009a5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a5e:	4b2c      	ldr	r3, [pc, #176]	@ (8009b10 <prvAddNewTaskToReadyList+0xc8>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d109      	bne.n	8009a7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a66:	4a2a      	ldr	r2, [pc, #168]	@ (8009b10 <prvAddNewTaskToReadyList+0xc8>)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a6c:	4b27      	ldr	r3, [pc, #156]	@ (8009b0c <prvAddNewTaskToReadyList+0xc4>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d110      	bne.n	8009a96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a74:	f000 fc34 	bl	800a2e0 <prvInitialiseTaskLists>
 8009a78:	e00d      	b.n	8009a96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a7a:	4b26      	ldr	r3, [pc, #152]	@ (8009b14 <prvAddNewTaskToReadyList+0xcc>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d109      	bne.n	8009a96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a82:	4b23      	ldr	r3, [pc, #140]	@ (8009b10 <prvAddNewTaskToReadyList+0xc8>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d802      	bhi.n	8009a96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a90:	4a1f      	ldr	r2, [pc, #124]	@ (8009b10 <prvAddNewTaskToReadyList+0xc8>)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a96:	4b20      	ldr	r3, [pc, #128]	@ (8009b18 <prvAddNewTaskToReadyList+0xd0>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	4a1e      	ldr	r2, [pc, #120]	@ (8009b18 <prvAddNewTaskToReadyList+0xd0>)
 8009a9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8009b18 <prvAddNewTaskToReadyList+0xd0>)
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aac:	4b1b      	ldr	r3, [pc, #108]	@ (8009b1c <prvAddNewTaskToReadyList+0xd4>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d903      	bls.n	8009abc <prvAddNewTaskToReadyList+0x74>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab8:	4a18      	ldr	r2, [pc, #96]	@ (8009b1c <prvAddNewTaskToReadyList+0xd4>)
 8009aba:	6013      	str	r3, [r2, #0]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	4413      	add	r3, r2
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	4a15      	ldr	r2, [pc, #84]	@ (8009b20 <prvAddNewTaskToReadyList+0xd8>)
 8009aca:	441a      	add	r2, r3
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	3304      	adds	r3, #4
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	4610      	mov	r0, r2
 8009ad4:	f7ff f8f5 	bl	8008cc2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009ad8:	f001 fa30 	bl	800af3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009adc:	4b0d      	ldr	r3, [pc, #52]	@ (8009b14 <prvAddNewTaskToReadyList+0xcc>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00e      	beq.n	8009b02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8009b10 <prvAddNewTaskToReadyList+0xc8>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d207      	bcs.n	8009b02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009af2:	4b0c      	ldr	r3, [pc, #48]	@ (8009b24 <prvAddNewTaskToReadyList+0xdc>)
 8009af4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009af8:	601a      	str	r2, [r3, #0]
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b02:	bf00      	nop
 8009b04:	3708      	adds	r7, #8
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	2000130c 	.word	0x2000130c
 8009b10:	20000e38 	.word	0x20000e38
 8009b14:	20001318 	.word	0x20001318
 8009b18:	20001328 	.word	0x20001328
 8009b1c:	20001314 	.word	0x20001314
 8009b20:	20000e3c 	.word	0x20000e3c
 8009b24:	e000ed04 	.word	0xe000ed04

08009b28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009b30:	2300      	movs	r3, #0
 8009b32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d018      	beq.n	8009b6c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009b3a:	4b14      	ldr	r3, [pc, #80]	@ (8009b8c <vTaskDelay+0x64>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00b      	beq.n	8009b5a <vTaskDelay+0x32>
	__asm volatile
 8009b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b46:	f383 8811 	msr	BASEPRI, r3
 8009b4a:	f3bf 8f6f 	isb	sy
 8009b4e:	f3bf 8f4f 	dsb	sy
 8009b52:	60bb      	str	r3, [r7, #8]
}
 8009b54:	bf00      	nop
 8009b56:	bf00      	nop
 8009b58:	e7fd      	b.n	8009b56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009b5a:	f000 f88b 	bl	8009c74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b5e:	2100      	movs	r1, #0
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 fd15 	bl	800a590 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b66:	f000 f893 	bl	8009c90 <xTaskResumeAll>
 8009b6a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d107      	bne.n	8009b82 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009b72:	4b07      	ldr	r3, [pc, #28]	@ (8009b90 <vTaskDelay+0x68>)
 8009b74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b78:	601a      	str	r2, [r3, #0]
 8009b7a:	f3bf 8f4f 	dsb	sy
 8009b7e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b82:	bf00      	nop
 8009b84:	3710      	adds	r7, #16
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	20001334 	.word	0x20001334
 8009b90:	e000ed04 	.word	0xe000ed04

08009b94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b08a      	sub	sp, #40	@ 0x28
 8009b98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009ba2:	463a      	mov	r2, r7
 8009ba4:	1d39      	adds	r1, r7, #4
 8009ba6:	f107 0308 	add.w	r3, r7, #8
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7ff f828 	bl	8008c00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009bb0:	6839      	ldr	r1, [r7, #0]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	68ba      	ldr	r2, [r7, #8]
 8009bb6:	9202      	str	r2, [sp, #8]
 8009bb8:	9301      	str	r3, [sp, #4]
 8009bba:	2300      	movs	r3, #0
 8009bbc:	9300      	str	r3, [sp, #0]
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	460a      	mov	r2, r1
 8009bc2:	4924      	ldr	r1, [pc, #144]	@ (8009c54 <vTaskStartScheduler+0xc0>)
 8009bc4:	4824      	ldr	r0, [pc, #144]	@ (8009c58 <vTaskStartScheduler+0xc4>)
 8009bc6:	f7ff fdfb 	bl	80097c0 <xTaskCreateStatic>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	4a23      	ldr	r2, [pc, #140]	@ (8009c5c <vTaskStartScheduler+0xc8>)
 8009bce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009bd0:	4b22      	ldr	r3, [pc, #136]	@ (8009c5c <vTaskStartScheduler+0xc8>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d002      	beq.n	8009bde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	617b      	str	r3, [r7, #20]
 8009bdc:	e001      	b.n	8009be2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009bde:	2300      	movs	r3, #0
 8009be0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d102      	bne.n	8009bee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009be8:	f000 fd26 	bl	800a638 <xTimerCreateTimerTask>
 8009bec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d11b      	bne.n	8009c2c <vTaskStartScheduler+0x98>
	__asm volatile
 8009bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf8:	f383 8811 	msr	BASEPRI, r3
 8009bfc:	f3bf 8f6f 	isb	sy
 8009c00:	f3bf 8f4f 	dsb	sy
 8009c04:	613b      	str	r3, [r7, #16]
}
 8009c06:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009c08:	4b15      	ldr	r3, [pc, #84]	@ (8009c60 <vTaskStartScheduler+0xcc>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	3354      	adds	r3, #84	@ 0x54
 8009c0e:	4a15      	ldr	r2, [pc, #84]	@ (8009c64 <vTaskStartScheduler+0xd0>)
 8009c10:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009c12:	4b15      	ldr	r3, [pc, #84]	@ (8009c68 <vTaskStartScheduler+0xd4>)
 8009c14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009c18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009c1a:	4b14      	ldr	r3, [pc, #80]	@ (8009c6c <vTaskStartScheduler+0xd8>)
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009c20:	4b13      	ldr	r3, [pc, #76]	@ (8009c70 <vTaskStartScheduler+0xdc>)
 8009c22:	2200      	movs	r2, #0
 8009c24:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009c26:	f001 f8b3 	bl	800ad90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009c2a:	e00f      	b.n	8009c4c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c32:	d10b      	bne.n	8009c4c <vTaskStartScheduler+0xb8>
	__asm volatile
 8009c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c38:	f383 8811 	msr	BASEPRI, r3
 8009c3c:	f3bf 8f6f 	isb	sy
 8009c40:	f3bf 8f4f 	dsb	sy
 8009c44:	60fb      	str	r3, [r7, #12]
}
 8009c46:	bf00      	nop
 8009c48:	bf00      	nop
 8009c4a:	e7fd      	b.n	8009c48 <vTaskStartScheduler+0xb4>
}
 8009c4c:	bf00      	nop
 8009c4e:	3718      	adds	r7, #24
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	0800fd3c 	.word	0x0800fd3c
 8009c58:	0800a2b1 	.word	0x0800a2b1
 8009c5c:	20001330 	.word	0x20001330
 8009c60:	20000e38 	.word	0x20000e38
 8009c64:	20000024 	.word	0x20000024
 8009c68:	2000132c 	.word	0x2000132c
 8009c6c:	20001318 	.word	0x20001318
 8009c70:	20001310 	.word	0x20001310

08009c74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c74:	b480      	push	{r7}
 8009c76:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009c78:	4b04      	ldr	r3, [pc, #16]	@ (8009c8c <vTaskSuspendAll+0x18>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	4a03      	ldr	r2, [pc, #12]	@ (8009c8c <vTaskSuspendAll+0x18>)
 8009c80:	6013      	str	r3, [r2, #0]
}
 8009c82:	bf00      	nop
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr
 8009c8c:	20001334 	.word	0x20001334

08009c90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c96:	2300      	movs	r3, #0
 8009c98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c9e:	4b42      	ldr	r3, [pc, #264]	@ (8009da8 <xTaskResumeAll+0x118>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d10b      	bne.n	8009cbe <xTaskResumeAll+0x2e>
	__asm volatile
 8009ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009caa:	f383 8811 	msr	BASEPRI, r3
 8009cae:	f3bf 8f6f 	isb	sy
 8009cb2:	f3bf 8f4f 	dsb	sy
 8009cb6:	603b      	str	r3, [r7, #0]
}
 8009cb8:	bf00      	nop
 8009cba:	bf00      	nop
 8009cbc:	e7fd      	b.n	8009cba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009cbe:	f001 f90b 	bl	800aed8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009cc2:	4b39      	ldr	r3, [pc, #228]	@ (8009da8 <xTaskResumeAll+0x118>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	3b01      	subs	r3, #1
 8009cc8:	4a37      	ldr	r2, [pc, #220]	@ (8009da8 <xTaskResumeAll+0x118>)
 8009cca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ccc:	4b36      	ldr	r3, [pc, #216]	@ (8009da8 <xTaskResumeAll+0x118>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d162      	bne.n	8009d9a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009cd4:	4b35      	ldr	r3, [pc, #212]	@ (8009dac <xTaskResumeAll+0x11c>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d05e      	beq.n	8009d9a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cdc:	e02f      	b.n	8009d3e <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009cde:	4b34      	ldr	r3, [pc, #208]	@ (8009db0 <xTaskResumeAll+0x120>)
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	68db      	ldr	r3, [r3, #12]
 8009ce4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	3318      	adds	r3, #24
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7ff f846 	bl	8008d7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	3304      	adds	r3, #4
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f7ff f841 	bl	8008d7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cfe:	4b2d      	ldr	r3, [pc, #180]	@ (8009db4 <xTaskResumeAll+0x124>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d903      	bls.n	8009d0e <xTaskResumeAll+0x7e>
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d0a:	4a2a      	ldr	r2, [pc, #168]	@ (8009db4 <xTaskResumeAll+0x124>)
 8009d0c:	6013      	str	r3, [r2, #0]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d12:	4613      	mov	r3, r2
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	4413      	add	r3, r2
 8009d18:	009b      	lsls	r3, r3, #2
 8009d1a:	4a27      	ldr	r2, [pc, #156]	@ (8009db8 <xTaskResumeAll+0x128>)
 8009d1c:	441a      	add	r2, r3
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	3304      	adds	r3, #4
 8009d22:	4619      	mov	r1, r3
 8009d24:	4610      	mov	r0, r2
 8009d26:	f7fe ffcc 	bl	8008cc2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d2e:	4b23      	ldr	r3, [pc, #140]	@ (8009dbc <xTaskResumeAll+0x12c>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d302      	bcc.n	8009d3e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009d38:	4b21      	ldr	r3, [pc, #132]	@ (8009dc0 <xTaskResumeAll+0x130>)
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d3e:	4b1c      	ldr	r3, [pc, #112]	@ (8009db0 <xTaskResumeAll+0x120>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d1cb      	bne.n	8009cde <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d001      	beq.n	8009d50 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d4c:	f000 fb6c 	bl	800a428 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009d50:	4b1c      	ldr	r3, [pc, #112]	@ (8009dc4 <xTaskResumeAll+0x134>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d010      	beq.n	8009d7e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d5c:	f000 f846 	bl	8009dec <xTaskIncrementTick>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d002      	beq.n	8009d6c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009d66:	4b16      	ldr	r3, [pc, #88]	@ (8009dc0 <xTaskResumeAll+0x130>)
 8009d68:	2201      	movs	r2, #1
 8009d6a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d1f1      	bne.n	8009d5c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8009d78:	4b12      	ldr	r3, [pc, #72]	@ (8009dc4 <xTaskResumeAll+0x134>)
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d7e:	4b10      	ldr	r3, [pc, #64]	@ (8009dc0 <xTaskResumeAll+0x130>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d009      	beq.n	8009d9a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d86:	2301      	movs	r3, #1
 8009d88:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8009dc8 <xTaskResumeAll+0x138>)
 8009d8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d90:	601a      	str	r2, [r3, #0]
 8009d92:	f3bf 8f4f 	dsb	sy
 8009d96:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d9a:	f001 f8cf 	bl	800af3c <vPortExitCritical>

	return xAlreadyYielded;
 8009d9e:	68bb      	ldr	r3, [r7, #8]
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3710      	adds	r7, #16
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	20001334 	.word	0x20001334
 8009dac:	2000130c 	.word	0x2000130c
 8009db0:	200012cc 	.word	0x200012cc
 8009db4:	20001314 	.word	0x20001314
 8009db8:	20000e3c 	.word	0x20000e3c
 8009dbc:	20000e38 	.word	0x20000e38
 8009dc0:	20001320 	.word	0x20001320
 8009dc4:	2000131c 	.word	0x2000131c
 8009dc8:	e000ed04 	.word	0xe000ed04

08009dcc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b083      	sub	sp, #12
 8009dd0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009dd2:	4b05      	ldr	r3, [pc, #20]	@ (8009de8 <xTaskGetTickCount+0x1c>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009dd8:	687b      	ldr	r3, [r7, #4]
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	370c      	adds	r7, #12
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	20001310 	.word	0x20001310

08009dec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b086      	sub	sp, #24
 8009df0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009df2:	2300      	movs	r3, #0
 8009df4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009df6:	4b52      	ldr	r3, [pc, #328]	@ (8009f40 <xTaskIncrementTick+0x154>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	f040 808f 	bne.w	8009f1e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009e00:	4b50      	ldr	r3, [pc, #320]	@ (8009f44 <xTaskIncrementTick+0x158>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	3301      	adds	r3, #1
 8009e06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009e08:	4a4e      	ldr	r2, [pc, #312]	@ (8009f44 <xTaskIncrementTick+0x158>)
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d121      	bne.n	8009e58 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009e14:	4b4c      	ldr	r3, [pc, #304]	@ (8009f48 <xTaskIncrementTick+0x15c>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00b      	beq.n	8009e36 <xTaskIncrementTick+0x4a>
	__asm volatile
 8009e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e22:	f383 8811 	msr	BASEPRI, r3
 8009e26:	f3bf 8f6f 	isb	sy
 8009e2a:	f3bf 8f4f 	dsb	sy
 8009e2e:	603b      	str	r3, [r7, #0]
}
 8009e30:	bf00      	nop
 8009e32:	bf00      	nop
 8009e34:	e7fd      	b.n	8009e32 <xTaskIncrementTick+0x46>
 8009e36:	4b44      	ldr	r3, [pc, #272]	@ (8009f48 <xTaskIncrementTick+0x15c>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	60fb      	str	r3, [r7, #12]
 8009e3c:	4b43      	ldr	r3, [pc, #268]	@ (8009f4c <xTaskIncrementTick+0x160>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a41      	ldr	r2, [pc, #260]	@ (8009f48 <xTaskIncrementTick+0x15c>)
 8009e42:	6013      	str	r3, [r2, #0]
 8009e44:	4a41      	ldr	r2, [pc, #260]	@ (8009f4c <xTaskIncrementTick+0x160>)
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	6013      	str	r3, [r2, #0]
 8009e4a:	4b41      	ldr	r3, [pc, #260]	@ (8009f50 <xTaskIncrementTick+0x164>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	3301      	adds	r3, #1
 8009e50:	4a3f      	ldr	r2, [pc, #252]	@ (8009f50 <xTaskIncrementTick+0x164>)
 8009e52:	6013      	str	r3, [r2, #0]
 8009e54:	f000 fae8 	bl	800a428 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e58:	4b3e      	ldr	r3, [pc, #248]	@ (8009f54 <xTaskIncrementTick+0x168>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	693a      	ldr	r2, [r7, #16]
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d34e      	bcc.n	8009f00 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e62:	4b39      	ldr	r3, [pc, #228]	@ (8009f48 <xTaskIncrementTick+0x15c>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d101      	bne.n	8009e70 <xTaskIncrementTick+0x84>
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e000      	b.n	8009e72 <xTaskIncrementTick+0x86>
 8009e70:	2300      	movs	r3, #0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d004      	beq.n	8009e80 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e76:	4b37      	ldr	r3, [pc, #220]	@ (8009f54 <xTaskIncrementTick+0x168>)
 8009e78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009e7c:	601a      	str	r2, [r3, #0]
					break;
 8009e7e:	e03f      	b.n	8009f00 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009e80:	4b31      	ldr	r3, [pc, #196]	@ (8009f48 <xTaskIncrementTick+0x15c>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e90:	693a      	ldr	r2, [r7, #16]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d203      	bcs.n	8009ea0 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e98:	4a2e      	ldr	r2, [pc, #184]	@ (8009f54 <xTaskIncrementTick+0x168>)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6013      	str	r3, [r2, #0]
						break;
 8009e9e:	e02f      	b.n	8009f00 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	3304      	adds	r3, #4
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7fe ff69 	bl	8008d7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d004      	beq.n	8009ebc <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	3318      	adds	r3, #24
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7fe ff60 	bl	8008d7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ec0:	4b25      	ldr	r3, [pc, #148]	@ (8009f58 <xTaskIncrementTick+0x16c>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d903      	bls.n	8009ed0 <xTaskIncrementTick+0xe4>
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ecc:	4a22      	ldr	r2, [pc, #136]	@ (8009f58 <xTaskIncrementTick+0x16c>)
 8009ece:	6013      	str	r3, [r2, #0]
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ed4:	4613      	mov	r3, r2
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	4413      	add	r3, r2
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	4a1f      	ldr	r2, [pc, #124]	@ (8009f5c <xTaskIncrementTick+0x170>)
 8009ede:	441a      	add	r2, r3
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	3304      	adds	r3, #4
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	4610      	mov	r0, r2
 8009ee8:	f7fe feeb 	bl	8008cc2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8009f60 <xTaskIncrementTick+0x174>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d3b3      	bcc.n	8009e62 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009efa:	2301      	movs	r3, #1
 8009efc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009efe:	e7b0      	b.n	8009e62 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009f00:	4b17      	ldr	r3, [pc, #92]	@ (8009f60 <xTaskIncrementTick+0x174>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f06:	4915      	ldr	r1, [pc, #84]	@ (8009f5c <xTaskIncrementTick+0x170>)
 8009f08:	4613      	mov	r3, r2
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	4413      	add	r3, r2
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	440b      	add	r3, r1
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d907      	bls.n	8009f28 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	617b      	str	r3, [r7, #20]
 8009f1c:	e004      	b.n	8009f28 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009f1e:	4b11      	ldr	r3, [pc, #68]	@ (8009f64 <xTaskIncrementTick+0x178>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	3301      	adds	r3, #1
 8009f24:	4a0f      	ldr	r2, [pc, #60]	@ (8009f64 <xTaskIncrementTick+0x178>)
 8009f26:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009f28:	4b0f      	ldr	r3, [pc, #60]	@ (8009f68 <xTaskIncrementTick+0x17c>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d001      	beq.n	8009f34 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8009f30:	2301      	movs	r3, #1
 8009f32:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009f34:	697b      	ldr	r3, [r7, #20]
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3718      	adds	r7, #24
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	20001334 	.word	0x20001334
 8009f44:	20001310 	.word	0x20001310
 8009f48:	200012c4 	.word	0x200012c4
 8009f4c:	200012c8 	.word	0x200012c8
 8009f50:	20001324 	.word	0x20001324
 8009f54:	2000132c 	.word	0x2000132c
 8009f58:	20001314 	.word	0x20001314
 8009f5c:	20000e3c 	.word	0x20000e3c
 8009f60:	20000e38 	.word	0x20000e38
 8009f64:	2000131c 	.word	0x2000131c
 8009f68:	20001320 	.word	0x20001320

08009f6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b085      	sub	sp, #20
 8009f70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f72:	4b2b      	ldr	r3, [pc, #172]	@ (800a020 <vTaskSwitchContext+0xb4>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d003      	beq.n	8009f82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f7a:	4b2a      	ldr	r3, [pc, #168]	@ (800a024 <vTaskSwitchContext+0xb8>)
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f80:	e047      	b.n	800a012 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8009f82:	4b28      	ldr	r3, [pc, #160]	@ (800a024 <vTaskSwitchContext+0xb8>)
 8009f84:	2200      	movs	r2, #0
 8009f86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009f88:	4b27      	ldr	r3, [pc, #156]	@ (800a028 <vTaskSwitchContext+0xbc>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	60fb      	str	r3, [r7, #12]
 8009f8e:	e011      	b.n	8009fb4 <vTaskSwitchContext+0x48>
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d10b      	bne.n	8009fae <vTaskSwitchContext+0x42>
	__asm volatile
 8009f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f9a:	f383 8811 	msr	BASEPRI, r3
 8009f9e:	f3bf 8f6f 	isb	sy
 8009fa2:	f3bf 8f4f 	dsb	sy
 8009fa6:	607b      	str	r3, [r7, #4]
}
 8009fa8:	bf00      	nop
 8009faa:	bf00      	nop
 8009fac:	e7fd      	b.n	8009faa <vTaskSwitchContext+0x3e>
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	3b01      	subs	r3, #1
 8009fb2:	60fb      	str	r3, [r7, #12]
 8009fb4:	491d      	ldr	r1, [pc, #116]	@ (800a02c <vTaskSwitchContext+0xc0>)
 8009fb6:	68fa      	ldr	r2, [r7, #12]
 8009fb8:	4613      	mov	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	4413      	add	r3, r2
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	440b      	add	r3, r1
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d0e3      	beq.n	8009f90 <vTaskSwitchContext+0x24>
 8009fc8:	68fa      	ldr	r2, [r7, #12]
 8009fca:	4613      	mov	r3, r2
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	4413      	add	r3, r2
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	4a16      	ldr	r2, [pc, #88]	@ (800a02c <vTaskSwitchContext+0xc0>)
 8009fd4:	4413      	add	r3, r2
 8009fd6:	60bb      	str	r3, [r7, #8]
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	685a      	ldr	r2, [r3, #4]
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	605a      	str	r2, [r3, #4]
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	685a      	ldr	r2, [r3, #4]
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	3308      	adds	r3, #8
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d104      	bne.n	8009ff8 <vTaskSwitchContext+0x8c>
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	685a      	ldr	r2, [r3, #4]
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	605a      	str	r2, [r3, #4]
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	4a0c      	ldr	r2, [pc, #48]	@ (800a030 <vTaskSwitchContext+0xc4>)
 800a000:	6013      	str	r3, [r2, #0]
 800a002:	4a09      	ldr	r2, [pc, #36]	@ (800a028 <vTaskSwitchContext+0xbc>)
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a008:	4b09      	ldr	r3, [pc, #36]	@ (800a030 <vTaskSwitchContext+0xc4>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	3354      	adds	r3, #84	@ 0x54
 800a00e:	4a09      	ldr	r2, [pc, #36]	@ (800a034 <vTaskSwitchContext+0xc8>)
 800a010:	6013      	str	r3, [r2, #0]
}
 800a012:	bf00      	nop
 800a014:	3714      	adds	r7, #20
 800a016:	46bd      	mov	sp, r7
 800a018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01c:	4770      	bx	lr
 800a01e:	bf00      	nop
 800a020:	20001334 	.word	0x20001334
 800a024:	20001320 	.word	0x20001320
 800a028:	20001314 	.word	0x20001314
 800a02c:	20000e3c 	.word	0x20000e3c
 800a030:	20000e38 	.word	0x20000e38
 800a034:	20000024 	.word	0x20000024

0800a038 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d10b      	bne.n	800a060 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a04c:	f383 8811 	msr	BASEPRI, r3
 800a050:	f3bf 8f6f 	isb	sy
 800a054:	f3bf 8f4f 	dsb	sy
 800a058:	60fb      	str	r3, [r7, #12]
}
 800a05a:	bf00      	nop
 800a05c:	bf00      	nop
 800a05e:	e7fd      	b.n	800a05c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a060:	4b07      	ldr	r3, [pc, #28]	@ (800a080 <vTaskPlaceOnEventList+0x48>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	3318      	adds	r3, #24
 800a066:	4619      	mov	r1, r3
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f7fe fe4e 	bl	8008d0a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a06e:	2101      	movs	r1, #1
 800a070:	6838      	ldr	r0, [r7, #0]
 800a072:	f000 fa8d 	bl	800a590 <prvAddCurrentTaskToDelayedList>
}
 800a076:	bf00      	nop
 800a078:	3710      	adds	r7, #16
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	20000e38 	.word	0x20000e38

0800a084 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a084:	b580      	push	{r7, lr}
 800a086:	b086      	sub	sp, #24
 800a088:	af00      	add	r7, sp, #0
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d10b      	bne.n	800a0ae <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a09a:	f383 8811 	msr	BASEPRI, r3
 800a09e:	f3bf 8f6f 	isb	sy
 800a0a2:	f3bf 8f4f 	dsb	sy
 800a0a6:	617b      	str	r3, [r7, #20]
}
 800a0a8:	bf00      	nop
 800a0aa:	bf00      	nop
 800a0ac:	e7fd      	b.n	800a0aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a0ae:	4b0a      	ldr	r3, [pc, #40]	@ (800a0d8 <vTaskPlaceOnEventListRestricted+0x54>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	3318      	adds	r3, #24
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	68f8      	ldr	r0, [r7, #12]
 800a0b8:	f7fe fe03 	bl	8008cc2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d002      	beq.n	800a0c8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a0c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a0c6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a0c8:	6879      	ldr	r1, [r7, #4]
 800a0ca:	68b8      	ldr	r0, [r7, #8]
 800a0cc:	f000 fa60 	bl	800a590 <prvAddCurrentTaskToDelayedList>
	}
 800a0d0:	bf00      	nop
 800a0d2:	3718      	adds	r7, #24
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	20000e38 	.word	0x20000e38

0800a0dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b086      	sub	sp, #24
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d10b      	bne.n	800a10a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a0f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f6:	f383 8811 	msr	BASEPRI, r3
 800a0fa:	f3bf 8f6f 	isb	sy
 800a0fe:	f3bf 8f4f 	dsb	sy
 800a102:	60fb      	str	r3, [r7, #12]
}
 800a104:	bf00      	nop
 800a106:	bf00      	nop
 800a108:	e7fd      	b.n	800a106 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	3318      	adds	r3, #24
 800a10e:	4618      	mov	r0, r3
 800a110:	f7fe fe34 	bl	8008d7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a114:	4b1d      	ldr	r3, [pc, #116]	@ (800a18c <xTaskRemoveFromEventList+0xb0>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d11d      	bne.n	800a158 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	3304      	adds	r3, #4
 800a120:	4618      	mov	r0, r3
 800a122:	f7fe fe2b 	bl	8008d7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a12a:	4b19      	ldr	r3, [pc, #100]	@ (800a190 <xTaskRemoveFromEventList+0xb4>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d903      	bls.n	800a13a <xTaskRemoveFromEventList+0x5e>
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a136:	4a16      	ldr	r2, [pc, #88]	@ (800a190 <xTaskRemoveFromEventList+0xb4>)
 800a138:	6013      	str	r3, [r2, #0]
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a13e:	4613      	mov	r3, r2
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	4413      	add	r3, r2
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	4a13      	ldr	r2, [pc, #76]	@ (800a194 <xTaskRemoveFromEventList+0xb8>)
 800a148:	441a      	add	r2, r3
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	3304      	adds	r3, #4
 800a14e:	4619      	mov	r1, r3
 800a150:	4610      	mov	r0, r2
 800a152:	f7fe fdb6 	bl	8008cc2 <vListInsertEnd>
 800a156:	e005      	b.n	800a164 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	3318      	adds	r3, #24
 800a15c:	4619      	mov	r1, r3
 800a15e:	480e      	ldr	r0, [pc, #56]	@ (800a198 <xTaskRemoveFromEventList+0xbc>)
 800a160:	f7fe fdaf 	bl	8008cc2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a168:	4b0c      	ldr	r3, [pc, #48]	@ (800a19c <xTaskRemoveFromEventList+0xc0>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a16e:	429a      	cmp	r2, r3
 800a170:	d905      	bls.n	800a17e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a172:	2301      	movs	r3, #1
 800a174:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a176:	4b0a      	ldr	r3, [pc, #40]	@ (800a1a0 <xTaskRemoveFromEventList+0xc4>)
 800a178:	2201      	movs	r2, #1
 800a17a:	601a      	str	r2, [r3, #0]
 800a17c:	e001      	b.n	800a182 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a17e:	2300      	movs	r3, #0
 800a180:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a182:	697b      	ldr	r3, [r7, #20]
}
 800a184:	4618      	mov	r0, r3
 800a186:	3718      	adds	r7, #24
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	20001334 	.word	0x20001334
 800a190:	20001314 	.word	0x20001314
 800a194:	20000e3c 	.word	0x20000e3c
 800a198:	200012cc 	.word	0x200012cc
 800a19c:	20000e38 	.word	0x20000e38
 800a1a0:	20001320 	.word	0x20001320

0800a1a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a1ac:	4b06      	ldr	r3, [pc, #24]	@ (800a1c8 <vTaskInternalSetTimeOutState+0x24>)
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a1b4:	4b05      	ldr	r3, [pc, #20]	@ (800a1cc <vTaskInternalSetTimeOutState+0x28>)
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	605a      	str	r2, [r3, #4]
}
 800a1bc:	bf00      	nop
 800a1be:	370c      	adds	r7, #12
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr
 800a1c8:	20001324 	.word	0x20001324
 800a1cc:	20001310 	.word	0x20001310

0800a1d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b088      	sub	sp, #32
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d10b      	bne.n	800a1f8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a1e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1e4:	f383 8811 	msr	BASEPRI, r3
 800a1e8:	f3bf 8f6f 	isb	sy
 800a1ec:	f3bf 8f4f 	dsb	sy
 800a1f0:	613b      	str	r3, [r7, #16]
}
 800a1f2:	bf00      	nop
 800a1f4:	bf00      	nop
 800a1f6:	e7fd      	b.n	800a1f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d10b      	bne.n	800a216 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a1fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a202:	f383 8811 	msr	BASEPRI, r3
 800a206:	f3bf 8f6f 	isb	sy
 800a20a:	f3bf 8f4f 	dsb	sy
 800a20e:	60fb      	str	r3, [r7, #12]
}
 800a210:	bf00      	nop
 800a212:	bf00      	nop
 800a214:	e7fd      	b.n	800a212 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a216:	f000 fe5f 	bl	800aed8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a21a:	4b1d      	ldr	r3, [pc, #116]	@ (800a290 <xTaskCheckForTimeOut+0xc0>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	69ba      	ldr	r2, [r7, #24]
 800a226:	1ad3      	subs	r3, r2, r3
 800a228:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a232:	d102      	bne.n	800a23a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a234:	2300      	movs	r3, #0
 800a236:	61fb      	str	r3, [r7, #28]
 800a238:	e023      	b.n	800a282 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	4b15      	ldr	r3, [pc, #84]	@ (800a294 <xTaskCheckForTimeOut+0xc4>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	429a      	cmp	r2, r3
 800a244:	d007      	beq.n	800a256 <xTaskCheckForTimeOut+0x86>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	69ba      	ldr	r2, [r7, #24]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d302      	bcc.n	800a256 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a250:	2301      	movs	r3, #1
 800a252:	61fb      	str	r3, [r7, #28]
 800a254:	e015      	b.n	800a282 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	697a      	ldr	r2, [r7, #20]
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d20b      	bcs.n	800a278 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	1ad2      	subs	r2, r2, r3
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f7ff ff99 	bl	800a1a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a272:	2300      	movs	r3, #0
 800a274:	61fb      	str	r3, [r7, #28]
 800a276:	e004      	b.n	800a282 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	2200      	movs	r2, #0
 800a27c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a27e:	2301      	movs	r3, #1
 800a280:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a282:	f000 fe5b 	bl	800af3c <vPortExitCritical>

	return xReturn;
 800a286:	69fb      	ldr	r3, [r7, #28]
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3720      	adds	r7, #32
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	20001310 	.word	0x20001310
 800a294:	20001324 	.word	0x20001324

0800a298 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a298:	b480      	push	{r7}
 800a29a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a29c:	4b03      	ldr	r3, [pc, #12]	@ (800a2ac <vTaskMissedYield+0x14>)
 800a29e:	2201      	movs	r2, #1
 800a2a0:	601a      	str	r2, [r3, #0]
}
 800a2a2:	bf00      	nop
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr
 800a2ac:	20001320 	.word	0x20001320

0800a2b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a2b8:	f000 f852 	bl	800a360 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a2bc:	4b06      	ldr	r3, [pc, #24]	@ (800a2d8 <prvIdleTask+0x28>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d9f9      	bls.n	800a2b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a2c4:	4b05      	ldr	r3, [pc, #20]	@ (800a2dc <prvIdleTask+0x2c>)
 800a2c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2ca:	601a      	str	r2, [r3, #0]
 800a2cc:	f3bf 8f4f 	dsb	sy
 800a2d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a2d4:	e7f0      	b.n	800a2b8 <prvIdleTask+0x8>
 800a2d6:	bf00      	nop
 800a2d8:	20000e3c 	.word	0x20000e3c
 800a2dc:	e000ed04 	.word	0xe000ed04

0800a2e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	607b      	str	r3, [r7, #4]
 800a2ea:	e00c      	b.n	800a306 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	4413      	add	r3, r2
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	4a12      	ldr	r2, [pc, #72]	@ (800a340 <prvInitialiseTaskLists+0x60>)
 800a2f8:	4413      	add	r3, r2
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7fe fcb4 	bl	8008c68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	3301      	adds	r3, #1
 800a304:	607b      	str	r3, [r7, #4]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2b37      	cmp	r3, #55	@ 0x37
 800a30a:	d9ef      	bls.n	800a2ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a30c:	480d      	ldr	r0, [pc, #52]	@ (800a344 <prvInitialiseTaskLists+0x64>)
 800a30e:	f7fe fcab 	bl	8008c68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a312:	480d      	ldr	r0, [pc, #52]	@ (800a348 <prvInitialiseTaskLists+0x68>)
 800a314:	f7fe fca8 	bl	8008c68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a318:	480c      	ldr	r0, [pc, #48]	@ (800a34c <prvInitialiseTaskLists+0x6c>)
 800a31a:	f7fe fca5 	bl	8008c68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a31e:	480c      	ldr	r0, [pc, #48]	@ (800a350 <prvInitialiseTaskLists+0x70>)
 800a320:	f7fe fca2 	bl	8008c68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a324:	480b      	ldr	r0, [pc, #44]	@ (800a354 <prvInitialiseTaskLists+0x74>)
 800a326:	f7fe fc9f 	bl	8008c68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a32a:	4b0b      	ldr	r3, [pc, #44]	@ (800a358 <prvInitialiseTaskLists+0x78>)
 800a32c:	4a05      	ldr	r2, [pc, #20]	@ (800a344 <prvInitialiseTaskLists+0x64>)
 800a32e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a330:	4b0a      	ldr	r3, [pc, #40]	@ (800a35c <prvInitialiseTaskLists+0x7c>)
 800a332:	4a05      	ldr	r2, [pc, #20]	@ (800a348 <prvInitialiseTaskLists+0x68>)
 800a334:	601a      	str	r2, [r3, #0]
}
 800a336:	bf00      	nop
 800a338:	3708      	adds	r7, #8
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	20000e3c 	.word	0x20000e3c
 800a344:	2000129c 	.word	0x2000129c
 800a348:	200012b0 	.word	0x200012b0
 800a34c:	200012cc 	.word	0x200012cc
 800a350:	200012e0 	.word	0x200012e0
 800a354:	200012f8 	.word	0x200012f8
 800a358:	200012c4 	.word	0x200012c4
 800a35c:	200012c8 	.word	0x200012c8

0800a360 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a366:	e019      	b.n	800a39c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a368:	f000 fdb6 	bl	800aed8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a36c:	4b10      	ldr	r3, [pc, #64]	@ (800a3b0 <prvCheckTasksWaitingTermination+0x50>)
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	3304      	adds	r3, #4
 800a378:	4618      	mov	r0, r3
 800a37a:	f7fe fcff 	bl	8008d7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a37e:	4b0d      	ldr	r3, [pc, #52]	@ (800a3b4 <prvCheckTasksWaitingTermination+0x54>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	3b01      	subs	r3, #1
 800a384:	4a0b      	ldr	r2, [pc, #44]	@ (800a3b4 <prvCheckTasksWaitingTermination+0x54>)
 800a386:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a388:	4b0b      	ldr	r3, [pc, #44]	@ (800a3b8 <prvCheckTasksWaitingTermination+0x58>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	3b01      	subs	r3, #1
 800a38e:	4a0a      	ldr	r2, [pc, #40]	@ (800a3b8 <prvCheckTasksWaitingTermination+0x58>)
 800a390:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a392:	f000 fdd3 	bl	800af3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 f810 	bl	800a3bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a39c:	4b06      	ldr	r3, [pc, #24]	@ (800a3b8 <prvCheckTasksWaitingTermination+0x58>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d1e1      	bne.n	800a368 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a3a4:	bf00      	nop
 800a3a6:	bf00      	nop
 800a3a8:	3708      	adds	r7, #8
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	200012e0 	.word	0x200012e0
 800a3b4:	2000130c 	.word	0x2000130c
 800a3b8:	200012f4 	.word	0x200012f4

0800a3bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	3354      	adds	r3, #84	@ 0x54
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f002 f84f 	bl	800c46c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d108      	bne.n	800a3ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f000 ff65 	bl	800b2ac <vPortFree>
				vPortFree( pxTCB );
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 ff62 	bl	800b2ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a3e8:	e019      	b.n	800a41e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d103      	bne.n	800a3fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 ff59 	bl	800b2ac <vPortFree>
	}
 800a3fa:	e010      	b.n	800a41e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a402:	2b02      	cmp	r3, #2
 800a404:	d00b      	beq.n	800a41e <prvDeleteTCB+0x62>
	__asm volatile
 800a406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a40a:	f383 8811 	msr	BASEPRI, r3
 800a40e:	f3bf 8f6f 	isb	sy
 800a412:	f3bf 8f4f 	dsb	sy
 800a416:	60fb      	str	r3, [r7, #12]
}
 800a418:	bf00      	nop
 800a41a:	bf00      	nop
 800a41c:	e7fd      	b.n	800a41a <prvDeleteTCB+0x5e>
	}
 800a41e:	bf00      	nop
 800a420:	3710      	adds	r7, #16
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
	...

0800a428 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a42e:	4b0f      	ldr	r3, [pc, #60]	@ (800a46c <prvResetNextTaskUnblockTime+0x44>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d101      	bne.n	800a43c <prvResetNextTaskUnblockTime+0x14>
 800a438:	2301      	movs	r3, #1
 800a43a:	e000      	b.n	800a43e <prvResetNextTaskUnblockTime+0x16>
 800a43c:	2300      	movs	r3, #0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d004      	beq.n	800a44c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a442:	4b0b      	ldr	r3, [pc, #44]	@ (800a470 <prvResetNextTaskUnblockTime+0x48>)
 800a444:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a448:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a44a:	e008      	b.n	800a45e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a44c:	4b07      	ldr	r3, [pc, #28]	@ (800a46c <prvResetNextTaskUnblockTime+0x44>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	4a05      	ldr	r2, [pc, #20]	@ (800a470 <prvResetNextTaskUnblockTime+0x48>)
 800a45c:	6013      	str	r3, [r2, #0]
}
 800a45e:	bf00      	nop
 800a460:	370c      	adds	r7, #12
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr
 800a46a:	bf00      	nop
 800a46c:	200012c4 	.word	0x200012c4
 800a470:	2000132c 	.word	0x2000132c

0800a474 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a47a:	4b0b      	ldr	r3, [pc, #44]	@ (800a4a8 <xTaskGetSchedulerState+0x34>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d102      	bne.n	800a488 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a482:	2301      	movs	r3, #1
 800a484:	607b      	str	r3, [r7, #4]
 800a486:	e008      	b.n	800a49a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a488:	4b08      	ldr	r3, [pc, #32]	@ (800a4ac <xTaskGetSchedulerState+0x38>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d102      	bne.n	800a496 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a490:	2302      	movs	r3, #2
 800a492:	607b      	str	r3, [r7, #4]
 800a494:	e001      	b.n	800a49a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a496:	2300      	movs	r3, #0
 800a498:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a49a:	687b      	ldr	r3, [r7, #4]
	}
 800a49c:	4618      	mov	r0, r3
 800a49e:	370c      	adds	r7, #12
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr
 800a4a8:	20001318 	.word	0x20001318
 800a4ac:	20001334 	.word	0x20001334

0800a4b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b086      	sub	sp, #24
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d058      	beq.n	800a578 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a4c6:	4b2f      	ldr	r3, [pc, #188]	@ (800a584 <xTaskPriorityDisinherit+0xd4>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	693a      	ldr	r2, [r7, #16]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d00b      	beq.n	800a4e8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a4d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4d4:	f383 8811 	msr	BASEPRI, r3
 800a4d8:	f3bf 8f6f 	isb	sy
 800a4dc:	f3bf 8f4f 	dsb	sy
 800a4e0:	60fb      	str	r3, [r7, #12]
}
 800a4e2:	bf00      	nop
 800a4e4:	bf00      	nop
 800a4e6:	e7fd      	b.n	800a4e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d10b      	bne.n	800a508 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a4f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	60bb      	str	r3, [r7, #8]
}
 800a502:	bf00      	nop
 800a504:	bf00      	nop
 800a506:	e7fd      	b.n	800a504 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a50c:	1e5a      	subs	r2, r3, #1
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d02c      	beq.n	800a578 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a522:	2b00      	cmp	r3, #0
 800a524:	d128      	bne.n	800a578 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	3304      	adds	r3, #4
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7fe fc26 	bl	8008d7c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a53c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a548:	4b0f      	ldr	r3, [pc, #60]	@ (800a588 <xTaskPriorityDisinherit+0xd8>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d903      	bls.n	800a558 <xTaskPriorityDisinherit+0xa8>
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a554:	4a0c      	ldr	r2, [pc, #48]	@ (800a588 <xTaskPriorityDisinherit+0xd8>)
 800a556:	6013      	str	r3, [r2, #0]
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a55c:	4613      	mov	r3, r2
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	4413      	add	r3, r2
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	4a09      	ldr	r2, [pc, #36]	@ (800a58c <xTaskPriorityDisinherit+0xdc>)
 800a566:	441a      	add	r2, r3
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	3304      	adds	r3, #4
 800a56c:	4619      	mov	r1, r3
 800a56e:	4610      	mov	r0, r2
 800a570:	f7fe fba7 	bl	8008cc2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a574:	2301      	movs	r3, #1
 800a576:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a578:	697b      	ldr	r3, [r7, #20]
	}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3718      	adds	r7, #24
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	20000e38 	.word	0x20000e38
 800a588:	20001314 	.word	0x20001314
 800a58c:	20000e3c 	.word	0x20000e3c

0800a590 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a59a:	4b21      	ldr	r3, [pc, #132]	@ (800a620 <prvAddCurrentTaskToDelayedList+0x90>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5a0:	4b20      	ldr	r3, [pc, #128]	@ (800a624 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	3304      	adds	r3, #4
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7fe fbe8 	bl	8008d7c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a5b2:	d10a      	bne.n	800a5ca <prvAddCurrentTaskToDelayedList+0x3a>
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d007      	beq.n	800a5ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5ba:	4b1a      	ldr	r3, [pc, #104]	@ (800a624 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	3304      	adds	r3, #4
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	4819      	ldr	r0, [pc, #100]	@ (800a628 <prvAddCurrentTaskToDelayedList+0x98>)
 800a5c4:	f7fe fb7d 	bl	8008cc2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a5c8:	e026      	b.n	800a618 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a5ca:	68fa      	ldr	r2, [r7, #12]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a5d2:	4b14      	ldr	r3, [pc, #80]	@ (800a624 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	68ba      	ldr	r2, [r7, #8]
 800a5d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a5da:	68ba      	ldr	r2, [r7, #8]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d209      	bcs.n	800a5f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5e2:	4b12      	ldr	r3, [pc, #72]	@ (800a62c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	4b0f      	ldr	r3, [pc, #60]	@ (800a624 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	3304      	adds	r3, #4
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	4610      	mov	r0, r2
 800a5f0:	f7fe fb8b 	bl	8008d0a <vListInsert>
}
 800a5f4:	e010      	b.n	800a618 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5f6:	4b0e      	ldr	r3, [pc, #56]	@ (800a630 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	4b0a      	ldr	r3, [pc, #40]	@ (800a624 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	3304      	adds	r3, #4
 800a600:	4619      	mov	r1, r3
 800a602:	4610      	mov	r0, r2
 800a604:	f7fe fb81 	bl	8008d0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a608:	4b0a      	ldr	r3, [pc, #40]	@ (800a634 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	68ba      	ldr	r2, [r7, #8]
 800a60e:	429a      	cmp	r2, r3
 800a610:	d202      	bcs.n	800a618 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a612:	4a08      	ldr	r2, [pc, #32]	@ (800a634 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	6013      	str	r3, [r2, #0]
}
 800a618:	bf00      	nop
 800a61a:	3710      	adds	r7, #16
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	20001310 	.word	0x20001310
 800a624:	20000e38 	.word	0x20000e38
 800a628:	200012f8 	.word	0x200012f8
 800a62c:	200012c8 	.word	0x200012c8
 800a630:	200012c4 	.word	0x200012c4
 800a634:	2000132c 	.word	0x2000132c

0800a638 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b08a      	sub	sp, #40	@ 0x28
 800a63c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a63e:	2300      	movs	r3, #0
 800a640:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a642:	f000 fad9 	bl	800abf8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a646:	4b1d      	ldr	r3, [pc, #116]	@ (800a6bc <xTimerCreateTimerTask+0x84>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d021      	beq.n	800a692 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a64e:	2300      	movs	r3, #0
 800a650:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a652:	2300      	movs	r3, #0
 800a654:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a656:	1d3a      	adds	r2, r7, #4
 800a658:	f107 0108 	add.w	r1, r7, #8
 800a65c:	f107 030c 	add.w	r3, r7, #12
 800a660:	4618      	mov	r0, r3
 800a662:	f7fe fae7 	bl	8008c34 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a666:	6879      	ldr	r1, [r7, #4]
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	68fa      	ldr	r2, [r7, #12]
 800a66c:	9202      	str	r2, [sp, #8]
 800a66e:	9301      	str	r3, [sp, #4]
 800a670:	2302      	movs	r3, #2
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	2300      	movs	r3, #0
 800a676:	460a      	mov	r2, r1
 800a678:	4911      	ldr	r1, [pc, #68]	@ (800a6c0 <xTimerCreateTimerTask+0x88>)
 800a67a:	4812      	ldr	r0, [pc, #72]	@ (800a6c4 <xTimerCreateTimerTask+0x8c>)
 800a67c:	f7ff f8a0 	bl	80097c0 <xTaskCreateStatic>
 800a680:	4603      	mov	r3, r0
 800a682:	4a11      	ldr	r2, [pc, #68]	@ (800a6c8 <xTimerCreateTimerTask+0x90>)
 800a684:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a686:	4b10      	ldr	r3, [pc, #64]	@ (800a6c8 <xTimerCreateTimerTask+0x90>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d001      	beq.n	800a692 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a68e:	2301      	movs	r3, #1
 800a690:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d10b      	bne.n	800a6b0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a69c:	f383 8811 	msr	BASEPRI, r3
 800a6a0:	f3bf 8f6f 	isb	sy
 800a6a4:	f3bf 8f4f 	dsb	sy
 800a6a8:	613b      	str	r3, [r7, #16]
}
 800a6aa:	bf00      	nop
 800a6ac:	bf00      	nop
 800a6ae:	e7fd      	b.n	800a6ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a6b0:	697b      	ldr	r3, [r7, #20]
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3718      	adds	r7, #24
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	20001368 	.word	0x20001368
 800a6c0:	0800fd44 	.word	0x0800fd44
 800a6c4:	0800a7ed 	.word	0x0800a7ed
 800a6c8:	2000136c 	.word	0x2000136c

0800a6cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b08a      	sub	sp, #40	@ 0x28
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	607a      	str	r2, [r7, #4]
 800a6d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d10b      	bne.n	800a6fc <xTimerGenericCommand+0x30>
	__asm volatile
 800a6e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6e8:	f383 8811 	msr	BASEPRI, r3
 800a6ec:	f3bf 8f6f 	isb	sy
 800a6f0:	f3bf 8f4f 	dsb	sy
 800a6f4:	623b      	str	r3, [r7, #32]
}
 800a6f6:	bf00      	nop
 800a6f8:	bf00      	nop
 800a6fa:	e7fd      	b.n	800a6f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a6fc:	4b19      	ldr	r3, [pc, #100]	@ (800a764 <xTimerGenericCommand+0x98>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d02a      	beq.n	800a75a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	2b05      	cmp	r3, #5
 800a714:	dc18      	bgt.n	800a748 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a716:	f7ff fead 	bl	800a474 <xTaskGetSchedulerState>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b02      	cmp	r3, #2
 800a71e:	d109      	bne.n	800a734 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a720:	4b10      	ldr	r3, [pc, #64]	@ (800a764 <xTimerGenericCommand+0x98>)
 800a722:	6818      	ldr	r0, [r3, #0]
 800a724:	f107 0110 	add.w	r1, r7, #16
 800a728:	2300      	movs	r3, #0
 800a72a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a72c:	f7fe fc5a 	bl	8008fe4 <xQueueGenericSend>
 800a730:	6278      	str	r0, [r7, #36]	@ 0x24
 800a732:	e012      	b.n	800a75a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a734:	4b0b      	ldr	r3, [pc, #44]	@ (800a764 <xTimerGenericCommand+0x98>)
 800a736:	6818      	ldr	r0, [r3, #0]
 800a738:	f107 0110 	add.w	r1, r7, #16
 800a73c:	2300      	movs	r3, #0
 800a73e:	2200      	movs	r2, #0
 800a740:	f7fe fc50 	bl	8008fe4 <xQueueGenericSend>
 800a744:	6278      	str	r0, [r7, #36]	@ 0x24
 800a746:	e008      	b.n	800a75a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a748:	4b06      	ldr	r3, [pc, #24]	@ (800a764 <xTimerGenericCommand+0x98>)
 800a74a:	6818      	ldr	r0, [r3, #0]
 800a74c:	f107 0110 	add.w	r1, r7, #16
 800a750:	2300      	movs	r3, #0
 800a752:	683a      	ldr	r2, [r7, #0]
 800a754:	f7fe fd48 	bl	80091e8 <xQueueGenericSendFromISR>
 800a758:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3728      	adds	r7, #40	@ 0x28
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}
 800a764:	20001368 	.word	0x20001368

0800a768 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b088      	sub	sp, #32
 800a76c:	af02      	add	r7, sp, #8
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a772:	4b1d      	ldr	r3, [pc, #116]	@ (800a7e8 <prvProcessExpiredTimer+0x80>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	68db      	ldr	r3, [r3, #12]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	3304      	adds	r3, #4
 800a780:	4618      	mov	r0, r3
 800a782:	f7fe fafb 	bl	8008d7c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	69db      	ldr	r3, [r3, #28]
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d123      	bne.n	800a7d6 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	699a      	ldr	r2, [r3, #24]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	18d1      	adds	r1, r2, r3
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	683a      	ldr	r2, [r7, #0]
 800a79a:	6978      	ldr	r0, [r7, #20]
 800a79c:	f000 f8cc 	bl	800a938 <prvInsertTimerInActiveList>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d017      	beq.n	800a7d6 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	9300      	str	r3, [sp, #0]
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	2100      	movs	r1, #0
 800a7b0:	6978      	ldr	r0, [r7, #20]
 800a7b2:	f7ff ff8b 	bl	800a6cc <xTimerGenericCommand>
 800a7b6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d10b      	bne.n	800a7d6 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 800a7be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7c2:	f383 8811 	msr	BASEPRI, r3
 800a7c6:	f3bf 8f6f 	isb	sy
 800a7ca:	f3bf 8f4f 	dsb	sy
 800a7ce:	60fb      	str	r3, [r7, #12]
}
 800a7d0:	bf00      	nop
 800a7d2:	bf00      	nop
 800a7d4:	e7fd      	b.n	800a7d2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7da:	6978      	ldr	r0, [r7, #20]
 800a7dc:	4798      	blx	r3
}
 800a7de:	bf00      	nop
 800a7e0:	3718      	adds	r7, #24
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	20001360 	.word	0x20001360

0800a7ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a7f4:	f107 0308 	add.w	r3, r7, #8
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f000 f859 	bl	800a8b0 <prvGetNextExpireTime>
 800a7fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	4619      	mov	r1, r3
 800a804:	68f8      	ldr	r0, [r7, #12]
 800a806:	f000 f805 	bl	800a814 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a80a:	f000 f8d7 	bl	800a9bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a80e:	bf00      	nop
 800a810:	e7f0      	b.n	800a7f4 <prvTimerTask+0x8>
	...

0800a814 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a81e:	f7ff fa29 	bl	8009c74 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a822:	f107 0308 	add.w	r3, r7, #8
 800a826:	4618      	mov	r0, r3
 800a828:	f000 f866 	bl	800a8f8 <prvSampleTimeNow>
 800a82c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d130      	bne.n	800a896 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d10a      	bne.n	800a850 <prvProcessTimerOrBlockTask+0x3c>
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	429a      	cmp	r2, r3
 800a840:	d806      	bhi.n	800a850 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a842:	f7ff fa25 	bl	8009c90 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a846:	68f9      	ldr	r1, [r7, #12]
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f7ff ff8d 	bl	800a768 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a84e:	e024      	b.n	800a89a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d008      	beq.n	800a868 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a856:	4b13      	ldr	r3, [pc, #76]	@ (800a8a4 <prvProcessTimerOrBlockTask+0x90>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	bf0c      	ite	eq
 800a860:	2301      	moveq	r3, #1
 800a862:	2300      	movne	r3, #0
 800a864:	b2db      	uxtb	r3, r3
 800a866:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a868:	4b0f      	ldr	r3, [pc, #60]	@ (800a8a8 <prvProcessTimerOrBlockTask+0x94>)
 800a86a:	6818      	ldr	r0, [r3, #0]
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	1ad3      	subs	r3, r2, r3
 800a872:	683a      	ldr	r2, [r7, #0]
 800a874:	4619      	mov	r1, r3
 800a876:	f7fe ff6f 	bl	8009758 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a87a:	f7ff fa09 	bl	8009c90 <xTaskResumeAll>
 800a87e:	4603      	mov	r3, r0
 800a880:	2b00      	cmp	r3, #0
 800a882:	d10a      	bne.n	800a89a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a884:	4b09      	ldr	r3, [pc, #36]	@ (800a8ac <prvProcessTimerOrBlockTask+0x98>)
 800a886:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a88a:	601a      	str	r2, [r3, #0]
 800a88c:	f3bf 8f4f 	dsb	sy
 800a890:	f3bf 8f6f 	isb	sy
}
 800a894:	e001      	b.n	800a89a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a896:	f7ff f9fb 	bl	8009c90 <xTaskResumeAll>
}
 800a89a:	bf00      	nop
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	20001364 	.word	0x20001364
 800a8a8:	20001368 	.word	0x20001368
 800a8ac:	e000ed04 	.word	0xe000ed04

0800a8b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b085      	sub	sp, #20
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a8b8:	4b0e      	ldr	r3, [pc, #56]	@ (800a8f4 <prvGetNextExpireTime+0x44>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	bf0c      	ite	eq
 800a8c2:	2301      	moveq	r3, #1
 800a8c4:	2300      	movne	r3, #0
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d105      	bne.n	800a8e2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a8d6:	4b07      	ldr	r3, [pc, #28]	@ (800a8f4 <prvGetNextExpireTime+0x44>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	60fb      	str	r3, [r7, #12]
 800a8e0:	e001      	b.n	800a8e6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3714      	adds	r7, #20
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr
 800a8f4:	20001360 	.word	0x20001360

0800a8f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b084      	sub	sp, #16
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a900:	f7ff fa64 	bl	8009dcc <xTaskGetTickCount>
 800a904:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a906:	4b0b      	ldr	r3, [pc, #44]	@ (800a934 <prvSampleTimeNow+0x3c>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	68fa      	ldr	r2, [r7, #12]
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d205      	bcs.n	800a91c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a910:	f000 f910 	bl	800ab34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2201      	movs	r2, #1
 800a918:	601a      	str	r2, [r3, #0]
 800a91a:	e002      	b.n	800a922 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a922:	4a04      	ldr	r2, [pc, #16]	@ (800a934 <prvSampleTimeNow+0x3c>)
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a928:	68fb      	ldr	r3, [r7, #12]
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3710      	adds	r7, #16
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
 800a932:	bf00      	nop
 800a934:	20001370 	.word	0x20001370

0800a938 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b086      	sub	sp, #24
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	607a      	str	r2, [r7, #4]
 800a944:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a946:	2300      	movs	r3, #0
 800a948:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	68ba      	ldr	r2, [r7, #8]
 800a94e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	68fa      	ldr	r2, [r7, #12]
 800a954:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a956:	68ba      	ldr	r2, [r7, #8]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d812      	bhi.n	800a984 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	1ad2      	subs	r2, r2, r3
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	699b      	ldr	r3, [r3, #24]
 800a968:	429a      	cmp	r2, r3
 800a96a:	d302      	bcc.n	800a972 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a96c:	2301      	movs	r3, #1
 800a96e:	617b      	str	r3, [r7, #20]
 800a970:	e01b      	b.n	800a9aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a972:	4b10      	ldr	r3, [pc, #64]	@ (800a9b4 <prvInsertTimerInActiveList+0x7c>)
 800a974:	681a      	ldr	r2, [r3, #0]
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	3304      	adds	r3, #4
 800a97a:	4619      	mov	r1, r3
 800a97c:	4610      	mov	r0, r2
 800a97e:	f7fe f9c4 	bl	8008d0a <vListInsert>
 800a982:	e012      	b.n	800a9aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	429a      	cmp	r2, r3
 800a98a:	d206      	bcs.n	800a99a <prvInsertTimerInActiveList+0x62>
 800a98c:	68ba      	ldr	r2, [r7, #8]
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	429a      	cmp	r2, r3
 800a992:	d302      	bcc.n	800a99a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a994:	2301      	movs	r3, #1
 800a996:	617b      	str	r3, [r7, #20]
 800a998:	e007      	b.n	800a9aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a99a:	4b07      	ldr	r3, [pc, #28]	@ (800a9b8 <prvInsertTimerInActiveList+0x80>)
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	3304      	adds	r3, #4
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	4610      	mov	r0, r2
 800a9a6:	f7fe f9b0 	bl	8008d0a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a9aa:	697b      	ldr	r3, [r7, #20]
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3718      	adds	r7, #24
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}
 800a9b4:	20001364 	.word	0x20001364
 800a9b8:	20001360 	.word	0x20001360

0800a9bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b08e      	sub	sp, #56	@ 0x38
 800a9c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a9c2:	e0a5      	b.n	800ab10 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	da19      	bge.n	800a9fe <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a9ca:	1d3b      	adds	r3, r7, #4
 800a9cc:	3304      	adds	r3, #4
 800a9ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a9d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d10b      	bne.n	800a9ee <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a9d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9da:	f383 8811 	msr	BASEPRI, r3
 800a9de:	f3bf 8f6f 	isb	sy
 800a9e2:	f3bf 8f4f 	dsb	sy
 800a9e6:	61fb      	str	r3, [r7, #28]
}
 800a9e8:	bf00      	nop
 800a9ea:	bf00      	nop
 800a9ec:	e7fd      	b.n	800a9ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a9ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9f4:	6850      	ldr	r0, [r2, #4]
 800a9f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9f8:	6892      	ldr	r2, [r2, #8]
 800a9fa:	4611      	mov	r1, r2
 800a9fc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	f2c0 8085 	blt.w	800ab10 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aa0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa0c:	695b      	ldr	r3, [r3, #20]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d004      	beq.n	800aa1c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa14:	3304      	adds	r3, #4
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7fe f9b0 	bl	8008d7c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa1c:	463b      	mov	r3, r7
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7ff ff6a 	bl	800a8f8 <prvSampleTimeNow>
 800aa24:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2b09      	cmp	r3, #9
 800aa2a:	d86c      	bhi.n	800ab06 <prvProcessReceivedCommands+0x14a>
 800aa2c:	a201      	add	r2, pc, #4	@ (adr r2, 800aa34 <prvProcessReceivedCommands+0x78>)
 800aa2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa32:	bf00      	nop
 800aa34:	0800aa5d 	.word	0x0800aa5d
 800aa38:	0800aa5d 	.word	0x0800aa5d
 800aa3c:	0800aa5d 	.word	0x0800aa5d
 800aa40:	0800ab07 	.word	0x0800ab07
 800aa44:	0800aabb 	.word	0x0800aabb
 800aa48:	0800aaf5 	.word	0x0800aaf5
 800aa4c:	0800aa5d 	.word	0x0800aa5d
 800aa50:	0800aa5d 	.word	0x0800aa5d
 800aa54:	0800ab07 	.word	0x0800ab07
 800aa58:	0800aabb 	.word	0x0800aabb
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aa5c:	68ba      	ldr	r2, [r7, #8]
 800aa5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa60:	699b      	ldr	r3, [r3, #24]
 800aa62:	18d1      	adds	r1, r2, r3
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa6a:	f7ff ff65 	bl	800a938 <prvInsertTimerInActiveList>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d04a      	beq.n	800ab0a <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa7a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800aa7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa7e:	69db      	ldr	r3, [r3, #28]
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d142      	bne.n	800ab0a <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aa84:	68ba      	ldr	r2, [r7, #8]
 800aa86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa88:	699b      	ldr	r3, [r3, #24]
 800aa8a:	441a      	add	r2, r3
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	9300      	str	r3, [sp, #0]
 800aa90:	2300      	movs	r3, #0
 800aa92:	2100      	movs	r1, #0
 800aa94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa96:	f7ff fe19 	bl	800a6cc <xTimerGenericCommand>
 800aa9a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aa9c:	6a3b      	ldr	r3, [r7, #32]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d133      	bne.n	800ab0a <prvProcessReceivedCommands+0x14e>
	__asm volatile
 800aaa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaa6:	f383 8811 	msr	BASEPRI, r3
 800aaaa:	f3bf 8f6f 	isb	sy
 800aaae:	f3bf 8f4f 	dsb	sy
 800aab2:	61bb      	str	r3, [r7, #24]
}
 800aab4:	bf00      	nop
 800aab6:	bf00      	nop
 800aab8:	e7fd      	b.n	800aab6 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aaba:	68ba      	ldr	r2, [r7, #8]
 800aabc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aabe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac2:	699b      	ldr	r3, [r3, #24]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d10b      	bne.n	800aae0 <prvProcessReceivedCommands+0x124>
	__asm volatile
 800aac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aacc:	f383 8811 	msr	BASEPRI, r3
 800aad0:	f3bf 8f6f 	isb	sy
 800aad4:	f3bf 8f4f 	dsb	sy
 800aad8:	617b      	str	r3, [r7, #20]
}
 800aada:	bf00      	nop
 800aadc:	bf00      	nop
 800aade:	e7fd      	b.n	800aadc <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aae2:	699a      	ldr	r2, [r3, #24]
 800aae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aae6:	18d1      	adds	r1, r2, r3
 800aae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aaec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aaee:	f7ff ff23 	bl	800a938 <prvInsertTimerInActiveList>
					break;
 800aaf2:	e00d      	b.n	800ab10 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800aaf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaf6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d107      	bne.n	800ab0e <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 800aafe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab00:	f000 fbd4 	bl	800b2ac <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ab04:	e003      	b.n	800ab0e <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 800ab06:	bf00      	nop
 800ab08:	e002      	b.n	800ab10 <prvProcessReceivedCommands+0x154>
					break;
 800ab0a:	bf00      	nop
 800ab0c:	e000      	b.n	800ab10 <prvProcessReceivedCommands+0x154>
					break;
 800ab0e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab10:	4b07      	ldr	r3, [pc, #28]	@ (800ab30 <prvProcessReceivedCommands+0x174>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	1d39      	adds	r1, r7, #4
 800ab16:	2200      	movs	r2, #0
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7fe fc01 	bl	8009320 <xQueueReceive>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f47f af4f 	bne.w	800a9c4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ab26:	bf00      	nop
 800ab28:	bf00      	nop
 800ab2a:	3730      	adds	r7, #48	@ 0x30
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	20001368 	.word	0x20001368

0800ab34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b088      	sub	sp, #32
 800ab38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab3a:	e046      	b.n	800abca <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab3c:	4b2c      	ldr	r3, [pc, #176]	@ (800abf0 <prvSwitchTimerLists+0xbc>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	68db      	ldr	r3, [r3, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab46:	4b2a      	ldr	r3, [pc, #168]	@ (800abf0 <prvSwitchTimerLists+0xbc>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	68db      	ldr	r3, [r3, #12]
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	3304      	adds	r3, #4
 800ab54:	4618      	mov	r0, r3
 800ab56:	f7fe f911 	bl	8008d7c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab5e:	68f8      	ldr	r0, [r7, #12]
 800ab60:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	69db      	ldr	r3, [r3, #28]
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	d12f      	bne.n	800abca <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	699b      	ldr	r3, [r3, #24]
 800ab6e:	693a      	ldr	r2, [r7, #16]
 800ab70:	4413      	add	r3, r2
 800ab72:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ab74:	68ba      	ldr	r2, [r7, #8]
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d90e      	bls.n	800ab9a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	68ba      	ldr	r2, [r7, #8]
 800ab80:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab88:	4b19      	ldr	r3, [pc, #100]	@ (800abf0 <prvSwitchTimerLists+0xbc>)
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	3304      	adds	r3, #4
 800ab90:	4619      	mov	r1, r3
 800ab92:	4610      	mov	r0, r2
 800ab94:	f7fe f8b9 	bl	8008d0a <vListInsert>
 800ab98:	e017      	b.n	800abca <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	9300      	str	r3, [sp, #0]
 800ab9e:	2300      	movs	r3, #0
 800aba0:	693a      	ldr	r2, [r7, #16]
 800aba2:	2100      	movs	r1, #0
 800aba4:	68f8      	ldr	r0, [r7, #12]
 800aba6:	f7ff fd91 	bl	800a6cc <xTimerGenericCommand>
 800abaa:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d10b      	bne.n	800abca <prvSwitchTimerLists+0x96>
	__asm volatile
 800abb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abb6:	f383 8811 	msr	BASEPRI, r3
 800abba:	f3bf 8f6f 	isb	sy
 800abbe:	f3bf 8f4f 	dsb	sy
 800abc2:	603b      	str	r3, [r7, #0]
}
 800abc4:	bf00      	nop
 800abc6:	bf00      	nop
 800abc8:	e7fd      	b.n	800abc6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800abca:	4b09      	ldr	r3, [pc, #36]	@ (800abf0 <prvSwitchTimerLists+0xbc>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d1b3      	bne.n	800ab3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800abd4:	4b06      	ldr	r3, [pc, #24]	@ (800abf0 <prvSwitchTimerLists+0xbc>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800abda:	4b06      	ldr	r3, [pc, #24]	@ (800abf4 <prvSwitchTimerLists+0xc0>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4a04      	ldr	r2, [pc, #16]	@ (800abf0 <prvSwitchTimerLists+0xbc>)
 800abe0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800abe2:	4a04      	ldr	r2, [pc, #16]	@ (800abf4 <prvSwitchTimerLists+0xc0>)
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	6013      	str	r3, [r2, #0]
}
 800abe8:	bf00      	nop
 800abea:	3718      	adds	r7, #24
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}
 800abf0:	20001360 	.word	0x20001360
 800abf4:	20001364 	.word	0x20001364

0800abf8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800abfe:	f000 f96b 	bl	800aed8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ac02:	4b15      	ldr	r3, [pc, #84]	@ (800ac58 <prvCheckForValidListAndQueue+0x60>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d120      	bne.n	800ac4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ac0a:	4814      	ldr	r0, [pc, #80]	@ (800ac5c <prvCheckForValidListAndQueue+0x64>)
 800ac0c:	f7fe f82c 	bl	8008c68 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ac10:	4813      	ldr	r0, [pc, #76]	@ (800ac60 <prvCheckForValidListAndQueue+0x68>)
 800ac12:	f7fe f829 	bl	8008c68 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ac16:	4b13      	ldr	r3, [pc, #76]	@ (800ac64 <prvCheckForValidListAndQueue+0x6c>)
 800ac18:	4a10      	ldr	r2, [pc, #64]	@ (800ac5c <prvCheckForValidListAndQueue+0x64>)
 800ac1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ac1c:	4b12      	ldr	r3, [pc, #72]	@ (800ac68 <prvCheckForValidListAndQueue+0x70>)
 800ac1e:	4a10      	ldr	r2, [pc, #64]	@ (800ac60 <prvCheckForValidListAndQueue+0x68>)
 800ac20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ac22:	2300      	movs	r3, #0
 800ac24:	9300      	str	r3, [sp, #0]
 800ac26:	4b11      	ldr	r3, [pc, #68]	@ (800ac6c <prvCheckForValidListAndQueue+0x74>)
 800ac28:	4a11      	ldr	r2, [pc, #68]	@ (800ac70 <prvCheckForValidListAndQueue+0x78>)
 800ac2a:	2110      	movs	r1, #16
 800ac2c:	200a      	movs	r0, #10
 800ac2e:	f7fe f939 	bl	8008ea4 <xQueueGenericCreateStatic>
 800ac32:	4603      	mov	r3, r0
 800ac34:	4a08      	ldr	r2, [pc, #32]	@ (800ac58 <prvCheckForValidListAndQueue+0x60>)
 800ac36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ac38:	4b07      	ldr	r3, [pc, #28]	@ (800ac58 <prvCheckForValidListAndQueue+0x60>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d005      	beq.n	800ac4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ac40:	4b05      	ldr	r3, [pc, #20]	@ (800ac58 <prvCheckForValidListAndQueue+0x60>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	490b      	ldr	r1, [pc, #44]	@ (800ac74 <prvCheckForValidListAndQueue+0x7c>)
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7fe fd5c 	bl	8009704 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ac4c:	f000 f976 	bl	800af3c <vPortExitCritical>
}
 800ac50:	bf00      	nop
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	20001368 	.word	0x20001368
 800ac5c:	20001338 	.word	0x20001338
 800ac60:	2000134c 	.word	0x2000134c
 800ac64:	20001360 	.word	0x20001360
 800ac68:	20001364 	.word	0x20001364
 800ac6c:	20001414 	.word	0x20001414
 800ac70:	20001374 	.word	0x20001374
 800ac74:	0800fd4c 	.word	0x0800fd4c

0800ac78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b085      	sub	sp, #20
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	60f8      	str	r0, [r7, #12]
 800ac80:	60b9      	str	r1, [r7, #8]
 800ac82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	3b04      	subs	r3, #4
 800ac88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ac90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	3b04      	subs	r3, #4
 800ac96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	f023 0201 	bic.w	r2, r3, #1
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	3b04      	subs	r3, #4
 800aca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aca8:	4a0c      	ldr	r2, [pc, #48]	@ (800acdc <pxPortInitialiseStack+0x64>)
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	3b14      	subs	r3, #20
 800acb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	3b04      	subs	r3, #4
 800acbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f06f 0202 	mvn.w	r2, #2
 800acc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	3b20      	subs	r3, #32
 800accc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800acce:	68fb      	ldr	r3, [r7, #12]
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3714      	adds	r7, #20
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr
 800acdc:	0800ace1 	.word	0x0800ace1

0800ace0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ace0:	b480      	push	{r7}
 800ace2:	b085      	sub	sp, #20
 800ace4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ace6:	2300      	movs	r3, #0
 800ace8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800acea:	4b13      	ldr	r3, [pc, #76]	@ (800ad38 <prvTaskExitError+0x58>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800acf2:	d00b      	beq.n	800ad0c <prvTaskExitError+0x2c>
	__asm volatile
 800acf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acf8:	f383 8811 	msr	BASEPRI, r3
 800acfc:	f3bf 8f6f 	isb	sy
 800ad00:	f3bf 8f4f 	dsb	sy
 800ad04:	60fb      	str	r3, [r7, #12]
}
 800ad06:	bf00      	nop
 800ad08:	bf00      	nop
 800ad0a:	e7fd      	b.n	800ad08 <prvTaskExitError+0x28>
	__asm volatile
 800ad0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad10:	f383 8811 	msr	BASEPRI, r3
 800ad14:	f3bf 8f6f 	isb	sy
 800ad18:	f3bf 8f4f 	dsb	sy
 800ad1c:	60bb      	str	r3, [r7, #8]
}
 800ad1e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ad20:	bf00      	nop
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d0fc      	beq.n	800ad22 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ad28:	bf00      	nop
 800ad2a:	bf00      	nop
 800ad2c:	3714      	adds	r7, #20
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr
 800ad36:	bf00      	nop
 800ad38:	20000014 	.word	0x20000014
 800ad3c:	00000000 	.word	0x00000000

0800ad40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ad40:	4b07      	ldr	r3, [pc, #28]	@ (800ad60 <pxCurrentTCBConst2>)
 800ad42:	6819      	ldr	r1, [r3, #0]
 800ad44:	6808      	ldr	r0, [r1, #0]
 800ad46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad4a:	f380 8809 	msr	PSP, r0
 800ad4e:	f3bf 8f6f 	isb	sy
 800ad52:	f04f 0000 	mov.w	r0, #0
 800ad56:	f380 8811 	msr	BASEPRI, r0
 800ad5a:	4770      	bx	lr
 800ad5c:	f3af 8000 	nop.w

0800ad60 <pxCurrentTCBConst2>:
 800ad60:	20000e38 	.word	0x20000e38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ad64:	bf00      	nop
 800ad66:	bf00      	nop

0800ad68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ad68:	4808      	ldr	r0, [pc, #32]	@ (800ad8c <prvPortStartFirstTask+0x24>)
 800ad6a:	6800      	ldr	r0, [r0, #0]
 800ad6c:	6800      	ldr	r0, [r0, #0]
 800ad6e:	f380 8808 	msr	MSP, r0
 800ad72:	f04f 0000 	mov.w	r0, #0
 800ad76:	f380 8814 	msr	CONTROL, r0
 800ad7a:	b662      	cpsie	i
 800ad7c:	b661      	cpsie	f
 800ad7e:	f3bf 8f4f 	dsb	sy
 800ad82:	f3bf 8f6f 	isb	sy
 800ad86:	df00      	svc	0
 800ad88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ad8a:	bf00      	nop
 800ad8c:	e000ed08 	.word	0xe000ed08

0800ad90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b086      	sub	sp, #24
 800ad94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ad96:	4b47      	ldr	r3, [pc, #284]	@ (800aeb4 <xPortStartScheduler+0x124>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a47      	ldr	r2, [pc, #284]	@ (800aeb8 <xPortStartScheduler+0x128>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d10b      	bne.n	800adb8 <xPortStartScheduler+0x28>
	__asm volatile
 800ada0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ada4:	f383 8811 	msr	BASEPRI, r3
 800ada8:	f3bf 8f6f 	isb	sy
 800adac:	f3bf 8f4f 	dsb	sy
 800adb0:	613b      	str	r3, [r7, #16]
}
 800adb2:	bf00      	nop
 800adb4:	bf00      	nop
 800adb6:	e7fd      	b.n	800adb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800adb8:	4b3e      	ldr	r3, [pc, #248]	@ (800aeb4 <xPortStartScheduler+0x124>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a3f      	ldr	r2, [pc, #252]	@ (800aebc <xPortStartScheduler+0x12c>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d10b      	bne.n	800adda <xPortStartScheduler+0x4a>
	__asm volatile
 800adc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adc6:	f383 8811 	msr	BASEPRI, r3
 800adca:	f3bf 8f6f 	isb	sy
 800adce:	f3bf 8f4f 	dsb	sy
 800add2:	60fb      	str	r3, [r7, #12]
}
 800add4:	bf00      	nop
 800add6:	bf00      	nop
 800add8:	e7fd      	b.n	800add6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800adda:	4b39      	ldr	r3, [pc, #228]	@ (800aec0 <xPortStartScheduler+0x130>)
 800addc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	b2db      	uxtb	r3, r3
 800ade4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	22ff      	movs	r2, #255	@ 0xff
 800adea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	b2db      	uxtb	r3, r3
 800adf2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800adf4:	78fb      	ldrb	r3, [r7, #3]
 800adf6:	b2db      	uxtb	r3, r3
 800adf8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800adfc:	b2da      	uxtb	r2, r3
 800adfe:	4b31      	ldr	r3, [pc, #196]	@ (800aec4 <xPortStartScheduler+0x134>)
 800ae00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ae02:	4b31      	ldr	r3, [pc, #196]	@ (800aec8 <xPortStartScheduler+0x138>)
 800ae04:	2207      	movs	r2, #7
 800ae06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae08:	e009      	b.n	800ae1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ae0a:	4b2f      	ldr	r3, [pc, #188]	@ (800aec8 <xPortStartScheduler+0x138>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	3b01      	subs	r3, #1
 800ae10:	4a2d      	ldr	r2, [pc, #180]	@ (800aec8 <xPortStartScheduler+0x138>)
 800ae12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ae14:	78fb      	ldrb	r3, [r7, #3]
 800ae16:	b2db      	uxtb	r3, r3
 800ae18:	005b      	lsls	r3, r3, #1
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae1e:	78fb      	ldrb	r3, [r7, #3]
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae26:	2b80      	cmp	r3, #128	@ 0x80
 800ae28:	d0ef      	beq.n	800ae0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ae2a:	4b27      	ldr	r3, [pc, #156]	@ (800aec8 <xPortStartScheduler+0x138>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f1c3 0307 	rsb	r3, r3, #7
 800ae32:	2b04      	cmp	r3, #4
 800ae34:	d00b      	beq.n	800ae4e <xPortStartScheduler+0xbe>
	__asm volatile
 800ae36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae3a:	f383 8811 	msr	BASEPRI, r3
 800ae3e:	f3bf 8f6f 	isb	sy
 800ae42:	f3bf 8f4f 	dsb	sy
 800ae46:	60bb      	str	r3, [r7, #8]
}
 800ae48:	bf00      	nop
 800ae4a:	bf00      	nop
 800ae4c:	e7fd      	b.n	800ae4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ae4e:	4b1e      	ldr	r3, [pc, #120]	@ (800aec8 <xPortStartScheduler+0x138>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	021b      	lsls	r3, r3, #8
 800ae54:	4a1c      	ldr	r2, [pc, #112]	@ (800aec8 <xPortStartScheduler+0x138>)
 800ae56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ae58:	4b1b      	ldr	r3, [pc, #108]	@ (800aec8 <xPortStartScheduler+0x138>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ae60:	4a19      	ldr	r2, [pc, #100]	@ (800aec8 <xPortStartScheduler+0x138>)
 800ae62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	b2da      	uxtb	r2, r3
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ae6c:	4b17      	ldr	r3, [pc, #92]	@ (800aecc <xPortStartScheduler+0x13c>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a16      	ldr	r2, [pc, #88]	@ (800aecc <xPortStartScheduler+0x13c>)
 800ae72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ae76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ae78:	4b14      	ldr	r3, [pc, #80]	@ (800aecc <xPortStartScheduler+0x13c>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a13      	ldr	r2, [pc, #76]	@ (800aecc <xPortStartScheduler+0x13c>)
 800ae7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ae82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ae84:	f000 f8da 	bl	800b03c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ae88:	4b11      	ldr	r3, [pc, #68]	@ (800aed0 <xPortStartScheduler+0x140>)
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ae8e:	f000 f8f9 	bl	800b084 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ae92:	4b10      	ldr	r3, [pc, #64]	@ (800aed4 <xPortStartScheduler+0x144>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a0f      	ldr	r2, [pc, #60]	@ (800aed4 <xPortStartScheduler+0x144>)
 800ae98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ae9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ae9e:	f7ff ff63 	bl	800ad68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aea2:	f7ff f863 	bl	8009f6c <vTaskSwitchContext>
	prvTaskExitError();
 800aea6:	f7ff ff1b 	bl	800ace0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aeaa:	2300      	movs	r3, #0
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3718      	adds	r7, #24
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}
 800aeb4:	e000ed00 	.word	0xe000ed00
 800aeb8:	410fc271 	.word	0x410fc271
 800aebc:	410fc270 	.word	0x410fc270
 800aec0:	e000e400 	.word	0xe000e400
 800aec4:	20001464 	.word	0x20001464
 800aec8:	20001468 	.word	0x20001468
 800aecc:	e000ed20 	.word	0xe000ed20
 800aed0:	20000014 	.word	0x20000014
 800aed4:	e000ef34 	.word	0xe000ef34

0800aed8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aed8:	b480      	push	{r7}
 800aeda:	b083      	sub	sp, #12
 800aedc:	af00      	add	r7, sp, #0
	__asm volatile
 800aede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aee2:	f383 8811 	msr	BASEPRI, r3
 800aee6:	f3bf 8f6f 	isb	sy
 800aeea:	f3bf 8f4f 	dsb	sy
 800aeee:	607b      	str	r3, [r7, #4]
}
 800aef0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aef2:	4b10      	ldr	r3, [pc, #64]	@ (800af34 <vPortEnterCritical+0x5c>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	3301      	adds	r3, #1
 800aef8:	4a0e      	ldr	r2, [pc, #56]	@ (800af34 <vPortEnterCritical+0x5c>)
 800aefa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aefc:	4b0d      	ldr	r3, [pc, #52]	@ (800af34 <vPortEnterCritical+0x5c>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	2b01      	cmp	r3, #1
 800af02:	d110      	bne.n	800af26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800af04:	4b0c      	ldr	r3, [pc, #48]	@ (800af38 <vPortEnterCritical+0x60>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	b2db      	uxtb	r3, r3
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d00b      	beq.n	800af26 <vPortEnterCritical+0x4e>
	__asm volatile
 800af0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af12:	f383 8811 	msr	BASEPRI, r3
 800af16:	f3bf 8f6f 	isb	sy
 800af1a:	f3bf 8f4f 	dsb	sy
 800af1e:	603b      	str	r3, [r7, #0]
}
 800af20:	bf00      	nop
 800af22:	bf00      	nop
 800af24:	e7fd      	b.n	800af22 <vPortEnterCritical+0x4a>
	}
}
 800af26:	bf00      	nop
 800af28:	370c      	adds	r7, #12
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr
 800af32:	bf00      	nop
 800af34:	20000014 	.word	0x20000014
 800af38:	e000ed04 	.word	0xe000ed04

0800af3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800af3c:	b480      	push	{r7}
 800af3e:	b083      	sub	sp, #12
 800af40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800af42:	4b12      	ldr	r3, [pc, #72]	@ (800af8c <vPortExitCritical+0x50>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d10b      	bne.n	800af62 <vPortExitCritical+0x26>
	__asm volatile
 800af4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af4e:	f383 8811 	msr	BASEPRI, r3
 800af52:	f3bf 8f6f 	isb	sy
 800af56:	f3bf 8f4f 	dsb	sy
 800af5a:	607b      	str	r3, [r7, #4]
}
 800af5c:	bf00      	nop
 800af5e:	bf00      	nop
 800af60:	e7fd      	b.n	800af5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800af62:	4b0a      	ldr	r3, [pc, #40]	@ (800af8c <vPortExitCritical+0x50>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	3b01      	subs	r3, #1
 800af68:	4a08      	ldr	r2, [pc, #32]	@ (800af8c <vPortExitCritical+0x50>)
 800af6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800af6c:	4b07      	ldr	r3, [pc, #28]	@ (800af8c <vPortExitCritical+0x50>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d105      	bne.n	800af80 <vPortExitCritical+0x44>
 800af74:	2300      	movs	r3, #0
 800af76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	f383 8811 	msr	BASEPRI, r3
}
 800af7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800af80:	bf00      	nop
 800af82:	370c      	adds	r7, #12
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr
 800af8c:	20000014 	.word	0x20000014

0800af90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800af90:	f3ef 8009 	mrs	r0, PSP
 800af94:	f3bf 8f6f 	isb	sy
 800af98:	4b15      	ldr	r3, [pc, #84]	@ (800aff0 <pxCurrentTCBConst>)
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	f01e 0f10 	tst.w	lr, #16
 800afa0:	bf08      	it	eq
 800afa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800afa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afaa:	6010      	str	r0, [r2, #0]
 800afac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800afb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800afb4:	f380 8811 	msr	BASEPRI, r0
 800afb8:	f3bf 8f4f 	dsb	sy
 800afbc:	f3bf 8f6f 	isb	sy
 800afc0:	f7fe ffd4 	bl	8009f6c <vTaskSwitchContext>
 800afc4:	f04f 0000 	mov.w	r0, #0
 800afc8:	f380 8811 	msr	BASEPRI, r0
 800afcc:	bc09      	pop	{r0, r3}
 800afce:	6819      	ldr	r1, [r3, #0]
 800afd0:	6808      	ldr	r0, [r1, #0]
 800afd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afd6:	f01e 0f10 	tst.w	lr, #16
 800afda:	bf08      	it	eq
 800afdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800afe0:	f380 8809 	msr	PSP, r0
 800afe4:	f3bf 8f6f 	isb	sy
 800afe8:	4770      	bx	lr
 800afea:	bf00      	nop
 800afec:	f3af 8000 	nop.w

0800aff0 <pxCurrentTCBConst>:
 800aff0:	20000e38 	.word	0x20000e38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aff4:	bf00      	nop
 800aff6:	bf00      	nop

0800aff8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
	__asm volatile
 800affe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b002:	f383 8811 	msr	BASEPRI, r3
 800b006:	f3bf 8f6f 	isb	sy
 800b00a:	f3bf 8f4f 	dsb	sy
 800b00e:	607b      	str	r3, [r7, #4]
}
 800b010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b012:	f7fe feeb 	bl	8009dec <xTaskIncrementTick>
 800b016:	4603      	mov	r3, r0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d003      	beq.n	800b024 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b01c:	4b06      	ldr	r3, [pc, #24]	@ (800b038 <SysTick_Handler+0x40>)
 800b01e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b022:	601a      	str	r2, [r3, #0]
 800b024:	2300      	movs	r3, #0
 800b026:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	f383 8811 	msr	BASEPRI, r3
}
 800b02e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b030:	bf00      	nop
 800b032:	3708      	adds	r7, #8
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}
 800b038:	e000ed04 	.word	0xe000ed04

0800b03c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b03c:	b480      	push	{r7}
 800b03e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b040:	4b0b      	ldr	r3, [pc, #44]	@ (800b070 <vPortSetupTimerInterrupt+0x34>)
 800b042:	2200      	movs	r2, #0
 800b044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b046:	4b0b      	ldr	r3, [pc, #44]	@ (800b074 <vPortSetupTimerInterrupt+0x38>)
 800b048:	2200      	movs	r2, #0
 800b04a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b04c:	4b0a      	ldr	r3, [pc, #40]	@ (800b078 <vPortSetupTimerInterrupt+0x3c>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a0a      	ldr	r2, [pc, #40]	@ (800b07c <vPortSetupTimerInterrupt+0x40>)
 800b052:	fba2 2303 	umull	r2, r3, r2, r3
 800b056:	099b      	lsrs	r3, r3, #6
 800b058:	4a09      	ldr	r2, [pc, #36]	@ (800b080 <vPortSetupTimerInterrupt+0x44>)
 800b05a:	3b01      	subs	r3, #1
 800b05c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b05e:	4b04      	ldr	r3, [pc, #16]	@ (800b070 <vPortSetupTimerInterrupt+0x34>)
 800b060:	2207      	movs	r2, #7
 800b062:	601a      	str	r2, [r3, #0]
}
 800b064:	bf00      	nop
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr
 800b06e:	bf00      	nop
 800b070:	e000e010 	.word	0xe000e010
 800b074:	e000e018 	.word	0xe000e018
 800b078:	20000008 	.word	0x20000008
 800b07c:	10624dd3 	.word	0x10624dd3
 800b080:	e000e014 	.word	0xe000e014

0800b084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b084:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b094 <vPortEnableVFP+0x10>
 800b088:	6801      	ldr	r1, [r0, #0]
 800b08a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b08e:	6001      	str	r1, [r0, #0]
 800b090:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b092:	bf00      	nop
 800b094:	e000ed88 	.word	0xe000ed88

0800b098 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b098:	b480      	push	{r7}
 800b09a:	b085      	sub	sp, #20
 800b09c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b09e:	f3ef 8305 	mrs	r3, IPSR
 800b0a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2b0f      	cmp	r3, #15
 800b0a8:	d915      	bls.n	800b0d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b0aa:	4a18      	ldr	r2, [pc, #96]	@ (800b10c <vPortValidateInterruptPriority+0x74>)
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b0b4:	4b16      	ldr	r3, [pc, #88]	@ (800b110 <vPortValidateInterruptPriority+0x78>)
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	7afa      	ldrb	r2, [r7, #11]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d20b      	bcs.n	800b0d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b0be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0c2:	f383 8811 	msr	BASEPRI, r3
 800b0c6:	f3bf 8f6f 	isb	sy
 800b0ca:	f3bf 8f4f 	dsb	sy
 800b0ce:	607b      	str	r3, [r7, #4]
}
 800b0d0:	bf00      	nop
 800b0d2:	bf00      	nop
 800b0d4:	e7fd      	b.n	800b0d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b0d6:	4b0f      	ldr	r3, [pc, #60]	@ (800b114 <vPortValidateInterruptPriority+0x7c>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b0de:	4b0e      	ldr	r3, [pc, #56]	@ (800b118 <vPortValidateInterruptPriority+0x80>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d90b      	bls.n	800b0fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0ea:	f383 8811 	msr	BASEPRI, r3
 800b0ee:	f3bf 8f6f 	isb	sy
 800b0f2:	f3bf 8f4f 	dsb	sy
 800b0f6:	603b      	str	r3, [r7, #0]
}
 800b0f8:	bf00      	nop
 800b0fa:	bf00      	nop
 800b0fc:	e7fd      	b.n	800b0fa <vPortValidateInterruptPriority+0x62>
	}
 800b0fe:	bf00      	nop
 800b100:	3714      	adds	r7, #20
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr
 800b10a:	bf00      	nop
 800b10c:	e000e3f0 	.word	0xe000e3f0
 800b110:	20001464 	.word	0x20001464
 800b114:	e000ed0c 	.word	0xe000ed0c
 800b118:	20001468 	.word	0x20001468

0800b11c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b08a      	sub	sp, #40	@ 0x28
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b124:	2300      	movs	r3, #0
 800b126:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b128:	f7fe fda4 	bl	8009c74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b12c:	4b5a      	ldr	r3, [pc, #360]	@ (800b298 <pvPortMalloc+0x17c>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d101      	bne.n	800b138 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b134:	f000 f916 	bl	800b364 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b138:	4b58      	ldr	r3, [pc, #352]	@ (800b29c <pvPortMalloc+0x180>)
 800b13a:	681a      	ldr	r2, [r3, #0]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	4013      	ands	r3, r2
 800b140:	2b00      	cmp	r3, #0
 800b142:	f040 8090 	bne.w	800b266 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d01e      	beq.n	800b18a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b14c:	2208      	movs	r2, #8
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	4413      	add	r3, r2
 800b152:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f003 0307 	and.w	r3, r3, #7
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d015      	beq.n	800b18a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f023 0307 	bic.w	r3, r3, #7
 800b164:	3308      	adds	r3, #8
 800b166:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f003 0307 	and.w	r3, r3, #7
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d00b      	beq.n	800b18a <pvPortMalloc+0x6e>
	__asm volatile
 800b172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b176:	f383 8811 	msr	BASEPRI, r3
 800b17a:	f3bf 8f6f 	isb	sy
 800b17e:	f3bf 8f4f 	dsb	sy
 800b182:	617b      	str	r3, [r7, #20]
}
 800b184:	bf00      	nop
 800b186:	bf00      	nop
 800b188:	e7fd      	b.n	800b186 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d06a      	beq.n	800b266 <pvPortMalloc+0x14a>
 800b190:	4b43      	ldr	r3, [pc, #268]	@ (800b2a0 <pvPortMalloc+0x184>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	429a      	cmp	r2, r3
 800b198:	d865      	bhi.n	800b266 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b19a:	4b42      	ldr	r3, [pc, #264]	@ (800b2a4 <pvPortMalloc+0x188>)
 800b19c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b19e:	4b41      	ldr	r3, [pc, #260]	@ (800b2a4 <pvPortMalloc+0x188>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b1a4:	e004      	b.n	800b1b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	687a      	ldr	r2, [r7, #4]
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d903      	bls.n	800b1c2 <pvPortMalloc+0xa6>
 800b1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d1f1      	bne.n	800b1a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b1c2:	4b35      	ldr	r3, [pc, #212]	@ (800b298 <pvPortMalloc+0x17c>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d04c      	beq.n	800b266 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b1cc:	6a3b      	ldr	r3, [r7, #32]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	2208      	movs	r2, #8
 800b1d2:	4413      	add	r3, r2
 800b1d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	6a3b      	ldr	r3, [r7, #32]
 800b1dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1e0:	685a      	ldr	r2, [r3, #4]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	1ad2      	subs	r2, r2, r3
 800b1e6:	2308      	movs	r3, #8
 800b1e8:	005b      	lsls	r3, r3, #1
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d920      	bls.n	800b230 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b1ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	4413      	add	r3, r2
 800b1f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b1f6:	69bb      	ldr	r3, [r7, #24]
 800b1f8:	f003 0307 	and.w	r3, r3, #7
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d00b      	beq.n	800b218 <pvPortMalloc+0xfc>
	__asm volatile
 800b200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b204:	f383 8811 	msr	BASEPRI, r3
 800b208:	f3bf 8f6f 	isb	sy
 800b20c:	f3bf 8f4f 	dsb	sy
 800b210:	613b      	str	r3, [r7, #16]
}
 800b212:	bf00      	nop
 800b214:	bf00      	nop
 800b216:	e7fd      	b.n	800b214 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b21a:	685a      	ldr	r2, [r3, #4]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	1ad2      	subs	r2, r2, r3
 800b220:	69bb      	ldr	r3, [r7, #24]
 800b222:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b226:	687a      	ldr	r2, [r7, #4]
 800b228:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b22a:	69b8      	ldr	r0, [r7, #24]
 800b22c:	f000 f8fc 	bl	800b428 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b230:	4b1b      	ldr	r3, [pc, #108]	@ (800b2a0 <pvPortMalloc+0x184>)
 800b232:	681a      	ldr	r2, [r3, #0]
 800b234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	1ad3      	subs	r3, r2, r3
 800b23a:	4a19      	ldr	r2, [pc, #100]	@ (800b2a0 <pvPortMalloc+0x184>)
 800b23c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b23e:	4b18      	ldr	r3, [pc, #96]	@ (800b2a0 <pvPortMalloc+0x184>)
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	4b19      	ldr	r3, [pc, #100]	@ (800b2a8 <pvPortMalloc+0x18c>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	429a      	cmp	r2, r3
 800b248:	d203      	bcs.n	800b252 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b24a:	4b15      	ldr	r3, [pc, #84]	@ (800b2a0 <pvPortMalloc+0x184>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	4a16      	ldr	r2, [pc, #88]	@ (800b2a8 <pvPortMalloc+0x18c>)
 800b250:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b254:	685a      	ldr	r2, [r3, #4]
 800b256:	4b11      	ldr	r3, [pc, #68]	@ (800b29c <pvPortMalloc+0x180>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	431a      	orrs	r2, r3
 800b25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b25e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b262:	2200      	movs	r2, #0
 800b264:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b266:	f7fe fd13 	bl	8009c90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b26a:	69fb      	ldr	r3, [r7, #28]
 800b26c:	f003 0307 	and.w	r3, r3, #7
 800b270:	2b00      	cmp	r3, #0
 800b272:	d00b      	beq.n	800b28c <pvPortMalloc+0x170>
	__asm volatile
 800b274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b278:	f383 8811 	msr	BASEPRI, r3
 800b27c:	f3bf 8f6f 	isb	sy
 800b280:	f3bf 8f4f 	dsb	sy
 800b284:	60fb      	str	r3, [r7, #12]
}
 800b286:	bf00      	nop
 800b288:	bf00      	nop
 800b28a:	e7fd      	b.n	800b288 <pvPortMalloc+0x16c>
	return pvReturn;
 800b28c:	69fb      	ldr	r3, [r7, #28]
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3728      	adds	r7, #40	@ 0x28
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	20003474 	.word	0x20003474
 800b29c:	20003480 	.word	0x20003480
 800b2a0:	20003478 	.word	0x20003478
 800b2a4:	2000346c 	.word	0x2000346c
 800b2a8:	2000347c 	.word	0x2000347c

0800b2ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b086      	sub	sp, #24
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d04a      	beq.n	800b354 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b2be:	2308      	movs	r3, #8
 800b2c0:	425b      	negs	r3, r3
 800b2c2:	697a      	ldr	r2, [r7, #20]
 800b2c4:	4413      	add	r3, r2
 800b2c6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	685a      	ldr	r2, [r3, #4]
 800b2d0:	4b22      	ldr	r3, [pc, #136]	@ (800b35c <vPortFree+0xb0>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	4013      	ands	r3, r2
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d10b      	bne.n	800b2f2 <vPortFree+0x46>
	__asm volatile
 800b2da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2de:	f383 8811 	msr	BASEPRI, r3
 800b2e2:	f3bf 8f6f 	isb	sy
 800b2e6:	f3bf 8f4f 	dsb	sy
 800b2ea:	60fb      	str	r3, [r7, #12]
}
 800b2ec:	bf00      	nop
 800b2ee:	bf00      	nop
 800b2f0:	e7fd      	b.n	800b2ee <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d00b      	beq.n	800b312 <vPortFree+0x66>
	__asm volatile
 800b2fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2fe:	f383 8811 	msr	BASEPRI, r3
 800b302:	f3bf 8f6f 	isb	sy
 800b306:	f3bf 8f4f 	dsb	sy
 800b30a:	60bb      	str	r3, [r7, #8]
}
 800b30c:	bf00      	nop
 800b30e:	bf00      	nop
 800b310:	e7fd      	b.n	800b30e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	685a      	ldr	r2, [r3, #4]
 800b316:	4b11      	ldr	r3, [pc, #68]	@ (800b35c <vPortFree+0xb0>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4013      	ands	r3, r2
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d019      	beq.n	800b354 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d115      	bne.n	800b354 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	685a      	ldr	r2, [r3, #4]
 800b32c:	4b0b      	ldr	r3, [pc, #44]	@ (800b35c <vPortFree+0xb0>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	43db      	mvns	r3, r3
 800b332:	401a      	ands	r2, r3
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b338:	f7fe fc9c 	bl	8009c74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	685a      	ldr	r2, [r3, #4]
 800b340:	4b07      	ldr	r3, [pc, #28]	@ (800b360 <vPortFree+0xb4>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4413      	add	r3, r2
 800b346:	4a06      	ldr	r2, [pc, #24]	@ (800b360 <vPortFree+0xb4>)
 800b348:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b34a:	6938      	ldr	r0, [r7, #16]
 800b34c:	f000 f86c 	bl	800b428 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b350:	f7fe fc9e 	bl	8009c90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b354:	bf00      	nop
 800b356:	3718      	adds	r7, #24
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}
 800b35c:	20003480 	.word	0x20003480
 800b360:	20003478 	.word	0x20003478

0800b364 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b364:	b480      	push	{r7}
 800b366:	b085      	sub	sp, #20
 800b368:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b36a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b36e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b370:	4b27      	ldr	r3, [pc, #156]	@ (800b410 <prvHeapInit+0xac>)
 800b372:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f003 0307 	and.w	r3, r3, #7
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d00c      	beq.n	800b398 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	3307      	adds	r3, #7
 800b382:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f023 0307 	bic.w	r3, r3, #7
 800b38a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b38c:	68ba      	ldr	r2, [r7, #8]
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	1ad3      	subs	r3, r2, r3
 800b392:	4a1f      	ldr	r2, [pc, #124]	@ (800b410 <prvHeapInit+0xac>)
 800b394:	4413      	add	r3, r2
 800b396:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b39c:	4a1d      	ldr	r2, [pc, #116]	@ (800b414 <prvHeapInit+0xb0>)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b3a2:	4b1c      	ldr	r3, [pc, #112]	@ (800b414 <prvHeapInit+0xb0>)
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	68ba      	ldr	r2, [r7, #8]
 800b3ac:	4413      	add	r3, r2
 800b3ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b3b0:	2208      	movs	r2, #8
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	1a9b      	subs	r3, r3, r2
 800b3b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f023 0307 	bic.w	r3, r3, #7
 800b3be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	4a15      	ldr	r2, [pc, #84]	@ (800b418 <prvHeapInit+0xb4>)
 800b3c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b3c6:	4b14      	ldr	r3, [pc, #80]	@ (800b418 <prvHeapInit+0xb4>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b3ce:	4b12      	ldr	r3, [pc, #72]	@ (800b418 <prvHeapInit+0xb4>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	68fa      	ldr	r2, [r7, #12]
 800b3de:	1ad2      	subs	r2, r2, r3
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b3e4:	4b0c      	ldr	r3, [pc, #48]	@ (800b418 <prvHeapInit+0xb4>)
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	4a0a      	ldr	r2, [pc, #40]	@ (800b41c <prvHeapInit+0xb8>)
 800b3f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	685b      	ldr	r3, [r3, #4]
 800b3f8:	4a09      	ldr	r2, [pc, #36]	@ (800b420 <prvHeapInit+0xbc>)
 800b3fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b3fc:	4b09      	ldr	r3, [pc, #36]	@ (800b424 <prvHeapInit+0xc0>)
 800b3fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b402:	601a      	str	r2, [r3, #0]
}
 800b404:	bf00      	nop
 800b406:	3714      	adds	r7, #20
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr
 800b410:	2000146c 	.word	0x2000146c
 800b414:	2000346c 	.word	0x2000346c
 800b418:	20003474 	.word	0x20003474
 800b41c:	2000347c 	.word	0x2000347c
 800b420:	20003478 	.word	0x20003478
 800b424:	20003480 	.word	0x20003480

0800b428 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b428:	b480      	push	{r7}
 800b42a:	b085      	sub	sp, #20
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b430:	4b28      	ldr	r3, [pc, #160]	@ (800b4d4 <prvInsertBlockIntoFreeList+0xac>)
 800b432:	60fb      	str	r3, [r7, #12]
 800b434:	e002      	b.n	800b43c <prvInsertBlockIntoFreeList+0x14>
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	60fb      	str	r3, [r7, #12]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	687a      	ldr	r2, [r7, #4]
 800b442:	429a      	cmp	r2, r3
 800b444:	d8f7      	bhi.n	800b436 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	68ba      	ldr	r2, [r7, #8]
 800b450:	4413      	add	r3, r2
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	429a      	cmp	r2, r3
 800b456:	d108      	bne.n	800b46a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	685a      	ldr	r2, [r3, #4]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	441a      	add	r2, r3
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	68ba      	ldr	r2, [r7, #8]
 800b474:	441a      	add	r2, r3
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d118      	bne.n	800b4b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681a      	ldr	r2, [r3, #0]
 800b482:	4b15      	ldr	r3, [pc, #84]	@ (800b4d8 <prvInsertBlockIntoFreeList+0xb0>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	429a      	cmp	r2, r3
 800b488:	d00d      	beq.n	800b4a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	685a      	ldr	r2, [r3, #4]
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	441a      	add	r2, r3
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	601a      	str	r2, [r3, #0]
 800b4a4:	e008      	b.n	800b4b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b4a6:	4b0c      	ldr	r3, [pc, #48]	@ (800b4d8 <prvInsertBlockIntoFreeList+0xb0>)
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	601a      	str	r2, [r3, #0]
 800b4ae:	e003      	b.n	800b4b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b4b8:	68fa      	ldr	r2, [r7, #12]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d002      	beq.n	800b4c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4c6:	bf00      	nop
 800b4c8:	3714      	adds	r7, #20
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d0:	4770      	bx	lr
 800b4d2:	bf00      	nop
 800b4d4:	2000346c 	.word	0x2000346c
 800b4d8:	20003474 	.word	0x20003474

0800b4dc <__cvt>:
 800b4dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4e0:	ec57 6b10 	vmov	r6, r7, d0
 800b4e4:	2f00      	cmp	r7, #0
 800b4e6:	460c      	mov	r4, r1
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	463b      	mov	r3, r7
 800b4ec:	bfbb      	ittet	lt
 800b4ee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b4f2:	461f      	movlt	r7, r3
 800b4f4:	2300      	movge	r3, #0
 800b4f6:	232d      	movlt	r3, #45	@ 0x2d
 800b4f8:	700b      	strb	r3, [r1, #0]
 800b4fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b4fc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b500:	4691      	mov	r9, r2
 800b502:	f023 0820 	bic.w	r8, r3, #32
 800b506:	bfbc      	itt	lt
 800b508:	4632      	movlt	r2, r6
 800b50a:	4616      	movlt	r6, r2
 800b50c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b510:	d005      	beq.n	800b51e <__cvt+0x42>
 800b512:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b516:	d100      	bne.n	800b51a <__cvt+0x3e>
 800b518:	3401      	adds	r4, #1
 800b51a:	2102      	movs	r1, #2
 800b51c:	e000      	b.n	800b520 <__cvt+0x44>
 800b51e:	2103      	movs	r1, #3
 800b520:	ab03      	add	r3, sp, #12
 800b522:	9301      	str	r3, [sp, #4]
 800b524:	ab02      	add	r3, sp, #8
 800b526:	9300      	str	r3, [sp, #0]
 800b528:	ec47 6b10 	vmov	d0, r6, r7
 800b52c:	4653      	mov	r3, sl
 800b52e:	4622      	mov	r2, r4
 800b530:	f001 f8f2 	bl	800c718 <_dtoa_r>
 800b534:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b538:	4605      	mov	r5, r0
 800b53a:	d119      	bne.n	800b570 <__cvt+0x94>
 800b53c:	f019 0f01 	tst.w	r9, #1
 800b540:	d00e      	beq.n	800b560 <__cvt+0x84>
 800b542:	eb00 0904 	add.w	r9, r0, r4
 800b546:	2200      	movs	r2, #0
 800b548:	2300      	movs	r3, #0
 800b54a:	4630      	mov	r0, r6
 800b54c:	4639      	mov	r1, r7
 800b54e:	f7f5 fac3 	bl	8000ad8 <__aeabi_dcmpeq>
 800b552:	b108      	cbz	r0, 800b558 <__cvt+0x7c>
 800b554:	f8cd 900c 	str.w	r9, [sp, #12]
 800b558:	2230      	movs	r2, #48	@ 0x30
 800b55a:	9b03      	ldr	r3, [sp, #12]
 800b55c:	454b      	cmp	r3, r9
 800b55e:	d31e      	bcc.n	800b59e <__cvt+0xc2>
 800b560:	9b03      	ldr	r3, [sp, #12]
 800b562:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b564:	1b5b      	subs	r3, r3, r5
 800b566:	4628      	mov	r0, r5
 800b568:	6013      	str	r3, [r2, #0]
 800b56a:	b004      	add	sp, #16
 800b56c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b570:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b574:	eb00 0904 	add.w	r9, r0, r4
 800b578:	d1e5      	bne.n	800b546 <__cvt+0x6a>
 800b57a:	7803      	ldrb	r3, [r0, #0]
 800b57c:	2b30      	cmp	r3, #48	@ 0x30
 800b57e:	d10a      	bne.n	800b596 <__cvt+0xba>
 800b580:	2200      	movs	r2, #0
 800b582:	2300      	movs	r3, #0
 800b584:	4630      	mov	r0, r6
 800b586:	4639      	mov	r1, r7
 800b588:	f7f5 faa6 	bl	8000ad8 <__aeabi_dcmpeq>
 800b58c:	b918      	cbnz	r0, 800b596 <__cvt+0xba>
 800b58e:	f1c4 0401 	rsb	r4, r4, #1
 800b592:	f8ca 4000 	str.w	r4, [sl]
 800b596:	f8da 3000 	ldr.w	r3, [sl]
 800b59a:	4499      	add	r9, r3
 800b59c:	e7d3      	b.n	800b546 <__cvt+0x6a>
 800b59e:	1c59      	adds	r1, r3, #1
 800b5a0:	9103      	str	r1, [sp, #12]
 800b5a2:	701a      	strb	r2, [r3, #0]
 800b5a4:	e7d9      	b.n	800b55a <__cvt+0x7e>

0800b5a6 <__exponent>:
 800b5a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5a8:	2900      	cmp	r1, #0
 800b5aa:	bfba      	itte	lt
 800b5ac:	4249      	neglt	r1, r1
 800b5ae:	232d      	movlt	r3, #45	@ 0x2d
 800b5b0:	232b      	movge	r3, #43	@ 0x2b
 800b5b2:	2909      	cmp	r1, #9
 800b5b4:	7002      	strb	r2, [r0, #0]
 800b5b6:	7043      	strb	r3, [r0, #1]
 800b5b8:	dd29      	ble.n	800b60e <__exponent+0x68>
 800b5ba:	f10d 0307 	add.w	r3, sp, #7
 800b5be:	461d      	mov	r5, r3
 800b5c0:	270a      	movs	r7, #10
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	fbb1 f6f7 	udiv	r6, r1, r7
 800b5c8:	fb07 1416 	mls	r4, r7, r6, r1
 800b5cc:	3430      	adds	r4, #48	@ 0x30
 800b5ce:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b5d2:	460c      	mov	r4, r1
 800b5d4:	2c63      	cmp	r4, #99	@ 0x63
 800b5d6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b5da:	4631      	mov	r1, r6
 800b5dc:	dcf1      	bgt.n	800b5c2 <__exponent+0x1c>
 800b5de:	3130      	adds	r1, #48	@ 0x30
 800b5e0:	1e94      	subs	r4, r2, #2
 800b5e2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b5e6:	1c41      	adds	r1, r0, #1
 800b5e8:	4623      	mov	r3, r4
 800b5ea:	42ab      	cmp	r3, r5
 800b5ec:	d30a      	bcc.n	800b604 <__exponent+0x5e>
 800b5ee:	f10d 0309 	add.w	r3, sp, #9
 800b5f2:	1a9b      	subs	r3, r3, r2
 800b5f4:	42ac      	cmp	r4, r5
 800b5f6:	bf88      	it	hi
 800b5f8:	2300      	movhi	r3, #0
 800b5fa:	3302      	adds	r3, #2
 800b5fc:	4403      	add	r3, r0
 800b5fe:	1a18      	subs	r0, r3, r0
 800b600:	b003      	add	sp, #12
 800b602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b604:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b608:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b60c:	e7ed      	b.n	800b5ea <__exponent+0x44>
 800b60e:	2330      	movs	r3, #48	@ 0x30
 800b610:	3130      	adds	r1, #48	@ 0x30
 800b612:	7083      	strb	r3, [r0, #2]
 800b614:	70c1      	strb	r1, [r0, #3]
 800b616:	1d03      	adds	r3, r0, #4
 800b618:	e7f1      	b.n	800b5fe <__exponent+0x58>
	...

0800b61c <_printf_float>:
 800b61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b620:	b08d      	sub	sp, #52	@ 0x34
 800b622:	460c      	mov	r4, r1
 800b624:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b628:	4616      	mov	r6, r2
 800b62a:	461f      	mov	r7, r3
 800b62c:	4605      	mov	r5, r0
 800b62e:	f000 ff09 	bl	800c444 <_localeconv_r>
 800b632:	6803      	ldr	r3, [r0, #0]
 800b634:	9304      	str	r3, [sp, #16]
 800b636:	4618      	mov	r0, r3
 800b638:	f7f4 fe22 	bl	8000280 <strlen>
 800b63c:	2300      	movs	r3, #0
 800b63e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b640:	f8d8 3000 	ldr.w	r3, [r8]
 800b644:	9005      	str	r0, [sp, #20]
 800b646:	3307      	adds	r3, #7
 800b648:	f023 0307 	bic.w	r3, r3, #7
 800b64c:	f103 0208 	add.w	r2, r3, #8
 800b650:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b654:	f8d4 b000 	ldr.w	fp, [r4]
 800b658:	f8c8 2000 	str.w	r2, [r8]
 800b65c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b660:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b664:	9307      	str	r3, [sp, #28]
 800b666:	f8cd 8018 	str.w	r8, [sp, #24]
 800b66a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b66e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b672:	4b9c      	ldr	r3, [pc, #624]	@ (800b8e4 <_printf_float+0x2c8>)
 800b674:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b678:	f7f5 fa60 	bl	8000b3c <__aeabi_dcmpun>
 800b67c:	bb70      	cbnz	r0, 800b6dc <_printf_float+0xc0>
 800b67e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b682:	4b98      	ldr	r3, [pc, #608]	@ (800b8e4 <_printf_float+0x2c8>)
 800b684:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b688:	f7f5 fa3a 	bl	8000b00 <__aeabi_dcmple>
 800b68c:	bb30      	cbnz	r0, 800b6dc <_printf_float+0xc0>
 800b68e:	2200      	movs	r2, #0
 800b690:	2300      	movs	r3, #0
 800b692:	4640      	mov	r0, r8
 800b694:	4649      	mov	r1, r9
 800b696:	f7f5 fa29 	bl	8000aec <__aeabi_dcmplt>
 800b69a:	b110      	cbz	r0, 800b6a2 <_printf_float+0x86>
 800b69c:	232d      	movs	r3, #45	@ 0x2d
 800b69e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6a2:	4a91      	ldr	r2, [pc, #580]	@ (800b8e8 <_printf_float+0x2cc>)
 800b6a4:	4b91      	ldr	r3, [pc, #580]	@ (800b8ec <_printf_float+0x2d0>)
 800b6a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b6aa:	bf94      	ite	ls
 800b6ac:	4690      	movls	r8, r2
 800b6ae:	4698      	movhi	r8, r3
 800b6b0:	2303      	movs	r3, #3
 800b6b2:	6123      	str	r3, [r4, #16]
 800b6b4:	f02b 0304 	bic.w	r3, fp, #4
 800b6b8:	6023      	str	r3, [r4, #0]
 800b6ba:	f04f 0900 	mov.w	r9, #0
 800b6be:	9700      	str	r7, [sp, #0]
 800b6c0:	4633      	mov	r3, r6
 800b6c2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b6c4:	4621      	mov	r1, r4
 800b6c6:	4628      	mov	r0, r5
 800b6c8:	f000 f9d2 	bl	800ba70 <_printf_common>
 800b6cc:	3001      	adds	r0, #1
 800b6ce:	f040 808d 	bne.w	800b7ec <_printf_float+0x1d0>
 800b6d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b6d6:	b00d      	add	sp, #52	@ 0x34
 800b6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6dc:	4642      	mov	r2, r8
 800b6de:	464b      	mov	r3, r9
 800b6e0:	4640      	mov	r0, r8
 800b6e2:	4649      	mov	r1, r9
 800b6e4:	f7f5 fa2a 	bl	8000b3c <__aeabi_dcmpun>
 800b6e8:	b140      	cbz	r0, 800b6fc <_printf_float+0xe0>
 800b6ea:	464b      	mov	r3, r9
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	bfbc      	itt	lt
 800b6f0:	232d      	movlt	r3, #45	@ 0x2d
 800b6f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b6f6:	4a7e      	ldr	r2, [pc, #504]	@ (800b8f0 <_printf_float+0x2d4>)
 800b6f8:	4b7e      	ldr	r3, [pc, #504]	@ (800b8f4 <_printf_float+0x2d8>)
 800b6fa:	e7d4      	b.n	800b6a6 <_printf_float+0x8a>
 800b6fc:	6863      	ldr	r3, [r4, #4]
 800b6fe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b702:	9206      	str	r2, [sp, #24]
 800b704:	1c5a      	adds	r2, r3, #1
 800b706:	d13b      	bne.n	800b780 <_printf_float+0x164>
 800b708:	2306      	movs	r3, #6
 800b70a:	6063      	str	r3, [r4, #4]
 800b70c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b710:	2300      	movs	r3, #0
 800b712:	6022      	str	r2, [r4, #0]
 800b714:	9303      	str	r3, [sp, #12]
 800b716:	ab0a      	add	r3, sp, #40	@ 0x28
 800b718:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b71c:	ab09      	add	r3, sp, #36	@ 0x24
 800b71e:	9300      	str	r3, [sp, #0]
 800b720:	6861      	ldr	r1, [r4, #4]
 800b722:	ec49 8b10 	vmov	d0, r8, r9
 800b726:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b72a:	4628      	mov	r0, r5
 800b72c:	f7ff fed6 	bl	800b4dc <__cvt>
 800b730:	9b06      	ldr	r3, [sp, #24]
 800b732:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b734:	2b47      	cmp	r3, #71	@ 0x47
 800b736:	4680      	mov	r8, r0
 800b738:	d129      	bne.n	800b78e <_printf_float+0x172>
 800b73a:	1cc8      	adds	r0, r1, #3
 800b73c:	db02      	blt.n	800b744 <_printf_float+0x128>
 800b73e:	6863      	ldr	r3, [r4, #4]
 800b740:	4299      	cmp	r1, r3
 800b742:	dd41      	ble.n	800b7c8 <_printf_float+0x1ac>
 800b744:	f1aa 0a02 	sub.w	sl, sl, #2
 800b748:	fa5f fa8a 	uxtb.w	sl, sl
 800b74c:	3901      	subs	r1, #1
 800b74e:	4652      	mov	r2, sl
 800b750:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b754:	9109      	str	r1, [sp, #36]	@ 0x24
 800b756:	f7ff ff26 	bl	800b5a6 <__exponent>
 800b75a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b75c:	1813      	adds	r3, r2, r0
 800b75e:	2a01      	cmp	r2, #1
 800b760:	4681      	mov	r9, r0
 800b762:	6123      	str	r3, [r4, #16]
 800b764:	dc02      	bgt.n	800b76c <_printf_float+0x150>
 800b766:	6822      	ldr	r2, [r4, #0]
 800b768:	07d2      	lsls	r2, r2, #31
 800b76a:	d501      	bpl.n	800b770 <_printf_float+0x154>
 800b76c:	3301      	adds	r3, #1
 800b76e:	6123      	str	r3, [r4, #16]
 800b770:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b774:	2b00      	cmp	r3, #0
 800b776:	d0a2      	beq.n	800b6be <_printf_float+0xa2>
 800b778:	232d      	movs	r3, #45	@ 0x2d
 800b77a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b77e:	e79e      	b.n	800b6be <_printf_float+0xa2>
 800b780:	9a06      	ldr	r2, [sp, #24]
 800b782:	2a47      	cmp	r2, #71	@ 0x47
 800b784:	d1c2      	bne.n	800b70c <_printf_float+0xf0>
 800b786:	2b00      	cmp	r3, #0
 800b788:	d1c0      	bne.n	800b70c <_printf_float+0xf0>
 800b78a:	2301      	movs	r3, #1
 800b78c:	e7bd      	b.n	800b70a <_printf_float+0xee>
 800b78e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b792:	d9db      	bls.n	800b74c <_printf_float+0x130>
 800b794:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b798:	d118      	bne.n	800b7cc <_printf_float+0x1b0>
 800b79a:	2900      	cmp	r1, #0
 800b79c:	6863      	ldr	r3, [r4, #4]
 800b79e:	dd0b      	ble.n	800b7b8 <_printf_float+0x19c>
 800b7a0:	6121      	str	r1, [r4, #16]
 800b7a2:	b913      	cbnz	r3, 800b7aa <_printf_float+0x18e>
 800b7a4:	6822      	ldr	r2, [r4, #0]
 800b7a6:	07d0      	lsls	r0, r2, #31
 800b7a8:	d502      	bpl.n	800b7b0 <_printf_float+0x194>
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	440b      	add	r3, r1
 800b7ae:	6123      	str	r3, [r4, #16]
 800b7b0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b7b2:	f04f 0900 	mov.w	r9, #0
 800b7b6:	e7db      	b.n	800b770 <_printf_float+0x154>
 800b7b8:	b913      	cbnz	r3, 800b7c0 <_printf_float+0x1a4>
 800b7ba:	6822      	ldr	r2, [r4, #0]
 800b7bc:	07d2      	lsls	r2, r2, #31
 800b7be:	d501      	bpl.n	800b7c4 <_printf_float+0x1a8>
 800b7c0:	3302      	adds	r3, #2
 800b7c2:	e7f4      	b.n	800b7ae <_printf_float+0x192>
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	e7f2      	b.n	800b7ae <_printf_float+0x192>
 800b7c8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b7cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7ce:	4299      	cmp	r1, r3
 800b7d0:	db05      	blt.n	800b7de <_printf_float+0x1c2>
 800b7d2:	6823      	ldr	r3, [r4, #0]
 800b7d4:	6121      	str	r1, [r4, #16]
 800b7d6:	07d8      	lsls	r0, r3, #31
 800b7d8:	d5ea      	bpl.n	800b7b0 <_printf_float+0x194>
 800b7da:	1c4b      	adds	r3, r1, #1
 800b7dc:	e7e7      	b.n	800b7ae <_printf_float+0x192>
 800b7de:	2900      	cmp	r1, #0
 800b7e0:	bfd4      	ite	le
 800b7e2:	f1c1 0202 	rsble	r2, r1, #2
 800b7e6:	2201      	movgt	r2, #1
 800b7e8:	4413      	add	r3, r2
 800b7ea:	e7e0      	b.n	800b7ae <_printf_float+0x192>
 800b7ec:	6823      	ldr	r3, [r4, #0]
 800b7ee:	055a      	lsls	r2, r3, #21
 800b7f0:	d407      	bmi.n	800b802 <_printf_float+0x1e6>
 800b7f2:	6923      	ldr	r3, [r4, #16]
 800b7f4:	4642      	mov	r2, r8
 800b7f6:	4631      	mov	r1, r6
 800b7f8:	4628      	mov	r0, r5
 800b7fa:	47b8      	blx	r7
 800b7fc:	3001      	adds	r0, #1
 800b7fe:	d12b      	bne.n	800b858 <_printf_float+0x23c>
 800b800:	e767      	b.n	800b6d2 <_printf_float+0xb6>
 800b802:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b806:	f240 80dd 	bls.w	800b9c4 <_printf_float+0x3a8>
 800b80a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b80e:	2200      	movs	r2, #0
 800b810:	2300      	movs	r3, #0
 800b812:	f7f5 f961 	bl	8000ad8 <__aeabi_dcmpeq>
 800b816:	2800      	cmp	r0, #0
 800b818:	d033      	beq.n	800b882 <_printf_float+0x266>
 800b81a:	4a37      	ldr	r2, [pc, #220]	@ (800b8f8 <_printf_float+0x2dc>)
 800b81c:	2301      	movs	r3, #1
 800b81e:	4631      	mov	r1, r6
 800b820:	4628      	mov	r0, r5
 800b822:	47b8      	blx	r7
 800b824:	3001      	adds	r0, #1
 800b826:	f43f af54 	beq.w	800b6d2 <_printf_float+0xb6>
 800b82a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b82e:	4543      	cmp	r3, r8
 800b830:	db02      	blt.n	800b838 <_printf_float+0x21c>
 800b832:	6823      	ldr	r3, [r4, #0]
 800b834:	07d8      	lsls	r0, r3, #31
 800b836:	d50f      	bpl.n	800b858 <_printf_float+0x23c>
 800b838:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b83c:	4631      	mov	r1, r6
 800b83e:	4628      	mov	r0, r5
 800b840:	47b8      	blx	r7
 800b842:	3001      	adds	r0, #1
 800b844:	f43f af45 	beq.w	800b6d2 <_printf_float+0xb6>
 800b848:	f04f 0900 	mov.w	r9, #0
 800b84c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b850:	f104 0a1a 	add.w	sl, r4, #26
 800b854:	45c8      	cmp	r8, r9
 800b856:	dc09      	bgt.n	800b86c <_printf_float+0x250>
 800b858:	6823      	ldr	r3, [r4, #0]
 800b85a:	079b      	lsls	r3, r3, #30
 800b85c:	f100 8103 	bmi.w	800ba66 <_printf_float+0x44a>
 800b860:	68e0      	ldr	r0, [r4, #12]
 800b862:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b864:	4298      	cmp	r0, r3
 800b866:	bfb8      	it	lt
 800b868:	4618      	movlt	r0, r3
 800b86a:	e734      	b.n	800b6d6 <_printf_float+0xba>
 800b86c:	2301      	movs	r3, #1
 800b86e:	4652      	mov	r2, sl
 800b870:	4631      	mov	r1, r6
 800b872:	4628      	mov	r0, r5
 800b874:	47b8      	blx	r7
 800b876:	3001      	adds	r0, #1
 800b878:	f43f af2b 	beq.w	800b6d2 <_printf_float+0xb6>
 800b87c:	f109 0901 	add.w	r9, r9, #1
 800b880:	e7e8      	b.n	800b854 <_printf_float+0x238>
 800b882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b884:	2b00      	cmp	r3, #0
 800b886:	dc39      	bgt.n	800b8fc <_printf_float+0x2e0>
 800b888:	4a1b      	ldr	r2, [pc, #108]	@ (800b8f8 <_printf_float+0x2dc>)
 800b88a:	2301      	movs	r3, #1
 800b88c:	4631      	mov	r1, r6
 800b88e:	4628      	mov	r0, r5
 800b890:	47b8      	blx	r7
 800b892:	3001      	adds	r0, #1
 800b894:	f43f af1d 	beq.w	800b6d2 <_printf_float+0xb6>
 800b898:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b89c:	ea59 0303 	orrs.w	r3, r9, r3
 800b8a0:	d102      	bne.n	800b8a8 <_printf_float+0x28c>
 800b8a2:	6823      	ldr	r3, [r4, #0]
 800b8a4:	07d9      	lsls	r1, r3, #31
 800b8a6:	d5d7      	bpl.n	800b858 <_printf_float+0x23c>
 800b8a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8ac:	4631      	mov	r1, r6
 800b8ae:	4628      	mov	r0, r5
 800b8b0:	47b8      	blx	r7
 800b8b2:	3001      	adds	r0, #1
 800b8b4:	f43f af0d 	beq.w	800b6d2 <_printf_float+0xb6>
 800b8b8:	f04f 0a00 	mov.w	sl, #0
 800b8bc:	f104 0b1a 	add.w	fp, r4, #26
 800b8c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8c2:	425b      	negs	r3, r3
 800b8c4:	4553      	cmp	r3, sl
 800b8c6:	dc01      	bgt.n	800b8cc <_printf_float+0x2b0>
 800b8c8:	464b      	mov	r3, r9
 800b8ca:	e793      	b.n	800b7f4 <_printf_float+0x1d8>
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	465a      	mov	r2, fp
 800b8d0:	4631      	mov	r1, r6
 800b8d2:	4628      	mov	r0, r5
 800b8d4:	47b8      	blx	r7
 800b8d6:	3001      	adds	r0, #1
 800b8d8:	f43f aefb 	beq.w	800b6d2 <_printf_float+0xb6>
 800b8dc:	f10a 0a01 	add.w	sl, sl, #1
 800b8e0:	e7ee      	b.n	800b8c0 <_printf_float+0x2a4>
 800b8e2:	bf00      	nop
 800b8e4:	7fefffff 	.word	0x7fefffff
 800b8e8:	0801269c 	.word	0x0801269c
 800b8ec:	080126a0 	.word	0x080126a0
 800b8f0:	080126a4 	.word	0x080126a4
 800b8f4:	080126a8 	.word	0x080126a8
 800b8f8:	080126ac 	.word	0x080126ac
 800b8fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b8fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b902:	4553      	cmp	r3, sl
 800b904:	bfa8      	it	ge
 800b906:	4653      	movge	r3, sl
 800b908:	2b00      	cmp	r3, #0
 800b90a:	4699      	mov	r9, r3
 800b90c:	dc36      	bgt.n	800b97c <_printf_float+0x360>
 800b90e:	f04f 0b00 	mov.w	fp, #0
 800b912:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b916:	f104 021a 	add.w	r2, r4, #26
 800b91a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b91c:	9306      	str	r3, [sp, #24]
 800b91e:	eba3 0309 	sub.w	r3, r3, r9
 800b922:	455b      	cmp	r3, fp
 800b924:	dc31      	bgt.n	800b98a <_printf_float+0x36e>
 800b926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b928:	459a      	cmp	sl, r3
 800b92a:	dc3a      	bgt.n	800b9a2 <_printf_float+0x386>
 800b92c:	6823      	ldr	r3, [r4, #0]
 800b92e:	07da      	lsls	r2, r3, #31
 800b930:	d437      	bmi.n	800b9a2 <_printf_float+0x386>
 800b932:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b934:	ebaa 0903 	sub.w	r9, sl, r3
 800b938:	9b06      	ldr	r3, [sp, #24]
 800b93a:	ebaa 0303 	sub.w	r3, sl, r3
 800b93e:	4599      	cmp	r9, r3
 800b940:	bfa8      	it	ge
 800b942:	4699      	movge	r9, r3
 800b944:	f1b9 0f00 	cmp.w	r9, #0
 800b948:	dc33      	bgt.n	800b9b2 <_printf_float+0x396>
 800b94a:	f04f 0800 	mov.w	r8, #0
 800b94e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b952:	f104 0b1a 	add.w	fp, r4, #26
 800b956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b958:	ebaa 0303 	sub.w	r3, sl, r3
 800b95c:	eba3 0309 	sub.w	r3, r3, r9
 800b960:	4543      	cmp	r3, r8
 800b962:	f77f af79 	ble.w	800b858 <_printf_float+0x23c>
 800b966:	2301      	movs	r3, #1
 800b968:	465a      	mov	r2, fp
 800b96a:	4631      	mov	r1, r6
 800b96c:	4628      	mov	r0, r5
 800b96e:	47b8      	blx	r7
 800b970:	3001      	adds	r0, #1
 800b972:	f43f aeae 	beq.w	800b6d2 <_printf_float+0xb6>
 800b976:	f108 0801 	add.w	r8, r8, #1
 800b97a:	e7ec      	b.n	800b956 <_printf_float+0x33a>
 800b97c:	4642      	mov	r2, r8
 800b97e:	4631      	mov	r1, r6
 800b980:	4628      	mov	r0, r5
 800b982:	47b8      	blx	r7
 800b984:	3001      	adds	r0, #1
 800b986:	d1c2      	bne.n	800b90e <_printf_float+0x2f2>
 800b988:	e6a3      	b.n	800b6d2 <_printf_float+0xb6>
 800b98a:	2301      	movs	r3, #1
 800b98c:	4631      	mov	r1, r6
 800b98e:	4628      	mov	r0, r5
 800b990:	9206      	str	r2, [sp, #24]
 800b992:	47b8      	blx	r7
 800b994:	3001      	adds	r0, #1
 800b996:	f43f ae9c 	beq.w	800b6d2 <_printf_float+0xb6>
 800b99a:	9a06      	ldr	r2, [sp, #24]
 800b99c:	f10b 0b01 	add.w	fp, fp, #1
 800b9a0:	e7bb      	b.n	800b91a <_printf_float+0x2fe>
 800b9a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9a6:	4631      	mov	r1, r6
 800b9a8:	4628      	mov	r0, r5
 800b9aa:	47b8      	blx	r7
 800b9ac:	3001      	adds	r0, #1
 800b9ae:	d1c0      	bne.n	800b932 <_printf_float+0x316>
 800b9b0:	e68f      	b.n	800b6d2 <_printf_float+0xb6>
 800b9b2:	9a06      	ldr	r2, [sp, #24]
 800b9b4:	464b      	mov	r3, r9
 800b9b6:	4442      	add	r2, r8
 800b9b8:	4631      	mov	r1, r6
 800b9ba:	4628      	mov	r0, r5
 800b9bc:	47b8      	blx	r7
 800b9be:	3001      	adds	r0, #1
 800b9c0:	d1c3      	bne.n	800b94a <_printf_float+0x32e>
 800b9c2:	e686      	b.n	800b6d2 <_printf_float+0xb6>
 800b9c4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b9c8:	f1ba 0f01 	cmp.w	sl, #1
 800b9cc:	dc01      	bgt.n	800b9d2 <_printf_float+0x3b6>
 800b9ce:	07db      	lsls	r3, r3, #31
 800b9d0:	d536      	bpl.n	800ba40 <_printf_float+0x424>
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	4642      	mov	r2, r8
 800b9d6:	4631      	mov	r1, r6
 800b9d8:	4628      	mov	r0, r5
 800b9da:	47b8      	blx	r7
 800b9dc:	3001      	adds	r0, #1
 800b9de:	f43f ae78 	beq.w	800b6d2 <_printf_float+0xb6>
 800b9e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9e6:	4631      	mov	r1, r6
 800b9e8:	4628      	mov	r0, r5
 800b9ea:	47b8      	blx	r7
 800b9ec:	3001      	adds	r0, #1
 800b9ee:	f43f ae70 	beq.w	800b6d2 <_printf_float+0xb6>
 800b9f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b9fe:	f7f5 f86b 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba02:	b9c0      	cbnz	r0, 800ba36 <_printf_float+0x41a>
 800ba04:	4653      	mov	r3, sl
 800ba06:	f108 0201 	add.w	r2, r8, #1
 800ba0a:	4631      	mov	r1, r6
 800ba0c:	4628      	mov	r0, r5
 800ba0e:	47b8      	blx	r7
 800ba10:	3001      	adds	r0, #1
 800ba12:	d10c      	bne.n	800ba2e <_printf_float+0x412>
 800ba14:	e65d      	b.n	800b6d2 <_printf_float+0xb6>
 800ba16:	2301      	movs	r3, #1
 800ba18:	465a      	mov	r2, fp
 800ba1a:	4631      	mov	r1, r6
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	47b8      	blx	r7
 800ba20:	3001      	adds	r0, #1
 800ba22:	f43f ae56 	beq.w	800b6d2 <_printf_float+0xb6>
 800ba26:	f108 0801 	add.w	r8, r8, #1
 800ba2a:	45d0      	cmp	r8, sl
 800ba2c:	dbf3      	blt.n	800ba16 <_printf_float+0x3fa>
 800ba2e:	464b      	mov	r3, r9
 800ba30:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ba34:	e6df      	b.n	800b7f6 <_printf_float+0x1da>
 800ba36:	f04f 0800 	mov.w	r8, #0
 800ba3a:	f104 0b1a 	add.w	fp, r4, #26
 800ba3e:	e7f4      	b.n	800ba2a <_printf_float+0x40e>
 800ba40:	2301      	movs	r3, #1
 800ba42:	4642      	mov	r2, r8
 800ba44:	e7e1      	b.n	800ba0a <_printf_float+0x3ee>
 800ba46:	2301      	movs	r3, #1
 800ba48:	464a      	mov	r2, r9
 800ba4a:	4631      	mov	r1, r6
 800ba4c:	4628      	mov	r0, r5
 800ba4e:	47b8      	blx	r7
 800ba50:	3001      	adds	r0, #1
 800ba52:	f43f ae3e 	beq.w	800b6d2 <_printf_float+0xb6>
 800ba56:	f108 0801 	add.w	r8, r8, #1
 800ba5a:	68e3      	ldr	r3, [r4, #12]
 800ba5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ba5e:	1a5b      	subs	r3, r3, r1
 800ba60:	4543      	cmp	r3, r8
 800ba62:	dcf0      	bgt.n	800ba46 <_printf_float+0x42a>
 800ba64:	e6fc      	b.n	800b860 <_printf_float+0x244>
 800ba66:	f04f 0800 	mov.w	r8, #0
 800ba6a:	f104 0919 	add.w	r9, r4, #25
 800ba6e:	e7f4      	b.n	800ba5a <_printf_float+0x43e>

0800ba70 <_printf_common>:
 800ba70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba74:	4616      	mov	r6, r2
 800ba76:	4698      	mov	r8, r3
 800ba78:	688a      	ldr	r2, [r1, #8]
 800ba7a:	690b      	ldr	r3, [r1, #16]
 800ba7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ba80:	4293      	cmp	r3, r2
 800ba82:	bfb8      	it	lt
 800ba84:	4613      	movlt	r3, r2
 800ba86:	6033      	str	r3, [r6, #0]
 800ba88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ba8c:	4607      	mov	r7, r0
 800ba8e:	460c      	mov	r4, r1
 800ba90:	b10a      	cbz	r2, 800ba96 <_printf_common+0x26>
 800ba92:	3301      	adds	r3, #1
 800ba94:	6033      	str	r3, [r6, #0]
 800ba96:	6823      	ldr	r3, [r4, #0]
 800ba98:	0699      	lsls	r1, r3, #26
 800ba9a:	bf42      	ittt	mi
 800ba9c:	6833      	ldrmi	r3, [r6, #0]
 800ba9e:	3302      	addmi	r3, #2
 800baa0:	6033      	strmi	r3, [r6, #0]
 800baa2:	6825      	ldr	r5, [r4, #0]
 800baa4:	f015 0506 	ands.w	r5, r5, #6
 800baa8:	d106      	bne.n	800bab8 <_printf_common+0x48>
 800baaa:	f104 0a19 	add.w	sl, r4, #25
 800baae:	68e3      	ldr	r3, [r4, #12]
 800bab0:	6832      	ldr	r2, [r6, #0]
 800bab2:	1a9b      	subs	r3, r3, r2
 800bab4:	42ab      	cmp	r3, r5
 800bab6:	dc26      	bgt.n	800bb06 <_printf_common+0x96>
 800bab8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800babc:	6822      	ldr	r2, [r4, #0]
 800babe:	3b00      	subs	r3, #0
 800bac0:	bf18      	it	ne
 800bac2:	2301      	movne	r3, #1
 800bac4:	0692      	lsls	r2, r2, #26
 800bac6:	d42b      	bmi.n	800bb20 <_printf_common+0xb0>
 800bac8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bacc:	4641      	mov	r1, r8
 800bace:	4638      	mov	r0, r7
 800bad0:	47c8      	blx	r9
 800bad2:	3001      	adds	r0, #1
 800bad4:	d01e      	beq.n	800bb14 <_printf_common+0xa4>
 800bad6:	6823      	ldr	r3, [r4, #0]
 800bad8:	6922      	ldr	r2, [r4, #16]
 800bada:	f003 0306 	and.w	r3, r3, #6
 800bade:	2b04      	cmp	r3, #4
 800bae0:	bf02      	ittt	eq
 800bae2:	68e5      	ldreq	r5, [r4, #12]
 800bae4:	6833      	ldreq	r3, [r6, #0]
 800bae6:	1aed      	subeq	r5, r5, r3
 800bae8:	68a3      	ldr	r3, [r4, #8]
 800baea:	bf0c      	ite	eq
 800baec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800baf0:	2500      	movne	r5, #0
 800baf2:	4293      	cmp	r3, r2
 800baf4:	bfc4      	itt	gt
 800baf6:	1a9b      	subgt	r3, r3, r2
 800baf8:	18ed      	addgt	r5, r5, r3
 800bafa:	2600      	movs	r6, #0
 800bafc:	341a      	adds	r4, #26
 800bafe:	42b5      	cmp	r5, r6
 800bb00:	d11a      	bne.n	800bb38 <_printf_common+0xc8>
 800bb02:	2000      	movs	r0, #0
 800bb04:	e008      	b.n	800bb18 <_printf_common+0xa8>
 800bb06:	2301      	movs	r3, #1
 800bb08:	4652      	mov	r2, sl
 800bb0a:	4641      	mov	r1, r8
 800bb0c:	4638      	mov	r0, r7
 800bb0e:	47c8      	blx	r9
 800bb10:	3001      	adds	r0, #1
 800bb12:	d103      	bne.n	800bb1c <_printf_common+0xac>
 800bb14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb1c:	3501      	adds	r5, #1
 800bb1e:	e7c6      	b.n	800baae <_printf_common+0x3e>
 800bb20:	18e1      	adds	r1, r4, r3
 800bb22:	1c5a      	adds	r2, r3, #1
 800bb24:	2030      	movs	r0, #48	@ 0x30
 800bb26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bb2a:	4422      	add	r2, r4
 800bb2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bb30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bb34:	3302      	adds	r3, #2
 800bb36:	e7c7      	b.n	800bac8 <_printf_common+0x58>
 800bb38:	2301      	movs	r3, #1
 800bb3a:	4622      	mov	r2, r4
 800bb3c:	4641      	mov	r1, r8
 800bb3e:	4638      	mov	r0, r7
 800bb40:	47c8      	blx	r9
 800bb42:	3001      	adds	r0, #1
 800bb44:	d0e6      	beq.n	800bb14 <_printf_common+0xa4>
 800bb46:	3601      	adds	r6, #1
 800bb48:	e7d9      	b.n	800bafe <_printf_common+0x8e>
	...

0800bb4c <_printf_i>:
 800bb4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb50:	7e0f      	ldrb	r7, [r1, #24]
 800bb52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bb54:	2f78      	cmp	r7, #120	@ 0x78
 800bb56:	4691      	mov	r9, r2
 800bb58:	4680      	mov	r8, r0
 800bb5a:	460c      	mov	r4, r1
 800bb5c:	469a      	mov	sl, r3
 800bb5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bb62:	d807      	bhi.n	800bb74 <_printf_i+0x28>
 800bb64:	2f62      	cmp	r7, #98	@ 0x62
 800bb66:	d80a      	bhi.n	800bb7e <_printf_i+0x32>
 800bb68:	2f00      	cmp	r7, #0
 800bb6a:	f000 80d2 	beq.w	800bd12 <_printf_i+0x1c6>
 800bb6e:	2f58      	cmp	r7, #88	@ 0x58
 800bb70:	f000 80b9 	beq.w	800bce6 <_printf_i+0x19a>
 800bb74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bb7c:	e03a      	b.n	800bbf4 <_printf_i+0xa8>
 800bb7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bb82:	2b15      	cmp	r3, #21
 800bb84:	d8f6      	bhi.n	800bb74 <_printf_i+0x28>
 800bb86:	a101      	add	r1, pc, #4	@ (adr r1, 800bb8c <_printf_i+0x40>)
 800bb88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb8c:	0800bbe5 	.word	0x0800bbe5
 800bb90:	0800bbf9 	.word	0x0800bbf9
 800bb94:	0800bb75 	.word	0x0800bb75
 800bb98:	0800bb75 	.word	0x0800bb75
 800bb9c:	0800bb75 	.word	0x0800bb75
 800bba0:	0800bb75 	.word	0x0800bb75
 800bba4:	0800bbf9 	.word	0x0800bbf9
 800bba8:	0800bb75 	.word	0x0800bb75
 800bbac:	0800bb75 	.word	0x0800bb75
 800bbb0:	0800bb75 	.word	0x0800bb75
 800bbb4:	0800bb75 	.word	0x0800bb75
 800bbb8:	0800bcf9 	.word	0x0800bcf9
 800bbbc:	0800bc23 	.word	0x0800bc23
 800bbc0:	0800bcb3 	.word	0x0800bcb3
 800bbc4:	0800bb75 	.word	0x0800bb75
 800bbc8:	0800bb75 	.word	0x0800bb75
 800bbcc:	0800bd1b 	.word	0x0800bd1b
 800bbd0:	0800bb75 	.word	0x0800bb75
 800bbd4:	0800bc23 	.word	0x0800bc23
 800bbd8:	0800bb75 	.word	0x0800bb75
 800bbdc:	0800bb75 	.word	0x0800bb75
 800bbe0:	0800bcbb 	.word	0x0800bcbb
 800bbe4:	6833      	ldr	r3, [r6, #0]
 800bbe6:	1d1a      	adds	r2, r3, #4
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	6032      	str	r2, [r6, #0]
 800bbec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bbf0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	e09d      	b.n	800bd34 <_printf_i+0x1e8>
 800bbf8:	6833      	ldr	r3, [r6, #0]
 800bbfa:	6820      	ldr	r0, [r4, #0]
 800bbfc:	1d19      	adds	r1, r3, #4
 800bbfe:	6031      	str	r1, [r6, #0]
 800bc00:	0606      	lsls	r6, r0, #24
 800bc02:	d501      	bpl.n	800bc08 <_printf_i+0xbc>
 800bc04:	681d      	ldr	r5, [r3, #0]
 800bc06:	e003      	b.n	800bc10 <_printf_i+0xc4>
 800bc08:	0645      	lsls	r5, r0, #25
 800bc0a:	d5fb      	bpl.n	800bc04 <_printf_i+0xb8>
 800bc0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bc10:	2d00      	cmp	r5, #0
 800bc12:	da03      	bge.n	800bc1c <_printf_i+0xd0>
 800bc14:	232d      	movs	r3, #45	@ 0x2d
 800bc16:	426d      	negs	r5, r5
 800bc18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc1c:	4859      	ldr	r0, [pc, #356]	@ (800bd84 <_printf_i+0x238>)
 800bc1e:	230a      	movs	r3, #10
 800bc20:	e011      	b.n	800bc46 <_printf_i+0xfa>
 800bc22:	6821      	ldr	r1, [r4, #0]
 800bc24:	6833      	ldr	r3, [r6, #0]
 800bc26:	0608      	lsls	r0, r1, #24
 800bc28:	f853 5b04 	ldr.w	r5, [r3], #4
 800bc2c:	d402      	bmi.n	800bc34 <_printf_i+0xe8>
 800bc2e:	0649      	lsls	r1, r1, #25
 800bc30:	bf48      	it	mi
 800bc32:	b2ad      	uxthmi	r5, r5
 800bc34:	2f6f      	cmp	r7, #111	@ 0x6f
 800bc36:	4853      	ldr	r0, [pc, #332]	@ (800bd84 <_printf_i+0x238>)
 800bc38:	6033      	str	r3, [r6, #0]
 800bc3a:	bf14      	ite	ne
 800bc3c:	230a      	movne	r3, #10
 800bc3e:	2308      	moveq	r3, #8
 800bc40:	2100      	movs	r1, #0
 800bc42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bc46:	6866      	ldr	r6, [r4, #4]
 800bc48:	60a6      	str	r6, [r4, #8]
 800bc4a:	2e00      	cmp	r6, #0
 800bc4c:	bfa2      	ittt	ge
 800bc4e:	6821      	ldrge	r1, [r4, #0]
 800bc50:	f021 0104 	bicge.w	r1, r1, #4
 800bc54:	6021      	strge	r1, [r4, #0]
 800bc56:	b90d      	cbnz	r5, 800bc5c <_printf_i+0x110>
 800bc58:	2e00      	cmp	r6, #0
 800bc5a:	d04b      	beq.n	800bcf4 <_printf_i+0x1a8>
 800bc5c:	4616      	mov	r6, r2
 800bc5e:	fbb5 f1f3 	udiv	r1, r5, r3
 800bc62:	fb03 5711 	mls	r7, r3, r1, r5
 800bc66:	5dc7      	ldrb	r7, [r0, r7]
 800bc68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bc6c:	462f      	mov	r7, r5
 800bc6e:	42bb      	cmp	r3, r7
 800bc70:	460d      	mov	r5, r1
 800bc72:	d9f4      	bls.n	800bc5e <_printf_i+0x112>
 800bc74:	2b08      	cmp	r3, #8
 800bc76:	d10b      	bne.n	800bc90 <_printf_i+0x144>
 800bc78:	6823      	ldr	r3, [r4, #0]
 800bc7a:	07df      	lsls	r7, r3, #31
 800bc7c:	d508      	bpl.n	800bc90 <_printf_i+0x144>
 800bc7e:	6923      	ldr	r3, [r4, #16]
 800bc80:	6861      	ldr	r1, [r4, #4]
 800bc82:	4299      	cmp	r1, r3
 800bc84:	bfde      	ittt	le
 800bc86:	2330      	movle	r3, #48	@ 0x30
 800bc88:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bc8c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800bc90:	1b92      	subs	r2, r2, r6
 800bc92:	6122      	str	r2, [r4, #16]
 800bc94:	f8cd a000 	str.w	sl, [sp]
 800bc98:	464b      	mov	r3, r9
 800bc9a:	aa03      	add	r2, sp, #12
 800bc9c:	4621      	mov	r1, r4
 800bc9e:	4640      	mov	r0, r8
 800bca0:	f7ff fee6 	bl	800ba70 <_printf_common>
 800bca4:	3001      	adds	r0, #1
 800bca6:	d14a      	bne.n	800bd3e <_printf_i+0x1f2>
 800bca8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bcac:	b004      	add	sp, #16
 800bcae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcb2:	6823      	ldr	r3, [r4, #0]
 800bcb4:	f043 0320 	orr.w	r3, r3, #32
 800bcb8:	6023      	str	r3, [r4, #0]
 800bcba:	4833      	ldr	r0, [pc, #204]	@ (800bd88 <_printf_i+0x23c>)
 800bcbc:	2778      	movs	r7, #120	@ 0x78
 800bcbe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bcc2:	6823      	ldr	r3, [r4, #0]
 800bcc4:	6831      	ldr	r1, [r6, #0]
 800bcc6:	061f      	lsls	r7, r3, #24
 800bcc8:	f851 5b04 	ldr.w	r5, [r1], #4
 800bccc:	d402      	bmi.n	800bcd4 <_printf_i+0x188>
 800bcce:	065f      	lsls	r7, r3, #25
 800bcd0:	bf48      	it	mi
 800bcd2:	b2ad      	uxthmi	r5, r5
 800bcd4:	6031      	str	r1, [r6, #0]
 800bcd6:	07d9      	lsls	r1, r3, #31
 800bcd8:	bf44      	itt	mi
 800bcda:	f043 0320 	orrmi.w	r3, r3, #32
 800bcde:	6023      	strmi	r3, [r4, #0]
 800bce0:	b11d      	cbz	r5, 800bcea <_printf_i+0x19e>
 800bce2:	2310      	movs	r3, #16
 800bce4:	e7ac      	b.n	800bc40 <_printf_i+0xf4>
 800bce6:	4827      	ldr	r0, [pc, #156]	@ (800bd84 <_printf_i+0x238>)
 800bce8:	e7e9      	b.n	800bcbe <_printf_i+0x172>
 800bcea:	6823      	ldr	r3, [r4, #0]
 800bcec:	f023 0320 	bic.w	r3, r3, #32
 800bcf0:	6023      	str	r3, [r4, #0]
 800bcf2:	e7f6      	b.n	800bce2 <_printf_i+0x196>
 800bcf4:	4616      	mov	r6, r2
 800bcf6:	e7bd      	b.n	800bc74 <_printf_i+0x128>
 800bcf8:	6833      	ldr	r3, [r6, #0]
 800bcfa:	6825      	ldr	r5, [r4, #0]
 800bcfc:	6961      	ldr	r1, [r4, #20]
 800bcfe:	1d18      	adds	r0, r3, #4
 800bd00:	6030      	str	r0, [r6, #0]
 800bd02:	062e      	lsls	r6, r5, #24
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	d501      	bpl.n	800bd0c <_printf_i+0x1c0>
 800bd08:	6019      	str	r1, [r3, #0]
 800bd0a:	e002      	b.n	800bd12 <_printf_i+0x1c6>
 800bd0c:	0668      	lsls	r0, r5, #25
 800bd0e:	d5fb      	bpl.n	800bd08 <_printf_i+0x1bc>
 800bd10:	8019      	strh	r1, [r3, #0]
 800bd12:	2300      	movs	r3, #0
 800bd14:	6123      	str	r3, [r4, #16]
 800bd16:	4616      	mov	r6, r2
 800bd18:	e7bc      	b.n	800bc94 <_printf_i+0x148>
 800bd1a:	6833      	ldr	r3, [r6, #0]
 800bd1c:	1d1a      	adds	r2, r3, #4
 800bd1e:	6032      	str	r2, [r6, #0]
 800bd20:	681e      	ldr	r6, [r3, #0]
 800bd22:	6862      	ldr	r2, [r4, #4]
 800bd24:	2100      	movs	r1, #0
 800bd26:	4630      	mov	r0, r6
 800bd28:	f7f4 fa5a 	bl	80001e0 <memchr>
 800bd2c:	b108      	cbz	r0, 800bd32 <_printf_i+0x1e6>
 800bd2e:	1b80      	subs	r0, r0, r6
 800bd30:	6060      	str	r0, [r4, #4]
 800bd32:	6863      	ldr	r3, [r4, #4]
 800bd34:	6123      	str	r3, [r4, #16]
 800bd36:	2300      	movs	r3, #0
 800bd38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bd3c:	e7aa      	b.n	800bc94 <_printf_i+0x148>
 800bd3e:	6923      	ldr	r3, [r4, #16]
 800bd40:	4632      	mov	r2, r6
 800bd42:	4649      	mov	r1, r9
 800bd44:	4640      	mov	r0, r8
 800bd46:	47d0      	blx	sl
 800bd48:	3001      	adds	r0, #1
 800bd4a:	d0ad      	beq.n	800bca8 <_printf_i+0x15c>
 800bd4c:	6823      	ldr	r3, [r4, #0]
 800bd4e:	079b      	lsls	r3, r3, #30
 800bd50:	d413      	bmi.n	800bd7a <_printf_i+0x22e>
 800bd52:	68e0      	ldr	r0, [r4, #12]
 800bd54:	9b03      	ldr	r3, [sp, #12]
 800bd56:	4298      	cmp	r0, r3
 800bd58:	bfb8      	it	lt
 800bd5a:	4618      	movlt	r0, r3
 800bd5c:	e7a6      	b.n	800bcac <_printf_i+0x160>
 800bd5e:	2301      	movs	r3, #1
 800bd60:	4632      	mov	r2, r6
 800bd62:	4649      	mov	r1, r9
 800bd64:	4640      	mov	r0, r8
 800bd66:	47d0      	blx	sl
 800bd68:	3001      	adds	r0, #1
 800bd6a:	d09d      	beq.n	800bca8 <_printf_i+0x15c>
 800bd6c:	3501      	adds	r5, #1
 800bd6e:	68e3      	ldr	r3, [r4, #12]
 800bd70:	9903      	ldr	r1, [sp, #12]
 800bd72:	1a5b      	subs	r3, r3, r1
 800bd74:	42ab      	cmp	r3, r5
 800bd76:	dcf2      	bgt.n	800bd5e <_printf_i+0x212>
 800bd78:	e7eb      	b.n	800bd52 <_printf_i+0x206>
 800bd7a:	2500      	movs	r5, #0
 800bd7c:	f104 0619 	add.w	r6, r4, #25
 800bd80:	e7f5      	b.n	800bd6e <_printf_i+0x222>
 800bd82:	bf00      	nop
 800bd84:	080126ae 	.word	0x080126ae
 800bd88:	080126bf 	.word	0x080126bf

0800bd8c <_scanf_float>:
 800bd8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd90:	b087      	sub	sp, #28
 800bd92:	4617      	mov	r7, r2
 800bd94:	9303      	str	r3, [sp, #12]
 800bd96:	688b      	ldr	r3, [r1, #8]
 800bd98:	1e5a      	subs	r2, r3, #1
 800bd9a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800bd9e:	bf81      	itttt	hi
 800bda0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800bda4:	eb03 0b05 	addhi.w	fp, r3, r5
 800bda8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800bdac:	608b      	strhi	r3, [r1, #8]
 800bdae:	680b      	ldr	r3, [r1, #0]
 800bdb0:	460a      	mov	r2, r1
 800bdb2:	f04f 0500 	mov.w	r5, #0
 800bdb6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800bdba:	f842 3b1c 	str.w	r3, [r2], #28
 800bdbe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bdc2:	4680      	mov	r8, r0
 800bdc4:	460c      	mov	r4, r1
 800bdc6:	bf98      	it	ls
 800bdc8:	f04f 0b00 	movls.w	fp, #0
 800bdcc:	9201      	str	r2, [sp, #4]
 800bdce:	4616      	mov	r6, r2
 800bdd0:	46aa      	mov	sl, r5
 800bdd2:	46a9      	mov	r9, r5
 800bdd4:	9502      	str	r5, [sp, #8]
 800bdd6:	68a2      	ldr	r2, [r4, #8]
 800bdd8:	b152      	cbz	r2, 800bdf0 <_scanf_float+0x64>
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	2b4e      	cmp	r3, #78	@ 0x4e
 800bde0:	d864      	bhi.n	800beac <_scanf_float+0x120>
 800bde2:	2b40      	cmp	r3, #64	@ 0x40
 800bde4:	d83c      	bhi.n	800be60 <_scanf_float+0xd4>
 800bde6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800bdea:	b2c8      	uxtb	r0, r1
 800bdec:	280e      	cmp	r0, #14
 800bdee:	d93a      	bls.n	800be66 <_scanf_float+0xda>
 800bdf0:	f1b9 0f00 	cmp.w	r9, #0
 800bdf4:	d003      	beq.n	800bdfe <_scanf_float+0x72>
 800bdf6:	6823      	ldr	r3, [r4, #0]
 800bdf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bdfc:	6023      	str	r3, [r4, #0]
 800bdfe:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800be02:	f1ba 0f01 	cmp.w	sl, #1
 800be06:	f200 8117 	bhi.w	800c038 <_scanf_float+0x2ac>
 800be0a:	9b01      	ldr	r3, [sp, #4]
 800be0c:	429e      	cmp	r6, r3
 800be0e:	f200 8108 	bhi.w	800c022 <_scanf_float+0x296>
 800be12:	2001      	movs	r0, #1
 800be14:	b007      	add	sp, #28
 800be16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be1a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800be1e:	2a0d      	cmp	r2, #13
 800be20:	d8e6      	bhi.n	800bdf0 <_scanf_float+0x64>
 800be22:	a101      	add	r1, pc, #4	@ (adr r1, 800be28 <_scanf_float+0x9c>)
 800be24:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800be28:	0800bf6f 	.word	0x0800bf6f
 800be2c:	0800bdf1 	.word	0x0800bdf1
 800be30:	0800bdf1 	.word	0x0800bdf1
 800be34:	0800bdf1 	.word	0x0800bdf1
 800be38:	0800bfcf 	.word	0x0800bfcf
 800be3c:	0800bfa7 	.word	0x0800bfa7
 800be40:	0800bdf1 	.word	0x0800bdf1
 800be44:	0800bdf1 	.word	0x0800bdf1
 800be48:	0800bf7d 	.word	0x0800bf7d
 800be4c:	0800bdf1 	.word	0x0800bdf1
 800be50:	0800bdf1 	.word	0x0800bdf1
 800be54:	0800bdf1 	.word	0x0800bdf1
 800be58:	0800bdf1 	.word	0x0800bdf1
 800be5c:	0800bf35 	.word	0x0800bf35
 800be60:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800be64:	e7db      	b.n	800be1e <_scanf_float+0x92>
 800be66:	290e      	cmp	r1, #14
 800be68:	d8c2      	bhi.n	800bdf0 <_scanf_float+0x64>
 800be6a:	a001      	add	r0, pc, #4	@ (adr r0, 800be70 <_scanf_float+0xe4>)
 800be6c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800be70:	0800bf25 	.word	0x0800bf25
 800be74:	0800bdf1 	.word	0x0800bdf1
 800be78:	0800bf25 	.word	0x0800bf25
 800be7c:	0800bfbb 	.word	0x0800bfbb
 800be80:	0800bdf1 	.word	0x0800bdf1
 800be84:	0800becd 	.word	0x0800becd
 800be88:	0800bf0b 	.word	0x0800bf0b
 800be8c:	0800bf0b 	.word	0x0800bf0b
 800be90:	0800bf0b 	.word	0x0800bf0b
 800be94:	0800bf0b 	.word	0x0800bf0b
 800be98:	0800bf0b 	.word	0x0800bf0b
 800be9c:	0800bf0b 	.word	0x0800bf0b
 800bea0:	0800bf0b 	.word	0x0800bf0b
 800bea4:	0800bf0b 	.word	0x0800bf0b
 800bea8:	0800bf0b 	.word	0x0800bf0b
 800beac:	2b6e      	cmp	r3, #110	@ 0x6e
 800beae:	d809      	bhi.n	800bec4 <_scanf_float+0x138>
 800beb0:	2b60      	cmp	r3, #96	@ 0x60
 800beb2:	d8b2      	bhi.n	800be1a <_scanf_float+0x8e>
 800beb4:	2b54      	cmp	r3, #84	@ 0x54
 800beb6:	d07b      	beq.n	800bfb0 <_scanf_float+0x224>
 800beb8:	2b59      	cmp	r3, #89	@ 0x59
 800beba:	d199      	bne.n	800bdf0 <_scanf_float+0x64>
 800bebc:	2d07      	cmp	r5, #7
 800bebe:	d197      	bne.n	800bdf0 <_scanf_float+0x64>
 800bec0:	2508      	movs	r5, #8
 800bec2:	e02c      	b.n	800bf1e <_scanf_float+0x192>
 800bec4:	2b74      	cmp	r3, #116	@ 0x74
 800bec6:	d073      	beq.n	800bfb0 <_scanf_float+0x224>
 800bec8:	2b79      	cmp	r3, #121	@ 0x79
 800beca:	e7f6      	b.n	800beba <_scanf_float+0x12e>
 800becc:	6821      	ldr	r1, [r4, #0]
 800bece:	05c8      	lsls	r0, r1, #23
 800bed0:	d51b      	bpl.n	800bf0a <_scanf_float+0x17e>
 800bed2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800bed6:	6021      	str	r1, [r4, #0]
 800bed8:	f109 0901 	add.w	r9, r9, #1
 800bedc:	f1bb 0f00 	cmp.w	fp, #0
 800bee0:	d003      	beq.n	800beea <_scanf_float+0x15e>
 800bee2:	3201      	adds	r2, #1
 800bee4:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800bee8:	60a2      	str	r2, [r4, #8]
 800beea:	68a3      	ldr	r3, [r4, #8]
 800beec:	3b01      	subs	r3, #1
 800beee:	60a3      	str	r3, [r4, #8]
 800bef0:	6923      	ldr	r3, [r4, #16]
 800bef2:	3301      	adds	r3, #1
 800bef4:	6123      	str	r3, [r4, #16]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	3b01      	subs	r3, #1
 800befa:	2b00      	cmp	r3, #0
 800befc:	607b      	str	r3, [r7, #4]
 800befe:	f340 8087 	ble.w	800c010 <_scanf_float+0x284>
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	3301      	adds	r3, #1
 800bf06:	603b      	str	r3, [r7, #0]
 800bf08:	e765      	b.n	800bdd6 <_scanf_float+0x4a>
 800bf0a:	eb1a 0105 	adds.w	r1, sl, r5
 800bf0e:	f47f af6f 	bne.w	800bdf0 <_scanf_float+0x64>
 800bf12:	6822      	ldr	r2, [r4, #0]
 800bf14:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800bf18:	6022      	str	r2, [r4, #0]
 800bf1a:	460d      	mov	r5, r1
 800bf1c:	468a      	mov	sl, r1
 800bf1e:	f806 3b01 	strb.w	r3, [r6], #1
 800bf22:	e7e2      	b.n	800beea <_scanf_float+0x15e>
 800bf24:	6822      	ldr	r2, [r4, #0]
 800bf26:	0610      	lsls	r0, r2, #24
 800bf28:	f57f af62 	bpl.w	800bdf0 <_scanf_float+0x64>
 800bf2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bf30:	6022      	str	r2, [r4, #0]
 800bf32:	e7f4      	b.n	800bf1e <_scanf_float+0x192>
 800bf34:	f1ba 0f00 	cmp.w	sl, #0
 800bf38:	d10e      	bne.n	800bf58 <_scanf_float+0x1cc>
 800bf3a:	f1b9 0f00 	cmp.w	r9, #0
 800bf3e:	d10e      	bne.n	800bf5e <_scanf_float+0x1d2>
 800bf40:	6822      	ldr	r2, [r4, #0]
 800bf42:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bf46:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bf4a:	d108      	bne.n	800bf5e <_scanf_float+0x1d2>
 800bf4c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bf50:	6022      	str	r2, [r4, #0]
 800bf52:	f04f 0a01 	mov.w	sl, #1
 800bf56:	e7e2      	b.n	800bf1e <_scanf_float+0x192>
 800bf58:	f1ba 0f02 	cmp.w	sl, #2
 800bf5c:	d055      	beq.n	800c00a <_scanf_float+0x27e>
 800bf5e:	2d01      	cmp	r5, #1
 800bf60:	d002      	beq.n	800bf68 <_scanf_float+0x1dc>
 800bf62:	2d04      	cmp	r5, #4
 800bf64:	f47f af44 	bne.w	800bdf0 <_scanf_float+0x64>
 800bf68:	3501      	adds	r5, #1
 800bf6a:	b2ed      	uxtb	r5, r5
 800bf6c:	e7d7      	b.n	800bf1e <_scanf_float+0x192>
 800bf6e:	f1ba 0f01 	cmp.w	sl, #1
 800bf72:	f47f af3d 	bne.w	800bdf0 <_scanf_float+0x64>
 800bf76:	f04f 0a02 	mov.w	sl, #2
 800bf7a:	e7d0      	b.n	800bf1e <_scanf_float+0x192>
 800bf7c:	b97d      	cbnz	r5, 800bf9e <_scanf_float+0x212>
 800bf7e:	f1b9 0f00 	cmp.w	r9, #0
 800bf82:	f47f af38 	bne.w	800bdf6 <_scanf_float+0x6a>
 800bf86:	6822      	ldr	r2, [r4, #0]
 800bf88:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bf8c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bf90:	f040 8108 	bne.w	800c1a4 <_scanf_float+0x418>
 800bf94:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bf98:	6022      	str	r2, [r4, #0]
 800bf9a:	2501      	movs	r5, #1
 800bf9c:	e7bf      	b.n	800bf1e <_scanf_float+0x192>
 800bf9e:	2d03      	cmp	r5, #3
 800bfa0:	d0e2      	beq.n	800bf68 <_scanf_float+0x1dc>
 800bfa2:	2d05      	cmp	r5, #5
 800bfa4:	e7de      	b.n	800bf64 <_scanf_float+0x1d8>
 800bfa6:	2d02      	cmp	r5, #2
 800bfa8:	f47f af22 	bne.w	800bdf0 <_scanf_float+0x64>
 800bfac:	2503      	movs	r5, #3
 800bfae:	e7b6      	b.n	800bf1e <_scanf_float+0x192>
 800bfb0:	2d06      	cmp	r5, #6
 800bfb2:	f47f af1d 	bne.w	800bdf0 <_scanf_float+0x64>
 800bfb6:	2507      	movs	r5, #7
 800bfb8:	e7b1      	b.n	800bf1e <_scanf_float+0x192>
 800bfba:	6822      	ldr	r2, [r4, #0]
 800bfbc:	0591      	lsls	r1, r2, #22
 800bfbe:	f57f af17 	bpl.w	800bdf0 <_scanf_float+0x64>
 800bfc2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800bfc6:	6022      	str	r2, [r4, #0]
 800bfc8:	f8cd 9008 	str.w	r9, [sp, #8]
 800bfcc:	e7a7      	b.n	800bf1e <_scanf_float+0x192>
 800bfce:	6822      	ldr	r2, [r4, #0]
 800bfd0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800bfd4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800bfd8:	d006      	beq.n	800bfe8 <_scanf_float+0x25c>
 800bfda:	0550      	lsls	r0, r2, #21
 800bfdc:	f57f af08 	bpl.w	800bdf0 <_scanf_float+0x64>
 800bfe0:	f1b9 0f00 	cmp.w	r9, #0
 800bfe4:	f000 80de 	beq.w	800c1a4 <_scanf_float+0x418>
 800bfe8:	0591      	lsls	r1, r2, #22
 800bfea:	bf58      	it	pl
 800bfec:	9902      	ldrpl	r1, [sp, #8]
 800bfee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bff2:	bf58      	it	pl
 800bff4:	eba9 0101 	subpl.w	r1, r9, r1
 800bff8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800bffc:	bf58      	it	pl
 800bffe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c002:	6022      	str	r2, [r4, #0]
 800c004:	f04f 0900 	mov.w	r9, #0
 800c008:	e789      	b.n	800bf1e <_scanf_float+0x192>
 800c00a:	f04f 0a03 	mov.w	sl, #3
 800c00e:	e786      	b.n	800bf1e <_scanf_float+0x192>
 800c010:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c014:	4639      	mov	r1, r7
 800c016:	4640      	mov	r0, r8
 800c018:	4798      	blx	r3
 800c01a:	2800      	cmp	r0, #0
 800c01c:	f43f aedb 	beq.w	800bdd6 <_scanf_float+0x4a>
 800c020:	e6e6      	b.n	800bdf0 <_scanf_float+0x64>
 800c022:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c026:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c02a:	463a      	mov	r2, r7
 800c02c:	4640      	mov	r0, r8
 800c02e:	4798      	blx	r3
 800c030:	6923      	ldr	r3, [r4, #16]
 800c032:	3b01      	subs	r3, #1
 800c034:	6123      	str	r3, [r4, #16]
 800c036:	e6e8      	b.n	800be0a <_scanf_float+0x7e>
 800c038:	1e6b      	subs	r3, r5, #1
 800c03a:	2b06      	cmp	r3, #6
 800c03c:	d824      	bhi.n	800c088 <_scanf_float+0x2fc>
 800c03e:	2d02      	cmp	r5, #2
 800c040:	d836      	bhi.n	800c0b0 <_scanf_float+0x324>
 800c042:	9b01      	ldr	r3, [sp, #4]
 800c044:	429e      	cmp	r6, r3
 800c046:	f67f aee4 	bls.w	800be12 <_scanf_float+0x86>
 800c04a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c04e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c052:	463a      	mov	r2, r7
 800c054:	4640      	mov	r0, r8
 800c056:	4798      	blx	r3
 800c058:	6923      	ldr	r3, [r4, #16]
 800c05a:	3b01      	subs	r3, #1
 800c05c:	6123      	str	r3, [r4, #16]
 800c05e:	e7f0      	b.n	800c042 <_scanf_float+0x2b6>
 800c060:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c064:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c068:	463a      	mov	r2, r7
 800c06a:	4640      	mov	r0, r8
 800c06c:	4798      	blx	r3
 800c06e:	6923      	ldr	r3, [r4, #16]
 800c070:	3b01      	subs	r3, #1
 800c072:	6123      	str	r3, [r4, #16]
 800c074:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c078:	fa5f fa8a 	uxtb.w	sl, sl
 800c07c:	f1ba 0f02 	cmp.w	sl, #2
 800c080:	d1ee      	bne.n	800c060 <_scanf_float+0x2d4>
 800c082:	3d03      	subs	r5, #3
 800c084:	b2ed      	uxtb	r5, r5
 800c086:	1b76      	subs	r6, r6, r5
 800c088:	6823      	ldr	r3, [r4, #0]
 800c08a:	05da      	lsls	r2, r3, #23
 800c08c:	d530      	bpl.n	800c0f0 <_scanf_float+0x364>
 800c08e:	055b      	lsls	r3, r3, #21
 800c090:	d511      	bpl.n	800c0b6 <_scanf_float+0x32a>
 800c092:	9b01      	ldr	r3, [sp, #4]
 800c094:	429e      	cmp	r6, r3
 800c096:	f67f aebc 	bls.w	800be12 <_scanf_float+0x86>
 800c09a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c09e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c0a2:	463a      	mov	r2, r7
 800c0a4:	4640      	mov	r0, r8
 800c0a6:	4798      	blx	r3
 800c0a8:	6923      	ldr	r3, [r4, #16]
 800c0aa:	3b01      	subs	r3, #1
 800c0ac:	6123      	str	r3, [r4, #16]
 800c0ae:	e7f0      	b.n	800c092 <_scanf_float+0x306>
 800c0b0:	46aa      	mov	sl, r5
 800c0b2:	46b3      	mov	fp, r6
 800c0b4:	e7de      	b.n	800c074 <_scanf_float+0x2e8>
 800c0b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c0ba:	6923      	ldr	r3, [r4, #16]
 800c0bc:	2965      	cmp	r1, #101	@ 0x65
 800c0be:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800c0c2:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800c0c6:	6123      	str	r3, [r4, #16]
 800c0c8:	d00c      	beq.n	800c0e4 <_scanf_float+0x358>
 800c0ca:	2945      	cmp	r1, #69	@ 0x45
 800c0cc:	d00a      	beq.n	800c0e4 <_scanf_float+0x358>
 800c0ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c0d2:	463a      	mov	r2, r7
 800c0d4:	4640      	mov	r0, r8
 800c0d6:	4798      	blx	r3
 800c0d8:	6923      	ldr	r3, [r4, #16]
 800c0da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c0de:	3b01      	subs	r3, #1
 800c0e0:	1eb5      	subs	r5, r6, #2
 800c0e2:	6123      	str	r3, [r4, #16]
 800c0e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c0e8:	463a      	mov	r2, r7
 800c0ea:	4640      	mov	r0, r8
 800c0ec:	4798      	blx	r3
 800c0ee:	462e      	mov	r6, r5
 800c0f0:	6822      	ldr	r2, [r4, #0]
 800c0f2:	f012 0210 	ands.w	r2, r2, #16
 800c0f6:	d001      	beq.n	800c0fc <_scanf_float+0x370>
 800c0f8:	2000      	movs	r0, #0
 800c0fa:	e68b      	b.n	800be14 <_scanf_float+0x88>
 800c0fc:	7032      	strb	r2, [r6, #0]
 800c0fe:	6823      	ldr	r3, [r4, #0]
 800c100:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c104:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c108:	d11c      	bne.n	800c144 <_scanf_float+0x3b8>
 800c10a:	9b02      	ldr	r3, [sp, #8]
 800c10c:	454b      	cmp	r3, r9
 800c10e:	eba3 0209 	sub.w	r2, r3, r9
 800c112:	d123      	bne.n	800c15c <_scanf_float+0x3d0>
 800c114:	9901      	ldr	r1, [sp, #4]
 800c116:	2200      	movs	r2, #0
 800c118:	4640      	mov	r0, r8
 800c11a:	f002 fc75 	bl	800ea08 <_strtod_r>
 800c11e:	9b03      	ldr	r3, [sp, #12]
 800c120:	6821      	ldr	r1, [r4, #0]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f011 0f02 	tst.w	r1, #2
 800c128:	ec57 6b10 	vmov	r6, r7, d0
 800c12c:	f103 0204 	add.w	r2, r3, #4
 800c130:	d01f      	beq.n	800c172 <_scanf_float+0x3e6>
 800c132:	9903      	ldr	r1, [sp, #12]
 800c134:	600a      	str	r2, [r1, #0]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	e9c3 6700 	strd	r6, r7, [r3]
 800c13c:	68e3      	ldr	r3, [r4, #12]
 800c13e:	3301      	adds	r3, #1
 800c140:	60e3      	str	r3, [r4, #12]
 800c142:	e7d9      	b.n	800c0f8 <_scanf_float+0x36c>
 800c144:	9b04      	ldr	r3, [sp, #16]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d0e4      	beq.n	800c114 <_scanf_float+0x388>
 800c14a:	9905      	ldr	r1, [sp, #20]
 800c14c:	230a      	movs	r3, #10
 800c14e:	3101      	adds	r1, #1
 800c150:	4640      	mov	r0, r8
 800c152:	f002 fcd9 	bl	800eb08 <_strtol_r>
 800c156:	9b04      	ldr	r3, [sp, #16]
 800c158:	9e05      	ldr	r6, [sp, #20]
 800c15a:	1ac2      	subs	r2, r0, r3
 800c15c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c160:	429e      	cmp	r6, r3
 800c162:	bf28      	it	cs
 800c164:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c168:	4910      	ldr	r1, [pc, #64]	@ (800c1ac <_scanf_float+0x420>)
 800c16a:	4630      	mov	r0, r6
 800c16c:	f000 f8e4 	bl	800c338 <siprintf>
 800c170:	e7d0      	b.n	800c114 <_scanf_float+0x388>
 800c172:	f011 0f04 	tst.w	r1, #4
 800c176:	9903      	ldr	r1, [sp, #12]
 800c178:	600a      	str	r2, [r1, #0]
 800c17a:	d1dc      	bne.n	800c136 <_scanf_float+0x3aa>
 800c17c:	681d      	ldr	r5, [r3, #0]
 800c17e:	4632      	mov	r2, r6
 800c180:	463b      	mov	r3, r7
 800c182:	4630      	mov	r0, r6
 800c184:	4639      	mov	r1, r7
 800c186:	f7f4 fcd9 	bl	8000b3c <__aeabi_dcmpun>
 800c18a:	b128      	cbz	r0, 800c198 <_scanf_float+0x40c>
 800c18c:	4808      	ldr	r0, [pc, #32]	@ (800c1b0 <_scanf_float+0x424>)
 800c18e:	f000 fa35 	bl	800c5fc <nanf>
 800c192:	ed85 0a00 	vstr	s0, [r5]
 800c196:	e7d1      	b.n	800c13c <_scanf_float+0x3b0>
 800c198:	4630      	mov	r0, r6
 800c19a:	4639      	mov	r1, r7
 800c19c:	f7f4 fd2c 	bl	8000bf8 <__aeabi_d2f>
 800c1a0:	6028      	str	r0, [r5, #0]
 800c1a2:	e7cb      	b.n	800c13c <_scanf_float+0x3b0>
 800c1a4:	f04f 0900 	mov.w	r9, #0
 800c1a8:	e629      	b.n	800bdfe <_scanf_float+0x72>
 800c1aa:	bf00      	nop
 800c1ac:	080126d0 	.word	0x080126d0
 800c1b0:	08012a65 	.word	0x08012a65

0800c1b4 <std>:
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	b510      	push	{r4, lr}
 800c1b8:	4604      	mov	r4, r0
 800c1ba:	e9c0 3300 	strd	r3, r3, [r0]
 800c1be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c1c2:	6083      	str	r3, [r0, #8]
 800c1c4:	8181      	strh	r1, [r0, #12]
 800c1c6:	6643      	str	r3, [r0, #100]	@ 0x64
 800c1c8:	81c2      	strh	r2, [r0, #14]
 800c1ca:	6183      	str	r3, [r0, #24]
 800c1cc:	4619      	mov	r1, r3
 800c1ce:	2208      	movs	r2, #8
 800c1d0:	305c      	adds	r0, #92	@ 0x5c
 800c1d2:	f000 f92e 	bl	800c432 <memset>
 800c1d6:	4b0d      	ldr	r3, [pc, #52]	@ (800c20c <std+0x58>)
 800c1d8:	6263      	str	r3, [r4, #36]	@ 0x24
 800c1da:	4b0d      	ldr	r3, [pc, #52]	@ (800c210 <std+0x5c>)
 800c1dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c1de:	4b0d      	ldr	r3, [pc, #52]	@ (800c214 <std+0x60>)
 800c1e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c1e2:	4b0d      	ldr	r3, [pc, #52]	@ (800c218 <std+0x64>)
 800c1e4:	6323      	str	r3, [r4, #48]	@ 0x30
 800c1e6:	4b0d      	ldr	r3, [pc, #52]	@ (800c21c <std+0x68>)
 800c1e8:	6224      	str	r4, [r4, #32]
 800c1ea:	429c      	cmp	r4, r3
 800c1ec:	d006      	beq.n	800c1fc <std+0x48>
 800c1ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c1f2:	4294      	cmp	r4, r2
 800c1f4:	d002      	beq.n	800c1fc <std+0x48>
 800c1f6:	33d0      	adds	r3, #208	@ 0xd0
 800c1f8:	429c      	cmp	r4, r3
 800c1fa:	d105      	bne.n	800c208 <std+0x54>
 800c1fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c204:	f000 b9e8 	b.w	800c5d8 <__retarget_lock_init_recursive>
 800c208:	bd10      	pop	{r4, pc}
 800c20a:	bf00      	nop
 800c20c:	0800c379 	.word	0x0800c379
 800c210:	0800c39b 	.word	0x0800c39b
 800c214:	0800c3d3 	.word	0x0800c3d3
 800c218:	0800c3f7 	.word	0x0800c3f7
 800c21c:	20003484 	.word	0x20003484

0800c220 <stdio_exit_handler>:
 800c220:	4a02      	ldr	r2, [pc, #8]	@ (800c22c <stdio_exit_handler+0xc>)
 800c222:	4903      	ldr	r1, [pc, #12]	@ (800c230 <stdio_exit_handler+0x10>)
 800c224:	4803      	ldr	r0, [pc, #12]	@ (800c234 <stdio_exit_handler+0x14>)
 800c226:	f000 b869 	b.w	800c2fc <_fwalk_sglue>
 800c22a:	bf00      	nop
 800c22c:	20000018 	.word	0x20000018
 800c230:	0800eec5 	.word	0x0800eec5
 800c234:	20000028 	.word	0x20000028

0800c238 <cleanup_stdio>:
 800c238:	6841      	ldr	r1, [r0, #4]
 800c23a:	4b0c      	ldr	r3, [pc, #48]	@ (800c26c <cleanup_stdio+0x34>)
 800c23c:	4299      	cmp	r1, r3
 800c23e:	b510      	push	{r4, lr}
 800c240:	4604      	mov	r4, r0
 800c242:	d001      	beq.n	800c248 <cleanup_stdio+0x10>
 800c244:	f002 fe3e 	bl	800eec4 <_fflush_r>
 800c248:	68a1      	ldr	r1, [r4, #8]
 800c24a:	4b09      	ldr	r3, [pc, #36]	@ (800c270 <cleanup_stdio+0x38>)
 800c24c:	4299      	cmp	r1, r3
 800c24e:	d002      	beq.n	800c256 <cleanup_stdio+0x1e>
 800c250:	4620      	mov	r0, r4
 800c252:	f002 fe37 	bl	800eec4 <_fflush_r>
 800c256:	68e1      	ldr	r1, [r4, #12]
 800c258:	4b06      	ldr	r3, [pc, #24]	@ (800c274 <cleanup_stdio+0x3c>)
 800c25a:	4299      	cmp	r1, r3
 800c25c:	d004      	beq.n	800c268 <cleanup_stdio+0x30>
 800c25e:	4620      	mov	r0, r4
 800c260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c264:	f002 be2e 	b.w	800eec4 <_fflush_r>
 800c268:	bd10      	pop	{r4, pc}
 800c26a:	bf00      	nop
 800c26c:	20003484 	.word	0x20003484
 800c270:	200034ec 	.word	0x200034ec
 800c274:	20003554 	.word	0x20003554

0800c278 <global_stdio_init.part.0>:
 800c278:	b510      	push	{r4, lr}
 800c27a:	4b0b      	ldr	r3, [pc, #44]	@ (800c2a8 <global_stdio_init.part.0+0x30>)
 800c27c:	4c0b      	ldr	r4, [pc, #44]	@ (800c2ac <global_stdio_init.part.0+0x34>)
 800c27e:	4a0c      	ldr	r2, [pc, #48]	@ (800c2b0 <global_stdio_init.part.0+0x38>)
 800c280:	601a      	str	r2, [r3, #0]
 800c282:	4620      	mov	r0, r4
 800c284:	2200      	movs	r2, #0
 800c286:	2104      	movs	r1, #4
 800c288:	f7ff ff94 	bl	800c1b4 <std>
 800c28c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c290:	2201      	movs	r2, #1
 800c292:	2109      	movs	r1, #9
 800c294:	f7ff ff8e 	bl	800c1b4 <std>
 800c298:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c29c:	2202      	movs	r2, #2
 800c29e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2a2:	2112      	movs	r1, #18
 800c2a4:	f7ff bf86 	b.w	800c1b4 <std>
 800c2a8:	200035bc 	.word	0x200035bc
 800c2ac:	20003484 	.word	0x20003484
 800c2b0:	0800c221 	.word	0x0800c221

0800c2b4 <__sfp_lock_acquire>:
 800c2b4:	4801      	ldr	r0, [pc, #4]	@ (800c2bc <__sfp_lock_acquire+0x8>)
 800c2b6:	f000 b990 	b.w	800c5da <__retarget_lock_acquire_recursive>
 800c2ba:	bf00      	nop
 800c2bc:	200035c5 	.word	0x200035c5

0800c2c0 <__sfp_lock_release>:
 800c2c0:	4801      	ldr	r0, [pc, #4]	@ (800c2c8 <__sfp_lock_release+0x8>)
 800c2c2:	f000 b98b 	b.w	800c5dc <__retarget_lock_release_recursive>
 800c2c6:	bf00      	nop
 800c2c8:	200035c5 	.word	0x200035c5

0800c2cc <__sinit>:
 800c2cc:	b510      	push	{r4, lr}
 800c2ce:	4604      	mov	r4, r0
 800c2d0:	f7ff fff0 	bl	800c2b4 <__sfp_lock_acquire>
 800c2d4:	6a23      	ldr	r3, [r4, #32]
 800c2d6:	b11b      	cbz	r3, 800c2e0 <__sinit+0x14>
 800c2d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2dc:	f7ff bff0 	b.w	800c2c0 <__sfp_lock_release>
 800c2e0:	4b04      	ldr	r3, [pc, #16]	@ (800c2f4 <__sinit+0x28>)
 800c2e2:	6223      	str	r3, [r4, #32]
 800c2e4:	4b04      	ldr	r3, [pc, #16]	@ (800c2f8 <__sinit+0x2c>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d1f5      	bne.n	800c2d8 <__sinit+0xc>
 800c2ec:	f7ff ffc4 	bl	800c278 <global_stdio_init.part.0>
 800c2f0:	e7f2      	b.n	800c2d8 <__sinit+0xc>
 800c2f2:	bf00      	nop
 800c2f4:	0800c239 	.word	0x0800c239
 800c2f8:	200035bc 	.word	0x200035bc

0800c2fc <_fwalk_sglue>:
 800c2fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c300:	4607      	mov	r7, r0
 800c302:	4688      	mov	r8, r1
 800c304:	4614      	mov	r4, r2
 800c306:	2600      	movs	r6, #0
 800c308:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c30c:	f1b9 0901 	subs.w	r9, r9, #1
 800c310:	d505      	bpl.n	800c31e <_fwalk_sglue+0x22>
 800c312:	6824      	ldr	r4, [r4, #0]
 800c314:	2c00      	cmp	r4, #0
 800c316:	d1f7      	bne.n	800c308 <_fwalk_sglue+0xc>
 800c318:	4630      	mov	r0, r6
 800c31a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c31e:	89ab      	ldrh	r3, [r5, #12]
 800c320:	2b01      	cmp	r3, #1
 800c322:	d907      	bls.n	800c334 <_fwalk_sglue+0x38>
 800c324:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c328:	3301      	adds	r3, #1
 800c32a:	d003      	beq.n	800c334 <_fwalk_sglue+0x38>
 800c32c:	4629      	mov	r1, r5
 800c32e:	4638      	mov	r0, r7
 800c330:	47c0      	blx	r8
 800c332:	4306      	orrs	r6, r0
 800c334:	3568      	adds	r5, #104	@ 0x68
 800c336:	e7e9      	b.n	800c30c <_fwalk_sglue+0x10>

0800c338 <siprintf>:
 800c338:	b40e      	push	{r1, r2, r3}
 800c33a:	b500      	push	{lr}
 800c33c:	b09c      	sub	sp, #112	@ 0x70
 800c33e:	ab1d      	add	r3, sp, #116	@ 0x74
 800c340:	9002      	str	r0, [sp, #8]
 800c342:	9006      	str	r0, [sp, #24]
 800c344:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c348:	4809      	ldr	r0, [pc, #36]	@ (800c370 <siprintf+0x38>)
 800c34a:	9107      	str	r1, [sp, #28]
 800c34c:	9104      	str	r1, [sp, #16]
 800c34e:	4909      	ldr	r1, [pc, #36]	@ (800c374 <siprintf+0x3c>)
 800c350:	f853 2b04 	ldr.w	r2, [r3], #4
 800c354:	9105      	str	r1, [sp, #20]
 800c356:	6800      	ldr	r0, [r0, #0]
 800c358:	9301      	str	r3, [sp, #4]
 800c35a:	a902      	add	r1, sp, #8
 800c35c:	f002 fc32 	bl	800ebc4 <_svfiprintf_r>
 800c360:	9b02      	ldr	r3, [sp, #8]
 800c362:	2200      	movs	r2, #0
 800c364:	701a      	strb	r2, [r3, #0]
 800c366:	b01c      	add	sp, #112	@ 0x70
 800c368:	f85d eb04 	ldr.w	lr, [sp], #4
 800c36c:	b003      	add	sp, #12
 800c36e:	4770      	bx	lr
 800c370:	20000024 	.word	0x20000024
 800c374:	ffff0208 	.word	0xffff0208

0800c378 <__sread>:
 800c378:	b510      	push	{r4, lr}
 800c37a:	460c      	mov	r4, r1
 800c37c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c380:	f000 f8dc 	bl	800c53c <_read_r>
 800c384:	2800      	cmp	r0, #0
 800c386:	bfab      	itete	ge
 800c388:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c38a:	89a3      	ldrhlt	r3, [r4, #12]
 800c38c:	181b      	addge	r3, r3, r0
 800c38e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c392:	bfac      	ite	ge
 800c394:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c396:	81a3      	strhlt	r3, [r4, #12]
 800c398:	bd10      	pop	{r4, pc}

0800c39a <__swrite>:
 800c39a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c39e:	461f      	mov	r7, r3
 800c3a0:	898b      	ldrh	r3, [r1, #12]
 800c3a2:	05db      	lsls	r3, r3, #23
 800c3a4:	4605      	mov	r5, r0
 800c3a6:	460c      	mov	r4, r1
 800c3a8:	4616      	mov	r6, r2
 800c3aa:	d505      	bpl.n	800c3b8 <__swrite+0x1e>
 800c3ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3b0:	2302      	movs	r3, #2
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	f000 f8b0 	bl	800c518 <_lseek_r>
 800c3b8:	89a3      	ldrh	r3, [r4, #12]
 800c3ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c3c2:	81a3      	strh	r3, [r4, #12]
 800c3c4:	4632      	mov	r2, r6
 800c3c6:	463b      	mov	r3, r7
 800c3c8:	4628      	mov	r0, r5
 800c3ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ce:	f000 b8c7 	b.w	800c560 <_write_r>

0800c3d2 <__sseek>:
 800c3d2:	b510      	push	{r4, lr}
 800c3d4:	460c      	mov	r4, r1
 800c3d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3da:	f000 f89d 	bl	800c518 <_lseek_r>
 800c3de:	1c43      	adds	r3, r0, #1
 800c3e0:	89a3      	ldrh	r3, [r4, #12]
 800c3e2:	bf15      	itete	ne
 800c3e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c3e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c3ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c3ee:	81a3      	strheq	r3, [r4, #12]
 800c3f0:	bf18      	it	ne
 800c3f2:	81a3      	strhne	r3, [r4, #12]
 800c3f4:	bd10      	pop	{r4, pc}

0800c3f6 <__sclose>:
 800c3f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3fa:	f000 b827 	b.w	800c44c <_close_r>

0800c3fe <memmove>:
 800c3fe:	4288      	cmp	r0, r1
 800c400:	b510      	push	{r4, lr}
 800c402:	eb01 0402 	add.w	r4, r1, r2
 800c406:	d902      	bls.n	800c40e <memmove+0x10>
 800c408:	4284      	cmp	r4, r0
 800c40a:	4623      	mov	r3, r4
 800c40c:	d807      	bhi.n	800c41e <memmove+0x20>
 800c40e:	1e43      	subs	r3, r0, #1
 800c410:	42a1      	cmp	r1, r4
 800c412:	d008      	beq.n	800c426 <memmove+0x28>
 800c414:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c418:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c41c:	e7f8      	b.n	800c410 <memmove+0x12>
 800c41e:	4402      	add	r2, r0
 800c420:	4601      	mov	r1, r0
 800c422:	428a      	cmp	r2, r1
 800c424:	d100      	bne.n	800c428 <memmove+0x2a>
 800c426:	bd10      	pop	{r4, pc}
 800c428:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c42c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c430:	e7f7      	b.n	800c422 <memmove+0x24>

0800c432 <memset>:
 800c432:	4402      	add	r2, r0
 800c434:	4603      	mov	r3, r0
 800c436:	4293      	cmp	r3, r2
 800c438:	d100      	bne.n	800c43c <memset+0xa>
 800c43a:	4770      	bx	lr
 800c43c:	f803 1b01 	strb.w	r1, [r3], #1
 800c440:	e7f9      	b.n	800c436 <memset+0x4>
	...

0800c444 <_localeconv_r>:
 800c444:	4800      	ldr	r0, [pc, #0]	@ (800c448 <_localeconv_r+0x4>)
 800c446:	4770      	bx	lr
 800c448:	20000164 	.word	0x20000164

0800c44c <_close_r>:
 800c44c:	b538      	push	{r3, r4, r5, lr}
 800c44e:	4d06      	ldr	r5, [pc, #24]	@ (800c468 <_close_r+0x1c>)
 800c450:	2300      	movs	r3, #0
 800c452:	4604      	mov	r4, r0
 800c454:	4608      	mov	r0, r1
 800c456:	602b      	str	r3, [r5, #0]
 800c458:	f7f6 f94a 	bl	80026f0 <_close>
 800c45c:	1c43      	adds	r3, r0, #1
 800c45e:	d102      	bne.n	800c466 <_close_r+0x1a>
 800c460:	682b      	ldr	r3, [r5, #0]
 800c462:	b103      	cbz	r3, 800c466 <_close_r+0x1a>
 800c464:	6023      	str	r3, [r4, #0]
 800c466:	bd38      	pop	{r3, r4, r5, pc}
 800c468:	200035c0 	.word	0x200035c0

0800c46c <_reclaim_reent>:
 800c46c:	4b29      	ldr	r3, [pc, #164]	@ (800c514 <_reclaim_reent+0xa8>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4283      	cmp	r3, r0
 800c472:	b570      	push	{r4, r5, r6, lr}
 800c474:	4604      	mov	r4, r0
 800c476:	d04b      	beq.n	800c510 <_reclaim_reent+0xa4>
 800c478:	69c3      	ldr	r3, [r0, #28]
 800c47a:	b1ab      	cbz	r3, 800c4a8 <_reclaim_reent+0x3c>
 800c47c:	68db      	ldr	r3, [r3, #12]
 800c47e:	b16b      	cbz	r3, 800c49c <_reclaim_reent+0x30>
 800c480:	2500      	movs	r5, #0
 800c482:	69e3      	ldr	r3, [r4, #28]
 800c484:	68db      	ldr	r3, [r3, #12]
 800c486:	5959      	ldr	r1, [r3, r5]
 800c488:	2900      	cmp	r1, #0
 800c48a:	d13b      	bne.n	800c504 <_reclaim_reent+0x98>
 800c48c:	3504      	adds	r5, #4
 800c48e:	2d80      	cmp	r5, #128	@ 0x80
 800c490:	d1f7      	bne.n	800c482 <_reclaim_reent+0x16>
 800c492:	69e3      	ldr	r3, [r4, #28]
 800c494:	4620      	mov	r0, r4
 800c496:	68d9      	ldr	r1, [r3, #12]
 800c498:	f000 ff02 	bl	800d2a0 <_free_r>
 800c49c:	69e3      	ldr	r3, [r4, #28]
 800c49e:	6819      	ldr	r1, [r3, #0]
 800c4a0:	b111      	cbz	r1, 800c4a8 <_reclaim_reent+0x3c>
 800c4a2:	4620      	mov	r0, r4
 800c4a4:	f000 fefc 	bl	800d2a0 <_free_r>
 800c4a8:	6961      	ldr	r1, [r4, #20]
 800c4aa:	b111      	cbz	r1, 800c4b2 <_reclaim_reent+0x46>
 800c4ac:	4620      	mov	r0, r4
 800c4ae:	f000 fef7 	bl	800d2a0 <_free_r>
 800c4b2:	69e1      	ldr	r1, [r4, #28]
 800c4b4:	b111      	cbz	r1, 800c4bc <_reclaim_reent+0x50>
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	f000 fef2 	bl	800d2a0 <_free_r>
 800c4bc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c4be:	b111      	cbz	r1, 800c4c6 <_reclaim_reent+0x5a>
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	f000 feed 	bl	800d2a0 <_free_r>
 800c4c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c4c8:	b111      	cbz	r1, 800c4d0 <_reclaim_reent+0x64>
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	f000 fee8 	bl	800d2a0 <_free_r>
 800c4d0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c4d2:	b111      	cbz	r1, 800c4da <_reclaim_reent+0x6e>
 800c4d4:	4620      	mov	r0, r4
 800c4d6:	f000 fee3 	bl	800d2a0 <_free_r>
 800c4da:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c4dc:	b111      	cbz	r1, 800c4e4 <_reclaim_reent+0x78>
 800c4de:	4620      	mov	r0, r4
 800c4e0:	f000 fede 	bl	800d2a0 <_free_r>
 800c4e4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c4e6:	b111      	cbz	r1, 800c4ee <_reclaim_reent+0x82>
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	f000 fed9 	bl	800d2a0 <_free_r>
 800c4ee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c4f0:	b111      	cbz	r1, 800c4f8 <_reclaim_reent+0x8c>
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	f000 fed4 	bl	800d2a0 <_free_r>
 800c4f8:	6a23      	ldr	r3, [r4, #32]
 800c4fa:	b14b      	cbz	r3, 800c510 <_reclaim_reent+0xa4>
 800c4fc:	4620      	mov	r0, r4
 800c4fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c502:	4718      	bx	r3
 800c504:	680e      	ldr	r6, [r1, #0]
 800c506:	4620      	mov	r0, r4
 800c508:	f000 feca 	bl	800d2a0 <_free_r>
 800c50c:	4631      	mov	r1, r6
 800c50e:	e7bb      	b.n	800c488 <_reclaim_reent+0x1c>
 800c510:	bd70      	pop	{r4, r5, r6, pc}
 800c512:	bf00      	nop
 800c514:	20000024 	.word	0x20000024

0800c518 <_lseek_r>:
 800c518:	b538      	push	{r3, r4, r5, lr}
 800c51a:	4d07      	ldr	r5, [pc, #28]	@ (800c538 <_lseek_r+0x20>)
 800c51c:	4604      	mov	r4, r0
 800c51e:	4608      	mov	r0, r1
 800c520:	4611      	mov	r1, r2
 800c522:	2200      	movs	r2, #0
 800c524:	602a      	str	r2, [r5, #0]
 800c526:	461a      	mov	r2, r3
 800c528:	f7f6 f909 	bl	800273e <_lseek>
 800c52c:	1c43      	adds	r3, r0, #1
 800c52e:	d102      	bne.n	800c536 <_lseek_r+0x1e>
 800c530:	682b      	ldr	r3, [r5, #0]
 800c532:	b103      	cbz	r3, 800c536 <_lseek_r+0x1e>
 800c534:	6023      	str	r3, [r4, #0]
 800c536:	bd38      	pop	{r3, r4, r5, pc}
 800c538:	200035c0 	.word	0x200035c0

0800c53c <_read_r>:
 800c53c:	b538      	push	{r3, r4, r5, lr}
 800c53e:	4d07      	ldr	r5, [pc, #28]	@ (800c55c <_read_r+0x20>)
 800c540:	4604      	mov	r4, r0
 800c542:	4608      	mov	r0, r1
 800c544:	4611      	mov	r1, r2
 800c546:	2200      	movs	r2, #0
 800c548:	602a      	str	r2, [r5, #0]
 800c54a:	461a      	mov	r2, r3
 800c54c:	f7f6 f897 	bl	800267e <_read>
 800c550:	1c43      	adds	r3, r0, #1
 800c552:	d102      	bne.n	800c55a <_read_r+0x1e>
 800c554:	682b      	ldr	r3, [r5, #0]
 800c556:	b103      	cbz	r3, 800c55a <_read_r+0x1e>
 800c558:	6023      	str	r3, [r4, #0]
 800c55a:	bd38      	pop	{r3, r4, r5, pc}
 800c55c:	200035c0 	.word	0x200035c0

0800c560 <_write_r>:
 800c560:	b538      	push	{r3, r4, r5, lr}
 800c562:	4d07      	ldr	r5, [pc, #28]	@ (800c580 <_write_r+0x20>)
 800c564:	4604      	mov	r4, r0
 800c566:	4608      	mov	r0, r1
 800c568:	4611      	mov	r1, r2
 800c56a:	2200      	movs	r2, #0
 800c56c:	602a      	str	r2, [r5, #0]
 800c56e:	461a      	mov	r2, r3
 800c570:	f7f6 f8a2 	bl	80026b8 <_write>
 800c574:	1c43      	adds	r3, r0, #1
 800c576:	d102      	bne.n	800c57e <_write_r+0x1e>
 800c578:	682b      	ldr	r3, [r5, #0]
 800c57a:	b103      	cbz	r3, 800c57e <_write_r+0x1e>
 800c57c:	6023      	str	r3, [r4, #0]
 800c57e:	bd38      	pop	{r3, r4, r5, pc}
 800c580:	200035c0 	.word	0x200035c0

0800c584 <__errno>:
 800c584:	4b01      	ldr	r3, [pc, #4]	@ (800c58c <__errno+0x8>)
 800c586:	6818      	ldr	r0, [r3, #0]
 800c588:	4770      	bx	lr
 800c58a:	bf00      	nop
 800c58c:	20000024 	.word	0x20000024

0800c590 <__libc_init_array>:
 800c590:	b570      	push	{r4, r5, r6, lr}
 800c592:	4d0d      	ldr	r5, [pc, #52]	@ (800c5c8 <__libc_init_array+0x38>)
 800c594:	4c0d      	ldr	r4, [pc, #52]	@ (800c5cc <__libc_init_array+0x3c>)
 800c596:	1b64      	subs	r4, r4, r5
 800c598:	10a4      	asrs	r4, r4, #2
 800c59a:	2600      	movs	r6, #0
 800c59c:	42a6      	cmp	r6, r4
 800c59e:	d109      	bne.n	800c5b4 <__libc_init_array+0x24>
 800c5a0:	4d0b      	ldr	r5, [pc, #44]	@ (800c5d0 <__libc_init_array+0x40>)
 800c5a2:	4c0c      	ldr	r4, [pc, #48]	@ (800c5d4 <__libc_init_array+0x44>)
 800c5a4:	f003 fb56 	bl	800fc54 <_init>
 800c5a8:	1b64      	subs	r4, r4, r5
 800c5aa:	10a4      	asrs	r4, r4, #2
 800c5ac:	2600      	movs	r6, #0
 800c5ae:	42a6      	cmp	r6, r4
 800c5b0:	d105      	bne.n	800c5be <__libc_init_array+0x2e>
 800c5b2:	bd70      	pop	{r4, r5, r6, pc}
 800c5b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5b8:	4798      	blx	r3
 800c5ba:	3601      	adds	r6, #1
 800c5bc:	e7ee      	b.n	800c59c <__libc_init_array+0xc>
 800c5be:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5c2:	4798      	blx	r3
 800c5c4:	3601      	adds	r6, #1
 800c5c6:	e7f2      	b.n	800c5ae <__libc_init_array+0x1e>
 800c5c8:	08012ad0 	.word	0x08012ad0
 800c5cc:	08012ad0 	.word	0x08012ad0
 800c5d0:	08012ad0 	.word	0x08012ad0
 800c5d4:	08012ad4 	.word	0x08012ad4

0800c5d8 <__retarget_lock_init_recursive>:
 800c5d8:	4770      	bx	lr

0800c5da <__retarget_lock_acquire_recursive>:
 800c5da:	4770      	bx	lr

0800c5dc <__retarget_lock_release_recursive>:
 800c5dc:	4770      	bx	lr

0800c5de <memcpy>:
 800c5de:	440a      	add	r2, r1
 800c5e0:	4291      	cmp	r1, r2
 800c5e2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c5e6:	d100      	bne.n	800c5ea <memcpy+0xc>
 800c5e8:	4770      	bx	lr
 800c5ea:	b510      	push	{r4, lr}
 800c5ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5f4:	4291      	cmp	r1, r2
 800c5f6:	d1f9      	bne.n	800c5ec <memcpy+0xe>
 800c5f8:	bd10      	pop	{r4, pc}
	...

0800c5fc <nanf>:
 800c5fc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c604 <nanf+0x8>
 800c600:	4770      	bx	lr
 800c602:	bf00      	nop
 800c604:	7fc00000 	.word	0x7fc00000

0800c608 <quorem>:
 800c608:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c60c:	6903      	ldr	r3, [r0, #16]
 800c60e:	690c      	ldr	r4, [r1, #16]
 800c610:	42a3      	cmp	r3, r4
 800c612:	4607      	mov	r7, r0
 800c614:	db7e      	blt.n	800c714 <quorem+0x10c>
 800c616:	3c01      	subs	r4, #1
 800c618:	f101 0814 	add.w	r8, r1, #20
 800c61c:	00a3      	lsls	r3, r4, #2
 800c61e:	f100 0514 	add.w	r5, r0, #20
 800c622:	9300      	str	r3, [sp, #0]
 800c624:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c628:	9301      	str	r3, [sp, #4]
 800c62a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c62e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c632:	3301      	adds	r3, #1
 800c634:	429a      	cmp	r2, r3
 800c636:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c63a:	fbb2 f6f3 	udiv	r6, r2, r3
 800c63e:	d32e      	bcc.n	800c69e <quorem+0x96>
 800c640:	f04f 0a00 	mov.w	sl, #0
 800c644:	46c4      	mov	ip, r8
 800c646:	46ae      	mov	lr, r5
 800c648:	46d3      	mov	fp, sl
 800c64a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c64e:	b298      	uxth	r0, r3
 800c650:	fb06 a000 	mla	r0, r6, r0, sl
 800c654:	0c02      	lsrs	r2, r0, #16
 800c656:	0c1b      	lsrs	r3, r3, #16
 800c658:	fb06 2303 	mla	r3, r6, r3, r2
 800c65c:	f8de 2000 	ldr.w	r2, [lr]
 800c660:	b280      	uxth	r0, r0
 800c662:	b292      	uxth	r2, r2
 800c664:	1a12      	subs	r2, r2, r0
 800c666:	445a      	add	r2, fp
 800c668:	f8de 0000 	ldr.w	r0, [lr]
 800c66c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c670:	b29b      	uxth	r3, r3
 800c672:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c676:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c67a:	b292      	uxth	r2, r2
 800c67c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c680:	45e1      	cmp	r9, ip
 800c682:	f84e 2b04 	str.w	r2, [lr], #4
 800c686:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c68a:	d2de      	bcs.n	800c64a <quorem+0x42>
 800c68c:	9b00      	ldr	r3, [sp, #0]
 800c68e:	58eb      	ldr	r3, [r5, r3]
 800c690:	b92b      	cbnz	r3, 800c69e <quorem+0x96>
 800c692:	9b01      	ldr	r3, [sp, #4]
 800c694:	3b04      	subs	r3, #4
 800c696:	429d      	cmp	r5, r3
 800c698:	461a      	mov	r2, r3
 800c69a:	d32f      	bcc.n	800c6fc <quorem+0xf4>
 800c69c:	613c      	str	r4, [r7, #16]
 800c69e:	4638      	mov	r0, r7
 800c6a0:	f001 f9c2 	bl	800da28 <__mcmp>
 800c6a4:	2800      	cmp	r0, #0
 800c6a6:	db25      	blt.n	800c6f4 <quorem+0xec>
 800c6a8:	4629      	mov	r1, r5
 800c6aa:	2000      	movs	r0, #0
 800c6ac:	f858 2b04 	ldr.w	r2, [r8], #4
 800c6b0:	f8d1 c000 	ldr.w	ip, [r1]
 800c6b4:	fa1f fe82 	uxth.w	lr, r2
 800c6b8:	fa1f f38c 	uxth.w	r3, ip
 800c6bc:	eba3 030e 	sub.w	r3, r3, lr
 800c6c0:	4403      	add	r3, r0
 800c6c2:	0c12      	lsrs	r2, r2, #16
 800c6c4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c6c8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c6cc:	b29b      	uxth	r3, r3
 800c6ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6d2:	45c1      	cmp	r9, r8
 800c6d4:	f841 3b04 	str.w	r3, [r1], #4
 800c6d8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c6dc:	d2e6      	bcs.n	800c6ac <quorem+0xa4>
 800c6de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c6e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c6e6:	b922      	cbnz	r2, 800c6f2 <quorem+0xea>
 800c6e8:	3b04      	subs	r3, #4
 800c6ea:	429d      	cmp	r5, r3
 800c6ec:	461a      	mov	r2, r3
 800c6ee:	d30b      	bcc.n	800c708 <quorem+0x100>
 800c6f0:	613c      	str	r4, [r7, #16]
 800c6f2:	3601      	adds	r6, #1
 800c6f4:	4630      	mov	r0, r6
 800c6f6:	b003      	add	sp, #12
 800c6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6fc:	6812      	ldr	r2, [r2, #0]
 800c6fe:	3b04      	subs	r3, #4
 800c700:	2a00      	cmp	r2, #0
 800c702:	d1cb      	bne.n	800c69c <quorem+0x94>
 800c704:	3c01      	subs	r4, #1
 800c706:	e7c6      	b.n	800c696 <quorem+0x8e>
 800c708:	6812      	ldr	r2, [r2, #0]
 800c70a:	3b04      	subs	r3, #4
 800c70c:	2a00      	cmp	r2, #0
 800c70e:	d1ef      	bne.n	800c6f0 <quorem+0xe8>
 800c710:	3c01      	subs	r4, #1
 800c712:	e7ea      	b.n	800c6ea <quorem+0xe2>
 800c714:	2000      	movs	r0, #0
 800c716:	e7ee      	b.n	800c6f6 <quorem+0xee>

0800c718 <_dtoa_r>:
 800c718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c71c:	69c7      	ldr	r7, [r0, #28]
 800c71e:	b099      	sub	sp, #100	@ 0x64
 800c720:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c724:	ec55 4b10 	vmov	r4, r5, d0
 800c728:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c72a:	9109      	str	r1, [sp, #36]	@ 0x24
 800c72c:	4683      	mov	fp, r0
 800c72e:	920e      	str	r2, [sp, #56]	@ 0x38
 800c730:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c732:	b97f      	cbnz	r7, 800c754 <_dtoa_r+0x3c>
 800c734:	2010      	movs	r0, #16
 800c736:	f000 fdfd 	bl	800d334 <malloc>
 800c73a:	4602      	mov	r2, r0
 800c73c:	f8cb 001c 	str.w	r0, [fp, #28]
 800c740:	b920      	cbnz	r0, 800c74c <_dtoa_r+0x34>
 800c742:	4ba7      	ldr	r3, [pc, #668]	@ (800c9e0 <_dtoa_r+0x2c8>)
 800c744:	21ef      	movs	r1, #239	@ 0xef
 800c746:	48a7      	ldr	r0, [pc, #668]	@ (800c9e4 <_dtoa_r+0x2cc>)
 800c748:	f002 fc0e 	bl	800ef68 <__assert_func>
 800c74c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c750:	6007      	str	r7, [r0, #0]
 800c752:	60c7      	str	r7, [r0, #12]
 800c754:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c758:	6819      	ldr	r1, [r3, #0]
 800c75a:	b159      	cbz	r1, 800c774 <_dtoa_r+0x5c>
 800c75c:	685a      	ldr	r2, [r3, #4]
 800c75e:	604a      	str	r2, [r1, #4]
 800c760:	2301      	movs	r3, #1
 800c762:	4093      	lsls	r3, r2
 800c764:	608b      	str	r3, [r1, #8]
 800c766:	4658      	mov	r0, fp
 800c768:	f000 feda 	bl	800d520 <_Bfree>
 800c76c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c770:	2200      	movs	r2, #0
 800c772:	601a      	str	r2, [r3, #0]
 800c774:	1e2b      	subs	r3, r5, #0
 800c776:	bfb9      	ittee	lt
 800c778:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c77c:	9303      	strlt	r3, [sp, #12]
 800c77e:	2300      	movge	r3, #0
 800c780:	6033      	strge	r3, [r6, #0]
 800c782:	9f03      	ldr	r7, [sp, #12]
 800c784:	4b98      	ldr	r3, [pc, #608]	@ (800c9e8 <_dtoa_r+0x2d0>)
 800c786:	bfbc      	itt	lt
 800c788:	2201      	movlt	r2, #1
 800c78a:	6032      	strlt	r2, [r6, #0]
 800c78c:	43bb      	bics	r3, r7
 800c78e:	d112      	bne.n	800c7b6 <_dtoa_r+0x9e>
 800c790:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c792:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c796:	6013      	str	r3, [r2, #0]
 800c798:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c79c:	4323      	orrs	r3, r4
 800c79e:	f000 854d 	beq.w	800d23c <_dtoa_r+0xb24>
 800c7a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c7a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c9fc <_dtoa_r+0x2e4>
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	f000 854f 	beq.w	800d24c <_dtoa_r+0xb34>
 800c7ae:	f10a 0303 	add.w	r3, sl, #3
 800c7b2:	f000 bd49 	b.w	800d248 <_dtoa_r+0xb30>
 800c7b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	ec51 0b17 	vmov	r0, r1, d7
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c7c6:	f7f4 f987 	bl	8000ad8 <__aeabi_dcmpeq>
 800c7ca:	4680      	mov	r8, r0
 800c7cc:	b158      	cbz	r0, 800c7e6 <_dtoa_r+0xce>
 800c7ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	6013      	str	r3, [r2, #0]
 800c7d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c7d6:	b113      	cbz	r3, 800c7de <_dtoa_r+0xc6>
 800c7d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c7da:	4b84      	ldr	r3, [pc, #528]	@ (800c9ec <_dtoa_r+0x2d4>)
 800c7dc:	6013      	str	r3, [r2, #0]
 800c7de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ca00 <_dtoa_r+0x2e8>
 800c7e2:	f000 bd33 	b.w	800d24c <_dtoa_r+0xb34>
 800c7e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c7ea:	aa16      	add	r2, sp, #88	@ 0x58
 800c7ec:	a917      	add	r1, sp, #92	@ 0x5c
 800c7ee:	4658      	mov	r0, fp
 800c7f0:	f001 fa3a 	bl	800dc68 <__d2b>
 800c7f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c7f8:	4681      	mov	r9, r0
 800c7fa:	2e00      	cmp	r6, #0
 800c7fc:	d077      	beq.n	800c8ee <_dtoa_r+0x1d6>
 800c7fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c800:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c804:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c808:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c80c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c810:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c814:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c818:	4619      	mov	r1, r3
 800c81a:	2200      	movs	r2, #0
 800c81c:	4b74      	ldr	r3, [pc, #464]	@ (800c9f0 <_dtoa_r+0x2d8>)
 800c81e:	f7f3 fd3b 	bl	8000298 <__aeabi_dsub>
 800c822:	a369      	add	r3, pc, #420	@ (adr r3, 800c9c8 <_dtoa_r+0x2b0>)
 800c824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c828:	f7f3 feee 	bl	8000608 <__aeabi_dmul>
 800c82c:	a368      	add	r3, pc, #416	@ (adr r3, 800c9d0 <_dtoa_r+0x2b8>)
 800c82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c832:	f7f3 fd33 	bl	800029c <__adddf3>
 800c836:	4604      	mov	r4, r0
 800c838:	4630      	mov	r0, r6
 800c83a:	460d      	mov	r5, r1
 800c83c:	f7f3 fe7a 	bl	8000534 <__aeabi_i2d>
 800c840:	a365      	add	r3, pc, #404	@ (adr r3, 800c9d8 <_dtoa_r+0x2c0>)
 800c842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c846:	f7f3 fedf 	bl	8000608 <__aeabi_dmul>
 800c84a:	4602      	mov	r2, r0
 800c84c:	460b      	mov	r3, r1
 800c84e:	4620      	mov	r0, r4
 800c850:	4629      	mov	r1, r5
 800c852:	f7f3 fd23 	bl	800029c <__adddf3>
 800c856:	4604      	mov	r4, r0
 800c858:	460d      	mov	r5, r1
 800c85a:	f7f4 f985 	bl	8000b68 <__aeabi_d2iz>
 800c85e:	2200      	movs	r2, #0
 800c860:	4607      	mov	r7, r0
 800c862:	2300      	movs	r3, #0
 800c864:	4620      	mov	r0, r4
 800c866:	4629      	mov	r1, r5
 800c868:	f7f4 f940 	bl	8000aec <__aeabi_dcmplt>
 800c86c:	b140      	cbz	r0, 800c880 <_dtoa_r+0x168>
 800c86e:	4638      	mov	r0, r7
 800c870:	f7f3 fe60 	bl	8000534 <__aeabi_i2d>
 800c874:	4622      	mov	r2, r4
 800c876:	462b      	mov	r3, r5
 800c878:	f7f4 f92e 	bl	8000ad8 <__aeabi_dcmpeq>
 800c87c:	b900      	cbnz	r0, 800c880 <_dtoa_r+0x168>
 800c87e:	3f01      	subs	r7, #1
 800c880:	2f16      	cmp	r7, #22
 800c882:	d851      	bhi.n	800c928 <_dtoa_r+0x210>
 800c884:	4b5b      	ldr	r3, [pc, #364]	@ (800c9f4 <_dtoa_r+0x2dc>)
 800c886:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c892:	f7f4 f92b 	bl	8000aec <__aeabi_dcmplt>
 800c896:	2800      	cmp	r0, #0
 800c898:	d048      	beq.n	800c92c <_dtoa_r+0x214>
 800c89a:	3f01      	subs	r7, #1
 800c89c:	2300      	movs	r3, #0
 800c89e:	9312      	str	r3, [sp, #72]	@ 0x48
 800c8a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c8a2:	1b9b      	subs	r3, r3, r6
 800c8a4:	1e5a      	subs	r2, r3, #1
 800c8a6:	bf44      	itt	mi
 800c8a8:	f1c3 0801 	rsbmi	r8, r3, #1
 800c8ac:	2300      	movmi	r3, #0
 800c8ae:	9208      	str	r2, [sp, #32]
 800c8b0:	bf54      	ite	pl
 800c8b2:	f04f 0800 	movpl.w	r8, #0
 800c8b6:	9308      	strmi	r3, [sp, #32]
 800c8b8:	2f00      	cmp	r7, #0
 800c8ba:	db39      	blt.n	800c930 <_dtoa_r+0x218>
 800c8bc:	9b08      	ldr	r3, [sp, #32]
 800c8be:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c8c0:	443b      	add	r3, r7
 800c8c2:	9308      	str	r3, [sp, #32]
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c8c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8ca:	2b09      	cmp	r3, #9
 800c8cc:	d864      	bhi.n	800c998 <_dtoa_r+0x280>
 800c8ce:	2b05      	cmp	r3, #5
 800c8d0:	bfc4      	itt	gt
 800c8d2:	3b04      	subgt	r3, #4
 800c8d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c8d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8d8:	f1a3 0302 	sub.w	r3, r3, #2
 800c8dc:	bfcc      	ite	gt
 800c8de:	2400      	movgt	r4, #0
 800c8e0:	2401      	movle	r4, #1
 800c8e2:	2b03      	cmp	r3, #3
 800c8e4:	d863      	bhi.n	800c9ae <_dtoa_r+0x296>
 800c8e6:	e8df f003 	tbb	[pc, r3]
 800c8ea:	372a      	.short	0x372a
 800c8ec:	5535      	.short	0x5535
 800c8ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c8f2:	441e      	add	r6, r3
 800c8f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c8f8:	2b20      	cmp	r3, #32
 800c8fa:	bfc1      	itttt	gt
 800c8fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c900:	409f      	lslgt	r7, r3
 800c902:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c906:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c90a:	bfd6      	itet	le
 800c90c:	f1c3 0320 	rsble	r3, r3, #32
 800c910:	ea47 0003 	orrgt.w	r0, r7, r3
 800c914:	fa04 f003 	lslle.w	r0, r4, r3
 800c918:	f7f3 fdfc 	bl	8000514 <__aeabi_ui2d>
 800c91c:	2201      	movs	r2, #1
 800c91e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c922:	3e01      	subs	r6, #1
 800c924:	9214      	str	r2, [sp, #80]	@ 0x50
 800c926:	e777      	b.n	800c818 <_dtoa_r+0x100>
 800c928:	2301      	movs	r3, #1
 800c92a:	e7b8      	b.n	800c89e <_dtoa_r+0x186>
 800c92c:	9012      	str	r0, [sp, #72]	@ 0x48
 800c92e:	e7b7      	b.n	800c8a0 <_dtoa_r+0x188>
 800c930:	427b      	negs	r3, r7
 800c932:	930a      	str	r3, [sp, #40]	@ 0x28
 800c934:	2300      	movs	r3, #0
 800c936:	eba8 0807 	sub.w	r8, r8, r7
 800c93a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c93c:	e7c4      	b.n	800c8c8 <_dtoa_r+0x1b0>
 800c93e:	2300      	movs	r3, #0
 800c940:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c942:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c944:	2b00      	cmp	r3, #0
 800c946:	dc35      	bgt.n	800c9b4 <_dtoa_r+0x29c>
 800c948:	2301      	movs	r3, #1
 800c94a:	9300      	str	r3, [sp, #0]
 800c94c:	9307      	str	r3, [sp, #28]
 800c94e:	461a      	mov	r2, r3
 800c950:	920e      	str	r2, [sp, #56]	@ 0x38
 800c952:	e00b      	b.n	800c96c <_dtoa_r+0x254>
 800c954:	2301      	movs	r3, #1
 800c956:	e7f3      	b.n	800c940 <_dtoa_r+0x228>
 800c958:	2300      	movs	r3, #0
 800c95a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c95c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c95e:	18fb      	adds	r3, r7, r3
 800c960:	9300      	str	r3, [sp, #0]
 800c962:	3301      	adds	r3, #1
 800c964:	2b01      	cmp	r3, #1
 800c966:	9307      	str	r3, [sp, #28]
 800c968:	bfb8      	it	lt
 800c96a:	2301      	movlt	r3, #1
 800c96c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c970:	2100      	movs	r1, #0
 800c972:	2204      	movs	r2, #4
 800c974:	f102 0514 	add.w	r5, r2, #20
 800c978:	429d      	cmp	r5, r3
 800c97a:	d91f      	bls.n	800c9bc <_dtoa_r+0x2a4>
 800c97c:	6041      	str	r1, [r0, #4]
 800c97e:	4658      	mov	r0, fp
 800c980:	f000 fd8e 	bl	800d4a0 <_Balloc>
 800c984:	4682      	mov	sl, r0
 800c986:	2800      	cmp	r0, #0
 800c988:	d13c      	bne.n	800ca04 <_dtoa_r+0x2ec>
 800c98a:	4b1b      	ldr	r3, [pc, #108]	@ (800c9f8 <_dtoa_r+0x2e0>)
 800c98c:	4602      	mov	r2, r0
 800c98e:	f240 11af 	movw	r1, #431	@ 0x1af
 800c992:	e6d8      	b.n	800c746 <_dtoa_r+0x2e>
 800c994:	2301      	movs	r3, #1
 800c996:	e7e0      	b.n	800c95a <_dtoa_r+0x242>
 800c998:	2401      	movs	r4, #1
 800c99a:	2300      	movs	r3, #0
 800c99c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c99e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c9a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c9a4:	9300      	str	r3, [sp, #0]
 800c9a6:	9307      	str	r3, [sp, #28]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	2312      	movs	r3, #18
 800c9ac:	e7d0      	b.n	800c950 <_dtoa_r+0x238>
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c9b2:	e7f5      	b.n	800c9a0 <_dtoa_r+0x288>
 800c9b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c9b6:	9300      	str	r3, [sp, #0]
 800c9b8:	9307      	str	r3, [sp, #28]
 800c9ba:	e7d7      	b.n	800c96c <_dtoa_r+0x254>
 800c9bc:	3101      	adds	r1, #1
 800c9be:	0052      	lsls	r2, r2, #1
 800c9c0:	e7d8      	b.n	800c974 <_dtoa_r+0x25c>
 800c9c2:	bf00      	nop
 800c9c4:	f3af 8000 	nop.w
 800c9c8:	636f4361 	.word	0x636f4361
 800c9cc:	3fd287a7 	.word	0x3fd287a7
 800c9d0:	8b60c8b3 	.word	0x8b60c8b3
 800c9d4:	3fc68a28 	.word	0x3fc68a28
 800c9d8:	509f79fb 	.word	0x509f79fb
 800c9dc:	3fd34413 	.word	0x3fd34413
 800c9e0:	080126e2 	.word	0x080126e2
 800c9e4:	080126f9 	.word	0x080126f9
 800c9e8:	7ff00000 	.word	0x7ff00000
 800c9ec:	080126ad 	.word	0x080126ad
 800c9f0:	3ff80000 	.word	0x3ff80000
 800c9f4:	080127f0 	.word	0x080127f0
 800c9f8:	08012751 	.word	0x08012751
 800c9fc:	080126de 	.word	0x080126de
 800ca00:	080126ac 	.word	0x080126ac
 800ca04:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ca08:	6018      	str	r0, [r3, #0]
 800ca0a:	9b07      	ldr	r3, [sp, #28]
 800ca0c:	2b0e      	cmp	r3, #14
 800ca0e:	f200 80a4 	bhi.w	800cb5a <_dtoa_r+0x442>
 800ca12:	2c00      	cmp	r4, #0
 800ca14:	f000 80a1 	beq.w	800cb5a <_dtoa_r+0x442>
 800ca18:	2f00      	cmp	r7, #0
 800ca1a:	dd33      	ble.n	800ca84 <_dtoa_r+0x36c>
 800ca1c:	4bad      	ldr	r3, [pc, #692]	@ (800ccd4 <_dtoa_r+0x5bc>)
 800ca1e:	f007 020f 	and.w	r2, r7, #15
 800ca22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca26:	ed93 7b00 	vldr	d7, [r3]
 800ca2a:	05f8      	lsls	r0, r7, #23
 800ca2c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ca30:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ca34:	d516      	bpl.n	800ca64 <_dtoa_r+0x34c>
 800ca36:	4ba8      	ldr	r3, [pc, #672]	@ (800ccd8 <_dtoa_r+0x5c0>)
 800ca38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ca40:	f7f3 ff0c 	bl	800085c <__aeabi_ddiv>
 800ca44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca48:	f004 040f 	and.w	r4, r4, #15
 800ca4c:	2603      	movs	r6, #3
 800ca4e:	4da2      	ldr	r5, [pc, #648]	@ (800ccd8 <_dtoa_r+0x5c0>)
 800ca50:	b954      	cbnz	r4, 800ca68 <_dtoa_r+0x350>
 800ca52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca5a:	f7f3 feff 	bl	800085c <__aeabi_ddiv>
 800ca5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca62:	e028      	b.n	800cab6 <_dtoa_r+0x39e>
 800ca64:	2602      	movs	r6, #2
 800ca66:	e7f2      	b.n	800ca4e <_dtoa_r+0x336>
 800ca68:	07e1      	lsls	r1, r4, #31
 800ca6a:	d508      	bpl.n	800ca7e <_dtoa_r+0x366>
 800ca6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca70:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ca74:	f7f3 fdc8 	bl	8000608 <__aeabi_dmul>
 800ca78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca7c:	3601      	adds	r6, #1
 800ca7e:	1064      	asrs	r4, r4, #1
 800ca80:	3508      	adds	r5, #8
 800ca82:	e7e5      	b.n	800ca50 <_dtoa_r+0x338>
 800ca84:	f000 80d2 	beq.w	800cc2c <_dtoa_r+0x514>
 800ca88:	427c      	negs	r4, r7
 800ca8a:	4b92      	ldr	r3, [pc, #584]	@ (800ccd4 <_dtoa_r+0x5bc>)
 800ca8c:	4d92      	ldr	r5, [pc, #584]	@ (800ccd8 <_dtoa_r+0x5c0>)
 800ca8e:	f004 020f 	and.w	r2, r4, #15
 800ca92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca9e:	f7f3 fdb3 	bl	8000608 <__aeabi_dmul>
 800caa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800caa6:	1124      	asrs	r4, r4, #4
 800caa8:	2300      	movs	r3, #0
 800caaa:	2602      	movs	r6, #2
 800caac:	2c00      	cmp	r4, #0
 800caae:	f040 80b2 	bne.w	800cc16 <_dtoa_r+0x4fe>
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d1d3      	bne.n	800ca5e <_dtoa_r+0x346>
 800cab6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cab8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	f000 80b7 	beq.w	800cc30 <_dtoa_r+0x518>
 800cac2:	4b86      	ldr	r3, [pc, #536]	@ (800ccdc <_dtoa_r+0x5c4>)
 800cac4:	2200      	movs	r2, #0
 800cac6:	4620      	mov	r0, r4
 800cac8:	4629      	mov	r1, r5
 800caca:	f7f4 f80f 	bl	8000aec <__aeabi_dcmplt>
 800cace:	2800      	cmp	r0, #0
 800cad0:	f000 80ae 	beq.w	800cc30 <_dtoa_r+0x518>
 800cad4:	9b07      	ldr	r3, [sp, #28]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	f000 80aa 	beq.w	800cc30 <_dtoa_r+0x518>
 800cadc:	9b00      	ldr	r3, [sp, #0]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	dd37      	ble.n	800cb52 <_dtoa_r+0x43a>
 800cae2:	1e7b      	subs	r3, r7, #1
 800cae4:	9304      	str	r3, [sp, #16]
 800cae6:	4620      	mov	r0, r4
 800cae8:	4b7d      	ldr	r3, [pc, #500]	@ (800cce0 <_dtoa_r+0x5c8>)
 800caea:	2200      	movs	r2, #0
 800caec:	4629      	mov	r1, r5
 800caee:	f7f3 fd8b 	bl	8000608 <__aeabi_dmul>
 800caf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800caf6:	9c00      	ldr	r4, [sp, #0]
 800caf8:	3601      	adds	r6, #1
 800cafa:	4630      	mov	r0, r6
 800cafc:	f7f3 fd1a 	bl	8000534 <__aeabi_i2d>
 800cb00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb04:	f7f3 fd80 	bl	8000608 <__aeabi_dmul>
 800cb08:	4b76      	ldr	r3, [pc, #472]	@ (800cce4 <_dtoa_r+0x5cc>)
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	f7f3 fbc6 	bl	800029c <__adddf3>
 800cb10:	4605      	mov	r5, r0
 800cb12:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cb16:	2c00      	cmp	r4, #0
 800cb18:	f040 808d 	bne.w	800cc36 <_dtoa_r+0x51e>
 800cb1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb20:	4b71      	ldr	r3, [pc, #452]	@ (800cce8 <_dtoa_r+0x5d0>)
 800cb22:	2200      	movs	r2, #0
 800cb24:	f7f3 fbb8 	bl	8000298 <__aeabi_dsub>
 800cb28:	4602      	mov	r2, r0
 800cb2a:	460b      	mov	r3, r1
 800cb2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cb30:	462a      	mov	r2, r5
 800cb32:	4633      	mov	r3, r6
 800cb34:	f7f3 fff8 	bl	8000b28 <__aeabi_dcmpgt>
 800cb38:	2800      	cmp	r0, #0
 800cb3a:	f040 828b 	bne.w	800d054 <_dtoa_r+0x93c>
 800cb3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb42:	462a      	mov	r2, r5
 800cb44:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cb48:	f7f3 ffd0 	bl	8000aec <__aeabi_dcmplt>
 800cb4c:	2800      	cmp	r0, #0
 800cb4e:	f040 8128 	bne.w	800cda2 <_dtoa_r+0x68a>
 800cb52:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800cb56:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800cb5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	f2c0 815a 	blt.w	800ce16 <_dtoa_r+0x6fe>
 800cb62:	2f0e      	cmp	r7, #14
 800cb64:	f300 8157 	bgt.w	800ce16 <_dtoa_r+0x6fe>
 800cb68:	4b5a      	ldr	r3, [pc, #360]	@ (800ccd4 <_dtoa_r+0x5bc>)
 800cb6a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cb6e:	ed93 7b00 	vldr	d7, [r3]
 800cb72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	ed8d 7b00 	vstr	d7, [sp]
 800cb7a:	da03      	bge.n	800cb84 <_dtoa_r+0x46c>
 800cb7c:	9b07      	ldr	r3, [sp, #28]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	f340 8101 	ble.w	800cd86 <_dtoa_r+0x66e>
 800cb84:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cb88:	4656      	mov	r6, sl
 800cb8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb8e:	4620      	mov	r0, r4
 800cb90:	4629      	mov	r1, r5
 800cb92:	f7f3 fe63 	bl	800085c <__aeabi_ddiv>
 800cb96:	f7f3 ffe7 	bl	8000b68 <__aeabi_d2iz>
 800cb9a:	4680      	mov	r8, r0
 800cb9c:	f7f3 fcca 	bl	8000534 <__aeabi_i2d>
 800cba0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cba4:	f7f3 fd30 	bl	8000608 <__aeabi_dmul>
 800cba8:	4602      	mov	r2, r0
 800cbaa:	460b      	mov	r3, r1
 800cbac:	4620      	mov	r0, r4
 800cbae:	4629      	mov	r1, r5
 800cbb0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cbb4:	f7f3 fb70 	bl	8000298 <__aeabi_dsub>
 800cbb8:	f806 4b01 	strb.w	r4, [r6], #1
 800cbbc:	9d07      	ldr	r5, [sp, #28]
 800cbbe:	eba6 040a 	sub.w	r4, r6, sl
 800cbc2:	42a5      	cmp	r5, r4
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	460b      	mov	r3, r1
 800cbc8:	f040 8117 	bne.w	800cdfa <_dtoa_r+0x6e2>
 800cbcc:	f7f3 fb66 	bl	800029c <__adddf3>
 800cbd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cbd4:	4604      	mov	r4, r0
 800cbd6:	460d      	mov	r5, r1
 800cbd8:	f7f3 ffa6 	bl	8000b28 <__aeabi_dcmpgt>
 800cbdc:	2800      	cmp	r0, #0
 800cbde:	f040 80f9 	bne.w	800cdd4 <_dtoa_r+0x6bc>
 800cbe2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cbe6:	4620      	mov	r0, r4
 800cbe8:	4629      	mov	r1, r5
 800cbea:	f7f3 ff75 	bl	8000ad8 <__aeabi_dcmpeq>
 800cbee:	b118      	cbz	r0, 800cbf8 <_dtoa_r+0x4e0>
 800cbf0:	f018 0f01 	tst.w	r8, #1
 800cbf4:	f040 80ee 	bne.w	800cdd4 <_dtoa_r+0x6bc>
 800cbf8:	4649      	mov	r1, r9
 800cbfa:	4658      	mov	r0, fp
 800cbfc:	f000 fc90 	bl	800d520 <_Bfree>
 800cc00:	2300      	movs	r3, #0
 800cc02:	7033      	strb	r3, [r6, #0]
 800cc04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cc06:	3701      	adds	r7, #1
 800cc08:	601f      	str	r7, [r3, #0]
 800cc0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	f000 831d 	beq.w	800d24c <_dtoa_r+0xb34>
 800cc12:	601e      	str	r6, [r3, #0]
 800cc14:	e31a      	b.n	800d24c <_dtoa_r+0xb34>
 800cc16:	07e2      	lsls	r2, r4, #31
 800cc18:	d505      	bpl.n	800cc26 <_dtoa_r+0x50e>
 800cc1a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cc1e:	f7f3 fcf3 	bl	8000608 <__aeabi_dmul>
 800cc22:	3601      	adds	r6, #1
 800cc24:	2301      	movs	r3, #1
 800cc26:	1064      	asrs	r4, r4, #1
 800cc28:	3508      	adds	r5, #8
 800cc2a:	e73f      	b.n	800caac <_dtoa_r+0x394>
 800cc2c:	2602      	movs	r6, #2
 800cc2e:	e742      	b.n	800cab6 <_dtoa_r+0x39e>
 800cc30:	9c07      	ldr	r4, [sp, #28]
 800cc32:	9704      	str	r7, [sp, #16]
 800cc34:	e761      	b.n	800cafa <_dtoa_r+0x3e2>
 800cc36:	4b27      	ldr	r3, [pc, #156]	@ (800ccd4 <_dtoa_r+0x5bc>)
 800cc38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cc3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cc3e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cc42:	4454      	add	r4, sl
 800cc44:	2900      	cmp	r1, #0
 800cc46:	d053      	beq.n	800ccf0 <_dtoa_r+0x5d8>
 800cc48:	4928      	ldr	r1, [pc, #160]	@ (800ccec <_dtoa_r+0x5d4>)
 800cc4a:	2000      	movs	r0, #0
 800cc4c:	f7f3 fe06 	bl	800085c <__aeabi_ddiv>
 800cc50:	4633      	mov	r3, r6
 800cc52:	462a      	mov	r2, r5
 800cc54:	f7f3 fb20 	bl	8000298 <__aeabi_dsub>
 800cc58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cc5c:	4656      	mov	r6, sl
 800cc5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc62:	f7f3 ff81 	bl	8000b68 <__aeabi_d2iz>
 800cc66:	4605      	mov	r5, r0
 800cc68:	f7f3 fc64 	bl	8000534 <__aeabi_i2d>
 800cc6c:	4602      	mov	r2, r0
 800cc6e:	460b      	mov	r3, r1
 800cc70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc74:	f7f3 fb10 	bl	8000298 <__aeabi_dsub>
 800cc78:	3530      	adds	r5, #48	@ 0x30
 800cc7a:	4602      	mov	r2, r0
 800cc7c:	460b      	mov	r3, r1
 800cc7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cc82:	f806 5b01 	strb.w	r5, [r6], #1
 800cc86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cc8a:	f7f3 ff2f 	bl	8000aec <__aeabi_dcmplt>
 800cc8e:	2800      	cmp	r0, #0
 800cc90:	d171      	bne.n	800cd76 <_dtoa_r+0x65e>
 800cc92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc96:	4911      	ldr	r1, [pc, #68]	@ (800ccdc <_dtoa_r+0x5c4>)
 800cc98:	2000      	movs	r0, #0
 800cc9a:	f7f3 fafd 	bl	8000298 <__aeabi_dsub>
 800cc9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cca2:	f7f3 ff23 	bl	8000aec <__aeabi_dcmplt>
 800cca6:	2800      	cmp	r0, #0
 800cca8:	f040 8095 	bne.w	800cdd6 <_dtoa_r+0x6be>
 800ccac:	42a6      	cmp	r6, r4
 800ccae:	f43f af50 	beq.w	800cb52 <_dtoa_r+0x43a>
 800ccb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ccb6:	4b0a      	ldr	r3, [pc, #40]	@ (800cce0 <_dtoa_r+0x5c8>)
 800ccb8:	2200      	movs	r2, #0
 800ccba:	f7f3 fca5 	bl	8000608 <__aeabi_dmul>
 800ccbe:	4b08      	ldr	r3, [pc, #32]	@ (800cce0 <_dtoa_r+0x5c8>)
 800ccc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccca:	f7f3 fc9d 	bl	8000608 <__aeabi_dmul>
 800ccce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ccd2:	e7c4      	b.n	800cc5e <_dtoa_r+0x546>
 800ccd4:	080127f0 	.word	0x080127f0
 800ccd8:	080127c8 	.word	0x080127c8
 800ccdc:	3ff00000 	.word	0x3ff00000
 800cce0:	40240000 	.word	0x40240000
 800cce4:	401c0000 	.word	0x401c0000
 800cce8:	40140000 	.word	0x40140000
 800ccec:	3fe00000 	.word	0x3fe00000
 800ccf0:	4631      	mov	r1, r6
 800ccf2:	4628      	mov	r0, r5
 800ccf4:	f7f3 fc88 	bl	8000608 <__aeabi_dmul>
 800ccf8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ccfc:	9415      	str	r4, [sp, #84]	@ 0x54
 800ccfe:	4656      	mov	r6, sl
 800cd00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd04:	f7f3 ff30 	bl	8000b68 <__aeabi_d2iz>
 800cd08:	4605      	mov	r5, r0
 800cd0a:	f7f3 fc13 	bl	8000534 <__aeabi_i2d>
 800cd0e:	4602      	mov	r2, r0
 800cd10:	460b      	mov	r3, r1
 800cd12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd16:	f7f3 fabf 	bl	8000298 <__aeabi_dsub>
 800cd1a:	3530      	adds	r5, #48	@ 0x30
 800cd1c:	f806 5b01 	strb.w	r5, [r6], #1
 800cd20:	4602      	mov	r2, r0
 800cd22:	460b      	mov	r3, r1
 800cd24:	42a6      	cmp	r6, r4
 800cd26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cd2a:	f04f 0200 	mov.w	r2, #0
 800cd2e:	d124      	bne.n	800cd7a <_dtoa_r+0x662>
 800cd30:	4bac      	ldr	r3, [pc, #688]	@ (800cfe4 <_dtoa_r+0x8cc>)
 800cd32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cd36:	f7f3 fab1 	bl	800029c <__adddf3>
 800cd3a:	4602      	mov	r2, r0
 800cd3c:	460b      	mov	r3, r1
 800cd3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd42:	f7f3 fef1 	bl	8000b28 <__aeabi_dcmpgt>
 800cd46:	2800      	cmp	r0, #0
 800cd48:	d145      	bne.n	800cdd6 <_dtoa_r+0x6be>
 800cd4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cd4e:	49a5      	ldr	r1, [pc, #660]	@ (800cfe4 <_dtoa_r+0x8cc>)
 800cd50:	2000      	movs	r0, #0
 800cd52:	f7f3 faa1 	bl	8000298 <__aeabi_dsub>
 800cd56:	4602      	mov	r2, r0
 800cd58:	460b      	mov	r3, r1
 800cd5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd5e:	f7f3 fec5 	bl	8000aec <__aeabi_dcmplt>
 800cd62:	2800      	cmp	r0, #0
 800cd64:	f43f aef5 	beq.w	800cb52 <_dtoa_r+0x43a>
 800cd68:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800cd6a:	1e73      	subs	r3, r6, #1
 800cd6c:	9315      	str	r3, [sp, #84]	@ 0x54
 800cd6e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cd72:	2b30      	cmp	r3, #48	@ 0x30
 800cd74:	d0f8      	beq.n	800cd68 <_dtoa_r+0x650>
 800cd76:	9f04      	ldr	r7, [sp, #16]
 800cd78:	e73e      	b.n	800cbf8 <_dtoa_r+0x4e0>
 800cd7a:	4b9b      	ldr	r3, [pc, #620]	@ (800cfe8 <_dtoa_r+0x8d0>)
 800cd7c:	f7f3 fc44 	bl	8000608 <__aeabi_dmul>
 800cd80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd84:	e7bc      	b.n	800cd00 <_dtoa_r+0x5e8>
 800cd86:	d10c      	bne.n	800cda2 <_dtoa_r+0x68a>
 800cd88:	4b98      	ldr	r3, [pc, #608]	@ (800cfec <_dtoa_r+0x8d4>)
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd90:	f7f3 fc3a 	bl	8000608 <__aeabi_dmul>
 800cd94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd98:	f7f3 febc 	bl	8000b14 <__aeabi_dcmpge>
 800cd9c:	2800      	cmp	r0, #0
 800cd9e:	f000 8157 	beq.w	800d050 <_dtoa_r+0x938>
 800cda2:	2400      	movs	r4, #0
 800cda4:	4625      	mov	r5, r4
 800cda6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cda8:	43db      	mvns	r3, r3
 800cdaa:	9304      	str	r3, [sp, #16]
 800cdac:	4656      	mov	r6, sl
 800cdae:	2700      	movs	r7, #0
 800cdb0:	4621      	mov	r1, r4
 800cdb2:	4658      	mov	r0, fp
 800cdb4:	f000 fbb4 	bl	800d520 <_Bfree>
 800cdb8:	2d00      	cmp	r5, #0
 800cdba:	d0dc      	beq.n	800cd76 <_dtoa_r+0x65e>
 800cdbc:	b12f      	cbz	r7, 800cdca <_dtoa_r+0x6b2>
 800cdbe:	42af      	cmp	r7, r5
 800cdc0:	d003      	beq.n	800cdca <_dtoa_r+0x6b2>
 800cdc2:	4639      	mov	r1, r7
 800cdc4:	4658      	mov	r0, fp
 800cdc6:	f000 fbab 	bl	800d520 <_Bfree>
 800cdca:	4629      	mov	r1, r5
 800cdcc:	4658      	mov	r0, fp
 800cdce:	f000 fba7 	bl	800d520 <_Bfree>
 800cdd2:	e7d0      	b.n	800cd76 <_dtoa_r+0x65e>
 800cdd4:	9704      	str	r7, [sp, #16]
 800cdd6:	4633      	mov	r3, r6
 800cdd8:	461e      	mov	r6, r3
 800cdda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cdde:	2a39      	cmp	r2, #57	@ 0x39
 800cde0:	d107      	bne.n	800cdf2 <_dtoa_r+0x6da>
 800cde2:	459a      	cmp	sl, r3
 800cde4:	d1f8      	bne.n	800cdd8 <_dtoa_r+0x6c0>
 800cde6:	9a04      	ldr	r2, [sp, #16]
 800cde8:	3201      	adds	r2, #1
 800cdea:	9204      	str	r2, [sp, #16]
 800cdec:	2230      	movs	r2, #48	@ 0x30
 800cdee:	f88a 2000 	strb.w	r2, [sl]
 800cdf2:	781a      	ldrb	r2, [r3, #0]
 800cdf4:	3201      	adds	r2, #1
 800cdf6:	701a      	strb	r2, [r3, #0]
 800cdf8:	e7bd      	b.n	800cd76 <_dtoa_r+0x65e>
 800cdfa:	4b7b      	ldr	r3, [pc, #492]	@ (800cfe8 <_dtoa_r+0x8d0>)
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	f7f3 fc03 	bl	8000608 <__aeabi_dmul>
 800ce02:	2200      	movs	r2, #0
 800ce04:	2300      	movs	r3, #0
 800ce06:	4604      	mov	r4, r0
 800ce08:	460d      	mov	r5, r1
 800ce0a:	f7f3 fe65 	bl	8000ad8 <__aeabi_dcmpeq>
 800ce0e:	2800      	cmp	r0, #0
 800ce10:	f43f aebb 	beq.w	800cb8a <_dtoa_r+0x472>
 800ce14:	e6f0      	b.n	800cbf8 <_dtoa_r+0x4e0>
 800ce16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ce18:	2a00      	cmp	r2, #0
 800ce1a:	f000 80db 	beq.w	800cfd4 <_dtoa_r+0x8bc>
 800ce1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce20:	2a01      	cmp	r2, #1
 800ce22:	f300 80bf 	bgt.w	800cfa4 <_dtoa_r+0x88c>
 800ce26:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ce28:	2a00      	cmp	r2, #0
 800ce2a:	f000 80b7 	beq.w	800cf9c <_dtoa_r+0x884>
 800ce2e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ce32:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ce34:	4646      	mov	r6, r8
 800ce36:	9a08      	ldr	r2, [sp, #32]
 800ce38:	2101      	movs	r1, #1
 800ce3a:	441a      	add	r2, r3
 800ce3c:	4658      	mov	r0, fp
 800ce3e:	4498      	add	r8, r3
 800ce40:	9208      	str	r2, [sp, #32]
 800ce42:	f000 fc6b 	bl	800d71c <__i2b>
 800ce46:	4605      	mov	r5, r0
 800ce48:	b15e      	cbz	r6, 800ce62 <_dtoa_r+0x74a>
 800ce4a:	9b08      	ldr	r3, [sp, #32]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	dd08      	ble.n	800ce62 <_dtoa_r+0x74a>
 800ce50:	42b3      	cmp	r3, r6
 800ce52:	9a08      	ldr	r2, [sp, #32]
 800ce54:	bfa8      	it	ge
 800ce56:	4633      	movge	r3, r6
 800ce58:	eba8 0803 	sub.w	r8, r8, r3
 800ce5c:	1af6      	subs	r6, r6, r3
 800ce5e:	1ad3      	subs	r3, r2, r3
 800ce60:	9308      	str	r3, [sp, #32]
 800ce62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce64:	b1f3      	cbz	r3, 800cea4 <_dtoa_r+0x78c>
 800ce66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	f000 80b7 	beq.w	800cfdc <_dtoa_r+0x8c4>
 800ce6e:	b18c      	cbz	r4, 800ce94 <_dtoa_r+0x77c>
 800ce70:	4629      	mov	r1, r5
 800ce72:	4622      	mov	r2, r4
 800ce74:	4658      	mov	r0, fp
 800ce76:	f000 fd11 	bl	800d89c <__pow5mult>
 800ce7a:	464a      	mov	r2, r9
 800ce7c:	4601      	mov	r1, r0
 800ce7e:	4605      	mov	r5, r0
 800ce80:	4658      	mov	r0, fp
 800ce82:	f000 fc61 	bl	800d748 <__multiply>
 800ce86:	4649      	mov	r1, r9
 800ce88:	9004      	str	r0, [sp, #16]
 800ce8a:	4658      	mov	r0, fp
 800ce8c:	f000 fb48 	bl	800d520 <_Bfree>
 800ce90:	9b04      	ldr	r3, [sp, #16]
 800ce92:	4699      	mov	r9, r3
 800ce94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce96:	1b1a      	subs	r2, r3, r4
 800ce98:	d004      	beq.n	800cea4 <_dtoa_r+0x78c>
 800ce9a:	4649      	mov	r1, r9
 800ce9c:	4658      	mov	r0, fp
 800ce9e:	f000 fcfd 	bl	800d89c <__pow5mult>
 800cea2:	4681      	mov	r9, r0
 800cea4:	2101      	movs	r1, #1
 800cea6:	4658      	mov	r0, fp
 800cea8:	f000 fc38 	bl	800d71c <__i2b>
 800ceac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ceae:	4604      	mov	r4, r0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	f000 81cf 	beq.w	800d254 <_dtoa_r+0xb3c>
 800ceb6:	461a      	mov	r2, r3
 800ceb8:	4601      	mov	r1, r0
 800ceba:	4658      	mov	r0, fp
 800cebc:	f000 fcee 	bl	800d89c <__pow5mult>
 800cec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cec2:	2b01      	cmp	r3, #1
 800cec4:	4604      	mov	r4, r0
 800cec6:	f300 8095 	bgt.w	800cff4 <_dtoa_r+0x8dc>
 800ceca:	9b02      	ldr	r3, [sp, #8]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	f040 8087 	bne.w	800cfe0 <_dtoa_r+0x8c8>
 800ced2:	9b03      	ldr	r3, [sp, #12]
 800ced4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	f040 8089 	bne.w	800cff0 <_dtoa_r+0x8d8>
 800cede:	9b03      	ldr	r3, [sp, #12]
 800cee0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cee4:	0d1b      	lsrs	r3, r3, #20
 800cee6:	051b      	lsls	r3, r3, #20
 800cee8:	b12b      	cbz	r3, 800cef6 <_dtoa_r+0x7de>
 800ceea:	9b08      	ldr	r3, [sp, #32]
 800ceec:	3301      	adds	r3, #1
 800ceee:	9308      	str	r3, [sp, #32]
 800cef0:	f108 0801 	add.w	r8, r8, #1
 800cef4:	2301      	movs	r3, #1
 800cef6:	930a      	str	r3, [sp, #40]	@ 0x28
 800cef8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	f000 81b0 	beq.w	800d260 <_dtoa_r+0xb48>
 800cf00:	6923      	ldr	r3, [r4, #16]
 800cf02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cf06:	6918      	ldr	r0, [r3, #16]
 800cf08:	f000 fbbc 	bl	800d684 <__hi0bits>
 800cf0c:	f1c0 0020 	rsb	r0, r0, #32
 800cf10:	9b08      	ldr	r3, [sp, #32]
 800cf12:	4418      	add	r0, r3
 800cf14:	f010 001f 	ands.w	r0, r0, #31
 800cf18:	d077      	beq.n	800d00a <_dtoa_r+0x8f2>
 800cf1a:	f1c0 0320 	rsb	r3, r0, #32
 800cf1e:	2b04      	cmp	r3, #4
 800cf20:	dd6b      	ble.n	800cffa <_dtoa_r+0x8e2>
 800cf22:	9b08      	ldr	r3, [sp, #32]
 800cf24:	f1c0 001c 	rsb	r0, r0, #28
 800cf28:	4403      	add	r3, r0
 800cf2a:	4480      	add	r8, r0
 800cf2c:	4406      	add	r6, r0
 800cf2e:	9308      	str	r3, [sp, #32]
 800cf30:	f1b8 0f00 	cmp.w	r8, #0
 800cf34:	dd05      	ble.n	800cf42 <_dtoa_r+0x82a>
 800cf36:	4649      	mov	r1, r9
 800cf38:	4642      	mov	r2, r8
 800cf3a:	4658      	mov	r0, fp
 800cf3c:	f000 fd08 	bl	800d950 <__lshift>
 800cf40:	4681      	mov	r9, r0
 800cf42:	9b08      	ldr	r3, [sp, #32]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	dd05      	ble.n	800cf54 <_dtoa_r+0x83c>
 800cf48:	4621      	mov	r1, r4
 800cf4a:	461a      	mov	r2, r3
 800cf4c:	4658      	mov	r0, fp
 800cf4e:	f000 fcff 	bl	800d950 <__lshift>
 800cf52:	4604      	mov	r4, r0
 800cf54:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d059      	beq.n	800d00e <_dtoa_r+0x8f6>
 800cf5a:	4621      	mov	r1, r4
 800cf5c:	4648      	mov	r0, r9
 800cf5e:	f000 fd63 	bl	800da28 <__mcmp>
 800cf62:	2800      	cmp	r0, #0
 800cf64:	da53      	bge.n	800d00e <_dtoa_r+0x8f6>
 800cf66:	1e7b      	subs	r3, r7, #1
 800cf68:	9304      	str	r3, [sp, #16]
 800cf6a:	4649      	mov	r1, r9
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	220a      	movs	r2, #10
 800cf70:	4658      	mov	r0, fp
 800cf72:	f000 faf7 	bl	800d564 <__multadd>
 800cf76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf78:	4681      	mov	r9, r0
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	f000 8172 	beq.w	800d264 <_dtoa_r+0xb4c>
 800cf80:	2300      	movs	r3, #0
 800cf82:	4629      	mov	r1, r5
 800cf84:	220a      	movs	r2, #10
 800cf86:	4658      	mov	r0, fp
 800cf88:	f000 faec 	bl	800d564 <__multadd>
 800cf8c:	9b00      	ldr	r3, [sp, #0]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	4605      	mov	r5, r0
 800cf92:	dc67      	bgt.n	800d064 <_dtoa_r+0x94c>
 800cf94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf96:	2b02      	cmp	r3, #2
 800cf98:	dc41      	bgt.n	800d01e <_dtoa_r+0x906>
 800cf9a:	e063      	b.n	800d064 <_dtoa_r+0x94c>
 800cf9c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cf9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cfa2:	e746      	b.n	800ce32 <_dtoa_r+0x71a>
 800cfa4:	9b07      	ldr	r3, [sp, #28]
 800cfa6:	1e5c      	subs	r4, r3, #1
 800cfa8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cfaa:	42a3      	cmp	r3, r4
 800cfac:	bfbf      	itttt	lt
 800cfae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800cfb0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800cfb2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800cfb4:	1ae3      	sublt	r3, r4, r3
 800cfb6:	bfb4      	ite	lt
 800cfb8:	18d2      	addlt	r2, r2, r3
 800cfba:	1b1c      	subge	r4, r3, r4
 800cfbc:	9b07      	ldr	r3, [sp, #28]
 800cfbe:	bfbc      	itt	lt
 800cfc0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800cfc2:	2400      	movlt	r4, #0
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	bfb5      	itete	lt
 800cfc8:	eba8 0603 	sublt.w	r6, r8, r3
 800cfcc:	9b07      	ldrge	r3, [sp, #28]
 800cfce:	2300      	movlt	r3, #0
 800cfd0:	4646      	movge	r6, r8
 800cfd2:	e730      	b.n	800ce36 <_dtoa_r+0x71e>
 800cfd4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cfd6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800cfd8:	4646      	mov	r6, r8
 800cfda:	e735      	b.n	800ce48 <_dtoa_r+0x730>
 800cfdc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cfde:	e75c      	b.n	800ce9a <_dtoa_r+0x782>
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	e788      	b.n	800cef6 <_dtoa_r+0x7de>
 800cfe4:	3fe00000 	.word	0x3fe00000
 800cfe8:	40240000 	.word	0x40240000
 800cfec:	40140000 	.word	0x40140000
 800cff0:	9b02      	ldr	r3, [sp, #8]
 800cff2:	e780      	b.n	800cef6 <_dtoa_r+0x7de>
 800cff4:	2300      	movs	r3, #0
 800cff6:	930a      	str	r3, [sp, #40]	@ 0x28
 800cff8:	e782      	b.n	800cf00 <_dtoa_r+0x7e8>
 800cffa:	d099      	beq.n	800cf30 <_dtoa_r+0x818>
 800cffc:	9a08      	ldr	r2, [sp, #32]
 800cffe:	331c      	adds	r3, #28
 800d000:	441a      	add	r2, r3
 800d002:	4498      	add	r8, r3
 800d004:	441e      	add	r6, r3
 800d006:	9208      	str	r2, [sp, #32]
 800d008:	e792      	b.n	800cf30 <_dtoa_r+0x818>
 800d00a:	4603      	mov	r3, r0
 800d00c:	e7f6      	b.n	800cffc <_dtoa_r+0x8e4>
 800d00e:	9b07      	ldr	r3, [sp, #28]
 800d010:	9704      	str	r7, [sp, #16]
 800d012:	2b00      	cmp	r3, #0
 800d014:	dc20      	bgt.n	800d058 <_dtoa_r+0x940>
 800d016:	9300      	str	r3, [sp, #0]
 800d018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d01a:	2b02      	cmp	r3, #2
 800d01c:	dd1e      	ble.n	800d05c <_dtoa_r+0x944>
 800d01e:	9b00      	ldr	r3, [sp, #0]
 800d020:	2b00      	cmp	r3, #0
 800d022:	f47f aec0 	bne.w	800cda6 <_dtoa_r+0x68e>
 800d026:	4621      	mov	r1, r4
 800d028:	2205      	movs	r2, #5
 800d02a:	4658      	mov	r0, fp
 800d02c:	f000 fa9a 	bl	800d564 <__multadd>
 800d030:	4601      	mov	r1, r0
 800d032:	4604      	mov	r4, r0
 800d034:	4648      	mov	r0, r9
 800d036:	f000 fcf7 	bl	800da28 <__mcmp>
 800d03a:	2800      	cmp	r0, #0
 800d03c:	f77f aeb3 	ble.w	800cda6 <_dtoa_r+0x68e>
 800d040:	4656      	mov	r6, sl
 800d042:	2331      	movs	r3, #49	@ 0x31
 800d044:	f806 3b01 	strb.w	r3, [r6], #1
 800d048:	9b04      	ldr	r3, [sp, #16]
 800d04a:	3301      	adds	r3, #1
 800d04c:	9304      	str	r3, [sp, #16]
 800d04e:	e6ae      	b.n	800cdae <_dtoa_r+0x696>
 800d050:	9c07      	ldr	r4, [sp, #28]
 800d052:	9704      	str	r7, [sp, #16]
 800d054:	4625      	mov	r5, r4
 800d056:	e7f3      	b.n	800d040 <_dtoa_r+0x928>
 800d058:	9b07      	ldr	r3, [sp, #28]
 800d05a:	9300      	str	r3, [sp, #0]
 800d05c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d05e:	2b00      	cmp	r3, #0
 800d060:	f000 8104 	beq.w	800d26c <_dtoa_r+0xb54>
 800d064:	2e00      	cmp	r6, #0
 800d066:	dd05      	ble.n	800d074 <_dtoa_r+0x95c>
 800d068:	4629      	mov	r1, r5
 800d06a:	4632      	mov	r2, r6
 800d06c:	4658      	mov	r0, fp
 800d06e:	f000 fc6f 	bl	800d950 <__lshift>
 800d072:	4605      	mov	r5, r0
 800d074:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d076:	2b00      	cmp	r3, #0
 800d078:	d05a      	beq.n	800d130 <_dtoa_r+0xa18>
 800d07a:	6869      	ldr	r1, [r5, #4]
 800d07c:	4658      	mov	r0, fp
 800d07e:	f000 fa0f 	bl	800d4a0 <_Balloc>
 800d082:	4606      	mov	r6, r0
 800d084:	b928      	cbnz	r0, 800d092 <_dtoa_r+0x97a>
 800d086:	4b84      	ldr	r3, [pc, #528]	@ (800d298 <_dtoa_r+0xb80>)
 800d088:	4602      	mov	r2, r0
 800d08a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d08e:	f7ff bb5a 	b.w	800c746 <_dtoa_r+0x2e>
 800d092:	692a      	ldr	r2, [r5, #16]
 800d094:	3202      	adds	r2, #2
 800d096:	0092      	lsls	r2, r2, #2
 800d098:	f105 010c 	add.w	r1, r5, #12
 800d09c:	300c      	adds	r0, #12
 800d09e:	f7ff fa9e 	bl	800c5de <memcpy>
 800d0a2:	2201      	movs	r2, #1
 800d0a4:	4631      	mov	r1, r6
 800d0a6:	4658      	mov	r0, fp
 800d0a8:	f000 fc52 	bl	800d950 <__lshift>
 800d0ac:	f10a 0301 	add.w	r3, sl, #1
 800d0b0:	9307      	str	r3, [sp, #28]
 800d0b2:	9b00      	ldr	r3, [sp, #0]
 800d0b4:	4453      	add	r3, sl
 800d0b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d0b8:	9b02      	ldr	r3, [sp, #8]
 800d0ba:	f003 0301 	and.w	r3, r3, #1
 800d0be:	462f      	mov	r7, r5
 800d0c0:	930a      	str	r3, [sp, #40]	@ 0x28
 800d0c2:	4605      	mov	r5, r0
 800d0c4:	9b07      	ldr	r3, [sp, #28]
 800d0c6:	4621      	mov	r1, r4
 800d0c8:	3b01      	subs	r3, #1
 800d0ca:	4648      	mov	r0, r9
 800d0cc:	9300      	str	r3, [sp, #0]
 800d0ce:	f7ff fa9b 	bl	800c608 <quorem>
 800d0d2:	4639      	mov	r1, r7
 800d0d4:	9002      	str	r0, [sp, #8]
 800d0d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d0da:	4648      	mov	r0, r9
 800d0dc:	f000 fca4 	bl	800da28 <__mcmp>
 800d0e0:	462a      	mov	r2, r5
 800d0e2:	9008      	str	r0, [sp, #32]
 800d0e4:	4621      	mov	r1, r4
 800d0e6:	4658      	mov	r0, fp
 800d0e8:	f000 fcba 	bl	800da60 <__mdiff>
 800d0ec:	68c2      	ldr	r2, [r0, #12]
 800d0ee:	4606      	mov	r6, r0
 800d0f0:	bb02      	cbnz	r2, 800d134 <_dtoa_r+0xa1c>
 800d0f2:	4601      	mov	r1, r0
 800d0f4:	4648      	mov	r0, r9
 800d0f6:	f000 fc97 	bl	800da28 <__mcmp>
 800d0fa:	4602      	mov	r2, r0
 800d0fc:	4631      	mov	r1, r6
 800d0fe:	4658      	mov	r0, fp
 800d100:	920e      	str	r2, [sp, #56]	@ 0x38
 800d102:	f000 fa0d 	bl	800d520 <_Bfree>
 800d106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d108:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d10a:	9e07      	ldr	r6, [sp, #28]
 800d10c:	ea43 0102 	orr.w	r1, r3, r2
 800d110:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d112:	4319      	orrs	r1, r3
 800d114:	d110      	bne.n	800d138 <_dtoa_r+0xa20>
 800d116:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d11a:	d029      	beq.n	800d170 <_dtoa_r+0xa58>
 800d11c:	9b08      	ldr	r3, [sp, #32]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	dd02      	ble.n	800d128 <_dtoa_r+0xa10>
 800d122:	9b02      	ldr	r3, [sp, #8]
 800d124:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d128:	9b00      	ldr	r3, [sp, #0]
 800d12a:	f883 8000 	strb.w	r8, [r3]
 800d12e:	e63f      	b.n	800cdb0 <_dtoa_r+0x698>
 800d130:	4628      	mov	r0, r5
 800d132:	e7bb      	b.n	800d0ac <_dtoa_r+0x994>
 800d134:	2201      	movs	r2, #1
 800d136:	e7e1      	b.n	800d0fc <_dtoa_r+0x9e4>
 800d138:	9b08      	ldr	r3, [sp, #32]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	db04      	blt.n	800d148 <_dtoa_r+0xa30>
 800d13e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d140:	430b      	orrs	r3, r1
 800d142:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d144:	430b      	orrs	r3, r1
 800d146:	d120      	bne.n	800d18a <_dtoa_r+0xa72>
 800d148:	2a00      	cmp	r2, #0
 800d14a:	dded      	ble.n	800d128 <_dtoa_r+0xa10>
 800d14c:	4649      	mov	r1, r9
 800d14e:	2201      	movs	r2, #1
 800d150:	4658      	mov	r0, fp
 800d152:	f000 fbfd 	bl	800d950 <__lshift>
 800d156:	4621      	mov	r1, r4
 800d158:	4681      	mov	r9, r0
 800d15a:	f000 fc65 	bl	800da28 <__mcmp>
 800d15e:	2800      	cmp	r0, #0
 800d160:	dc03      	bgt.n	800d16a <_dtoa_r+0xa52>
 800d162:	d1e1      	bne.n	800d128 <_dtoa_r+0xa10>
 800d164:	f018 0f01 	tst.w	r8, #1
 800d168:	d0de      	beq.n	800d128 <_dtoa_r+0xa10>
 800d16a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d16e:	d1d8      	bne.n	800d122 <_dtoa_r+0xa0a>
 800d170:	9a00      	ldr	r2, [sp, #0]
 800d172:	2339      	movs	r3, #57	@ 0x39
 800d174:	7013      	strb	r3, [r2, #0]
 800d176:	4633      	mov	r3, r6
 800d178:	461e      	mov	r6, r3
 800d17a:	3b01      	subs	r3, #1
 800d17c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d180:	2a39      	cmp	r2, #57	@ 0x39
 800d182:	d052      	beq.n	800d22a <_dtoa_r+0xb12>
 800d184:	3201      	adds	r2, #1
 800d186:	701a      	strb	r2, [r3, #0]
 800d188:	e612      	b.n	800cdb0 <_dtoa_r+0x698>
 800d18a:	2a00      	cmp	r2, #0
 800d18c:	dd07      	ble.n	800d19e <_dtoa_r+0xa86>
 800d18e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d192:	d0ed      	beq.n	800d170 <_dtoa_r+0xa58>
 800d194:	9a00      	ldr	r2, [sp, #0]
 800d196:	f108 0301 	add.w	r3, r8, #1
 800d19a:	7013      	strb	r3, [r2, #0]
 800d19c:	e608      	b.n	800cdb0 <_dtoa_r+0x698>
 800d19e:	9b07      	ldr	r3, [sp, #28]
 800d1a0:	9a07      	ldr	r2, [sp, #28]
 800d1a2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d1a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	d028      	beq.n	800d1fe <_dtoa_r+0xae6>
 800d1ac:	4649      	mov	r1, r9
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	220a      	movs	r2, #10
 800d1b2:	4658      	mov	r0, fp
 800d1b4:	f000 f9d6 	bl	800d564 <__multadd>
 800d1b8:	42af      	cmp	r7, r5
 800d1ba:	4681      	mov	r9, r0
 800d1bc:	f04f 0300 	mov.w	r3, #0
 800d1c0:	f04f 020a 	mov.w	r2, #10
 800d1c4:	4639      	mov	r1, r7
 800d1c6:	4658      	mov	r0, fp
 800d1c8:	d107      	bne.n	800d1da <_dtoa_r+0xac2>
 800d1ca:	f000 f9cb 	bl	800d564 <__multadd>
 800d1ce:	4607      	mov	r7, r0
 800d1d0:	4605      	mov	r5, r0
 800d1d2:	9b07      	ldr	r3, [sp, #28]
 800d1d4:	3301      	adds	r3, #1
 800d1d6:	9307      	str	r3, [sp, #28]
 800d1d8:	e774      	b.n	800d0c4 <_dtoa_r+0x9ac>
 800d1da:	f000 f9c3 	bl	800d564 <__multadd>
 800d1de:	4629      	mov	r1, r5
 800d1e0:	4607      	mov	r7, r0
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	220a      	movs	r2, #10
 800d1e6:	4658      	mov	r0, fp
 800d1e8:	f000 f9bc 	bl	800d564 <__multadd>
 800d1ec:	4605      	mov	r5, r0
 800d1ee:	e7f0      	b.n	800d1d2 <_dtoa_r+0xaba>
 800d1f0:	9b00      	ldr	r3, [sp, #0]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	bfcc      	ite	gt
 800d1f6:	461e      	movgt	r6, r3
 800d1f8:	2601      	movle	r6, #1
 800d1fa:	4456      	add	r6, sl
 800d1fc:	2700      	movs	r7, #0
 800d1fe:	4649      	mov	r1, r9
 800d200:	2201      	movs	r2, #1
 800d202:	4658      	mov	r0, fp
 800d204:	f000 fba4 	bl	800d950 <__lshift>
 800d208:	4621      	mov	r1, r4
 800d20a:	4681      	mov	r9, r0
 800d20c:	f000 fc0c 	bl	800da28 <__mcmp>
 800d210:	2800      	cmp	r0, #0
 800d212:	dcb0      	bgt.n	800d176 <_dtoa_r+0xa5e>
 800d214:	d102      	bne.n	800d21c <_dtoa_r+0xb04>
 800d216:	f018 0f01 	tst.w	r8, #1
 800d21a:	d1ac      	bne.n	800d176 <_dtoa_r+0xa5e>
 800d21c:	4633      	mov	r3, r6
 800d21e:	461e      	mov	r6, r3
 800d220:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d224:	2a30      	cmp	r2, #48	@ 0x30
 800d226:	d0fa      	beq.n	800d21e <_dtoa_r+0xb06>
 800d228:	e5c2      	b.n	800cdb0 <_dtoa_r+0x698>
 800d22a:	459a      	cmp	sl, r3
 800d22c:	d1a4      	bne.n	800d178 <_dtoa_r+0xa60>
 800d22e:	9b04      	ldr	r3, [sp, #16]
 800d230:	3301      	adds	r3, #1
 800d232:	9304      	str	r3, [sp, #16]
 800d234:	2331      	movs	r3, #49	@ 0x31
 800d236:	f88a 3000 	strb.w	r3, [sl]
 800d23a:	e5b9      	b.n	800cdb0 <_dtoa_r+0x698>
 800d23c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d23e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d29c <_dtoa_r+0xb84>
 800d242:	b11b      	cbz	r3, 800d24c <_dtoa_r+0xb34>
 800d244:	f10a 0308 	add.w	r3, sl, #8
 800d248:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d24a:	6013      	str	r3, [r2, #0]
 800d24c:	4650      	mov	r0, sl
 800d24e:	b019      	add	sp, #100	@ 0x64
 800d250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d256:	2b01      	cmp	r3, #1
 800d258:	f77f ae37 	ble.w	800ceca <_dtoa_r+0x7b2>
 800d25c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d25e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d260:	2001      	movs	r0, #1
 800d262:	e655      	b.n	800cf10 <_dtoa_r+0x7f8>
 800d264:	9b00      	ldr	r3, [sp, #0]
 800d266:	2b00      	cmp	r3, #0
 800d268:	f77f aed6 	ble.w	800d018 <_dtoa_r+0x900>
 800d26c:	4656      	mov	r6, sl
 800d26e:	4621      	mov	r1, r4
 800d270:	4648      	mov	r0, r9
 800d272:	f7ff f9c9 	bl	800c608 <quorem>
 800d276:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d27a:	f806 8b01 	strb.w	r8, [r6], #1
 800d27e:	9b00      	ldr	r3, [sp, #0]
 800d280:	eba6 020a 	sub.w	r2, r6, sl
 800d284:	4293      	cmp	r3, r2
 800d286:	ddb3      	ble.n	800d1f0 <_dtoa_r+0xad8>
 800d288:	4649      	mov	r1, r9
 800d28a:	2300      	movs	r3, #0
 800d28c:	220a      	movs	r2, #10
 800d28e:	4658      	mov	r0, fp
 800d290:	f000 f968 	bl	800d564 <__multadd>
 800d294:	4681      	mov	r9, r0
 800d296:	e7ea      	b.n	800d26e <_dtoa_r+0xb56>
 800d298:	08012751 	.word	0x08012751
 800d29c:	080126d5 	.word	0x080126d5

0800d2a0 <_free_r>:
 800d2a0:	b538      	push	{r3, r4, r5, lr}
 800d2a2:	4605      	mov	r5, r0
 800d2a4:	2900      	cmp	r1, #0
 800d2a6:	d041      	beq.n	800d32c <_free_r+0x8c>
 800d2a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2ac:	1f0c      	subs	r4, r1, #4
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	bfb8      	it	lt
 800d2b2:	18e4      	addlt	r4, r4, r3
 800d2b4:	f000 f8e8 	bl	800d488 <__malloc_lock>
 800d2b8:	4a1d      	ldr	r2, [pc, #116]	@ (800d330 <_free_r+0x90>)
 800d2ba:	6813      	ldr	r3, [r2, #0]
 800d2bc:	b933      	cbnz	r3, 800d2cc <_free_r+0x2c>
 800d2be:	6063      	str	r3, [r4, #4]
 800d2c0:	6014      	str	r4, [r2, #0]
 800d2c2:	4628      	mov	r0, r5
 800d2c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2c8:	f000 b8e4 	b.w	800d494 <__malloc_unlock>
 800d2cc:	42a3      	cmp	r3, r4
 800d2ce:	d908      	bls.n	800d2e2 <_free_r+0x42>
 800d2d0:	6820      	ldr	r0, [r4, #0]
 800d2d2:	1821      	adds	r1, r4, r0
 800d2d4:	428b      	cmp	r3, r1
 800d2d6:	bf01      	itttt	eq
 800d2d8:	6819      	ldreq	r1, [r3, #0]
 800d2da:	685b      	ldreq	r3, [r3, #4]
 800d2dc:	1809      	addeq	r1, r1, r0
 800d2de:	6021      	streq	r1, [r4, #0]
 800d2e0:	e7ed      	b.n	800d2be <_free_r+0x1e>
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	685b      	ldr	r3, [r3, #4]
 800d2e6:	b10b      	cbz	r3, 800d2ec <_free_r+0x4c>
 800d2e8:	42a3      	cmp	r3, r4
 800d2ea:	d9fa      	bls.n	800d2e2 <_free_r+0x42>
 800d2ec:	6811      	ldr	r1, [r2, #0]
 800d2ee:	1850      	adds	r0, r2, r1
 800d2f0:	42a0      	cmp	r0, r4
 800d2f2:	d10b      	bne.n	800d30c <_free_r+0x6c>
 800d2f4:	6820      	ldr	r0, [r4, #0]
 800d2f6:	4401      	add	r1, r0
 800d2f8:	1850      	adds	r0, r2, r1
 800d2fa:	4283      	cmp	r3, r0
 800d2fc:	6011      	str	r1, [r2, #0]
 800d2fe:	d1e0      	bne.n	800d2c2 <_free_r+0x22>
 800d300:	6818      	ldr	r0, [r3, #0]
 800d302:	685b      	ldr	r3, [r3, #4]
 800d304:	6053      	str	r3, [r2, #4]
 800d306:	4408      	add	r0, r1
 800d308:	6010      	str	r0, [r2, #0]
 800d30a:	e7da      	b.n	800d2c2 <_free_r+0x22>
 800d30c:	d902      	bls.n	800d314 <_free_r+0x74>
 800d30e:	230c      	movs	r3, #12
 800d310:	602b      	str	r3, [r5, #0]
 800d312:	e7d6      	b.n	800d2c2 <_free_r+0x22>
 800d314:	6820      	ldr	r0, [r4, #0]
 800d316:	1821      	adds	r1, r4, r0
 800d318:	428b      	cmp	r3, r1
 800d31a:	bf04      	itt	eq
 800d31c:	6819      	ldreq	r1, [r3, #0]
 800d31e:	685b      	ldreq	r3, [r3, #4]
 800d320:	6063      	str	r3, [r4, #4]
 800d322:	bf04      	itt	eq
 800d324:	1809      	addeq	r1, r1, r0
 800d326:	6021      	streq	r1, [r4, #0]
 800d328:	6054      	str	r4, [r2, #4]
 800d32a:	e7ca      	b.n	800d2c2 <_free_r+0x22>
 800d32c:	bd38      	pop	{r3, r4, r5, pc}
 800d32e:	bf00      	nop
 800d330:	200035cc 	.word	0x200035cc

0800d334 <malloc>:
 800d334:	4b02      	ldr	r3, [pc, #8]	@ (800d340 <malloc+0xc>)
 800d336:	4601      	mov	r1, r0
 800d338:	6818      	ldr	r0, [r3, #0]
 800d33a:	f000 b825 	b.w	800d388 <_malloc_r>
 800d33e:	bf00      	nop
 800d340:	20000024 	.word	0x20000024

0800d344 <sbrk_aligned>:
 800d344:	b570      	push	{r4, r5, r6, lr}
 800d346:	4e0f      	ldr	r6, [pc, #60]	@ (800d384 <sbrk_aligned+0x40>)
 800d348:	460c      	mov	r4, r1
 800d34a:	6831      	ldr	r1, [r6, #0]
 800d34c:	4605      	mov	r5, r0
 800d34e:	b911      	cbnz	r1, 800d356 <sbrk_aligned+0x12>
 800d350:	f001 fdf2 	bl	800ef38 <_sbrk_r>
 800d354:	6030      	str	r0, [r6, #0]
 800d356:	4621      	mov	r1, r4
 800d358:	4628      	mov	r0, r5
 800d35a:	f001 fded 	bl	800ef38 <_sbrk_r>
 800d35e:	1c43      	adds	r3, r0, #1
 800d360:	d103      	bne.n	800d36a <sbrk_aligned+0x26>
 800d362:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d366:	4620      	mov	r0, r4
 800d368:	bd70      	pop	{r4, r5, r6, pc}
 800d36a:	1cc4      	adds	r4, r0, #3
 800d36c:	f024 0403 	bic.w	r4, r4, #3
 800d370:	42a0      	cmp	r0, r4
 800d372:	d0f8      	beq.n	800d366 <sbrk_aligned+0x22>
 800d374:	1a21      	subs	r1, r4, r0
 800d376:	4628      	mov	r0, r5
 800d378:	f001 fdde 	bl	800ef38 <_sbrk_r>
 800d37c:	3001      	adds	r0, #1
 800d37e:	d1f2      	bne.n	800d366 <sbrk_aligned+0x22>
 800d380:	e7ef      	b.n	800d362 <sbrk_aligned+0x1e>
 800d382:	bf00      	nop
 800d384:	200035c8 	.word	0x200035c8

0800d388 <_malloc_r>:
 800d388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d38c:	1ccd      	adds	r5, r1, #3
 800d38e:	f025 0503 	bic.w	r5, r5, #3
 800d392:	3508      	adds	r5, #8
 800d394:	2d0c      	cmp	r5, #12
 800d396:	bf38      	it	cc
 800d398:	250c      	movcc	r5, #12
 800d39a:	2d00      	cmp	r5, #0
 800d39c:	4606      	mov	r6, r0
 800d39e:	db01      	blt.n	800d3a4 <_malloc_r+0x1c>
 800d3a0:	42a9      	cmp	r1, r5
 800d3a2:	d904      	bls.n	800d3ae <_malloc_r+0x26>
 800d3a4:	230c      	movs	r3, #12
 800d3a6:	6033      	str	r3, [r6, #0]
 800d3a8:	2000      	movs	r0, #0
 800d3aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d484 <_malloc_r+0xfc>
 800d3b2:	f000 f869 	bl	800d488 <__malloc_lock>
 800d3b6:	f8d8 3000 	ldr.w	r3, [r8]
 800d3ba:	461c      	mov	r4, r3
 800d3bc:	bb44      	cbnz	r4, 800d410 <_malloc_r+0x88>
 800d3be:	4629      	mov	r1, r5
 800d3c0:	4630      	mov	r0, r6
 800d3c2:	f7ff ffbf 	bl	800d344 <sbrk_aligned>
 800d3c6:	1c43      	adds	r3, r0, #1
 800d3c8:	4604      	mov	r4, r0
 800d3ca:	d158      	bne.n	800d47e <_malloc_r+0xf6>
 800d3cc:	f8d8 4000 	ldr.w	r4, [r8]
 800d3d0:	4627      	mov	r7, r4
 800d3d2:	2f00      	cmp	r7, #0
 800d3d4:	d143      	bne.n	800d45e <_malloc_r+0xd6>
 800d3d6:	2c00      	cmp	r4, #0
 800d3d8:	d04b      	beq.n	800d472 <_malloc_r+0xea>
 800d3da:	6823      	ldr	r3, [r4, #0]
 800d3dc:	4639      	mov	r1, r7
 800d3de:	4630      	mov	r0, r6
 800d3e0:	eb04 0903 	add.w	r9, r4, r3
 800d3e4:	f001 fda8 	bl	800ef38 <_sbrk_r>
 800d3e8:	4581      	cmp	r9, r0
 800d3ea:	d142      	bne.n	800d472 <_malloc_r+0xea>
 800d3ec:	6821      	ldr	r1, [r4, #0]
 800d3ee:	1a6d      	subs	r5, r5, r1
 800d3f0:	4629      	mov	r1, r5
 800d3f2:	4630      	mov	r0, r6
 800d3f4:	f7ff ffa6 	bl	800d344 <sbrk_aligned>
 800d3f8:	3001      	adds	r0, #1
 800d3fa:	d03a      	beq.n	800d472 <_malloc_r+0xea>
 800d3fc:	6823      	ldr	r3, [r4, #0]
 800d3fe:	442b      	add	r3, r5
 800d400:	6023      	str	r3, [r4, #0]
 800d402:	f8d8 3000 	ldr.w	r3, [r8]
 800d406:	685a      	ldr	r2, [r3, #4]
 800d408:	bb62      	cbnz	r2, 800d464 <_malloc_r+0xdc>
 800d40a:	f8c8 7000 	str.w	r7, [r8]
 800d40e:	e00f      	b.n	800d430 <_malloc_r+0xa8>
 800d410:	6822      	ldr	r2, [r4, #0]
 800d412:	1b52      	subs	r2, r2, r5
 800d414:	d420      	bmi.n	800d458 <_malloc_r+0xd0>
 800d416:	2a0b      	cmp	r2, #11
 800d418:	d917      	bls.n	800d44a <_malloc_r+0xc2>
 800d41a:	1961      	adds	r1, r4, r5
 800d41c:	42a3      	cmp	r3, r4
 800d41e:	6025      	str	r5, [r4, #0]
 800d420:	bf18      	it	ne
 800d422:	6059      	strne	r1, [r3, #4]
 800d424:	6863      	ldr	r3, [r4, #4]
 800d426:	bf08      	it	eq
 800d428:	f8c8 1000 	streq.w	r1, [r8]
 800d42c:	5162      	str	r2, [r4, r5]
 800d42e:	604b      	str	r3, [r1, #4]
 800d430:	4630      	mov	r0, r6
 800d432:	f000 f82f 	bl	800d494 <__malloc_unlock>
 800d436:	f104 000b 	add.w	r0, r4, #11
 800d43a:	1d23      	adds	r3, r4, #4
 800d43c:	f020 0007 	bic.w	r0, r0, #7
 800d440:	1ac2      	subs	r2, r0, r3
 800d442:	bf1c      	itt	ne
 800d444:	1a1b      	subne	r3, r3, r0
 800d446:	50a3      	strne	r3, [r4, r2]
 800d448:	e7af      	b.n	800d3aa <_malloc_r+0x22>
 800d44a:	6862      	ldr	r2, [r4, #4]
 800d44c:	42a3      	cmp	r3, r4
 800d44e:	bf0c      	ite	eq
 800d450:	f8c8 2000 	streq.w	r2, [r8]
 800d454:	605a      	strne	r2, [r3, #4]
 800d456:	e7eb      	b.n	800d430 <_malloc_r+0xa8>
 800d458:	4623      	mov	r3, r4
 800d45a:	6864      	ldr	r4, [r4, #4]
 800d45c:	e7ae      	b.n	800d3bc <_malloc_r+0x34>
 800d45e:	463c      	mov	r4, r7
 800d460:	687f      	ldr	r7, [r7, #4]
 800d462:	e7b6      	b.n	800d3d2 <_malloc_r+0x4a>
 800d464:	461a      	mov	r2, r3
 800d466:	685b      	ldr	r3, [r3, #4]
 800d468:	42a3      	cmp	r3, r4
 800d46a:	d1fb      	bne.n	800d464 <_malloc_r+0xdc>
 800d46c:	2300      	movs	r3, #0
 800d46e:	6053      	str	r3, [r2, #4]
 800d470:	e7de      	b.n	800d430 <_malloc_r+0xa8>
 800d472:	230c      	movs	r3, #12
 800d474:	6033      	str	r3, [r6, #0]
 800d476:	4630      	mov	r0, r6
 800d478:	f000 f80c 	bl	800d494 <__malloc_unlock>
 800d47c:	e794      	b.n	800d3a8 <_malloc_r+0x20>
 800d47e:	6005      	str	r5, [r0, #0]
 800d480:	e7d6      	b.n	800d430 <_malloc_r+0xa8>
 800d482:	bf00      	nop
 800d484:	200035cc 	.word	0x200035cc

0800d488 <__malloc_lock>:
 800d488:	4801      	ldr	r0, [pc, #4]	@ (800d490 <__malloc_lock+0x8>)
 800d48a:	f7ff b8a6 	b.w	800c5da <__retarget_lock_acquire_recursive>
 800d48e:	bf00      	nop
 800d490:	200035c4 	.word	0x200035c4

0800d494 <__malloc_unlock>:
 800d494:	4801      	ldr	r0, [pc, #4]	@ (800d49c <__malloc_unlock+0x8>)
 800d496:	f7ff b8a1 	b.w	800c5dc <__retarget_lock_release_recursive>
 800d49a:	bf00      	nop
 800d49c:	200035c4 	.word	0x200035c4

0800d4a0 <_Balloc>:
 800d4a0:	b570      	push	{r4, r5, r6, lr}
 800d4a2:	69c6      	ldr	r6, [r0, #28]
 800d4a4:	4604      	mov	r4, r0
 800d4a6:	460d      	mov	r5, r1
 800d4a8:	b976      	cbnz	r6, 800d4c8 <_Balloc+0x28>
 800d4aa:	2010      	movs	r0, #16
 800d4ac:	f7ff ff42 	bl	800d334 <malloc>
 800d4b0:	4602      	mov	r2, r0
 800d4b2:	61e0      	str	r0, [r4, #28]
 800d4b4:	b920      	cbnz	r0, 800d4c0 <_Balloc+0x20>
 800d4b6:	4b18      	ldr	r3, [pc, #96]	@ (800d518 <_Balloc+0x78>)
 800d4b8:	4818      	ldr	r0, [pc, #96]	@ (800d51c <_Balloc+0x7c>)
 800d4ba:	216b      	movs	r1, #107	@ 0x6b
 800d4bc:	f001 fd54 	bl	800ef68 <__assert_func>
 800d4c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d4c4:	6006      	str	r6, [r0, #0]
 800d4c6:	60c6      	str	r6, [r0, #12]
 800d4c8:	69e6      	ldr	r6, [r4, #28]
 800d4ca:	68f3      	ldr	r3, [r6, #12]
 800d4cc:	b183      	cbz	r3, 800d4f0 <_Balloc+0x50>
 800d4ce:	69e3      	ldr	r3, [r4, #28]
 800d4d0:	68db      	ldr	r3, [r3, #12]
 800d4d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d4d6:	b9b8      	cbnz	r0, 800d508 <_Balloc+0x68>
 800d4d8:	2101      	movs	r1, #1
 800d4da:	fa01 f605 	lsl.w	r6, r1, r5
 800d4de:	1d72      	adds	r2, r6, #5
 800d4e0:	0092      	lsls	r2, r2, #2
 800d4e2:	4620      	mov	r0, r4
 800d4e4:	f001 fd5e 	bl	800efa4 <_calloc_r>
 800d4e8:	b160      	cbz	r0, 800d504 <_Balloc+0x64>
 800d4ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d4ee:	e00e      	b.n	800d50e <_Balloc+0x6e>
 800d4f0:	2221      	movs	r2, #33	@ 0x21
 800d4f2:	2104      	movs	r1, #4
 800d4f4:	4620      	mov	r0, r4
 800d4f6:	f001 fd55 	bl	800efa4 <_calloc_r>
 800d4fa:	69e3      	ldr	r3, [r4, #28]
 800d4fc:	60f0      	str	r0, [r6, #12]
 800d4fe:	68db      	ldr	r3, [r3, #12]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d1e4      	bne.n	800d4ce <_Balloc+0x2e>
 800d504:	2000      	movs	r0, #0
 800d506:	bd70      	pop	{r4, r5, r6, pc}
 800d508:	6802      	ldr	r2, [r0, #0]
 800d50a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d50e:	2300      	movs	r3, #0
 800d510:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d514:	e7f7      	b.n	800d506 <_Balloc+0x66>
 800d516:	bf00      	nop
 800d518:	080126e2 	.word	0x080126e2
 800d51c:	08012762 	.word	0x08012762

0800d520 <_Bfree>:
 800d520:	b570      	push	{r4, r5, r6, lr}
 800d522:	69c6      	ldr	r6, [r0, #28]
 800d524:	4605      	mov	r5, r0
 800d526:	460c      	mov	r4, r1
 800d528:	b976      	cbnz	r6, 800d548 <_Bfree+0x28>
 800d52a:	2010      	movs	r0, #16
 800d52c:	f7ff ff02 	bl	800d334 <malloc>
 800d530:	4602      	mov	r2, r0
 800d532:	61e8      	str	r0, [r5, #28]
 800d534:	b920      	cbnz	r0, 800d540 <_Bfree+0x20>
 800d536:	4b09      	ldr	r3, [pc, #36]	@ (800d55c <_Bfree+0x3c>)
 800d538:	4809      	ldr	r0, [pc, #36]	@ (800d560 <_Bfree+0x40>)
 800d53a:	218f      	movs	r1, #143	@ 0x8f
 800d53c:	f001 fd14 	bl	800ef68 <__assert_func>
 800d540:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d544:	6006      	str	r6, [r0, #0]
 800d546:	60c6      	str	r6, [r0, #12]
 800d548:	b13c      	cbz	r4, 800d55a <_Bfree+0x3a>
 800d54a:	69eb      	ldr	r3, [r5, #28]
 800d54c:	6862      	ldr	r2, [r4, #4]
 800d54e:	68db      	ldr	r3, [r3, #12]
 800d550:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d554:	6021      	str	r1, [r4, #0]
 800d556:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d55a:	bd70      	pop	{r4, r5, r6, pc}
 800d55c:	080126e2 	.word	0x080126e2
 800d560:	08012762 	.word	0x08012762

0800d564 <__multadd>:
 800d564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d568:	690d      	ldr	r5, [r1, #16]
 800d56a:	4607      	mov	r7, r0
 800d56c:	460c      	mov	r4, r1
 800d56e:	461e      	mov	r6, r3
 800d570:	f101 0c14 	add.w	ip, r1, #20
 800d574:	2000      	movs	r0, #0
 800d576:	f8dc 3000 	ldr.w	r3, [ip]
 800d57a:	b299      	uxth	r1, r3
 800d57c:	fb02 6101 	mla	r1, r2, r1, r6
 800d580:	0c1e      	lsrs	r6, r3, #16
 800d582:	0c0b      	lsrs	r3, r1, #16
 800d584:	fb02 3306 	mla	r3, r2, r6, r3
 800d588:	b289      	uxth	r1, r1
 800d58a:	3001      	adds	r0, #1
 800d58c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d590:	4285      	cmp	r5, r0
 800d592:	f84c 1b04 	str.w	r1, [ip], #4
 800d596:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d59a:	dcec      	bgt.n	800d576 <__multadd+0x12>
 800d59c:	b30e      	cbz	r6, 800d5e2 <__multadd+0x7e>
 800d59e:	68a3      	ldr	r3, [r4, #8]
 800d5a0:	42ab      	cmp	r3, r5
 800d5a2:	dc19      	bgt.n	800d5d8 <__multadd+0x74>
 800d5a4:	6861      	ldr	r1, [r4, #4]
 800d5a6:	4638      	mov	r0, r7
 800d5a8:	3101      	adds	r1, #1
 800d5aa:	f7ff ff79 	bl	800d4a0 <_Balloc>
 800d5ae:	4680      	mov	r8, r0
 800d5b0:	b928      	cbnz	r0, 800d5be <__multadd+0x5a>
 800d5b2:	4602      	mov	r2, r0
 800d5b4:	4b0c      	ldr	r3, [pc, #48]	@ (800d5e8 <__multadd+0x84>)
 800d5b6:	480d      	ldr	r0, [pc, #52]	@ (800d5ec <__multadd+0x88>)
 800d5b8:	21ba      	movs	r1, #186	@ 0xba
 800d5ba:	f001 fcd5 	bl	800ef68 <__assert_func>
 800d5be:	6922      	ldr	r2, [r4, #16]
 800d5c0:	3202      	adds	r2, #2
 800d5c2:	f104 010c 	add.w	r1, r4, #12
 800d5c6:	0092      	lsls	r2, r2, #2
 800d5c8:	300c      	adds	r0, #12
 800d5ca:	f7ff f808 	bl	800c5de <memcpy>
 800d5ce:	4621      	mov	r1, r4
 800d5d0:	4638      	mov	r0, r7
 800d5d2:	f7ff ffa5 	bl	800d520 <_Bfree>
 800d5d6:	4644      	mov	r4, r8
 800d5d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d5dc:	3501      	adds	r5, #1
 800d5de:	615e      	str	r6, [r3, #20]
 800d5e0:	6125      	str	r5, [r4, #16]
 800d5e2:	4620      	mov	r0, r4
 800d5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5e8:	08012751 	.word	0x08012751
 800d5ec:	08012762 	.word	0x08012762

0800d5f0 <__s2b>:
 800d5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5f4:	460c      	mov	r4, r1
 800d5f6:	4615      	mov	r5, r2
 800d5f8:	461f      	mov	r7, r3
 800d5fa:	2209      	movs	r2, #9
 800d5fc:	3308      	adds	r3, #8
 800d5fe:	4606      	mov	r6, r0
 800d600:	fb93 f3f2 	sdiv	r3, r3, r2
 800d604:	2100      	movs	r1, #0
 800d606:	2201      	movs	r2, #1
 800d608:	429a      	cmp	r2, r3
 800d60a:	db09      	blt.n	800d620 <__s2b+0x30>
 800d60c:	4630      	mov	r0, r6
 800d60e:	f7ff ff47 	bl	800d4a0 <_Balloc>
 800d612:	b940      	cbnz	r0, 800d626 <__s2b+0x36>
 800d614:	4602      	mov	r2, r0
 800d616:	4b19      	ldr	r3, [pc, #100]	@ (800d67c <__s2b+0x8c>)
 800d618:	4819      	ldr	r0, [pc, #100]	@ (800d680 <__s2b+0x90>)
 800d61a:	21d3      	movs	r1, #211	@ 0xd3
 800d61c:	f001 fca4 	bl	800ef68 <__assert_func>
 800d620:	0052      	lsls	r2, r2, #1
 800d622:	3101      	adds	r1, #1
 800d624:	e7f0      	b.n	800d608 <__s2b+0x18>
 800d626:	9b08      	ldr	r3, [sp, #32]
 800d628:	6143      	str	r3, [r0, #20]
 800d62a:	2d09      	cmp	r5, #9
 800d62c:	f04f 0301 	mov.w	r3, #1
 800d630:	6103      	str	r3, [r0, #16]
 800d632:	dd16      	ble.n	800d662 <__s2b+0x72>
 800d634:	f104 0909 	add.w	r9, r4, #9
 800d638:	46c8      	mov	r8, r9
 800d63a:	442c      	add	r4, r5
 800d63c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d640:	4601      	mov	r1, r0
 800d642:	3b30      	subs	r3, #48	@ 0x30
 800d644:	220a      	movs	r2, #10
 800d646:	4630      	mov	r0, r6
 800d648:	f7ff ff8c 	bl	800d564 <__multadd>
 800d64c:	45a0      	cmp	r8, r4
 800d64e:	d1f5      	bne.n	800d63c <__s2b+0x4c>
 800d650:	f1a5 0408 	sub.w	r4, r5, #8
 800d654:	444c      	add	r4, r9
 800d656:	1b2d      	subs	r5, r5, r4
 800d658:	1963      	adds	r3, r4, r5
 800d65a:	42bb      	cmp	r3, r7
 800d65c:	db04      	blt.n	800d668 <__s2b+0x78>
 800d65e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d662:	340a      	adds	r4, #10
 800d664:	2509      	movs	r5, #9
 800d666:	e7f6      	b.n	800d656 <__s2b+0x66>
 800d668:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d66c:	4601      	mov	r1, r0
 800d66e:	3b30      	subs	r3, #48	@ 0x30
 800d670:	220a      	movs	r2, #10
 800d672:	4630      	mov	r0, r6
 800d674:	f7ff ff76 	bl	800d564 <__multadd>
 800d678:	e7ee      	b.n	800d658 <__s2b+0x68>
 800d67a:	bf00      	nop
 800d67c:	08012751 	.word	0x08012751
 800d680:	08012762 	.word	0x08012762

0800d684 <__hi0bits>:
 800d684:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d688:	4603      	mov	r3, r0
 800d68a:	bf36      	itet	cc
 800d68c:	0403      	lslcc	r3, r0, #16
 800d68e:	2000      	movcs	r0, #0
 800d690:	2010      	movcc	r0, #16
 800d692:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d696:	bf3c      	itt	cc
 800d698:	021b      	lslcc	r3, r3, #8
 800d69a:	3008      	addcc	r0, #8
 800d69c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d6a0:	bf3c      	itt	cc
 800d6a2:	011b      	lslcc	r3, r3, #4
 800d6a4:	3004      	addcc	r0, #4
 800d6a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d6aa:	bf3c      	itt	cc
 800d6ac:	009b      	lslcc	r3, r3, #2
 800d6ae:	3002      	addcc	r0, #2
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	db05      	blt.n	800d6c0 <__hi0bits+0x3c>
 800d6b4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d6b8:	f100 0001 	add.w	r0, r0, #1
 800d6bc:	bf08      	it	eq
 800d6be:	2020      	moveq	r0, #32
 800d6c0:	4770      	bx	lr

0800d6c2 <__lo0bits>:
 800d6c2:	6803      	ldr	r3, [r0, #0]
 800d6c4:	4602      	mov	r2, r0
 800d6c6:	f013 0007 	ands.w	r0, r3, #7
 800d6ca:	d00b      	beq.n	800d6e4 <__lo0bits+0x22>
 800d6cc:	07d9      	lsls	r1, r3, #31
 800d6ce:	d421      	bmi.n	800d714 <__lo0bits+0x52>
 800d6d0:	0798      	lsls	r0, r3, #30
 800d6d2:	bf49      	itett	mi
 800d6d4:	085b      	lsrmi	r3, r3, #1
 800d6d6:	089b      	lsrpl	r3, r3, #2
 800d6d8:	2001      	movmi	r0, #1
 800d6da:	6013      	strmi	r3, [r2, #0]
 800d6dc:	bf5c      	itt	pl
 800d6de:	6013      	strpl	r3, [r2, #0]
 800d6e0:	2002      	movpl	r0, #2
 800d6e2:	4770      	bx	lr
 800d6e4:	b299      	uxth	r1, r3
 800d6e6:	b909      	cbnz	r1, 800d6ec <__lo0bits+0x2a>
 800d6e8:	0c1b      	lsrs	r3, r3, #16
 800d6ea:	2010      	movs	r0, #16
 800d6ec:	b2d9      	uxtb	r1, r3
 800d6ee:	b909      	cbnz	r1, 800d6f4 <__lo0bits+0x32>
 800d6f0:	3008      	adds	r0, #8
 800d6f2:	0a1b      	lsrs	r3, r3, #8
 800d6f4:	0719      	lsls	r1, r3, #28
 800d6f6:	bf04      	itt	eq
 800d6f8:	091b      	lsreq	r3, r3, #4
 800d6fa:	3004      	addeq	r0, #4
 800d6fc:	0799      	lsls	r1, r3, #30
 800d6fe:	bf04      	itt	eq
 800d700:	089b      	lsreq	r3, r3, #2
 800d702:	3002      	addeq	r0, #2
 800d704:	07d9      	lsls	r1, r3, #31
 800d706:	d403      	bmi.n	800d710 <__lo0bits+0x4e>
 800d708:	085b      	lsrs	r3, r3, #1
 800d70a:	f100 0001 	add.w	r0, r0, #1
 800d70e:	d003      	beq.n	800d718 <__lo0bits+0x56>
 800d710:	6013      	str	r3, [r2, #0]
 800d712:	4770      	bx	lr
 800d714:	2000      	movs	r0, #0
 800d716:	4770      	bx	lr
 800d718:	2020      	movs	r0, #32
 800d71a:	4770      	bx	lr

0800d71c <__i2b>:
 800d71c:	b510      	push	{r4, lr}
 800d71e:	460c      	mov	r4, r1
 800d720:	2101      	movs	r1, #1
 800d722:	f7ff febd 	bl	800d4a0 <_Balloc>
 800d726:	4602      	mov	r2, r0
 800d728:	b928      	cbnz	r0, 800d736 <__i2b+0x1a>
 800d72a:	4b05      	ldr	r3, [pc, #20]	@ (800d740 <__i2b+0x24>)
 800d72c:	4805      	ldr	r0, [pc, #20]	@ (800d744 <__i2b+0x28>)
 800d72e:	f240 1145 	movw	r1, #325	@ 0x145
 800d732:	f001 fc19 	bl	800ef68 <__assert_func>
 800d736:	2301      	movs	r3, #1
 800d738:	6144      	str	r4, [r0, #20]
 800d73a:	6103      	str	r3, [r0, #16]
 800d73c:	bd10      	pop	{r4, pc}
 800d73e:	bf00      	nop
 800d740:	08012751 	.word	0x08012751
 800d744:	08012762 	.word	0x08012762

0800d748 <__multiply>:
 800d748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d74c:	4614      	mov	r4, r2
 800d74e:	690a      	ldr	r2, [r1, #16]
 800d750:	6923      	ldr	r3, [r4, #16]
 800d752:	429a      	cmp	r2, r3
 800d754:	bfa8      	it	ge
 800d756:	4623      	movge	r3, r4
 800d758:	460f      	mov	r7, r1
 800d75a:	bfa4      	itt	ge
 800d75c:	460c      	movge	r4, r1
 800d75e:	461f      	movge	r7, r3
 800d760:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d764:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d768:	68a3      	ldr	r3, [r4, #8]
 800d76a:	6861      	ldr	r1, [r4, #4]
 800d76c:	eb0a 0609 	add.w	r6, sl, r9
 800d770:	42b3      	cmp	r3, r6
 800d772:	b085      	sub	sp, #20
 800d774:	bfb8      	it	lt
 800d776:	3101      	addlt	r1, #1
 800d778:	f7ff fe92 	bl	800d4a0 <_Balloc>
 800d77c:	b930      	cbnz	r0, 800d78c <__multiply+0x44>
 800d77e:	4602      	mov	r2, r0
 800d780:	4b44      	ldr	r3, [pc, #272]	@ (800d894 <__multiply+0x14c>)
 800d782:	4845      	ldr	r0, [pc, #276]	@ (800d898 <__multiply+0x150>)
 800d784:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d788:	f001 fbee 	bl	800ef68 <__assert_func>
 800d78c:	f100 0514 	add.w	r5, r0, #20
 800d790:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d794:	462b      	mov	r3, r5
 800d796:	2200      	movs	r2, #0
 800d798:	4543      	cmp	r3, r8
 800d79a:	d321      	bcc.n	800d7e0 <__multiply+0x98>
 800d79c:	f107 0114 	add.w	r1, r7, #20
 800d7a0:	f104 0214 	add.w	r2, r4, #20
 800d7a4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d7a8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d7ac:	9302      	str	r3, [sp, #8]
 800d7ae:	1b13      	subs	r3, r2, r4
 800d7b0:	3b15      	subs	r3, #21
 800d7b2:	f023 0303 	bic.w	r3, r3, #3
 800d7b6:	3304      	adds	r3, #4
 800d7b8:	f104 0715 	add.w	r7, r4, #21
 800d7bc:	42ba      	cmp	r2, r7
 800d7be:	bf38      	it	cc
 800d7c0:	2304      	movcc	r3, #4
 800d7c2:	9301      	str	r3, [sp, #4]
 800d7c4:	9b02      	ldr	r3, [sp, #8]
 800d7c6:	9103      	str	r1, [sp, #12]
 800d7c8:	428b      	cmp	r3, r1
 800d7ca:	d80c      	bhi.n	800d7e6 <__multiply+0x9e>
 800d7cc:	2e00      	cmp	r6, #0
 800d7ce:	dd03      	ble.n	800d7d8 <__multiply+0x90>
 800d7d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d05b      	beq.n	800d890 <__multiply+0x148>
 800d7d8:	6106      	str	r6, [r0, #16]
 800d7da:	b005      	add	sp, #20
 800d7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7e0:	f843 2b04 	str.w	r2, [r3], #4
 800d7e4:	e7d8      	b.n	800d798 <__multiply+0x50>
 800d7e6:	f8b1 a000 	ldrh.w	sl, [r1]
 800d7ea:	f1ba 0f00 	cmp.w	sl, #0
 800d7ee:	d024      	beq.n	800d83a <__multiply+0xf2>
 800d7f0:	f104 0e14 	add.w	lr, r4, #20
 800d7f4:	46a9      	mov	r9, r5
 800d7f6:	f04f 0c00 	mov.w	ip, #0
 800d7fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d7fe:	f8d9 3000 	ldr.w	r3, [r9]
 800d802:	fa1f fb87 	uxth.w	fp, r7
 800d806:	b29b      	uxth	r3, r3
 800d808:	fb0a 330b 	mla	r3, sl, fp, r3
 800d80c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d810:	f8d9 7000 	ldr.w	r7, [r9]
 800d814:	4463      	add	r3, ip
 800d816:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d81a:	fb0a c70b 	mla	r7, sl, fp, ip
 800d81e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d822:	b29b      	uxth	r3, r3
 800d824:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d828:	4572      	cmp	r2, lr
 800d82a:	f849 3b04 	str.w	r3, [r9], #4
 800d82e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d832:	d8e2      	bhi.n	800d7fa <__multiply+0xb2>
 800d834:	9b01      	ldr	r3, [sp, #4]
 800d836:	f845 c003 	str.w	ip, [r5, r3]
 800d83a:	9b03      	ldr	r3, [sp, #12]
 800d83c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d840:	3104      	adds	r1, #4
 800d842:	f1b9 0f00 	cmp.w	r9, #0
 800d846:	d021      	beq.n	800d88c <__multiply+0x144>
 800d848:	682b      	ldr	r3, [r5, #0]
 800d84a:	f104 0c14 	add.w	ip, r4, #20
 800d84e:	46ae      	mov	lr, r5
 800d850:	f04f 0a00 	mov.w	sl, #0
 800d854:	f8bc b000 	ldrh.w	fp, [ip]
 800d858:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d85c:	fb09 770b 	mla	r7, r9, fp, r7
 800d860:	4457      	add	r7, sl
 800d862:	b29b      	uxth	r3, r3
 800d864:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d868:	f84e 3b04 	str.w	r3, [lr], #4
 800d86c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d870:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d874:	f8be 3000 	ldrh.w	r3, [lr]
 800d878:	fb09 330a 	mla	r3, r9, sl, r3
 800d87c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d880:	4562      	cmp	r2, ip
 800d882:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d886:	d8e5      	bhi.n	800d854 <__multiply+0x10c>
 800d888:	9f01      	ldr	r7, [sp, #4]
 800d88a:	51eb      	str	r3, [r5, r7]
 800d88c:	3504      	adds	r5, #4
 800d88e:	e799      	b.n	800d7c4 <__multiply+0x7c>
 800d890:	3e01      	subs	r6, #1
 800d892:	e79b      	b.n	800d7cc <__multiply+0x84>
 800d894:	08012751 	.word	0x08012751
 800d898:	08012762 	.word	0x08012762

0800d89c <__pow5mult>:
 800d89c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8a0:	4615      	mov	r5, r2
 800d8a2:	f012 0203 	ands.w	r2, r2, #3
 800d8a6:	4607      	mov	r7, r0
 800d8a8:	460e      	mov	r6, r1
 800d8aa:	d007      	beq.n	800d8bc <__pow5mult+0x20>
 800d8ac:	4c25      	ldr	r4, [pc, #148]	@ (800d944 <__pow5mult+0xa8>)
 800d8ae:	3a01      	subs	r2, #1
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d8b6:	f7ff fe55 	bl	800d564 <__multadd>
 800d8ba:	4606      	mov	r6, r0
 800d8bc:	10ad      	asrs	r5, r5, #2
 800d8be:	d03d      	beq.n	800d93c <__pow5mult+0xa0>
 800d8c0:	69fc      	ldr	r4, [r7, #28]
 800d8c2:	b97c      	cbnz	r4, 800d8e4 <__pow5mult+0x48>
 800d8c4:	2010      	movs	r0, #16
 800d8c6:	f7ff fd35 	bl	800d334 <malloc>
 800d8ca:	4602      	mov	r2, r0
 800d8cc:	61f8      	str	r0, [r7, #28]
 800d8ce:	b928      	cbnz	r0, 800d8dc <__pow5mult+0x40>
 800d8d0:	4b1d      	ldr	r3, [pc, #116]	@ (800d948 <__pow5mult+0xac>)
 800d8d2:	481e      	ldr	r0, [pc, #120]	@ (800d94c <__pow5mult+0xb0>)
 800d8d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d8d8:	f001 fb46 	bl	800ef68 <__assert_func>
 800d8dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d8e0:	6004      	str	r4, [r0, #0]
 800d8e2:	60c4      	str	r4, [r0, #12]
 800d8e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d8e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d8ec:	b94c      	cbnz	r4, 800d902 <__pow5mult+0x66>
 800d8ee:	f240 2171 	movw	r1, #625	@ 0x271
 800d8f2:	4638      	mov	r0, r7
 800d8f4:	f7ff ff12 	bl	800d71c <__i2b>
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	f8c8 0008 	str.w	r0, [r8, #8]
 800d8fe:	4604      	mov	r4, r0
 800d900:	6003      	str	r3, [r0, #0]
 800d902:	f04f 0900 	mov.w	r9, #0
 800d906:	07eb      	lsls	r3, r5, #31
 800d908:	d50a      	bpl.n	800d920 <__pow5mult+0x84>
 800d90a:	4631      	mov	r1, r6
 800d90c:	4622      	mov	r2, r4
 800d90e:	4638      	mov	r0, r7
 800d910:	f7ff ff1a 	bl	800d748 <__multiply>
 800d914:	4631      	mov	r1, r6
 800d916:	4680      	mov	r8, r0
 800d918:	4638      	mov	r0, r7
 800d91a:	f7ff fe01 	bl	800d520 <_Bfree>
 800d91e:	4646      	mov	r6, r8
 800d920:	106d      	asrs	r5, r5, #1
 800d922:	d00b      	beq.n	800d93c <__pow5mult+0xa0>
 800d924:	6820      	ldr	r0, [r4, #0]
 800d926:	b938      	cbnz	r0, 800d938 <__pow5mult+0x9c>
 800d928:	4622      	mov	r2, r4
 800d92a:	4621      	mov	r1, r4
 800d92c:	4638      	mov	r0, r7
 800d92e:	f7ff ff0b 	bl	800d748 <__multiply>
 800d932:	6020      	str	r0, [r4, #0]
 800d934:	f8c0 9000 	str.w	r9, [r0]
 800d938:	4604      	mov	r4, r0
 800d93a:	e7e4      	b.n	800d906 <__pow5mult+0x6a>
 800d93c:	4630      	mov	r0, r6
 800d93e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d942:	bf00      	nop
 800d944:	080127bc 	.word	0x080127bc
 800d948:	080126e2 	.word	0x080126e2
 800d94c:	08012762 	.word	0x08012762

0800d950 <__lshift>:
 800d950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d954:	460c      	mov	r4, r1
 800d956:	6849      	ldr	r1, [r1, #4]
 800d958:	6923      	ldr	r3, [r4, #16]
 800d95a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d95e:	68a3      	ldr	r3, [r4, #8]
 800d960:	4607      	mov	r7, r0
 800d962:	4691      	mov	r9, r2
 800d964:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d968:	f108 0601 	add.w	r6, r8, #1
 800d96c:	42b3      	cmp	r3, r6
 800d96e:	db0b      	blt.n	800d988 <__lshift+0x38>
 800d970:	4638      	mov	r0, r7
 800d972:	f7ff fd95 	bl	800d4a0 <_Balloc>
 800d976:	4605      	mov	r5, r0
 800d978:	b948      	cbnz	r0, 800d98e <__lshift+0x3e>
 800d97a:	4602      	mov	r2, r0
 800d97c:	4b28      	ldr	r3, [pc, #160]	@ (800da20 <__lshift+0xd0>)
 800d97e:	4829      	ldr	r0, [pc, #164]	@ (800da24 <__lshift+0xd4>)
 800d980:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d984:	f001 faf0 	bl	800ef68 <__assert_func>
 800d988:	3101      	adds	r1, #1
 800d98a:	005b      	lsls	r3, r3, #1
 800d98c:	e7ee      	b.n	800d96c <__lshift+0x1c>
 800d98e:	2300      	movs	r3, #0
 800d990:	f100 0114 	add.w	r1, r0, #20
 800d994:	f100 0210 	add.w	r2, r0, #16
 800d998:	4618      	mov	r0, r3
 800d99a:	4553      	cmp	r3, sl
 800d99c:	db33      	blt.n	800da06 <__lshift+0xb6>
 800d99e:	6920      	ldr	r0, [r4, #16]
 800d9a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d9a4:	f104 0314 	add.w	r3, r4, #20
 800d9a8:	f019 091f 	ands.w	r9, r9, #31
 800d9ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d9b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d9b4:	d02b      	beq.n	800da0e <__lshift+0xbe>
 800d9b6:	f1c9 0e20 	rsb	lr, r9, #32
 800d9ba:	468a      	mov	sl, r1
 800d9bc:	2200      	movs	r2, #0
 800d9be:	6818      	ldr	r0, [r3, #0]
 800d9c0:	fa00 f009 	lsl.w	r0, r0, r9
 800d9c4:	4310      	orrs	r0, r2
 800d9c6:	f84a 0b04 	str.w	r0, [sl], #4
 800d9ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9ce:	459c      	cmp	ip, r3
 800d9d0:	fa22 f20e 	lsr.w	r2, r2, lr
 800d9d4:	d8f3      	bhi.n	800d9be <__lshift+0x6e>
 800d9d6:	ebac 0304 	sub.w	r3, ip, r4
 800d9da:	3b15      	subs	r3, #21
 800d9dc:	f023 0303 	bic.w	r3, r3, #3
 800d9e0:	3304      	adds	r3, #4
 800d9e2:	f104 0015 	add.w	r0, r4, #21
 800d9e6:	4584      	cmp	ip, r0
 800d9e8:	bf38      	it	cc
 800d9ea:	2304      	movcc	r3, #4
 800d9ec:	50ca      	str	r2, [r1, r3]
 800d9ee:	b10a      	cbz	r2, 800d9f4 <__lshift+0xa4>
 800d9f0:	f108 0602 	add.w	r6, r8, #2
 800d9f4:	3e01      	subs	r6, #1
 800d9f6:	4638      	mov	r0, r7
 800d9f8:	612e      	str	r6, [r5, #16]
 800d9fa:	4621      	mov	r1, r4
 800d9fc:	f7ff fd90 	bl	800d520 <_Bfree>
 800da00:	4628      	mov	r0, r5
 800da02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da06:	f842 0f04 	str.w	r0, [r2, #4]!
 800da0a:	3301      	adds	r3, #1
 800da0c:	e7c5      	b.n	800d99a <__lshift+0x4a>
 800da0e:	3904      	subs	r1, #4
 800da10:	f853 2b04 	ldr.w	r2, [r3], #4
 800da14:	f841 2f04 	str.w	r2, [r1, #4]!
 800da18:	459c      	cmp	ip, r3
 800da1a:	d8f9      	bhi.n	800da10 <__lshift+0xc0>
 800da1c:	e7ea      	b.n	800d9f4 <__lshift+0xa4>
 800da1e:	bf00      	nop
 800da20:	08012751 	.word	0x08012751
 800da24:	08012762 	.word	0x08012762

0800da28 <__mcmp>:
 800da28:	690a      	ldr	r2, [r1, #16]
 800da2a:	4603      	mov	r3, r0
 800da2c:	6900      	ldr	r0, [r0, #16]
 800da2e:	1a80      	subs	r0, r0, r2
 800da30:	b530      	push	{r4, r5, lr}
 800da32:	d10e      	bne.n	800da52 <__mcmp+0x2a>
 800da34:	3314      	adds	r3, #20
 800da36:	3114      	adds	r1, #20
 800da38:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800da3c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800da40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800da44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800da48:	4295      	cmp	r5, r2
 800da4a:	d003      	beq.n	800da54 <__mcmp+0x2c>
 800da4c:	d205      	bcs.n	800da5a <__mcmp+0x32>
 800da4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800da52:	bd30      	pop	{r4, r5, pc}
 800da54:	42a3      	cmp	r3, r4
 800da56:	d3f3      	bcc.n	800da40 <__mcmp+0x18>
 800da58:	e7fb      	b.n	800da52 <__mcmp+0x2a>
 800da5a:	2001      	movs	r0, #1
 800da5c:	e7f9      	b.n	800da52 <__mcmp+0x2a>
	...

0800da60 <__mdiff>:
 800da60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da64:	4689      	mov	r9, r1
 800da66:	4606      	mov	r6, r0
 800da68:	4611      	mov	r1, r2
 800da6a:	4648      	mov	r0, r9
 800da6c:	4614      	mov	r4, r2
 800da6e:	f7ff ffdb 	bl	800da28 <__mcmp>
 800da72:	1e05      	subs	r5, r0, #0
 800da74:	d112      	bne.n	800da9c <__mdiff+0x3c>
 800da76:	4629      	mov	r1, r5
 800da78:	4630      	mov	r0, r6
 800da7a:	f7ff fd11 	bl	800d4a0 <_Balloc>
 800da7e:	4602      	mov	r2, r0
 800da80:	b928      	cbnz	r0, 800da8e <__mdiff+0x2e>
 800da82:	4b3f      	ldr	r3, [pc, #252]	@ (800db80 <__mdiff+0x120>)
 800da84:	f240 2137 	movw	r1, #567	@ 0x237
 800da88:	483e      	ldr	r0, [pc, #248]	@ (800db84 <__mdiff+0x124>)
 800da8a:	f001 fa6d 	bl	800ef68 <__assert_func>
 800da8e:	2301      	movs	r3, #1
 800da90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800da94:	4610      	mov	r0, r2
 800da96:	b003      	add	sp, #12
 800da98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da9c:	bfbc      	itt	lt
 800da9e:	464b      	movlt	r3, r9
 800daa0:	46a1      	movlt	r9, r4
 800daa2:	4630      	mov	r0, r6
 800daa4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800daa8:	bfba      	itte	lt
 800daaa:	461c      	movlt	r4, r3
 800daac:	2501      	movlt	r5, #1
 800daae:	2500      	movge	r5, #0
 800dab0:	f7ff fcf6 	bl	800d4a0 <_Balloc>
 800dab4:	4602      	mov	r2, r0
 800dab6:	b918      	cbnz	r0, 800dac0 <__mdiff+0x60>
 800dab8:	4b31      	ldr	r3, [pc, #196]	@ (800db80 <__mdiff+0x120>)
 800daba:	f240 2145 	movw	r1, #581	@ 0x245
 800dabe:	e7e3      	b.n	800da88 <__mdiff+0x28>
 800dac0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dac4:	6926      	ldr	r6, [r4, #16]
 800dac6:	60c5      	str	r5, [r0, #12]
 800dac8:	f109 0310 	add.w	r3, r9, #16
 800dacc:	f109 0514 	add.w	r5, r9, #20
 800dad0:	f104 0e14 	add.w	lr, r4, #20
 800dad4:	f100 0b14 	add.w	fp, r0, #20
 800dad8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dadc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dae0:	9301      	str	r3, [sp, #4]
 800dae2:	46d9      	mov	r9, fp
 800dae4:	f04f 0c00 	mov.w	ip, #0
 800dae8:	9b01      	ldr	r3, [sp, #4]
 800daea:	f85e 0b04 	ldr.w	r0, [lr], #4
 800daee:	f853 af04 	ldr.w	sl, [r3, #4]!
 800daf2:	9301      	str	r3, [sp, #4]
 800daf4:	fa1f f38a 	uxth.w	r3, sl
 800daf8:	4619      	mov	r1, r3
 800dafa:	b283      	uxth	r3, r0
 800dafc:	1acb      	subs	r3, r1, r3
 800dafe:	0c00      	lsrs	r0, r0, #16
 800db00:	4463      	add	r3, ip
 800db02:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800db06:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800db0a:	b29b      	uxth	r3, r3
 800db0c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800db10:	4576      	cmp	r6, lr
 800db12:	f849 3b04 	str.w	r3, [r9], #4
 800db16:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800db1a:	d8e5      	bhi.n	800dae8 <__mdiff+0x88>
 800db1c:	1b33      	subs	r3, r6, r4
 800db1e:	3b15      	subs	r3, #21
 800db20:	f023 0303 	bic.w	r3, r3, #3
 800db24:	3415      	adds	r4, #21
 800db26:	3304      	adds	r3, #4
 800db28:	42a6      	cmp	r6, r4
 800db2a:	bf38      	it	cc
 800db2c:	2304      	movcc	r3, #4
 800db2e:	441d      	add	r5, r3
 800db30:	445b      	add	r3, fp
 800db32:	461e      	mov	r6, r3
 800db34:	462c      	mov	r4, r5
 800db36:	4544      	cmp	r4, r8
 800db38:	d30e      	bcc.n	800db58 <__mdiff+0xf8>
 800db3a:	f108 0103 	add.w	r1, r8, #3
 800db3e:	1b49      	subs	r1, r1, r5
 800db40:	f021 0103 	bic.w	r1, r1, #3
 800db44:	3d03      	subs	r5, #3
 800db46:	45a8      	cmp	r8, r5
 800db48:	bf38      	it	cc
 800db4a:	2100      	movcc	r1, #0
 800db4c:	440b      	add	r3, r1
 800db4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800db52:	b191      	cbz	r1, 800db7a <__mdiff+0x11a>
 800db54:	6117      	str	r7, [r2, #16]
 800db56:	e79d      	b.n	800da94 <__mdiff+0x34>
 800db58:	f854 1b04 	ldr.w	r1, [r4], #4
 800db5c:	46e6      	mov	lr, ip
 800db5e:	0c08      	lsrs	r0, r1, #16
 800db60:	fa1c fc81 	uxtah	ip, ip, r1
 800db64:	4471      	add	r1, lr
 800db66:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800db6a:	b289      	uxth	r1, r1
 800db6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800db70:	f846 1b04 	str.w	r1, [r6], #4
 800db74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800db78:	e7dd      	b.n	800db36 <__mdiff+0xd6>
 800db7a:	3f01      	subs	r7, #1
 800db7c:	e7e7      	b.n	800db4e <__mdiff+0xee>
 800db7e:	bf00      	nop
 800db80:	08012751 	.word	0x08012751
 800db84:	08012762 	.word	0x08012762

0800db88 <__ulp>:
 800db88:	b082      	sub	sp, #8
 800db8a:	ed8d 0b00 	vstr	d0, [sp]
 800db8e:	9a01      	ldr	r2, [sp, #4]
 800db90:	4b0f      	ldr	r3, [pc, #60]	@ (800dbd0 <__ulp+0x48>)
 800db92:	4013      	ands	r3, r2
 800db94:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800db98:	2b00      	cmp	r3, #0
 800db9a:	dc08      	bgt.n	800dbae <__ulp+0x26>
 800db9c:	425b      	negs	r3, r3
 800db9e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800dba2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dba6:	da04      	bge.n	800dbb2 <__ulp+0x2a>
 800dba8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800dbac:	4113      	asrs	r3, r2
 800dbae:	2200      	movs	r2, #0
 800dbb0:	e008      	b.n	800dbc4 <__ulp+0x3c>
 800dbb2:	f1a2 0314 	sub.w	r3, r2, #20
 800dbb6:	2b1e      	cmp	r3, #30
 800dbb8:	bfda      	itte	le
 800dbba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800dbbe:	40da      	lsrle	r2, r3
 800dbc0:	2201      	movgt	r2, #1
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	4610      	mov	r0, r2
 800dbc8:	ec41 0b10 	vmov	d0, r0, r1
 800dbcc:	b002      	add	sp, #8
 800dbce:	4770      	bx	lr
 800dbd0:	7ff00000 	.word	0x7ff00000

0800dbd4 <__b2d>:
 800dbd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbd8:	6906      	ldr	r6, [r0, #16]
 800dbda:	f100 0814 	add.w	r8, r0, #20
 800dbde:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800dbe2:	1f37      	subs	r7, r6, #4
 800dbe4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800dbe8:	4610      	mov	r0, r2
 800dbea:	f7ff fd4b 	bl	800d684 <__hi0bits>
 800dbee:	f1c0 0320 	rsb	r3, r0, #32
 800dbf2:	280a      	cmp	r0, #10
 800dbf4:	600b      	str	r3, [r1, #0]
 800dbf6:	491b      	ldr	r1, [pc, #108]	@ (800dc64 <__b2d+0x90>)
 800dbf8:	dc15      	bgt.n	800dc26 <__b2d+0x52>
 800dbfa:	f1c0 0c0b 	rsb	ip, r0, #11
 800dbfe:	fa22 f30c 	lsr.w	r3, r2, ip
 800dc02:	45b8      	cmp	r8, r7
 800dc04:	ea43 0501 	orr.w	r5, r3, r1
 800dc08:	bf34      	ite	cc
 800dc0a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dc0e:	2300      	movcs	r3, #0
 800dc10:	3015      	adds	r0, #21
 800dc12:	fa02 f000 	lsl.w	r0, r2, r0
 800dc16:	fa23 f30c 	lsr.w	r3, r3, ip
 800dc1a:	4303      	orrs	r3, r0
 800dc1c:	461c      	mov	r4, r3
 800dc1e:	ec45 4b10 	vmov	d0, r4, r5
 800dc22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc26:	45b8      	cmp	r8, r7
 800dc28:	bf3a      	itte	cc
 800dc2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dc2e:	f1a6 0708 	subcc.w	r7, r6, #8
 800dc32:	2300      	movcs	r3, #0
 800dc34:	380b      	subs	r0, #11
 800dc36:	d012      	beq.n	800dc5e <__b2d+0x8a>
 800dc38:	f1c0 0120 	rsb	r1, r0, #32
 800dc3c:	fa23 f401 	lsr.w	r4, r3, r1
 800dc40:	4082      	lsls	r2, r0
 800dc42:	4322      	orrs	r2, r4
 800dc44:	4547      	cmp	r7, r8
 800dc46:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800dc4a:	bf8c      	ite	hi
 800dc4c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800dc50:	2200      	movls	r2, #0
 800dc52:	4083      	lsls	r3, r0
 800dc54:	40ca      	lsrs	r2, r1
 800dc56:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800dc5a:	4313      	orrs	r3, r2
 800dc5c:	e7de      	b.n	800dc1c <__b2d+0x48>
 800dc5e:	ea42 0501 	orr.w	r5, r2, r1
 800dc62:	e7db      	b.n	800dc1c <__b2d+0x48>
 800dc64:	3ff00000 	.word	0x3ff00000

0800dc68 <__d2b>:
 800dc68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dc6c:	460f      	mov	r7, r1
 800dc6e:	2101      	movs	r1, #1
 800dc70:	ec59 8b10 	vmov	r8, r9, d0
 800dc74:	4616      	mov	r6, r2
 800dc76:	f7ff fc13 	bl	800d4a0 <_Balloc>
 800dc7a:	4604      	mov	r4, r0
 800dc7c:	b930      	cbnz	r0, 800dc8c <__d2b+0x24>
 800dc7e:	4602      	mov	r2, r0
 800dc80:	4b23      	ldr	r3, [pc, #140]	@ (800dd10 <__d2b+0xa8>)
 800dc82:	4824      	ldr	r0, [pc, #144]	@ (800dd14 <__d2b+0xac>)
 800dc84:	f240 310f 	movw	r1, #783	@ 0x30f
 800dc88:	f001 f96e 	bl	800ef68 <__assert_func>
 800dc8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dc90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dc94:	b10d      	cbz	r5, 800dc9a <__d2b+0x32>
 800dc96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dc9a:	9301      	str	r3, [sp, #4]
 800dc9c:	f1b8 0300 	subs.w	r3, r8, #0
 800dca0:	d023      	beq.n	800dcea <__d2b+0x82>
 800dca2:	4668      	mov	r0, sp
 800dca4:	9300      	str	r3, [sp, #0]
 800dca6:	f7ff fd0c 	bl	800d6c2 <__lo0bits>
 800dcaa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dcae:	b1d0      	cbz	r0, 800dce6 <__d2b+0x7e>
 800dcb0:	f1c0 0320 	rsb	r3, r0, #32
 800dcb4:	fa02 f303 	lsl.w	r3, r2, r3
 800dcb8:	430b      	orrs	r3, r1
 800dcba:	40c2      	lsrs	r2, r0
 800dcbc:	6163      	str	r3, [r4, #20]
 800dcbe:	9201      	str	r2, [sp, #4]
 800dcc0:	9b01      	ldr	r3, [sp, #4]
 800dcc2:	61a3      	str	r3, [r4, #24]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	bf0c      	ite	eq
 800dcc8:	2201      	moveq	r2, #1
 800dcca:	2202      	movne	r2, #2
 800dccc:	6122      	str	r2, [r4, #16]
 800dcce:	b1a5      	cbz	r5, 800dcfa <__d2b+0x92>
 800dcd0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dcd4:	4405      	add	r5, r0
 800dcd6:	603d      	str	r5, [r7, #0]
 800dcd8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dcdc:	6030      	str	r0, [r6, #0]
 800dcde:	4620      	mov	r0, r4
 800dce0:	b003      	add	sp, #12
 800dce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dce6:	6161      	str	r1, [r4, #20]
 800dce8:	e7ea      	b.n	800dcc0 <__d2b+0x58>
 800dcea:	a801      	add	r0, sp, #4
 800dcec:	f7ff fce9 	bl	800d6c2 <__lo0bits>
 800dcf0:	9b01      	ldr	r3, [sp, #4]
 800dcf2:	6163      	str	r3, [r4, #20]
 800dcf4:	3020      	adds	r0, #32
 800dcf6:	2201      	movs	r2, #1
 800dcf8:	e7e8      	b.n	800dccc <__d2b+0x64>
 800dcfa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dcfe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800dd02:	6038      	str	r0, [r7, #0]
 800dd04:	6918      	ldr	r0, [r3, #16]
 800dd06:	f7ff fcbd 	bl	800d684 <__hi0bits>
 800dd0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dd0e:	e7e5      	b.n	800dcdc <__d2b+0x74>
 800dd10:	08012751 	.word	0x08012751
 800dd14:	08012762 	.word	0x08012762

0800dd18 <__ratio>:
 800dd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd1c:	b085      	sub	sp, #20
 800dd1e:	e9cd 1000 	strd	r1, r0, [sp]
 800dd22:	a902      	add	r1, sp, #8
 800dd24:	f7ff ff56 	bl	800dbd4 <__b2d>
 800dd28:	9800      	ldr	r0, [sp, #0]
 800dd2a:	a903      	add	r1, sp, #12
 800dd2c:	ec55 4b10 	vmov	r4, r5, d0
 800dd30:	f7ff ff50 	bl	800dbd4 <__b2d>
 800dd34:	9b01      	ldr	r3, [sp, #4]
 800dd36:	6919      	ldr	r1, [r3, #16]
 800dd38:	9b00      	ldr	r3, [sp, #0]
 800dd3a:	691b      	ldr	r3, [r3, #16]
 800dd3c:	1ac9      	subs	r1, r1, r3
 800dd3e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800dd42:	1a9b      	subs	r3, r3, r2
 800dd44:	ec5b ab10 	vmov	sl, fp, d0
 800dd48:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	bfce      	itee	gt
 800dd50:	462a      	movgt	r2, r5
 800dd52:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dd56:	465a      	movle	r2, fp
 800dd58:	462f      	mov	r7, r5
 800dd5a:	46d9      	mov	r9, fp
 800dd5c:	bfcc      	ite	gt
 800dd5e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800dd62:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800dd66:	464b      	mov	r3, r9
 800dd68:	4652      	mov	r2, sl
 800dd6a:	4620      	mov	r0, r4
 800dd6c:	4639      	mov	r1, r7
 800dd6e:	f7f2 fd75 	bl	800085c <__aeabi_ddiv>
 800dd72:	ec41 0b10 	vmov	d0, r0, r1
 800dd76:	b005      	add	sp, #20
 800dd78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dd7c <__copybits>:
 800dd7c:	3901      	subs	r1, #1
 800dd7e:	b570      	push	{r4, r5, r6, lr}
 800dd80:	1149      	asrs	r1, r1, #5
 800dd82:	6914      	ldr	r4, [r2, #16]
 800dd84:	3101      	adds	r1, #1
 800dd86:	f102 0314 	add.w	r3, r2, #20
 800dd8a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dd8e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dd92:	1f05      	subs	r5, r0, #4
 800dd94:	42a3      	cmp	r3, r4
 800dd96:	d30c      	bcc.n	800ddb2 <__copybits+0x36>
 800dd98:	1aa3      	subs	r3, r4, r2
 800dd9a:	3b11      	subs	r3, #17
 800dd9c:	f023 0303 	bic.w	r3, r3, #3
 800dda0:	3211      	adds	r2, #17
 800dda2:	42a2      	cmp	r2, r4
 800dda4:	bf88      	it	hi
 800dda6:	2300      	movhi	r3, #0
 800dda8:	4418      	add	r0, r3
 800ddaa:	2300      	movs	r3, #0
 800ddac:	4288      	cmp	r0, r1
 800ddae:	d305      	bcc.n	800ddbc <__copybits+0x40>
 800ddb0:	bd70      	pop	{r4, r5, r6, pc}
 800ddb2:	f853 6b04 	ldr.w	r6, [r3], #4
 800ddb6:	f845 6f04 	str.w	r6, [r5, #4]!
 800ddba:	e7eb      	b.n	800dd94 <__copybits+0x18>
 800ddbc:	f840 3b04 	str.w	r3, [r0], #4
 800ddc0:	e7f4      	b.n	800ddac <__copybits+0x30>

0800ddc2 <__any_on>:
 800ddc2:	f100 0214 	add.w	r2, r0, #20
 800ddc6:	6900      	ldr	r0, [r0, #16]
 800ddc8:	114b      	asrs	r3, r1, #5
 800ddca:	4298      	cmp	r0, r3
 800ddcc:	b510      	push	{r4, lr}
 800ddce:	db11      	blt.n	800ddf4 <__any_on+0x32>
 800ddd0:	dd0a      	ble.n	800dde8 <__any_on+0x26>
 800ddd2:	f011 011f 	ands.w	r1, r1, #31
 800ddd6:	d007      	beq.n	800dde8 <__any_on+0x26>
 800ddd8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dddc:	fa24 f001 	lsr.w	r0, r4, r1
 800dde0:	fa00 f101 	lsl.w	r1, r0, r1
 800dde4:	428c      	cmp	r4, r1
 800dde6:	d10b      	bne.n	800de00 <__any_on+0x3e>
 800dde8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ddec:	4293      	cmp	r3, r2
 800ddee:	d803      	bhi.n	800ddf8 <__any_on+0x36>
 800ddf0:	2000      	movs	r0, #0
 800ddf2:	bd10      	pop	{r4, pc}
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	e7f7      	b.n	800dde8 <__any_on+0x26>
 800ddf8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ddfc:	2900      	cmp	r1, #0
 800ddfe:	d0f5      	beq.n	800ddec <__any_on+0x2a>
 800de00:	2001      	movs	r0, #1
 800de02:	e7f6      	b.n	800ddf2 <__any_on+0x30>

0800de04 <sulp>:
 800de04:	b570      	push	{r4, r5, r6, lr}
 800de06:	4604      	mov	r4, r0
 800de08:	460d      	mov	r5, r1
 800de0a:	ec45 4b10 	vmov	d0, r4, r5
 800de0e:	4616      	mov	r6, r2
 800de10:	f7ff feba 	bl	800db88 <__ulp>
 800de14:	ec51 0b10 	vmov	r0, r1, d0
 800de18:	b17e      	cbz	r6, 800de3a <sulp+0x36>
 800de1a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800de1e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800de22:	2b00      	cmp	r3, #0
 800de24:	dd09      	ble.n	800de3a <sulp+0x36>
 800de26:	051b      	lsls	r3, r3, #20
 800de28:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800de2c:	2400      	movs	r4, #0
 800de2e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800de32:	4622      	mov	r2, r4
 800de34:	462b      	mov	r3, r5
 800de36:	f7f2 fbe7 	bl	8000608 <__aeabi_dmul>
 800de3a:	ec41 0b10 	vmov	d0, r0, r1
 800de3e:	bd70      	pop	{r4, r5, r6, pc}

0800de40 <_strtod_l>:
 800de40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de44:	b09f      	sub	sp, #124	@ 0x7c
 800de46:	460c      	mov	r4, r1
 800de48:	9217      	str	r2, [sp, #92]	@ 0x5c
 800de4a:	2200      	movs	r2, #0
 800de4c:	921a      	str	r2, [sp, #104]	@ 0x68
 800de4e:	9005      	str	r0, [sp, #20]
 800de50:	f04f 0a00 	mov.w	sl, #0
 800de54:	f04f 0b00 	mov.w	fp, #0
 800de58:	460a      	mov	r2, r1
 800de5a:	9219      	str	r2, [sp, #100]	@ 0x64
 800de5c:	7811      	ldrb	r1, [r2, #0]
 800de5e:	292b      	cmp	r1, #43	@ 0x2b
 800de60:	d04a      	beq.n	800def8 <_strtod_l+0xb8>
 800de62:	d838      	bhi.n	800ded6 <_strtod_l+0x96>
 800de64:	290d      	cmp	r1, #13
 800de66:	d832      	bhi.n	800dece <_strtod_l+0x8e>
 800de68:	2908      	cmp	r1, #8
 800de6a:	d832      	bhi.n	800ded2 <_strtod_l+0x92>
 800de6c:	2900      	cmp	r1, #0
 800de6e:	d03b      	beq.n	800dee8 <_strtod_l+0xa8>
 800de70:	2200      	movs	r2, #0
 800de72:	920b      	str	r2, [sp, #44]	@ 0x2c
 800de74:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800de76:	782a      	ldrb	r2, [r5, #0]
 800de78:	2a30      	cmp	r2, #48	@ 0x30
 800de7a:	f040 80b3 	bne.w	800dfe4 <_strtod_l+0x1a4>
 800de7e:	786a      	ldrb	r2, [r5, #1]
 800de80:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800de84:	2a58      	cmp	r2, #88	@ 0x58
 800de86:	d16e      	bne.n	800df66 <_strtod_l+0x126>
 800de88:	9302      	str	r3, [sp, #8]
 800de8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de8c:	9301      	str	r3, [sp, #4]
 800de8e:	ab1a      	add	r3, sp, #104	@ 0x68
 800de90:	9300      	str	r3, [sp, #0]
 800de92:	4a8e      	ldr	r2, [pc, #568]	@ (800e0cc <_strtod_l+0x28c>)
 800de94:	9805      	ldr	r0, [sp, #20]
 800de96:	ab1b      	add	r3, sp, #108	@ 0x6c
 800de98:	a919      	add	r1, sp, #100	@ 0x64
 800de9a:	f001 f8ff 	bl	800f09c <__gethex>
 800de9e:	f010 060f 	ands.w	r6, r0, #15
 800dea2:	4604      	mov	r4, r0
 800dea4:	d005      	beq.n	800deb2 <_strtod_l+0x72>
 800dea6:	2e06      	cmp	r6, #6
 800dea8:	d128      	bne.n	800defc <_strtod_l+0xbc>
 800deaa:	3501      	adds	r5, #1
 800deac:	2300      	movs	r3, #0
 800deae:	9519      	str	r5, [sp, #100]	@ 0x64
 800deb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800deb2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	f040 858e 	bne.w	800e9d6 <_strtod_l+0xb96>
 800deba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800debc:	b1cb      	cbz	r3, 800def2 <_strtod_l+0xb2>
 800debe:	4652      	mov	r2, sl
 800dec0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800dec4:	ec43 2b10 	vmov	d0, r2, r3
 800dec8:	b01f      	add	sp, #124	@ 0x7c
 800deca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dece:	2920      	cmp	r1, #32
 800ded0:	d1ce      	bne.n	800de70 <_strtod_l+0x30>
 800ded2:	3201      	adds	r2, #1
 800ded4:	e7c1      	b.n	800de5a <_strtod_l+0x1a>
 800ded6:	292d      	cmp	r1, #45	@ 0x2d
 800ded8:	d1ca      	bne.n	800de70 <_strtod_l+0x30>
 800deda:	2101      	movs	r1, #1
 800dedc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800dede:	1c51      	adds	r1, r2, #1
 800dee0:	9119      	str	r1, [sp, #100]	@ 0x64
 800dee2:	7852      	ldrb	r2, [r2, #1]
 800dee4:	2a00      	cmp	r2, #0
 800dee6:	d1c5      	bne.n	800de74 <_strtod_l+0x34>
 800dee8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800deea:	9419      	str	r4, [sp, #100]	@ 0x64
 800deec:	2b00      	cmp	r3, #0
 800deee:	f040 8570 	bne.w	800e9d2 <_strtod_l+0xb92>
 800def2:	4652      	mov	r2, sl
 800def4:	465b      	mov	r3, fp
 800def6:	e7e5      	b.n	800dec4 <_strtod_l+0x84>
 800def8:	2100      	movs	r1, #0
 800defa:	e7ef      	b.n	800dedc <_strtod_l+0x9c>
 800defc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800defe:	b13a      	cbz	r2, 800df10 <_strtod_l+0xd0>
 800df00:	2135      	movs	r1, #53	@ 0x35
 800df02:	a81c      	add	r0, sp, #112	@ 0x70
 800df04:	f7ff ff3a 	bl	800dd7c <__copybits>
 800df08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800df0a:	9805      	ldr	r0, [sp, #20]
 800df0c:	f7ff fb08 	bl	800d520 <_Bfree>
 800df10:	3e01      	subs	r6, #1
 800df12:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800df14:	2e04      	cmp	r6, #4
 800df16:	d806      	bhi.n	800df26 <_strtod_l+0xe6>
 800df18:	e8df f006 	tbb	[pc, r6]
 800df1c:	201d0314 	.word	0x201d0314
 800df20:	14          	.byte	0x14
 800df21:	00          	.byte	0x00
 800df22:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800df26:	05e1      	lsls	r1, r4, #23
 800df28:	bf48      	it	mi
 800df2a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800df2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800df32:	0d1b      	lsrs	r3, r3, #20
 800df34:	051b      	lsls	r3, r3, #20
 800df36:	2b00      	cmp	r3, #0
 800df38:	d1bb      	bne.n	800deb2 <_strtod_l+0x72>
 800df3a:	f7fe fb23 	bl	800c584 <__errno>
 800df3e:	2322      	movs	r3, #34	@ 0x22
 800df40:	6003      	str	r3, [r0, #0]
 800df42:	e7b6      	b.n	800deb2 <_strtod_l+0x72>
 800df44:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800df48:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800df4c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800df50:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800df54:	e7e7      	b.n	800df26 <_strtod_l+0xe6>
 800df56:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800e0d4 <_strtod_l+0x294>
 800df5a:	e7e4      	b.n	800df26 <_strtod_l+0xe6>
 800df5c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800df60:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800df64:	e7df      	b.n	800df26 <_strtod_l+0xe6>
 800df66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800df68:	1c5a      	adds	r2, r3, #1
 800df6a:	9219      	str	r2, [sp, #100]	@ 0x64
 800df6c:	785b      	ldrb	r3, [r3, #1]
 800df6e:	2b30      	cmp	r3, #48	@ 0x30
 800df70:	d0f9      	beq.n	800df66 <_strtod_l+0x126>
 800df72:	2b00      	cmp	r3, #0
 800df74:	d09d      	beq.n	800deb2 <_strtod_l+0x72>
 800df76:	2301      	movs	r3, #1
 800df78:	9309      	str	r3, [sp, #36]	@ 0x24
 800df7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800df7c:	930c      	str	r3, [sp, #48]	@ 0x30
 800df7e:	2300      	movs	r3, #0
 800df80:	9308      	str	r3, [sp, #32]
 800df82:	930a      	str	r3, [sp, #40]	@ 0x28
 800df84:	461f      	mov	r7, r3
 800df86:	220a      	movs	r2, #10
 800df88:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800df8a:	7805      	ldrb	r5, [r0, #0]
 800df8c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800df90:	b2d9      	uxtb	r1, r3
 800df92:	2909      	cmp	r1, #9
 800df94:	d928      	bls.n	800dfe8 <_strtod_l+0x1a8>
 800df96:	494e      	ldr	r1, [pc, #312]	@ (800e0d0 <_strtod_l+0x290>)
 800df98:	2201      	movs	r2, #1
 800df9a:	f000 ffbb 	bl	800ef14 <strncmp>
 800df9e:	2800      	cmp	r0, #0
 800dfa0:	d032      	beq.n	800e008 <_strtod_l+0x1c8>
 800dfa2:	2000      	movs	r0, #0
 800dfa4:	462a      	mov	r2, r5
 800dfa6:	4681      	mov	r9, r0
 800dfa8:	463d      	mov	r5, r7
 800dfaa:	4603      	mov	r3, r0
 800dfac:	2a65      	cmp	r2, #101	@ 0x65
 800dfae:	d001      	beq.n	800dfb4 <_strtod_l+0x174>
 800dfb0:	2a45      	cmp	r2, #69	@ 0x45
 800dfb2:	d114      	bne.n	800dfde <_strtod_l+0x19e>
 800dfb4:	b91d      	cbnz	r5, 800dfbe <_strtod_l+0x17e>
 800dfb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dfb8:	4302      	orrs	r2, r0
 800dfba:	d095      	beq.n	800dee8 <_strtod_l+0xa8>
 800dfbc:	2500      	movs	r5, #0
 800dfbe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800dfc0:	1c62      	adds	r2, r4, #1
 800dfc2:	9219      	str	r2, [sp, #100]	@ 0x64
 800dfc4:	7862      	ldrb	r2, [r4, #1]
 800dfc6:	2a2b      	cmp	r2, #43	@ 0x2b
 800dfc8:	d077      	beq.n	800e0ba <_strtod_l+0x27a>
 800dfca:	2a2d      	cmp	r2, #45	@ 0x2d
 800dfcc:	d07b      	beq.n	800e0c6 <_strtod_l+0x286>
 800dfce:	f04f 0c00 	mov.w	ip, #0
 800dfd2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800dfd6:	2909      	cmp	r1, #9
 800dfd8:	f240 8082 	bls.w	800e0e0 <_strtod_l+0x2a0>
 800dfdc:	9419      	str	r4, [sp, #100]	@ 0x64
 800dfde:	f04f 0800 	mov.w	r8, #0
 800dfe2:	e0a2      	b.n	800e12a <_strtod_l+0x2ea>
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	e7c7      	b.n	800df78 <_strtod_l+0x138>
 800dfe8:	2f08      	cmp	r7, #8
 800dfea:	bfd5      	itete	le
 800dfec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800dfee:	9908      	ldrgt	r1, [sp, #32]
 800dff0:	fb02 3301 	mlale	r3, r2, r1, r3
 800dff4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800dff8:	f100 0001 	add.w	r0, r0, #1
 800dffc:	bfd4      	ite	le
 800dffe:	930a      	strle	r3, [sp, #40]	@ 0x28
 800e000:	9308      	strgt	r3, [sp, #32]
 800e002:	3701      	adds	r7, #1
 800e004:	9019      	str	r0, [sp, #100]	@ 0x64
 800e006:	e7bf      	b.n	800df88 <_strtod_l+0x148>
 800e008:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e00a:	1c5a      	adds	r2, r3, #1
 800e00c:	9219      	str	r2, [sp, #100]	@ 0x64
 800e00e:	785a      	ldrb	r2, [r3, #1]
 800e010:	b37f      	cbz	r7, 800e072 <_strtod_l+0x232>
 800e012:	4681      	mov	r9, r0
 800e014:	463d      	mov	r5, r7
 800e016:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e01a:	2b09      	cmp	r3, #9
 800e01c:	d912      	bls.n	800e044 <_strtod_l+0x204>
 800e01e:	2301      	movs	r3, #1
 800e020:	e7c4      	b.n	800dfac <_strtod_l+0x16c>
 800e022:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e024:	1c5a      	adds	r2, r3, #1
 800e026:	9219      	str	r2, [sp, #100]	@ 0x64
 800e028:	785a      	ldrb	r2, [r3, #1]
 800e02a:	3001      	adds	r0, #1
 800e02c:	2a30      	cmp	r2, #48	@ 0x30
 800e02e:	d0f8      	beq.n	800e022 <_strtod_l+0x1e2>
 800e030:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e034:	2b08      	cmp	r3, #8
 800e036:	f200 84d3 	bhi.w	800e9e0 <_strtod_l+0xba0>
 800e03a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e03c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e03e:	4681      	mov	r9, r0
 800e040:	2000      	movs	r0, #0
 800e042:	4605      	mov	r5, r0
 800e044:	3a30      	subs	r2, #48	@ 0x30
 800e046:	f100 0301 	add.w	r3, r0, #1
 800e04a:	d02a      	beq.n	800e0a2 <_strtod_l+0x262>
 800e04c:	4499      	add	r9, r3
 800e04e:	eb00 0c05 	add.w	ip, r0, r5
 800e052:	462b      	mov	r3, r5
 800e054:	210a      	movs	r1, #10
 800e056:	4563      	cmp	r3, ip
 800e058:	d10d      	bne.n	800e076 <_strtod_l+0x236>
 800e05a:	1c69      	adds	r1, r5, #1
 800e05c:	4401      	add	r1, r0
 800e05e:	4428      	add	r0, r5
 800e060:	2808      	cmp	r0, #8
 800e062:	dc16      	bgt.n	800e092 <_strtod_l+0x252>
 800e064:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e066:	230a      	movs	r3, #10
 800e068:	fb03 2300 	mla	r3, r3, r0, r2
 800e06c:	930a      	str	r3, [sp, #40]	@ 0x28
 800e06e:	2300      	movs	r3, #0
 800e070:	e018      	b.n	800e0a4 <_strtod_l+0x264>
 800e072:	4638      	mov	r0, r7
 800e074:	e7da      	b.n	800e02c <_strtod_l+0x1ec>
 800e076:	2b08      	cmp	r3, #8
 800e078:	f103 0301 	add.w	r3, r3, #1
 800e07c:	dc03      	bgt.n	800e086 <_strtod_l+0x246>
 800e07e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e080:	434e      	muls	r6, r1
 800e082:	960a      	str	r6, [sp, #40]	@ 0x28
 800e084:	e7e7      	b.n	800e056 <_strtod_l+0x216>
 800e086:	2b10      	cmp	r3, #16
 800e088:	bfde      	ittt	le
 800e08a:	9e08      	ldrle	r6, [sp, #32]
 800e08c:	434e      	mulle	r6, r1
 800e08e:	9608      	strle	r6, [sp, #32]
 800e090:	e7e1      	b.n	800e056 <_strtod_l+0x216>
 800e092:	280f      	cmp	r0, #15
 800e094:	dceb      	bgt.n	800e06e <_strtod_l+0x22e>
 800e096:	9808      	ldr	r0, [sp, #32]
 800e098:	230a      	movs	r3, #10
 800e09a:	fb03 2300 	mla	r3, r3, r0, r2
 800e09e:	9308      	str	r3, [sp, #32]
 800e0a0:	e7e5      	b.n	800e06e <_strtod_l+0x22e>
 800e0a2:	4629      	mov	r1, r5
 800e0a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e0a6:	1c50      	adds	r0, r2, #1
 800e0a8:	9019      	str	r0, [sp, #100]	@ 0x64
 800e0aa:	7852      	ldrb	r2, [r2, #1]
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	460d      	mov	r5, r1
 800e0b0:	e7b1      	b.n	800e016 <_strtod_l+0x1d6>
 800e0b2:	f04f 0900 	mov.w	r9, #0
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	e77d      	b.n	800dfb6 <_strtod_l+0x176>
 800e0ba:	f04f 0c00 	mov.w	ip, #0
 800e0be:	1ca2      	adds	r2, r4, #2
 800e0c0:	9219      	str	r2, [sp, #100]	@ 0x64
 800e0c2:	78a2      	ldrb	r2, [r4, #2]
 800e0c4:	e785      	b.n	800dfd2 <_strtod_l+0x192>
 800e0c6:	f04f 0c01 	mov.w	ip, #1
 800e0ca:	e7f8      	b.n	800e0be <_strtod_l+0x27e>
 800e0cc:	080128d0 	.word	0x080128d0
 800e0d0:	080128b8 	.word	0x080128b8
 800e0d4:	7ff00000 	.word	0x7ff00000
 800e0d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e0da:	1c51      	adds	r1, r2, #1
 800e0dc:	9119      	str	r1, [sp, #100]	@ 0x64
 800e0de:	7852      	ldrb	r2, [r2, #1]
 800e0e0:	2a30      	cmp	r2, #48	@ 0x30
 800e0e2:	d0f9      	beq.n	800e0d8 <_strtod_l+0x298>
 800e0e4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e0e8:	2908      	cmp	r1, #8
 800e0ea:	f63f af78 	bhi.w	800dfde <_strtod_l+0x19e>
 800e0ee:	3a30      	subs	r2, #48	@ 0x30
 800e0f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800e0f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e0f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e0f6:	f04f 080a 	mov.w	r8, #10
 800e0fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e0fc:	1c56      	adds	r6, r2, #1
 800e0fe:	9619      	str	r6, [sp, #100]	@ 0x64
 800e100:	7852      	ldrb	r2, [r2, #1]
 800e102:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e106:	f1be 0f09 	cmp.w	lr, #9
 800e10a:	d939      	bls.n	800e180 <_strtod_l+0x340>
 800e10c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e10e:	1a76      	subs	r6, r6, r1
 800e110:	2e08      	cmp	r6, #8
 800e112:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e116:	dc03      	bgt.n	800e120 <_strtod_l+0x2e0>
 800e118:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e11a:	4588      	cmp	r8, r1
 800e11c:	bfa8      	it	ge
 800e11e:	4688      	movge	r8, r1
 800e120:	f1bc 0f00 	cmp.w	ip, #0
 800e124:	d001      	beq.n	800e12a <_strtod_l+0x2ea>
 800e126:	f1c8 0800 	rsb	r8, r8, #0
 800e12a:	2d00      	cmp	r5, #0
 800e12c:	d14e      	bne.n	800e1cc <_strtod_l+0x38c>
 800e12e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e130:	4308      	orrs	r0, r1
 800e132:	f47f aebe 	bne.w	800deb2 <_strtod_l+0x72>
 800e136:	2b00      	cmp	r3, #0
 800e138:	f47f aed6 	bne.w	800dee8 <_strtod_l+0xa8>
 800e13c:	2a69      	cmp	r2, #105	@ 0x69
 800e13e:	d028      	beq.n	800e192 <_strtod_l+0x352>
 800e140:	dc25      	bgt.n	800e18e <_strtod_l+0x34e>
 800e142:	2a49      	cmp	r2, #73	@ 0x49
 800e144:	d025      	beq.n	800e192 <_strtod_l+0x352>
 800e146:	2a4e      	cmp	r2, #78	@ 0x4e
 800e148:	f47f aece 	bne.w	800dee8 <_strtod_l+0xa8>
 800e14c:	499b      	ldr	r1, [pc, #620]	@ (800e3bc <_strtod_l+0x57c>)
 800e14e:	a819      	add	r0, sp, #100	@ 0x64
 800e150:	f001 f9c6 	bl	800f4e0 <__match>
 800e154:	2800      	cmp	r0, #0
 800e156:	f43f aec7 	beq.w	800dee8 <_strtod_l+0xa8>
 800e15a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e15c:	781b      	ldrb	r3, [r3, #0]
 800e15e:	2b28      	cmp	r3, #40	@ 0x28
 800e160:	d12e      	bne.n	800e1c0 <_strtod_l+0x380>
 800e162:	4997      	ldr	r1, [pc, #604]	@ (800e3c0 <_strtod_l+0x580>)
 800e164:	aa1c      	add	r2, sp, #112	@ 0x70
 800e166:	a819      	add	r0, sp, #100	@ 0x64
 800e168:	f001 f9ce 	bl	800f508 <__hexnan>
 800e16c:	2805      	cmp	r0, #5
 800e16e:	d127      	bne.n	800e1c0 <_strtod_l+0x380>
 800e170:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e172:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e176:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e17a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e17e:	e698      	b.n	800deb2 <_strtod_l+0x72>
 800e180:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e182:	fb08 2101 	mla	r1, r8, r1, r2
 800e186:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e18a:	920e      	str	r2, [sp, #56]	@ 0x38
 800e18c:	e7b5      	b.n	800e0fa <_strtod_l+0x2ba>
 800e18e:	2a6e      	cmp	r2, #110	@ 0x6e
 800e190:	e7da      	b.n	800e148 <_strtod_l+0x308>
 800e192:	498c      	ldr	r1, [pc, #560]	@ (800e3c4 <_strtod_l+0x584>)
 800e194:	a819      	add	r0, sp, #100	@ 0x64
 800e196:	f001 f9a3 	bl	800f4e0 <__match>
 800e19a:	2800      	cmp	r0, #0
 800e19c:	f43f aea4 	beq.w	800dee8 <_strtod_l+0xa8>
 800e1a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e1a2:	4989      	ldr	r1, [pc, #548]	@ (800e3c8 <_strtod_l+0x588>)
 800e1a4:	3b01      	subs	r3, #1
 800e1a6:	a819      	add	r0, sp, #100	@ 0x64
 800e1a8:	9319      	str	r3, [sp, #100]	@ 0x64
 800e1aa:	f001 f999 	bl	800f4e0 <__match>
 800e1ae:	b910      	cbnz	r0, 800e1b6 <_strtod_l+0x376>
 800e1b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e1b2:	3301      	adds	r3, #1
 800e1b4:	9319      	str	r3, [sp, #100]	@ 0x64
 800e1b6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800e3d8 <_strtod_l+0x598>
 800e1ba:	f04f 0a00 	mov.w	sl, #0
 800e1be:	e678      	b.n	800deb2 <_strtod_l+0x72>
 800e1c0:	4882      	ldr	r0, [pc, #520]	@ (800e3cc <_strtod_l+0x58c>)
 800e1c2:	f000 fec9 	bl	800ef58 <nan>
 800e1c6:	ec5b ab10 	vmov	sl, fp, d0
 800e1ca:	e672      	b.n	800deb2 <_strtod_l+0x72>
 800e1cc:	eba8 0309 	sub.w	r3, r8, r9
 800e1d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e1d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1d4:	2f00      	cmp	r7, #0
 800e1d6:	bf08      	it	eq
 800e1d8:	462f      	moveq	r7, r5
 800e1da:	2d10      	cmp	r5, #16
 800e1dc:	462c      	mov	r4, r5
 800e1de:	bfa8      	it	ge
 800e1e0:	2410      	movge	r4, #16
 800e1e2:	f7f2 f997 	bl	8000514 <__aeabi_ui2d>
 800e1e6:	2d09      	cmp	r5, #9
 800e1e8:	4682      	mov	sl, r0
 800e1ea:	468b      	mov	fp, r1
 800e1ec:	dc13      	bgt.n	800e216 <_strtod_l+0x3d6>
 800e1ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	f43f ae5e 	beq.w	800deb2 <_strtod_l+0x72>
 800e1f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1f8:	dd78      	ble.n	800e2ec <_strtod_l+0x4ac>
 800e1fa:	2b16      	cmp	r3, #22
 800e1fc:	dc5f      	bgt.n	800e2be <_strtod_l+0x47e>
 800e1fe:	4974      	ldr	r1, [pc, #464]	@ (800e3d0 <_strtod_l+0x590>)
 800e200:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e204:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e208:	4652      	mov	r2, sl
 800e20a:	465b      	mov	r3, fp
 800e20c:	f7f2 f9fc 	bl	8000608 <__aeabi_dmul>
 800e210:	4682      	mov	sl, r0
 800e212:	468b      	mov	fp, r1
 800e214:	e64d      	b.n	800deb2 <_strtod_l+0x72>
 800e216:	4b6e      	ldr	r3, [pc, #440]	@ (800e3d0 <_strtod_l+0x590>)
 800e218:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e21c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e220:	f7f2 f9f2 	bl	8000608 <__aeabi_dmul>
 800e224:	4682      	mov	sl, r0
 800e226:	9808      	ldr	r0, [sp, #32]
 800e228:	468b      	mov	fp, r1
 800e22a:	f7f2 f973 	bl	8000514 <__aeabi_ui2d>
 800e22e:	4602      	mov	r2, r0
 800e230:	460b      	mov	r3, r1
 800e232:	4650      	mov	r0, sl
 800e234:	4659      	mov	r1, fp
 800e236:	f7f2 f831 	bl	800029c <__adddf3>
 800e23a:	2d0f      	cmp	r5, #15
 800e23c:	4682      	mov	sl, r0
 800e23e:	468b      	mov	fp, r1
 800e240:	ddd5      	ble.n	800e1ee <_strtod_l+0x3ae>
 800e242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e244:	1b2c      	subs	r4, r5, r4
 800e246:	441c      	add	r4, r3
 800e248:	2c00      	cmp	r4, #0
 800e24a:	f340 8096 	ble.w	800e37a <_strtod_l+0x53a>
 800e24e:	f014 030f 	ands.w	r3, r4, #15
 800e252:	d00a      	beq.n	800e26a <_strtod_l+0x42a>
 800e254:	495e      	ldr	r1, [pc, #376]	@ (800e3d0 <_strtod_l+0x590>)
 800e256:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e25a:	4652      	mov	r2, sl
 800e25c:	465b      	mov	r3, fp
 800e25e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e262:	f7f2 f9d1 	bl	8000608 <__aeabi_dmul>
 800e266:	4682      	mov	sl, r0
 800e268:	468b      	mov	fp, r1
 800e26a:	f034 040f 	bics.w	r4, r4, #15
 800e26e:	d073      	beq.n	800e358 <_strtod_l+0x518>
 800e270:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e274:	dd48      	ble.n	800e308 <_strtod_l+0x4c8>
 800e276:	2400      	movs	r4, #0
 800e278:	46a0      	mov	r8, r4
 800e27a:	940a      	str	r4, [sp, #40]	@ 0x28
 800e27c:	46a1      	mov	r9, r4
 800e27e:	9a05      	ldr	r2, [sp, #20]
 800e280:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e3d8 <_strtod_l+0x598>
 800e284:	2322      	movs	r3, #34	@ 0x22
 800e286:	6013      	str	r3, [r2, #0]
 800e288:	f04f 0a00 	mov.w	sl, #0
 800e28c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e28e:	2b00      	cmp	r3, #0
 800e290:	f43f ae0f 	beq.w	800deb2 <_strtod_l+0x72>
 800e294:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e296:	9805      	ldr	r0, [sp, #20]
 800e298:	f7ff f942 	bl	800d520 <_Bfree>
 800e29c:	9805      	ldr	r0, [sp, #20]
 800e29e:	4649      	mov	r1, r9
 800e2a0:	f7ff f93e 	bl	800d520 <_Bfree>
 800e2a4:	9805      	ldr	r0, [sp, #20]
 800e2a6:	4641      	mov	r1, r8
 800e2a8:	f7ff f93a 	bl	800d520 <_Bfree>
 800e2ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e2ae:	9805      	ldr	r0, [sp, #20]
 800e2b0:	f7ff f936 	bl	800d520 <_Bfree>
 800e2b4:	9805      	ldr	r0, [sp, #20]
 800e2b6:	4621      	mov	r1, r4
 800e2b8:	f7ff f932 	bl	800d520 <_Bfree>
 800e2bc:	e5f9      	b.n	800deb2 <_strtod_l+0x72>
 800e2be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e2c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	dbbc      	blt.n	800e242 <_strtod_l+0x402>
 800e2c8:	4c41      	ldr	r4, [pc, #260]	@ (800e3d0 <_strtod_l+0x590>)
 800e2ca:	f1c5 050f 	rsb	r5, r5, #15
 800e2ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e2d2:	4652      	mov	r2, sl
 800e2d4:	465b      	mov	r3, fp
 800e2d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2da:	f7f2 f995 	bl	8000608 <__aeabi_dmul>
 800e2de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2e0:	1b5d      	subs	r5, r3, r5
 800e2e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e2e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e2ea:	e78f      	b.n	800e20c <_strtod_l+0x3cc>
 800e2ec:	3316      	adds	r3, #22
 800e2ee:	dba8      	blt.n	800e242 <_strtod_l+0x402>
 800e2f0:	4b37      	ldr	r3, [pc, #220]	@ (800e3d0 <_strtod_l+0x590>)
 800e2f2:	eba9 0808 	sub.w	r8, r9, r8
 800e2f6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e2fa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e2fe:	4650      	mov	r0, sl
 800e300:	4659      	mov	r1, fp
 800e302:	f7f2 faab 	bl	800085c <__aeabi_ddiv>
 800e306:	e783      	b.n	800e210 <_strtod_l+0x3d0>
 800e308:	4b32      	ldr	r3, [pc, #200]	@ (800e3d4 <_strtod_l+0x594>)
 800e30a:	9308      	str	r3, [sp, #32]
 800e30c:	2300      	movs	r3, #0
 800e30e:	1124      	asrs	r4, r4, #4
 800e310:	4650      	mov	r0, sl
 800e312:	4659      	mov	r1, fp
 800e314:	461e      	mov	r6, r3
 800e316:	2c01      	cmp	r4, #1
 800e318:	dc21      	bgt.n	800e35e <_strtod_l+0x51e>
 800e31a:	b10b      	cbz	r3, 800e320 <_strtod_l+0x4e0>
 800e31c:	4682      	mov	sl, r0
 800e31e:	468b      	mov	fp, r1
 800e320:	492c      	ldr	r1, [pc, #176]	@ (800e3d4 <_strtod_l+0x594>)
 800e322:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e326:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e32a:	4652      	mov	r2, sl
 800e32c:	465b      	mov	r3, fp
 800e32e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e332:	f7f2 f969 	bl	8000608 <__aeabi_dmul>
 800e336:	4b28      	ldr	r3, [pc, #160]	@ (800e3d8 <_strtod_l+0x598>)
 800e338:	460a      	mov	r2, r1
 800e33a:	400b      	ands	r3, r1
 800e33c:	4927      	ldr	r1, [pc, #156]	@ (800e3dc <_strtod_l+0x59c>)
 800e33e:	428b      	cmp	r3, r1
 800e340:	4682      	mov	sl, r0
 800e342:	d898      	bhi.n	800e276 <_strtod_l+0x436>
 800e344:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e348:	428b      	cmp	r3, r1
 800e34a:	bf86      	itte	hi
 800e34c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800e3e0 <_strtod_l+0x5a0>
 800e350:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800e354:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e358:	2300      	movs	r3, #0
 800e35a:	9308      	str	r3, [sp, #32]
 800e35c:	e07a      	b.n	800e454 <_strtod_l+0x614>
 800e35e:	07e2      	lsls	r2, r4, #31
 800e360:	d505      	bpl.n	800e36e <_strtod_l+0x52e>
 800e362:	9b08      	ldr	r3, [sp, #32]
 800e364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e368:	f7f2 f94e 	bl	8000608 <__aeabi_dmul>
 800e36c:	2301      	movs	r3, #1
 800e36e:	9a08      	ldr	r2, [sp, #32]
 800e370:	3208      	adds	r2, #8
 800e372:	3601      	adds	r6, #1
 800e374:	1064      	asrs	r4, r4, #1
 800e376:	9208      	str	r2, [sp, #32]
 800e378:	e7cd      	b.n	800e316 <_strtod_l+0x4d6>
 800e37a:	d0ed      	beq.n	800e358 <_strtod_l+0x518>
 800e37c:	4264      	negs	r4, r4
 800e37e:	f014 020f 	ands.w	r2, r4, #15
 800e382:	d00a      	beq.n	800e39a <_strtod_l+0x55a>
 800e384:	4b12      	ldr	r3, [pc, #72]	@ (800e3d0 <_strtod_l+0x590>)
 800e386:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e38a:	4650      	mov	r0, sl
 800e38c:	4659      	mov	r1, fp
 800e38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e392:	f7f2 fa63 	bl	800085c <__aeabi_ddiv>
 800e396:	4682      	mov	sl, r0
 800e398:	468b      	mov	fp, r1
 800e39a:	1124      	asrs	r4, r4, #4
 800e39c:	d0dc      	beq.n	800e358 <_strtod_l+0x518>
 800e39e:	2c1f      	cmp	r4, #31
 800e3a0:	dd20      	ble.n	800e3e4 <_strtod_l+0x5a4>
 800e3a2:	2400      	movs	r4, #0
 800e3a4:	46a0      	mov	r8, r4
 800e3a6:	940a      	str	r4, [sp, #40]	@ 0x28
 800e3a8:	46a1      	mov	r9, r4
 800e3aa:	9a05      	ldr	r2, [sp, #20]
 800e3ac:	2322      	movs	r3, #34	@ 0x22
 800e3ae:	f04f 0a00 	mov.w	sl, #0
 800e3b2:	f04f 0b00 	mov.w	fp, #0
 800e3b6:	6013      	str	r3, [r2, #0]
 800e3b8:	e768      	b.n	800e28c <_strtod_l+0x44c>
 800e3ba:	bf00      	nop
 800e3bc:	080126a9 	.word	0x080126a9
 800e3c0:	080128bc 	.word	0x080128bc
 800e3c4:	080126a1 	.word	0x080126a1
 800e3c8:	080126d8 	.word	0x080126d8
 800e3cc:	08012a65 	.word	0x08012a65
 800e3d0:	080127f0 	.word	0x080127f0
 800e3d4:	080127c8 	.word	0x080127c8
 800e3d8:	7ff00000 	.word	0x7ff00000
 800e3dc:	7ca00000 	.word	0x7ca00000
 800e3e0:	7fefffff 	.word	0x7fefffff
 800e3e4:	f014 0310 	ands.w	r3, r4, #16
 800e3e8:	bf18      	it	ne
 800e3ea:	236a      	movne	r3, #106	@ 0x6a
 800e3ec:	4ea9      	ldr	r6, [pc, #676]	@ (800e694 <_strtod_l+0x854>)
 800e3ee:	9308      	str	r3, [sp, #32]
 800e3f0:	4650      	mov	r0, sl
 800e3f2:	4659      	mov	r1, fp
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	07e2      	lsls	r2, r4, #31
 800e3f8:	d504      	bpl.n	800e404 <_strtod_l+0x5c4>
 800e3fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e3fe:	f7f2 f903 	bl	8000608 <__aeabi_dmul>
 800e402:	2301      	movs	r3, #1
 800e404:	1064      	asrs	r4, r4, #1
 800e406:	f106 0608 	add.w	r6, r6, #8
 800e40a:	d1f4      	bne.n	800e3f6 <_strtod_l+0x5b6>
 800e40c:	b10b      	cbz	r3, 800e412 <_strtod_l+0x5d2>
 800e40e:	4682      	mov	sl, r0
 800e410:	468b      	mov	fp, r1
 800e412:	9b08      	ldr	r3, [sp, #32]
 800e414:	b1b3      	cbz	r3, 800e444 <_strtod_l+0x604>
 800e416:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e41a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e41e:	2b00      	cmp	r3, #0
 800e420:	4659      	mov	r1, fp
 800e422:	dd0f      	ble.n	800e444 <_strtod_l+0x604>
 800e424:	2b1f      	cmp	r3, #31
 800e426:	dd55      	ble.n	800e4d4 <_strtod_l+0x694>
 800e428:	2b34      	cmp	r3, #52	@ 0x34
 800e42a:	bfde      	ittt	le
 800e42c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800e430:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e434:	4093      	lslle	r3, r2
 800e436:	f04f 0a00 	mov.w	sl, #0
 800e43a:	bfcc      	ite	gt
 800e43c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e440:	ea03 0b01 	andle.w	fp, r3, r1
 800e444:	2200      	movs	r2, #0
 800e446:	2300      	movs	r3, #0
 800e448:	4650      	mov	r0, sl
 800e44a:	4659      	mov	r1, fp
 800e44c:	f7f2 fb44 	bl	8000ad8 <__aeabi_dcmpeq>
 800e450:	2800      	cmp	r0, #0
 800e452:	d1a6      	bne.n	800e3a2 <_strtod_l+0x562>
 800e454:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e456:	9300      	str	r3, [sp, #0]
 800e458:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e45a:	9805      	ldr	r0, [sp, #20]
 800e45c:	462b      	mov	r3, r5
 800e45e:	463a      	mov	r2, r7
 800e460:	f7ff f8c6 	bl	800d5f0 <__s2b>
 800e464:	900a      	str	r0, [sp, #40]	@ 0x28
 800e466:	2800      	cmp	r0, #0
 800e468:	f43f af05 	beq.w	800e276 <_strtod_l+0x436>
 800e46c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e46e:	2a00      	cmp	r2, #0
 800e470:	eba9 0308 	sub.w	r3, r9, r8
 800e474:	bfa8      	it	ge
 800e476:	2300      	movge	r3, #0
 800e478:	9312      	str	r3, [sp, #72]	@ 0x48
 800e47a:	2400      	movs	r4, #0
 800e47c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e480:	9316      	str	r3, [sp, #88]	@ 0x58
 800e482:	46a0      	mov	r8, r4
 800e484:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e486:	9805      	ldr	r0, [sp, #20]
 800e488:	6859      	ldr	r1, [r3, #4]
 800e48a:	f7ff f809 	bl	800d4a0 <_Balloc>
 800e48e:	4681      	mov	r9, r0
 800e490:	2800      	cmp	r0, #0
 800e492:	f43f aef4 	beq.w	800e27e <_strtod_l+0x43e>
 800e496:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e498:	691a      	ldr	r2, [r3, #16]
 800e49a:	3202      	adds	r2, #2
 800e49c:	f103 010c 	add.w	r1, r3, #12
 800e4a0:	0092      	lsls	r2, r2, #2
 800e4a2:	300c      	adds	r0, #12
 800e4a4:	f7fe f89b 	bl	800c5de <memcpy>
 800e4a8:	ec4b ab10 	vmov	d0, sl, fp
 800e4ac:	9805      	ldr	r0, [sp, #20]
 800e4ae:	aa1c      	add	r2, sp, #112	@ 0x70
 800e4b0:	a91b      	add	r1, sp, #108	@ 0x6c
 800e4b2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e4b6:	f7ff fbd7 	bl	800dc68 <__d2b>
 800e4ba:	901a      	str	r0, [sp, #104]	@ 0x68
 800e4bc:	2800      	cmp	r0, #0
 800e4be:	f43f aede 	beq.w	800e27e <_strtod_l+0x43e>
 800e4c2:	9805      	ldr	r0, [sp, #20]
 800e4c4:	2101      	movs	r1, #1
 800e4c6:	f7ff f929 	bl	800d71c <__i2b>
 800e4ca:	4680      	mov	r8, r0
 800e4cc:	b948      	cbnz	r0, 800e4e2 <_strtod_l+0x6a2>
 800e4ce:	f04f 0800 	mov.w	r8, #0
 800e4d2:	e6d4      	b.n	800e27e <_strtod_l+0x43e>
 800e4d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e4d8:	fa02 f303 	lsl.w	r3, r2, r3
 800e4dc:	ea03 0a0a 	and.w	sl, r3, sl
 800e4e0:	e7b0      	b.n	800e444 <_strtod_l+0x604>
 800e4e2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e4e4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e4e6:	2d00      	cmp	r5, #0
 800e4e8:	bfab      	itete	ge
 800e4ea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e4ec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e4ee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e4f0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e4f2:	bfac      	ite	ge
 800e4f4:	18ef      	addge	r7, r5, r3
 800e4f6:	1b5e      	sublt	r6, r3, r5
 800e4f8:	9b08      	ldr	r3, [sp, #32]
 800e4fa:	1aed      	subs	r5, r5, r3
 800e4fc:	4415      	add	r5, r2
 800e4fe:	4b66      	ldr	r3, [pc, #408]	@ (800e698 <_strtod_l+0x858>)
 800e500:	3d01      	subs	r5, #1
 800e502:	429d      	cmp	r5, r3
 800e504:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e508:	da50      	bge.n	800e5ac <_strtod_l+0x76c>
 800e50a:	1b5b      	subs	r3, r3, r5
 800e50c:	2b1f      	cmp	r3, #31
 800e50e:	eba2 0203 	sub.w	r2, r2, r3
 800e512:	f04f 0101 	mov.w	r1, #1
 800e516:	dc3d      	bgt.n	800e594 <_strtod_l+0x754>
 800e518:	fa01 f303 	lsl.w	r3, r1, r3
 800e51c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e51e:	2300      	movs	r3, #0
 800e520:	9310      	str	r3, [sp, #64]	@ 0x40
 800e522:	18bd      	adds	r5, r7, r2
 800e524:	9b08      	ldr	r3, [sp, #32]
 800e526:	42af      	cmp	r7, r5
 800e528:	4416      	add	r6, r2
 800e52a:	441e      	add	r6, r3
 800e52c:	463b      	mov	r3, r7
 800e52e:	bfa8      	it	ge
 800e530:	462b      	movge	r3, r5
 800e532:	42b3      	cmp	r3, r6
 800e534:	bfa8      	it	ge
 800e536:	4633      	movge	r3, r6
 800e538:	2b00      	cmp	r3, #0
 800e53a:	bfc2      	ittt	gt
 800e53c:	1aed      	subgt	r5, r5, r3
 800e53e:	1af6      	subgt	r6, r6, r3
 800e540:	1aff      	subgt	r7, r7, r3
 800e542:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e544:	2b00      	cmp	r3, #0
 800e546:	dd16      	ble.n	800e576 <_strtod_l+0x736>
 800e548:	4641      	mov	r1, r8
 800e54a:	9805      	ldr	r0, [sp, #20]
 800e54c:	461a      	mov	r2, r3
 800e54e:	f7ff f9a5 	bl	800d89c <__pow5mult>
 800e552:	4680      	mov	r8, r0
 800e554:	2800      	cmp	r0, #0
 800e556:	d0ba      	beq.n	800e4ce <_strtod_l+0x68e>
 800e558:	4601      	mov	r1, r0
 800e55a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e55c:	9805      	ldr	r0, [sp, #20]
 800e55e:	f7ff f8f3 	bl	800d748 <__multiply>
 800e562:	900e      	str	r0, [sp, #56]	@ 0x38
 800e564:	2800      	cmp	r0, #0
 800e566:	f43f ae8a 	beq.w	800e27e <_strtod_l+0x43e>
 800e56a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e56c:	9805      	ldr	r0, [sp, #20]
 800e56e:	f7fe ffd7 	bl	800d520 <_Bfree>
 800e572:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e574:	931a      	str	r3, [sp, #104]	@ 0x68
 800e576:	2d00      	cmp	r5, #0
 800e578:	dc1d      	bgt.n	800e5b6 <_strtod_l+0x776>
 800e57a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	dd23      	ble.n	800e5c8 <_strtod_l+0x788>
 800e580:	4649      	mov	r1, r9
 800e582:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e584:	9805      	ldr	r0, [sp, #20]
 800e586:	f7ff f989 	bl	800d89c <__pow5mult>
 800e58a:	4681      	mov	r9, r0
 800e58c:	b9e0      	cbnz	r0, 800e5c8 <_strtod_l+0x788>
 800e58e:	f04f 0900 	mov.w	r9, #0
 800e592:	e674      	b.n	800e27e <_strtod_l+0x43e>
 800e594:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e598:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e59c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e5a0:	35e2      	adds	r5, #226	@ 0xe2
 800e5a2:	fa01 f305 	lsl.w	r3, r1, r5
 800e5a6:	9310      	str	r3, [sp, #64]	@ 0x40
 800e5a8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e5aa:	e7ba      	b.n	800e522 <_strtod_l+0x6e2>
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	9310      	str	r3, [sp, #64]	@ 0x40
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e5b4:	e7b5      	b.n	800e522 <_strtod_l+0x6e2>
 800e5b6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e5b8:	9805      	ldr	r0, [sp, #20]
 800e5ba:	462a      	mov	r2, r5
 800e5bc:	f7ff f9c8 	bl	800d950 <__lshift>
 800e5c0:	901a      	str	r0, [sp, #104]	@ 0x68
 800e5c2:	2800      	cmp	r0, #0
 800e5c4:	d1d9      	bne.n	800e57a <_strtod_l+0x73a>
 800e5c6:	e65a      	b.n	800e27e <_strtod_l+0x43e>
 800e5c8:	2e00      	cmp	r6, #0
 800e5ca:	dd07      	ble.n	800e5dc <_strtod_l+0x79c>
 800e5cc:	4649      	mov	r1, r9
 800e5ce:	9805      	ldr	r0, [sp, #20]
 800e5d0:	4632      	mov	r2, r6
 800e5d2:	f7ff f9bd 	bl	800d950 <__lshift>
 800e5d6:	4681      	mov	r9, r0
 800e5d8:	2800      	cmp	r0, #0
 800e5da:	d0d8      	beq.n	800e58e <_strtod_l+0x74e>
 800e5dc:	2f00      	cmp	r7, #0
 800e5de:	dd08      	ble.n	800e5f2 <_strtod_l+0x7b2>
 800e5e0:	4641      	mov	r1, r8
 800e5e2:	9805      	ldr	r0, [sp, #20]
 800e5e4:	463a      	mov	r2, r7
 800e5e6:	f7ff f9b3 	bl	800d950 <__lshift>
 800e5ea:	4680      	mov	r8, r0
 800e5ec:	2800      	cmp	r0, #0
 800e5ee:	f43f ae46 	beq.w	800e27e <_strtod_l+0x43e>
 800e5f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e5f4:	9805      	ldr	r0, [sp, #20]
 800e5f6:	464a      	mov	r2, r9
 800e5f8:	f7ff fa32 	bl	800da60 <__mdiff>
 800e5fc:	4604      	mov	r4, r0
 800e5fe:	2800      	cmp	r0, #0
 800e600:	f43f ae3d 	beq.w	800e27e <_strtod_l+0x43e>
 800e604:	68c3      	ldr	r3, [r0, #12]
 800e606:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e608:	2300      	movs	r3, #0
 800e60a:	60c3      	str	r3, [r0, #12]
 800e60c:	4641      	mov	r1, r8
 800e60e:	f7ff fa0b 	bl	800da28 <__mcmp>
 800e612:	2800      	cmp	r0, #0
 800e614:	da46      	bge.n	800e6a4 <_strtod_l+0x864>
 800e616:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e618:	ea53 030a 	orrs.w	r3, r3, sl
 800e61c:	d16c      	bne.n	800e6f8 <_strtod_l+0x8b8>
 800e61e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e622:	2b00      	cmp	r3, #0
 800e624:	d168      	bne.n	800e6f8 <_strtod_l+0x8b8>
 800e626:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e62a:	0d1b      	lsrs	r3, r3, #20
 800e62c:	051b      	lsls	r3, r3, #20
 800e62e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e632:	d961      	bls.n	800e6f8 <_strtod_l+0x8b8>
 800e634:	6963      	ldr	r3, [r4, #20]
 800e636:	b913      	cbnz	r3, 800e63e <_strtod_l+0x7fe>
 800e638:	6923      	ldr	r3, [r4, #16]
 800e63a:	2b01      	cmp	r3, #1
 800e63c:	dd5c      	ble.n	800e6f8 <_strtod_l+0x8b8>
 800e63e:	4621      	mov	r1, r4
 800e640:	2201      	movs	r2, #1
 800e642:	9805      	ldr	r0, [sp, #20]
 800e644:	f7ff f984 	bl	800d950 <__lshift>
 800e648:	4641      	mov	r1, r8
 800e64a:	4604      	mov	r4, r0
 800e64c:	f7ff f9ec 	bl	800da28 <__mcmp>
 800e650:	2800      	cmp	r0, #0
 800e652:	dd51      	ble.n	800e6f8 <_strtod_l+0x8b8>
 800e654:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e658:	9a08      	ldr	r2, [sp, #32]
 800e65a:	0d1b      	lsrs	r3, r3, #20
 800e65c:	051b      	lsls	r3, r3, #20
 800e65e:	2a00      	cmp	r2, #0
 800e660:	d06b      	beq.n	800e73a <_strtod_l+0x8fa>
 800e662:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e666:	d868      	bhi.n	800e73a <_strtod_l+0x8fa>
 800e668:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e66c:	f67f ae9d 	bls.w	800e3aa <_strtod_l+0x56a>
 800e670:	4b0a      	ldr	r3, [pc, #40]	@ (800e69c <_strtod_l+0x85c>)
 800e672:	4650      	mov	r0, sl
 800e674:	4659      	mov	r1, fp
 800e676:	2200      	movs	r2, #0
 800e678:	f7f1 ffc6 	bl	8000608 <__aeabi_dmul>
 800e67c:	4b08      	ldr	r3, [pc, #32]	@ (800e6a0 <_strtod_l+0x860>)
 800e67e:	400b      	ands	r3, r1
 800e680:	4682      	mov	sl, r0
 800e682:	468b      	mov	fp, r1
 800e684:	2b00      	cmp	r3, #0
 800e686:	f47f ae05 	bne.w	800e294 <_strtod_l+0x454>
 800e68a:	9a05      	ldr	r2, [sp, #20]
 800e68c:	2322      	movs	r3, #34	@ 0x22
 800e68e:	6013      	str	r3, [r2, #0]
 800e690:	e600      	b.n	800e294 <_strtod_l+0x454>
 800e692:	bf00      	nop
 800e694:	080128e8 	.word	0x080128e8
 800e698:	fffffc02 	.word	0xfffffc02
 800e69c:	39500000 	.word	0x39500000
 800e6a0:	7ff00000 	.word	0x7ff00000
 800e6a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e6a8:	d165      	bne.n	800e776 <_strtod_l+0x936>
 800e6aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e6ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e6b0:	b35a      	cbz	r2, 800e70a <_strtod_l+0x8ca>
 800e6b2:	4a9f      	ldr	r2, [pc, #636]	@ (800e930 <_strtod_l+0xaf0>)
 800e6b4:	4293      	cmp	r3, r2
 800e6b6:	d12b      	bne.n	800e710 <_strtod_l+0x8d0>
 800e6b8:	9b08      	ldr	r3, [sp, #32]
 800e6ba:	4651      	mov	r1, sl
 800e6bc:	b303      	cbz	r3, 800e700 <_strtod_l+0x8c0>
 800e6be:	4b9d      	ldr	r3, [pc, #628]	@ (800e934 <_strtod_l+0xaf4>)
 800e6c0:	465a      	mov	r2, fp
 800e6c2:	4013      	ands	r3, r2
 800e6c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e6c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e6cc:	d81b      	bhi.n	800e706 <_strtod_l+0x8c6>
 800e6ce:	0d1b      	lsrs	r3, r3, #20
 800e6d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e6d4:	fa02 f303 	lsl.w	r3, r2, r3
 800e6d8:	4299      	cmp	r1, r3
 800e6da:	d119      	bne.n	800e710 <_strtod_l+0x8d0>
 800e6dc:	4b96      	ldr	r3, [pc, #600]	@ (800e938 <_strtod_l+0xaf8>)
 800e6de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d102      	bne.n	800e6ea <_strtod_l+0x8aa>
 800e6e4:	3101      	adds	r1, #1
 800e6e6:	f43f adca 	beq.w	800e27e <_strtod_l+0x43e>
 800e6ea:	4b92      	ldr	r3, [pc, #584]	@ (800e934 <_strtod_l+0xaf4>)
 800e6ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e6ee:	401a      	ands	r2, r3
 800e6f0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e6f4:	f04f 0a00 	mov.w	sl, #0
 800e6f8:	9b08      	ldr	r3, [sp, #32]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d1b8      	bne.n	800e670 <_strtod_l+0x830>
 800e6fe:	e5c9      	b.n	800e294 <_strtod_l+0x454>
 800e700:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e704:	e7e8      	b.n	800e6d8 <_strtod_l+0x898>
 800e706:	4613      	mov	r3, r2
 800e708:	e7e6      	b.n	800e6d8 <_strtod_l+0x898>
 800e70a:	ea53 030a 	orrs.w	r3, r3, sl
 800e70e:	d0a1      	beq.n	800e654 <_strtod_l+0x814>
 800e710:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e712:	b1db      	cbz	r3, 800e74c <_strtod_l+0x90c>
 800e714:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e716:	4213      	tst	r3, r2
 800e718:	d0ee      	beq.n	800e6f8 <_strtod_l+0x8b8>
 800e71a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e71c:	9a08      	ldr	r2, [sp, #32]
 800e71e:	4650      	mov	r0, sl
 800e720:	4659      	mov	r1, fp
 800e722:	b1bb      	cbz	r3, 800e754 <_strtod_l+0x914>
 800e724:	f7ff fb6e 	bl	800de04 <sulp>
 800e728:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e72c:	ec53 2b10 	vmov	r2, r3, d0
 800e730:	f7f1 fdb4 	bl	800029c <__adddf3>
 800e734:	4682      	mov	sl, r0
 800e736:	468b      	mov	fp, r1
 800e738:	e7de      	b.n	800e6f8 <_strtod_l+0x8b8>
 800e73a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e73e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e742:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e746:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800e74a:	e7d5      	b.n	800e6f8 <_strtod_l+0x8b8>
 800e74c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e74e:	ea13 0f0a 	tst.w	r3, sl
 800e752:	e7e1      	b.n	800e718 <_strtod_l+0x8d8>
 800e754:	f7ff fb56 	bl	800de04 <sulp>
 800e758:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e75c:	ec53 2b10 	vmov	r2, r3, d0
 800e760:	f7f1 fd9a 	bl	8000298 <__aeabi_dsub>
 800e764:	2200      	movs	r2, #0
 800e766:	2300      	movs	r3, #0
 800e768:	4682      	mov	sl, r0
 800e76a:	468b      	mov	fp, r1
 800e76c:	f7f2 f9b4 	bl	8000ad8 <__aeabi_dcmpeq>
 800e770:	2800      	cmp	r0, #0
 800e772:	d0c1      	beq.n	800e6f8 <_strtod_l+0x8b8>
 800e774:	e619      	b.n	800e3aa <_strtod_l+0x56a>
 800e776:	4641      	mov	r1, r8
 800e778:	4620      	mov	r0, r4
 800e77a:	f7ff facd 	bl	800dd18 <__ratio>
 800e77e:	ec57 6b10 	vmov	r6, r7, d0
 800e782:	2200      	movs	r2, #0
 800e784:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e788:	4630      	mov	r0, r6
 800e78a:	4639      	mov	r1, r7
 800e78c:	f7f2 f9b8 	bl	8000b00 <__aeabi_dcmple>
 800e790:	2800      	cmp	r0, #0
 800e792:	d06f      	beq.n	800e874 <_strtod_l+0xa34>
 800e794:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e796:	2b00      	cmp	r3, #0
 800e798:	d17a      	bne.n	800e890 <_strtod_l+0xa50>
 800e79a:	f1ba 0f00 	cmp.w	sl, #0
 800e79e:	d158      	bne.n	800e852 <_strtod_l+0xa12>
 800e7a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d15a      	bne.n	800e860 <_strtod_l+0xa20>
 800e7aa:	4b64      	ldr	r3, [pc, #400]	@ (800e93c <_strtod_l+0xafc>)
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	4630      	mov	r0, r6
 800e7b0:	4639      	mov	r1, r7
 800e7b2:	f7f2 f99b 	bl	8000aec <__aeabi_dcmplt>
 800e7b6:	2800      	cmp	r0, #0
 800e7b8:	d159      	bne.n	800e86e <_strtod_l+0xa2e>
 800e7ba:	4630      	mov	r0, r6
 800e7bc:	4639      	mov	r1, r7
 800e7be:	4b60      	ldr	r3, [pc, #384]	@ (800e940 <_strtod_l+0xb00>)
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	f7f1 ff21 	bl	8000608 <__aeabi_dmul>
 800e7c6:	4606      	mov	r6, r0
 800e7c8:	460f      	mov	r7, r1
 800e7ca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e7ce:	9606      	str	r6, [sp, #24]
 800e7d0:	9307      	str	r3, [sp, #28]
 800e7d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e7d6:	4d57      	ldr	r5, [pc, #348]	@ (800e934 <_strtod_l+0xaf4>)
 800e7d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e7dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7de:	401d      	ands	r5, r3
 800e7e0:	4b58      	ldr	r3, [pc, #352]	@ (800e944 <_strtod_l+0xb04>)
 800e7e2:	429d      	cmp	r5, r3
 800e7e4:	f040 80b2 	bne.w	800e94c <_strtod_l+0xb0c>
 800e7e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e7ee:	ec4b ab10 	vmov	d0, sl, fp
 800e7f2:	f7ff f9c9 	bl	800db88 <__ulp>
 800e7f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e7fa:	ec51 0b10 	vmov	r0, r1, d0
 800e7fe:	f7f1 ff03 	bl	8000608 <__aeabi_dmul>
 800e802:	4652      	mov	r2, sl
 800e804:	465b      	mov	r3, fp
 800e806:	f7f1 fd49 	bl	800029c <__adddf3>
 800e80a:	460b      	mov	r3, r1
 800e80c:	4949      	ldr	r1, [pc, #292]	@ (800e934 <_strtod_l+0xaf4>)
 800e80e:	4a4e      	ldr	r2, [pc, #312]	@ (800e948 <_strtod_l+0xb08>)
 800e810:	4019      	ands	r1, r3
 800e812:	4291      	cmp	r1, r2
 800e814:	4682      	mov	sl, r0
 800e816:	d942      	bls.n	800e89e <_strtod_l+0xa5e>
 800e818:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e81a:	4b47      	ldr	r3, [pc, #284]	@ (800e938 <_strtod_l+0xaf8>)
 800e81c:	429a      	cmp	r2, r3
 800e81e:	d103      	bne.n	800e828 <_strtod_l+0x9e8>
 800e820:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e822:	3301      	adds	r3, #1
 800e824:	f43f ad2b 	beq.w	800e27e <_strtod_l+0x43e>
 800e828:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e938 <_strtod_l+0xaf8>
 800e82c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800e830:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e832:	9805      	ldr	r0, [sp, #20]
 800e834:	f7fe fe74 	bl	800d520 <_Bfree>
 800e838:	9805      	ldr	r0, [sp, #20]
 800e83a:	4649      	mov	r1, r9
 800e83c:	f7fe fe70 	bl	800d520 <_Bfree>
 800e840:	9805      	ldr	r0, [sp, #20]
 800e842:	4641      	mov	r1, r8
 800e844:	f7fe fe6c 	bl	800d520 <_Bfree>
 800e848:	9805      	ldr	r0, [sp, #20]
 800e84a:	4621      	mov	r1, r4
 800e84c:	f7fe fe68 	bl	800d520 <_Bfree>
 800e850:	e618      	b.n	800e484 <_strtod_l+0x644>
 800e852:	f1ba 0f01 	cmp.w	sl, #1
 800e856:	d103      	bne.n	800e860 <_strtod_l+0xa20>
 800e858:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	f43f ada5 	beq.w	800e3aa <_strtod_l+0x56a>
 800e860:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e910 <_strtod_l+0xad0>
 800e864:	4f35      	ldr	r7, [pc, #212]	@ (800e93c <_strtod_l+0xafc>)
 800e866:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e86a:	2600      	movs	r6, #0
 800e86c:	e7b1      	b.n	800e7d2 <_strtod_l+0x992>
 800e86e:	4f34      	ldr	r7, [pc, #208]	@ (800e940 <_strtod_l+0xb00>)
 800e870:	2600      	movs	r6, #0
 800e872:	e7aa      	b.n	800e7ca <_strtod_l+0x98a>
 800e874:	4b32      	ldr	r3, [pc, #200]	@ (800e940 <_strtod_l+0xb00>)
 800e876:	4630      	mov	r0, r6
 800e878:	4639      	mov	r1, r7
 800e87a:	2200      	movs	r2, #0
 800e87c:	f7f1 fec4 	bl	8000608 <__aeabi_dmul>
 800e880:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e882:	4606      	mov	r6, r0
 800e884:	460f      	mov	r7, r1
 800e886:	2b00      	cmp	r3, #0
 800e888:	d09f      	beq.n	800e7ca <_strtod_l+0x98a>
 800e88a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e88e:	e7a0      	b.n	800e7d2 <_strtod_l+0x992>
 800e890:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e918 <_strtod_l+0xad8>
 800e894:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e898:	ec57 6b17 	vmov	r6, r7, d7
 800e89c:	e799      	b.n	800e7d2 <_strtod_l+0x992>
 800e89e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e8a2:	9b08      	ldr	r3, [sp, #32]
 800e8a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d1c1      	bne.n	800e830 <_strtod_l+0x9f0>
 800e8ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e8b0:	0d1b      	lsrs	r3, r3, #20
 800e8b2:	051b      	lsls	r3, r3, #20
 800e8b4:	429d      	cmp	r5, r3
 800e8b6:	d1bb      	bne.n	800e830 <_strtod_l+0x9f0>
 800e8b8:	4630      	mov	r0, r6
 800e8ba:	4639      	mov	r1, r7
 800e8bc:	f7f2 f9ec 	bl	8000c98 <__aeabi_d2lz>
 800e8c0:	f7f1 fe74 	bl	80005ac <__aeabi_l2d>
 800e8c4:	4602      	mov	r2, r0
 800e8c6:	460b      	mov	r3, r1
 800e8c8:	4630      	mov	r0, r6
 800e8ca:	4639      	mov	r1, r7
 800e8cc:	f7f1 fce4 	bl	8000298 <__aeabi_dsub>
 800e8d0:	460b      	mov	r3, r1
 800e8d2:	4602      	mov	r2, r0
 800e8d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e8d8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e8dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8de:	ea46 060a 	orr.w	r6, r6, sl
 800e8e2:	431e      	orrs	r6, r3
 800e8e4:	d06f      	beq.n	800e9c6 <_strtod_l+0xb86>
 800e8e6:	a30e      	add	r3, pc, #56	@ (adr r3, 800e920 <_strtod_l+0xae0>)
 800e8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ec:	f7f2 f8fe 	bl	8000aec <__aeabi_dcmplt>
 800e8f0:	2800      	cmp	r0, #0
 800e8f2:	f47f accf 	bne.w	800e294 <_strtod_l+0x454>
 800e8f6:	a30c      	add	r3, pc, #48	@ (adr r3, 800e928 <_strtod_l+0xae8>)
 800e8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e900:	f7f2 f912 	bl	8000b28 <__aeabi_dcmpgt>
 800e904:	2800      	cmp	r0, #0
 800e906:	d093      	beq.n	800e830 <_strtod_l+0x9f0>
 800e908:	e4c4      	b.n	800e294 <_strtod_l+0x454>
 800e90a:	bf00      	nop
 800e90c:	f3af 8000 	nop.w
 800e910:	00000000 	.word	0x00000000
 800e914:	bff00000 	.word	0xbff00000
 800e918:	00000000 	.word	0x00000000
 800e91c:	3ff00000 	.word	0x3ff00000
 800e920:	94a03595 	.word	0x94a03595
 800e924:	3fdfffff 	.word	0x3fdfffff
 800e928:	35afe535 	.word	0x35afe535
 800e92c:	3fe00000 	.word	0x3fe00000
 800e930:	000fffff 	.word	0x000fffff
 800e934:	7ff00000 	.word	0x7ff00000
 800e938:	7fefffff 	.word	0x7fefffff
 800e93c:	3ff00000 	.word	0x3ff00000
 800e940:	3fe00000 	.word	0x3fe00000
 800e944:	7fe00000 	.word	0x7fe00000
 800e948:	7c9fffff 	.word	0x7c9fffff
 800e94c:	9b08      	ldr	r3, [sp, #32]
 800e94e:	b323      	cbz	r3, 800e99a <_strtod_l+0xb5a>
 800e950:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e954:	d821      	bhi.n	800e99a <_strtod_l+0xb5a>
 800e956:	a328      	add	r3, pc, #160	@ (adr r3, 800e9f8 <_strtod_l+0xbb8>)
 800e958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e95c:	4630      	mov	r0, r6
 800e95e:	4639      	mov	r1, r7
 800e960:	f7f2 f8ce 	bl	8000b00 <__aeabi_dcmple>
 800e964:	b1a0      	cbz	r0, 800e990 <_strtod_l+0xb50>
 800e966:	4639      	mov	r1, r7
 800e968:	4630      	mov	r0, r6
 800e96a:	f7f2 f925 	bl	8000bb8 <__aeabi_d2uiz>
 800e96e:	2801      	cmp	r0, #1
 800e970:	bf38      	it	cc
 800e972:	2001      	movcc	r0, #1
 800e974:	f7f1 fdce 	bl	8000514 <__aeabi_ui2d>
 800e978:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e97a:	4606      	mov	r6, r0
 800e97c:	460f      	mov	r7, r1
 800e97e:	b9fb      	cbnz	r3, 800e9c0 <_strtod_l+0xb80>
 800e980:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e984:	9014      	str	r0, [sp, #80]	@ 0x50
 800e986:	9315      	str	r3, [sp, #84]	@ 0x54
 800e988:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e98c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e990:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e992:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e996:	1b5b      	subs	r3, r3, r5
 800e998:	9311      	str	r3, [sp, #68]	@ 0x44
 800e99a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e99e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e9a2:	f7ff f8f1 	bl	800db88 <__ulp>
 800e9a6:	4650      	mov	r0, sl
 800e9a8:	ec53 2b10 	vmov	r2, r3, d0
 800e9ac:	4659      	mov	r1, fp
 800e9ae:	f7f1 fe2b 	bl	8000608 <__aeabi_dmul>
 800e9b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e9b6:	f7f1 fc71 	bl	800029c <__adddf3>
 800e9ba:	4682      	mov	sl, r0
 800e9bc:	468b      	mov	fp, r1
 800e9be:	e770      	b.n	800e8a2 <_strtod_l+0xa62>
 800e9c0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e9c4:	e7e0      	b.n	800e988 <_strtod_l+0xb48>
 800e9c6:	a30e      	add	r3, pc, #56	@ (adr r3, 800ea00 <_strtod_l+0xbc0>)
 800e9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9cc:	f7f2 f88e 	bl	8000aec <__aeabi_dcmplt>
 800e9d0:	e798      	b.n	800e904 <_strtod_l+0xac4>
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e9d6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e9d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e9da:	6013      	str	r3, [r2, #0]
 800e9dc:	f7ff ba6d 	b.w	800deba <_strtod_l+0x7a>
 800e9e0:	2a65      	cmp	r2, #101	@ 0x65
 800e9e2:	f43f ab66 	beq.w	800e0b2 <_strtod_l+0x272>
 800e9e6:	2a45      	cmp	r2, #69	@ 0x45
 800e9e8:	f43f ab63 	beq.w	800e0b2 <_strtod_l+0x272>
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	f7ff bb9e 	b.w	800e12e <_strtod_l+0x2ee>
 800e9f2:	bf00      	nop
 800e9f4:	f3af 8000 	nop.w
 800e9f8:	ffc00000 	.word	0xffc00000
 800e9fc:	41dfffff 	.word	0x41dfffff
 800ea00:	94a03595 	.word	0x94a03595
 800ea04:	3fcfffff 	.word	0x3fcfffff

0800ea08 <_strtod_r>:
 800ea08:	4b01      	ldr	r3, [pc, #4]	@ (800ea10 <_strtod_r+0x8>)
 800ea0a:	f7ff ba19 	b.w	800de40 <_strtod_l>
 800ea0e:	bf00      	nop
 800ea10:	20000074 	.word	0x20000074

0800ea14 <_strtol_l.constprop.0>:
 800ea14:	2b24      	cmp	r3, #36	@ 0x24
 800ea16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea1a:	4686      	mov	lr, r0
 800ea1c:	4690      	mov	r8, r2
 800ea1e:	d801      	bhi.n	800ea24 <_strtol_l.constprop.0+0x10>
 800ea20:	2b01      	cmp	r3, #1
 800ea22:	d106      	bne.n	800ea32 <_strtol_l.constprop.0+0x1e>
 800ea24:	f7fd fdae 	bl	800c584 <__errno>
 800ea28:	2316      	movs	r3, #22
 800ea2a:	6003      	str	r3, [r0, #0]
 800ea2c:	2000      	movs	r0, #0
 800ea2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea32:	4834      	ldr	r0, [pc, #208]	@ (800eb04 <_strtol_l.constprop.0+0xf0>)
 800ea34:	460d      	mov	r5, r1
 800ea36:	462a      	mov	r2, r5
 800ea38:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ea3c:	5d06      	ldrb	r6, [r0, r4]
 800ea3e:	f016 0608 	ands.w	r6, r6, #8
 800ea42:	d1f8      	bne.n	800ea36 <_strtol_l.constprop.0+0x22>
 800ea44:	2c2d      	cmp	r4, #45	@ 0x2d
 800ea46:	d12d      	bne.n	800eaa4 <_strtol_l.constprop.0+0x90>
 800ea48:	782c      	ldrb	r4, [r5, #0]
 800ea4a:	2601      	movs	r6, #1
 800ea4c:	1c95      	adds	r5, r2, #2
 800ea4e:	f033 0210 	bics.w	r2, r3, #16
 800ea52:	d109      	bne.n	800ea68 <_strtol_l.constprop.0+0x54>
 800ea54:	2c30      	cmp	r4, #48	@ 0x30
 800ea56:	d12a      	bne.n	800eaae <_strtol_l.constprop.0+0x9a>
 800ea58:	782a      	ldrb	r2, [r5, #0]
 800ea5a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ea5e:	2a58      	cmp	r2, #88	@ 0x58
 800ea60:	d125      	bne.n	800eaae <_strtol_l.constprop.0+0x9a>
 800ea62:	786c      	ldrb	r4, [r5, #1]
 800ea64:	2310      	movs	r3, #16
 800ea66:	3502      	adds	r5, #2
 800ea68:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ea6c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800ea70:	2200      	movs	r2, #0
 800ea72:	fbbc f9f3 	udiv	r9, ip, r3
 800ea76:	4610      	mov	r0, r2
 800ea78:	fb03 ca19 	mls	sl, r3, r9, ip
 800ea7c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ea80:	2f09      	cmp	r7, #9
 800ea82:	d81b      	bhi.n	800eabc <_strtol_l.constprop.0+0xa8>
 800ea84:	463c      	mov	r4, r7
 800ea86:	42a3      	cmp	r3, r4
 800ea88:	dd27      	ble.n	800eada <_strtol_l.constprop.0+0xc6>
 800ea8a:	1c57      	adds	r7, r2, #1
 800ea8c:	d007      	beq.n	800ea9e <_strtol_l.constprop.0+0x8a>
 800ea8e:	4581      	cmp	r9, r0
 800ea90:	d320      	bcc.n	800ead4 <_strtol_l.constprop.0+0xc0>
 800ea92:	d101      	bne.n	800ea98 <_strtol_l.constprop.0+0x84>
 800ea94:	45a2      	cmp	sl, r4
 800ea96:	db1d      	blt.n	800ead4 <_strtol_l.constprop.0+0xc0>
 800ea98:	fb00 4003 	mla	r0, r0, r3, r4
 800ea9c:	2201      	movs	r2, #1
 800ea9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eaa2:	e7eb      	b.n	800ea7c <_strtol_l.constprop.0+0x68>
 800eaa4:	2c2b      	cmp	r4, #43	@ 0x2b
 800eaa6:	bf04      	itt	eq
 800eaa8:	782c      	ldrbeq	r4, [r5, #0]
 800eaaa:	1c95      	addeq	r5, r2, #2
 800eaac:	e7cf      	b.n	800ea4e <_strtol_l.constprop.0+0x3a>
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d1da      	bne.n	800ea68 <_strtol_l.constprop.0+0x54>
 800eab2:	2c30      	cmp	r4, #48	@ 0x30
 800eab4:	bf0c      	ite	eq
 800eab6:	2308      	moveq	r3, #8
 800eab8:	230a      	movne	r3, #10
 800eaba:	e7d5      	b.n	800ea68 <_strtol_l.constprop.0+0x54>
 800eabc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800eac0:	2f19      	cmp	r7, #25
 800eac2:	d801      	bhi.n	800eac8 <_strtol_l.constprop.0+0xb4>
 800eac4:	3c37      	subs	r4, #55	@ 0x37
 800eac6:	e7de      	b.n	800ea86 <_strtol_l.constprop.0+0x72>
 800eac8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800eacc:	2f19      	cmp	r7, #25
 800eace:	d804      	bhi.n	800eada <_strtol_l.constprop.0+0xc6>
 800ead0:	3c57      	subs	r4, #87	@ 0x57
 800ead2:	e7d8      	b.n	800ea86 <_strtol_l.constprop.0+0x72>
 800ead4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ead8:	e7e1      	b.n	800ea9e <_strtol_l.constprop.0+0x8a>
 800eada:	1c53      	adds	r3, r2, #1
 800eadc:	d108      	bne.n	800eaf0 <_strtol_l.constprop.0+0xdc>
 800eade:	2322      	movs	r3, #34	@ 0x22
 800eae0:	f8ce 3000 	str.w	r3, [lr]
 800eae4:	4660      	mov	r0, ip
 800eae6:	f1b8 0f00 	cmp.w	r8, #0
 800eaea:	d0a0      	beq.n	800ea2e <_strtol_l.constprop.0+0x1a>
 800eaec:	1e69      	subs	r1, r5, #1
 800eaee:	e006      	b.n	800eafe <_strtol_l.constprop.0+0xea>
 800eaf0:	b106      	cbz	r6, 800eaf4 <_strtol_l.constprop.0+0xe0>
 800eaf2:	4240      	negs	r0, r0
 800eaf4:	f1b8 0f00 	cmp.w	r8, #0
 800eaf8:	d099      	beq.n	800ea2e <_strtol_l.constprop.0+0x1a>
 800eafa:	2a00      	cmp	r2, #0
 800eafc:	d1f6      	bne.n	800eaec <_strtol_l.constprop.0+0xd8>
 800eafe:	f8c8 1000 	str.w	r1, [r8]
 800eb02:	e794      	b.n	800ea2e <_strtol_l.constprop.0+0x1a>
 800eb04:	08012911 	.word	0x08012911

0800eb08 <_strtol_r>:
 800eb08:	f7ff bf84 	b.w	800ea14 <_strtol_l.constprop.0>

0800eb0c <__ssputs_r>:
 800eb0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb10:	688e      	ldr	r6, [r1, #8]
 800eb12:	461f      	mov	r7, r3
 800eb14:	42be      	cmp	r6, r7
 800eb16:	680b      	ldr	r3, [r1, #0]
 800eb18:	4682      	mov	sl, r0
 800eb1a:	460c      	mov	r4, r1
 800eb1c:	4690      	mov	r8, r2
 800eb1e:	d82d      	bhi.n	800eb7c <__ssputs_r+0x70>
 800eb20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eb24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800eb28:	d026      	beq.n	800eb78 <__ssputs_r+0x6c>
 800eb2a:	6965      	ldr	r5, [r4, #20]
 800eb2c:	6909      	ldr	r1, [r1, #16]
 800eb2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eb32:	eba3 0901 	sub.w	r9, r3, r1
 800eb36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eb3a:	1c7b      	adds	r3, r7, #1
 800eb3c:	444b      	add	r3, r9
 800eb3e:	106d      	asrs	r5, r5, #1
 800eb40:	429d      	cmp	r5, r3
 800eb42:	bf38      	it	cc
 800eb44:	461d      	movcc	r5, r3
 800eb46:	0553      	lsls	r3, r2, #21
 800eb48:	d527      	bpl.n	800eb9a <__ssputs_r+0x8e>
 800eb4a:	4629      	mov	r1, r5
 800eb4c:	f7fe fc1c 	bl	800d388 <_malloc_r>
 800eb50:	4606      	mov	r6, r0
 800eb52:	b360      	cbz	r0, 800ebae <__ssputs_r+0xa2>
 800eb54:	6921      	ldr	r1, [r4, #16]
 800eb56:	464a      	mov	r2, r9
 800eb58:	f7fd fd41 	bl	800c5de <memcpy>
 800eb5c:	89a3      	ldrh	r3, [r4, #12]
 800eb5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800eb62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb66:	81a3      	strh	r3, [r4, #12]
 800eb68:	6126      	str	r6, [r4, #16]
 800eb6a:	6165      	str	r5, [r4, #20]
 800eb6c:	444e      	add	r6, r9
 800eb6e:	eba5 0509 	sub.w	r5, r5, r9
 800eb72:	6026      	str	r6, [r4, #0]
 800eb74:	60a5      	str	r5, [r4, #8]
 800eb76:	463e      	mov	r6, r7
 800eb78:	42be      	cmp	r6, r7
 800eb7a:	d900      	bls.n	800eb7e <__ssputs_r+0x72>
 800eb7c:	463e      	mov	r6, r7
 800eb7e:	6820      	ldr	r0, [r4, #0]
 800eb80:	4632      	mov	r2, r6
 800eb82:	4641      	mov	r1, r8
 800eb84:	f7fd fc3b 	bl	800c3fe <memmove>
 800eb88:	68a3      	ldr	r3, [r4, #8]
 800eb8a:	1b9b      	subs	r3, r3, r6
 800eb8c:	60a3      	str	r3, [r4, #8]
 800eb8e:	6823      	ldr	r3, [r4, #0]
 800eb90:	4433      	add	r3, r6
 800eb92:	6023      	str	r3, [r4, #0]
 800eb94:	2000      	movs	r0, #0
 800eb96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb9a:	462a      	mov	r2, r5
 800eb9c:	f000 fd61 	bl	800f662 <_realloc_r>
 800eba0:	4606      	mov	r6, r0
 800eba2:	2800      	cmp	r0, #0
 800eba4:	d1e0      	bne.n	800eb68 <__ssputs_r+0x5c>
 800eba6:	6921      	ldr	r1, [r4, #16]
 800eba8:	4650      	mov	r0, sl
 800ebaa:	f7fe fb79 	bl	800d2a0 <_free_r>
 800ebae:	230c      	movs	r3, #12
 800ebb0:	f8ca 3000 	str.w	r3, [sl]
 800ebb4:	89a3      	ldrh	r3, [r4, #12]
 800ebb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ebba:	81a3      	strh	r3, [r4, #12]
 800ebbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ebc0:	e7e9      	b.n	800eb96 <__ssputs_r+0x8a>
	...

0800ebc4 <_svfiprintf_r>:
 800ebc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebc8:	4698      	mov	r8, r3
 800ebca:	898b      	ldrh	r3, [r1, #12]
 800ebcc:	061b      	lsls	r3, r3, #24
 800ebce:	b09d      	sub	sp, #116	@ 0x74
 800ebd0:	4607      	mov	r7, r0
 800ebd2:	460d      	mov	r5, r1
 800ebd4:	4614      	mov	r4, r2
 800ebd6:	d510      	bpl.n	800ebfa <_svfiprintf_r+0x36>
 800ebd8:	690b      	ldr	r3, [r1, #16]
 800ebda:	b973      	cbnz	r3, 800ebfa <_svfiprintf_r+0x36>
 800ebdc:	2140      	movs	r1, #64	@ 0x40
 800ebde:	f7fe fbd3 	bl	800d388 <_malloc_r>
 800ebe2:	6028      	str	r0, [r5, #0]
 800ebe4:	6128      	str	r0, [r5, #16]
 800ebe6:	b930      	cbnz	r0, 800ebf6 <_svfiprintf_r+0x32>
 800ebe8:	230c      	movs	r3, #12
 800ebea:	603b      	str	r3, [r7, #0]
 800ebec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ebf0:	b01d      	add	sp, #116	@ 0x74
 800ebf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebf6:	2340      	movs	r3, #64	@ 0x40
 800ebf8:	616b      	str	r3, [r5, #20]
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	9309      	str	r3, [sp, #36]	@ 0x24
 800ebfe:	2320      	movs	r3, #32
 800ec00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ec04:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec08:	2330      	movs	r3, #48	@ 0x30
 800ec0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800eda8 <_svfiprintf_r+0x1e4>
 800ec0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ec12:	f04f 0901 	mov.w	r9, #1
 800ec16:	4623      	mov	r3, r4
 800ec18:	469a      	mov	sl, r3
 800ec1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec1e:	b10a      	cbz	r2, 800ec24 <_svfiprintf_r+0x60>
 800ec20:	2a25      	cmp	r2, #37	@ 0x25
 800ec22:	d1f9      	bne.n	800ec18 <_svfiprintf_r+0x54>
 800ec24:	ebba 0b04 	subs.w	fp, sl, r4
 800ec28:	d00b      	beq.n	800ec42 <_svfiprintf_r+0x7e>
 800ec2a:	465b      	mov	r3, fp
 800ec2c:	4622      	mov	r2, r4
 800ec2e:	4629      	mov	r1, r5
 800ec30:	4638      	mov	r0, r7
 800ec32:	f7ff ff6b 	bl	800eb0c <__ssputs_r>
 800ec36:	3001      	adds	r0, #1
 800ec38:	f000 80a7 	beq.w	800ed8a <_svfiprintf_r+0x1c6>
 800ec3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec3e:	445a      	add	r2, fp
 800ec40:	9209      	str	r2, [sp, #36]	@ 0x24
 800ec42:	f89a 3000 	ldrb.w	r3, [sl]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	f000 809f 	beq.w	800ed8a <_svfiprintf_r+0x1c6>
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ec52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec56:	f10a 0a01 	add.w	sl, sl, #1
 800ec5a:	9304      	str	r3, [sp, #16]
 800ec5c:	9307      	str	r3, [sp, #28]
 800ec5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ec62:	931a      	str	r3, [sp, #104]	@ 0x68
 800ec64:	4654      	mov	r4, sl
 800ec66:	2205      	movs	r2, #5
 800ec68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec6c:	484e      	ldr	r0, [pc, #312]	@ (800eda8 <_svfiprintf_r+0x1e4>)
 800ec6e:	f7f1 fab7 	bl	80001e0 <memchr>
 800ec72:	9a04      	ldr	r2, [sp, #16]
 800ec74:	b9d8      	cbnz	r0, 800ecae <_svfiprintf_r+0xea>
 800ec76:	06d0      	lsls	r0, r2, #27
 800ec78:	bf44      	itt	mi
 800ec7a:	2320      	movmi	r3, #32
 800ec7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec80:	0711      	lsls	r1, r2, #28
 800ec82:	bf44      	itt	mi
 800ec84:	232b      	movmi	r3, #43	@ 0x2b
 800ec86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec8a:	f89a 3000 	ldrb.w	r3, [sl]
 800ec8e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ec90:	d015      	beq.n	800ecbe <_svfiprintf_r+0xfa>
 800ec92:	9a07      	ldr	r2, [sp, #28]
 800ec94:	4654      	mov	r4, sl
 800ec96:	2000      	movs	r0, #0
 800ec98:	f04f 0c0a 	mov.w	ip, #10
 800ec9c:	4621      	mov	r1, r4
 800ec9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eca2:	3b30      	subs	r3, #48	@ 0x30
 800eca4:	2b09      	cmp	r3, #9
 800eca6:	d94b      	bls.n	800ed40 <_svfiprintf_r+0x17c>
 800eca8:	b1b0      	cbz	r0, 800ecd8 <_svfiprintf_r+0x114>
 800ecaa:	9207      	str	r2, [sp, #28]
 800ecac:	e014      	b.n	800ecd8 <_svfiprintf_r+0x114>
 800ecae:	eba0 0308 	sub.w	r3, r0, r8
 800ecb2:	fa09 f303 	lsl.w	r3, r9, r3
 800ecb6:	4313      	orrs	r3, r2
 800ecb8:	9304      	str	r3, [sp, #16]
 800ecba:	46a2      	mov	sl, r4
 800ecbc:	e7d2      	b.n	800ec64 <_svfiprintf_r+0xa0>
 800ecbe:	9b03      	ldr	r3, [sp, #12]
 800ecc0:	1d19      	adds	r1, r3, #4
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	9103      	str	r1, [sp, #12]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	bfbb      	ittet	lt
 800ecca:	425b      	neglt	r3, r3
 800eccc:	f042 0202 	orrlt.w	r2, r2, #2
 800ecd0:	9307      	strge	r3, [sp, #28]
 800ecd2:	9307      	strlt	r3, [sp, #28]
 800ecd4:	bfb8      	it	lt
 800ecd6:	9204      	strlt	r2, [sp, #16]
 800ecd8:	7823      	ldrb	r3, [r4, #0]
 800ecda:	2b2e      	cmp	r3, #46	@ 0x2e
 800ecdc:	d10a      	bne.n	800ecf4 <_svfiprintf_r+0x130>
 800ecde:	7863      	ldrb	r3, [r4, #1]
 800ece0:	2b2a      	cmp	r3, #42	@ 0x2a
 800ece2:	d132      	bne.n	800ed4a <_svfiprintf_r+0x186>
 800ece4:	9b03      	ldr	r3, [sp, #12]
 800ece6:	1d1a      	adds	r2, r3, #4
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	9203      	str	r2, [sp, #12]
 800ecec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ecf0:	3402      	adds	r4, #2
 800ecf2:	9305      	str	r3, [sp, #20]
 800ecf4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800edb8 <_svfiprintf_r+0x1f4>
 800ecf8:	7821      	ldrb	r1, [r4, #0]
 800ecfa:	2203      	movs	r2, #3
 800ecfc:	4650      	mov	r0, sl
 800ecfe:	f7f1 fa6f 	bl	80001e0 <memchr>
 800ed02:	b138      	cbz	r0, 800ed14 <_svfiprintf_r+0x150>
 800ed04:	9b04      	ldr	r3, [sp, #16]
 800ed06:	eba0 000a 	sub.w	r0, r0, sl
 800ed0a:	2240      	movs	r2, #64	@ 0x40
 800ed0c:	4082      	lsls	r2, r0
 800ed0e:	4313      	orrs	r3, r2
 800ed10:	3401      	adds	r4, #1
 800ed12:	9304      	str	r3, [sp, #16]
 800ed14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed18:	4824      	ldr	r0, [pc, #144]	@ (800edac <_svfiprintf_r+0x1e8>)
 800ed1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ed1e:	2206      	movs	r2, #6
 800ed20:	f7f1 fa5e 	bl	80001e0 <memchr>
 800ed24:	2800      	cmp	r0, #0
 800ed26:	d036      	beq.n	800ed96 <_svfiprintf_r+0x1d2>
 800ed28:	4b21      	ldr	r3, [pc, #132]	@ (800edb0 <_svfiprintf_r+0x1ec>)
 800ed2a:	bb1b      	cbnz	r3, 800ed74 <_svfiprintf_r+0x1b0>
 800ed2c:	9b03      	ldr	r3, [sp, #12]
 800ed2e:	3307      	adds	r3, #7
 800ed30:	f023 0307 	bic.w	r3, r3, #7
 800ed34:	3308      	adds	r3, #8
 800ed36:	9303      	str	r3, [sp, #12]
 800ed38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed3a:	4433      	add	r3, r6
 800ed3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed3e:	e76a      	b.n	800ec16 <_svfiprintf_r+0x52>
 800ed40:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed44:	460c      	mov	r4, r1
 800ed46:	2001      	movs	r0, #1
 800ed48:	e7a8      	b.n	800ec9c <_svfiprintf_r+0xd8>
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	3401      	adds	r4, #1
 800ed4e:	9305      	str	r3, [sp, #20]
 800ed50:	4619      	mov	r1, r3
 800ed52:	f04f 0c0a 	mov.w	ip, #10
 800ed56:	4620      	mov	r0, r4
 800ed58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed5c:	3a30      	subs	r2, #48	@ 0x30
 800ed5e:	2a09      	cmp	r2, #9
 800ed60:	d903      	bls.n	800ed6a <_svfiprintf_r+0x1a6>
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d0c6      	beq.n	800ecf4 <_svfiprintf_r+0x130>
 800ed66:	9105      	str	r1, [sp, #20]
 800ed68:	e7c4      	b.n	800ecf4 <_svfiprintf_r+0x130>
 800ed6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed6e:	4604      	mov	r4, r0
 800ed70:	2301      	movs	r3, #1
 800ed72:	e7f0      	b.n	800ed56 <_svfiprintf_r+0x192>
 800ed74:	ab03      	add	r3, sp, #12
 800ed76:	9300      	str	r3, [sp, #0]
 800ed78:	462a      	mov	r2, r5
 800ed7a:	4b0e      	ldr	r3, [pc, #56]	@ (800edb4 <_svfiprintf_r+0x1f0>)
 800ed7c:	a904      	add	r1, sp, #16
 800ed7e:	4638      	mov	r0, r7
 800ed80:	f7fc fc4c 	bl	800b61c <_printf_float>
 800ed84:	1c42      	adds	r2, r0, #1
 800ed86:	4606      	mov	r6, r0
 800ed88:	d1d6      	bne.n	800ed38 <_svfiprintf_r+0x174>
 800ed8a:	89ab      	ldrh	r3, [r5, #12]
 800ed8c:	065b      	lsls	r3, r3, #25
 800ed8e:	f53f af2d 	bmi.w	800ebec <_svfiprintf_r+0x28>
 800ed92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ed94:	e72c      	b.n	800ebf0 <_svfiprintf_r+0x2c>
 800ed96:	ab03      	add	r3, sp, #12
 800ed98:	9300      	str	r3, [sp, #0]
 800ed9a:	462a      	mov	r2, r5
 800ed9c:	4b05      	ldr	r3, [pc, #20]	@ (800edb4 <_svfiprintf_r+0x1f0>)
 800ed9e:	a904      	add	r1, sp, #16
 800eda0:	4638      	mov	r0, r7
 800eda2:	f7fc fed3 	bl	800bb4c <_printf_i>
 800eda6:	e7ed      	b.n	800ed84 <_svfiprintf_r+0x1c0>
 800eda8:	08012a11 	.word	0x08012a11
 800edac:	08012a1b 	.word	0x08012a1b
 800edb0:	0800b61d 	.word	0x0800b61d
 800edb4:	0800eb0d 	.word	0x0800eb0d
 800edb8:	08012a17 	.word	0x08012a17

0800edbc <__sflush_r>:
 800edbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800edc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edc4:	0716      	lsls	r6, r2, #28
 800edc6:	4605      	mov	r5, r0
 800edc8:	460c      	mov	r4, r1
 800edca:	d454      	bmi.n	800ee76 <__sflush_r+0xba>
 800edcc:	684b      	ldr	r3, [r1, #4]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	dc02      	bgt.n	800edd8 <__sflush_r+0x1c>
 800edd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	dd48      	ble.n	800ee6a <__sflush_r+0xae>
 800edd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800edda:	2e00      	cmp	r6, #0
 800eddc:	d045      	beq.n	800ee6a <__sflush_r+0xae>
 800edde:	2300      	movs	r3, #0
 800ede0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ede4:	682f      	ldr	r7, [r5, #0]
 800ede6:	6a21      	ldr	r1, [r4, #32]
 800ede8:	602b      	str	r3, [r5, #0]
 800edea:	d030      	beq.n	800ee4e <__sflush_r+0x92>
 800edec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800edee:	89a3      	ldrh	r3, [r4, #12]
 800edf0:	0759      	lsls	r1, r3, #29
 800edf2:	d505      	bpl.n	800ee00 <__sflush_r+0x44>
 800edf4:	6863      	ldr	r3, [r4, #4]
 800edf6:	1ad2      	subs	r2, r2, r3
 800edf8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800edfa:	b10b      	cbz	r3, 800ee00 <__sflush_r+0x44>
 800edfc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800edfe:	1ad2      	subs	r2, r2, r3
 800ee00:	2300      	movs	r3, #0
 800ee02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ee04:	6a21      	ldr	r1, [r4, #32]
 800ee06:	4628      	mov	r0, r5
 800ee08:	47b0      	blx	r6
 800ee0a:	1c43      	adds	r3, r0, #1
 800ee0c:	89a3      	ldrh	r3, [r4, #12]
 800ee0e:	d106      	bne.n	800ee1e <__sflush_r+0x62>
 800ee10:	6829      	ldr	r1, [r5, #0]
 800ee12:	291d      	cmp	r1, #29
 800ee14:	d82b      	bhi.n	800ee6e <__sflush_r+0xb2>
 800ee16:	4a2a      	ldr	r2, [pc, #168]	@ (800eec0 <__sflush_r+0x104>)
 800ee18:	410a      	asrs	r2, r1
 800ee1a:	07d6      	lsls	r6, r2, #31
 800ee1c:	d427      	bmi.n	800ee6e <__sflush_r+0xb2>
 800ee1e:	2200      	movs	r2, #0
 800ee20:	6062      	str	r2, [r4, #4]
 800ee22:	04d9      	lsls	r1, r3, #19
 800ee24:	6922      	ldr	r2, [r4, #16]
 800ee26:	6022      	str	r2, [r4, #0]
 800ee28:	d504      	bpl.n	800ee34 <__sflush_r+0x78>
 800ee2a:	1c42      	adds	r2, r0, #1
 800ee2c:	d101      	bne.n	800ee32 <__sflush_r+0x76>
 800ee2e:	682b      	ldr	r3, [r5, #0]
 800ee30:	b903      	cbnz	r3, 800ee34 <__sflush_r+0x78>
 800ee32:	6560      	str	r0, [r4, #84]	@ 0x54
 800ee34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ee36:	602f      	str	r7, [r5, #0]
 800ee38:	b1b9      	cbz	r1, 800ee6a <__sflush_r+0xae>
 800ee3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ee3e:	4299      	cmp	r1, r3
 800ee40:	d002      	beq.n	800ee48 <__sflush_r+0x8c>
 800ee42:	4628      	mov	r0, r5
 800ee44:	f7fe fa2c 	bl	800d2a0 <_free_r>
 800ee48:	2300      	movs	r3, #0
 800ee4a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ee4c:	e00d      	b.n	800ee6a <__sflush_r+0xae>
 800ee4e:	2301      	movs	r3, #1
 800ee50:	4628      	mov	r0, r5
 800ee52:	47b0      	blx	r6
 800ee54:	4602      	mov	r2, r0
 800ee56:	1c50      	adds	r0, r2, #1
 800ee58:	d1c9      	bne.n	800edee <__sflush_r+0x32>
 800ee5a:	682b      	ldr	r3, [r5, #0]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d0c6      	beq.n	800edee <__sflush_r+0x32>
 800ee60:	2b1d      	cmp	r3, #29
 800ee62:	d001      	beq.n	800ee68 <__sflush_r+0xac>
 800ee64:	2b16      	cmp	r3, #22
 800ee66:	d11e      	bne.n	800eea6 <__sflush_r+0xea>
 800ee68:	602f      	str	r7, [r5, #0]
 800ee6a:	2000      	movs	r0, #0
 800ee6c:	e022      	b.n	800eeb4 <__sflush_r+0xf8>
 800ee6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee72:	b21b      	sxth	r3, r3
 800ee74:	e01b      	b.n	800eeae <__sflush_r+0xf2>
 800ee76:	690f      	ldr	r7, [r1, #16]
 800ee78:	2f00      	cmp	r7, #0
 800ee7a:	d0f6      	beq.n	800ee6a <__sflush_r+0xae>
 800ee7c:	0793      	lsls	r3, r2, #30
 800ee7e:	680e      	ldr	r6, [r1, #0]
 800ee80:	bf08      	it	eq
 800ee82:	694b      	ldreq	r3, [r1, #20]
 800ee84:	600f      	str	r7, [r1, #0]
 800ee86:	bf18      	it	ne
 800ee88:	2300      	movne	r3, #0
 800ee8a:	eba6 0807 	sub.w	r8, r6, r7
 800ee8e:	608b      	str	r3, [r1, #8]
 800ee90:	f1b8 0f00 	cmp.w	r8, #0
 800ee94:	dde9      	ble.n	800ee6a <__sflush_r+0xae>
 800ee96:	6a21      	ldr	r1, [r4, #32]
 800ee98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ee9a:	4643      	mov	r3, r8
 800ee9c:	463a      	mov	r2, r7
 800ee9e:	4628      	mov	r0, r5
 800eea0:	47b0      	blx	r6
 800eea2:	2800      	cmp	r0, #0
 800eea4:	dc08      	bgt.n	800eeb8 <__sflush_r+0xfc>
 800eea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eeaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eeae:	81a3      	strh	r3, [r4, #12]
 800eeb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eeb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeb8:	4407      	add	r7, r0
 800eeba:	eba8 0800 	sub.w	r8, r8, r0
 800eebe:	e7e7      	b.n	800ee90 <__sflush_r+0xd4>
 800eec0:	dfbffffe 	.word	0xdfbffffe

0800eec4 <_fflush_r>:
 800eec4:	b538      	push	{r3, r4, r5, lr}
 800eec6:	690b      	ldr	r3, [r1, #16]
 800eec8:	4605      	mov	r5, r0
 800eeca:	460c      	mov	r4, r1
 800eecc:	b913      	cbnz	r3, 800eed4 <_fflush_r+0x10>
 800eece:	2500      	movs	r5, #0
 800eed0:	4628      	mov	r0, r5
 800eed2:	bd38      	pop	{r3, r4, r5, pc}
 800eed4:	b118      	cbz	r0, 800eede <_fflush_r+0x1a>
 800eed6:	6a03      	ldr	r3, [r0, #32]
 800eed8:	b90b      	cbnz	r3, 800eede <_fflush_r+0x1a>
 800eeda:	f7fd f9f7 	bl	800c2cc <__sinit>
 800eede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d0f3      	beq.n	800eece <_fflush_r+0xa>
 800eee6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800eee8:	07d0      	lsls	r0, r2, #31
 800eeea:	d404      	bmi.n	800eef6 <_fflush_r+0x32>
 800eeec:	0599      	lsls	r1, r3, #22
 800eeee:	d402      	bmi.n	800eef6 <_fflush_r+0x32>
 800eef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eef2:	f7fd fb72 	bl	800c5da <__retarget_lock_acquire_recursive>
 800eef6:	4628      	mov	r0, r5
 800eef8:	4621      	mov	r1, r4
 800eefa:	f7ff ff5f 	bl	800edbc <__sflush_r>
 800eefe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ef00:	07da      	lsls	r2, r3, #31
 800ef02:	4605      	mov	r5, r0
 800ef04:	d4e4      	bmi.n	800eed0 <_fflush_r+0xc>
 800ef06:	89a3      	ldrh	r3, [r4, #12]
 800ef08:	059b      	lsls	r3, r3, #22
 800ef0a:	d4e1      	bmi.n	800eed0 <_fflush_r+0xc>
 800ef0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ef0e:	f7fd fb65 	bl	800c5dc <__retarget_lock_release_recursive>
 800ef12:	e7dd      	b.n	800eed0 <_fflush_r+0xc>

0800ef14 <strncmp>:
 800ef14:	b510      	push	{r4, lr}
 800ef16:	b16a      	cbz	r2, 800ef34 <strncmp+0x20>
 800ef18:	3901      	subs	r1, #1
 800ef1a:	1884      	adds	r4, r0, r2
 800ef1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef20:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d103      	bne.n	800ef30 <strncmp+0x1c>
 800ef28:	42a0      	cmp	r0, r4
 800ef2a:	d001      	beq.n	800ef30 <strncmp+0x1c>
 800ef2c:	2a00      	cmp	r2, #0
 800ef2e:	d1f5      	bne.n	800ef1c <strncmp+0x8>
 800ef30:	1ad0      	subs	r0, r2, r3
 800ef32:	bd10      	pop	{r4, pc}
 800ef34:	4610      	mov	r0, r2
 800ef36:	e7fc      	b.n	800ef32 <strncmp+0x1e>

0800ef38 <_sbrk_r>:
 800ef38:	b538      	push	{r3, r4, r5, lr}
 800ef3a:	4d06      	ldr	r5, [pc, #24]	@ (800ef54 <_sbrk_r+0x1c>)
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	4604      	mov	r4, r0
 800ef40:	4608      	mov	r0, r1
 800ef42:	602b      	str	r3, [r5, #0]
 800ef44:	f7f3 fc08 	bl	8002758 <_sbrk>
 800ef48:	1c43      	adds	r3, r0, #1
 800ef4a:	d102      	bne.n	800ef52 <_sbrk_r+0x1a>
 800ef4c:	682b      	ldr	r3, [r5, #0]
 800ef4e:	b103      	cbz	r3, 800ef52 <_sbrk_r+0x1a>
 800ef50:	6023      	str	r3, [r4, #0]
 800ef52:	bd38      	pop	{r3, r4, r5, pc}
 800ef54:	200035c0 	.word	0x200035c0

0800ef58 <nan>:
 800ef58:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ef60 <nan+0x8>
 800ef5c:	4770      	bx	lr
 800ef5e:	bf00      	nop
 800ef60:	00000000 	.word	0x00000000
 800ef64:	7ff80000 	.word	0x7ff80000

0800ef68 <__assert_func>:
 800ef68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ef6a:	4614      	mov	r4, r2
 800ef6c:	461a      	mov	r2, r3
 800ef6e:	4b09      	ldr	r3, [pc, #36]	@ (800ef94 <__assert_func+0x2c>)
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	4605      	mov	r5, r0
 800ef74:	68d8      	ldr	r0, [r3, #12]
 800ef76:	b954      	cbnz	r4, 800ef8e <__assert_func+0x26>
 800ef78:	4b07      	ldr	r3, [pc, #28]	@ (800ef98 <__assert_func+0x30>)
 800ef7a:	461c      	mov	r4, r3
 800ef7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ef80:	9100      	str	r1, [sp, #0]
 800ef82:	462b      	mov	r3, r5
 800ef84:	4905      	ldr	r1, [pc, #20]	@ (800ef9c <__assert_func+0x34>)
 800ef86:	f000 fba7 	bl	800f6d8 <fiprintf>
 800ef8a:	f000 fbb7 	bl	800f6fc <abort>
 800ef8e:	4b04      	ldr	r3, [pc, #16]	@ (800efa0 <__assert_func+0x38>)
 800ef90:	e7f4      	b.n	800ef7c <__assert_func+0x14>
 800ef92:	bf00      	nop
 800ef94:	20000024 	.word	0x20000024
 800ef98:	08012a65 	.word	0x08012a65
 800ef9c:	08012a37 	.word	0x08012a37
 800efa0:	08012a2a 	.word	0x08012a2a

0800efa4 <_calloc_r>:
 800efa4:	b570      	push	{r4, r5, r6, lr}
 800efa6:	fba1 5402 	umull	r5, r4, r1, r2
 800efaa:	b93c      	cbnz	r4, 800efbc <_calloc_r+0x18>
 800efac:	4629      	mov	r1, r5
 800efae:	f7fe f9eb 	bl	800d388 <_malloc_r>
 800efb2:	4606      	mov	r6, r0
 800efb4:	b928      	cbnz	r0, 800efc2 <_calloc_r+0x1e>
 800efb6:	2600      	movs	r6, #0
 800efb8:	4630      	mov	r0, r6
 800efba:	bd70      	pop	{r4, r5, r6, pc}
 800efbc:	220c      	movs	r2, #12
 800efbe:	6002      	str	r2, [r0, #0]
 800efc0:	e7f9      	b.n	800efb6 <_calloc_r+0x12>
 800efc2:	462a      	mov	r2, r5
 800efc4:	4621      	mov	r1, r4
 800efc6:	f7fd fa34 	bl	800c432 <memset>
 800efca:	e7f5      	b.n	800efb8 <_calloc_r+0x14>

0800efcc <rshift>:
 800efcc:	6903      	ldr	r3, [r0, #16]
 800efce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800efd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800efd6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800efda:	f100 0414 	add.w	r4, r0, #20
 800efde:	dd45      	ble.n	800f06c <rshift+0xa0>
 800efe0:	f011 011f 	ands.w	r1, r1, #31
 800efe4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800efe8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800efec:	d10c      	bne.n	800f008 <rshift+0x3c>
 800efee:	f100 0710 	add.w	r7, r0, #16
 800eff2:	4629      	mov	r1, r5
 800eff4:	42b1      	cmp	r1, r6
 800eff6:	d334      	bcc.n	800f062 <rshift+0x96>
 800eff8:	1a9b      	subs	r3, r3, r2
 800effa:	009b      	lsls	r3, r3, #2
 800effc:	1eea      	subs	r2, r5, #3
 800effe:	4296      	cmp	r6, r2
 800f000:	bf38      	it	cc
 800f002:	2300      	movcc	r3, #0
 800f004:	4423      	add	r3, r4
 800f006:	e015      	b.n	800f034 <rshift+0x68>
 800f008:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f00c:	f1c1 0820 	rsb	r8, r1, #32
 800f010:	40cf      	lsrs	r7, r1
 800f012:	f105 0e04 	add.w	lr, r5, #4
 800f016:	46a1      	mov	r9, r4
 800f018:	4576      	cmp	r6, lr
 800f01a:	46f4      	mov	ip, lr
 800f01c:	d815      	bhi.n	800f04a <rshift+0x7e>
 800f01e:	1a9a      	subs	r2, r3, r2
 800f020:	0092      	lsls	r2, r2, #2
 800f022:	3a04      	subs	r2, #4
 800f024:	3501      	adds	r5, #1
 800f026:	42ae      	cmp	r6, r5
 800f028:	bf38      	it	cc
 800f02a:	2200      	movcc	r2, #0
 800f02c:	18a3      	adds	r3, r4, r2
 800f02e:	50a7      	str	r7, [r4, r2]
 800f030:	b107      	cbz	r7, 800f034 <rshift+0x68>
 800f032:	3304      	adds	r3, #4
 800f034:	1b1a      	subs	r2, r3, r4
 800f036:	42a3      	cmp	r3, r4
 800f038:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f03c:	bf08      	it	eq
 800f03e:	2300      	moveq	r3, #0
 800f040:	6102      	str	r2, [r0, #16]
 800f042:	bf08      	it	eq
 800f044:	6143      	streq	r3, [r0, #20]
 800f046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f04a:	f8dc c000 	ldr.w	ip, [ip]
 800f04e:	fa0c fc08 	lsl.w	ip, ip, r8
 800f052:	ea4c 0707 	orr.w	r7, ip, r7
 800f056:	f849 7b04 	str.w	r7, [r9], #4
 800f05a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f05e:	40cf      	lsrs	r7, r1
 800f060:	e7da      	b.n	800f018 <rshift+0x4c>
 800f062:	f851 cb04 	ldr.w	ip, [r1], #4
 800f066:	f847 cf04 	str.w	ip, [r7, #4]!
 800f06a:	e7c3      	b.n	800eff4 <rshift+0x28>
 800f06c:	4623      	mov	r3, r4
 800f06e:	e7e1      	b.n	800f034 <rshift+0x68>

0800f070 <__hexdig_fun>:
 800f070:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f074:	2b09      	cmp	r3, #9
 800f076:	d802      	bhi.n	800f07e <__hexdig_fun+0xe>
 800f078:	3820      	subs	r0, #32
 800f07a:	b2c0      	uxtb	r0, r0
 800f07c:	4770      	bx	lr
 800f07e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f082:	2b05      	cmp	r3, #5
 800f084:	d801      	bhi.n	800f08a <__hexdig_fun+0x1a>
 800f086:	3847      	subs	r0, #71	@ 0x47
 800f088:	e7f7      	b.n	800f07a <__hexdig_fun+0xa>
 800f08a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f08e:	2b05      	cmp	r3, #5
 800f090:	d801      	bhi.n	800f096 <__hexdig_fun+0x26>
 800f092:	3827      	subs	r0, #39	@ 0x27
 800f094:	e7f1      	b.n	800f07a <__hexdig_fun+0xa>
 800f096:	2000      	movs	r0, #0
 800f098:	4770      	bx	lr
	...

0800f09c <__gethex>:
 800f09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0a0:	b085      	sub	sp, #20
 800f0a2:	468a      	mov	sl, r1
 800f0a4:	9302      	str	r3, [sp, #8]
 800f0a6:	680b      	ldr	r3, [r1, #0]
 800f0a8:	9001      	str	r0, [sp, #4]
 800f0aa:	4690      	mov	r8, r2
 800f0ac:	1c9c      	adds	r4, r3, #2
 800f0ae:	46a1      	mov	r9, r4
 800f0b0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f0b4:	2830      	cmp	r0, #48	@ 0x30
 800f0b6:	d0fa      	beq.n	800f0ae <__gethex+0x12>
 800f0b8:	eba9 0303 	sub.w	r3, r9, r3
 800f0bc:	f1a3 0b02 	sub.w	fp, r3, #2
 800f0c0:	f7ff ffd6 	bl	800f070 <__hexdig_fun>
 800f0c4:	4605      	mov	r5, r0
 800f0c6:	2800      	cmp	r0, #0
 800f0c8:	d168      	bne.n	800f19c <__gethex+0x100>
 800f0ca:	49a0      	ldr	r1, [pc, #640]	@ (800f34c <__gethex+0x2b0>)
 800f0cc:	2201      	movs	r2, #1
 800f0ce:	4648      	mov	r0, r9
 800f0d0:	f7ff ff20 	bl	800ef14 <strncmp>
 800f0d4:	4607      	mov	r7, r0
 800f0d6:	2800      	cmp	r0, #0
 800f0d8:	d167      	bne.n	800f1aa <__gethex+0x10e>
 800f0da:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f0de:	4626      	mov	r6, r4
 800f0e0:	f7ff ffc6 	bl	800f070 <__hexdig_fun>
 800f0e4:	2800      	cmp	r0, #0
 800f0e6:	d062      	beq.n	800f1ae <__gethex+0x112>
 800f0e8:	4623      	mov	r3, r4
 800f0ea:	7818      	ldrb	r0, [r3, #0]
 800f0ec:	2830      	cmp	r0, #48	@ 0x30
 800f0ee:	4699      	mov	r9, r3
 800f0f0:	f103 0301 	add.w	r3, r3, #1
 800f0f4:	d0f9      	beq.n	800f0ea <__gethex+0x4e>
 800f0f6:	f7ff ffbb 	bl	800f070 <__hexdig_fun>
 800f0fa:	fab0 f580 	clz	r5, r0
 800f0fe:	096d      	lsrs	r5, r5, #5
 800f100:	f04f 0b01 	mov.w	fp, #1
 800f104:	464a      	mov	r2, r9
 800f106:	4616      	mov	r6, r2
 800f108:	3201      	adds	r2, #1
 800f10a:	7830      	ldrb	r0, [r6, #0]
 800f10c:	f7ff ffb0 	bl	800f070 <__hexdig_fun>
 800f110:	2800      	cmp	r0, #0
 800f112:	d1f8      	bne.n	800f106 <__gethex+0x6a>
 800f114:	498d      	ldr	r1, [pc, #564]	@ (800f34c <__gethex+0x2b0>)
 800f116:	2201      	movs	r2, #1
 800f118:	4630      	mov	r0, r6
 800f11a:	f7ff fefb 	bl	800ef14 <strncmp>
 800f11e:	2800      	cmp	r0, #0
 800f120:	d13f      	bne.n	800f1a2 <__gethex+0x106>
 800f122:	b944      	cbnz	r4, 800f136 <__gethex+0x9a>
 800f124:	1c74      	adds	r4, r6, #1
 800f126:	4622      	mov	r2, r4
 800f128:	4616      	mov	r6, r2
 800f12a:	3201      	adds	r2, #1
 800f12c:	7830      	ldrb	r0, [r6, #0]
 800f12e:	f7ff ff9f 	bl	800f070 <__hexdig_fun>
 800f132:	2800      	cmp	r0, #0
 800f134:	d1f8      	bne.n	800f128 <__gethex+0x8c>
 800f136:	1ba4      	subs	r4, r4, r6
 800f138:	00a7      	lsls	r7, r4, #2
 800f13a:	7833      	ldrb	r3, [r6, #0]
 800f13c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f140:	2b50      	cmp	r3, #80	@ 0x50
 800f142:	d13e      	bne.n	800f1c2 <__gethex+0x126>
 800f144:	7873      	ldrb	r3, [r6, #1]
 800f146:	2b2b      	cmp	r3, #43	@ 0x2b
 800f148:	d033      	beq.n	800f1b2 <__gethex+0x116>
 800f14a:	2b2d      	cmp	r3, #45	@ 0x2d
 800f14c:	d034      	beq.n	800f1b8 <__gethex+0x11c>
 800f14e:	1c71      	adds	r1, r6, #1
 800f150:	2400      	movs	r4, #0
 800f152:	7808      	ldrb	r0, [r1, #0]
 800f154:	f7ff ff8c 	bl	800f070 <__hexdig_fun>
 800f158:	1e43      	subs	r3, r0, #1
 800f15a:	b2db      	uxtb	r3, r3
 800f15c:	2b18      	cmp	r3, #24
 800f15e:	d830      	bhi.n	800f1c2 <__gethex+0x126>
 800f160:	f1a0 0210 	sub.w	r2, r0, #16
 800f164:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f168:	f7ff ff82 	bl	800f070 <__hexdig_fun>
 800f16c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800f170:	fa5f fc8c 	uxtb.w	ip, ip
 800f174:	f1bc 0f18 	cmp.w	ip, #24
 800f178:	f04f 030a 	mov.w	r3, #10
 800f17c:	d91e      	bls.n	800f1bc <__gethex+0x120>
 800f17e:	b104      	cbz	r4, 800f182 <__gethex+0xe6>
 800f180:	4252      	negs	r2, r2
 800f182:	4417      	add	r7, r2
 800f184:	f8ca 1000 	str.w	r1, [sl]
 800f188:	b1ed      	cbz	r5, 800f1c6 <__gethex+0x12a>
 800f18a:	f1bb 0f00 	cmp.w	fp, #0
 800f18e:	bf0c      	ite	eq
 800f190:	2506      	moveq	r5, #6
 800f192:	2500      	movne	r5, #0
 800f194:	4628      	mov	r0, r5
 800f196:	b005      	add	sp, #20
 800f198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f19c:	2500      	movs	r5, #0
 800f19e:	462c      	mov	r4, r5
 800f1a0:	e7b0      	b.n	800f104 <__gethex+0x68>
 800f1a2:	2c00      	cmp	r4, #0
 800f1a4:	d1c7      	bne.n	800f136 <__gethex+0x9a>
 800f1a6:	4627      	mov	r7, r4
 800f1a8:	e7c7      	b.n	800f13a <__gethex+0x9e>
 800f1aa:	464e      	mov	r6, r9
 800f1ac:	462f      	mov	r7, r5
 800f1ae:	2501      	movs	r5, #1
 800f1b0:	e7c3      	b.n	800f13a <__gethex+0x9e>
 800f1b2:	2400      	movs	r4, #0
 800f1b4:	1cb1      	adds	r1, r6, #2
 800f1b6:	e7cc      	b.n	800f152 <__gethex+0xb6>
 800f1b8:	2401      	movs	r4, #1
 800f1ba:	e7fb      	b.n	800f1b4 <__gethex+0x118>
 800f1bc:	fb03 0002 	mla	r0, r3, r2, r0
 800f1c0:	e7ce      	b.n	800f160 <__gethex+0xc4>
 800f1c2:	4631      	mov	r1, r6
 800f1c4:	e7de      	b.n	800f184 <__gethex+0xe8>
 800f1c6:	eba6 0309 	sub.w	r3, r6, r9
 800f1ca:	3b01      	subs	r3, #1
 800f1cc:	4629      	mov	r1, r5
 800f1ce:	2b07      	cmp	r3, #7
 800f1d0:	dc0a      	bgt.n	800f1e8 <__gethex+0x14c>
 800f1d2:	9801      	ldr	r0, [sp, #4]
 800f1d4:	f7fe f964 	bl	800d4a0 <_Balloc>
 800f1d8:	4604      	mov	r4, r0
 800f1da:	b940      	cbnz	r0, 800f1ee <__gethex+0x152>
 800f1dc:	4b5c      	ldr	r3, [pc, #368]	@ (800f350 <__gethex+0x2b4>)
 800f1de:	4602      	mov	r2, r0
 800f1e0:	21e4      	movs	r1, #228	@ 0xe4
 800f1e2:	485c      	ldr	r0, [pc, #368]	@ (800f354 <__gethex+0x2b8>)
 800f1e4:	f7ff fec0 	bl	800ef68 <__assert_func>
 800f1e8:	3101      	adds	r1, #1
 800f1ea:	105b      	asrs	r3, r3, #1
 800f1ec:	e7ef      	b.n	800f1ce <__gethex+0x132>
 800f1ee:	f100 0a14 	add.w	sl, r0, #20
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	4655      	mov	r5, sl
 800f1f6:	469b      	mov	fp, r3
 800f1f8:	45b1      	cmp	r9, r6
 800f1fa:	d337      	bcc.n	800f26c <__gethex+0x1d0>
 800f1fc:	f845 bb04 	str.w	fp, [r5], #4
 800f200:	eba5 050a 	sub.w	r5, r5, sl
 800f204:	10ad      	asrs	r5, r5, #2
 800f206:	6125      	str	r5, [r4, #16]
 800f208:	4658      	mov	r0, fp
 800f20a:	f7fe fa3b 	bl	800d684 <__hi0bits>
 800f20e:	016d      	lsls	r5, r5, #5
 800f210:	f8d8 6000 	ldr.w	r6, [r8]
 800f214:	1a2d      	subs	r5, r5, r0
 800f216:	42b5      	cmp	r5, r6
 800f218:	dd54      	ble.n	800f2c4 <__gethex+0x228>
 800f21a:	1bad      	subs	r5, r5, r6
 800f21c:	4629      	mov	r1, r5
 800f21e:	4620      	mov	r0, r4
 800f220:	f7fe fdcf 	bl	800ddc2 <__any_on>
 800f224:	4681      	mov	r9, r0
 800f226:	b178      	cbz	r0, 800f248 <__gethex+0x1ac>
 800f228:	1e6b      	subs	r3, r5, #1
 800f22a:	1159      	asrs	r1, r3, #5
 800f22c:	f003 021f 	and.w	r2, r3, #31
 800f230:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f234:	f04f 0901 	mov.w	r9, #1
 800f238:	fa09 f202 	lsl.w	r2, r9, r2
 800f23c:	420a      	tst	r2, r1
 800f23e:	d003      	beq.n	800f248 <__gethex+0x1ac>
 800f240:	454b      	cmp	r3, r9
 800f242:	dc36      	bgt.n	800f2b2 <__gethex+0x216>
 800f244:	f04f 0902 	mov.w	r9, #2
 800f248:	4629      	mov	r1, r5
 800f24a:	4620      	mov	r0, r4
 800f24c:	f7ff febe 	bl	800efcc <rshift>
 800f250:	442f      	add	r7, r5
 800f252:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f256:	42bb      	cmp	r3, r7
 800f258:	da42      	bge.n	800f2e0 <__gethex+0x244>
 800f25a:	9801      	ldr	r0, [sp, #4]
 800f25c:	4621      	mov	r1, r4
 800f25e:	f7fe f95f 	bl	800d520 <_Bfree>
 800f262:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f264:	2300      	movs	r3, #0
 800f266:	6013      	str	r3, [r2, #0]
 800f268:	25a3      	movs	r5, #163	@ 0xa3
 800f26a:	e793      	b.n	800f194 <__gethex+0xf8>
 800f26c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f270:	2a2e      	cmp	r2, #46	@ 0x2e
 800f272:	d012      	beq.n	800f29a <__gethex+0x1fe>
 800f274:	2b20      	cmp	r3, #32
 800f276:	d104      	bne.n	800f282 <__gethex+0x1e6>
 800f278:	f845 bb04 	str.w	fp, [r5], #4
 800f27c:	f04f 0b00 	mov.w	fp, #0
 800f280:	465b      	mov	r3, fp
 800f282:	7830      	ldrb	r0, [r6, #0]
 800f284:	9303      	str	r3, [sp, #12]
 800f286:	f7ff fef3 	bl	800f070 <__hexdig_fun>
 800f28a:	9b03      	ldr	r3, [sp, #12]
 800f28c:	f000 000f 	and.w	r0, r0, #15
 800f290:	4098      	lsls	r0, r3
 800f292:	ea4b 0b00 	orr.w	fp, fp, r0
 800f296:	3304      	adds	r3, #4
 800f298:	e7ae      	b.n	800f1f8 <__gethex+0x15c>
 800f29a:	45b1      	cmp	r9, r6
 800f29c:	d8ea      	bhi.n	800f274 <__gethex+0x1d8>
 800f29e:	492b      	ldr	r1, [pc, #172]	@ (800f34c <__gethex+0x2b0>)
 800f2a0:	9303      	str	r3, [sp, #12]
 800f2a2:	2201      	movs	r2, #1
 800f2a4:	4630      	mov	r0, r6
 800f2a6:	f7ff fe35 	bl	800ef14 <strncmp>
 800f2aa:	9b03      	ldr	r3, [sp, #12]
 800f2ac:	2800      	cmp	r0, #0
 800f2ae:	d1e1      	bne.n	800f274 <__gethex+0x1d8>
 800f2b0:	e7a2      	b.n	800f1f8 <__gethex+0x15c>
 800f2b2:	1ea9      	subs	r1, r5, #2
 800f2b4:	4620      	mov	r0, r4
 800f2b6:	f7fe fd84 	bl	800ddc2 <__any_on>
 800f2ba:	2800      	cmp	r0, #0
 800f2bc:	d0c2      	beq.n	800f244 <__gethex+0x1a8>
 800f2be:	f04f 0903 	mov.w	r9, #3
 800f2c2:	e7c1      	b.n	800f248 <__gethex+0x1ac>
 800f2c4:	da09      	bge.n	800f2da <__gethex+0x23e>
 800f2c6:	1b75      	subs	r5, r6, r5
 800f2c8:	4621      	mov	r1, r4
 800f2ca:	9801      	ldr	r0, [sp, #4]
 800f2cc:	462a      	mov	r2, r5
 800f2ce:	f7fe fb3f 	bl	800d950 <__lshift>
 800f2d2:	1b7f      	subs	r7, r7, r5
 800f2d4:	4604      	mov	r4, r0
 800f2d6:	f100 0a14 	add.w	sl, r0, #20
 800f2da:	f04f 0900 	mov.w	r9, #0
 800f2de:	e7b8      	b.n	800f252 <__gethex+0x1b6>
 800f2e0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f2e4:	42bd      	cmp	r5, r7
 800f2e6:	dd6f      	ble.n	800f3c8 <__gethex+0x32c>
 800f2e8:	1bed      	subs	r5, r5, r7
 800f2ea:	42ae      	cmp	r6, r5
 800f2ec:	dc34      	bgt.n	800f358 <__gethex+0x2bc>
 800f2ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f2f2:	2b02      	cmp	r3, #2
 800f2f4:	d022      	beq.n	800f33c <__gethex+0x2a0>
 800f2f6:	2b03      	cmp	r3, #3
 800f2f8:	d024      	beq.n	800f344 <__gethex+0x2a8>
 800f2fa:	2b01      	cmp	r3, #1
 800f2fc:	d115      	bne.n	800f32a <__gethex+0x28e>
 800f2fe:	42ae      	cmp	r6, r5
 800f300:	d113      	bne.n	800f32a <__gethex+0x28e>
 800f302:	2e01      	cmp	r6, #1
 800f304:	d10b      	bne.n	800f31e <__gethex+0x282>
 800f306:	9a02      	ldr	r2, [sp, #8]
 800f308:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f30c:	6013      	str	r3, [r2, #0]
 800f30e:	2301      	movs	r3, #1
 800f310:	6123      	str	r3, [r4, #16]
 800f312:	f8ca 3000 	str.w	r3, [sl]
 800f316:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f318:	2562      	movs	r5, #98	@ 0x62
 800f31a:	601c      	str	r4, [r3, #0]
 800f31c:	e73a      	b.n	800f194 <__gethex+0xf8>
 800f31e:	1e71      	subs	r1, r6, #1
 800f320:	4620      	mov	r0, r4
 800f322:	f7fe fd4e 	bl	800ddc2 <__any_on>
 800f326:	2800      	cmp	r0, #0
 800f328:	d1ed      	bne.n	800f306 <__gethex+0x26a>
 800f32a:	9801      	ldr	r0, [sp, #4]
 800f32c:	4621      	mov	r1, r4
 800f32e:	f7fe f8f7 	bl	800d520 <_Bfree>
 800f332:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f334:	2300      	movs	r3, #0
 800f336:	6013      	str	r3, [r2, #0]
 800f338:	2550      	movs	r5, #80	@ 0x50
 800f33a:	e72b      	b.n	800f194 <__gethex+0xf8>
 800f33c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d1f3      	bne.n	800f32a <__gethex+0x28e>
 800f342:	e7e0      	b.n	800f306 <__gethex+0x26a>
 800f344:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f346:	2b00      	cmp	r3, #0
 800f348:	d1dd      	bne.n	800f306 <__gethex+0x26a>
 800f34a:	e7ee      	b.n	800f32a <__gethex+0x28e>
 800f34c:	080128b8 	.word	0x080128b8
 800f350:	08012751 	.word	0x08012751
 800f354:	08012a66 	.word	0x08012a66
 800f358:	1e6f      	subs	r7, r5, #1
 800f35a:	f1b9 0f00 	cmp.w	r9, #0
 800f35e:	d130      	bne.n	800f3c2 <__gethex+0x326>
 800f360:	b127      	cbz	r7, 800f36c <__gethex+0x2d0>
 800f362:	4639      	mov	r1, r7
 800f364:	4620      	mov	r0, r4
 800f366:	f7fe fd2c 	bl	800ddc2 <__any_on>
 800f36a:	4681      	mov	r9, r0
 800f36c:	117a      	asrs	r2, r7, #5
 800f36e:	2301      	movs	r3, #1
 800f370:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f374:	f007 071f 	and.w	r7, r7, #31
 800f378:	40bb      	lsls	r3, r7
 800f37a:	4213      	tst	r3, r2
 800f37c:	4629      	mov	r1, r5
 800f37e:	4620      	mov	r0, r4
 800f380:	bf18      	it	ne
 800f382:	f049 0902 	orrne.w	r9, r9, #2
 800f386:	f7ff fe21 	bl	800efcc <rshift>
 800f38a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f38e:	1b76      	subs	r6, r6, r5
 800f390:	2502      	movs	r5, #2
 800f392:	f1b9 0f00 	cmp.w	r9, #0
 800f396:	d047      	beq.n	800f428 <__gethex+0x38c>
 800f398:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f39c:	2b02      	cmp	r3, #2
 800f39e:	d015      	beq.n	800f3cc <__gethex+0x330>
 800f3a0:	2b03      	cmp	r3, #3
 800f3a2:	d017      	beq.n	800f3d4 <__gethex+0x338>
 800f3a4:	2b01      	cmp	r3, #1
 800f3a6:	d109      	bne.n	800f3bc <__gethex+0x320>
 800f3a8:	f019 0f02 	tst.w	r9, #2
 800f3ac:	d006      	beq.n	800f3bc <__gethex+0x320>
 800f3ae:	f8da 3000 	ldr.w	r3, [sl]
 800f3b2:	ea49 0903 	orr.w	r9, r9, r3
 800f3b6:	f019 0f01 	tst.w	r9, #1
 800f3ba:	d10e      	bne.n	800f3da <__gethex+0x33e>
 800f3bc:	f045 0510 	orr.w	r5, r5, #16
 800f3c0:	e032      	b.n	800f428 <__gethex+0x38c>
 800f3c2:	f04f 0901 	mov.w	r9, #1
 800f3c6:	e7d1      	b.n	800f36c <__gethex+0x2d0>
 800f3c8:	2501      	movs	r5, #1
 800f3ca:	e7e2      	b.n	800f392 <__gethex+0x2f6>
 800f3cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f3ce:	f1c3 0301 	rsb	r3, r3, #1
 800f3d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f3d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d0f0      	beq.n	800f3bc <__gethex+0x320>
 800f3da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f3de:	f104 0314 	add.w	r3, r4, #20
 800f3e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f3e6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f3ea:	f04f 0c00 	mov.w	ip, #0
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3f4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800f3f8:	d01b      	beq.n	800f432 <__gethex+0x396>
 800f3fa:	3201      	adds	r2, #1
 800f3fc:	6002      	str	r2, [r0, #0]
 800f3fe:	2d02      	cmp	r5, #2
 800f400:	f104 0314 	add.w	r3, r4, #20
 800f404:	d13c      	bne.n	800f480 <__gethex+0x3e4>
 800f406:	f8d8 2000 	ldr.w	r2, [r8]
 800f40a:	3a01      	subs	r2, #1
 800f40c:	42b2      	cmp	r2, r6
 800f40e:	d109      	bne.n	800f424 <__gethex+0x388>
 800f410:	1171      	asrs	r1, r6, #5
 800f412:	2201      	movs	r2, #1
 800f414:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f418:	f006 061f 	and.w	r6, r6, #31
 800f41c:	fa02 f606 	lsl.w	r6, r2, r6
 800f420:	421e      	tst	r6, r3
 800f422:	d13a      	bne.n	800f49a <__gethex+0x3fe>
 800f424:	f045 0520 	orr.w	r5, r5, #32
 800f428:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f42a:	601c      	str	r4, [r3, #0]
 800f42c:	9b02      	ldr	r3, [sp, #8]
 800f42e:	601f      	str	r7, [r3, #0]
 800f430:	e6b0      	b.n	800f194 <__gethex+0xf8>
 800f432:	4299      	cmp	r1, r3
 800f434:	f843 cc04 	str.w	ip, [r3, #-4]
 800f438:	d8d9      	bhi.n	800f3ee <__gethex+0x352>
 800f43a:	68a3      	ldr	r3, [r4, #8]
 800f43c:	459b      	cmp	fp, r3
 800f43e:	db17      	blt.n	800f470 <__gethex+0x3d4>
 800f440:	6861      	ldr	r1, [r4, #4]
 800f442:	9801      	ldr	r0, [sp, #4]
 800f444:	3101      	adds	r1, #1
 800f446:	f7fe f82b 	bl	800d4a0 <_Balloc>
 800f44a:	4681      	mov	r9, r0
 800f44c:	b918      	cbnz	r0, 800f456 <__gethex+0x3ba>
 800f44e:	4b1a      	ldr	r3, [pc, #104]	@ (800f4b8 <__gethex+0x41c>)
 800f450:	4602      	mov	r2, r0
 800f452:	2184      	movs	r1, #132	@ 0x84
 800f454:	e6c5      	b.n	800f1e2 <__gethex+0x146>
 800f456:	6922      	ldr	r2, [r4, #16]
 800f458:	3202      	adds	r2, #2
 800f45a:	f104 010c 	add.w	r1, r4, #12
 800f45e:	0092      	lsls	r2, r2, #2
 800f460:	300c      	adds	r0, #12
 800f462:	f7fd f8bc 	bl	800c5de <memcpy>
 800f466:	4621      	mov	r1, r4
 800f468:	9801      	ldr	r0, [sp, #4]
 800f46a:	f7fe f859 	bl	800d520 <_Bfree>
 800f46e:	464c      	mov	r4, r9
 800f470:	6923      	ldr	r3, [r4, #16]
 800f472:	1c5a      	adds	r2, r3, #1
 800f474:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f478:	6122      	str	r2, [r4, #16]
 800f47a:	2201      	movs	r2, #1
 800f47c:	615a      	str	r2, [r3, #20]
 800f47e:	e7be      	b.n	800f3fe <__gethex+0x362>
 800f480:	6922      	ldr	r2, [r4, #16]
 800f482:	455a      	cmp	r2, fp
 800f484:	dd0b      	ble.n	800f49e <__gethex+0x402>
 800f486:	2101      	movs	r1, #1
 800f488:	4620      	mov	r0, r4
 800f48a:	f7ff fd9f 	bl	800efcc <rshift>
 800f48e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f492:	3701      	adds	r7, #1
 800f494:	42bb      	cmp	r3, r7
 800f496:	f6ff aee0 	blt.w	800f25a <__gethex+0x1be>
 800f49a:	2501      	movs	r5, #1
 800f49c:	e7c2      	b.n	800f424 <__gethex+0x388>
 800f49e:	f016 061f 	ands.w	r6, r6, #31
 800f4a2:	d0fa      	beq.n	800f49a <__gethex+0x3fe>
 800f4a4:	4453      	add	r3, sl
 800f4a6:	f1c6 0620 	rsb	r6, r6, #32
 800f4aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f4ae:	f7fe f8e9 	bl	800d684 <__hi0bits>
 800f4b2:	42b0      	cmp	r0, r6
 800f4b4:	dbe7      	blt.n	800f486 <__gethex+0x3ea>
 800f4b6:	e7f0      	b.n	800f49a <__gethex+0x3fe>
 800f4b8:	08012751 	.word	0x08012751

0800f4bc <L_shift>:
 800f4bc:	f1c2 0208 	rsb	r2, r2, #8
 800f4c0:	0092      	lsls	r2, r2, #2
 800f4c2:	b570      	push	{r4, r5, r6, lr}
 800f4c4:	f1c2 0620 	rsb	r6, r2, #32
 800f4c8:	6843      	ldr	r3, [r0, #4]
 800f4ca:	6804      	ldr	r4, [r0, #0]
 800f4cc:	fa03 f506 	lsl.w	r5, r3, r6
 800f4d0:	432c      	orrs	r4, r5
 800f4d2:	40d3      	lsrs	r3, r2
 800f4d4:	6004      	str	r4, [r0, #0]
 800f4d6:	f840 3f04 	str.w	r3, [r0, #4]!
 800f4da:	4288      	cmp	r0, r1
 800f4dc:	d3f4      	bcc.n	800f4c8 <L_shift+0xc>
 800f4de:	bd70      	pop	{r4, r5, r6, pc}

0800f4e0 <__match>:
 800f4e0:	b530      	push	{r4, r5, lr}
 800f4e2:	6803      	ldr	r3, [r0, #0]
 800f4e4:	3301      	adds	r3, #1
 800f4e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f4ea:	b914      	cbnz	r4, 800f4f2 <__match+0x12>
 800f4ec:	6003      	str	r3, [r0, #0]
 800f4ee:	2001      	movs	r0, #1
 800f4f0:	bd30      	pop	{r4, r5, pc}
 800f4f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f4f6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f4fa:	2d19      	cmp	r5, #25
 800f4fc:	bf98      	it	ls
 800f4fe:	3220      	addls	r2, #32
 800f500:	42a2      	cmp	r2, r4
 800f502:	d0f0      	beq.n	800f4e6 <__match+0x6>
 800f504:	2000      	movs	r0, #0
 800f506:	e7f3      	b.n	800f4f0 <__match+0x10>

0800f508 <__hexnan>:
 800f508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f50c:	680b      	ldr	r3, [r1, #0]
 800f50e:	6801      	ldr	r1, [r0, #0]
 800f510:	115e      	asrs	r6, r3, #5
 800f512:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f516:	f013 031f 	ands.w	r3, r3, #31
 800f51a:	b087      	sub	sp, #28
 800f51c:	bf18      	it	ne
 800f51e:	3604      	addne	r6, #4
 800f520:	2500      	movs	r5, #0
 800f522:	1f37      	subs	r7, r6, #4
 800f524:	4682      	mov	sl, r0
 800f526:	4690      	mov	r8, r2
 800f528:	9301      	str	r3, [sp, #4]
 800f52a:	f846 5c04 	str.w	r5, [r6, #-4]
 800f52e:	46b9      	mov	r9, r7
 800f530:	463c      	mov	r4, r7
 800f532:	9502      	str	r5, [sp, #8]
 800f534:	46ab      	mov	fp, r5
 800f536:	784a      	ldrb	r2, [r1, #1]
 800f538:	1c4b      	adds	r3, r1, #1
 800f53a:	9303      	str	r3, [sp, #12]
 800f53c:	b342      	cbz	r2, 800f590 <__hexnan+0x88>
 800f53e:	4610      	mov	r0, r2
 800f540:	9105      	str	r1, [sp, #20]
 800f542:	9204      	str	r2, [sp, #16]
 800f544:	f7ff fd94 	bl	800f070 <__hexdig_fun>
 800f548:	2800      	cmp	r0, #0
 800f54a:	d151      	bne.n	800f5f0 <__hexnan+0xe8>
 800f54c:	9a04      	ldr	r2, [sp, #16]
 800f54e:	9905      	ldr	r1, [sp, #20]
 800f550:	2a20      	cmp	r2, #32
 800f552:	d818      	bhi.n	800f586 <__hexnan+0x7e>
 800f554:	9b02      	ldr	r3, [sp, #8]
 800f556:	459b      	cmp	fp, r3
 800f558:	dd13      	ble.n	800f582 <__hexnan+0x7a>
 800f55a:	454c      	cmp	r4, r9
 800f55c:	d206      	bcs.n	800f56c <__hexnan+0x64>
 800f55e:	2d07      	cmp	r5, #7
 800f560:	dc04      	bgt.n	800f56c <__hexnan+0x64>
 800f562:	462a      	mov	r2, r5
 800f564:	4649      	mov	r1, r9
 800f566:	4620      	mov	r0, r4
 800f568:	f7ff ffa8 	bl	800f4bc <L_shift>
 800f56c:	4544      	cmp	r4, r8
 800f56e:	d952      	bls.n	800f616 <__hexnan+0x10e>
 800f570:	2300      	movs	r3, #0
 800f572:	f1a4 0904 	sub.w	r9, r4, #4
 800f576:	f844 3c04 	str.w	r3, [r4, #-4]
 800f57a:	f8cd b008 	str.w	fp, [sp, #8]
 800f57e:	464c      	mov	r4, r9
 800f580:	461d      	mov	r5, r3
 800f582:	9903      	ldr	r1, [sp, #12]
 800f584:	e7d7      	b.n	800f536 <__hexnan+0x2e>
 800f586:	2a29      	cmp	r2, #41	@ 0x29
 800f588:	d157      	bne.n	800f63a <__hexnan+0x132>
 800f58a:	3102      	adds	r1, #2
 800f58c:	f8ca 1000 	str.w	r1, [sl]
 800f590:	f1bb 0f00 	cmp.w	fp, #0
 800f594:	d051      	beq.n	800f63a <__hexnan+0x132>
 800f596:	454c      	cmp	r4, r9
 800f598:	d206      	bcs.n	800f5a8 <__hexnan+0xa0>
 800f59a:	2d07      	cmp	r5, #7
 800f59c:	dc04      	bgt.n	800f5a8 <__hexnan+0xa0>
 800f59e:	462a      	mov	r2, r5
 800f5a0:	4649      	mov	r1, r9
 800f5a2:	4620      	mov	r0, r4
 800f5a4:	f7ff ff8a 	bl	800f4bc <L_shift>
 800f5a8:	4544      	cmp	r4, r8
 800f5aa:	d936      	bls.n	800f61a <__hexnan+0x112>
 800f5ac:	f1a8 0204 	sub.w	r2, r8, #4
 800f5b0:	4623      	mov	r3, r4
 800f5b2:	f853 1b04 	ldr.w	r1, [r3], #4
 800f5b6:	f842 1f04 	str.w	r1, [r2, #4]!
 800f5ba:	429f      	cmp	r7, r3
 800f5bc:	d2f9      	bcs.n	800f5b2 <__hexnan+0xaa>
 800f5be:	1b3b      	subs	r3, r7, r4
 800f5c0:	f023 0303 	bic.w	r3, r3, #3
 800f5c4:	3304      	adds	r3, #4
 800f5c6:	3401      	adds	r4, #1
 800f5c8:	3e03      	subs	r6, #3
 800f5ca:	42b4      	cmp	r4, r6
 800f5cc:	bf88      	it	hi
 800f5ce:	2304      	movhi	r3, #4
 800f5d0:	4443      	add	r3, r8
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	f843 2b04 	str.w	r2, [r3], #4
 800f5d8:	429f      	cmp	r7, r3
 800f5da:	d2fb      	bcs.n	800f5d4 <__hexnan+0xcc>
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	b91b      	cbnz	r3, 800f5e8 <__hexnan+0xe0>
 800f5e0:	4547      	cmp	r7, r8
 800f5e2:	d128      	bne.n	800f636 <__hexnan+0x12e>
 800f5e4:	2301      	movs	r3, #1
 800f5e6:	603b      	str	r3, [r7, #0]
 800f5e8:	2005      	movs	r0, #5
 800f5ea:	b007      	add	sp, #28
 800f5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5f0:	3501      	adds	r5, #1
 800f5f2:	2d08      	cmp	r5, #8
 800f5f4:	f10b 0b01 	add.w	fp, fp, #1
 800f5f8:	dd06      	ble.n	800f608 <__hexnan+0x100>
 800f5fa:	4544      	cmp	r4, r8
 800f5fc:	d9c1      	bls.n	800f582 <__hexnan+0x7a>
 800f5fe:	2300      	movs	r3, #0
 800f600:	f844 3c04 	str.w	r3, [r4, #-4]
 800f604:	2501      	movs	r5, #1
 800f606:	3c04      	subs	r4, #4
 800f608:	6822      	ldr	r2, [r4, #0]
 800f60a:	f000 000f 	and.w	r0, r0, #15
 800f60e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f612:	6020      	str	r0, [r4, #0]
 800f614:	e7b5      	b.n	800f582 <__hexnan+0x7a>
 800f616:	2508      	movs	r5, #8
 800f618:	e7b3      	b.n	800f582 <__hexnan+0x7a>
 800f61a:	9b01      	ldr	r3, [sp, #4]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d0dd      	beq.n	800f5dc <__hexnan+0xd4>
 800f620:	f1c3 0320 	rsb	r3, r3, #32
 800f624:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f628:	40da      	lsrs	r2, r3
 800f62a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f62e:	4013      	ands	r3, r2
 800f630:	f846 3c04 	str.w	r3, [r6, #-4]
 800f634:	e7d2      	b.n	800f5dc <__hexnan+0xd4>
 800f636:	3f04      	subs	r7, #4
 800f638:	e7d0      	b.n	800f5dc <__hexnan+0xd4>
 800f63a:	2004      	movs	r0, #4
 800f63c:	e7d5      	b.n	800f5ea <__hexnan+0xe2>

0800f63e <__ascii_mbtowc>:
 800f63e:	b082      	sub	sp, #8
 800f640:	b901      	cbnz	r1, 800f644 <__ascii_mbtowc+0x6>
 800f642:	a901      	add	r1, sp, #4
 800f644:	b142      	cbz	r2, 800f658 <__ascii_mbtowc+0x1a>
 800f646:	b14b      	cbz	r3, 800f65c <__ascii_mbtowc+0x1e>
 800f648:	7813      	ldrb	r3, [r2, #0]
 800f64a:	600b      	str	r3, [r1, #0]
 800f64c:	7812      	ldrb	r2, [r2, #0]
 800f64e:	1e10      	subs	r0, r2, #0
 800f650:	bf18      	it	ne
 800f652:	2001      	movne	r0, #1
 800f654:	b002      	add	sp, #8
 800f656:	4770      	bx	lr
 800f658:	4610      	mov	r0, r2
 800f65a:	e7fb      	b.n	800f654 <__ascii_mbtowc+0x16>
 800f65c:	f06f 0001 	mvn.w	r0, #1
 800f660:	e7f8      	b.n	800f654 <__ascii_mbtowc+0x16>

0800f662 <_realloc_r>:
 800f662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f666:	4680      	mov	r8, r0
 800f668:	4615      	mov	r5, r2
 800f66a:	460c      	mov	r4, r1
 800f66c:	b921      	cbnz	r1, 800f678 <_realloc_r+0x16>
 800f66e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f672:	4611      	mov	r1, r2
 800f674:	f7fd be88 	b.w	800d388 <_malloc_r>
 800f678:	b92a      	cbnz	r2, 800f686 <_realloc_r+0x24>
 800f67a:	f7fd fe11 	bl	800d2a0 <_free_r>
 800f67e:	2400      	movs	r4, #0
 800f680:	4620      	mov	r0, r4
 800f682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f686:	f000 f840 	bl	800f70a <_malloc_usable_size_r>
 800f68a:	4285      	cmp	r5, r0
 800f68c:	4606      	mov	r6, r0
 800f68e:	d802      	bhi.n	800f696 <_realloc_r+0x34>
 800f690:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f694:	d8f4      	bhi.n	800f680 <_realloc_r+0x1e>
 800f696:	4629      	mov	r1, r5
 800f698:	4640      	mov	r0, r8
 800f69a:	f7fd fe75 	bl	800d388 <_malloc_r>
 800f69e:	4607      	mov	r7, r0
 800f6a0:	2800      	cmp	r0, #0
 800f6a2:	d0ec      	beq.n	800f67e <_realloc_r+0x1c>
 800f6a4:	42b5      	cmp	r5, r6
 800f6a6:	462a      	mov	r2, r5
 800f6a8:	4621      	mov	r1, r4
 800f6aa:	bf28      	it	cs
 800f6ac:	4632      	movcs	r2, r6
 800f6ae:	f7fc ff96 	bl	800c5de <memcpy>
 800f6b2:	4621      	mov	r1, r4
 800f6b4:	4640      	mov	r0, r8
 800f6b6:	f7fd fdf3 	bl	800d2a0 <_free_r>
 800f6ba:	463c      	mov	r4, r7
 800f6bc:	e7e0      	b.n	800f680 <_realloc_r+0x1e>

0800f6be <__ascii_wctomb>:
 800f6be:	4603      	mov	r3, r0
 800f6c0:	4608      	mov	r0, r1
 800f6c2:	b141      	cbz	r1, 800f6d6 <__ascii_wctomb+0x18>
 800f6c4:	2aff      	cmp	r2, #255	@ 0xff
 800f6c6:	d904      	bls.n	800f6d2 <__ascii_wctomb+0x14>
 800f6c8:	228a      	movs	r2, #138	@ 0x8a
 800f6ca:	601a      	str	r2, [r3, #0]
 800f6cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f6d0:	4770      	bx	lr
 800f6d2:	700a      	strb	r2, [r1, #0]
 800f6d4:	2001      	movs	r0, #1
 800f6d6:	4770      	bx	lr

0800f6d8 <fiprintf>:
 800f6d8:	b40e      	push	{r1, r2, r3}
 800f6da:	b503      	push	{r0, r1, lr}
 800f6dc:	4601      	mov	r1, r0
 800f6de:	ab03      	add	r3, sp, #12
 800f6e0:	4805      	ldr	r0, [pc, #20]	@ (800f6f8 <fiprintf+0x20>)
 800f6e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6e6:	6800      	ldr	r0, [r0, #0]
 800f6e8:	9301      	str	r3, [sp, #4]
 800f6ea:	f000 f83f 	bl	800f76c <_vfiprintf_r>
 800f6ee:	b002      	add	sp, #8
 800f6f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f6f4:	b003      	add	sp, #12
 800f6f6:	4770      	bx	lr
 800f6f8:	20000024 	.word	0x20000024

0800f6fc <abort>:
 800f6fc:	b508      	push	{r3, lr}
 800f6fe:	2006      	movs	r0, #6
 800f700:	f000 fa08 	bl	800fb14 <raise>
 800f704:	2001      	movs	r0, #1
 800f706:	f7f2 ffaf 	bl	8002668 <_exit>

0800f70a <_malloc_usable_size_r>:
 800f70a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f70e:	1f18      	subs	r0, r3, #4
 800f710:	2b00      	cmp	r3, #0
 800f712:	bfbc      	itt	lt
 800f714:	580b      	ldrlt	r3, [r1, r0]
 800f716:	18c0      	addlt	r0, r0, r3
 800f718:	4770      	bx	lr

0800f71a <__sfputc_r>:
 800f71a:	6893      	ldr	r3, [r2, #8]
 800f71c:	3b01      	subs	r3, #1
 800f71e:	2b00      	cmp	r3, #0
 800f720:	b410      	push	{r4}
 800f722:	6093      	str	r3, [r2, #8]
 800f724:	da08      	bge.n	800f738 <__sfputc_r+0x1e>
 800f726:	6994      	ldr	r4, [r2, #24]
 800f728:	42a3      	cmp	r3, r4
 800f72a:	db01      	blt.n	800f730 <__sfputc_r+0x16>
 800f72c:	290a      	cmp	r1, #10
 800f72e:	d103      	bne.n	800f738 <__sfputc_r+0x1e>
 800f730:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f734:	f000 b932 	b.w	800f99c <__swbuf_r>
 800f738:	6813      	ldr	r3, [r2, #0]
 800f73a:	1c58      	adds	r0, r3, #1
 800f73c:	6010      	str	r0, [r2, #0]
 800f73e:	7019      	strb	r1, [r3, #0]
 800f740:	4608      	mov	r0, r1
 800f742:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f746:	4770      	bx	lr

0800f748 <__sfputs_r>:
 800f748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f74a:	4606      	mov	r6, r0
 800f74c:	460f      	mov	r7, r1
 800f74e:	4614      	mov	r4, r2
 800f750:	18d5      	adds	r5, r2, r3
 800f752:	42ac      	cmp	r4, r5
 800f754:	d101      	bne.n	800f75a <__sfputs_r+0x12>
 800f756:	2000      	movs	r0, #0
 800f758:	e007      	b.n	800f76a <__sfputs_r+0x22>
 800f75a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f75e:	463a      	mov	r2, r7
 800f760:	4630      	mov	r0, r6
 800f762:	f7ff ffda 	bl	800f71a <__sfputc_r>
 800f766:	1c43      	adds	r3, r0, #1
 800f768:	d1f3      	bne.n	800f752 <__sfputs_r+0xa>
 800f76a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f76c <_vfiprintf_r>:
 800f76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f770:	460d      	mov	r5, r1
 800f772:	b09d      	sub	sp, #116	@ 0x74
 800f774:	4614      	mov	r4, r2
 800f776:	4698      	mov	r8, r3
 800f778:	4606      	mov	r6, r0
 800f77a:	b118      	cbz	r0, 800f784 <_vfiprintf_r+0x18>
 800f77c:	6a03      	ldr	r3, [r0, #32]
 800f77e:	b90b      	cbnz	r3, 800f784 <_vfiprintf_r+0x18>
 800f780:	f7fc fda4 	bl	800c2cc <__sinit>
 800f784:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f786:	07d9      	lsls	r1, r3, #31
 800f788:	d405      	bmi.n	800f796 <_vfiprintf_r+0x2a>
 800f78a:	89ab      	ldrh	r3, [r5, #12]
 800f78c:	059a      	lsls	r2, r3, #22
 800f78e:	d402      	bmi.n	800f796 <_vfiprintf_r+0x2a>
 800f790:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f792:	f7fc ff22 	bl	800c5da <__retarget_lock_acquire_recursive>
 800f796:	89ab      	ldrh	r3, [r5, #12]
 800f798:	071b      	lsls	r3, r3, #28
 800f79a:	d501      	bpl.n	800f7a0 <_vfiprintf_r+0x34>
 800f79c:	692b      	ldr	r3, [r5, #16]
 800f79e:	b99b      	cbnz	r3, 800f7c8 <_vfiprintf_r+0x5c>
 800f7a0:	4629      	mov	r1, r5
 800f7a2:	4630      	mov	r0, r6
 800f7a4:	f000 f938 	bl	800fa18 <__swsetup_r>
 800f7a8:	b170      	cbz	r0, 800f7c8 <_vfiprintf_r+0x5c>
 800f7aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f7ac:	07dc      	lsls	r4, r3, #31
 800f7ae:	d504      	bpl.n	800f7ba <_vfiprintf_r+0x4e>
 800f7b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f7b4:	b01d      	add	sp, #116	@ 0x74
 800f7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7ba:	89ab      	ldrh	r3, [r5, #12]
 800f7bc:	0598      	lsls	r0, r3, #22
 800f7be:	d4f7      	bmi.n	800f7b0 <_vfiprintf_r+0x44>
 800f7c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f7c2:	f7fc ff0b 	bl	800c5dc <__retarget_lock_release_recursive>
 800f7c6:	e7f3      	b.n	800f7b0 <_vfiprintf_r+0x44>
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7cc:	2320      	movs	r3, #32
 800f7ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f7d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7d6:	2330      	movs	r3, #48	@ 0x30
 800f7d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f988 <_vfiprintf_r+0x21c>
 800f7dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f7e0:	f04f 0901 	mov.w	r9, #1
 800f7e4:	4623      	mov	r3, r4
 800f7e6:	469a      	mov	sl, r3
 800f7e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7ec:	b10a      	cbz	r2, 800f7f2 <_vfiprintf_r+0x86>
 800f7ee:	2a25      	cmp	r2, #37	@ 0x25
 800f7f0:	d1f9      	bne.n	800f7e6 <_vfiprintf_r+0x7a>
 800f7f2:	ebba 0b04 	subs.w	fp, sl, r4
 800f7f6:	d00b      	beq.n	800f810 <_vfiprintf_r+0xa4>
 800f7f8:	465b      	mov	r3, fp
 800f7fa:	4622      	mov	r2, r4
 800f7fc:	4629      	mov	r1, r5
 800f7fe:	4630      	mov	r0, r6
 800f800:	f7ff ffa2 	bl	800f748 <__sfputs_r>
 800f804:	3001      	adds	r0, #1
 800f806:	f000 80a7 	beq.w	800f958 <_vfiprintf_r+0x1ec>
 800f80a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f80c:	445a      	add	r2, fp
 800f80e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f810:	f89a 3000 	ldrb.w	r3, [sl]
 800f814:	2b00      	cmp	r3, #0
 800f816:	f000 809f 	beq.w	800f958 <_vfiprintf_r+0x1ec>
 800f81a:	2300      	movs	r3, #0
 800f81c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f820:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f824:	f10a 0a01 	add.w	sl, sl, #1
 800f828:	9304      	str	r3, [sp, #16]
 800f82a:	9307      	str	r3, [sp, #28]
 800f82c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f830:	931a      	str	r3, [sp, #104]	@ 0x68
 800f832:	4654      	mov	r4, sl
 800f834:	2205      	movs	r2, #5
 800f836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f83a:	4853      	ldr	r0, [pc, #332]	@ (800f988 <_vfiprintf_r+0x21c>)
 800f83c:	f7f0 fcd0 	bl	80001e0 <memchr>
 800f840:	9a04      	ldr	r2, [sp, #16]
 800f842:	b9d8      	cbnz	r0, 800f87c <_vfiprintf_r+0x110>
 800f844:	06d1      	lsls	r1, r2, #27
 800f846:	bf44      	itt	mi
 800f848:	2320      	movmi	r3, #32
 800f84a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f84e:	0713      	lsls	r3, r2, #28
 800f850:	bf44      	itt	mi
 800f852:	232b      	movmi	r3, #43	@ 0x2b
 800f854:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f858:	f89a 3000 	ldrb.w	r3, [sl]
 800f85c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f85e:	d015      	beq.n	800f88c <_vfiprintf_r+0x120>
 800f860:	9a07      	ldr	r2, [sp, #28]
 800f862:	4654      	mov	r4, sl
 800f864:	2000      	movs	r0, #0
 800f866:	f04f 0c0a 	mov.w	ip, #10
 800f86a:	4621      	mov	r1, r4
 800f86c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f870:	3b30      	subs	r3, #48	@ 0x30
 800f872:	2b09      	cmp	r3, #9
 800f874:	d94b      	bls.n	800f90e <_vfiprintf_r+0x1a2>
 800f876:	b1b0      	cbz	r0, 800f8a6 <_vfiprintf_r+0x13a>
 800f878:	9207      	str	r2, [sp, #28]
 800f87a:	e014      	b.n	800f8a6 <_vfiprintf_r+0x13a>
 800f87c:	eba0 0308 	sub.w	r3, r0, r8
 800f880:	fa09 f303 	lsl.w	r3, r9, r3
 800f884:	4313      	orrs	r3, r2
 800f886:	9304      	str	r3, [sp, #16]
 800f888:	46a2      	mov	sl, r4
 800f88a:	e7d2      	b.n	800f832 <_vfiprintf_r+0xc6>
 800f88c:	9b03      	ldr	r3, [sp, #12]
 800f88e:	1d19      	adds	r1, r3, #4
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	9103      	str	r1, [sp, #12]
 800f894:	2b00      	cmp	r3, #0
 800f896:	bfbb      	ittet	lt
 800f898:	425b      	neglt	r3, r3
 800f89a:	f042 0202 	orrlt.w	r2, r2, #2
 800f89e:	9307      	strge	r3, [sp, #28]
 800f8a0:	9307      	strlt	r3, [sp, #28]
 800f8a2:	bfb8      	it	lt
 800f8a4:	9204      	strlt	r2, [sp, #16]
 800f8a6:	7823      	ldrb	r3, [r4, #0]
 800f8a8:	2b2e      	cmp	r3, #46	@ 0x2e
 800f8aa:	d10a      	bne.n	800f8c2 <_vfiprintf_r+0x156>
 800f8ac:	7863      	ldrb	r3, [r4, #1]
 800f8ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800f8b0:	d132      	bne.n	800f918 <_vfiprintf_r+0x1ac>
 800f8b2:	9b03      	ldr	r3, [sp, #12]
 800f8b4:	1d1a      	adds	r2, r3, #4
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	9203      	str	r2, [sp, #12]
 800f8ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f8be:	3402      	adds	r4, #2
 800f8c0:	9305      	str	r3, [sp, #20]
 800f8c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f998 <_vfiprintf_r+0x22c>
 800f8c6:	7821      	ldrb	r1, [r4, #0]
 800f8c8:	2203      	movs	r2, #3
 800f8ca:	4650      	mov	r0, sl
 800f8cc:	f7f0 fc88 	bl	80001e0 <memchr>
 800f8d0:	b138      	cbz	r0, 800f8e2 <_vfiprintf_r+0x176>
 800f8d2:	9b04      	ldr	r3, [sp, #16]
 800f8d4:	eba0 000a 	sub.w	r0, r0, sl
 800f8d8:	2240      	movs	r2, #64	@ 0x40
 800f8da:	4082      	lsls	r2, r0
 800f8dc:	4313      	orrs	r3, r2
 800f8de:	3401      	adds	r4, #1
 800f8e0:	9304      	str	r3, [sp, #16]
 800f8e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8e6:	4829      	ldr	r0, [pc, #164]	@ (800f98c <_vfiprintf_r+0x220>)
 800f8e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f8ec:	2206      	movs	r2, #6
 800f8ee:	f7f0 fc77 	bl	80001e0 <memchr>
 800f8f2:	2800      	cmp	r0, #0
 800f8f4:	d03f      	beq.n	800f976 <_vfiprintf_r+0x20a>
 800f8f6:	4b26      	ldr	r3, [pc, #152]	@ (800f990 <_vfiprintf_r+0x224>)
 800f8f8:	bb1b      	cbnz	r3, 800f942 <_vfiprintf_r+0x1d6>
 800f8fa:	9b03      	ldr	r3, [sp, #12]
 800f8fc:	3307      	adds	r3, #7
 800f8fe:	f023 0307 	bic.w	r3, r3, #7
 800f902:	3308      	adds	r3, #8
 800f904:	9303      	str	r3, [sp, #12]
 800f906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f908:	443b      	add	r3, r7
 800f90a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f90c:	e76a      	b.n	800f7e4 <_vfiprintf_r+0x78>
 800f90e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f912:	460c      	mov	r4, r1
 800f914:	2001      	movs	r0, #1
 800f916:	e7a8      	b.n	800f86a <_vfiprintf_r+0xfe>
 800f918:	2300      	movs	r3, #0
 800f91a:	3401      	adds	r4, #1
 800f91c:	9305      	str	r3, [sp, #20]
 800f91e:	4619      	mov	r1, r3
 800f920:	f04f 0c0a 	mov.w	ip, #10
 800f924:	4620      	mov	r0, r4
 800f926:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f92a:	3a30      	subs	r2, #48	@ 0x30
 800f92c:	2a09      	cmp	r2, #9
 800f92e:	d903      	bls.n	800f938 <_vfiprintf_r+0x1cc>
 800f930:	2b00      	cmp	r3, #0
 800f932:	d0c6      	beq.n	800f8c2 <_vfiprintf_r+0x156>
 800f934:	9105      	str	r1, [sp, #20]
 800f936:	e7c4      	b.n	800f8c2 <_vfiprintf_r+0x156>
 800f938:	fb0c 2101 	mla	r1, ip, r1, r2
 800f93c:	4604      	mov	r4, r0
 800f93e:	2301      	movs	r3, #1
 800f940:	e7f0      	b.n	800f924 <_vfiprintf_r+0x1b8>
 800f942:	ab03      	add	r3, sp, #12
 800f944:	9300      	str	r3, [sp, #0]
 800f946:	462a      	mov	r2, r5
 800f948:	4b12      	ldr	r3, [pc, #72]	@ (800f994 <_vfiprintf_r+0x228>)
 800f94a:	a904      	add	r1, sp, #16
 800f94c:	4630      	mov	r0, r6
 800f94e:	f7fb fe65 	bl	800b61c <_printf_float>
 800f952:	4607      	mov	r7, r0
 800f954:	1c78      	adds	r0, r7, #1
 800f956:	d1d6      	bne.n	800f906 <_vfiprintf_r+0x19a>
 800f958:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f95a:	07d9      	lsls	r1, r3, #31
 800f95c:	d405      	bmi.n	800f96a <_vfiprintf_r+0x1fe>
 800f95e:	89ab      	ldrh	r3, [r5, #12]
 800f960:	059a      	lsls	r2, r3, #22
 800f962:	d402      	bmi.n	800f96a <_vfiprintf_r+0x1fe>
 800f964:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f966:	f7fc fe39 	bl	800c5dc <__retarget_lock_release_recursive>
 800f96a:	89ab      	ldrh	r3, [r5, #12]
 800f96c:	065b      	lsls	r3, r3, #25
 800f96e:	f53f af1f 	bmi.w	800f7b0 <_vfiprintf_r+0x44>
 800f972:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f974:	e71e      	b.n	800f7b4 <_vfiprintf_r+0x48>
 800f976:	ab03      	add	r3, sp, #12
 800f978:	9300      	str	r3, [sp, #0]
 800f97a:	462a      	mov	r2, r5
 800f97c:	4b05      	ldr	r3, [pc, #20]	@ (800f994 <_vfiprintf_r+0x228>)
 800f97e:	a904      	add	r1, sp, #16
 800f980:	4630      	mov	r0, r6
 800f982:	f7fc f8e3 	bl	800bb4c <_printf_i>
 800f986:	e7e4      	b.n	800f952 <_vfiprintf_r+0x1e6>
 800f988:	08012a11 	.word	0x08012a11
 800f98c:	08012a1b 	.word	0x08012a1b
 800f990:	0800b61d 	.word	0x0800b61d
 800f994:	0800f749 	.word	0x0800f749
 800f998:	08012a17 	.word	0x08012a17

0800f99c <__swbuf_r>:
 800f99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f99e:	460e      	mov	r6, r1
 800f9a0:	4614      	mov	r4, r2
 800f9a2:	4605      	mov	r5, r0
 800f9a4:	b118      	cbz	r0, 800f9ae <__swbuf_r+0x12>
 800f9a6:	6a03      	ldr	r3, [r0, #32]
 800f9a8:	b90b      	cbnz	r3, 800f9ae <__swbuf_r+0x12>
 800f9aa:	f7fc fc8f 	bl	800c2cc <__sinit>
 800f9ae:	69a3      	ldr	r3, [r4, #24]
 800f9b0:	60a3      	str	r3, [r4, #8]
 800f9b2:	89a3      	ldrh	r3, [r4, #12]
 800f9b4:	071a      	lsls	r2, r3, #28
 800f9b6:	d501      	bpl.n	800f9bc <__swbuf_r+0x20>
 800f9b8:	6923      	ldr	r3, [r4, #16]
 800f9ba:	b943      	cbnz	r3, 800f9ce <__swbuf_r+0x32>
 800f9bc:	4621      	mov	r1, r4
 800f9be:	4628      	mov	r0, r5
 800f9c0:	f000 f82a 	bl	800fa18 <__swsetup_r>
 800f9c4:	b118      	cbz	r0, 800f9ce <__swbuf_r+0x32>
 800f9c6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800f9ca:	4638      	mov	r0, r7
 800f9cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9ce:	6823      	ldr	r3, [r4, #0]
 800f9d0:	6922      	ldr	r2, [r4, #16]
 800f9d2:	1a98      	subs	r0, r3, r2
 800f9d4:	6963      	ldr	r3, [r4, #20]
 800f9d6:	b2f6      	uxtb	r6, r6
 800f9d8:	4283      	cmp	r3, r0
 800f9da:	4637      	mov	r7, r6
 800f9dc:	dc05      	bgt.n	800f9ea <__swbuf_r+0x4e>
 800f9de:	4621      	mov	r1, r4
 800f9e0:	4628      	mov	r0, r5
 800f9e2:	f7ff fa6f 	bl	800eec4 <_fflush_r>
 800f9e6:	2800      	cmp	r0, #0
 800f9e8:	d1ed      	bne.n	800f9c6 <__swbuf_r+0x2a>
 800f9ea:	68a3      	ldr	r3, [r4, #8]
 800f9ec:	3b01      	subs	r3, #1
 800f9ee:	60a3      	str	r3, [r4, #8]
 800f9f0:	6823      	ldr	r3, [r4, #0]
 800f9f2:	1c5a      	adds	r2, r3, #1
 800f9f4:	6022      	str	r2, [r4, #0]
 800f9f6:	701e      	strb	r6, [r3, #0]
 800f9f8:	6962      	ldr	r2, [r4, #20]
 800f9fa:	1c43      	adds	r3, r0, #1
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	d004      	beq.n	800fa0a <__swbuf_r+0x6e>
 800fa00:	89a3      	ldrh	r3, [r4, #12]
 800fa02:	07db      	lsls	r3, r3, #31
 800fa04:	d5e1      	bpl.n	800f9ca <__swbuf_r+0x2e>
 800fa06:	2e0a      	cmp	r6, #10
 800fa08:	d1df      	bne.n	800f9ca <__swbuf_r+0x2e>
 800fa0a:	4621      	mov	r1, r4
 800fa0c:	4628      	mov	r0, r5
 800fa0e:	f7ff fa59 	bl	800eec4 <_fflush_r>
 800fa12:	2800      	cmp	r0, #0
 800fa14:	d0d9      	beq.n	800f9ca <__swbuf_r+0x2e>
 800fa16:	e7d6      	b.n	800f9c6 <__swbuf_r+0x2a>

0800fa18 <__swsetup_r>:
 800fa18:	b538      	push	{r3, r4, r5, lr}
 800fa1a:	4b29      	ldr	r3, [pc, #164]	@ (800fac0 <__swsetup_r+0xa8>)
 800fa1c:	4605      	mov	r5, r0
 800fa1e:	6818      	ldr	r0, [r3, #0]
 800fa20:	460c      	mov	r4, r1
 800fa22:	b118      	cbz	r0, 800fa2c <__swsetup_r+0x14>
 800fa24:	6a03      	ldr	r3, [r0, #32]
 800fa26:	b90b      	cbnz	r3, 800fa2c <__swsetup_r+0x14>
 800fa28:	f7fc fc50 	bl	800c2cc <__sinit>
 800fa2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa30:	0719      	lsls	r1, r3, #28
 800fa32:	d422      	bmi.n	800fa7a <__swsetup_r+0x62>
 800fa34:	06da      	lsls	r2, r3, #27
 800fa36:	d407      	bmi.n	800fa48 <__swsetup_r+0x30>
 800fa38:	2209      	movs	r2, #9
 800fa3a:	602a      	str	r2, [r5, #0]
 800fa3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa40:	81a3      	strh	r3, [r4, #12]
 800fa42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fa46:	e033      	b.n	800fab0 <__swsetup_r+0x98>
 800fa48:	0758      	lsls	r0, r3, #29
 800fa4a:	d512      	bpl.n	800fa72 <__swsetup_r+0x5a>
 800fa4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fa4e:	b141      	cbz	r1, 800fa62 <__swsetup_r+0x4a>
 800fa50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fa54:	4299      	cmp	r1, r3
 800fa56:	d002      	beq.n	800fa5e <__swsetup_r+0x46>
 800fa58:	4628      	mov	r0, r5
 800fa5a:	f7fd fc21 	bl	800d2a0 <_free_r>
 800fa5e:	2300      	movs	r3, #0
 800fa60:	6363      	str	r3, [r4, #52]	@ 0x34
 800fa62:	89a3      	ldrh	r3, [r4, #12]
 800fa64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fa68:	81a3      	strh	r3, [r4, #12]
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	6063      	str	r3, [r4, #4]
 800fa6e:	6923      	ldr	r3, [r4, #16]
 800fa70:	6023      	str	r3, [r4, #0]
 800fa72:	89a3      	ldrh	r3, [r4, #12]
 800fa74:	f043 0308 	orr.w	r3, r3, #8
 800fa78:	81a3      	strh	r3, [r4, #12]
 800fa7a:	6923      	ldr	r3, [r4, #16]
 800fa7c:	b94b      	cbnz	r3, 800fa92 <__swsetup_r+0x7a>
 800fa7e:	89a3      	ldrh	r3, [r4, #12]
 800fa80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fa84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fa88:	d003      	beq.n	800fa92 <__swsetup_r+0x7a>
 800fa8a:	4621      	mov	r1, r4
 800fa8c:	4628      	mov	r0, r5
 800fa8e:	f000 f883 	bl	800fb98 <__smakebuf_r>
 800fa92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa96:	f013 0201 	ands.w	r2, r3, #1
 800fa9a:	d00a      	beq.n	800fab2 <__swsetup_r+0x9a>
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	60a2      	str	r2, [r4, #8]
 800faa0:	6962      	ldr	r2, [r4, #20]
 800faa2:	4252      	negs	r2, r2
 800faa4:	61a2      	str	r2, [r4, #24]
 800faa6:	6922      	ldr	r2, [r4, #16]
 800faa8:	b942      	cbnz	r2, 800fabc <__swsetup_r+0xa4>
 800faaa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800faae:	d1c5      	bne.n	800fa3c <__swsetup_r+0x24>
 800fab0:	bd38      	pop	{r3, r4, r5, pc}
 800fab2:	0799      	lsls	r1, r3, #30
 800fab4:	bf58      	it	pl
 800fab6:	6962      	ldrpl	r2, [r4, #20]
 800fab8:	60a2      	str	r2, [r4, #8]
 800faba:	e7f4      	b.n	800faa6 <__swsetup_r+0x8e>
 800fabc:	2000      	movs	r0, #0
 800fabe:	e7f7      	b.n	800fab0 <__swsetup_r+0x98>
 800fac0:	20000024 	.word	0x20000024

0800fac4 <_raise_r>:
 800fac4:	291f      	cmp	r1, #31
 800fac6:	b538      	push	{r3, r4, r5, lr}
 800fac8:	4605      	mov	r5, r0
 800faca:	460c      	mov	r4, r1
 800facc:	d904      	bls.n	800fad8 <_raise_r+0x14>
 800face:	2316      	movs	r3, #22
 800fad0:	6003      	str	r3, [r0, #0]
 800fad2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fad6:	bd38      	pop	{r3, r4, r5, pc}
 800fad8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fada:	b112      	cbz	r2, 800fae2 <_raise_r+0x1e>
 800fadc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fae0:	b94b      	cbnz	r3, 800faf6 <_raise_r+0x32>
 800fae2:	4628      	mov	r0, r5
 800fae4:	f000 f830 	bl	800fb48 <_getpid_r>
 800fae8:	4622      	mov	r2, r4
 800faea:	4601      	mov	r1, r0
 800faec:	4628      	mov	r0, r5
 800faee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800faf2:	f000 b817 	b.w	800fb24 <_kill_r>
 800faf6:	2b01      	cmp	r3, #1
 800faf8:	d00a      	beq.n	800fb10 <_raise_r+0x4c>
 800fafa:	1c59      	adds	r1, r3, #1
 800fafc:	d103      	bne.n	800fb06 <_raise_r+0x42>
 800fafe:	2316      	movs	r3, #22
 800fb00:	6003      	str	r3, [r0, #0]
 800fb02:	2001      	movs	r0, #1
 800fb04:	e7e7      	b.n	800fad6 <_raise_r+0x12>
 800fb06:	2100      	movs	r1, #0
 800fb08:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fb0c:	4620      	mov	r0, r4
 800fb0e:	4798      	blx	r3
 800fb10:	2000      	movs	r0, #0
 800fb12:	e7e0      	b.n	800fad6 <_raise_r+0x12>

0800fb14 <raise>:
 800fb14:	4b02      	ldr	r3, [pc, #8]	@ (800fb20 <raise+0xc>)
 800fb16:	4601      	mov	r1, r0
 800fb18:	6818      	ldr	r0, [r3, #0]
 800fb1a:	f7ff bfd3 	b.w	800fac4 <_raise_r>
 800fb1e:	bf00      	nop
 800fb20:	20000024 	.word	0x20000024

0800fb24 <_kill_r>:
 800fb24:	b538      	push	{r3, r4, r5, lr}
 800fb26:	4d07      	ldr	r5, [pc, #28]	@ (800fb44 <_kill_r+0x20>)
 800fb28:	2300      	movs	r3, #0
 800fb2a:	4604      	mov	r4, r0
 800fb2c:	4608      	mov	r0, r1
 800fb2e:	4611      	mov	r1, r2
 800fb30:	602b      	str	r3, [r5, #0]
 800fb32:	f7f2 fd89 	bl	8002648 <_kill>
 800fb36:	1c43      	adds	r3, r0, #1
 800fb38:	d102      	bne.n	800fb40 <_kill_r+0x1c>
 800fb3a:	682b      	ldr	r3, [r5, #0]
 800fb3c:	b103      	cbz	r3, 800fb40 <_kill_r+0x1c>
 800fb3e:	6023      	str	r3, [r4, #0]
 800fb40:	bd38      	pop	{r3, r4, r5, pc}
 800fb42:	bf00      	nop
 800fb44:	200035c0 	.word	0x200035c0

0800fb48 <_getpid_r>:
 800fb48:	f7f2 bd76 	b.w	8002638 <_getpid>

0800fb4c <__swhatbuf_r>:
 800fb4c:	b570      	push	{r4, r5, r6, lr}
 800fb4e:	460c      	mov	r4, r1
 800fb50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb54:	2900      	cmp	r1, #0
 800fb56:	b096      	sub	sp, #88	@ 0x58
 800fb58:	4615      	mov	r5, r2
 800fb5a:	461e      	mov	r6, r3
 800fb5c:	da0d      	bge.n	800fb7a <__swhatbuf_r+0x2e>
 800fb5e:	89a3      	ldrh	r3, [r4, #12]
 800fb60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fb64:	f04f 0100 	mov.w	r1, #0
 800fb68:	bf14      	ite	ne
 800fb6a:	2340      	movne	r3, #64	@ 0x40
 800fb6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fb70:	2000      	movs	r0, #0
 800fb72:	6031      	str	r1, [r6, #0]
 800fb74:	602b      	str	r3, [r5, #0]
 800fb76:	b016      	add	sp, #88	@ 0x58
 800fb78:	bd70      	pop	{r4, r5, r6, pc}
 800fb7a:	466a      	mov	r2, sp
 800fb7c:	f000 f848 	bl	800fc10 <_fstat_r>
 800fb80:	2800      	cmp	r0, #0
 800fb82:	dbec      	blt.n	800fb5e <__swhatbuf_r+0x12>
 800fb84:	9901      	ldr	r1, [sp, #4]
 800fb86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fb8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fb8e:	4259      	negs	r1, r3
 800fb90:	4159      	adcs	r1, r3
 800fb92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fb96:	e7eb      	b.n	800fb70 <__swhatbuf_r+0x24>

0800fb98 <__smakebuf_r>:
 800fb98:	898b      	ldrh	r3, [r1, #12]
 800fb9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb9c:	079d      	lsls	r5, r3, #30
 800fb9e:	4606      	mov	r6, r0
 800fba0:	460c      	mov	r4, r1
 800fba2:	d507      	bpl.n	800fbb4 <__smakebuf_r+0x1c>
 800fba4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fba8:	6023      	str	r3, [r4, #0]
 800fbaa:	6123      	str	r3, [r4, #16]
 800fbac:	2301      	movs	r3, #1
 800fbae:	6163      	str	r3, [r4, #20]
 800fbb0:	b003      	add	sp, #12
 800fbb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbb4:	ab01      	add	r3, sp, #4
 800fbb6:	466a      	mov	r2, sp
 800fbb8:	f7ff ffc8 	bl	800fb4c <__swhatbuf_r>
 800fbbc:	9f00      	ldr	r7, [sp, #0]
 800fbbe:	4605      	mov	r5, r0
 800fbc0:	4639      	mov	r1, r7
 800fbc2:	4630      	mov	r0, r6
 800fbc4:	f7fd fbe0 	bl	800d388 <_malloc_r>
 800fbc8:	b948      	cbnz	r0, 800fbde <__smakebuf_r+0x46>
 800fbca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbce:	059a      	lsls	r2, r3, #22
 800fbd0:	d4ee      	bmi.n	800fbb0 <__smakebuf_r+0x18>
 800fbd2:	f023 0303 	bic.w	r3, r3, #3
 800fbd6:	f043 0302 	orr.w	r3, r3, #2
 800fbda:	81a3      	strh	r3, [r4, #12]
 800fbdc:	e7e2      	b.n	800fba4 <__smakebuf_r+0xc>
 800fbde:	89a3      	ldrh	r3, [r4, #12]
 800fbe0:	6020      	str	r0, [r4, #0]
 800fbe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fbe6:	81a3      	strh	r3, [r4, #12]
 800fbe8:	9b01      	ldr	r3, [sp, #4]
 800fbea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fbee:	b15b      	cbz	r3, 800fc08 <__smakebuf_r+0x70>
 800fbf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fbf4:	4630      	mov	r0, r6
 800fbf6:	f000 f81d 	bl	800fc34 <_isatty_r>
 800fbfa:	b128      	cbz	r0, 800fc08 <__smakebuf_r+0x70>
 800fbfc:	89a3      	ldrh	r3, [r4, #12]
 800fbfe:	f023 0303 	bic.w	r3, r3, #3
 800fc02:	f043 0301 	orr.w	r3, r3, #1
 800fc06:	81a3      	strh	r3, [r4, #12]
 800fc08:	89a3      	ldrh	r3, [r4, #12]
 800fc0a:	431d      	orrs	r5, r3
 800fc0c:	81a5      	strh	r5, [r4, #12]
 800fc0e:	e7cf      	b.n	800fbb0 <__smakebuf_r+0x18>

0800fc10 <_fstat_r>:
 800fc10:	b538      	push	{r3, r4, r5, lr}
 800fc12:	4d07      	ldr	r5, [pc, #28]	@ (800fc30 <_fstat_r+0x20>)
 800fc14:	2300      	movs	r3, #0
 800fc16:	4604      	mov	r4, r0
 800fc18:	4608      	mov	r0, r1
 800fc1a:	4611      	mov	r1, r2
 800fc1c:	602b      	str	r3, [r5, #0]
 800fc1e:	f7f2 fd73 	bl	8002708 <_fstat>
 800fc22:	1c43      	adds	r3, r0, #1
 800fc24:	d102      	bne.n	800fc2c <_fstat_r+0x1c>
 800fc26:	682b      	ldr	r3, [r5, #0]
 800fc28:	b103      	cbz	r3, 800fc2c <_fstat_r+0x1c>
 800fc2a:	6023      	str	r3, [r4, #0]
 800fc2c:	bd38      	pop	{r3, r4, r5, pc}
 800fc2e:	bf00      	nop
 800fc30:	200035c0 	.word	0x200035c0

0800fc34 <_isatty_r>:
 800fc34:	b538      	push	{r3, r4, r5, lr}
 800fc36:	4d06      	ldr	r5, [pc, #24]	@ (800fc50 <_isatty_r+0x1c>)
 800fc38:	2300      	movs	r3, #0
 800fc3a:	4604      	mov	r4, r0
 800fc3c:	4608      	mov	r0, r1
 800fc3e:	602b      	str	r3, [r5, #0]
 800fc40:	f7f2 fd72 	bl	8002728 <_isatty>
 800fc44:	1c43      	adds	r3, r0, #1
 800fc46:	d102      	bne.n	800fc4e <_isatty_r+0x1a>
 800fc48:	682b      	ldr	r3, [r5, #0]
 800fc4a:	b103      	cbz	r3, 800fc4e <_isatty_r+0x1a>
 800fc4c:	6023      	str	r3, [r4, #0]
 800fc4e:	bd38      	pop	{r3, r4, r5, pc}
 800fc50:	200035c0 	.word	0x200035c0

0800fc54 <_init>:
 800fc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc56:	bf00      	nop
 800fc58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc5a:	bc08      	pop	{r3}
 800fc5c:	469e      	mov	lr, r3
 800fc5e:	4770      	bx	lr

0800fc60 <_fini>:
 800fc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc62:	bf00      	nop
 800fc64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc66:	bc08      	pop	{r3}
 800fc68:	469e      	mov	lr, r3
 800fc6a:	4770      	bx	lr
