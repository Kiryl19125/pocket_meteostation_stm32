
pocket_meteostation_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e75c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ce0  0800e900  0800e900  0000f900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f5e0  0800f5e0  000111d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f5e0  0800f5e0  000105e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f5e8  0800f5e8  000111d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f5e8  0800f5e8  000105e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f5ec  0800f5ec  000105ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800f5f0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000111d8  2**0
                  CONTENTS
 10 .bss          00001f94  200001d8  200001d8  000111d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000216c  2000216c  000111d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000111d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021ccb  00000000  00000000  00011208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b53  00000000  00000000  00032ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a90  00000000  00000000  00037a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000149d  00000000  00000000  000394b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002607f  00000000  00000000  0003a955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000239f0  00000000  00000000  000609d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1471  00000000  00000000  000843c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00165835  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008328  00000000  00000000  00165878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0016dba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e8e4 	.word	0x0800e8e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800e8e4 	.word	0x0800e8e4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <pollKeypad>:

#include "Keypad.h"
#include "main.h"

Key pollKeypad()
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	// check left key
	HAL_GPIO_WritePin(Keypad_C1_OUT_GPIO_Port, Keypad_C1_OUT_Pin, GPIO_PIN_SET);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2104      	movs	r1, #4
 8000d0c:	4833      	ldr	r0, [pc, #204]	@ (8000ddc <pollKeypad+0xd8>)
 8000d0e:	f002 fd15 	bl	800373c <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(Keypad_R2_IN_GPIO_Port, Keypad_R2_IN_Pin) == GPIO_PIN_SET)
 8000d12:	2101      	movs	r1, #1
 8000d14:	4831      	ldr	r0, [pc, #196]	@ (8000ddc <pollKeypad+0xd8>)
 8000d16:	f002 fcf9 	bl	800370c <HAL_GPIO_ReadPin>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d101      	bne.n	8000d24 <pollKeypad+0x20>
	{
		return Left;
 8000d20:	2303      	movs	r3, #3
 8000d22:	e059      	b.n	8000dd8 <pollKeypad+0xd4>
	}
	HAL_GPIO_WritePin(Keypad_C1_OUT_GPIO_Port, Keypad_C1_OUT_Pin, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2104      	movs	r1, #4
 8000d28:	482c      	ldr	r0, [pc, #176]	@ (8000ddc <pollKeypad+0xd8>)
 8000d2a:	f002 fd07 	bl	800373c <HAL_GPIO_WritePin>

	// check up key
	HAL_GPIO_WritePin(Keypad_C2_OUT_GPIO_Port, Keypad_C2_OUT_Pin, GPIO_PIN_SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d34:	4829      	ldr	r0, [pc, #164]	@ (8000ddc <pollKeypad+0xd8>)
 8000d36:	f002 fd01 	bl	800373c <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(Keypad_R1_IN_GPIO_Port, Keypad_R1_IN_Pin))
 8000d3a:	2102      	movs	r1, #2
 8000d3c:	4827      	ldr	r0, [pc, #156]	@ (8000ddc <pollKeypad+0xd8>)
 8000d3e:	f002 fce5 	bl	800370c <HAL_GPIO_ReadPin>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <pollKeypad+0x48>
	{
		return Up;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e045      	b.n	8000dd8 <pollKeypad+0xd4>
	}
	HAL_GPIO_WritePin(Keypad_C2_OUT_GPIO_Port, Keypad_C2_OUT_Pin, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d52:	4822      	ldr	r0, [pc, #136]	@ (8000ddc <pollKeypad+0xd8>)
 8000d54:	f002 fcf2 	bl	800373c <HAL_GPIO_WritePin>

	// check middle key
	HAL_GPIO_WritePin(Keypad_C2_OUT_GPIO_Port, Keypad_C2_OUT_Pin, GPIO_PIN_SET);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d5e:	481f      	ldr	r0, [pc, #124]	@ (8000ddc <pollKeypad+0xd8>)
 8000d60:	f002 fcec 	bl	800373c <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(Keypad_R2_IN_GPIO_Port, Keypad_R2_IN_Pin))
 8000d64:	2101      	movs	r1, #1
 8000d66:	481d      	ldr	r0, [pc, #116]	@ (8000ddc <pollKeypad+0xd8>)
 8000d68:	f002 fcd0 	bl	800370c <HAL_GPIO_ReadPin>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <pollKeypad+0x72>
	{
		return Middle;
 8000d72:	2305      	movs	r3, #5
 8000d74:	e030      	b.n	8000dd8 <pollKeypad+0xd4>
	}
	HAL_GPIO_WritePin(Keypad_C2_OUT_GPIO_Port, Keypad_C2_OUT_Pin, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d7c:	4817      	ldr	r0, [pc, #92]	@ (8000ddc <pollKeypad+0xd8>)
 8000d7e:	f002 fcdd 	bl	800373c <HAL_GPIO_WritePin>

	// check down key
	HAL_GPIO_WritePin(Keypad_C2_OUT_GPIO_Port, Keypad_C2_OUT_Pin, GPIO_PIN_SET);
 8000d82:	2201      	movs	r2, #1
 8000d84:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d88:	4814      	ldr	r0, [pc, #80]	@ (8000ddc <pollKeypad+0xd8>)
 8000d8a:	f002 fcd7 	bl	800373c <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(Keypad_R3_IN_GPIO_Port, Keypad_R3_IN_Pin))
 8000d8e:	2101      	movs	r1, #1
 8000d90:	4813      	ldr	r0, [pc, #76]	@ (8000de0 <pollKeypad+0xdc>)
 8000d92:	f002 fcbb 	bl	800370c <HAL_GPIO_ReadPin>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <pollKeypad+0x9c>
	{
		return Down;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	e01b      	b.n	8000dd8 <pollKeypad+0xd4>
	}
	HAL_GPIO_WritePin(Keypad_C2_OUT_GPIO_Port, Keypad_C2_OUT_Pin, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000da6:	480d      	ldr	r0, [pc, #52]	@ (8000ddc <pollKeypad+0xd8>)
 8000da8:	f002 fcc8 	bl	800373c <HAL_GPIO_WritePin>

	// check right key
	HAL_GPIO_WritePin(Keypad_C3_OUT_GPIO_Port, Keypad_C3_OUT_Pin, GPIO_PIN_SET);
 8000dac:	2201      	movs	r2, #1
 8000dae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000db2:	480a      	ldr	r0, [pc, #40]	@ (8000ddc <pollKeypad+0xd8>)
 8000db4:	f002 fcc2 	bl	800373c <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(Keypad_R2_IN_GPIO_Port, Keypad_R2_IN_Pin))
 8000db8:	2101      	movs	r1, #1
 8000dba:	4808      	ldr	r0, [pc, #32]	@ (8000ddc <pollKeypad+0xd8>)
 8000dbc:	f002 fca6 	bl	800370c <HAL_GPIO_ReadPin>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <pollKeypad+0xc6>
	{
		return Right;
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	e006      	b.n	8000dd8 <pollKeypad+0xd4>
	}
	HAL_GPIO_WritePin(Keypad_C3_OUT_GPIO_Port, Keypad_C3_OUT_Pin, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dd0:	4802      	ldr	r0, [pc, #8]	@ (8000ddc <pollKeypad+0xd8>)
 8000dd2:	f002 fcb3 	bl	800373c <HAL_GPIO_WritePin>

	return None;
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	48000800 	.word	0x48000800
 8000de0:	48000400 	.word	0x48000400

08000de4 <keyToString>:

const char* keyToString(Key key)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
	switch (key)
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	3b01      	subs	r3, #1
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	d816      	bhi.n	8000e24 <keyToString+0x40>
 8000df6:	a201      	add	r2, pc, #4	@ (adr r2, 8000dfc <keyToString+0x18>)
 8000df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfc:	08000e11 	.word	0x08000e11
 8000e00:	08000e19 	.word	0x08000e19
 8000e04:	08000e1d 	.word	0x08000e1d
 8000e08:	08000e21 	.word	0x08000e21
 8000e0c:	08000e15 	.word	0x08000e15
	{
	case Up:
		return "Up";
 8000e10:	4b08      	ldr	r3, [pc, #32]	@ (8000e34 <keyToString+0x50>)
 8000e12:	e008      	b.n	8000e26 <keyToString+0x42>
	case Middle:
		return "Middle";
 8000e14:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <keyToString+0x54>)
 8000e16:	e006      	b.n	8000e26 <keyToString+0x42>
	case Down:
		return "Down";
 8000e18:	4b08      	ldr	r3, [pc, #32]	@ (8000e3c <keyToString+0x58>)
 8000e1a:	e004      	b.n	8000e26 <keyToString+0x42>
	case Left:
		return "Left";
 8000e1c:	4b08      	ldr	r3, [pc, #32]	@ (8000e40 <keyToString+0x5c>)
 8000e1e:	e002      	b.n	8000e26 <keyToString+0x42>
	case Right:
		return "Right";
 8000e20:	4b08      	ldr	r3, [pc, #32]	@ (8000e44 <keyToString+0x60>)
 8000e22:	e000      	b.n	8000e26 <keyToString+0x42>
	default:
		return "None";
 8000e24:	4b08      	ldr	r3, [pc, #32]	@ (8000e48 <keyToString+0x64>)
	}
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	0800e900 	.word	0x0800e900
 8000e38:	0800e904 	.word	0x0800e904
 8000e3c:	0800e90c 	.word	0x0800e90c
 8000e40:	0800e914 	.word	0x0800e914
 8000e44:	0800e91c 	.word	0x0800e91c
 8000e48:	0800e924 	.word	0x0800e924

08000e4c <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e52:	463b      	mov	r3, r7
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
 8000e60:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000e62:	4b27      	ldr	r3, [pc, #156]	@ (8000f00 <MX_ADC2_Init+0xb4>)
 8000e64:	4a27      	ldr	r2, [pc, #156]	@ (8000f04 <MX_ADC2_Init+0xb8>)
 8000e66:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e68:	4b25      	ldr	r3, [pc, #148]	@ (8000f00 <MX_ADC2_Init+0xb4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e6e:	4b24      	ldr	r3, [pc, #144]	@ (8000f00 <MX_ADC2_Init+0xb4>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e74:	4b22      	ldr	r3, [pc, #136]	@ (8000f00 <MX_ADC2_Init+0xb4>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000e7a:	4b21      	ldr	r3, [pc, #132]	@ (8000f00 <MX_ADC2_Init+0xb4>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e80:	4b1f      	ldr	r3, [pc, #124]	@ (8000f00 <MX_ADC2_Init+0xb4>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e88:	4b1d      	ldr	r3, [pc, #116]	@ (8000f00 <MX_ADC2_Init+0xb4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f00 <MX_ADC2_Init+0xb4>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e94:	4b1a      	ldr	r3, [pc, #104]	@ (8000f00 <MX_ADC2_Init+0xb4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000e9a:	4b19      	ldr	r3, [pc, #100]	@ (8000f00 <MX_ADC2_Init+0xb4>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000ea0:	4b17      	ldr	r3, [pc, #92]	@ (8000f00 <MX_ADC2_Init+0xb4>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <MX_ADC2_Init+0xb4>)
 8000eaa:	2204      	movs	r2, #4
 8000eac:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000eae:	4b14      	ldr	r3, [pc, #80]	@ (8000f00 <MX_ADC2_Init+0xb4>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000eb4:	4b12      	ldr	r3, [pc, #72]	@ (8000f00 <MX_ADC2_Init+0xb4>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000eba:	4811      	ldr	r0, [pc, #68]	@ (8000f00 <MX_ADC2_Init+0xb4>)
 8000ebc:	f001 f888 	bl	8001fd0 <HAL_ADC_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000ec6:	f000 fb09 	bl	80014dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4806      	ldr	r0, [pc, #24]	@ (8000f00 <MX_ADC2_Init+0xb4>)
 8000ee8:	f001 fd3a 	bl	8002960 <HAL_ADC_ConfigChannel>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000ef2:	f000 faf3 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ef6:	bf00      	nop
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200001f4 	.word	0x200001f4
 8000f04:	50000100 	.word	0x50000100

08000f08 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	@ 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a15      	ldr	r2, [pc, #84]	@ (8000f7c <HAL_ADC_MspInit+0x74>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d124      	bne.n	8000f74 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f2a:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <HAL_ADC_MspInit+0x78>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	4a14      	ldr	r2, [pc, #80]	@ (8000f80 <HAL_ADC_MspInit+0x78>)
 8000f30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f34:	6153      	str	r3, [r2, #20]
 8000f36:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <HAL_ADC_MspInit+0x78>)
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	4b0f      	ldr	r3, [pc, #60]	@ (8000f80 <HAL_ADC_MspInit+0x78>)
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	4a0e      	ldr	r2, [pc, #56]	@ (8000f80 <HAL_ADC_MspInit+0x78>)
 8000f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f4c:	6153      	str	r3, [r2, #20]
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <HAL_ADC_MspInit+0x78>)
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = BATT_ADC_Pin;
 8000f5a:	2310      	movs	r3, #16
 8000f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_ADC_GPIO_Port, &GPIO_InitStruct);
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f70:	f002 fa42 	bl	80033f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000f74:	bf00      	nop
 8000f76:	3728      	adds	r7, #40	@ 0x28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	50000100 	.word	0x50000100
 8000f80:	40021000 	.word	0x40021000

08000f84 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of readBattVoltage */
  readBattVoltageHandle = osThreadNew(StartReadBattVoltageTask, NULL, &readBattVoltage_attributes);
 8000f88:	4a0c      	ldr	r2, [pc, #48]	@ (8000fbc <MX_FREERTOS_Init+0x38>)
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	480c      	ldr	r0, [pc, #48]	@ (8000fc0 <MX_FREERTOS_Init+0x3c>)
 8000f8e:	f006 fba5 	bl	80076dc <osThreadNew>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc4 <MX_FREERTOS_Init+0x40>)
 8000f96:	6013      	str	r3, [r2, #0]

  /* creation of renderUI */
  renderUIHandle = osThreadNew(StartRenderUITask, NULL, &renderUI_attributes);
 8000f98:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc8 <MX_FREERTOS_Init+0x44>)
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	480b      	ldr	r0, [pc, #44]	@ (8000fcc <MX_FREERTOS_Init+0x48>)
 8000f9e:	f006 fb9d 	bl	80076dc <osThreadNew>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <MX_FREERTOS_Init+0x4c>)
 8000fa6:	6013      	str	r3, [r2, #0]

  /* creation of pollKeypad */
  pollKeypadHandle = osThreadNew(StartPollKeypadTask, NULL, &pollKeypad_attributes);
 8000fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd4 <MX_FREERTOS_Init+0x50>)
 8000faa:	2100      	movs	r1, #0
 8000fac:	480a      	ldr	r0, [pc, #40]	@ (8000fd8 <MX_FREERTOS_Init+0x54>)
 8000fae:	f006 fb95 	bl	80076dc <osThreadNew>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	4a09      	ldr	r2, [pc, #36]	@ (8000fdc <MX_FREERTOS_Init+0x58>)
 8000fb6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	0800e994 	.word	0x0800e994
 8000fc0:	08000fe1 	.word	0x08000fe1
 8000fc4:	200002b0 	.word	0x200002b0
 8000fc8:	0800e9b8 	.word	0x0800e9b8
 8000fcc:	0800104d 	.word	0x0800104d
 8000fd0:	200002b4 	.word	0x200002b4
 8000fd4:	0800e9dc 	.word	0x0800e9dc
 8000fd8:	080010fd 	.word	0x080010fd
 8000fdc:	200002b8 	.word	0x200002b8

08000fe0 <StartReadBattVoltageTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartReadBattVoltageTask */
void StartReadBattVoltageTask(void *argument)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadBattVoltageTask */
	/* Infinite loop */

	for (;;)
	{
		HAL_ADC_Start(&hadc2);
 8000fe8:	4814      	ldr	r0, [pc, #80]	@ (800103c <StartReadBattVoltageTask+0x5c>)
 8000fea:	f001 f9eb 	bl	80023c4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, 10);
 8000fee:	210a      	movs	r1, #10
 8000ff0:	4812      	ldr	r0, [pc, #72]	@ (800103c <StartReadBattVoltageTask+0x5c>)
 8000ff2:	f001 fb33 	bl	800265c <HAL_ADC_PollForConversion>
		raw_adc_value = HAL_ADC_GetValue(&hadc2);
 8000ff6:	4811      	ldr	r0, [pc, #68]	@ (800103c <StartReadBattVoltageTask+0x5c>)
 8000ff8:	f001 fc32 	bl	8002860 <HAL_ADC_GetValue>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <StartReadBattVoltageTask+0x60>)
 8001002:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc2);
 8001004:	480d      	ldr	r0, [pc, #52]	@ (800103c <StartReadBattVoltageTask+0x5c>)
 8001006:	f001 faf3 	bl	80025f0 <HAL_ADC_Stop>
		voltage = (float) (raw_adc_value * (3.3f / 4096.0f));
 800100a:	4b0d      	ldr	r3, [pc, #52]	@ (8001040 <StartReadBattVoltageTask+0x60>)
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001016:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001044 <StartReadBattVoltageTask+0x64>
 800101a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800101e:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <StartReadBattVoltageTask+0x68>)
 8001020:	edc3 7a00 	vstr	s15, [r3]
		HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8001024:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001028:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800102c:	f002 fb9e 	bl	800376c <HAL_GPIO_TogglePin>
		osDelay(100);
 8001030:	2064      	movs	r0, #100	@ 0x64
 8001032:	f006 fbfd 	bl	8007830 <osDelay>
		HAL_ADC_Start(&hadc2);
 8001036:	bf00      	nop
 8001038:	e7d6      	b.n	8000fe8 <StartReadBattVoltageTask+0x8>
 800103a:	bf00      	nop
 800103c:	200001f4 	.word	0x200001f4
 8001040:	20000244 	.word	0x20000244
 8001044:	3a533333 	.word	0x3a533333
 8001048:	20000248 	.word	0x20000248

0800104c <StartRenderUITask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartRenderUITask */
void StartRenderUITask(void *argument)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af02      	add	r7, sp, #8
 8001052:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRenderUITask */

	/* Infinite loop */
	for (;;)
	{
		ssd1306_Fill(Black);
 8001054:	2000      	movs	r0, #0
 8001056:	f000 faeb 	bl	8001630 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 800105a:	2100      	movs	r1, #0
 800105c:	2000      	movs	r0, #0
 800105e:	f000 fc31 	bl	80018c4 <ssd1306_SetCursor>
		sprintf(msg_buffer, "Raw: %d", raw_adc_value);
 8001062:	4b1f      	ldr	r3, [pc, #124]	@ (80010e0 <StartRenderUITask+0x94>)
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	491e      	ldr	r1, [pc, #120]	@ (80010e4 <StartRenderUITask+0x98>)
 800106a:	481f      	ldr	r0, [pc, #124]	@ (80010e8 <StartRenderUITask+0x9c>)
 800106c:	f009 ffac 	bl	800afc8 <siprintf>
		ssd1306_WriteString(msg_buffer, Font_7x10, White);
 8001070:	4b1e      	ldr	r3, [pc, #120]	@ (80010ec <StartRenderUITask+0xa0>)
 8001072:	2201      	movs	r2, #1
 8001074:	9200      	str	r2, [sp, #0]
 8001076:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001078:	481b      	ldr	r0, [pc, #108]	@ (80010e8 <StartRenderUITask+0x9c>)
 800107a:	f000 fbfd 	bl	8001878 <ssd1306_WriteString>

		ssd1306_SetCursor(0, 12);
 800107e:	210c      	movs	r1, #12
 8001080:	2000      	movs	r0, #0
 8001082:	f000 fc1f 	bl	80018c4 <ssd1306_SetCursor>
		sprintf(msg_buffer, "V: %d.%02d", (int) voltage,
 8001086:	4b1a      	ldr	r3, [pc, #104]	@ (80010f0 <StartRenderUITask+0xa4>)
 8001088:	edd3 7a00 	vldr	s15, [r3]
 800108c:	eefd 6ae7 	vcvt.s32.f32	s13, s15
				(int) ((voltage - (int) (voltage)) * 100)); // тут костыль надо будет разобратся
 8001090:	4b17      	ldr	r3, [pc, #92]	@ (80010f0 <StartRenderUITask+0xa4>)
 8001092:	ed93 7a00 	vldr	s14, [r3]
 8001096:	4b16      	ldr	r3, [pc, #88]	@ (80010f0 <StartRenderUITask+0xa4>)
 8001098:	edd3 7a00 	vldr	s15, [r3]
 800109c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a8:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80010f4 <StartRenderUITask+0xa8>
 80010ac:	ee67 7a87 	vmul.f32	s15, s15, s14
		sprintf(msg_buffer, "V: %d.%02d", (int) voltage,
 80010b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010b4:	ee17 3a90 	vmov	r3, s15
 80010b8:	ee16 2a90 	vmov	r2, s13
 80010bc:	490e      	ldr	r1, [pc, #56]	@ (80010f8 <StartRenderUITask+0xac>)
 80010be:	480a      	ldr	r0, [pc, #40]	@ (80010e8 <StartRenderUITask+0x9c>)
 80010c0:	f009 ff82 	bl	800afc8 <siprintf>
		ssd1306_WriteString(msg_buffer, Font_7x10, White);
 80010c4:	4b09      	ldr	r3, [pc, #36]	@ (80010ec <StartRenderUITask+0xa0>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	9200      	str	r2, [sp, #0]
 80010ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010cc:	4806      	ldr	r0, [pc, #24]	@ (80010e8 <StartRenderUITask+0x9c>)
 80010ce:	f000 fbd3 	bl	8001878 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80010d2:	f000 fac5 	bl	8001660 <ssd1306_UpdateScreen>
		osDelay(100);
 80010d6:	2064      	movs	r0, #100	@ 0x64
 80010d8:	f006 fbaa 	bl	8007830 <osDelay>
		ssd1306_Fill(Black);
 80010dc:	bf00      	nop
 80010de:	e7b9      	b.n	8001054 <StartRenderUITask+0x8>
 80010e0:	20000244 	.word	0x20000244
 80010e4:	0800e954 	.word	0x0800e954
 80010e8:	2000024c 	.word	0x2000024c
 80010ec:	0800f16c 	.word	0x0800f16c
 80010f0:	20000248 	.word	0x20000248
 80010f4:	42c80000 	.word	0x42c80000
 80010f8:	0800e95c 	.word	0x0800e95c

080010fc <StartPollKeypadTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPollKeypadTask */
void StartPollKeypadTask(void *argument)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPollKeypadTask */
  /* Infinite loop */
  for(;;)
  {
	Key key_pressed = pollKeypad();
 8001104:	f7ff fdfe 	bl	8000d04 <pollKeypad>
 8001108:	4603      	mov	r3, r0
 800110a:	73fb      	strb	r3, [r7, #15]
	sprintf(msg_buffer, "Key pressed: %s\r\n", keyToString(key_pressed));
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fe68 	bl	8000de4 <keyToString>
 8001114:	4603      	mov	r3, r0
 8001116:	461a      	mov	r2, r3
 8001118:	4910      	ldr	r1, [pc, #64]	@ (800115c <StartPollKeypadTask+0x60>)
 800111a:	4811      	ldr	r0, [pc, #68]	@ (8001160 <StartPollKeypadTask+0x64>)
 800111c:	f009 ff54 	bl	800afc8 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer), 1000);
 8001120:	480f      	ldr	r0, [pc, #60]	@ (8001160 <StartPollKeypadTask+0x64>)
 8001122:	f7ff f8ad 	bl	8000280 <strlen>
 8001126:	4603      	mov	r3, r0
 8001128:	b29a      	uxth	r2, r3
 800112a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800112e:	490c      	ldr	r1, [pc, #48]	@ (8001160 <StartPollKeypadTask+0x64>)
 8001130:	480c      	ldr	r0, [pc, #48]	@ (8001164 <StartPollKeypadTask+0x68>)
 8001132:	f005 fdf1 	bl	8006d18 <HAL_UART_Transmit>
    if (key_pressed != None)
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d00b      	beq.n	8001154 <StartPollKeypadTask+0x58>
    {
    	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 500);
 800113c:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <StartPollKeypadTask+0x6c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001144:	635a      	str	r2, [r3, #52]	@ 0x34
    	osDelay(100);
 8001146:	2064      	movs	r0, #100	@ 0x64
 8001148:	f006 fb72 	bl	8007830 <osDelay>
    	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800114c:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <StartPollKeypadTask+0x6c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2200      	movs	r2, #0
 8001152:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    osDelay(100);
 8001154:	2064      	movs	r0, #100	@ 0x64
 8001156:	f006 fb6b 	bl	8007830 <osDelay>
  {
 800115a:	e7d3      	b.n	8001104 <StartPollKeypadTask+0x8>
 800115c:	0800e968 	.word	0x0800e968
 8001160:	2000024c 	.word	0x2000024c
 8001164:	200005b4 	.word	0x200005b4
 8001168:	20000568 	.word	0x20000568

0800116c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	@ 0x28
 8001170:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001182:	4b42      	ldr	r3, [pc, #264]	@ (800128c <MX_GPIO_Init+0x120>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	4a41      	ldr	r2, [pc, #260]	@ (800128c <MX_GPIO_Init+0x120>)
 8001188:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800118c:	6153      	str	r3, [r2, #20]
 800118e:	4b3f      	ldr	r3, [pc, #252]	@ (800128c <MX_GPIO_Init+0x120>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800119a:	4b3c      	ldr	r3, [pc, #240]	@ (800128c <MX_GPIO_Init+0x120>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a3b      	ldr	r2, [pc, #236]	@ (800128c <MX_GPIO_Init+0x120>)
 80011a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011a4:	6153      	str	r3, [r2, #20]
 80011a6:	4b39      	ldr	r3, [pc, #228]	@ (800128c <MX_GPIO_Init+0x120>)
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b2:	4b36      	ldr	r3, [pc, #216]	@ (800128c <MX_GPIO_Init+0x120>)
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	4a35      	ldr	r2, [pc, #212]	@ (800128c <MX_GPIO_Init+0x120>)
 80011b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011bc:	6153      	str	r3, [r2, #20]
 80011be:	4b33      	ldr	r3, [pc, #204]	@ (800128c <MX_GPIO_Init+0x120>)
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ca:	4b30      	ldr	r3, [pc, #192]	@ (800128c <MX_GPIO_Init+0x120>)
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	4a2f      	ldr	r2, [pc, #188]	@ (800128c <MX_GPIO_Init+0x120>)
 80011d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011d4:	6153      	str	r3, [r2, #20]
 80011d6:	4b2d      	ldr	r3, [pc, #180]	@ (800128c <MX_GPIO_Init+0x120>)
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Keypad_C2_OUT_Pin|Keypad_C1_OUT_Pin|Keypad_C4_OUT_Pin|Keypad_C3_OUT_Pin, GPIO_PIN_RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	f243 4104 	movw	r1, #13316	@ 0x3404
 80011e8:	4829      	ldr	r0, [pc, #164]	@ (8001290 <MX_GPIO_Init+0x124>)
 80011ea:	f002 faa7 	bl	800373c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011f8:	f002 faa0 	bl	800373c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Keypad_C2_OUT_Pin|Keypad_C1_OUT_Pin|Keypad_C4_OUT_Pin|Keypad_C3_OUT_Pin;
 80011fc:	f243 4304 	movw	r3, #13316	@ 0x3404
 8001200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001202:	2301      	movs	r3, #1
 8001204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4619      	mov	r1, r3
 8001214:	481e      	ldr	r0, [pc, #120]	@ (8001290 <MX_GPIO_Init+0x124>)
 8001216:	f002 f8ef 	bl	80033f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Keypad_R2_IN_Pin|Keypad_R1_IN_Pin;
 800121a:	2303      	movs	r3, #3
 800121c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121e:	2300      	movs	r3, #0
 8001220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001222:	2302      	movs	r3, #2
 8001224:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	4818      	ldr	r0, [pc, #96]	@ (8001290 <MX_GPIO_Init+0x124>)
 800122e:	f002 f8e3 	bl	80033f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Keypad_R4_IN_Pin;
 8001232:	2302      	movs	r3, #2
 8001234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800123a:	2302      	movs	r3, #2
 800123c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Keypad_R4_IN_GPIO_Port, &GPIO_InitStruct);
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4619      	mov	r1, r3
 8001244:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001248:	f002 f8d6 	bl	80033f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Keypad_R3_IN_Pin;
 800124c:	2301      	movs	r3, #1
 800124e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001250:	2300      	movs	r3, #0
 8001252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001254:	2302      	movs	r3, #2
 8001256:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Keypad_R3_IN_GPIO_Port, &GPIO_InitStruct);
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4619      	mov	r1, r3
 800125e:	480d      	ldr	r0, [pc, #52]	@ (8001294 <MX_GPIO_Init+0x128>)
 8001260:	f002 f8ca 	bl	80033f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin;
 8001264:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126a:	2301      	movs	r3, #1
 800126c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001280:	f002 f8ba 	bl	80033f8 <HAL_GPIO_Init>

}
 8001284:	bf00      	nop
 8001286:	3728      	adds	r7, #40	@ 0x28
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40021000 	.word	0x40021000
 8001290:	48000800 	.word	0x48000800
 8001294:	48000400 	.word	0x48000400

08001298 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800129c:	4b1b      	ldr	r3, [pc, #108]	@ (800130c <MX_I2C1_Init+0x74>)
 800129e:	4a1c      	ldr	r2, [pc, #112]	@ (8001310 <MX_I2C1_Init+0x78>)
 80012a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80012a2:	4b1a      	ldr	r3, [pc, #104]	@ (800130c <MX_I2C1_Init+0x74>)
 80012a4:	f240 220b 	movw	r2, #523	@ 0x20b
 80012a8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012aa:	4b18      	ldr	r3, [pc, #96]	@ (800130c <MX_I2C1_Init+0x74>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012b0:	4b16      	ldr	r3, [pc, #88]	@ (800130c <MX_I2C1_Init+0x74>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b6:	4b15      	ldr	r3, [pc, #84]	@ (800130c <MX_I2C1_Init+0x74>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012bc:	4b13      	ldr	r3, [pc, #76]	@ (800130c <MX_I2C1_Init+0x74>)
 80012be:	2200      	movs	r2, #0
 80012c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012c2:	4b12      	ldr	r3, [pc, #72]	@ (800130c <MX_I2C1_Init+0x74>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012c8:	4b10      	ldr	r3, [pc, #64]	@ (800130c <MX_I2C1_Init+0x74>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ce:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <MX_I2C1_Init+0x74>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012d4:	480d      	ldr	r0, [pc, #52]	@ (800130c <MX_I2C1_Init+0x74>)
 80012d6:	f002 fa63 	bl	80037a0 <HAL_I2C_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012e0:	f000 f8fc 	bl	80014dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012e4:	2100      	movs	r1, #0
 80012e6:	4809      	ldr	r0, [pc, #36]	@ (800130c <MX_I2C1_Init+0x74>)
 80012e8:	f002 fe78 	bl	8003fdc <HAL_I2CEx_ConfigAnalogFilter>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80012f2:	f000 f8f3 	bl	80014dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012f6:	2100      	movs	r1, #0
 80012f8:	4804      	ldr	r0, [pc, #16]	@ (800130c <MX_I2C1_Init+0x74>)
 80012fa:	f002 feba 	bl	8004072 <HAL_I2CEx_ConfigDigitalFilter>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001304:	f000 f8ea 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	200002bc 	.word	0x200002bc
 8001310:	40005400 	.word	0x40005400

08001314 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	@ 0x28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a17      	ldr	r2, [pc, #92]	@ (8001390 <HAL_I2C_MspInit+0x7c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d128      	bne.n	8001388 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001336:	4b17      	ldr	r3, [pc, #92]	@ (8001394 <HAL_I2C_MspInit+0x80>)
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	4a16      	ldr	r2, [pc, #88]	@ (8001394 <HAL_I2C_MspInit+0x80>)
 800133c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001340:	6153      	str	r3, [r2, #20]
 8001342:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <HAL_I2C_MspInit+0x80>)
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800134e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001354:	2312      	movs	r3, #18
 8001356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800135c:	2303      	movs	r3, #3
 800135e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001360:	2304      	movs	r3, #4
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4619      	mov	r1, r3
 800136a:	480b      	ldr	r0, [pc, #44]	@ (8001398 <HAL_I2C_MspInit+0x84>)
 800136c:	f002 f844 	bl	80033f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001370:	4b08      	ldr	r3, [pc, #32]	@ (8001394 <HAL_I2C_MspInit+0x80>)
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	4a07      	ldr	r2, [pc, #28]	@ (8001394 <HAL_I2C_MspInit+0x80>)
 8001376:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800137a:	61d3      	str	r3, [r2, #28]
 800137c:	4b05      	ldr	r3, [pc, #20]	@ (8001394 <HAL_I2C_MspInit+0x80>)
 800137e:	69db      	ldr	r3, [r3, #28]
 8001380:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001388:	bf00      	nop
 800138a:	3728      	adds	r7, #40	@ 0x28
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40005400 	.word	0x40005400
 8001394:	40021000 	.word	0x40021000
 8001398:	48000400 	.word	0x48000400

0800139c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a0:	f000 fdbc 	bl	8001f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a4:	f000 f820 	bl	80013e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a8:	f7ff fee0 	bl	800116c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013ac:	f000 fd1a 	bl	8001de4 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 80013b0:	f7ff fd4c 	bl	8000e4c <MX_ADC2_Init>
  MX_I2C1_Init();
 80013b4:	f7ff ff70 	bl	8001298 <MX_I2C1_Init>
  MX_TIM3_Init();
 80013b8:	f000 fc64 	bl	8001c84 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80013bc:	2100      	movs	r1, #0
 80013be:	4808      	ldr	r0, [pc, #32]	@ (80013e0 <main+0x44>)
 80013c0:	f001 fa5b 	bl	800287a <HAL_ADCEx_Calibration_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80013c4:	2100      	movs	r1, #0
 80013c6:	4807      	ldr	r0, [pc, #28]	@ (80013e4 <main+0x48>)
 80013c8:	f004 fc8e 	bl	8005ce8 <HAL_TIM_PWM_Start>
	ssd1306_Init();
 80013cc:	f000 f8c6 	bl	800155c <ssd1306_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013d0:	f006 f91c 	bl	800760c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80013d4:	f7ff fdd6 	bl	8000f84 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80013d8:	f006 f94c 	bl	8007674 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80013dc:	bf00      	nop
 80013de:	e7fd      	b.n	80013dc <main+0x40>
 80013e0:	200001f4 	.word	0x200001f4
 80013e4:	20000568 	.word	0x20000568

080013e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b0a6      	sub	sp, #152	@ 0x98
 80013ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ee:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80013f2:	2228      	movs	r2, #40	@ 0x28
 80013f4:	2100      	movs	r1, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f009 fe63 	bl	800b0c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013fc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	2258      	movs	r2, #88	@ 0x58
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f009 fe55 	bl	800b0c2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001418:	2302      	movs	r3, #2
 800141a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800141c:	2301      	movs	r3, #1
 800141e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001420:	2310      	movs	r3, #16
 8001422:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001426:	2302      	movs	r3, #2
 8001428:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800142c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001430:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001434:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001438:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001442:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001446:	4618      	mov	r0, r3
 8001448:	f002 fe60 	bl	800410c <HAL_RCC_OscConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001452:	f000 f843 	bl	80014dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001456:	230f      	movs	r3, #15
 8001458:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800145a:	2302      	movs	r3, #2
 800145c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800145e:	2300      	movs	r3, #0
 8001460:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001462:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001466:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800146c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001470:	2102      	movs	r1, #2
 8001472:	4618      	mov	r0, r3
 8001474:	f003 fe9e 	bl	80051b4 <HAL_RCC_ClockConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800147e:	f000 f82d 	bl	80014dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001482:	4b0c      	ldr	r3, [pc, #48]	@ (80014b4 <SystemClock_Config+0xcc>)
 8001484:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800148a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800148e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001490:	2300      	movs	r3, #0
 8001492:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8001494:	2300      	movs	r3, #0
 8001496:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	4618      	mov	r0, r3
 800149c:	f004 f8dc 	bl	8005658 <HAL_RCCEx_PeriphCLKConfig>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014a6:	f000 f819 	bl	80014dc <Error_Handler>
  }
}
 80014aa:	bf00      	nop
 80014ac:	3798      	adds	r7, #152	@ 0x98
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	002000a2 	.word	0x002000a2

080014b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a04      	ldr	r2, [pc, #16]	@ (80014d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d101      	bne.n	80014ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014ca:	f000 fd3d 	bl	8001f48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40012c00 	.word	0x40012c00

080014dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e0:	b672      	cpsid	i
}
 80014e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <Error_Handler+0x8>

080014e8 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af04      	add	r7, sp, #16
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001502:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001506:	9302      	str	r3, [sp, #8]
 8001508:	2301      	movs	r3, #1
 800150a:	9301      	str	r3, [sp, #4]
 800150c:	1dfb      	adds	r3, r7, #7
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	2301      	movs	r3, #1
 8001512:	2200      	movs	r2, #0
 8001514:	2178      	movs	r1, #120	@ 0x78
 8001516:	4803      	ldr	r0, [pc, #12]	@ (8001524 <ssd1306_WriteCommand+0x2c>)
 8001518:	f002 f9de 	bl	80038d8 <HAL_I2C_Mem_Write>
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	200002bc 	.word	0x200002bc

08001528 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af04      	add	r7, sp, #16
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	b29b      	uxth	r3, r3
 8001536:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800153a:	9202      	str	r2, [sp, #8]
 800153c:	9301      	str	r3, [sp, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	2301      	movs	r3, #1
 8001544:	2240      	movs	r2, #64	@ 0x40
 8001546:	2178      	movs	r1, #120	@ 0x78
 8001548:	4803      	ldr	r0, [pc, #12]	@ (8001558 <ssd1306_WriteData+0x30>)
 800154a:	f002 f9c5 	bl	80038d8 <HAL_I2C_Mem_Write>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200002bc 	.word	0x200002bc

0800155c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001560:	f7ff ffc2 	bl	80014e8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001564:	2064      	movs	r0, #100	@ 0x64
 8001566:	f000 fd0f 	bl	8001f88 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800156a:	2000      	movs	r0, #0
 800156c:	f000 f9d6 	bl	800191c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001570:	2020      	movs	r0, #32
 8001572:	f7ff ffc1 	bl	80014f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001576:	2000      	movs	r0, #0
 8001578:	f7ff ffbe 	bl	80014f8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800157c:	20b0      	movs	r0, #176	@ 0xb0
 800157e:	f7ff ffbb 	bl	80014f8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001582:	20c8      	movs	r0, #200	@ 0xc8
 8001584:	f7ff ffb8 	bl	80014f8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001588:	2000      	movs	r0, #0
 800158a:	f7ff ffb5 	bl	80014f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800158e:	2010      	movs	r0, #16
 8001590:	f7ff ffb2 	bl	80014f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001594:	2040      	movs	r0, #64	@ 0x40
 8001596:	f7ff ffaf 	bl	80014f8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800159a:	20ff      	movs	r0, #255	@ 0xff
 800159c:	f000 f9aa 	bl	80018f4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80015a0:	20a1      	movs	r0, #161	@ 0xa1
 80015a2:	f7ff ffa9 	bl	80014f8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80015a6:	20a6      	movs	r0, #166	@ 0xa6
 80015a8:	f7ff ffa6 	bl	80014f8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80015ac:	20a8      	movs	r0, #168	@ 0xa8
 80015ae:	f7ff ffa3 	bl	80014f8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 80015b2:	201f      	movs	r0, #31
 80015b4:	f7ff ffa0 	bl	80014f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80015b8:	20a4      	movs	r0, #164	@ 0xa4
 80015ba:	f7ff ff9d 	bl	80014f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80015be:	20d3      	movs	r0, #211	@ 0xd3
 80015c0:	f7ff ff9a 	bl	80014f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80015c4:	2000      	movs	r0, #0
 80015c6:	f7ff ff97 	bl	80014f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80015ca:	20d5      	movs	r0, #213	@ 0xd5
 80015cc:	f7ff ff94 	bl	80014f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80015d0:	20f0      	movs	r0, #240	@ 0xf0
 80015d2:	f7ff ff91 	bl	80014f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80015d6:	20d9      	movs	r0, #217	@ 0xd9
 80015d8:	f7ff ff8e 	bl	80014f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80015dc:	2022      	movs	r0, #34	@ 0x22
 80015de:	f7ff ff8b 	bl	80014f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80015e2:	20da      	movs	r0, #218	@ 0xda
 80015e4:	f7ff ff88 	bl	80014f8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 80015e8:	2002      	movs	r0, #2
 80015ea:	f7ff ff85 	bl	80014f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80015ee:	20db      	movs	r0, #219	@ 0xdb
 80015f0:	f7ff ff82 	bl	80014f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80015f4:	2020      	movs	r0, #32
 80015f6:	f7ff ff7f 	bl	80014f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80015fa:	208d      	movs	r0, #141	@ 0x8d
 80015fc:	f7ff ff7c 	bl	80014f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001600:	2014      	movs	r0, #20
 8001602:	f7ff ff79 	bl	80014f8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001606:	2001      	movs	r0, #1
 8001608:	f000 f988 	bl	800191c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800160c:	2000      	movs	r0, #0
 800160e:	f000 f80f 	bl	8001630 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001612:	f000 f825 	bl	8001660 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001616:	4b05      	ldr	r3, [pc, #20]	@ (800162c <ssd1306_Init+0xd0>)
 8001618:	2200      	movs	r2, #0
 800161a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800161c:	4b03      	ldr	r3, [pc, #12]	@ (800162c <ssd1306_Init+0xd0>)
 800161e:	2200      	movs	r2, #0
 8001620:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001622:	4b02      	ldr	r3, [pc, #8]	@ (800162c <ssd1306_Init+0xd0>)
 8001624:	2201      	movs	r2, #1
 8001626:	711a      	strb	r2, [r3, #4]
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000510 	.word	0x20000510

08001630 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <ssd1306_Fill+0x14>
 8001640:	2300      	movs	r3, #0
 8001642:	e000      	b.n	8001646 <ssd1306_Fill+0x16>
 8001644:	23ff      	movs	r3, #255	@ 0xff
 8001646:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800164a:	4619      	mov	r1, r3
 800164c:	4803      	ldr	r0, [pc, #12]	@ (800165c <ssd1306_Fill+0x2c>)
 800164e:	f009 fd38 	bl	800b0c2 <memset>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000310 	.word	0x20000310

08001660 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001666:	2300      	movs	r3, #0
 8001668:	71fb      	strb	r3, [r7, #7]
 800166a:	e016      	b.n	800169a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	3b50      	subs	r3, #80	@ 0x50
 8001670:	b2db      	uxtb	r3, r3
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff ff40 	bl	80014f8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001678:	2000      	movs	r0, #0
 800167a:	f7ff ff3d 	bl	80014f8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800167e:	2010      	movs	r0, #16
 8001680:	f7ff ff3a 	bl	80014f8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	01db      	lsls	r3, r3, #7
 8001688:	4a08      	ldr	r2, [pc, #32]	@ (80016ac <ssd1306_UpdateScreen+0x4c>)
 800168a:	4413      	add	r3, r2
 800168c:	2180      	movs	r1, #128	@ 0x80
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff ff4a 	bl	8001528 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	3301      	adds	r3, #1
 8001698:	71fb      	strb	r3, [r7, #7]
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	2b03      	cmp	r3, #3
 800169e:	d9e5      	bls.n	800166c <ssd1306_UpdateScreen+0xc>
    }
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000310 	.word	0x20000310

080016b0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
 80016ba:	460b      	mov	r3, r1
 80016bc:	71bb      	strb	r3, [r7, #6]
 80016be:	4613      	mov	r3, r2
 80016c0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	db3d      	blt.n	8001746 <ssd1306_DrawPixel+0x96>
 80016ca:	79bb      	ldrb	r3, [r7, #6]
 80016cc:	2b1f      	cmp	r3, #31
 80016ce:	d83a      	bhi.n	8001746 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80016d0:	797b      	ldrb	r3, [r7, #5]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d11a      	bne.n	800170c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80016d6:	79fa      	ldrb	r2, [r7, #7]
 80016d8:	79bb      	ldrb	r3, [r7, #6]
 80016da:	08db      	lsrs	r3, r3, #3
 80016dc:	b2d8      	uxtb	r0, r3
 80016de:	4603      	mov	r3, r0
 80016e0:	01db      	lsls	r3, r3, #7
 80016e2:	4413      	add	r3, r2
 80016e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001754 <ssd1306_DrawPixel+0xa4>)
 80016e6:	5cd3      	ldrb	r3, [r2, r3]
 80016e8:	b25a      	sxtb	r2, r3
 80016ea:	79bb      	ldrb	r3, [r7, #6]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	2101      	movs	r1, #1
 80016f2:	fa01 f303 	lsl.w	r3, r1, r3
 80016f6:	b25b      	sxtb	r3, r3
 80016f8:	4313      	orrs	r3, r2
 80016fa:	b259      	sxtb	r1, r3
 80016fc:	79fa      	ldrb	r2, [r7, #7]
 80016fe:	4603      	mov	r3, r0
 8001700:	01db      	lsls	r3, r3, #7
 8001702:	4413      	add	r3, r2
 8001704:	b2c9      	uxtb	r1, r1
 8001706:	4a13      	ldr	r2, [pc, #76]	@ (8001754 <ssd1306_DrawPixel+0xa4>)
 8001708:	54d1      	strb	r1, [r2, r3]
 800170a:	e01d      	b.n	8001748 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800170c:	79fa      	ldrb	r2, [r7, #7]
 800170e:	79bb      	ldrb	r3, [r7, #6]
 8001710:	08db      	lsrs	r3, r3, #3
 8001712:	b2d8      	uxtb	r0, r3
 8001714:	4603      	mov	r3, r0
 8001716:	01db      	lsls	r3, r3, #7
 8001718:	4413      	add	r3, r2
 800171a:	4a0e      	ldr	r2, [pc, #56]	@ (8001754 <ssd1306_DrawPixel+0xa4>)
 800171c:	5cd3      	ldrb	r3, [r2, r3]
 800171e:	b25a      	sxtb	r2, r3
 8001720:	79bb      	ldrb	r3, [r7, #6]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	2101      	movs	r1, #1
 8001728:	fa01 f303 	lsl.w	r3, r1, r3
 800172c:	b25b      	sxtb	r3, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	b25b      	sxtb	r3, r3
 8001732:	4013      	ands	r3, r2
 8001734:	b259      	sxtb	r1, r3
 8001736:	79fa      	ldrb	r2, [r7, #7]
 8001738:	4603      	mov	r3, r0
 800173a:	01db      	lsls	r3, r3, #7
 800173c:	4413      	add	r3, r2
 800173e:	b2c9      	uxtb	r1, r1
 8001740:	4a04      	ldr	r2, [pc, #16]	@ (8001754 <ssd1306_DrawPixel+0xa4>)
 8001742:	54d1      	strb	r1, [r2, r3]
 8001744:	e000      	b.n	8001748 <ssd1306_DrawPixel+0x98>
        return;
 8001746:	bf00      	nop
    }
}
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000310 	.word	0x20000310

08001758 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001758:	b590      	push	{r4, r7, lr}
 800175a:	b089      	sub	sp, #36	@ 0x24
 800175c:	af00      	add	r7, sp, #0
 800175e:	4604      	mov	r4, r0
 8001760:	4638      	mov	r0, r7
 8001762:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001766:	4623      	mov	r3, r4
 8001768:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	2b1f      	cmp	r3, #31
 800176e:	d902      	bls.n	8001776 <ssd1306_WriteChar+0x1e>
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	2b7e      	cmp	r3, #126	@ 0x7e
 8001774:	d901      	bls.n	800177a <ssd1306_WriteChar+0x22>
        return 0;
 8001776:	2300      	movs	r3, #0
 8001778:	e077      	b.n	800186a <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800177a:	4b3e      	ldr	r3, [pc, #248]	@ (8001874 <ssd1306_WriteChar+0x11c>)
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	783b      	ldrb	r3, [r7, #0]
 8001782:	4413      	add	r3, r2
 8001784:	2b80      	cmp	r3, #128	@ 0x80
 8001786:	dc06      	bgt.n	8001796 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001788:	4b3a      	ldr	r3, [pc, #232]	@ (8001874 <ssd1306_WriteChar+0x11c>)
 800178a:	885b      	ldrh	r3, [r3, #2]
 800178c:	461a      	mov	r2, r3
 800178e:	787b      	ldrb	r3, [r7, #1]
 8001790:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001792:	2b20      	cmp	r3, #32
 8001794:	dd01      	ble.n	800179a <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8001796:	2300      	movs	r3, #0
 8001798:	e067      	b.n	800186a <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
 800179e:	e04e      	b.n	800183e <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	3b20      	subs	r3, #32
 80017a6:	7879      	ldrb	r1, [r7, #1]
 80017a8:	fb01 f303 	mul.w	r3, r1, r3
 80017ac:	4619      	mov	r1, r3
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	440b      	add	r3, r1
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	4413      	add	r3, r2
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
 80017be:	e036      	b.n	800182e <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d013      	beq.n	80017f8 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80017d0:	4b28      	ldr	r3, [pc, #160]	@ (8001874 <ssd1306_WriteChar+0x11c>)
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	4413      	add	r3, r2
 80017dc:	b2d8      	uxtb	r0, r3
 80017de:	4b25      	ldr	r3, [pc, #148]	@ (8001874 <ssd1306_WriteChar+0x11c>)
 80017e0:	885b      	ldrh	r3, [r3, #2]
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	4413      	add	r3, r2
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80017f0:	4619      	mov	r1, r3
 80017f2:	f7ff ff5d 	bl	80016b0 <ssd1306_DrawPixel>
 80017f6:	e017      	b.n	8001828 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80017f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001874 <ssd1306_WriteChar+0x11c>)
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	4413      	add	r3, r2
 8001804:	b2d8      	uxtb	r0, r3
 8001806:	4b1b      	ldr	r3, [pc, #108]	@ (8001874 <ssd1306_WriteChar+0x11c>)
 8001808:	885b      	ldrh	r3, [r3, #2]
 800180a:	b2da      	uxtb	r2, r3
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	b2db      	uxtb	r3, r3
 8001810:	4413      	add	r3, r2
 8001812:	b2d9      	uxtb	r1, r3
 8001814:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001818:	2b00      	cmp	r3, #0
 800181a:	bf0c      	ite	eq
 800181c:	2301      	moveq	r3, #1
 800181e:	2300      	movne	r3, #0
 8001820:	b2db      	uxtb	r3, r3
 8001822:	461a      	mov	r2, r3
 8001824:	f7ff ff44 	bl	80016b0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	3301      	adds	r3, #1
 800182c:	61bb      	str	r3, [r7, #24]
 800182e:	783b      	ldrb	r3, [r7, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	4293      	cmp	r3, r2
 8001836:	d3c3      	bcc.n	80017c0 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	3301      	adds	r3, #1
 800183c:	61fb      	str	r3, [r7, #28]
 800183e:	787b      	ldrb	r3, [r7, #1]
 8001840:	461a      	mov	r2, r3
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	4293      	cmp	r3, r2
 8001846:	d3ab      	bcc.n	80017a0 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001848:	4b0a      	ldr	r3, [pc, #40]	@ (8001874 <ssd1306_WriteChar+0x11c>)
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	68ba      	ldr	r2, [r7, #8]
 800184e:	2a00      	cmp	r2, #0
 8001850:	d005      	beq.n	800185e <ssd1306_WriteChar+0x106>
 8001852:	68b9      	ldr	r1, [r7, #8]
 8001854:	7bfa      	ldrb	r2, [r7, #15]
 8001856:	3a20      	subs	r2, #32
 8001858:	440a      	add	r2, r1
 800185a:	7812      	ldrb	r2, [r2, #0]
 800185c:	e000      	b.n	8001860 <ssd1306_WriteChar+0x108>
 800185e:	783a      	ldrb	r2, [r7, #0]
 8001860:	4413      	add	r3, r2
 8001862:	b29a      	uxth	r2, r3
 8001864:	4b03      	ldr	r3, [pc, #12]	@ (8001874 <ssd1306_WriteChar+0x11c>)
 8001866:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001868:	7bfb      	ldrb	r3, [r7, #15]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3724      	adds	r7, #36	@ 0x24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd90      	pop	{r4, r7, pc}
 8001872:	bf00      	nop
 8001874:	20000510 	.word	0x20000510

08001878 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af02      	add	r7, sp, #8
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	4638      	mov	r0, r7
 8001882:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001886:	e013      	b.n	80018b0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	7818      	ldrb	r0, [r3, #0]
 800188c:	7e3b      	ldrb	r3, [r7, #24]
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	463b      	mov	r3, r7
 8001892:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001894:	f7ff ff60 	bl	8001758 <ssd1306_WriteChar>
 8001898:	4603      	mov	r3, r0
 800189a:	461a      	mov	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d002      	beq.n	80018aa <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	e008      	b.n	80018bc <ssd1306_WriteString+0x44>
        }
        str++;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	3301      	adds	r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1e7      	bne.n	8001888 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	781b      	ldrb	r3, [r3, #0]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	460a      	mov	r2, r1
 80018ce:	71fb      	strb	r3, [r7, #7]
 80018d0:	4613      	mov	r3, r2
 80018d2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	4b05      	ldr	r3, [pc, #20]	@ (80018f0 <ssd1306_SetCursor+0x2c>)
 80018da:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80018dc:	79bb      	ldrb	r3, [r7, #6]
 80018de:	b29a      	uxth	r2, r3
 80018e0:	4b03      	ldr	r3, [pc, #12]	@ (80018f0 <ssd1306_SetCursor+0x2c>)
 80018e2:	805a      	strh	r2, [r3, #2]
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	20000510 	.word	0x20000510

080018f4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80018fe:	2381      	movs	r3, #129	@ 0x81
 8001900:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fdf7 	bl	80014f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fdf3 	bl	80014f8 <ssd1306_WriteCommand>
}
 8001912:	bf00      	nop
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800192c:	23af      	movs	r3, #175	@ 0xaf
 800192e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001930:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <ssd1306_SetDisplayOn+0x38>)
 8001932:	2201      	movs	r2, #1
 8001934:	715a      	strb	r2, [r3, #5]
 8001936:	e004      	b.n	8001942 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001938:	23ae      	movs	r3, #174	@ 0xae
 800193a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800193c:	4b05      	ldr	r3, [pc, #20]	@ (8001954 <ssd1306_SetDisplayOn+0x38>)
 800193e:	2200      	movs	r2, #0
 8001940:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fdd7 	bl	80014f8 <ssd1306_WriteCommand>
}
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000510 	.word	0x20000510

08001958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195e:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <HAL_MspInit+0x4c>)
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	4a10      	ldr	r2, [pc, #64]	@ (80019a4 <HAL_MspInit+0x4c>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6193      	str	r3, [r2, #24]
 800196a:	4b0e      	ldr	r3, [pc, #56]	@ (80019a4 <HAL_MspInit+0x4c>)
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001976:	4b0b      	ldr	r3, [pc, #44]	@ (80019a4 <HAL_MspInit+0x4c>)
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	4a0a      	ldr	r2, [pc, #40]	@ (80019a4 <HAL_MspInit+0x4c>)
 800197c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001980:	61d3      	str	r3, [r2, #28]
 8001982:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <HAL_MspInit+0x4c>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800198a:	603b      	str	r3, [r7, #0]
 800198c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	210f      	movs	r1, #15
 8001992:	f06f 0001 	mvn.w	r0, #1
 8001996:	f001 fd05 	bl	80033a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40021000 	.word	0x40021000

080019a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08c      	sub	sp, #48	@ 0x30
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80019b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001a74 <HAL_InitTick+0xcc>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	4a2d      	ldr	r2, [pc, #180]	@ (8001a74 <HAL_InitTick+0xcc>)
 80019be:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019c2:	6193      	str	r3, [r2, #24]
 80019c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a74 <HAL_InitTick+0xcc>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019d0:	f107 020c 	add.w	r2, r7, #12
 80019d4:	f107 0310 	add.w	r3, r7, #16
 80019d8:	4611      	mov	r1, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f003 fe0a 	bl	80055f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80019e0:	f003 fde6 	bl	80055b0 <HAL_RCC_GetPCLK2Freq>
 80019e4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019e8:	4a23      	ldr	r2, [pc, #140]	@ (8001a78 <HAL_InitTick+0xd0>)
 80019ea:	fba2 2303 	umull	r2, r3, r2, r3
 80019ee:	0c9b      	lsrs	r3, r3, #18
 80019f0:	3b01      	subs	r3, #1
 80019f2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80019f4:	4b21      	ldr	r3, [pc, #132]	@ (8001a7c <HAL_InitTick+0xd4>)
 80019f6:	4a22      	ldr	r2, [pc, #136]	@ (8001a80 <HAL_InitTick+0xd8>)
 80019f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80019fa:	4b20      	ldr	r3, [pc, #128]	@ (8001a7c <HAL_InitTick+0xd4>)
 80019fc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a00:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001a02:	4a1e      	ldr	r2, [pc, #120]	@ (8001a7c <HAL_InitTick+0xd4>)
 8001a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a06:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001a08:	4b1c      	ldr	r3, [pc, #112]	@ (8001a7c <HAL_InitTick+0xd4>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001a7c <HAL_InitTick+0xd4>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a14:	4b19      	ldr	r3, [pc, #100]	@ (8001a7c <HAL_InitTick+0xd4>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001a1a:	4818      	ldr	r0, [pc, #96]	@ (8001a7c <HAL_InitTick+0xd4>)
 8001a1c:	f004 f83a 	bl	8005a94 <HAL_TIM_Base_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001a26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d11b      	bne.n	8001a66 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001a2e:	4813      	ldr	r0, [pc, #76]	@ (8001a7c <HAL_InitTick+0xd4>)
 8001a30:	f004 f892 	bl	8005b58 <HAL_TIM_Base_Start_IT>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001a3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d111      	bne.n	8001a66 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001a42:	2019      	movs	r0, #25
 8001a44:	f001 fcca 	bl	80033dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b0f      	cmp	r3, #15
 8001a4c:	d808      	bhi.n	8001a60 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	6879      	ldr	r1, [r7, #4]
 8001a52:	2019      	movs	r0, #25
 8001a54:	f001 fca6 	bl	80033a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a58:	4a0a      	ldr	r2, [pc, #40]	@ (8001a84 <HAL_InitTick+0xdc>)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	e002      	b.n	8001a66 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001a66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3730      	adds	r7, #48	@ 0x30
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40021000 	.word	0x40021000
 8001a78:	431bde83 	.word	0x431bde83
 8001a7c:	20000518 	.word	0x20000518
 8001a80:	40012c00 	.word	0x40012c00
 8001a84:	20000004 	.word	0x20000004

08001a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <NMI_Handler+0x4>

08001a90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <HardFault_Handler+0x4>

08001a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <MemManage_Handler+0x4>

08001aa0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <BusFault_Handler+0x4>

08001aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <UsageFault_Handler+0x4>

08001ab0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ac4:	4802      	ldr	r0, [pc, #8]	@ (8001ad0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001ac6:	f004 fa1b 	bl	8005f00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000518 	.word	0x20000518

08001ad4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return 1;
 8001ad8:	2301      	movs	r3, #1
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <_kill>:

int _kill(int pid, int sig)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001aee:	f009 fb91 	bl	800b214 <__errno>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2216      	movs	r2, #22
 8001af6:	601a      	str	r2, [r3, #0]
  return -1;
 8001af8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <_exit>:

void _exit (int status)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b0c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff ffe7 	bl	8001ae4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b16:	bf00      	nop
 8001b18:	e7fd      	b.n	8001b16 <_exit+0x12>

08001b1a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	e00a      	b.n	8001b42 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b2c:	f3af 8000 	nop.w
 8001b30:	4601      	mov	r1, r0
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	60ba      	str	r2, [r7, #8]
 8001b38:	b2ca      	uxtb	r2, r1
 8001b3a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	dbf0      	blt.n	8001b2c <_read+0x12>
  }

  return len;
 8001b4a:	687b      	ldr	r3, [r7, #4]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	e009      	b.n	8001b7a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	60ba      	str	r2, [r7, #8]
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	3301      	adds	r3, #1
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	dbf1      	blt.n	8001b66 <_write+0x12>
  }
  return len;
 8001b82:	687b      	ldr	r3, [r7, #4]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <_close>:

int _close(int file)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bb4:	605a      	str	r2, [r3, #4]
  return 0;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <_isatty>:

int _isatty(int file)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bcc:	2301      	movs	r3, #1
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b085      	sub	sp, #20
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	60f8      	str	r0, [r7, #12]
 8001be2:	60b9      	str	r1, [r7, #8]
 8001be4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bfc:	4a14      	ldr	r2, [pc, #80]	@ (8001c50 <_sbrk+0x5c>)
 8001bfe:	4b15      	ldr	r3, [pc, #84]	@ (8001c54 <_sbrk+0x60>)
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c08:	4b13      	ldr	r3, [pc, #76]	@ (8001c58 <_sbrk+0x64>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d102      	bne.n	8001c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c10:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <_sbrk+0x64>)
 8001c12:	4a12      	ldr	r2, [pc, #72]	@ (8001c5c <_sbrk+0x68>)
 8001c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c16:	4b10      	ldr	r3, [pc, #64]	@ (8001c58 <_sbrk+0x64>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d207      	bcs.n	8001c34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c24:	f009 faf6 	bl	800b214 <__errno>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	220c      	movs	r2, #12
 8001c2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c32:	e009      	b.n	8001c48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c34:	4b08      	ldr	r3, [pc, #32]	@ (8001c58 <_sbrk+0x64>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c3a:	4b07      	ldr	r3, [pc, #28]	@ (8001c58 <_sbrk+0x64>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	4a05      	ldr	r2, [pc, #20]	@ (8001c58 <_sbrk+0x64>)
 8001c44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c46:	68fb      	ldr	r3, [r7, #12]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20010000 	.word	0x20010000
 8001c54:	00000400 	.word	0x00000400
 8001c58:	20000564 	.word	0x20000564
 8001c5c:	20002170 	.word	0x20002170

08001c60 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c64:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <SystemInit+0x20>)
 8001c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c6a:	4a05      	ldr	r2, [pc, #20]	@ (8001c80 <SystemInit+0x20>)
 8001c6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08a      	sub	sp, #40	@ 0x28
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c8a:	f107 031c 	add.w	r3, r7, #28
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c96:	463b      	mov	r3, r7
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
 8001ca4:	615a      	str	r2, [r3, #20]
 8001ca6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ca8:	4b21      	ldr	r3, [pc, #132]	@ (8001d30 <MX_TIM3_Init+0xac>)
 8001caa:	4a22      	ldr	r2, [pc, #136]	@ (8001d34 <MX_TIM3_Init+0xb0>)
 8001cac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001cae:	4b20      	ldr	r3, [pc, #128]	@ (8001d30 <MX_TIM3_Init+0xac>)
 8001cb0:	2247      	movs	r2, #71	@ 0x47
 8001cb2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d30 <MX_TIM3_Init+0xac>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001cba:	4b1d      	ldr	r3, [pc, #116]	@ (8001d30 <MX_TIM3_Init+0xac>)
 8001cbc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001cc0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d30 <MX_TIM3_Init+0xac>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cc8:	4b19      	ldr	r3, [pc, #100]	@ (8001d30 <MX_TIM3_Init+0xac>)
 8001cca:	2280      	movs	r2, #128	@ 0x80
 8001ccc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001cce:	4818      	ldr	r0, [pc, #96]	@ (8001d30 <MX_TIM3_Init+0xac>)
 8001cd0:	f003 ffb2 	bl	8005c38 <HAL_TIM_PWM_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001cda:	f7ff fbff 	bl	80014dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ce6:	f107 031c 	add.w	r3, r7, #28
 8001cea:	4619      	mov	r1, r3
 8001cec:	4810      	ldr	r0, [pc, #64]	@ (8001d30 <MX_TIM3_Init+0xac>)
 8001cee:	f004 ff1b 	bl	8006b28 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001cf8:	f7ff fbf0 	bl	80014dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cfc:	2360      	movs	r3, #96	@ 0x60
 8001cfe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d04:	2300      	movs	r3, #0
 8001d06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d0c:	463b      	mov	r3, r7
 8001d0e:	2200      	movs	r2, #0
 8001d10:	4619      	mov	r1, r3
 8001d12:	4807      	ldr	r0, [pc, #28]	@ (8001d30 <MX_TIM3_Init+0xac>)
 8001d14:	f004 f9f6 	bl	8006104 <HAL_TIM_PWM_ConfigChannel>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001d1e:	f7ff fbdd 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d22:	4803      	ldr	r0, [pc, #12]	@ (8001d30 <MX_TIM3_Init+0xac>)
 8001d24:	f000 f828 	bl	8001d78 <HAL_TIM_MspPostInit>

}
 8001d28:	bf00      	nop
 8001d2a:	3728      	adds	r7, #40	@ 0x28
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000568 	.word	0x20000568
 8001d34:	40000400 	.word	0x40000400

08001d38 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a0a      	ldr	r2, [pc, #40]	@ (8001d70 <HAL_TIM_PWM_MspInit+0x38>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d10b      	bne.n	8001d62 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d74 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	4a09      	ldr	r2, [pc, #36]	@ (8001d74 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d50:	f043 0302 	orr.w	r3, r3, #2
 8001d54:	61d3      	str	r3, [r2, #28]
 8001d56:	4b07      	ldr	r3, [pc, #28]	@ (8001d74 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001d62:	bf00      	nop
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40000400 	.word	0x40000400
 8001d74:	40021000 	.word	0x40021000

08001d78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 030c 	add.w	r3, r7, #12
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a11      	ldr	r2, [pc, #68]	@ (8001ddc <HAL_TIM_MspPostInit+0x64>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d11c      	bne.n	8001dd4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9a:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <HAL_TIM_MspPostInit+0x68>)
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	4a10      	ldr	r2, [pc, #64]	@ (8001de0 <HAL_TIM_MspPostInit+0x68>)
 8001da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001da4:	6153      	str	r3, [r2, #20]
 8001da6:	4b0e      	ldr	r3, [pc, #56]	@ (8001de0 <HAL_TIM_MspPostInit+0x68>)
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001db2:	2340      	movs	r3, #64	@ 0x40
 8001db4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db6:	2302      	movs	r3, #2
 8001db8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001dc6:	f107 030c 	add.w	r3, r7, #12
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dd0:	f001 fb12 	bl	80033f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001dd4:	bf00      	nop
 8001dd6:	3720      	adds	r7, #32
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40000400 	.word	0x40000400
 8001de0:	40021000 	.word	0x40021000

08001de4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001de8:	4b14      	ldr	r3, [pc, #80]	@ (8001e3c <MX_USART2_UART_Init+0x58>)
 8001dea:	4a15      	ldr	r2, [pc, #84]	@ (8001e40 <MX_USART2_UART_Init+0x5c>)
 8001dec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dee:	4b13      	ldr	r3, [pc, #76]	@ (8001e3c <MX_USART2_UART_Init+0x58>)
 8001df0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001df4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001df6:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <MX_USART2_UART_Init+0x58>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001e3c <MX_USART2_UART_Init+0x58>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e02:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <MX_USART2_UART_Init+0x58>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e08:	4b0c      	ldr	r3, [pc, #48]	@ (8001e3c <MX_USART2_UART_Init+0x58>)
 8001e0a:	220c      	movs	r2, #12
 8001e0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e3c <MX_USART2_UART_Init+0x58>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e14:	4b09      	ldr	r3, [pc, #36]	@ (8001e3c <MX_USART2_UART_Init+0x58>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e1a:	4b08      	ldr	r3, [pc, #32]	@ (8001e3c <MX_USART2_UART_Init+0x58>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e20:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <MX_USART2_UART_Init+0x58>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e26:	4805      	ldr	r0, [pc, #20]	@ (8001e3c <MX_USART2_UART_Init+0x58>)
 8001e28:	f004 ff28 	bl	8006c7c <HAL_UART_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001e32:	f7ff fb53 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200005b4 	.word	0x200005b4
 8001e40:	40004400 	.word	0x40004400

08001e44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08a      	sub	sp, #40	@ 0x28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a17      	ldr	r2, [pc, #92]	@ (8001ec0 <HAL_UART_MspInit+0x7c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d128      	bne.n	8001eb8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e66:	4b17      	ldr	r3, [pc, #92]	@ (8001ec4 <HAL_UART_MspInit+0x80>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	4a16      	ldr	r2, [pc, #88]	@ (8001ec4 <HAL_UART_MspInit+0x80>)
 8001e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e70:	61d3      	str	r3, [r2, #28]
 8001e72:	4b14      	ldr	r3, [pc, #80]	@ (8001ec4 <HAL_UART_MspInit+0x80>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7e:	4b11      	ldr	r3, [pc, #68]	@ (8001ec4 <HAL_UART_MspInit+0x80>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	4a10      	ldr	r2, [pc, #64]	@ (8001ec4 <HAL_UART_MspInit+0x80>)
 8001e84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e88:	6153      	str	r3, [r2, #20]
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec4 <HAL_UART_MspInit+0x80>)
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e96:	230c      	movs	r3, #12
 8001e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ea6:	2307      	movs	r3, #7
 8001ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eaa:	f107 0314 	add.w	r3, r7, #20
 8001eae:	4619      	mov	r1, r3
 8001eb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eb4:	f001 faa0 	bl	80033f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001eb8:	bf00      	nop
 8001eba:	3728      	adds	r7, #40	@ 0x28
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40004400 	.word	0x40004400
 8001ec4:	40021000 	.word	0x40021000

08001ec8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ec8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f00 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ecc:	f7ff fec8 	bl	8001c60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ed0:	480c      	ldr	r0, [pc, #48]	@ (8001f04 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ed2:	490d      	ldr	r1, [pc, #52]	@ (8001f08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ed4:	4a0d      	ldr	r2, [pc, #52]	@ (8001f0c <LoopForever+0xe>)
  movs r3, #0
 8001ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed8:	e002      	b.n	8001ee0 <LoopCopyDataInit>

08001eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ede:	3304      	adds	r3, #4

08001ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee4:	d3f9      	bcc.n	8001eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ee8:	4c0a      	ldr	r4, [pc, #40]	@ (8001f14 <LoopForever+0x16>)
  movs r3, #0
 8001eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eec:	e001      	b.n	8001ef2 <LoopFillZerobss>

08001eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef0:	3204      	adds	r2, #4

08001ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef4:	d3fb      	bcc.n	8001eee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ef6:	f009 f993 	bl	800b220 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001efa:	f7ff fa4f 	bl	800139c <main>

08001efe <LoopForever>:

LoopForever:
    b LoopForever
 8001efe:	e7fe      	b.n	8001efe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f00:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f08:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001f0c:	0800f5f0 	.word	0x0800f5f0
  ldr r2, =_sbss
 8001f10:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001f14:	2000216c 	.word	0x2000216c

08001f18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f18:	e7fe      	b.n	8001f18 <ADC1_2_IRQHandler>
	...

08001f1c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f20:	4b08      	ldr	r3, [pc, #32]	@ (8001f44 <HAL_Init+0x28>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a07      	ldr	r2, [pc, #28]	@ (8001f44 <HAL_Init+0x28>)
 8001f26:	f043 0310 	orr.w	r3, r3, #16
 8001f2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f2c:	2003      	movs	r0, #3
 8001f2e:	f001 fa2e 	bl	800338e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f32:	200f      	movs	r0, #15
 8001f34:	f7ff fd38 	bl	80019a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f38:	f7ff fd0e 	bl	8001958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40022000 	.word	0x40022000

08001f48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <HAL_IncTick+0x20>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <HAL_IncTick+0x24>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	4a04      	ldr	r2, [pc, #16]	@ (8001f6c <HAL_IncTick+0x24>)
 8001f5a:	6013      	str	r3, [r2, #0]
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	20000008 	.word	0x20000008
 8001f6c:	2000063c 	.word	0x2000063c

08001f70 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return uwTick;  
 8001f74:	4b03      	ldr	r3, [pc, #12]	@ (8001f84 <HAL_GetTick+0x14>)
 8001f76:	681b      	ldr	r3, [r3, #0]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	2000063c 	.word	0x2000063c

08001f88 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f90:	f7ff ffee 	bl	8001f70 <HAL_GetTick>
 8001f94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001fa0:	d005      	beq.n	8001fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8001fcc <HAL_Delay+0x44>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4413      	add	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001fae:	bf00      	nop
 8001fb0:	f7ff ffde 	bl	8001f70 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d8f7      	bhi.n	8001fb0 <HAL_Delay+0x28>
  {
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000008 	.word	0x20000008

08001fd0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b09a      	sub	sp, #104	@ 0x68
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e1e3      	b.n	80023b8 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffa:	f003 0310 	and.w	r3, r3, #16
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d176      	bne.n	80020f0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002006:	2b00      	cmp	r3, #0
 8002008:	d152      	bne.n	80020b0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7fe ff6f 	bl	8000f08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d13b      	bne.n	80020b0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 ffdf 	bl	8002ffc <ADC_Disable>
 800203e:	4603      	mov	r3, r0
 8002040:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002048:	f003 0310 	and.w	r3, r3, #16
 800204c:	2b00      	cmp	r3, #0
 800204e:	d12f      	bne.n	80020b0 <HAL_ADC_Init+0xe0>
 8002050:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002054:	2b00      	cmp	r3, #0
 8002056:	d12b      	bne.n	80020b0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002060:	f023 0302 	bic.w	r3, r3, #2
 8002064:	f043 0202 	orr.w	r2, r3, #2
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800207a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800208a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800208c:	4b92      	ldr	r3, [pc, #584]	@ (80022d8 <HAL_ADC_Init+0x308>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a92      	ldr	r2, [pc, #584]	@ (80022dc <HAL_ADC_Init+0x30c>)
 8002092:	fba2 2303 	umull	r2, r3, r2, r3
 8002096:	0c9a      	lsrs	r2, r3, #18
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020a2:	e002      	b.n	80020aa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1f9      	bne.n	80020a4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d007      	beq.n	80020ce <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80020c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80020cc:	d110      	bne.n	80020f0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	f023 0312 	bic.w	r3, r3, #18
 80020d6:	f043 0210 	orr.w	r2, r3, #16
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e2:	f043 0201 	orr.w	r2, r3, #1
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f040 8150 	bne.w	800239e <HAL_ADC_Init+0x3ce>
 80020fe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002102:	2b00      	cmp	r3, #0
 8002104:	f040 814b 	bne.w	800239e <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002112:	2b00      	cmp	r3, #0
 8002114:	f040 8143 	bne.w	800239e <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002120:	f043 0202 	orr.w	r2, r3, #2
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002130:	d004      	beq.n	800213c <HAL_ADC_Init+0x16c>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a6a      	ldr	r2, [pc, #424]	@ (80022e0 <HAL_ADC_Init+0x310>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d101      	bne.n	8002140 <HAL_ADC_Init+0x170>
 800213c:	4b69      	ldr	r3, [pc, #420]	@ (80022e4 <HAL_ADC_Init+0x314>)
 800213e:	e000      	b.n	8002142 <HAL_ADC_Init+0x172>
 8002140:	4b69      	ldr	r3, [pc, #420]	@ (80022e8 <HAL_ADC_Init+0x318>)
 8002142:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800214c:	d102      	bne.n	8002154 <HAL_ADC_Init+0x184>
 800214e:	4b64      	ldr	r3, [pc, #400]	@ (80022e0 <HAL_ADC_Init+0x310>)
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	e01a      	b.n	800218a <HAL_ADC_Init+0x1ba>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a61      	ldr	r2, [pc, #388]	@ (80022e0 <HAL_ADC_Init+0x310>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d103      	bne.n	8002166 <HAL_ADC_Init+0x196>
 800215e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	e011      	b.n	800218a <HAL_ADC_Init+0x1ba>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a60      	ldr	r2, [pc, #384]	@ (80022ec <HAL_ADC_Init+0x31c>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d102      	bne.n	8002176 <HAL_ADC_Init+0x1a6>
 8002170:	4b5f      	ldr	r3, [pc, #380]	@ (80022f0 <HAL_ADC_Init+0x320>)
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	e009      	b.n	800218a <HAL_ADC_Init+0x1ba>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a5d      	ldr	r2, [pc, #372]	@ (80022f0 <HAL_ADC_Init+0x320>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d102      	bne.n	8002186 <HAL_ADC_Init+0x1b6>
 8002180:	4b5a      	ldr	r3, [pc, #360]	@ (80022ec <HAL_ADC_Init+0x31c>)
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	e001      	b.n	800218a <HAL_ADC_Init+0x1ba>
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	2b01      	cmp	r3, #1
 8002196:	d108      	bne.n	80021aa <HAL_ADC_Init+0x1da>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d101      	bne.n	80021aa <HAL_ADC_Init+0x1da>
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <HAL_ADC_Init+0x1dc>
 80021aa:	2300      	movs	r3, #0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d11c      	bne.n	80021ea <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80021b0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d010      	beq.n	80021d8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d107      	bne.n	80021d2 <HAL_ADC_Init+0x202>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_ADC_Init+0x202>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <HAL_ADC_Init+0x204>
 80021d2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d108      	bne.n	80021ea <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80021d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	431a      	orrs	r2, r3
 80021e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021e8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	7e5b      	ldrb	r3, [r3, #25]
 80021ee:	035b      	lsls	r3, r3, #13
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80021f4:	2a01      	cmp	r2, #1
 80021f6:	d002      	beq.n	80021fe <HAL_ADC_Init+0x22e>
 80021f8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80021fc:	e000      	b.n	8002200 <HAL_ADC_Init+0x230>
 80021fe:	2200      	movs	r2, #0
 8002200:	431a      	orrs	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	4313      	orrs	r3, r2
 800220e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002210:	4313      	orrs	r3, r2
 8002212:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 3020 	ldrb.w	r3, [r3, #32]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d11b      	bne.n	8002256 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	7e5b      	ldrb	r3, [r3, #25]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d109      	bne.n	800223a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222a:	3b01      	subs	r3, #1
 800222c:	045a      	lsls	r2, r3, #17
 800222e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002230:	4313      	orrs	r3, r2
 8002232:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002236:	663b      	str	r3, [r7, #96]	@ 0x60
 8002238:	e00d      	b.n	8002256 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002242:	f043 0220 	orr.w	r2, r3, #32
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224e:	f043 0201 	orr.w	r2, r3, #1
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225a:	2b01      	cmp	r3, #1
 800225c:	d054      	beq.n	8002308 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a22      	ldr	r2, [pc, #136]	@ (80022ec <HAL_ADC_Init+0x31c>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d004      	beq.n	8002272 <HAL_ADC_Init+0x2a2>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a20      	ldr	r2, [pc, #128]	@ (80022f0 <HAL_ADC_Init+0x320>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d140      	bne.n	80022f4 <HAL_ADC_Init+0x324>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002276:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 800227a:	d02a      	beq.n	80022d2 <HAL_ADC_Init+0x302>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002280:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002284:	d022      	beq.n	80022cc <HAL_ADC_Init+0x2fc>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800228a:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 800228e:	d01a      	beq.n	80022c6 <HAL_ADC_Init+0x2f6>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002294:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8002298:	d012      	beq.n	80022c0 <HAL_ADC_Init+0x2f0>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800229e:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 80022a2:	d00a      	beq.n	80022ba <HAL_ADC_Init+0x2ea>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a8:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 80022ac:	d002      	beq.n	80022b4 <HAL_ADC_Init+0x2e4>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b2:	e023      	b.n	80022fc <HAL_ADC_Init+0x32c>
 80022b4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80022b8:	e020      	b.n	80022fc <HAL_ADC_Init+0x32c>
 80022ba:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80022be:	e01d      	b.n	80022fc <HAL_ADC_Init+0x32c>
 80022c0:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80022c4:	e01a      	b.n	80022fc <HAL_ADC_Init+0x32c>
 80022c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022ca:	e017      	b.n	80022fc <HAL_ADC_Init+0x32c>
 80022cc:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 80022d0:	e014      	b.n	80022fc <HAL_ADC_Init+0x32c>
 80022d2:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80022d6:	e011      	b.n	80022fc <HAL_ADC_Init+0x32c>
 80022d8:	20000000 	.word	0x20000000
 80022dc:	431bde83 	.word	0x431bde83
 80022e0:	50000100 	.word	0x50000100
 80022e4:	50000300 	.word	0x50000300
 80022e8:	50000700 	.word	0x50000700
 80022ec:	50000400 	.word	0x50000400
 80022f0:	50000500 	.word	0x50000500
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002300:	4313      	orrs	r3, r2
 8002302:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002304:	4313      	orrs	r3, r2
 8002306:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b00      	cmp	r3, #0
 8002314:	d114      	bne.n	8002340 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002324:	f023 0302 	bic.w	r3, r3, #2
 8002328:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	7e1b      	ldrb	r3, [r3, #24]
 800232e:	039a      	lsls	r2, r3, #14
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	4313      	orrs	r3, r2
 800233a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800233c:	4313      	orrs	r3, r2
 800233e:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	4b1e      	ldr	r3, [pc, #120]	@ (80023c0 <HAL_ADC_Init+0x3f0>)
 8002348:	4013      	ands	r3, r2
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002350:	430b      	orrs	r3, r1
 8002352:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d10c      	bne.n	8002376 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	f023 010f 	bic.w	r1, r3, #15
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	1e5a      	subs	r2, r3, #1
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	631a      	str	r2, [r3, #48]	@ 0x30
 8002374:	e007      	b.n	8002386 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 020f 	bic.w	r2, r2, #15
 8002384:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002390:	f023 0303 	bic.w	r3, r3, #3
 8002394:	f043 0201 	orr.w	r2, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	641a      	str	r2, [r3, #64]	@ 0x40
 800239c:	e00a      	b.n	80023b4 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a2:	f023 0312 	bic.w	r3, r3, #18
 80023a6:	f043 0210 	orr.w	r2, r3, #16
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80023ae:	2301      	movs	r3, #1
 80023b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80023b4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3768      	adds	r7, #104	@ 0x68
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	fff0c007 	.word	0xfff0c007

080023c4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f040 80f9 	bne.w	80025d2 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <HAL_ADC_Start+0x2a>
 80023ea:	2302      	movs	r3, #2
 80023ec:	e0f4      	b.n	80025d8 <HAL_ADC_Start+0x214>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 fd9c 	bl	8002f34 <ADC_Enable>
 80023fc:	4603      	mov	r3, r0
 80023fe:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	2b00      	cmp	r3, #0
 8002404:	f040 80e0 	bne.w	80025c8 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002410:	f023 0301 	bic.w	r3, r3, #1
 8002414:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002424:	d004      	beq.n	8002430 <HAL_ADC_Start+0x6c>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a6d      	ldr	r2, [pc, #436]	@ (80025e0 <HAL_ADC_Start+0x21c>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d106      	bne.n	800243e <HAL_ADC_Start+0x7a>
 8002430:	4b6c      	ldr	r3, [pc, #432]	@ (80025e4 <HAL_ADC_Start+0x220>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	2b00      	cmp	r3, #0
 800243a:	d010      	beq.n	800245e <HAL_ADC_Start+0x9a>
 800243c:	e005      	b.n	800244a <HAL_ADC_Start+0x86>
 800243e:	4b6a      	ldr	r3, [pc, #424]	@ (80025e8 <HAL_ADC_Start+0x224>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 031f 	and.w	r3, r3, #31
 8002446:	2b00      	cmp	r3, #0
 8002448:	d009      	beq.n	800245e <HAL_ADC_Start+0x9a>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002452:	d004      	beq.n	800245e <HAL_ADC_Start+0x9a>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a64      	ldr	r2, [pc, #400]	@ (80025ec <HAL_ADC_Start+0x228>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d115      	bne.n	800248a <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002462:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d036      	beq.n	80024e6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002480:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002488:	e02d      	b.n	80024e6 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800249e:	d004      	beq.n	80024aa <HAL_ADC_Start+0xe6>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a4e      	ldr	r2, [pc, #312]	@ (80025e0 <HAL_ADC_Start+0x21c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d10a      	bne.n	80024c0 <HAL_ADC_Start+0xfc>
 80024aa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	bf14      	ite	ne
 80024b8:	2301      	movne	r3, #1
 80024ba:	2300      	moveq	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	e008      	b.n	80024d2 <HAL_ADC_Start+0x10e>
 80024c0:	4b4a      	ldr	r3, [pc, #296]	@ (80025ec <HAL_ADC_Start+0x228>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	bf14      	ite	ne
 80024cc:	2301      	movne	r3, #1
 80024ce:	2300      	moveq	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d007      	beq.n	80024e6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024da:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024de:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024f2:	d106      	bne.n	8002502 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f8:	f023 0206 	bic.w	r2, r3, #6
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	645a      	str	r2, [r3, #68]	@ 0x44
 8002500:	e002      	b.n	8002508 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	221c      	movs	r2, #28
 8002516:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002520:	d004      	beq.n	800252c <HAL_ADC_Start+0x168>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a2e      	ldr	r2, [pc, #184]	@ (80025e0 <HAL_ADC_Start+0x21c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d106      	bne.n	800253a <HAL_ADC_Start+0x176>
 800252c:	4b2d      	ldr	r3, [pc, #180]	@ (80025e4 <HAL_ADC_Start+0x220>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 031f 	and.w	r3, r3, #31
 8002534:	2b00      	cmp	r3, #0
 8002536:	d03e      	beq.n	80025b6 <HAL_ADC_Start+0x1f2>
 8002538:	e005      	b.n	8002546 <HAL_ADC_Start+0x182>
 800253a:	4b2b      	ldr	r3, [pc, #172]	@ (80025e8 <HAL_ADC_Start+0x224>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 031f 	and.w	r3, r3, #31
 8002542:	2b00      	cmp	r3, #0
 8002544:	d037      	beq.n	80025b6 <HAL_ADC_Start+0x1f2>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800254e:	d004      	beq.n	800255a <HAL_ADC_Start+0x196>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a22      	ldr	r2, [pc, #136]	@ (80025e0 <HAL_ADC_Start+0x21c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d106      	bne.n	8002568 <HAL_ADC_Start+0x1a4>
 800255a:	4b22      	ldr	r3, [pc, #136]	@ (80025e4 <HAL_ADC_Start+0x220>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 031f 	and.w	r3, r3, #31
 8002562:	2b05      	cmp	r3, #5
 8002564:	d027      	beq.n	80025b6 <HAL_ADC_Start+0x1f2>
 8002566:	e005      	b.n	8002574 <HAL_ADC_Start+0x1b0>
 8002568:	4b1f      	ldr	r3, [pc, #124]	@ (80025e8 <HAL_ADC_Start+0x224>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f003 031f 	and.w	r3, r3, #31
 8002570:	2b05      	cmp	r3, #5
 8002572:	d020      	beq.n	80025b6 <HAL_ADC_Start+0x1f2>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800257c:	d004      	beq.n	8002588 <HAL_ADC_Start+0x1c4>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a17      	ldr	r2, [pc, #92]	@ (80025e0 <HAL_ADC_Start+0x21c>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d106      	bne.n	8002596 <HAL_ADC_Start+0x1d2>
 8002588:	4b16      	ldr	r3, [pc, #88]	@ (80025e4 <HAL_ADC_Start+0x220>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	2b09      	cmp	r3, #9
 8002592:	d010      	beq.n	80025b6 <HAL_ADC_Start+0x1f2>
 8002594:	e005      	b.n	80025a2 <HAL_ADC_Start+0x1de>
 8002596:	4b14      	ldr	r3, [pc, #80]	@ (80025e8 <HAL_ADC_Start+0x224>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 031f 	and.w	r3, r3, #31
 800259e:	2b09      	cmp	r3, #9
 80025a0:	d009      	beq.n	80025b6 <HAL_ADC_Start+0x1f2>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025aa:	d004      	beq.n	80025b6 <HAL_ADC_Start+0x1f2>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a0e      	ldr	r2, [pc, #56]	@ (80025ec <HAL_ADC_Start+0x228>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d10f      	bne.n	80025d6 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f042 0204 	orr.w	r2, r2, #4
 80025c4:	609a      	str	r2, [r3, #8]
 80025c6:	e006      	b.n	80025d6 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80025d0:	e001      	b.n	80025d6 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80025d2:	2302      	movs	r3, #2
 80025d4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	50000100 	.word	0x50000100
 80025e4:	50000300 	.word	0x50000300
 80025e8:	50000700 	.word	0x50000700
 80025ec:	50000400 	.word	0x50000400

080025f0 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002602:	2b01      	cmp	r3, #1
 8002604:	d101      	bne.n	800260a <HAL_ADC_Stop+0x1a>
 8002606:	2302      	movs	r3, #2
 8002608:	e023      	b.n	8002652 <HAL_ADC_Stop+0x62>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002612:	216c      	movs	r1, #108	@ 0x6c
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 fd57 	bl	80030c8 <ADC_ConversionStop>
 800261a:	4603      	mov	r3, r0
 800261c:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800261e:	7bfb      	ldrb	r3, [r7, #15]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d111      	bne.n	8002648 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fce9 	bl	8002ffc <ADC_Disable>
 800262a:	4603      	mov	r3, r0
 800262c:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d109      	bne.n	8002648 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002638:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800263c:	f023 0301 	bic.w	r3, r3, #1
 8002640:	f043 0201 	orr.w	r2, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002650:	7bfb      	ldrb	r3, [r7, #15]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002666:	2300      	movs	r3, #0
 8002668:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	2b08      	cmp	r3, #8
 8002670:	d102      	bne.n	8002678 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002672:	2308      	movs	r3, #8
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	e03a      	b.n	80026ee <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002680:	d004      	beq.n	800268c <HAL_ADC_PollForConversion+0x30>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a72      	ldr	r2, [pc, #456]	@ (8002850 <HAL_ADC_PollForConversion+0x1f4>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d101      	bne.n	8002690 <HAL_ADC_PollForConversion+0x34>
 800268c:	4b71      	ldr	r3, [pc, #452]	@ (8002854 <HAL_ADC_PollForConversion+0x1f8>)
 800268e:	e000      	b.n	8002692 <HAL_ADC_PollForConversion+0x36>
 8002690:	4b71      	ldr	r3, [pc, #452]	@ (8002858 <HAL_ADC_PollForConversion+0x1fc>)
 8002692:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 031f 	and.w	r3, r3, #31
 800269c:	2b00      	cmp	r3, #0
 800269e:	d112      	bne.n	80026c6 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d11d      	bne.n	80026ea <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b2:	f043 0220 	orr.w	r2, r3, #32
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e0bf      	b.n	8002846 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00b      	beq.n	80026ea <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d6:	f043 0220 	orr.w	r2, r3, #32
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e0ad      	b.n	8002846 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80026ea:	230c      	movs	r3, #12
 80026ec:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026f6:	d004      	beq.n	8002702 <HAL_ADC_PollForConversion+0xa6>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a54      	ldr	r2, [pc, #336]	@ (8002850 <HAL_ADC_PollForConversion+0x1f4>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d106      	bne.n	8002710 <HAL_ADC_PollForConversion+0xb4>
 8002702:	4b54      	ldr	r3, [pc, #336]	@ (8002854 <HAL_ADC_PollForConversion+0x1f8>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 031f 	and.w	r3, r3, #31
 800270a:	2b00      	cmp	r3, #0
 800270c:	d010      	beq.n	8002730 <HAL_ADC_PollForConversion+0xd4>
 800270e:	e005      	b.n	800271c <HAL_ADC_PollForConversion+0xc0>
 8002710:	4b51      	ldr	r3, [pc, #324]	@ (8002858 <HAL_ADC_PollForConversion+0x1fc>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 031f 	and.w	r3, r3, #31
 8002718:	2b00      	cmp	r3, #0
 800271a:	d009      	beq.n	8002730 <HAL_ADC_PollForConversion+0xd4>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002724:	d004      	beq.n	8002730 <HAL_ADC_PollForConversion+0xd4>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a4c      	ldr	r2, [pc, #304]	@ (800285c <HAL_ADC_PollForConversion+0x200>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d104      	bne.n	800273a <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	e00f      	b.n	800275a <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002742:	d004      	beq.n	800274e <HAL_ADC_PollForConversion+0xf2>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a41      	ldr	r2, [pc, #260]	@ (8002850 <HAL_ADC_PollForConversion+0x1f4>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d102      	bne.n	8002754 <HAL_ADC_PollForConversion+0xf8>
 800274e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002752:	e000      	b.n	8002756 <HAL_ADC_PollForConversion+0xfa>
 8002754:	4b41      	ldr	r3, [pc, #260]	@ (800285c <HAL_ADC_PollForConversion+0x200>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800275a:	f7ff fc09 	bl	8001f70 <HAL_GetTick>
 800275e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002760:	e021      	b.n	80027a6 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002768:	d01d      	beq.n	80027a6 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d007      	beq.n	8002780 <HAL_ADC_PollForConversion+0x124>
 8002770:	f7ff fbfe 	bl	8001f70 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d212      	bcs.n	80027a6 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	4013      	ands	r3, r2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10b      	bne.n	80027a6 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002792:	f043 0204 	orr.w	r2, r3, #4
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e04f      	b.n	8002846 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0d6      	beq.n	8002762 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d131      	bne.n	8002832 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d12c      	bne.n	8002832 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b08      	cmp	r3, #8
 80027e4:	d125      	bne.n	8002832 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d112      	bne.n	800281a <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002804:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d112      	bne.n	8002832 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002810:	f043 0201 	orr.w	r2, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	641a      	str	r2, [r3, #64]	@ 0x40
 8002818:	e00b      	b.n	8002832 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281e:	f043 0220 	orr.w	r2, r3, #32
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282a:	f043 0201 	orr.w	r2, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d103      	bne.n	8002844 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	50000100 	.word	0x50000100
 8002854:	50000300 	.word	0x50000300
 8002858:	50000700 	.word	0x50000700
 800285c:	50000400 	.word	0x50000400

08002860 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b084      	sub	sp, #16
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
 8002882:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800288e:	2b01      	cmp	r3, #1
 8002890:	d101      	bne.n	8002896 <HAL_ADCEx_Calibration_Start+0x1c>
 8002892:	2302      	movs	r3, #2
 8002894:	e05f      	b.n	8002956 <HAL_ADCEx_Calibration_Start+0xdc>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 fbac 	bl	8002ffc <ADC_Disable>
 80028a4:	4603      	mov	r3, r0
 80028a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d14e      	bne.n	800294c <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 80028c2:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d107      	bne.n	80028da <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80028d8:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80028e8:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80028ea:	f7ff fb41 	bl	8001f70 <HAL_GetTick>
 80028ee:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80028f0:	e01c      	b.n	800292c <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80028f2:	f7ff fb3d 	bl	8001f70 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b0a      	cmp	r3, #10
 80028fe:	d915      	bls.n	800292c <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800290a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800290e:	d10d      	bne.n	800292c <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002914:	f023 0312 	bic.w	r3, r3, #18
 8002918:	f043 0210 	orr.w	r2, r3, #16
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e014      	b.n	8002956 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002936:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800293a:	d0da      	beq.n	80028f2 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002940:	f023 0303 	bic.w	r3, r3, #3
 8002944:	f043 0201 	orr.w	r2, r3, #1
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002954:	7bfb      	ldrb	r3, [r7, #15]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002960:	b480      	push	{r7}
 8002962:	b09b      	sub	sp, #108	@ 0x6c
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800297a:	2b01      	cmp	r3, #1
 800297c:	d101      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x22>
 800297e:	2302      	movs	r3, #2
 8002980:	e2c8      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x5b4>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	f040 82ac 	bne.w	8002ef2 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d81c      	bhi.n	80029dc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4413      	add	r3, r2
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	461a      	mov	r2, r3
 80029b6:	231f      	movs	r3, #31
 80029b8:	4093      	lsls	r3, r2
 80029ba:	43db      	mvns	r3, r3
 80029bc:	4019      	ands	r1, r3
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	4413      	add	r3, r2
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	fa00 f203 	lsl.w	r2, r0, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80029da:	e063      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b09      	cmp	r3, #9
 80029e2:	d81e      	bhi.n	8002a22 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	4413      	add	r3, r2
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	3b1e      	subs	r3, #30
 80029f8:	221f      	movs	r2, #31
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43db      	mvns	r3, r3
 8002a00:	4019      	ands	r1, r3
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	6818      	ldr	r0, [r3, #0]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	4413      	add	r3, r2
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	3b1e      	subs	r3, #30
 8002a14:	fa00 f203 	lsl.w	r2, r0, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a20:	e040      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b0e      	cmp	r3, #14
 8002a28:	d81e      	bhi.n	8002a68 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	4413      	add	r3, r2
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	3b3c      	subs	r3, #60	@ 0x3c
 8002a3e:	221f      	movs	r2, #31
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43db      	mvns	r3, r3
 8002a46:	4019      	ands	r1, r3
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	6818      	ldr	r0, [r3, #0]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	4413      	add	r3, r2
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	3b3c      	subs	r3, #60	@ 0x3c
 8002a5a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	639a      	str	r2, [r3, #56]	@ 0x38
 8002a66:	e01d      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	4613      	mov	r3, r2
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	4413      	add	r3, r2
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	3b5a      	subs	r3, #90	@ 0x5a
 8002a7c:	221f      	movs	r2, #31
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43db      	mvns	r3, r3
 8002a84:	4019      	ands	r1, r3
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	6818      	ldr	r0, [r3, #0]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	4413      	add	r3, r2
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	3b5a      	subs	r3, #90	@ 0x5a
 8002a98:	fa00 f203 	lsl.w	r2, r0, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f040 80e5 	bne.w	8002c7e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b09      	cmp	r3, #9
 8002aba:	d91c      	bls.n	8002af6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6999      	ldr	r1, [r3, #24]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	4413      	add	r3, r2
 8002acc:	3b1e      	subs	r3, #30
 8002ace:	2207      	movs	r2, #7
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	4019      	ands	r1, r3
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	6898      	ldr	r0, [r3, #8]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3b1e      	subs	r3, #30
 8002ae8:	fa00 f203 	lsl.w	r2, r0, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	619a      	str	r2, [r3, #24]
 8002af4:	e019      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6959      	ldr	r1, [r3, #20]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	4613      	mov	r3, r2
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	4413      	add	r3, r2
 8002b06:	2207      	movs	r2, #7
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	4019      	ands	r1, r3
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	6898      	ldr	r0, [r3, #8]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	4413      	add	r3, r2
 8002b1e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	695a      	ldr	r2, [r3, #20]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	08db      	lsrs	r3, r3, #3
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d84f      	bhi.n	8002bec <HAL_ADC_ConfigChannel+0x28c>
 8002b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8002b54 <HAL_ADC_ConfigChannel+0x1f4>)
 8002b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b52:	bf00      	nop
 8002b54:	08002b65 	.word	0x08002b65
 8002b58:	08002b87 	.word	0x08002b87
 8002b5c:	08002ba9 	.word	0x08002ba9
 8002b60:	08002bcb 	.word	0x08002bcb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002b6a:	4b99      	ldr	r3, [pc, #612]	@ (8002dd0 <HAL_ADC_ConfigChannel+0x470>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	6812      	ldr	r2, [r2, #0]
 8002b72:	0691      	lsls	r1, r2, #26
 8002b74:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002b76:	430a      	orrs	r2, r1
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002b82:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002b84:	e07b      	b.n	8002c7e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002b8c:	4b90      	ldr	r3, [pc, #576]	@ (8002dd0 <HAL_ADC_ConfigChannel+0x470>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	0691      	lsls	r1, r2, #26
 8002b96:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002ba4:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002ba6:	e06a      	b.n	8002c7e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002bae:	4b88      	ldr	r3, [pc, #544]	@ (8002dd0 <HAL_ADC_ConfigChannel+0x470>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	6812      	ldr	r2, [r2, #0]
 8002bb6:	0691      	lsls	r1, r2, #26
 8002bb8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002bc6:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002bc8:	e059      	b.n	8002c7e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002bd0:	4b7f      	ldr	r3, [pc, #508]	@ (8002dd0 <HAL_ADC_ConfigChannel+0x470>)
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	6812      	ldr	r2, [r2, #0]
 8002bd8:	0691      	lsls	r1, r2, #26
 8002bda:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002be8:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002bea:	e048      	b.n	8002c7e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bf2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	069b      	lsls	r3, r3, #26
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d107      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002c0e:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	069b      	lsls	r3, r3, #26
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d107      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002c32:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	069b      	lsls	r3, r3, #26
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d107      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002c56:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	069b      	lsls	r3, r3, #26
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d107      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002c7a:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002c7c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 0303 	and.w	r3, r3, #3
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d108      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x33e>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x33e>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x340>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f040 8131 	bne.w	8002f08 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d00f      	beq.n	8002cce <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43da      	mvns	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	400a      	ands	r2, r1
 8002cc8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002ccc:	e049      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	409a      	lsls	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b09      	cmp	r3, #9
 8002cee:	d91c      	bls.n	8002d2a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6999      	ldr	r1, [r3, #24]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	4413      	add	r3, r2
 8002d00:	3b1b      	subs	r3, #27
 8002d02:	2207      	movs	r2, #7
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	4019      	ands	r1, r3
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	6898      	ldr	r0, [r3, #8]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4613      	mov	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	3b1b      	subs	r3, #27
 8002d1c:	fa00 f203 	lsl.w	r2, r0, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	619a      	str	r2, [r3, #24]
 8002d28:	e01b      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6959      	ldr	r1, [r3, #20]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	4613      	mov	r3, r2
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	4413      	add	r3, r2
 8002d3c:	2207      	movs	r2, #7
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43db      	mvns	r3, r3
 8002d44:	4019      	ands	r1, r3
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	6898      	ldr	r0, [r3, #8]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	4613      	mov	r3, r2
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	4413      	add	r3, r2
 8002d56:	fa00 f203 	lsl.w	r2, r0, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d6a:	d004      	beq.n	8002d76 <HAL_ADC_ConfigChannel+0x416>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a18      	ldr	r2, [pc, #96]	@ (8002dd4 <HAL_ADC_ConfigChannel+0x474>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d101      	bne.n	8002d7a <HAL_ADC_ConfigChannel+0x41a>
 8002d76:	4b18      	ldr	r3, [pc, #96]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x478>)
 8002d78:	e000      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x41c>
 8002d7a:	4b18      	ldr	r3, [pc, #96]	@ (8002ddc <HAL_ADC_ConfigChannel+0x47c>)
 8002d7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b10      	cmp	r3, #16
 8002d84:	d105      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002d86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d015      	beq.n	8002dbe <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002d96:	2b11      	cmp	r3, #17
 8002d98:	d105      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002d9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00b      	beq.n	8002dbe <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002daa:	2b12      	cmp	r3, #18
 8002dac:	f040 80ac 	bne.w	8002f08 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002db0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f040 80a5 	bne.w	8002f08 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dc6:	d10b      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x480>
 8002dc8:	4b02      	ldr	r3, [pc, #8]	@ (8002dd4 <HAL_ADC_ConfigChannel+0x474>)
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	e023      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x4b6>
 8002dce:	bf00      	nop
 8002dd0:	83fff000 	.word	0x83fff000
 8002dd4:	50000100 	.word	0x50000100
 8002dd8:	50000300 	.word	0x50000300
 8002ddc:	50000700 	.word	0x50000700
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a4e      	ldr	r2, [pc, #312]	@ (8002f20 <HAL_ADC_ConfigChannel+0x5c0>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d103      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x492>
 8002dea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	e011      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x4b6>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a4b      	ldr	r2, [pc, #300]	@ (8002f24 <HAL_ADC_ConfigChannel+0x5c4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d102      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x4a2>
 8002dfc:	4b4a      	ldr	r3, [pc, #296]	@ (8002f28 <HAL_ADC_ConfigChannel+0x5c8>)
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	e009      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x4b6>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a48      	ldr	r2, [pc, #288]	@ (8002f28 <HAL_ADC_ConfigChannel+0x5c8>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d102      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0x4b2>
 8002e0c:	4b45      	ldr	r3, [pc, #276]	@ (8002f24 <HAL_ADC_ConfigChannel+0x5c4>)
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	e001      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x4b6>
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 0303 	and.w	r3, r3, #3
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d108      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x4d6>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x4d6>
 8002e32:	2301      	movs	r3, #1
 8002e34:	e000      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x4d8>
 8002e36:	2300      	movs	r3, #0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d150      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002e3c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d010      	beq.n	8002e64 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d107      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x4fe>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x4fe>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x500>
 8002e5e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d13c      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b10      	cmp	r3, #16
 8002e6a:	d11d      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x548>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e74:	d118      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002e76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002e7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e80:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e82:	4b2a      	ldr	r3, [pc, #168]	@ (8002f2c <HAL_ADC_ConfigChannel+0x5cc>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a2a      	ldr	r2, [pc, #168]	@ (8002f30 <HAL_ADC_ConfigChannel+0x5d0>)
 8002e88:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8c:	0c9a      	lsrs	r2, r3, #18
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e98:	e002      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f9      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ea6:	e02e      	b.n	8002f06 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b11      	cmp	r3, #17
 8002eae:	d10b      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x568>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002eb8:	d106      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002eba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002ec2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ec4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ec6:	e01e      	b.n	8002f06 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b12      	cmp	r3, #18
 8002ece:	d11a      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002ed0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002ed8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002eda:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002edc:	e013      	b.n	8002f06 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee2:	f043 0220 	orr.w	r2, r3, #32
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002ef0:	e00a      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef6:	f043 0220 	orr.w	r2, r3, #32
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002f04:	e000      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f06:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002f10:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	376c      	adds	r7, #108	@ 0x6c
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	50000100 	.word	0x50000100
 8002f24:	50000400 	.word	0x50000400
 8002f28:	50000500 	.word	0x50000500
 8002f2c:	20000000 	.word	0x20000000
 8002f30:	431bde83 	.word	0x431bde83

08002f34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d108      	bne.n	8002f60 <ADC_Enable+0x2c>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d101      	bne.n	8002f60 <ADC_Enable+0x2c>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <ADC_Enable+0x2e>
 8002f60:	2300      	movs	r3, #0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d143      	bne.n	8002fee <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	4b22      	ldr	r3, [pc, #136]	@ (8002ff8 <ADC_Enable+0xc4>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00d      	beq.n	8002f90 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f78:	f043 0210 	orr.w	r2, r3, #16
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f84:	f043 0201 	orr.w	r2, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e02f      	b.n	8002ff0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0201 	orr.w	r2, r2, #1
 8002f9e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002fa0:	f7fe ffe6 	bl	8001f70 <HAL_GetTick>
 8002fa4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002fa6:	e01b      	b.n	8002fe0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fa8:	f7fe ffe2 	bl	8001f70 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d914      	bls.n	8002fe0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d00d      	beq.n	8002fe0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc8:	f043 0210 	orr.w	r2, r3, #16
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd4:	f043 0201 	orr.w	r2, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e007      	b.n	8002ff0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d1dc      	bne.n	8002fa8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	8000003f 	.word	0x8000003f

08002ffc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	2b01      	cmp	r3, #1
 8003014:	d108      	bne.n	8003028 <ADC_Disable+0x2c>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <ADC_Disable+0x2c>
 8003024:	2301      	movs	r3, #1
 8003026:	e000      	b.n	800302a <ADC_Disable+0x2e>
 8003028:	2300      	movs	r3, #0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d047      	beq.n	80030be <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 030d 	and.w	r3, r3, #13
 8003038:	2b01      	cmp	r3, #1
 800303a:	d10f      	bne.n	800305c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0202 	orr.w	r2, r2, #2
 800304a:	609a      	str	r2, [r3, #8]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2203      	movs	r2, #3
 8003052:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003054:	f7fe ff8c 	bl	8001f70 <HAL_GetTick>
 8003058:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800305a:	e029      	b.n	80030b0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003060:	f043 0210 	orr.w	r2, r3, #16
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800306c:	f043 0201 	orr.w	r2, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e023      	b.n	80030c0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003078:	f7fe ff7a 	bl	8001f70 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d914      	bls.n	80030b0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b01      	cmp	r3, #1
 8003092:	d10d      	bne.n	80030b0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003098:	f043 0210 	orr.w	r2, r3, #16
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a4:	f043 0201 	orr.w	r2, r3, #1
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e007      	b.n	80030c0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d0dc      	beq.n	8003078 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80030da:	2300      	movs	r3, #0
 80030dc:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 030c 	and.w	r3, r3, #12
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 809b 	beq.w	8003224 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80030fc:	d12a      	bne.n	8003154 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003102:	2b01      	cmp	r3, #1
 8003104:	d126      	bne.n	8003154 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800310a:	2b01      	cmp	r3, #1
 800310c:	d122      	bne.n	8003154 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800310e:	230c      	movs	r3, #12
 8003110:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003112:	e014      	b.n	800313e <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	4a46      	ldr	r2, [pc, #280]	@ (8003230 <ADC_ConversionStop+0x168>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d90d      	bls.n	8003138 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003120:	f043 0210 	orr.w	r2, r3, #16
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800312c:	f043 0201 	orr.w	r2, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	645a      	str	r2, [r3, #68]	@ 0x44
          
          return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e076      	b.n	8003226 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	3301      	adds	r3, #1
 800313c:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003148:	2b40      	cmp	r3, #64	@ 0x40
 800314a:	d1e3      	bne.n	8003114 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2b60      	cmp	r3, #96	@ 0x60
 8003158:	d015      	beq.n	8003186 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b04      	cmp	r3, #4
 8003166:	d10e      	bne.n	8003186 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003172:	2b00      	cmp	r3, #0
 8003174:	d107      	bne.n	8003186 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0210 	orr.w	r2, r2, #16
 8003184:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b0c      	cmp	r3, #12
 800318a:	d015      	beq.n	80031b8 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b08      	cmp	r3, #8
 8003198:	d10e      	bne.n	80031b8 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d107      	bne.n	80031b8 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0220 	orr.w	r2, r2, #32
 80031b6:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	2b60      	cmp	r3, #96	@ 0x60
 80031bc:	d005      	beq.n	80031ca <ADC_ConversionStop+0x102>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b6c      	cmp	r3, #108	@ 0x6c
 80031c2:	d105      	bne.n	80031d0 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80031c4:	230c      	movs	r3, #12
 80031c6:	617b      	str	r3, [r7, #20]
        break;
 80031c8:	e005      	b.n	80031d6 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80031ca:	2308      	movs	r3, #8
 80031cc:	617b      	str	r3, [r7, #20]
        break;
 80031ce:	e002      	b.n	80031d6 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80031d0:	2304      	movs	r3, #4
 80031d2:	617b      	str	r3, [r7, #20]
        break;
 80031d4:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80031d6:	f7fe fecb 	bl	8001f70 <HAL_GetTick>
 80031da:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80031dc:	e01b      	b.n	8003216 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80031de:	f7fe fec7 	bl	8001f70 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b0b      	cmp	r3, #11
 80031ea:	d914      	bls.n	8003216 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	4013      	ands	r3, r2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00d      	beq.n	8003216 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fe:	f043 0210 	orr.w	r2, r3, #16
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800320a:	f043 0201 	orr.w	r2, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	645a      	str	r2, [r3, #68]	@ 0x44
        
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e007      	b.n	8003226 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	4013      	ands	r3, r2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1dc      	bne.n	80031de <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	000993ff 	.word	0x000993ff

08003234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003244:	4b0c      	ldr	r3, [pc, #48]	@ (8003278 <__NVIC_SetPriorityGrouping+0x44>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003250:	4013      	ands	r3, r2
 8003252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800325c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003260:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003266:	4a04      	ldr	r2, [pc, #16]	@ (8003278 <__NVIC_SetPriorityGrouping+0x44>)
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	60d3      	str	r3, [r2, #12]
}
 800326c:	bf00      	nop
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	e000ed00 	.word	0xe000ed00

0800327c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003280:	4b04      	ldr	r3, [pc, #16]	@ (8003294 <__NVIC_GetPriorityGrouping+0x18>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	0a1b      	lsrs	r3, r3, #8
 8003286:	f003 0307 	and.w	r3, r3, #7
}
 800328a:	4618      	mov	r0, r3
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	e000ed00 	.word	0xe000ed00

08003298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	4603      	mov	r3, r0
 80032a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	db0b      	blt.n	80032c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	f003 021f 	and.w	r2, r3, #31
 80032b0:	4907      	ldr	r1, [pc, #28]	@ (80032d0 <__NVIC_EnableIRQ+0x38>)
 80032b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b6:	095b      	lsrs	r3, r3, #5
 80032b8:	2001      	movs	r0, #1
 80032ba:	fa00 f202 	lsl.w	r2, r0, r2
 80032be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	e000e100 	.word	0xe000e100

080032d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	6039      	str	r1, [r7, #0]
 80032de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	db0a      	blt.n	80032fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	490c      	ldr	r1, [pc, #48]	@ (8003320 <__NVIC_SetPriority+0x4c>)
 80032ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f2:	0112      	lsls	r2, r2, #4
 80032f4:	b2d2      	uxtb	r2, r2
 80032f6:	440b      	add	r3, r1
 80032f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032fc:	e00a      	b.n	8003314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	b2da      	uxtb	r2, r3
 8003302:	4908      	ldr	r1, [pc, #32]	@ (8003324 <__NVIC_SetPriority+0x50>)
 8003304:	79fb      	ldrb	r3, [r7, #7]
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	3b04      	subs	r3, #4
 800330c:	0112      	lsls	r2, r2, #4
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	440b      	add	r3, r1
 8003312:	761a      	strb	r2, [r3, #24]
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	e000e100 	.word	0xe000e100
 8003324:	e000ed00 	.word	0xe000ed00

08003328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003328:	b480      	push	{r7}
 800332a:	b089      	sub	sp, #36	@ 0x24
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	f1c3 0307 	rsb	r3, r3, #7
 8003342:	2b04      	cmp	r3, #4
 8003344:	bf28      	it	cs
 8003346:	2304      	movcs	r3, #4
 8003348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	3304      	adds	r3, #4
 800334e:	2b06      	cmp	r3, #6
 8003350:	d902      	bls.n	8003358 <NVIC_EncodePriority+0x30>
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	3b03      	subs	r3, #3
 8003356:	e000      	b.n	800335a <NVIC_EncodePriority+0x32>
 8003358:	2300      	movs	r3, #0
 800335a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800335c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43da      	mvns	r2, r3
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	401a      	ands	r2, r3
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003370:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	fa01 f303 	lsl.w	r3, r1, r3
 800337a:	43d9      	mvns	r1, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003380:	4313      	orrs	r3, r2
         );
}
 8003382:	4618      	mov	r0, r3
 8003384:	3724      	adds	r7, #36	@ 0x24
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7ff ff4c 	bl	8003234 <__NVIC_SetPriorityGrouping>
}
 800339c:	bf00      	nop
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
 80033b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033b6:	f7ff ff61 	bl	800327c <__NVIC_GetPriorityGrouping>
 80033ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	68b9      	ldr	r1, [r7, #8]
 80033c0:	6978      	ldr	r0, [r7, #20]
 80033c2:	f7ff ffb1 	bl	8003328 <NVIC_EncodePriority>
 80033c6:	4602      	mov	r2, r0
 80033c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033cc:	4611      	mov	r1, r2
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff ff80 	bl	80032d4 <__NVIC_SetPriority>
}
 80033d4:	bf00      	nop
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff ff54 	bl	8003298 <__NVIC_EnableIRQ>
}
 80033f0:	bf00      	nop
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b087      	sub	sp, #28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003406:	e160      	b.n	80036ca <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	2101      	movs	r1, #1
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	fa01 f303 	lsl.w	r3, r1, r3
 8003414:	4013      	ands	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 8152 	beq.w	80036c4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 0303 	and.w	r3, r3, #3
 8003428:	2b01      	cmp	r3, #1
 800342a:	d005      	beq.n	8003438 <HAL_GPIO_Init+0x40>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 0303 	and.w	r3, r3, #3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d130      	bne.n	800349a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	2203      	movs	r2, #3
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	43db      	mvns	r3, r3
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4013      	ands	r3, r2
 800344e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800346e:	2201      	movs	r2, #1
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	43db      	mvns	r3, r3
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	4013      	ands	r3, r2
 800347c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	091b      	lsrs	r3, r3, #4
 8003484:	f003 0201 	and.w	r2, r3, #1
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	4313      	orrs	r3, r2
 8003492:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	2b03      	cmp	r3, #3
 80034a4:	d017      	beq.n	80034d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	2203      	movs	r2, #3
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43db      	mvns	r3, r3
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	4013      	ands	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d123      	bne.n	800352a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	08da      	lsrs	r2, r3, #3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	3208      	adds	r2, #8
 80034ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	220f      	movs	r2, #15
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	43db      	mvns	r3, r3
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4013      	ands	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	691a      	ldr	r2, [r3, #16]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	4313      	orrs	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	08da      	lsrs	r2, r3, #3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3208      	adds	r2, #8
 8003524:	6939      	ldr	r1, [r7, #16]
 8003526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	2203      	movs	r2, #3
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	43db      	mvns	r3, r3
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	4013      	ands	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f003 0203 	and.w	r2, r3, #3
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 80ac 	beq.w	80036c4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800356c:	4b5e      	ldr	r3, [pc, #376]	@ (80036e8 <HAL_GPIO_Init+0x2f0>)
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	4a5d      	ldr	r2, [pc, #372]	@ (80036e8 <HAL_GPIO_Init+0x2f0>)
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	6193      	str	r3, [r2, #24]
 8003578:	4b5b      	ldr	r3, [pc, #364]	@ (80036e8 <HAL_GPIO_Init+0x2f0>)
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003584:	4a59      	ldr	r2, [pc, #356]	@ (80036ec <HAL_GPIO_Init+0x2f4>)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	089b      	lsrs	r3, r3, #2
 800358a:	3302      	adds	r3, #2
 800358c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003590:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f003 0303 	and.w	r3, r3, #3
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	220f      	movs	r2, #15
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	43db      	mvns	r3, r3
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4013      	ands	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80035ae:	d025      	beq.n	80035fc <HAL_GPIO_Init+0x204>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a4f      	ldr	r2, [pc, #316]	@ (80036f0 <HAL_GPIO_Init+0x2f8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d01f      	beq.n	80035f8 <HAL_GPIO_Init+0x200>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a4e      	ldr	r2, [pc, #312]	@ (80036f4 <HAL_GPIO_Init+0x2fc>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d019      	beq.n	80035f4 <HAL_GPIO_Init+0x1fc>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a4d      	ldr	r2, [pc, #308]	@ (80036f8 <HAL_GPIO_Init+0x300>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d013      	beq.n	80035f0 <HAL_GPIO_Init+0x1f8>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a4c      	ldr	r2, [pc, #304]	@ (80036fc <HAL_GPIO_Init+0x304>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d00d      	beq.n	80035ec <HAL_GPIO_Init+0x1f4>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a4b      	ldr	r2, [pc, #300]	@ (8003700 <HAL_GPIO_Init+0x308>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d007      	beq.n	80035e8 <HAL_GPIO_Init+0x1f0>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a4a      	ldr	r2, [pc, #296]	@ (8003704 <HAL_GPIO_Init+0x30c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d101      	bne.n	80035e4 <HAL_GPIO_Init+0x1ec>
 80035e0:	2306      	movs	r3, #6
 80035e2:	e00c      	b.n	80035fe <HAL_GPIO_Init+0x206>
 80035e4:	2307      	movs	r3, #7
 80035e6:	e00a      	b.n	80035fe <HAL_GPIO_Init+0x206>
 80035e8:	2305      	movs	r3, #5
 80035ea:	e008      	b.n	80035fe <HAL_GPIO_Init+0x206>
 80035ec:	2304      	movs	r3, #4
 80035ee:	e006      	b.n	80035fe <HAL_GPIO_Init+0x206>
 80035f0:	2303      	movs	r3, #3
 80035f2:	e004      	b.n	80035fe <HAL_GPIO_Init+0x206>
 80035f4:	2302      	movs	r3, #2
 80035f6:	e002      	b.n	80035fe <HAL_GPIO_Init+0x206>
 80035f8:	2301      	movs	r3, #1
 80035fa:	e000      	b.n	80035fe <HAL_GPIO_Init+0x206>
 80035fc:	2300      	movs	r3, #0
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	f002 0203 	and.w	r2, r2, #3
 8003604:	0092      	lsls	r2, r2, #2
 8003606:	4093      	lsls	r3, r2
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	4313      	orrs	r3, r2
 800360c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800360e:	4937      	ldr	r1, [pc, #220]	@ (80036ec <HAL_GPIO_Init+0x2f4>)
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	089b      	lsrs	r3, r3, #2
 8003614:	3302      	adds	r3, #2
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800361c:	4b3a      	ldr	r3, [pc, #232]	@ (8003708 <HAL_GPIO_Init+0x310>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	43db      	mvns	r3, r3
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	4013      	ands	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4313      	orrs	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003640:	4a31      	ldr	r2, [pc, #196]	@ (8003708 <HAL_GPIO_Init+0x310>)
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003646:	4b30      	ldr	r3, [pc, #192]	@ (8003708 <HAL_GPIO_Init+0x310>)
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	43db      	mvns	r3, r3
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4013      	ands	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4313      	orrs	r3, r2
 8003668:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800366a:	4a27      	ldr	r2, [pc, #156]	@ (8003708 <HAL_GPIO_Init+0x310>)
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003670:	4b25      	ldr	r3, [pc, #148]	@ (8003708 <HAL_GPIO_Init+0x310>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	43db      	mvns	r3, r3
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	4013      	ands	r3, r2
 800367e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	4313      	orrs	r3, r2
 8003692:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003694:	4a1c      	ldr	r2, [pc, #112]	@ (8003708 <HAL_GPIO_Init+0x310>)
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800369a:	4b1b      	ldr	r3, [pc, #108]	@ (8003708 <HAL_GPIO_Init+0x310>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	43db      	mvns	r3, r3
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	4013      	ands	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80036be:	4a12      	ldr	r2, [pc, #72]	@ (8003708 <HAL_GPIO_Init+0x310>)
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	3301      	adds	r3, #1
 80036c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	fa22 f303 	lsr.w	r3, r2, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f47f ae97 	bne.w	8003408 <HAL_GPIO_Init+0x10>
  }
}
 80036da:	bf00      	nop
 80036dc:	bf00      	nop
 80036de:	371c      	adds	r7, #28
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	40021000 	.word	0x40021000
 80036ec:	40010000 	.word	0x40010000
 80036f0:	48000400 	.word	0x48000400
 80036f4:	48000800 	.word	0x48000800
 80036f8:	48000c00 	.word	0x48000c00
 80036fc:	48001000 	.word	0x48001000
 8003700:	48001400 	.word	0x48001400
 8003704:	48001800 	.word	0x48001800
 8003708:	40010400 	.word	0x40010400

0800370c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	460b      	mov	r3, r1
 8003716:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	691a      	ldr	r2, [r3, #16]
 800371c:	887b      	ldrh	r3, [r7, #2]
 800371e:	4013      	ands	r3, r2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d002      	beq.n	800372a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003724:	2301      	movs	r3, #1
 8003726:	73fb      	strb	r3, [r7, #15]
 8003728:	e001      	b.n	800372e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800372a:	2300      	movs	r3, #0
 800372c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800372e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	460b      	mov	r3, r1
 8003746:	807b      	strh	r3, [r7, #2]
 8003748:	4613      	mov	r3, r2
 800374a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800374c:	787b      	ldrb	r3, [r7, #1]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003752:	887a      	ldrh	r2, [r7, #2]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003758:	e002      	b.n	8003760 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800375a:	887a      	ldrh	r2, [r7, #2]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	460b      	mov	r3, r1
 8003776:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800377e:	887a      	ldrh	r2, [r7, #2]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4013      	ands	r3, r2
 8003784:	041a      	lsls	r2, r3, #16
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	43d9      	mvns	r1, r3
 800378a:	887b      	ldrh	r3, [r7, #2]
 800378c:	400b      	ands	r3, r1
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	619a      	str	r2, [r3, #24]
}
 8003794:	bf00      	nop
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e08d      	b.n	80038ce <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d106      	bne.n	80037cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7fd fda4 	bl	8001314 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2224      	movs	r2, #36	@ 0x24
 80037d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0201 	bic.w	r2, r2, #1
 80037e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80037f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003800:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d107      	bne.n	800381a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003816:	609a      	str	r2, [r3, #8]
 8003818:	e006      	b.n	8003828 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003826:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	2b02      	cmp	r3, #2
 800382e:	d108      	bne.n	8003842 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800383e:	605a      	str	r2, [r3, #4]
 8003840:	e007      	b.n	8003852 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003850:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6812      	ldr	r2, [r2, #0]
 800385c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003860:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003864:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003874:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691a      	ldr	r2, [r3, #16]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	69d9      	ldr	r1, [r3, #28]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a1a      	ldr	r2, [r3, #32]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af02      	add	r7, sp, #8
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	4608      	mov	r0, r1
 80038e2:	4611      	mov	r1, r2
 80038e4:	461a      	mov	r2, r3
 80038e6:	4603      	mov	r3, r0
 80038e8:	817b      	strh	r3, [r7, #10]
 80038ea:	460b      	mov	r3, r1
 80038ec:	813b      	strh	r3, [r7, #8]
 80038ee:	4613      	mov	r3, r2
 80038f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b20      	cmp	r3, #32
 80038fc:	f040 80f9 	bne.w	8003af2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <HAL_I2C_Mem_Write+0x34>
 8003906:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003908:	2b00      	cmp	r3, #0
 800390a:	d105      	bne.n	8003918 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003912:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e0ed      	b.n	8003af4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <HAL_I2C_Mem_Write+0x4e>
 8003922:	2302      	movs	r3, #2
 8003924:	e0e6      	b.n	8003af4 <HAL_I2C_Mem_Write+0x21c>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800392e:	f7fe fb1f 	bl	8001f70 <HAL_GetTick>
 8003932:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	2319      	movs	r3, #25
 800393a:	2201      	movs	r2, #1
 800393c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 f955 	bl	8003bf0 <I2C_WaitOnFlagUntilTimeout>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e0d1      	b.n	8003af4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2221      	movs	r2, #33	@ 0x21
 8003954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2240      	movs	r2, #64	@ 0x40
 800395c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a3a      	ldr	r2, [r7, #32]
 800396a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003970:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003978:	88f8      	ldrh	r0, [r7, #6]
 800397a:	893a      	ldrh	r2, [r7, #8]
 800397c:	8979      	ldrh	r1, [r7, #10]
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	9301      	str	r3, [sp, #4]
 8003982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	4603      	mov	r3, r0
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 f8b9 	bl	8003b00 <I2C_RequestMemoryWrite>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d005      	beq.n	80039a0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e0a9      	b.n	8003af4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2bff      	cmp	r3, #255	@ 0xff
 80039a8:	d90e      	bls.n	80039c8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	22ff      	movs	r2, #255	@ 0xff
 80039ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	8979      	ldrh	r1, [r7, #10]
 80039b8:	2300      	movs	r3, #0
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 fad9 	bl	8003f78 <I2C_TransferConfig>
 80039c6:	e00f      	b.n	80039e8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	8979      	ldrh	r1, [r7, #10]
 80039da:	2300      	movs	r3, #0
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 fac8 	bl	8003f78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 f958 	bl	8003ca2 <I2C_WaitOnTXISFlagUntilTimeout>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e07b      	b.n	8003af4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a00:	781a      	ldrb	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d034      	beq.n	8003aa0 <HAL_I2C_Mem_Write+0x1c8>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d130      	bne.n	8003aa0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a44:	2200      	movs	r2, #0
 8003a46:	2180      	movs	r1, #128	@ 0x80
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 f8d1 	bl	8003bf0 <I2C_WaitOnFlagUntilTimeout>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e04d      	b.n	8003af4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2bff      	cmp	r3, #255	@ 0xff
 8003a60:	d90e      	bls.n	8003a80 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	22ff      	movs	r2, #255	@ 0xff
 8003a66:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	8979      	ldrh	r1, [r7, #10]
 8003a70:	2300      	movs	r3, #0
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 fa7d 	bl	8003f78 <I2C_TransferConfig>
 8003a7e:	e00f      	b.n	8003aa0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	8979      	ldrh	r1, [r7, #10]
 8003a92:	2300      	movs	r3, #0
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 fa6c 	bl	8003f78 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d19e      	bne.n	80039e8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 f93e 	bl	8003d30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e01a      	b.n	8003af4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6859      	ldr	r1, [r3, #4]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8003afc <HAL_I2C_Mem_Write+0x224>)
 8003ad2:	400b      	ands	r3, r1
 8003ad4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003aee:	2300      	movs	r3, #0
 8003af0:	e000      	b.n	8003af4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003af2:	2302      	movs	r3, #2
  }
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3718      	adds	r7, #24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	fe00e800 	.word	0xfe00e800

08003b00 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af02      	add	r7, sp, #8
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	4608      	mov	r0, r1
 8003b0a:	4611      	mov	r1, r2
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	4603      	mov	r3, r0
 8003b10:	817b      	strh	r3, [r7, #10]
 8003b12:	460b      	mov	r3, r1
 8003b14:	813b      	strh	r3, [r7, #8]
 8003b16:	4613      	mov	r3, r2
 8003b18:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003b1a:	88fb      	ldrh	r3, [r7, #6]
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	8979      	ldrh	r1, [r7, #10]
 8003b20:	4b20      	ldr	r3, [pc, #128]	@ (8003ba4 <I2C_RequestMemoryWrite+0xa4>)
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 fa25 	bl	8003f78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b2e:	69fa      	ldr	r2, [r7, #28]
 8003b30:	69b9      	ldr	r1, [r7, #24]
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 f8b5 	bl	8003ca2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e02c      	b.n	8003b9c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b42:	88fb      	ldrh	r3, [r7, #6]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d105      	bne.n	8003b54 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b48:	893b      	ldrh	r3, [r7, #8]
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b52:	e015      	b.n	8003b80 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b54:	893b      	ldrh	r3, [r7, #8]
 8003b56:	0a1b      	lsrs	r3, r3, #8
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b62:	69fa      	ldr	r2, [r7, #28]
 8003b64:	69b9      	ldr	r1, [r7, #24]
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 f89b 	bl	8003ca2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e012      	b.n	8003b9c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b76:	893b      	ldrh	r3, [r7, #8]
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	2200      	movs	r2, #0
 8003b88:	2180      	movs	r1, #128	@ 0x80
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 f830 	bl	8003bf0 <I2C_WaitOnFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	80002000 	.word	0x80002000

08003ba8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d103      	bne.n	8003bc6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d007      	beq.n	8003be4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	699a      	ldr	r2, [r3, #24]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0201 	orr.w	r2, r2, #1
 8003be2:	619a      	str	r2, [r3, #24]
  }
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c00:	e03b      	b.n	8003c7a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	6839      	ldr	r1, [r7, #0]
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 f8d6 	bl	8003db8 <I2C_IsErrorOccurred>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e041      	b.n	8003c9a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c1c:	d02d      	beq.n	8003c7a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c1e:	f7fe f9a7 	bl	8001f70 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d302      	bcc.n	8003c34 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d122      	bne.n	8003c7a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699a      	ldr	r2, [r3, #24]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	bf0c      	ite	eq
 8003c44:	2301      	moveq	r3, #1
 8003c46:	2300      	movne	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	79fb      	ldrb	r3, [r7, #7]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d113      	bne.n	8003c7a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c56:	f043 0220 	orr.w	r2, r3, #32
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2220      	movs	r2, #32
 8003c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e00f      	b.n	8003c9a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	699a      	ldr	r2, [r3, #24]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	4013      	ands	r3, r2
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	bf0c      	ite	eq
 8003c8a:	2301      	moveq	r3, #1
 8003c8c:	2300      	movne	r3, #0
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	461a      	mov	r2, r3
 8003c92:	79fb      	ldrb	r3, [r7, #7]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d0b4      	beq.n	8003c02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b084      	sub	sp, #16
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	60f8      	str	r0, [r7, #12]
 8003caa:	60b9      	str	r1, [r7, #8]
 8003cac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cae:	e033      	b.n	8003d18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	68b9      	ldr	r1, [r7, #8]
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 f87f 	bl	8003db8 <I2C_IsErrorOccurred>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e031      	b.n	8003d28 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cca:	d025      	beq.n	8003d18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ccc:	f7fe f950 	bl	8001f70 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d302      	bcc.n	8003ce2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d11a      	bne.n	8003d18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d013      	beq.n	8003d18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf4:	f043 0220 	orr.w	r2, r3, #32
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e007      	b.n	8003d28 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d1c4      	bne.n	8003cb0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d3c:	e02f      	b.n	8003d9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	68b9      	ldr	r1, [r7, #8]
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 f838 	bl	8003db8 <I2C_IsErrorOccurred>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e02d      	b.n	8003dae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d52:	f7fe f90d 	bl	8001f70 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d302      	bcc.n	8003d68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d11a      	bne.n	8003d9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	f003 0320 	and.w	r3, r3, #32
 8003d72:	2b20      	cmp	r3, #32
 8003d74:	d013      	beq.n	8003d9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7a:	f043 0220 	orr.w	r2, r3, #32
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2220      	movs	r2, #32
 8003d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e007      	b.n	8003dae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	f003 0320 	and.w	r3, r3, #32
 8003da8:	2b20      	cmp	r3, #32
 8003daa:	d1c8      	bne.n	8003d3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
	...

08003db8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b08a      	sub	sp, #40	@ 0x28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	f003 0310 	and.w	r3, r3, #16
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d068      	beq.n	8003eb6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2210      	movs	r2, #16
 8003dea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003dec:	e049      	b.n	8003e82 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003df4:	d045      	beq.n	8003e82 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003df6:	f7fe f8bb 	bl	8001f70 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d302      	bcc.n	8003e0c <I2C_IsErrorOccurred+0x54>
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d13a      	bne.n	8003e82 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e16:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e1e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e2e:	d121      	bne.n	8003e74 <I2C_IsErrorOccurred+0xbc>
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e36:	d01d      	beq.n	8003e74 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003e38:	7cfb      	ldrb	r3, [r7, #19]
 8003e3a:	2b20      	cmp	r3, #32
 8003e3c:	d01a      	beq.n	8003e74 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e4c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003e4e:	f7fe f88f 	bl	8001f70 <HAL_GetTick>
 8003e52:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e54:	e00e      	b.n	8003e74 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003e56:	f7fe f88b 	bl	8001f70 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b19      	cmp	r3, #25
 8003e62:	d907      	bls.n	8003e74 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	f043 0320 	orr.w	r3, r3, #32
 8003e6a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003e72:	e006      	b.n	8003e82 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	f003 0320 	and.w	r3, r3, #32
 8003e7e:	2b20      	cmp	r3, #32
 8003e80:	d1e9      	bne.n	8003e56 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	f003 0320 	and.w	r3, r3, #32
 8003e8c:	2b20      	cmp	r3, #32
 8003e8e:	d003      	beq.n	8003e98 <I2C_IsErrorOccurred+0xe0>
 8003e90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0aa      	beq.n	8003dee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003e98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d103      	bne.n	8003ea8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	f043 0304 	orr.w	r3, r3, #4
 8003eae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00b      	beq.n	8003ee0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ed8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00b      	beq.n	8003f02 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	f043 0308 	orr.w	r3, r3, #8
 8003ef0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003efa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00b      	beq.n	8003f24 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	f043 0302 	orr.w	r3, r3, #2
 8003f12:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003f24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d01c      	beq.n	8003f66 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f7ff fe3b 	bl	8003ba8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6859      	ldr	r1, [r3, #4]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8003f74 <I2C_IsErrorOccurred+0x1bc>)
 8003f3e:	400b      	ands	r3, r1
 8003f40:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f46:	6a3b      	ldr	r3, [r7, #32]
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2220      	movs	r2, #32
 8003f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003f66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3728      	adds	r7, #40	@ 0x28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	fe00e800 	.word	0xfe00e800

08003f78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	607b      	str	r3, [r7, #4]
 8003f82:	460b      	mov	r3, r1
 8003f84:	817b      	strh	r3, [r7, #10]
 8003f86:	4613      	mov	r3, r2
 8003f88:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f8a:	897b      	ldrh	r3, [r7, #10]
 8003f8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f90:	7a7b      	ldrb	r3, [r7, #9]
 8003f92:	041b      	lsls	r3, r3, #16
 8003f94:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f98:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003fa6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	0d5b      	lsrs	r3, r3, #21
 8003fb2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003fb6:	4b08      	ldr	r3, [pc, #32]	@ (8003fd8 <I2C_TransferConfig+0x60>)
 8003fb8:	430b      	orrs	r3, r1
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	ea02 0103 	and.w	r1, r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003fca:	bf00      	nop
 8003fcc:	371c      	adds	r7, #28
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	03ff63ff 	.word	0x03ff63ff

08003fdc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b20      	cmp	r3, #32
 8003ff0:	d138      	bne.n	8004064 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d101      	bne.n	8004000 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e032      	b.n	8004066 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2224      	movs	r2, #36	@ 0x24
 800400c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 0201 	bic.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800402e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6819      	ldr	r1, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	430a      	orrs	r2, r1
 800403e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0201 	orr.w	r2, r2, #1
 800404e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2220      	movs	r2, #32
 8004054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004060:	2300      	movs	r3, #0
 8004062:	e000      	b.n	8004066 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004064:	2302      	movs	r3, #2
  }
}
 8004066:	4618      	mov	r0, r3
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004072:	b480      	push	{r7}
 8004074:	b085      	sub	sp, #20
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
 800407a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b20      	cmp	r3, #32
 8004086:	d139      	bne.n	80040fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800408e:	2b01      	cmp	r3, #1
 8004090:	d101      	bne.n	8004096 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004092:	2302      	movs	r3, #2
 8004094:	e033      	b.n	80040fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2224      	movs	r2, #36	@ 0x24
 80040a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0201 	bic.w	r2, r2, #1
 80040b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80040c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	021b      	lsls	r3, r3, #8
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0201 	orr.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	e000      	b.n	80040fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040fc:	2302      	movs	r3, #2
  }
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
	...

0800410c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8004112:	af00      	add	r7, sp, #0
 8004114:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004118:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800411c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800411e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004122:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d102      	bne.n	8004132 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	f001 b83a 	b.w	80051a6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004132:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004136:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 816f 	beq.w	8004426 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004148:	4bb5      	ldr	r3, [pc, #724]	@ (8004420 <HAL_RCC_OscConfig+0x314>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f003 030c 	and.w	r3, r3, #12
 8004150:	2b04      	cmp	r3, #4
 8004152:	d00c      	beq.n	800416e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004154:	4bb2      	ldr	r3, [pc, #712]	@ (8004420 <HAL_RCC_OscConfig+0x314>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f003 030c 	and.w	r3, r3, #12
 800415c:	2b08      	cmp	r3, #8
 800415e:	d15c      	bne.n	800421a <HAL_RCC_OscConfig+0x10e>
 8004160:	4baf      	ldr	r3, [pc, #700]	@ (8004420 <HAL_RCC_OscConfig+0x314>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8004168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800416c:	d155      	bne.n	800421a <HAL_RCC_OscConfig+0x10e>
 800416e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004172:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004176:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800417a:	fa93 f3a3 	rbit	r3, r3
 800417e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004182:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004186:	fab3 f383 	clz	r3, r3
 800418a:	b2db      	uxtb	r3, r3
 800418c:	095b      	lsrs	r3, r3, #5
 800418e:	b2db      	uxtb	r3, r3
 8004190:	f043 0301 	orr.w	r3, r3, #1
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b01      	cmp	r3, #1
 8004198:	d102      	bne.n	80041a0 <HAL_RCC_OscConfig+0x94>
 800419a:	4ba1      	ldr	r3, [pc, #644]	@ (8004420 <HAL_RCC_OscConfig+0x314>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	e015      	b.n	80041cc <HAL_RCC_OscConfig+0xc0>
 80041a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80041a4:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80041ac:	fa93 f3a3 	rbit	r3, r3
 80041b0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80041b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80041b8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80041bc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80041c0:	fa93 f3a3 	rbit	r3, r3
 80041c4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80041c8:	4b95      	ldr	r3, [pc, #596]	@ (8004420 <HAL_RCC_OscConfig+0x314>)
 80041ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041cc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80041d0:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80041d4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80041d8:	fa92 f2a2 	rbit	r2, r2
 80041dc:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80041e0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80041e4:	fab2 f282 	clz	r2, r2
 80041e8:	b2d2      	uxtb	r2, r2
 80041ea:	f042 0220 	orr.w	r2, r2, #32
 80041ee:	b2d2      	uxtb	r2, r2
 80041f0:	f002 021f 	and.w	r2, r2, #31
 80041f4:	2101      	movs	r1, #1
 80041f6:	fa01 f202 	lsl.w	r2, r1, r2
 80041fa:	4013      	ands	r3, r2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 8111 	beq.w	8004424 <HAL_RCC_OscConfig+0x318>
 8004202:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004206:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	f040 8108 	bne.w	8004424 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	f000 bfc6 	b.w	80051a6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800421a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800421e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800422a:	d106      	bne.n	800423a <HAL_RCC_OscConfig+0x12e>
 800422c:	4b7c      	ldr	r3, [pc, #496]	@ (8004420 <HAL_RCC_OscConfig+0x314>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a7b      	ldr	r2, [pc, #492]	@ (8004420 <HAL_RCC_OscConfig+0x314>)
 8004232:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004236:	6013      	str	r3, [r2, #0]
 8004238:	e036      	b.n	80042a8 <HAL_RCC_OscConfig+0x19c>
 800423a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800423e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10c      	bne.n	8004264 <HAL_RCC_OscConfig+0x158>
 800424a:	4b75      	ldr	r3, [pc, #468]	@ (8004420 <HAL_RCC_OscConfig+0x314>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a74      	ldr	r2, [pc, #464]	@ (8004420 <HAL_RCC_OscConfig+0x314>)
 8004250:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	4b72      	ldr	r3, [pc, #456]	@ (8004420 <HAL_RCC_OscConfig+0x314>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a71      	ldr	r2, [pc, #452]	@ (8004420 <HAL_RCC_OscConfig+0x314>)
 800425c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	e021      	b.n	80042a8 <HAL_RCC_OscConfig+0x19c>
 8004264:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004268:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004274:	d10c      	bne.n	8004290 <HAL_RCC_OscConfig+0x184>
 8004276:	4b6a      	ldr	r3, [pc, #424]	@ (8004420 <HAL_RCC_OscConfig+0x314>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a69      	ldr	r2, [pc, #420]	@ (8004420 <HAL_RCC_OscConfig+0x314>)
 800427c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004280:	6013      	str	r3, [r2, #0]
 8004282:	4b67      	ldr	r3, [pc, #412]	@ (8004420 <HAL_RCC_OscConfig+0x314>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a66      	ldr	r2, [pc, #408]	@ (8004420 <HAL_RCC_OscConfig+0x314>)
 8004288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	e00b      	b.n	80042a8 <HAL_RCC_OscConfig+0x19c>
 8004290:	4b63      	ldr	r3, [pc, #396]	@ (8004420 <HAL_RCC_OscConfig+0x314>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a62      	ldr	r2, [pc, #392]	@ (8004420 <HAL_RCC_OscConfig+0x314>)
 8004296:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800429a:	6013      	str	r3, [r2, #0]
 800429c:	4b60      	ldr	r3, [pc, #384]	@ (8004420 <HAL_RCC_OscConfig+0x314>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a5f      	ldr	r2, [pc, #380]	@ (8004420 <HAL_RCC_OscConfig+0x314>)
 80042a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042a6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042ac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d059      	beq.n	800436c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b8:	f7fd fe5a 	bl	8001f70 <HAL_GetTick>
 80042bc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c0:	e00a      	b.n	80042d8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042c2:	f7fd fe55 	bl	8001f70 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b64      	cmp	r3, #100	@ 0x64
 80042d0:	d902      	bls.n	80042d8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	f000 bf67 	b.w	80051a6 <HAL_RCC_OscConfig+0x109a>
 80042d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042dc:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80042e4:	fa93 f3a3 	rbit	r3, r3
 80042e8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80042ec:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f0:	fab3 f383 	clz	r3, r3
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	095b      	lsrs	r3, r3, #5
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	f043 0301 	orr.w	r3, r3, #1
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b01      	cmp	r3, #1
 8004302:	d102      	bne.n	800430a <HAL_RCC_OscConfig+0x1fe>
 8004304:	4b46      	ldr	r3, [pc, #280]	@ (8004420 <HAL_RCC_OscConfig+0x314>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	e015      	b.n	8004336 <HAL_RCC_OscConfig+0x22a>
 800430a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800430e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004312:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8004316:	fa93 f3a3 	rbit	r3, r3
 800431a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800431e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004322:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8004326:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800432a:	fa93 f3a3 	rbit	r3, r3
 800432e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004332:	4b3b      	ldr	r3, [pc, #236]	@ (8004420 <HAL_RCC_OscConfig+0x314>)
 8004334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004336:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800433a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800433e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8004342:	fa92 f2a2 	rbit	r2, r2
 8004346:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800434a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800434e:	fab2 f282 	clz	r2, r2
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	f042 0220 	orr.w	r2, r2, #32
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	f002 021f 	and.w	r2, r2, #31
 800435e:	2101      	movs	r1, #1
 8004360:	fa01 f202 	lsl.w	r2, r1, r2
 8004364:	4013      	ands	r3, r2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0ab      	beq.n	80042c2 <HAL_RCC_OscConfig+0x1b6>
 800436a:	e05c      	b.n	8004426 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436c:	f7fd fe00 	bl	8001f70 <HAL_GetTick>
 8004370:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004374:	e00a      	b.n	800438c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004376:	f7fd fdfb 	bl	8001f70 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b64      	cmp	r3, #100	@ 0x64
 8004384:	d902      	bls.n	800438c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	f000 bf0d 	b.w	80051a6 <HAL_RCC_OscConfig+0x109a>
 800438c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004390:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004394:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8004398:	fa93 f3a3 	rbit	r3, r3
 800439c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80043a0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a4:	fab3 f383 	clz	r3, r3
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	095b      	lsrs	r3, r3, #5
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	f043 0301 	orr.w	r3, r3, #1
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d102      	bne.n	80043be <HAL_RCC_OscConfig+0x2b2>
 80043b8:	4b19      	ldr	r3, [pc, #100]	@ (8004420 <HAL_RCC_OscConfig+0x314>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	e015      	b.n	80043ea <HAL_RCC_OscConfig+0x2de>
 80043be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80043c2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80043ca:	fa93 f3a3 	rbit	r3, r3
 80043ce:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80043d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80043d6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80043da:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80043de:	fa93 f3a3 	rbit	r3, r3
 80043e2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80043e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004420 <HAL_RCC_OscConfig+0x314>)
 80043e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80043ee:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80043f2:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80043f6:	fa92 f2a2 	rbit	r2, r2
 80043fa:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80043fe:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8004402:	fab2 f282 	clz	r2, r2
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	f042 0220 	orr.w	r2, r2, #32
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	f002 021f 	and.w	r2, r2, #31
 8004412:	2101      	movs	r1, #1
 8004414:	fa01 f202 	lsl.w	r2, r1, r2
 8004418:	4013      	ands	r3, r2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1ab      	bne.n	8004376 <HAL_RCC_OscConfig+0x26a>
 800441e:	e002      	b.n	8004426 <HAL_RCC_OscConfig+0x31a>
 8004420:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004426:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800442a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 817f 	beq.w	800473a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800443c:	4ba7      	ldr	r3, [pc, #668]	@ (80046dc <HAL_RCC_OscConfig+0x5d0>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f003 030c 	and.w	r3, r3, #12
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00c      	beq.n	8004462 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004448:	4ba4      	ldr	r3, [pc, #656]	@ (80046dc <HAL_RCC_OscConfig+0x5d0>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f003 030c 	and.w	r3, r3, #12
 8004450:	2b08      	cmp	r3, #8
 8004452:	d173      	bne.n	800453c <HAL_RCC_OscConfig+0x430>
 8004454:	4ba1      	ldr	r3, [pc, #644]	@ (80046dc <HAL_RCC_OscConfig+0x5d0>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800445c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004460:	d16c      	bne.n	800453c <HAL_RCC_OscConfig+0x430>
 8004462:	2302      	movs	r3, #2
 8004464:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004468:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800446c:	fa93 f3a3 	rbit	r3, r3
 8004470:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8004474:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004478:	fab3 f383 	clz	r3, r3
 800447c:	b2db      	uxtb	r3, r3
 800447e:	095b      	lsrs	r3, r3, #5
 8004480:	b2db      	uxtb	r3, r3
 8004482:	f043 0301 	orr.w	r3, r3, #1
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b01      	cmp	r3, #1
 800448a:	d102      	bne.n	8004492 <HAL_RCC_OscConfig+0x386>
 800448c:	4b93      	ldr	r3, [pc, #588]	@ (80046dc <HAL_RCC_OscConfig+0x5d0>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	e013      	b.n	80044ba <HAL_RCC_OscConfig+0x3ae>
 8004492:	2302      	movs	r3, #2
 8004494:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004498:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800449c:	fa93 f3a3 	rbit	r3, r3
 80044a0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80044a4:	2302      	movs	r3, #2
 80044a6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80044aa:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80044ae:	fa93 f3a3 	rbit	r3, r3
 80044b2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80044b6:	4b89      	ldr	r3, [pc, #548]	@ (80046dc <HAL_RCC_OscConfig+0x5d0>)
 80044b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ba:	2202      	movs	r2, #2
 80044bc:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80044c0:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80044c4:	fa92 f2a2 	rbit	r2, r2
 80044c8:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80044cc:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80044d0:	fab2 f282 	clz	r2, r2
 80044d4:	b2d2      	uxtb	r2, r2
 80044d6:	f042 0220 	orr.w	r2, r2, #32
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	f002 021f 	and.w	r2, r2, #31
 80044e0:	2101      	movs	r1, #1
 80044e2:	fa01 f202 	lsl.w	r2, r1, r2
 80044e6:	4013      	ands	r3, r2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00a      	beq.n	8004502 <HAL_RCC_OscConfig+0x3f6>
 80044ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044f0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d002      	beq.n	8004502 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	f000 be52 	b.w	80051a6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004502:	4b76      	ldr	r3, [pc, #472]	@ (80046dc <HAL_RCC_OscConfig+0x5d0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800450a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800450e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	21f8      	movs	r1, #248	@ 0xf8
 8004518:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451c:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8004520:	fa91 f1a1 	rbit	r1, r1
 8004524:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8004528:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800452c:	fab1 f181 	clz	r1, r1
 8004530:	b2c9      	uxtb	r1, r1
 8004532:	408b      	lsls	r3, r1
 8004534:	4969      	ldr	r1, [pc, #420]	@ (80046dc <HAL_RCC_OscConfig+0x5d0>)
 8004536:	4313      	orrs	r3, r2
 8004538:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800453a:	e0fe      	b.n	800473a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800453c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004540:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 8088 	beq.w	800465e <HAL_RCC_OscConfig+0x552>
 800454e:	2301      	movs	r3, #1
 8004550:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004554:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8004558:	fa93 f3a3 	rbit	r3, r3
 800455c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8004560:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004564:	fab3 f383 	clz	r3, r3
 8004568:	b2db      	uxtb	r3, r3
 800456a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800456e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	461a      	mov	r2, r3
 8004576:	2301      	movs	r3, #1
 8004578:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457a:	f7fd fcf9 	bl	8001f70 <HAL_GetTick>
 800457e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004582:	e00a      	b.n	800459a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004584:	f7fd fcf4 	bl	8001f70 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d902      	bls.n	800459a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	f000 be06 	b.w	80051a6 <HAL_RCC_OscConfig+0x109a>
 800459a:	2302      	movs	r3, #2
 800459c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80045a4:	fa93 f3a3 	rbit	r3, r3
 80045a8:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80045ac:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b0:	fab3 f383 	clz	r3, r3
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	095b      	lsrs	r3, r3, #5
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	f043 0301 	orr.w	r3, r3, #1
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d102      	bne.n	80045ca <HAL_RCC_OscConfig+0x4be>
 80045c4:	4b45      	ldr	r3, [pc, #276]	@ (80046dc <HAL_RCC_OscConfig+0x5d0>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	e013      	b.n	80045f2 <HAL_RCC_OscConfig+0x4e6>
 80045ca:	2302      	movs	r3, #2
 80045cc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80045d4:	fa93 f3a3 	rbit	r3, r3
 80045d8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80045dc:	2302      	movs	r3, #2
 80045de:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80045e2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80045e6:	fa93 f3a3 	rbit	r3, r3
 80045ea:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80045ee:	4b3b      	ldr	r3, [pc, #236]	@ (80046dc <HAL_RCC_OscConfig+0x5d0>)
 80045f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f2:	2202      	movs	r2, #2
 80045f4:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80045f8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80045fc:	fa92 f2a2 	rbit	r2, r2
 8004600:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8004604:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8004608:	fab2 f282 	clz	r2, r2
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	f042 0220 	orr.w	r2, r2, #32
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	f002 021f 	and.w	r2, r2, #31
 8004618:	2101      	movs	r1, #1
 800461a:	fa01 f202 	lsl.w	r2, r1, r2
 800461e:	4013      	ands	r3, r2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0af      	beq.n	8004584 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004624:	4b2d      	ldr	r3, [pc, #180]	@ (80046dc <HAL_RCC_OscConfig+0x5d0>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800462c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004630:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	21f8      	movs	r1, #248	@ 0xf8
 800463a:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8004642:	fa91 f1a1 	rbit	r1, r1
 8004646:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800464a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800464e:	fab1 f181 	clz	r1, r1
 8004652:	b2c9      	uxtb	r1, r1
 8004654:	408b      	lsls	r3, r1
 8004656:	4921      	ldr	r1, [pc, #132]	@ (80046dc <HAL_RCC_OscConfig+0x5d0>)
 8004658:	4313      	orrs	r3, r2
 800465a:	600b      	str	r3, [r1, #0]
 800465c:	e06d      	b.n	800473a <HAL_RCC_OscConfig+0x62e>
 800465e:	2301      	movs	r3, #1
 8004660:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004664:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8004668:	fa93 f3a3 	rbit	r3, r3
 800466c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8004670:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004674:	fab3 f383 	clz	r3, r3
 8004678:	b2db      	uxtb	r3, r3
 800467a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800467e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	461a      	mov	r2, r3
 8004686:	2300      	movs	r3, #0
 8004688:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468a:	f7fd fc71 	bl	8001f70 <HAL_GetTick>
 800468e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004692:	e00a      	b.n	80046aa <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004694:	f7fd fc6c 	bl	8001f70 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d902      	bls.n	80046aa <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	f000 bd7e 	b.w	80051a6 <HAL_RCC_OscConfig+0x109a>
 80046aa:	2302      	movs	r3, #2
 80046ac:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80046b4:	fa93 f3a3 	rbit	r3, r3
 80046b8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80046bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046c0:	fab3 f383 	clz	r3, r3
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	095b      	lsrs	r3, r3, #5
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	f043 0301 	orr.w	r3, r3, #1
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d105      	bne.n	80046e0 <HAL_RCC_OscConfig+0x5d4>
 80046d4:	4b01      	ldr	r3, [pc, #4]	@ (80046dc <HAL_RCC_OscConfig+0x5d0>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	e016      	b.n	8004708 <HAL_RCC_OscConfig+0x5fc>
 80046da:	bf00      	nop
 80046dc:	40021000 	.word	0x40021000
 80046e0:	2302      	movs	r3, #2
 80046e2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80046ea:	fa93 f3a3 	rbit	r3, r3
 80046ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80046f2:	2302      	movs	r3, #2
 80046f4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80046f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80046fc:	fa93 f3a3 	rbit	r3, r3
 8004700:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004704:	4bbf      	ldr	r3, [pc, #764]	@ (8004a04 <HAL_RCC_OscConfig+0x8f8>)
 8004706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004708:	2202      	movs	r2, #2
 800470a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800470e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8004712:	fa92 f2a2 	rbit	r2, r2
 8004716:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800471a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800471e:	fab2 f282 	clz	r2, r2
 8004722:	b2d2      	uxtb	r2, r2
 8004724:	f042 0220 	orr.w	r2, r2, #32
 8004728:	b2d2      	uxtb	r2, r2
 800472a:	f002 021f 	and.w	r2, r2, #31
 800472e:	2101      	movs	r1, #1
 8004730:	fa01 f202 	lsl.w	r2, r1, r2
 8004734:	4013      	ands	r3, r2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1ac      	bne.n	8004694 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800473a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800473e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 8113 	beq.w	8004976 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004750:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004754:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d07c      	beq.n	800485a <HAL_RCC_OscConfig+0x74e>
 8004760:	2301      	movs	r3, #1
 8004762:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800476a:	fa93 f3a3 	rbit	r3, r3
 800476e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8004772:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004776:	fab3 f383 	clz	r3, r3
 800477a:	b2db      	uxtb	r3, r3
 800477c:	461a      	mov	r2, r3
 800477e:	4ba2      	ldr	r3, [pc, #648]	@ (8004a08 <HAL_RCC_OscConfig+0x8fc>)
 8004780:	4413      	add	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	461a      	mov	r2, r3
 8004786:	2301      	movs	r3, #1
 8004788:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800478a:	f7fd fbf1 	bl	8001f70 <HAL_GetTick>
 800478e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004792:	e00a      	b.n	80047aa <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004794:	f7fd fbec 	bl	8001f70 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d902      	bls.n	80047aa <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	f000 bcfe 	b.w	80051a6 <HAL_RCC_OscConfig+0x109a>
 80047aa:	2302      	movs	r3, #2
 80047ac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047b4:	fa93 f2a3 	rbit	r2, r3
 80047b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047bc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80047ca:	2202      	movs	r2, #2
 80047cc:	601a      	str	r2, [r3, #0]
 80047ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	fa93 f2a3 	rbit	r2, r3
 80047dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80047ee:	2202      	movs	r2, #2
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	fa93 f2a3 	rbit	r2, r3
 8004800:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004804:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004808:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800480a:	4b7e      	ldr	r3, [pc, #504]	@ (8004a04 <HAL_RCC_OscConfig+0x8f8>)
 800480c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800480e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004812:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004816:	2102      	movs	r1, #2
 8004818:	6019      	str	r1, [r3, #0]
 800481a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800481e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	fa93 f1a3 	rbit	r1, r3
 8004828:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800482c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004830:	6019      	str	r1, [r3, #0]
  return result;
 8004832:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004836:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	fab3 f383 	clz	r3, r3
 8004840:	b2db      	uxtb	r3, r3
 8004842:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004846:	b2db      	uxtb	r3, r3
 8004848:	f003 031f 	and.w	r3, r3, #31
 800484c:	2101      	movs	r1, #1
 800484e:	fa01 f303 	lsl.w	r3, r1, r3
 8004852:	4013      	ands	r3, r2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d09d      	beq.n	8004794 <HAL_RCC_OscConfig+0x688>
 8004858:	e08d      	b.n	8004976 <HAL_RCC_OscConfig+0x86a>
 800485a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800485e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004862:	2201      	movs	r2, #1
 8004864:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004866:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800486a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	fa93 f2a3 	rbit	r2, r3
 8004874:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004878:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800487c:	601a      	str	r2, [r3, #0]
  return result;
 800487e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004882:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004886:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004888:	fab3 f383 	clz	r3, r3
 800488c:	b2db      	uxtb	r3, r3
 800488e:	461a      	mov	r2, r3
 8004890:	4b5d      	ldr	r3, [pc, #372]	@ (8004a08 <HAL_RCC_OscConfig+0x8fc>)
 8004892:	4413      	add	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	461a      	mov	r2, r3
 8004898:	2300      	movs	r3, #0
 800489a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800489c:	f7fd fb68 	bl	8001f70 <HAL_GetTick>
 80048a0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048a4:	e00a      	b.n	80048bc <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048a6:	f7fd fb63 	bl	8001f70 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d902      	bls.n	80048bc <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	f000 bc75 	b.w	80051a6 <HAL_RCC_OscConfig+0x109a>
 80048bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048c0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80048c4:	2202      	movs	r2, #2
 80048c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048cc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	fa93 f2a3 	rbit	r2, r3
 80048d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048da:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80048e8:	2202      	movs	r2, #2
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	fa93 f2a3 	rbit	r2, r3
 80048fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048fe:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004908:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800490c:	2202      	movs	r2, #2
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004914:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	fa93 f2a3 	rbit	r2, r3
 800491e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004922:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004926:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004928:	4b36      	ldr	r3, [pc, #216]	@ (8004a04 <HAL_RCC_OscConfig+0x8f8>)
 800492a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800492c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004930:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004934:	2102      	movs	r1, #2
 8004936:	6019      	str	r1, [r3, #0]
 8004938:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800493c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	fa93 f1a3 	rbit	r1, r3
 8004946:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800494a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800494e:	6019      	str	r1, [r3, #0]
  return result;
 8004950:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004954:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	fab3 f383 	clz	r3, r3
 800495e:	b2db      	uxtb	r3, r3
 8004960:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004964:	b2db      	uxtb	r3, r3
 8004966:	f003 031f 	and.w	r3, r3, #31
 800496a:	2101      	movs	r1, #1
 800496c:	fa01 f303 	lsl.w	r3, r1, r3
 8004970:	4013      	ands	r3, r2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d197      	bne.n	80048a6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004976:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800497a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0304 	and.w	r3, r3, #4
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 81a5 	beq.w	8004cd6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800498c:	2300      	movs	r3, #0
 800498e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004992:	4b1c      	ldr	r3, [pc, #112]	@ (8004a04 <HAL_RCC_OscConfig+0x8f8>)
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d116      	bne.n	80049cc <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800499e:	4b19      	ldr	r3, [pc, #100]	@ (8004a04 <HAL_RCC_OscConfig+0x8f8>)
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	4a18      	ldr	r2, [pc, #96]	@ (8004a04 <HAL_RCC_OscConfig+0x8f8>)
 80049a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049a8:	61d3      	str	r3, [r2, #28]
 80049aa:	4b16      	ldr	r3, [pc, #88]	@ (8004a04 <HAL_RCC_OscConfig+0x8f8>)
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80049b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80049b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80049c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80049c4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80049c6:	2301      	movs	r3, #1
 80049c8:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049cc:	4b0f      	ldr	r3, [pc, #60]	@ (8004a0c <HAL_RCC_OscConfig+0x900>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d121      	bne.n	8004a1c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049d8:	4b0c      	ldr	r3, [pc, #48]	@ (8004a0c <HAL_RCC_OscConfig+0x900>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a0b      	ldr	r2, [pc, #44]	@ (8004a0c <HAL_RCC_OscConfig+0x900>)
 80049de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049e2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049e4:	f7fd fac4 	bl	8001f70 <HAL_GetTick>
 80049e8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ec:	e010      	b.n	8004a10 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ee:	f7fd fabf 	bl	8001f70 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b64      	cmp	r3, #100	@ 0x64
 80049fc:	d908      	bls.n	8004a10 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e3d1      	b.n	80051a6 <HAL_RCC_OscConfig+0x109a>
 8004a02:	bf00      	nop
 8004a04:	40021000 	.word	0x40021000
 8004a08:	10908120 	.word	0x10908120
 8004a0c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a10:	4b8d      	ldr	r3, [pc, #564]	@ (8004c48 <HAL_RCC_OscConfig+0xb3c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0e8      	beq.n	80049ee <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a20:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d106      	bne.n	8004a3a <HAL_RCC_OscConfig+0x92e>
 8004a2c:	4b87      	ldr	r3, [pc, #540]	@ (8004c4c <HAL_RCC_OscConfig+0xb40>)
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	4a86      	ldr	r2, [pc, #536]	@ (8004c4c <HAL_RCC_OscConfig+0xb40>)
 8004a32:	f043 0301 	orr.w	r3, r3, #1
 8004a36:	6213      	str	r3, [r2, #32]
 8004a38:	e035      	b.n	8004aa6 <HAL_RCC_OscConfig+0x99a>
 8004a3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a3e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10c      	bne.n	8004a64 <HAL_RCC_OscConfig+0x958>
 8004a4a:	4b80      	ldr	r3, [pc, #512]	@ (8004c4c <HAL_RCC_OscConfig+0xb40>)
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	4a7f      	ldr	r2, [pc, #508]	@ (8004c4c <HAL_RCC_OscConfig+0xb40>)
 8004a50:	f023 0301 	bic.w	r3, r3, #1
 8004a54:	6213      	str	r3, [r2, #32]
 8004a56:	4b7d      	ldr	r3, [pc, #500]	@ (8004c4c <HAL_RCC_OscConfig+0xb40>)
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	4a7c      	ldr	r2, [pc, #496]	@ (8004c4c <HAL_RCC_OscConfig+0xb40>)
 8004a5c:	f023 0304 	bic.w	r3, r3, #4
 8004a60:	6213      	str	r3, [r2, #32]
 8004a62:	e020      	b.n	8004aa6 <HAL_RCC_OscConfig+0x99a>
 8004a64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a68:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	2b05      	cmp	r3, #5
 8004a72:	d10c      	bne.n	8004a8e <HAL_RCC_OscConfig+0x982>
 8004a74:	4b75      	ldr	r3, [pc, #468]	@ (8004c4c <HAL_RCC_OscConfig+0xb40>)
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	4a74      	ldr	r2, [pc, #464]	@ (8004c4c <HAL_RCC_OscConfig+0xb40>)
 8004a7a:	f043 0304 	orr.w	r3, r3, #4
 8004a7e:	6213      	str	r3, [r2, #32]
 8004a80:	4b72      	ldr	r3, [pc, #456]	@ (8004c4c <HAL_RCC_OscConfig+0xb40>)
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	4a71      	ldr	r2, [pc, #452]	@ (8004c4c <HAL_RCC_OscConfig+0xb40>)
 8004a86:	f043 0301 	orr.w	r3, r3, #1
 8004a8a:	6213      	str	r3, [r2, #32]
 8004a8c:	e00b      	b.n	8004aa6 <HAL_RCC_OscConfig+0x99a>
 8004a8e:	4b6f      	ldr	r3, [pc, #444]	@ (8004c4c <HAL_RCC_OscConfig+0xb40>)
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	4a6e      	ldr	r2, [pc, #440]	@ (8004c4c <HAL_RCC_OscConfig+0xb40>)
 8004a94:	f023 0301 	bic.w	r3, r3, #1
 8004a98:	6213      	str	r3, [r2, #32]
 8004a9a:	4b6c      	ldr	r3, [pc, #432]	@ (8004c4c <HAL_RCC_OscConfig+0xb40>)
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	4a6b      	ldr	r2, [pc, #428]	@ (8004c4c <HAL_RCC_OscConfig+0xb40>)
 8004aa0:	f023 0304 	bic.w	r3, r3, #4
 8004aa4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004aa6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004aaa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 8081 	beq.w	8004bba <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ab8:	f7fd fa5a 	bl	8001f70 <HAL_GetTick>
 8004abc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac0:	e00b      	b.n	8004ada <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ac2:	f7fd fa55 	bl	8001f70 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e365      	b.n	80051a6 <HAL_RCC_OscConfig+0x109a>
 8004ada:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ade:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ae6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004aea:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	fa93 f2a3 	rbit	r2, r3
 8004af4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004af8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b02:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004b06:	2202      	movs	r2, #2
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b0e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	fa93 f2a3 	rbit	r2, r3
 8004b18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b1c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004b20:	601a      	str	r2, [r3, #0]
  return result;
 8004b22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b26:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004b2a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b2c:	fab3 f383 	clz	r3, r3
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	095b      	lsrs	r3, r3, #5
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	f043 0302 	orr.w	r3, r3, #2
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d102      	bne.n	8004b46 <HAL_RCC_OscConfig+0xa3a>
 8004b40:	4b42      	ldr	r3, [pc, #264]	@ (8004c4c <HAL_RCC_OscConfig+0xb40>)
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	e013      	b.n	8004b6e <HAL_RCC_OscConfig+0xa62>
 8004b46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b4a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004b4e:	2202      	movs	r2, #2
 8004b50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b56:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	fa93 f2a3 	rbit	r2, r3
 8004b60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b64:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	4b38      	ldr	r3, [pc, #224]	@ (8004c4c <HAL_RCC_OscConfig+0xb40>)
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004b72:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004b76:	2102      	movs	r1, #2
 8004b78:	6011      	str	r1, [r2, #0]
 8004b7a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004b7e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004b82:	6812      	ldr	r2, [r2, #0]
 8004b84:	fa92 f1a2 	rbit	r1, r2
 8004b88:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004b8c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8004b90:	6011      	str	r1, [r2, #0]
  return result;
 8004b92:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004b96:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8004b9a:	6812      	ldr	r2, [r2, #0]
 8004b9c:	fab2 f282 	clz	r2, r2
 8004ba0:	b2d2      	uxtb	r2, r2
 8004ba2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	f002 021f 	and.w	r2, r2, #31
 8004bac:	2101      	movs	r1, #1
 8004bae:	fa01 f202 	lsl.w	r2, r1, r2
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d084      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x9b6>
 8004bb8:	e083      	b.n	8004cc2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bba:	f7fd f9d9 	bl	8001f70 <HAL_GetTick>
 8004bbe:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bc2:	e00b      	b.n	8004bdc <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bc4:	f7fd f9d4 	bl	8001f70 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e2e4      	b.n	80051a6 <HAL_RCC_OscConfig+0x109a>
 8004bdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004be0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004be4:	2202      	movs	r2, #2
 8004be6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004bec:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	fa93 f2a3 	rbit	r2, r3
 8004bf6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004bfa:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c04:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004c08:	2202      	movs	r2, #2
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c10:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	fa93 f2a3 	rbit	r2, r3
 8004c1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c1e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004c22:	601a      	str	r2, [r3, #0]
  return result;
 8004c24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c28:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004c2c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c2e:	fab3 f383 	clz	r3, r3
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	095b      	lsrs	r3, r3, #5
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	f043 0302 	orr.w	r3, r3, #2
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d106      	bne.n	8004c50 <HAL_RCC_OscConfig+0xb44>
 8004c42:	4b02      	ldr	r3, [pc, #8]	@ (8004c4c <HAL_RCC_OscConfig+0xb40>)
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	e017      	b.n	8004c78 <HAL_RCC_OscConfig+0xb6c>
 8004c48:	40007000 	.word	0x40007000
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c54:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004c58:	2202      	movs	r2, #2
 8004c5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c60:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	fa93 f2a3 	rbit	r2, r3
 8004c6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c6e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	4bb3      	ldr	r3, [pc, #716]	@ (8004f44 <HAL_RCC_OscConfig+0xe38>)
 8004c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c78:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004c7c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004c80:	2102      	movs	r1, #2
 8004c82:	6011      	str	r1, [r2, #0]
 8004c84:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004c88:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004c8c:	6812      	ldr	r2, [r2, #0]
 8004c8e:	fa92 f1a2 	rbit	r1, r2
 8004c92:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004c96:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8004c9a:	6011      	str	r1, [r2, #0]
  return result;
 8004c9c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004ca0:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8004ca4:	6812      	ldr	r2, [r2, #0]
 8004ca6:	fab2 f282 	clz	r2, r2
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004cb0:	b2d2      	uxtb	r2, r2
 8004cb2:	f002 021f 	and.w	r2, r2, #31
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d180      	bne.n	8004bc4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004cc2:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d105      	bne.n	8004cd6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cca:	4b9e      	ldr	r3, [pc, #632]	@ (8004f44 <HAL_RCC_OscConfig+0xe38>)
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	4a9d      	ldr	r2, [pc, #628]	@ (8004f44 <HAL_RCC_OscConfig+0xe38>)
 8004cd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cd4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004cda:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 825e 	beq.w	80051a4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ce8:	4b96      	ldr	r3, [pc, #600]	@ (8004f44 <HAL_RCC_OscConfig+0xe38>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f003 030c 	and.w	r3, r3, #12
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	f000 821f 	beq.w	8005134 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cf6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004cfa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	f040 8170 	bne.w	8004fe8 <HAL_RCC_OscConfig+0xedc>
 8004d08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d0c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004d10:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d1a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	fa93 f2a3 	rbit	r2, r3
 8004d24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d28:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004d2c:	601a      	str	r2, [r3, #0]
  return result;
 8004d2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d32:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004d36:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d38:	fab3 f383 	clz	r3, r3
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004d42:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	461a      	mov	r2, r3
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d4e:	f7fd f90f 	bl	8001f70 <HAL_GetTick>
 8004d52:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d56:	e009      	b.n	8004d6c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d58:	f7fd f90a 	bl	8001f70 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e21c      	b.n	80051a6 <HAL_RCC_OscConfig+0x109a>
 8004d6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d70:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004d74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d7e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	fa93 f2a3 	rbit	r2, r3
 8004d88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d8c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004d90:	601a      	str	r2, [r3, #0]
  return result;
 8004d92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d96:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004d9a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d9c:	fab3 f383 	clz	r3, r3
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	095b      	lsrs	r3, r3, #5
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	f043 0301 	orr.w	r3, r3, #1
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d102      	bne.n	8004db6 <HAL_RCC_OscConfig+0xcaa>
 8004db0:	4b64      	ldr	r3, [pc, #400]	@ (8004f44 <HAL_RCC_OscConfig+0xe38>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	e027      	b.n	8004e06 <HAL_RCC_OscConfig+0xcfa>
 8004db6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004dba:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004dbe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004dc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004dc8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	fa93 f2a3 	rbit	r2, r3
 8004dd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004dd6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004de0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004de4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004dee:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	fa93 f2a3 	rbit	r2, r3
 8004df8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004dfc:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	4b50      	ldr	r3, [pc, #320]	@ (8004f44 <HAL_RCC_OscConfig+0xe38>)
 8004e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e06:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004e0a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004e0e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004e12:	6011      	str	r1, [r2, #0]
 8004e14:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004e18:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004e1c:	6812      	ldr	r2, [r2, #0]
 8004e1e:	fa92 f1a2 	rbit	r1, r2
 8004e22:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004e26:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8004e2a:	6011      	str	r1, [r2, #0]
  return result;
 8004e2c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004e30:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8004e34:	6812      	ldr	r2, [r2, #0]
 8004e36:	fab2 f282 	clz	r2, r2
 8004e3a:	b2d2      	uxtb	r2, r2
 8004e3c:	f042 0220 	orr.w	r2, r2, #32
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	f002 021f 	and.w	r2, r2, #31
 8004e46:	2101      	movs	r1, #1
 8004e48:	fa01 f202 	lsl.w	r2, r1, r2
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d182      	bne.n	8004d58 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e52:	4b3c      	ldr	r3, [pc, #240]	@ (8004f44 <HAL_RCC_OscConfig+0xe38>)
 8004e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e56:	f023 020f 	bic.w	r2, r3, #15
 8004e5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e5e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e66:	4937      	ldr	r1, [pc, #220]	@ (8004f44 <HAL_RCC_OscConfig+0xe38>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8004e6c:	4b35      	ldr	r3, [pc, #212]	@ (8004f44 <HAL_RCC_OscConfig+0xe38>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8004e74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e78:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6a19      	ldr	r1, [r3, #32]
 8004e80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e84:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	430b      	orrs	r3, r1
 8004e8e:	492d      	ldr	r1, [pc, #180]	@ (8004f44 <HAL_RCC_OscConfig+0xe38>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	604b      	str	r3, [r1, #4]
 8004e94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e98:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004e9c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004ea0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ea6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	fa93 f2a3 	rbit	r2, r3
 8004eb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004eb4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004eb8:	601a      	str	r2, [r3, #0]
  return result;
 8004eba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ebe:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004ec2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ec4:	fab3 f383 	clz	r3, r3
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004ece:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eda:	f7fd f849 	bl	8001f70 <HAL_GetTick>
 8004ede:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ee2:	e009      	b.n	8004ef8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ee4:	f7fd f844 	bl	8001f70 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e156      	b.n	80051a6 <HAL_RCC_OscConfig+0x109a>
 8004ef8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004efc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004f00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f0a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	fa93 f2a3 	rbit	r2, r3
 8004f14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f18:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004f1c:	601a      	str	r2, [r3, #0]
  return result;
 8004f1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f22:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004f26:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f28:	fab3 f383 	clz	r3, r3
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	095b      	lsrs	r3, r3, #5
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	f043 0301 	orr.w	r3, r3, #1
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d105      	bne.n	8004f48 <HAL_RCC_OscConfig+0xe3c>
 8004f3c:	4b01      	ldr	r3, [pc, #4]	@ (8004f44 <HAL_RCC_OscConfig+0xe38>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	e02a      	b.n	8004f98 <HAL_RCC_OscConfig+0xe8c>
 8004f42:	bf00      	nop
 8004f44:	40021000 	.word	0x40021000
 8004f48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f4c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004f50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f5a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	fa93 f2a3 	rbit	r2, r3
 8004f64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f68:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004f6c:	601a      	str	r2, [r3, #0]
 8004f6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f72:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004f76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f80:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	fa93 f2a3 	rbit	r2, r3
 8004f8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f8e:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	4b86      	ldr	r3, [pc, #536]	@ (80051b0 <HAL_RCC_OscConfig+0x10a4>)
 8004f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f98:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004f9c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004fa0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004fa4:	6011      	str	r1, [r2, #0]
 8004fa6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004faa:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004fae:	6812      	ldr	r2, [r2, #0]
 8004fb0:	fa92 f1a2 	rbit	r1, r2
 8004fb4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004fb8:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8004fbc:	6011      	str	r1, [r2, #0]
  return result;
 8004fbe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004fc2:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8004fc6:	6812      	ldr	r2, [r2, #0]
 8004fc8:	fab2 f282 	clz	r2, r2
 8004fcc:	b2d2      	uxtb	r2, r2
 8004fce:	f042 0220 	orr.w	r2, r2, #32
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	f002 021f 	and.w	r2, r2, #31
 8004fd8:	2101      	movs	r1, #1
 8004fda:	fa01 f202 	lsl.w	r2, r1, r2
 8004fde:	4013      	ands	r3, r2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f43f af7f 	beq.w	8004ee4 <HAL_RCC_OscConfig+0xdd8>
 8004fe6:	e0dd      	b.n	80051a4 <HAL_RCC_OscConfig+0x1098>
 8004fe8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fec:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004ff0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004ff4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ffa:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	fa93 f2a3 	rbit	r2, r3
 8005004:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005008:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800500c:	601a      	str	r2, [r3, #0]
  return result;
 800500e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005012:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005016:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005018:	fab3 f383 	clz	r3, r3
 800501c:	b2db      	uxtb	r3, r3
 800501e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005022:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	461a      	mov	r2, r3
 800502a:	2300      	movs	r3, #0
 800502c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800502e:	f7fc ff9f 	bl	8001f70 <HAL_GetTick>
 8005032:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005036:	e009      	b.n	800504c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005038:	f7fc ff9a 	bl	8001f70 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	2b02      	cmp	r3, #2
 8005046:	d901      	bls.n	800504c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e0ac      	b.n	80051a6 <HAL_RCC_OscConfig+0x109a>
 800504c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005050:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005054:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005058:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800505e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	fa93 f2a3 	rbit	r2, r3
 8005068:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800506c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005070:	601a      	str	r2, [r3, #0]
  return result;
 8005072:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005076:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800507a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800507c:	fab3 f383 	clz	r3, r3
 8005080:	b2db      	uxtb	r3, r3
 8005082:	095b      	lsrs	r3, r3, #5
 8005084:	b2db      	uxtb	r3, r3
 8005086:	f043 0301 	orr.w	r3, r3, #1
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b01      	cmp	r3, #1
 800508e:	d102      	bne.n	8005096 <HAL_RCC_OscConfig+0xf8a>
 8005090:	4b47      	ldr	r3, [pc, #284]	@ (80051b0 <HAL_RCC_OscConfig+0x10a4>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	e027      	b.n	80050e6 <HAL_RCC_OscConfig+0xfda>
 8005096:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800509a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800509e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80050a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050a8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	fa93 f2a3 	rbit	r2, r3
 80050b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050b6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050c0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80050c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050ce:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	fa93 f2a3 	rbit	r2, r3
 80050d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050dc:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	4b33      	ldr	r3, [pc, #204]	@ (80051b0 <HAL_RCC_OscConfig+0x10a4>)
 80050e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80050ea:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80050ee:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80050f2:	6011      	str	r1, [r2, #0]
 80050f4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80050f8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80050fc:	6812      	ldr	r2, [r2, #0]
 80050fe:	fa92 f1a2 	rbit	r1, r2
 8005102:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005106:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800510a:	6011      	str	r1, [r2, #0]
  return result;
 800510c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005110:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8005114:	6812      	ldr	r2, [r2, #0]
 8005116:	fab2 f282 	clz	r2, r2
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	f042 0220 	orr.w	r2, r2, #32
 8005120:	b2d2      	uxtb	r2, r2
 8005122:	f002 021f 	and.w	r2, r2, #31
 8005126:	2101      	movs	r1, #1
 8005128:	fa01 f202 	lsl.w	r2, r1, r2
 800512c:	4013      	ands	r3, r2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d182      	bne.n	8005038 <HAL_RCC_OscConfig+0xf2c>
 8005132:	e037      	b.n	80051a4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005134:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005138:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d101      	bne.n	8005148 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e02e      	b.n	80051a6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005148:	4b19      	ldr	r3, [pc, #100]	@ (80051b0 <HAL_RCC_OscConfig+0x10a4>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8005150:	4b17      	ldr	r3, [pc, #92]	@ (80051b0 <HAL_RCC_OscConfig+0x10a4>)
 8005152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005154:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005158:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800515c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8005160:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005164:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	429a      	cmp	r2, r3
 800516e:	d117      	bne.n	80051a0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005170:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005174:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005178:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800517c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005184:	429a      	cmp	r2, r3
 8005186:	d10b      	bne.n	80051a0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8005188:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800518c:	f003 020f 	and.w	r2, r3, #15
 8005190:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005194:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800519c:	429a      	cmp	r2, r3
 800519e:	d001      	beq.n	80051a4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e000      	b.n	80051a6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	40021000 	.word	0x40021000

080051b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b09e      	sub	sp, #120	@ 0x78
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80051be:	2300      	movs	r3, #0
 80051c0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d101      	bne.n	80051cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e162      	b.n	8005492 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051cc:	4b90      	ldr	r3, [pc, #576]	@ (8005410 <HAL_RCC_ClockConfig+0x25c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0307 	and.w	r3, r3, #7
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d910      	bls.n	80051fc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051da:	4b8d      	ldr	r3, [pc, #564]	@ (8005410 <HAL_RCC_ClockConfig+0x25c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f023 0207 	bic.w	r2, r3, #7
 80051e2:	498b      	ldr	r1, [pc, #556]	@ (8005410 <HAL_RCC_ClockConfig+0x25c>)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ea:	4b89      	ldr	r3, [pc, #548]	@ (8005410 <HAL_RCC_ClockConfig+0x25c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d001      	beq.n	80051fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e14a      	b.n	8005492 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b00      	cmp	r3, #0
 8005206:	d008      	beq.n	800521a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005208:	4b82      	ldr	r3, [pc, #520]	@ (8005414 <HAL_RCC_ClockConfig+0x260>)
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	497f      	ldr	r1, [pc, #508]	@ (8005414 <HAL_RCC_ClockConfig+0x260>)
 8005216:	4313      	orrs	r3, r2
 8005218:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 80dc 	beq.w	80053e0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d13c      	bne.n	80052aa <HAL_RCC_ClockConfig+0xf6>
 8005230:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005234:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005236:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005238:	fa93 f3a3 	rbit	r3, r3
 800523c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800523e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005240:	fab3 f383 	clz	r3, r3
 8005244:	b2db      	uxtb	r3, r3
 8005246:	095b      	lsrs	r3, r3, #5
 8005248:	b2db      	uxtb	r3, r3
 800524a:	f043 0301 	orr.w	r3, r3, #1
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b01      	cmp	r3, #1
 8005252:	d102      	bne.n	800525a <HAL_RCC_ClockConfig+0xa6>
 8005254:	4b6f      	ldr	r3, [pc, #444]	@ (8005414 <HAL_RCC_ClockConfig+0x260>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	e00f      	b.n	800527a <HAL_RCC_ClockConfig+0xc6>
 800525a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800525e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005260:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005262:	fa93 f3a3 	rbit	r3, r3
 8005266:	667b      	str	r3, [r7, #100]	@ 0x64
 8005268:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800526c:	663b      	str	r3, [r7, #96]	@ 0x60
 800526e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005270:	fa93 f3a3 	rbit	r3, r3
 8005274:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005276:	4b67      	ldr	r3, [pc, #412]	@ (8005414 <HAL_RCC_ClockConfig+0x260>)
 8005278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800527e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005280:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005282:	fa92 f2a2 	rbit	r2, r2
 8005286:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8005288:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800528a:	fab2 f282 	clz	r2, r2
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	f042 0220 	orr.w	r2, r2, #32
 8005294:	b2d2      	uxtb	r2, r2
 8005296:	f002 021f 	and.w	r2, r2, #31
 800529a:	2101      	movs	r1, #1
 800529c:	fa01 f202 	lsl.w	r2, r1, r2
 80052a0:	4013      	ands	r3, r2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d17b      	bne.n	800539e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e0f3      	b.n	8005492 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d13c      	bne.n	800532c <HAL_RCC_ClockConfig+0x178>
 80052b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80052b6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052ba:	fa93 f3a3 	rbit	r3, r3
 80052be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80052c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052c2:	fab3 f383 	clz	r3, r3
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	095b      	lsrs	r3, r3, #5
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	f043 0301 	orr.w	r3, r3, #1
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d102      	bne.n	80052dc <HAL_RCC_ClockConfig+0x128>
 80052d6:	4b4f      	ldr	r3, [pc, #316]	@ (8005414 <HAL_RCC_ClockConfig+0x260>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	e00f      	b.n	80052fc <HAL_RCC_ClockConfig+0x148>
 80052dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80052e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052e4:	fa93 f3a3 	rbit	r3, r3
 80052e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80052ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80052ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80052f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052f2:	fa93 f3a3 	rbit	r3, r3
 80052f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052f8:	4b46      	ldr	r3, [pc, #280]	@ (8005414 <HAL_RCC_ClockConfig+0x260>)
 80052fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005300:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005302:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005304:	fa92 f2a2 	rbit	r2, r2
 8005308:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800530a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800530c:	fab2 f282 	clz	r2, r2
 8005310:	b2d2      	uxtb	r2, r2
 8005312:	f042 0220 	orr.w	r2, r2, #32
 8005316:	b2d2      	uxtb	r2, r2
 8005318:	f002 021f 	and.w	r2, r2, #31
 800531c:	2101      	movs	r1, #1
 800531e:	fa01 f202 	lsl.w	r2, r1, r2
 8005322:	4013      	ands	r3, r2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d13a      	bne.n	800539e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e0b2      	b.n	8005492 <HAL_RCC_ClockConfig+0x2de>
 800532c:	2302      	movs	r3, #2
 800532e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005332:	fa93 f3a3 	rbit	r3, r3
 8005336:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800533a:	fab3 f383 	clz	r3, r3
 800533e:	b2db      	uxtb	r3, r3
 8005340:	095b      	lsrs	r3, r3, #5
 8005342:	b2db      	uxtb	r3, r3
 8005344:	f043 0301 	orr.w	r3, r3, #1
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b01      	cmp	r3, #1
 800534c:	d102      	bne.n	8005354 <HAL_RCC_ClockConfig+0x1a0>
 800534e:	4b31      	ldr	r3, [pc, #196]	@ (8005414 <HAL_RCC_ClockConfig+0x260>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	e00d      	b.n	8005370 <HAL_RCC_ClockConfig+0x1bc>
 8005354:	2302      	movs	r3, #2
 8005356:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535a:	fa93 f3a3 	rbit	r3, r3
 800535e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005360:	2302      	movs	r3, #2
 8005362:	623b      	str	r3, [r7, #32]
 8005364:	6a3b      	ldr	r3, [r7, #32]
 8005366:	fa93 f3a3 	rbit	r3, r3
 800536a:	61fb      	str	r3, [r7, #28]
 800536c:	4b29      	ldr	r3, [pc, #164]	@ (8005414 <HAL_RCC_ClockConfig+0x260>)
 800536e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005370:	2202      	movs	r2, #2
 8005372:	61ba      	str	r2, [r7, #24]
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	fa92 f2a2 	rbit	r2, r2
 800537a:	617a      	str	r2, [r7, #20]
  return result;
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	fab2 f282 	clz	r2, r2
 8005382:	b2d2      	uxtb	r2, r2
 8005384:	f042 0220 	orr.w	r2, r2, #32
 8005388:	b2d2      	uxtb	r2, r2
 800538a:	f002 021f 	and.w	r2, r2, #31
 800538e:	2101      	movs	r1, #1
 8005390:	fa01 f202 	lsl.w	r2, r1, r2
 8005394:	4013      	ands	r3, r2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e079      	b.n	8005492 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800539e:	4b1d      	ldr	r3, [pc, #116]	@ (8005414 <HAL_RCC_ClockConfig+0x260>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f023 0203 	bic.w	r2, r3, #3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	491a      	ldr	r1, [pc, #104]	@ (8005414 <HAL_RCC_ClockConfig+0x260>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053b0:	f7fc fdde 	bl	8001f70 <HAL_GetTick>
 80053b4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053b6:	e00a      	b.n	80053ce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053b8:	f7fc fdda 	bl	8001f70 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e061      	b.n	8005492 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ce:	4b11      	ldr	r3, [pc, #68]	@ (8005414 <HAL_RCC_ClockConfig+0x260>)
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f003 020c 	and.w	r2, r3, #12
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	429a      	cmp	r2, r3
 80053de:	d1eb      	bne.n	80053b8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005410 <HAL_RCC_ClockConfig+0x25c>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0307 	and.w	r3, r3, #7
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d214      	bcs.n	8005418 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ee:	4b08      	ldr	r3, [pc, #32]	@ (8005410 <HAL_RCC_ClockConfig+0x25c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f023 0207 	bic.w	r2, r3, #7
 80053f6:	4906      	ldr	r1, [pc, #24]	@ (8005410 <HAL_RCC_ClockConfig+0x25c>)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053fe:	4b04      	ldr	r3, [pc, #16]	@ (8005410 <HAL_RCC_ClockConfig+0x25c>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0307 	and.w	r3, r3, #7
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	429a      	cmp	r2, r3
 800540a:	d005      	beq.n	8005418 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e040      	b.n	8005492 <HAL_RCC_ClockConfig+0x2de>
 8005410:	40022000 	.word	0x40022000
 8005414:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b00      	cmp	r3, #0
 8005422:	d008      	beq.n	8005436 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005424:	4b1d      	ldr	r3, [pc, #116]	@ (800549c <HAL_RCC_ClockConfig+0x2e8>)
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	491a      	ldr	r1, [pc, #104]	@ (800549c <HAL_RCC_ClockConfig+0x2e8>)
 8005432:	4313      	orrs	r3, r2
 8005434:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0308 	and.w	r3, r3, #8
 800543e:	2b00      	cmp	r3, #0
 8005440:	d009      	beq.n	8005456 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005442:	4b16      	ldr	r3, [pc, #88]	@ (800549c <HAL_RCC_ClockConfig+0x2e8>)
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	4912      	ldr	r1, [pc, #72]	@ (800549c <HAL_RCC_ClockConfig+0x2e8>)
 8005452:	4313      	orrs	r3, r2
 8005454:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005456:	f000 f829 	bl	80054ac <HAL_RCC_GetSysClockFreq>
 800545a:	4601      	mov	r1, r0
 800545c:	4b0f      	ldr	r3, [pc, #60]	@ (800549c <HAL_RCC_ClockConfig+0x2e8>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005464:	22f0      	movs	r2, #240	@ 0xf0
 8005466:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	fa92 f2a2 	rbit	r2, r2
 800546e:	60fa      	str	r2, [r7, #12]
  return result;
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	fab2 f282 	clz	r2, r2
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	40d3      	lsrs	r3, r2
 800547a:	4a09      	ldr	r2, [pc, #36]	@ (80054a0 <HAL_RCC_ClockConfig+0x2ec>)
 800547c:	5cd3      	ldrb	r3, [r2, r3]
 800547e:	fa21 f303 	lsr.w	r3, r1, r3
 8005482:	4a08      	ldr	r2, [pc, #32]	@ (80054a4 <HAL_RCC_ClockConfig+0x2f0>)
 8005484:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005486:	4b08      	ldr	r3, [pc, #32]	@ (80054a8 <HAL_RCC_ClockConfig+0x2f4>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4618      	mov	r0, r3
 800548c:	f7fc fa8c 	bl	80019a8 <HAL_InitTick>
  
  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3778      	adds	r7, #120	@ 0x78
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	40021000 	.word	0x40021000
 80054a0:	0800f178 	.word	0x0800f178
 80054a4:	20000000 	.word	0x20000000
 80054a8:	20000004 	.word	0x20000004

080054ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80054b2:	2300      	movs	r3, #0
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	2300      	movs	r3, #0
 80054b8:	60bb      	str	r3, [r7, #8]
 80054ba:	2300      	movs	r3, #0
 80054bc:	617b      	str	r3, [r7, #20]
 80054be:	2300      	movs	r3, #0
 80054c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80054c6:	4b1f      	ldr	r3, [pc, #124]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x98>)
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f003 030c 	and.w	r3, r3, #12
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	d002      	beq.n	80054dc <HAL_RCC_GetSysClockFreq+0x30>
 80054d6:	2b08      	cmp	r3, #8
 80054d8:	d003      	beq.n	80054e2 <HAL_RCC_GetSysClockFreq+0x36>
 80054da:	e029      	b.n	8005530 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x9c>)
 80054de:	613b      	str	r3, [r7, #16]
      break;
 80054e0:	e029      	b.n	8005536 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	0c9b      	lsrs	r3, r3, #18
 80054e6:	f003 030f 	and.w	r3, r3, #15
 80054ea:	4a18      	ldr	r2, [pc, #96]	@ (800554c <HAL_RCC_GetSysClockFreq+0xa0>)
 80054ec:	5cd3      	ldrb	r3, [r2, r3]
 80054ee:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80054f0:	4b14      	ldr	r3, [pc, #80]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x98>)
 80054f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f4:	f003 030f 	and.w	r3, r3, #15
 80054f8:	4a15      	ldr	r2, [pc, #84]	@ (8005550 <HAL_RCC_GetSysClockFreq+0xa4>)
 80054fa:	5cd3      	ldrb	r3, [r2, r3]
 80054fc:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d008      	beq.n	800551a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005508:	4a0f      	ldr	r2, [pc, #60]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x9c>)
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	fb02 f303 	mul.w	r3, r2, r3
 8005516:	617b      	str	r3, [r7, #20]
 8005518:	e007      	b.n	800552a <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800551a:	4a0b      	ldr	r2, [pc, #44]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x9c>)
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	fb02 f303 	mul.w	r3, r2, r3
 8005528:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	613b      	str	r3, [r7, #16]
      break;
 800552e:	e002      	b.n	8005536 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005530:	4b05      	ldr	r3, [pc, #20]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005532:	613b      	str	r3, [r7, #16]
      break;
 8005534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005536:	693b      	ldr	r3, [r7, #16]
}
 8005538:	4618      	mov	r0, r3
 800553a:	371c      	adds	r7, #28
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	40021000 	.word	0x40021000
 8005548:	007a1200 	.word	0x007a1200
 800554c:	0800f190 	.word	0x0800f190
 8005550:	0800f1a0 	.word	0x0800f1a0

08005554 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005558:	4b03      	ldr	r3, [pc, #12]	@ (8005568 <HAL_RCC_GetHCLKFreq+0x14>)
 800555a:	681b      	ldr	r3, [r3, #0]
}
 800555c:	4618      	mov	r0, r3
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	20000000 	.word	0x20000000

0800556c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005572:	f7ff ffef 	bl	8005554 <HAL_RCC_GetHCLKFreq>
 8005576:	4601      	mov	r1, r0
 8005578:	4b0b      	ldr	r3, [pc, #44]	@ (80055a8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005580:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005584:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	fa92 f2a2 	rbit	r2, r2
 800558c:	603a      	str	r2, [r7, #0]
  return result;
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	fab2 f282 	clz	r2, r2
 8005594:	b2d2      	uxtb	r2, r2
 8005596:	40d3      	lsrs	r3, r2
 8005598:	4a04      	ldr	r2, [pc, #16]	@ (80055ac <HAL_RCC_GetPCLK1Freq+0x40>)
 800559a:	5cd3      	ldrb	r3, [r2, r3]
 800559c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	40021000 	.word	0x40021000
 80055ac:	0800f188 	.word	0x0800f188

080055b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80055b6:	f7ff ffcd 	bl	8005554 <HAL_RCC_GetHCLKFreq>
 80055ba:	4601      	mov	r1, r0
 80055bc:	4b0b      	ldr	r3, [pc, #44]	@ (80055ec <HAL_RCC_GetPCLK2Freq+0x3c>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80055c4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80055c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	fa92 f2a2 	rbit	r2, r2
 80055d0:	603a      	str	r2, [r7, #0]
  return result;
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	fab2 f282 	clz	r2, r2
 80055d8:	b2d2      	uxtb	r2, r2
 80055da:	40d3      	lsrs	r3, r2
 80055dc:	4a04      	ldr	r2, [pc, #16]	@ (80055f0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80055de:	5cd3      	ldrb	r3, [r2, r3]
 80055e0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80055e4:	4618      	mov	r0, r3
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	40021000 	.word	0x40021000
 80055f0:	0800f188 	.word	0x0800f188

080055f4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	220f      	movs	r2, #15
 8005602:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005604:	4b12      	ldr	r3, [pc, #72]	@ (8005650 <HAL_RCC_GetClockConfig+0x5c>)
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f003 0203 	and.w	r2, r3, #3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005610:	4b0f      	ldr	r3, [pc, #60]	@ (8005650 <HAL_RCC_GetClockConfig+0x5c>)
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800561c:	4b0c      	ldr	r3, [pc, #48]	@ (8005650 <HAL_RCC_GetClockConfig+0x5c>)
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005628:	4b09      	ldr	r3, [pc, #36]	@ (8005650 <HAL_RCC_GetClockConfig+0x5c>)
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	08db      	lsrs	r3, r3, #3
 800562e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8005636:	4b07      	ldr	r3, [pc, #28]	@ (8005654 <HAL_RCC_GetClockConfig+0x60>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0207 	and.w	r2, r3, #7
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	601a      	str	r2, [r3, #0]
}
 8005642:	bf00      	nop
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	40021000 	.word	0x40021000
 8005654:	40022000 	.word	0x40022000

08005658 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b092      	sub	sp, #72	@ 0x48
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005660:	2300      	movs	r3, #0
 8005662:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8005664:	2300      	movs	r3, #0
 8005666:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005668:	2300      	movs	r3, #0
 800566a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 80d4 	beq.w	8005824 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800567c:	4b4e      	ldr	r3, [pc, #312]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800567e:	69db      	ldr	r3, [r3, #28]
 8005680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10e      	bne.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005688:	4b4b      	ldr	r3, [pc, #300]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800568a:	69db      	ldr	r3, [r3, #28]
 800568c:	4a4a      	ldr	r2, [pc, #296]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800568e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005692:	61d3      	str	r3, [r2, #28]
 8005694:	4b48      	ldr	r3, [pc, #288]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005696:	69db      	ldr	r3, [r3, #28]
 8005698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800569c:	60bb      	str	r3, [r7, #8]
 800569e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056a0:	2301      	movs	r3, #1
 80056a2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a6:	4b45      	ldr	r3, [pc, #276]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d118      	bne.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056b2:	4b42      	ldr	r3, [pc, #264]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a41      	ldr	r2, [pc, #260]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056be:	f7fc fc57 	bl	8001f70 <HAL_GetTick>
 80056c2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056c4:	e008      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056c6:	f7fc fc53 	bl	8001f70 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b64      	cmp	r3, #100	@ 0x64
 80056d2:	d901      	bls.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e1d6      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d8:	4b38      	ldr	r3, [pc, #224]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d0f0      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056e4:	4b34      	ldr	r3, [pc, #208]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f000 8084 	beq.w	80057fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005700:	429a      	cmp	r2, r3
 8005702:	d07c      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005704:	4b2c      	ldr	r3, [pc, #176]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800570c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800570e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005712:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005716:	fa93 f3a3 	rbit	r3, r3
 800571a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800571c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800571e:	fab3 f383 	clz	r3, r3
 8005722:	b2db      	uxtb	r3, r3
 8005724:	461a      	mov	r2, r3
 8005726:	4b26      	ldr	r3, [pc, #152]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005728:	4413      	add	r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	461a      	mov	r2, r3
 800572e:	2301      	movs	r3, #1
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005736:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800573a:	fa93 f3a3 	rbit	r3, r3
 800573e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005742:	fab3 f383 	clz	r3, r3
 8005746:	b2db      	uxtb	r3, r3
 8005748:	461a      	mov	r2, r3
 800574a:	4b1d      	ldr	r3, [pc, #116]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800574c:	4413      	add	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	461a      	mov	r2, r3
 8005752:	2300      	movs	r3, #0
 8005754:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005756:	4a18      	ldr	r2, [pc, #96]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800575a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800575c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b00      	cmp	r3, #0
 8005764:	d04b      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005766:	f7fc fc03 	bl	8001f70 <HAL_GetTick>
 800576a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800576c:	e00a      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800576e:	f7fc fbff 	bl	8001f70 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	f241 3288 	movw	r2, #5000	@ 0x1388
 800577c:	4293      	cmp	r3, r2
 800577e:	d901      	bls.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e180      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005784:	2302      	movs	r3, #2
 8005786:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800578a:	fa93 f3a3 	rbit	r3, r3
 800578e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005790:	2302      	movs	r3, #2
 8005792:	623b      	str	r3, [r7, #32]
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	fa93 f3a3 	rbit	r3, r3
 800579a:	61fb      	str	r3, [r7, #28]
  return result;
 800579c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800579e:	fab3 f383 	clz	r3, r3
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	095b      	lsrs	r3, r3, #5
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	f043 0302 	orr.w	r3, r3, #2
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d108      	bne.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80057b2:	4b01      	ldr	r3, [pc, #4]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	e00d      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80057b8:	40021000 	.word	0x40021000
 80057bc:	40007000 	.word	0x40007000
 80057c0:	10908100 	.word	0x10908100
 80057c4:	2302      	movs	r3, #2
 80057c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	fa93 f3a3 	rbit	r3, r3
 80057ce:	617b      	str	r3, [r7, #20]
 80057d0:	4b9a      	ldr	r3, [pc, #616]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d4:	2202      	movs	r2, #2
 80057d6:	613a      	str	r2, [r7, #16]
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	fa92 f2a2 	rbit	r2, r2
 80057de:	60fa      	str	r2, [r7, #12]
  return result;
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	fab2 f282 	clz	r2, r2
 80057e6:	b2d2      	uxtb	r2, r2
 80057e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057ec:	b2d2      	uxtb	r2, r2
 80057ee:	f002 021f 	and.w	r2, r2, #31
 80057f2:	2101      	movs	r1, #1
 80057f4:	fa01 f202 	lsl.w	r2, r1, r2
 80057f8:	4013      	ands	r3, r2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d0b7      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80057fe:	4b8f      	ldr	r3, [pc, #572]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	498c      	ldr	r1, [pc, #560]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800580c:	4313      	orrs	r3, r2
 800580e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005810:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005814:	2b01      	cmp	r3, #1
 8005816:	d105      	bne.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005818:	4b88      	ldr	r3, [pc, #544]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800581a:	69db      	ldr	r3, [r3, #28]
 800581c:	4a87      	ldr	r2, [pc, #540]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800581e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005822:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d008      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005830:	4b82      	ldr	r3, [pc, #520]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005834:	f023 0203 	bic.w	r2, r3, #3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	497f      	ldr	r1, [pc, #508]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800583e:	4313      	orrs	r3, r2
 8005840:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d008      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800584e:	4b7b      	ldr	r3, [pc, #492]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005852:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	4978      	ldr	r1, [pc, #480]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800585c:	4313      	orrs	r3, r2
 800585e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0304 	and.w	r3, r3, #4
 8005868:	2b00      	cmp	r3, #0
 800586a:	d008      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800586c:	4b73      	ldr	r3, [pc, #460]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800586e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005870:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	4970      	ldr	r1, [pc, #448]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800587a:	4313      	orrs	r3, r2
 800587c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0320 	and.w	r3, r3, #32
 8005886:	2b00      	cmp	r3, #0
 8005888:	d008      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800588a:	4b6c      	ldr	r3, [pc, #432]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800588c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588e:	f023 0210 	bic.w	r2, r3, #16
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	4969      	ldr	r1, [pc, #420]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005898:	4313      	orrs	r3, r2
 800589a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d008      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80058a8:	4b64      	ldr	r3, [pc, #400]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058b4:	4961      	ldr	r1, [pc, #388]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d008      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058c6:	4b5d      	ldr	r3, [pc, #372]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ca:	f023 0220 	bic.w	r2, r3, #32
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	495a      	ldr	r1, [pc, #360]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d008      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058e4:	4b55      	ldr	r3, [pc, #340]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f0:	4952      	ldr	r1, [pc, #328]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0308 	and.w	r3, r3, #8
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d008      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005902:	4b4e      	ldr	r3, [pc, #312]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005906:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	494b      	ldr	r1, [pc, #300]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005910:	4313      	orrs	r3, r2
 8005912:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0310 	and.w	r3, r3, #16
 800591c:	2b00      	cmp	r3, #0
 800591e:	d008      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005920:	4b46      	ldr	r3, [pc, #280]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005924:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	4943      	ldr	r1, [pc, #268]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800592e:	4313      	orrs	r3, r2
 8005930:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800593a:	2b00      	cmp	r3, #0
 800593c:	d008      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800593e:	4b3f      	ldr	r3, [pc, #252]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800594a:	493c      	ldr	r1, [pc, #240]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800594c:	4313      	orrs	r3, r2
 800594e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005958:	2b00      	cmp	r3, #0
 800595a:	d008      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800595c:	4b37      	ldr	r3, [pc, #220]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800595e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005960:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005968:	4934      	ldr	r1, [pc, #208]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800596a:	4313      	orrs	r3, r2
 800596c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005976:	2b00      	cmp	r3, #0
 8005978:	d008      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800597a:	4b30      	ldr	r3, [pc, #192]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800597c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800597e:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005986:	492d      	ldr	r1, [pc, #180]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005988:	4313      	orrs	r3, r2
 800598a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d008      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005998:	4b28      	ldr	r3, [pc, #160]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800599a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800599c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059a4:	4925      	ldr	r1, [pc, #148]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d008      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80059b6:	4b21      	ldr	r3, [pc, #132]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ba:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c2:	491e      	ldr	r1, [pc, #120]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d008      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80059d4:	4b19      	ldr	r3, [pc, #100]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059d8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e0:	4916      	ldr	r1, [pc, #88]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d008      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80059f2:	4b12      	ldr	r3, [pc, #72]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059fe:	490f      	ldr	r1, [pc, #60]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d008      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005a10:	4b0a      	ldr	r3, [pc, #40]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a14:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a1c:	4907      	ldr	r1, [pc, #28]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00c      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005a2e:	4b03      	ldr	r3, [pc, #12]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a32:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	e002      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005a3a:	bf00      	nop
 8005a3c:	40021000 	.word	0x40021000
 8005a40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a42:	4913      	ldr	r1, [pc, #76]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d008      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005a54:	4b0e      	ldr	r3, [pc, #56]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a58:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a60:	490b      	ldr	r1, [pc, #44]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d008      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005a72:	4b07      	ldr	r3, [pc, #28]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a76:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a7e:	4904      	ldr	r1, [pc, #16]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3748      	adds	r7, #72	@ 0x48
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	40021000 	.word	0x40021000

08005a94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e049      	b.n	8005b3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d106      	bne.n	8005ac0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f841 	bl	8005b42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	3304      	adds	r3, #4
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	4610      	mov	r0, r2
 8005ad4:	f000 fc52 	bl	800637c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b083      	sub	sp, #12
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005b4a:	bf00      	nop
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
	...

08005b58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d001      	beq.n	8005b70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e04f      	b.n	8005c10 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68da      	ldr	r2, [r3, #12]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f042 0201 	orr.w	r2, r2, #1
 8005b86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a23      	ldr	r2, [pc, #140]	@ (8005c1c <HAL_TIM_Base_Start_IT+0xc4>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d01d      	beq.n	8005bce <HAL_TIM_Base_Start_IT+0x76>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b9a:	d018      	beq.n	8005bce <HAL_TIM_Base_Start_IT+0x76>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a1f      	ldr	r2, [pc, #124]	@ (8005c20 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d013      	beq.n	8005bce <HAL_TIM_Base_Start_IT+0x76>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a1e      	ldr	r2, [pc, #120]	@ (8005c24 <HAL_TIM_Base_Start_IT+0xcc>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d00e      	beq.n	8005bce <HAL_TIM_Base_Start_IT+0x76>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a1c      	ldr	r2, [pc, #112]	@ (8005c28 <HAL_TIM_Base_Start_IT+0xd0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d009      	beq.n	8005bce <HAL_TIM_Base_Start_IT+0x76>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a1b      	ldr	r2, [pc, #108]	@ (8005c2c <HAL_TIM_Base_Start_IT+0xd4>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d004      	beq.n	8005bce <HAL_TIM_Base_Start_IT+0x76>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a19      	ldr	r2, [pc, #100]	@ (8005c30 <HAL_TIM_Base_Start_IT+0xd8>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d115      	bne.n	8005bfa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	4b17      	ldr	r3, [pc, #92]	@ (8005c34 <HAL_TIM_Base_Start_IT+0xdc>)
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2b06      	cmp	r3, #6
 8005bde:	d015      	beq.n	8005c0c <HAL_TIM_Base_Start_IT+0xb4>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005be6:	d011      	beq.n	8005c0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0201 	orr.w	r2, r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bf8:	e008      	b.n	8005c0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f042 0201 	orr.w	r2, r2, #1
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	e000      	b.n	8005c0e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3714      	adds	r7, #20
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	40012c00 	.word	0x40012c00
 8005c20:	40000400 	.word	0x40000400
 8005c24:	40000800 	.word	0x40000800
 8005c28:	40013400 	.word	0x40013400
 8005c2c:	40014000 	.word	0x40014000
 8005c30:	40015000 	.word	0x40015000
 8005c34:	00010007 	.word	0x00010007

08005c38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d101      	bne.n	8005c4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e049      	b.n	8005cde <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d106      	bne.n	8005c64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7fc f86a 	bl	8001d38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2202      	movs	r2, #2
 8005c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	3304      	adds	r3, #4
 8005c74:	4619      	mov	r1, r3
 8005c76:	4610      	mov	r0, r2
 8005c78:	f000 fb80 	bl	800637c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
	...

08005ce8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d109      	bne.n	8005d0c <HAL_TIM_PWM_Start+0x24>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	bf14      	ite	ne
 8005d04:	2301      	movne	r3, #1
 8005d06:	2300      	moveq	r3, #0
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	e03c      	b.n	8005d86 <HAL_TIM_PWM_Start+0x9e>
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	2b04      	cmp	r3, #4
 8005d10:	d109      	bne.n	8005d26 <HAL_TIM_PWM_Start+0x3e>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	bf14      	ite	ne
 8005d1e:	2301      	movne	r3, #1
 8005d20:	2300      	moveq	r3, #0
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	e02f      	b.n	8005d86 <HAL_TIM_PWM_Start+0x9e>
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	2b08      	cmp	r3, #8
 8005d2a:	d109      	bne.n	8005d40 <HAL_TIM_PWM_Start+0x58>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	bf14      	ite	ne
 8005d38:	2301      	movne	r3, #1
 8005d3a:	2300      	moveq	r3, #0
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	e022      	b.n	8005d86 <HAL_TIM_PWM_Start+0x9e>
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	2b0c      	cmp	r3, #12
 8005d44:	d109      	bne.n	8005d5a <HAL_TIM_PWM_Start+0x72>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	bf14      	ite	ne
 8005d52:	2301      	movne	r3, #1
 8005d54:	2300      	moveq	r3, #0
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	e015      	b.n	8005d86 <HAL_TIM_PWM_Start+0x9e>
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b10      	cmp	r3, #16
 8005d5e:	d109      	bne.n	8005d74 <HAL_TIM_PWM_Start+0x8c>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	bf14      	ite	ne
 8005d6c:	2301      	movne	r3, #1
 8005d6e:	2300      	moveq	r3, #0
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	e008      	b.n	8005d86 <HAL_TIM_PWM_Start+0x9e>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	bf14      	ite	ne
 8005d80:	2301      	movne	r3, #1
 8005d82:	2300      	moveq	r3, #0
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d001      	beq.n	8005d8e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e0a1      	b.n	8005ed2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d104      	bne.n	8005d9e <HAL_TIM_PWM_Start+0xb6>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2202      	movs	r2, #2
 8005d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d9c:	e023      	b.n	8005de6 <HAL_TIM_PWM_Start+0xfe>
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	2b04      	cmp	r3, #4
 8005da2:	d104      	bne.n	8005dae <HAL_TIM_PWM_Start+0xc6>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2202      	movs	r2, #2
 8005da8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dac:	e01b      	b.n	8005de6 <HAL_TIM_PWM_Start+0xfe>
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	2b08      	cmp	r3, #8
 8005db2:	d104      	bne.n	8005dbe <HAL_TIM_PWM_Start+0xd6>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2202      	movs	r2, #2
 8005db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005dbc:	e013      	b.n	8005de6 <HAL_TIM_PWM_Start+0xfe>
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	2b0c      	cmp	r3, #12
 8005dc2:	d104      	bne.n	8005dce <HAL_TIM_PWM_Start+0xe6>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005dcc:	e00b      	b.n	8005de6 <HAL_TIM_PWM_Start+0xfe>
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	2b10      	cmp	r3, #16
 8005dd2:	d104      	bne.n	8005dde <HAL_TIM_PWM_Start+0xf6>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ddc:	e003      	b.n	8005de6 <HAL_TIM_PWM_Start+0xfe>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2202      	movs	r2, #2
 8005de2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2201      	movs	r2, #1
 8005dec:	6839      	ldr	r1, [r7, #0]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 fe74 	bl	8006adc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a38      	ldr	r2, [pc, #224]	@ (8005edc <HAL_TIM_PWM_Start+0x1f4>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d018      	beq.n	8005e30 <HAL_TIM_PWM_Start+0x148>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a37      	ldr	r2, [pc, #220]	@ (8005ee0 <HAL_TIM_PWM_Start+0x1f8>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d013      	beq.n	8005e30 <HAL_TIM_PWM_Start+0x148>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a35      	ldr	r2, [pc, #212]	@ (8005ee4 <HAL_TIM_PWM_Start+0x1fc>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d00e      	beq.n	8005e30 <HAL_TIM_PWM_Start+0x148>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a34      	ldr	r2, [pc, #208]	@ (8005ee8 <HAL_TIM_PWM_Start+0x200>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d009      	beq.n	8005e30 <HAL_TIM_PWM_Start+0x148>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a32      	ldr	r2, [pc, #200]	@ (8005eec <HAL_TIM_PWM_Start+0x204>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d004      	beq.n	8005e30 <HAL_TIM_PWM_Start+0x148>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a31      	ldr	r2, [pc, #196]	@ (8005ef0 <HAL_TIM_PWM_Start+0x208>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d101      	bne.n	8005e34 <HAL_TIM_PWM_Start+0x14c>
 8005e30:	2301      	movs	r3, #1
 8005e32:	e000      	b.n	8005e36 <HAL_TIM_PWM_Start+0x14e>
 8005e34:	2300      	movs	r3, #0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d007      	beq.n	8005e4a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e48:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a23      	ldr	r2, [pc, #140]	@ (8005edc <HAL_TIM_PWM_Start+0x1f4>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d01d      	beq.n	8005e90 <HAL_TIM_PWM_Start+0x1a8>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e5c:	d018      	beq.n	8005e90 <HAL_TIM_PWM_Start+0x1a8>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a24      	ldr	r2, [pc, #144]	@ (8005ef4 <HAL_TIM_PWM_Start+0x20c>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d013      	beq.n	8005e90 <HAL_TIM_PWM_Start+0x1a8>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a22      	ldr	r2, [pc, #136]	@ (8005ef8 <HAL_TIM_PWM_Start+0x210>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d00e      	beq.n	8005e90 <HAL_TIM_PWM_Start+0x1a8>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a1a      	ldr	r2, [pc, #104]	@ (8005ee0 <HAL_TIM_PWM_Start+0x1f8>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d009      	beq.n	8005e90 <HAL_TIM_PWM_Start+0x1a8>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a18      	ldr	r2, [pc, #96]	@ (8005ee4 <HAL_TIM_PWM_Start+0x1fc>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d004      	beq.n	8005e90 <HAL_TIM_PWM_Start+0x1a8>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a19      	ldr	r2, [pc, #100]	@ (8005ef0 <HAL_TIM_PWM_Start+0x208>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d115      	bne.n	8005ebc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689a      	ldr	r2, [r3, #8]
 8005e96:	4b19      	ldr	r3, [pc, #100]	@ (8005efc <HAL_TIM_PWM_Start+0x214>)
 8005e98:	4013      	ands	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2b06      	cmp	r3, #6
 8005ea0:	d015      	beq.n	8005ece <HAL_TIM_PWM_Start+0x1e6>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ea8:	d011      	beq.n	8005ece <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f042 0201 	orr.w	r2, r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eba:	e008      	b.n	8005ece <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f042 0201 	orr.w	r2, r2, #1
 8005eca:	601a      	str	r2, [r3, #0]
 8005ecc:	e000      	b.n	8005ed0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ece:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	40012c00 	.word	0x40012c00
 8005ee0:	40013400 	.word	0x40013400
 8005ee4:	40014000 	.word	0x40014000
 8005ee8:	40014400 	.word	0x40014400
 8005eec:	40014800 	.word	0x40014800
 8005ef0:	40015000 	.word	0x40015000
 8005ef4:	40000400 	.word	0x40000400
 8005ef8:	40000800 	.word	0x40000800
 8005efc:	00010007 	.word	0x00010007

08005f00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d020      	beq.n	8005f64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d01b      	beq.n	8005f64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f06f 0202 	mvn.w	r2, #2
 8005f34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	f003 0303 	and.w	r3, r3, #3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f9f8 	bl	8006340 <HAL_TIM_IC_CaptureCallback>
 8005f50:	e005      	b.n	8005f5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f9ea 	bl	800632c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f9fb 	bl	8006354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f003 0304 	and.w	r3, r3, #4
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d020      	beq.n	8005fb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f003 0304 	and.w	r3, r3, #4
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d01b      	beq.n	8005fb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f06f 0204 	mvn.w	r2, #4
 8005f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2202      	movs	r2, #2
 8005f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f9d2 	bl	8006340 <HAL_TIM_IC_CaptureCallback>
 8005f9c:	e005      	b.n	8005faa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f9c4 	bl	800632c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 f9d5 	bl	8006354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	f003 0308 	and.w	r3, r3, #8
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d020      	beq.n	8005ffc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f003 0308 	and.w	r3, r3, #8
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d01b      	beq.n	8005ffc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f06f 0208 	mvn.w	r2, #8
 8005fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2204      	movs	r2, #4
 8005fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	f003 0303 	and.w	r3, r3, #3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f9ac 	bl	8006340 <HAL_TIM_IC_CaptureCallback>
 8005fe8:	e005      	b.n	8005ff6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f99e 	bl	800632c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f9af 	bl	8006354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	f003 0310 	and.w	r3, r3, #16
 8006002:	2b00      	cmp	r3, #0
 8006004:	d020      	beq.n	8006048 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f003 0310 	and.w	r3, r3, #16
 800600c:	2b00      	cmp	r3, #0
 800600e:	d01b      	beq.n	8006048 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f06f 0210 	mvn.w	r2, #16
 8006018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2208      	movs	r2, #8
 800601e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	69db      	ldr	r3, [r3, #28]
 8006026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f986 	bl	8006340 <HAL_TIM_IC_CaptureCallback>
 8006034:	e005      	b.n	8006042 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f978 	bl	800632c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f989 	bl	8006354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00c      	beq.n	800606c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	2b00      	cmp	r3, #0
 800605a:	d007      	beq.n	800606c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f06f 0201 	mvn.w	r2, #1
 8006064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7fb fa26 	bl	80014b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00c      	beq.n	8006090 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800607c:	2b00      	cmp	r3, #0
 800607e:	d007      	beq.n	8006090 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fde2 	bl	8006c54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00c      	beq.n	80060b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d007      	beq.n	80060b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80060ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fdda 	bl	8006c68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00c      	beq.n	80060d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d007      	beq.n	80060d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80060d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f948 	bl	8006368 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	f003 0320 	and.w	r3, r3, #32
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00c      	beq.n	80060fc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f003 0320 	and.w	r3, r3, #32
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d007      	beq.n	80060fc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f06f 0220 	mvn.w	r2, #32
 80060f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fda2 	bl	8006c40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060fc:	bf00      	nop
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006110:	2300      	movs	r3, #0
 8006112:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800611a:	2b01      	cmp	r3, #1
 800611c:	d101      	bne.n	8006122 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800611e:	2302      	movs	r3, #2
 8006120:	e0ff      	b.n	8006322 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b14      	cmp	r3, #20
 800612e:	f200 80f0 	bhi.w	8006312 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006132:	a201      	add	r2, pc, #4	@ (adr r2, 8006138 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006138:	0800618d 	.word	0x0800618d
 800613c:	08006313 	.word	0x08006313
 8006140:	08006313 	.word	0x08006313
 8006144:	08006313 	.word	0x08006313
 8006148:	080061cd 	.word	0x080061cd
 800614c:	08006313 	.word	0x08006313
 8006150:	08006313 	.word	0x08006313
 8006154:	08006313 	.word	0x08006313
 8006158:	0800620f 	.word	0x0800620f
 800615c:	08006313 	.word	0x08006313
 8006160:	08006313 	.word	0x08006313
 8006164:	08006313 	.word	0x08006313
 8006168:	0800624f 	.word	0x0800624f
 800616c:	08006313 	.word	0x08006313
 8006170:	08006313 	.word	0x08006313
 8006174:	08006313 	.word	0x08006313
 8006178:	08006291 	.word	0x08006291
 800617c:	08006313 	.word	0x08006313
 8006180:	08006313 	.word	0x08006313
 8006184:	08006313 	.word	0x08006313
 8006188:	080062d1 	.word	0x080062d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68b9      	ldr	r1, [r7, #8]
 8006192:	4618      	mov	r0, r3
 8006194:	f000 f99c 	bl	80064d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	699a      	ldr	r2, [r3, #24]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f042 0208 	orr.w	r2, r2, #8
 80061a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	699a      	ldr	r2, [r3, #24]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 0204 	bic.w	r2, r2, #4
 80061b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	6999      	ldr	r1, [r3, #24]
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	691a      	ldr	r2, [r3, #16]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	430a      	orrs	r2, r1
 80061c8:	619a      	str	r2, [r3, #24]
      break;
 80061ca:	e0a5      	b.n	8006318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68b9      	ldr	r1, [r7, #8]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 fa16 	bl	8006604 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	699a      	ldr	r2, [r3, #24]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	699a      	ldr	r2, [r3, #24]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6999      	ldr	r1, [r3, #24]
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	021a      	lsls	r2, r3, #8
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	430a      	orrs	r2, r1
 800620a:	619a      	str	r2, [r3, #24]
      break;
 800620c:	e084      	b.n	8006318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68b9      	ldr	r1, [r7, #8]
 8006214:	4618      	mov	r0, r3
 8006216:	f000 fa89 	bl	800672c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	69da      	ldr	r2, [r3, #28]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f042 0208 	orr.w	r2, r2, #8
 8006228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	69da      	ldr	r2, [r3, #28]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f022 0204 	bic.w	r2, r2, #4
 8006238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	69d9      	ldr	r1, [r3, #28]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	691a      	ldr	r2, [r3, #16]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	61da      	str	r2, [r3, #28]
      break;
 800624c:	e064      	b.n	8006318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68b9      	ldr	r1, [r7, #8]
 8006254:	4618      	mov	r0, r3
 8006256:	f000 fafb 	bl	8006850 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	69da      	ldr	r2, [r3, #28]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	69da      	ldr	r2, [r3, #28]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	69d9      	ldr	r1, [r3, #28]
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	021a      	lsls	r2, r3, #8
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	430a      	orrs	r2, r1
 800628c:	61da      	str	r2, [r3, #28]
      break;
 800628e:	e043      	b.n	8006318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68b9      	ldr	r1, [r7, #8]
 8006296:	4618      	mov	r0, r3
 8006298:	f000 fb4a 	bl	8006930 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f042 0208 	orr.w	r2, r2, #8
 80062aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 0204 	bic.w	r2, r2, #4
 80062ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	691a      	ldr	r2, [r3, #16]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	430a      	orrs	r2, r1
 80062cc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80062ce:	e023      	b.n	8006318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68b9      	ldr	r1, [r7, #8]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 fb94 	bl	8006a04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062ea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062fa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	021a      	lsls	r2, r3, #8
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	430a      	orrs	r2, r1
 800630e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006310:	e002      	b.n	8006318 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	75fb      	strb	r3, [r7, #23]
      break;
 8006316:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006320:	7dfb      	ldrb	r3, [r7, #23]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3718      	adds	r7, #24
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop

0800632c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a48      	ldr	r2, [pc, #288]	@ (80064b0 <TIM_Base_SetConfig+0x134>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d013      	beq.n	80063bc <TIM_Base_SetConfig+0x40>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800639a:	d00f      	beq.n	80063bc <TIM_Base_SetConfig+0x40>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a45      	ldr	r2, [pc, #276]	@ (80064b4 <TIM_Base_SetConfig+0x138>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d00b      	beq.n	80063bc <TIM_Base_SetConfig+0x40>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a44      	ldr	r2, [pc, #272]	@ (80064b8 <TIM_Base_SetConfig+0x13c>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d007      	beq.n	80063bc <TIM_Base_SetConfig+0x40>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a43      	ldr	r2, [pc, #268]	@ (80064bc <TIM_Base_SetConfig+0x140>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d003      	beq.n	80063bc <TIM_Base_SetConfig+0x40>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a42      	ldr	r2, [pc, #264]	@ (80064c0 <TIM_Base_SetConfig+0x144>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d108      	bne.n	80063ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a37      	ldr	r2, [pc, #220]	@ (80064b0 <TIM_Base_SetConfig+0x134>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d01f      	beq.n	8006416 <TIM_Base_SetConfig+0x9a>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063dc:	d01b      	beq.n	8006416 <TIM_Base_SetConfig+0x9a>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a34      	ldr	r2, [pc, #208]	@ (80064b4 <TIM_Base_SetConfig+0x138>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d017      	beq.n	8006416 <TIM_Base_SetConfig+0x9a>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a33      	ldr	r2, [pc, #204]	@ (80064b8 <TIM_Base_SetConfig+0x13c>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d013      	beq.n	8006416 <TIM_Base_SetConfig+0x9a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a32      	ldr	r2, [pc, #200]	@ (80064bc <TIM_Base_SetConfig+0x140>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d00f      	beq.n	8006416 <TIM_Base_SetConfig+0x9a>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a32      	ldr	r2, [pc, #200]	@ (80064c4 <TIM_Base_SetConfig+0x148>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d00b      	beq.n	8006416 <TIM_Base_SetConfig+0x9a>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a31      	ldr	r2, [pc, #196]	@ (80064c8 <TIM_Base_SetConfig+0x14c>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d007      	beq.n	8006416 <TIM_Base_SetConfig+0x9a>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a30      	ldr	r2, [pc, #192]	@ (80064cc <TIM_Base_SetConfig+0x150>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d003      	beq.n	8006416 <TIM_Base_SetConfig+0x9a>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a2b      	ldr	r2, [pc, #172]	@ (80064c0 <TIM_Base_SetConfig+0x144>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d108      	bne.n	8006428 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800641c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	4313      	orrs	r3, r2
 8006426:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	4313      	orrs	r3, r2
 8006434:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	689a      	ldr	r2, [r3, #8]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a18      	ldr	r2, [pc, #96]	@ (80064b0 <TIM_Base_SetConfig+0x134>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d013      	beq.n	800647c <TIM_Base_SetConfig+0x100>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a19      	ldr	r2, [pc, #100]	@ (80064bc <TIM_Base_SetConfig+0x140>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d00f      	beq.n	800647c <TIM_Base_SetConfig+0x100>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a19      	ldr	r2, [pc, #100]	@ (80064c4 <TIM_Base_SetConfig+0x148>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d00b      	beq.n	800647c <TIM_Base_SetConfig+0x100>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a18      	ldr	r2, [pc, #96]	@ (80064c8 <TIM_Base_SetConfig+0x14c>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d007      	beq.n	800647c <TIM_Base_SetConfig+0x100>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a17      	ldr	r2, [pc, #92]	@ (80064cc <TIM_Base_SetConfig+0x150>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d003      	beq.n	800647c <TIM_Base_SetConfig+0x100>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a12      	ldr	r2, [pc, #72]	@ (80064c0 <TIM_Base_SetConfig+0x144>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d103      	bne.n	8006484 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	691a      	ldr	r2, [r3, #16]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b01      	cmp	r3, #1
 8006494:	d105      	bne.n	80064a2 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	f023 0201 	bic.w	r2, r3, #1
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	611a      	str	r2, [r3, #16]
  }
}
 80064a2:	bf00      	nop
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	40012c00 	.word	0x40012c00
 80064b4:	40000400 	.word	0x40000400
 80064b8:	40000800 	.word	0x40000800
 80064bc:	40013400 	.word	0x40013400
 80064c0:	40015000 	.word	0x40015000
 80064c4:	40014000 	.word	0x40014000
 80064c8:	40014400 	.word	0x40014400
 80064cc:	40014800 	.word	0x40014800

080064d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b087      	sub	sp, #28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a1b      	ldr	r3, [r3, #32]
 80064e4:	f023 0201 	bic.w	r2, r3, #1
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f023 0303 	bic.w	r3, r3, #3
 800650a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	4313      	orrs	r3, r2
 8006514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f023 0302 	bic.w	r3, r3, #2
 800651c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	4313      	orrs	r3, r2
 8006526:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a30      	ldr	r2, [pc, #192]	@ (80065ec <TIM_OC1_SetConfig+0x11c>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d013      	beq.n	8006558 <TIM_OC1_SetConfig+0x88>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a2f      	ldr	r2, [pc, #188]	@ (80065f0 <TIM_OC1_SetConfig+0x120>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d00f      	beq.n	8006558 <TIM_OC1_SetConfig+0x88>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a2e      	ldr	r2, [pc, #184]	@ (80065f4 <TIM_OC1_SetConfig+0x124>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d00b      	beq.n	8006558 <TIM_OC1_SetConfig+0x88>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a2d      	ldr	r2, [pc, #180]	@ (80065f8 <TIM_OC1_SetConfig+0x128>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d007      	beq.n	8006558 <TIM_OC1_SetConfig+0x88>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a2c      	ldr	r2, [pc, #176]	@ (80065fc <TIM_OC1_SetConfig+0x12c>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d003      	beq.n	8006558 <TIM_OC1_SetConfig+0x88>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a2b      	ldr	r2, [pc, #172]	@ (8006600 <TIM_OC1_SetConfig+0x130>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d10c      	bne.n	8006572 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f023 0308 	bic.w	r3, r3, #8
 800655e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	4313      	orrs	r3, r2
 8006568:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f023 0304 	bic.w	r3, r3, #4
 8006570:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a1d      	ldr	r2, [pc, #116]	@ (80065ec <TIM_OC1_SetConfig+0x11c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d013      	beq.n	80065a2 <TIM_OC1_SetConfig+0xd2>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a1c      	ldr	r2, [pc, #112]	@ (80065f0 <TIM_OC1_SetConfig+0x120>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d00f      	beq.n	80065a2 <TIM_OC1_SetConfig+0xd2>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a1b      	ldr	r2, [pc, #108]	@ (80065f4 <TIM_OC1_SetConfig+0x124>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d00b      	beq.n	80065a2 <TIM_OC1_SetConfig+0xd2>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a1a      	ldr	r2, [pc, #104]	@ (80065f8 <TIM_OC1_SetConfig+0x128>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d007      	beq.n	80065a2 <TIM_OC1_SetConfig+0xd2>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a19      	ldr	r2, [pc, #100]	@ (80065fc <TIM_OC1_SetConfig+0x12c>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d003      	beq.n	80065a2 <TIM_OC1_SetConfig+0xd2>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a18      	ldr	r2, [pc, #96]	@ (8006600 <TIM_OC1_SetConfig+0x130>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d111      	bne.n	80065c6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	685a      	ldr	r2, [r3, #4]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	621a      	str	r2, [r3, #32]
}
 80065e0:	bf00      	nop
 80065e2:	371c      	adds	r7, #28
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr
 80065ec:	40012c00 	.word	0x40012c00
 80065f0:	40013400 	.word	0x40013400
 80065f4:	40014000 	.word	0x40014000
 80065f8:	40014400 	.word	0x40014400
 80065fc:	40014800 	.word	0x40014800
 8006600:	40015000 	.word	0x40015000

08006604 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006604:	b480      	push	{r7}
 8006606:	b087      	sub	sp, #28
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	f023 0210 	bic.w	r2, r3, #16
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006632:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800663e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	021b      	lsls	r3, r3, #8
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	4313      	orrs	r3, r2
 800664a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	f023 0320 	bic.w	r3, r3, #32
 8006652:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	011b      	lsls	r3, r3, #4
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	4313      	orrs	r3, r2
 800665e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a2c      	ldr	r2, [pc, #176]	@ (8006714 <TIM_OC2_SetConfig+0x110>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d007      	beq.n	8006678 <TIM_OC2_SetConfig+0x74>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a2b      	ldr	r2, [pc, #172]	@ (8006718 <TIM_OC2_SetConfig+0x114>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d003      	beq.n	8006678 <TIM_OC2_SetConfig+0x74>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a2a      	ldr	r2, [pc, #168]	@ (800671c <TIM_OC2_SetConfig+0x118>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d10d      	bne.n	8006694 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800667e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	011b      	lsls	r3, r3, #4
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	4313      	orrs	r3, r2
 800668a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006692:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a1f      	ldr	r2, [pc, #124]	@ (8006714 <TIM_OC2_SetConfig+0x110>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d013      	beq.n	80066c4 <TIM_OC2_SetConfig+0xc0>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a1e      	ldr	r2, [pc, #120]	@ (8006718 <TIM_OC2_SetConfig+0x114>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d00f      	beq.n	80066c4 <TIM_OC2_SetConfig+0xc0>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a1e      	ldr	r2, [pc, #120]	@ (8006720 <TIM_OC2_SetConfig+0x11c>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d00b      	beq.n	80066c4 <TIM_OC2_SetConfig+0xc0>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a1d      	ldr	r2, [pc, #116]	@ (8006724 <TIM_OC2_SetConfig+0x120>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d007      	beq.n	80066c4 <TIM_OC2_SetConfig+0xc0>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a1c      	ldr	r2, [pc, #112]	@ (8006728 <TIM_OC2_SetConfig+0x124>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d003      	beq.n	80066c4 <TIM_OC2_SetConfig+0xc0>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a17      	ldr	r2, [pc, #92]	@ (800671c <TIM_OC2_SetConfig+0x118>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d113      	bne.n	80066ec <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066ca:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066d2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	4313      	orrs	r3, r2
 80066de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	621a      	str	r2, [r3, #32]
}
 8006706:	bf00      	nop
 8006708:	371c      	adds	r7, #28
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	40012c00 	.word	0x40012c00
 8006718:	40013400 	.word	0x40013400
 800671c:	40015000 	.word	0x40015000
 8006720:	40014000 	.word	0x40014000
 8006724:	40014400 	.word	0x40014400
 8006728:	40014800 	.word	0x40014800

0800672c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800672c:	b480      	push	{r7}
 800672e:	b087      	sub	sp, #28
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800675a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800675e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f023 0303 	bic.w	r3, r3, #3
 8006766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	4313      	orrs	r3, r2
 8006770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	021b      	lsls	r3, r3, #8
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	4313      	orrs	r3, r2
 8006784:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a2b      	ldr	r2, [pc, #172]	@ (8006838 <TIM_OC3_SetConfig+0x10c>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d007      	beq.n	800679e <TIM_OC3_SetConfig+0x72>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a2a      	ldr	r2, [pc, #168]	@ (800683c <TIM_OC3_SetConfig+0x110>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d003      	beq.n	800679e <TIM_OC3_SetConfig+0x72>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a29      	ldr	r2, [pc, #164]	@ (8006840 <TIM_OC3_SetConfig+0x114>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d10d      	bne.n	80067ba <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	021b      	lsls	r3, r3, #8
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067b8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a1e      	ldr	r2, [pc, #120]	@ (8006838 <TIM_OC3_SetConfig+0x10c>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d013      	beq.n	80067ea <TIM_OC3_SetConfig+0xbe>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a1d      	ldr	r2, [pc, #116]	@ (800683c <TIM_OC3_SetConfig+0x110>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d00f      	beq.n	80067ea <TIM_OC3_SetConfig+0xbe>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006844 <TIM_OC3_SetConfig+0x118>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d00b      	beq.n	80067ea <TIM_OC3_SetConfig+0xbe>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a1c      	ldr	r2, [pc, #112]	@ (8006848 <TIM_OC3_SetConfig+0x11c>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d007      	beq.n	80067ea <TIM_OC3_SetConfig+0xbe>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a1b      	ldr	r2, [pc, #108]	@ (800684c <TIM_OC3_SetConfig+0x120>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d003      	beq.n	80067ea <TIM_OC3_SetConfig+0xbe>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a16      	ldr	r2, [pc, #88]	@ (8006840 <TIM_OC3_SetConfig+0x114>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d113      	bne.n	8006812 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	011b      	lsls	r3, r3, #4
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	4313      	orrs	r3, r2
 8006804:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	011b      	lsls	r3, r3, #4
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	4313      	orrs	r3, r2
 8006810:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	621a      	str	r2, [r3, #32]
}
 800682c:	bf00      	nop
 800682e:	371c      	adds	r7, #28
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr
 8006838:	40012c00 	.word	0x40012c00
 800683c:	40013400 	.word	0x40013400
 8006840:	40015000 	.word	0x40015000
 8006844:	40014000 	.word	0x40014000
 8006848:	40014400 	.word	0x40014400
 800684c:	40014800 	.word	0x40014800

08006850 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006850:	b480      	push	{r7}
 8006852:	b087      	sub	sp, #28
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a1b      	ldr	r3, [r3, #32]
 8006864:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800687e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800688a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	021b      	lsls	r3, r3, #8
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	4313      	orrs	r3, r2
 8006896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800689e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	031b      	lsls	r3, r3, #12
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a1a      	ldr	r2, [pc, #104]	@ (8006918 <TIM_OC4_SetConfig+0xc8>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d013      	beq.n	80068dc <TIM_OC4_SetConfig+0x8c>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a19      	ldr	r2, [pc, #100]	@ (800691c <TIM_OC4_SetConfig+0xcc>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d00f      	beq.n	80068dc <TIM_OC4_SetConfig+0x8c>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a18      	ldr	r2, [pc, #96]	@ (8006920 <TIM_OC4_SetConfig+0xd0>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d00b      	beq.n	80068dc <TIM_OC4_SetConfig+0x8c>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a17      	ldr	r2, [pc, #92]	@ (8006924 <TIM_OC4_SetConfig+0xd4>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d007      	beq.n	80068dc <TIM_OC4_SetConfig+0x8c>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a16      	ldr	r2, [pc, #88]	@ (8006928 <TIM_OC4_SetConfig+0xd8>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d003      	beq.n	80068dc <TIM_OC4_SetConfig+0x8c>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a15      	ldr	r2, [pc, #84]	@ (800692c <TIM_OC4_SetConfig+0xdc>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d109      	bne.n	80068f0 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	019b      	lsls	r3, r3, #6
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	621a      	str	r2, [r3, #32]
}
 800690a:	bf00      	nop
 800690c:	371c      	adds	r7, #28
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	40012c00 	.word	0x40012c00
 800691c:	40013400 	.word	0x40013400
 8006920:	40014000 	.word	0x40014000
 8006924:	40014400 	.word	0x40014400
 8006928:	40014800 	.word	0x40014800
 800692c:	40015000 	.word	0x40015000

08006930 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006930:	b480      	push	{r7}
 8006932:	b087      	sub	sp, #28
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a1b      	ldr	r3, [r3, #32]
 8006944:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800695e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	4313      	orrs	r3, r2
 800696c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006974:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	041b      	lsls	r3, r3, #16
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	4313      	orrs	r3, r2
 8006980:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a19      	ldr	r2, [pc, #100]	@ (80069ec <TIM_OC5_SetConfig+0xbc>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d013      	beq.n	80069b2 <TIM_OC5_SetConfig+0x82>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a18      	ldr	r2, [pc, #96]	@ (80069f0 <TIM_OC5_SetConfig+0xc0>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d00f      	beq.n	80069b2 <TIM_OC5_SetConfig+0x82>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a17      	ldr	r2, [pc, #92]	@ (80069f4 <TIM_OC5_SetConfig+0xc4>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d00b      	beq.n	80069b2 <TIM_OC5_SetConfig+0x82>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a16      	ldr	r2, [pc, #88]	@ (80069f8 <TIM_OC5_SetConfig+0xc8>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d007      	beq.n	80069b2 <TIM_OC5_SetConfig+0x82>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a15      	ldr	r2, [pc, #84]	@ (80069fc <TIM_OC5_SetConfig+0xcc>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d003      	beq.n	80069b2 <TIM_OC5_SetConfig+0x82>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a14      	ldr	r2, [pc, #80]	@ (8006a00 <TIM_OC5_SetConfig+0xd0>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d109      	bne.n	80069c6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	021b      	lsls	r3, r3, #8
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	685a      	ldr	r2, [r3, #4]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	621a      	str	r2, [r3, #32]
}
 80069e0:	bf00      	nop
 80069e2:	371c      	adds	r7, #28
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	40012c00 	.word	0x40012c00
 80069f0:	40013400 	.word	0x40013400
 80069f4:	40014000 	.word	0x40014000
 80069f8:	40014400 	.word	0x40014400
 80069fc:	40014800 	.word	0x40014800
 8006a00:	40015000 	.word	0x40015000

08006a04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b087      	sub	sp, #28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a1b      	ldr	r3, [r3, #32]
 8006a18:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	021b      	lsls	r3, r3, #8
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	051b      	lsls	r3, r3, #20
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a1a      	ldr	r2, [pc, #104]	@ (8006ac4 <TIM_OC6_SetConfig+0xc0>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d013      	beq.n	8006a88 <TIM_OC6_SetConfig+0x84>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a19      	ldr	r2, [pc, #100]	@ (8006ac8 <TIM_OC6_SetConfig+0xc4>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d00f      	beq.n	8006a88 <TIM_OC6_SetConfig+0x84>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a18      	ldr	r2, [pc, #96]	@ (8006acc <TIM_OC6_SetConfig+0xc8>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d00b      	beq.n	8006a88 <TIM_OC6_SetConfig+0x84>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a17      	ldr	r2, [pc, #92]	@ (8006ad0 <TIM_OC6_SetConfig+0xcc>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d007      	beq.n	8006a88 <TIM_OC6_SetConfig+0x84>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a16      	ldr	r2, [pc, #88]	@ (8006ad4 <TIM_OC6_SetConfig+0xd0>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d003      	beq.n	8006a88 <TIM_OC6_SetConfig+0x84>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a15      	ldr	r2, [pc, #84]	@ (8006ad8 <TIM_OC6_SetConfig+0xd4>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d109      	bne.n	8006a9c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	695b      	ldr	r3, [r3, #20]
 8006a94:	029b      	lsls	r3, r3, #10
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	685a      	ldr	r2, [r3, #4]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	621a      	str	r2, [r3, #32]
}
 8006ab6:	bf00      	nop
 8006ab8:	371c      	adds	r7, #28
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	40012c00 	.word	0x40012c00
 8006ac8:	40013400 	.word	0x40013400
 8006acc:	40014000 	.word	0x40014000
 8006ad0:	40014400 	.word	0x40014400
 8006ad4:	40014800 	.word	0x40014800
 8006ad8:	40015000 	.word	0x40015000

08006adc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b087      	sub	sp, #28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	f003 031f 	and.w	r3, r3, #31
 8006aee:	2201      	movs	r2, #1
 8006af0:	fa02 f303 	lsl.w	r3, r2, r3
 8006af4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6a1a      	ldr	r2, [r3, #32]
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	43db      	mvns	r3, r3
 8006afe:	401a      	ands	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6a1a      	ldr	r2, [r3, #32]
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	f003 031f 	and.w	r3, r3, #31
 8006b0e:	6879      	ldr	r1, [r7, #4]
 8006b10:	fa01 f303 	lsl.w	r3, r1, r3
 8006b14:	431a      	orrs	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	621a      	str	r2, [r3, #32]
}
 8006b1a:	bf00      	nop
 8006b1c:	371c      	adds	r7, #28
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
	...

08006b28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d101      	bne.n	8006b40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	e06d      	b.n	8006c1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a30      	ldr	r2, [pc, #192]	@ (8006c28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d009      	beq.n	8006b7e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a2f      	ldr	r2, [pc, #188]	@ (8006c2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d004      	beq.n	8006b7e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a2d      	ldr	r2, [pc, #180]	@ (8006c30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d108      	bne.n	8006b90 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006b84:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a1e      	ldr	r2, [pc, #120]	@ (8006c28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d01d      	beq.n	8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bbc:	d018      	beq.n	8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a1c      	ldr	r2, [pc, #112]	@ (8006c34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d013      	beq.n	8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a1a      	ldr	r2, [pc, #104]	@ (8006c38 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d00e      	beq.n	8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a15      	ldr	r2, [pc, #84]	@ (8006c2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d009      	beq.n	8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a16      	ldr	r2, [pc, #88]	@ (8006c3c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d004      	beq.n	8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a11      	ldr	r2, [pc, #68]	@ (8006c30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d10c      	bne.n	8006c0a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bf6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68ba      	ldr	r2, [r7, #8]
 8006c08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3714      	adds	r7, #20
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	40012c00 	.word	0x40012c00
 8006c2c:	40013400 	.word	0x40013400
 8006c30:	40015000 	.word	0x40015000
 8006c34:	40000400 	.word	0x40000400
 8006c38:	40000800 	.word	0x40000800
 8006c3c:	40014000 	.word	0x40014000

08006c40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e040      	b.n	8006d10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d106      	bne.n	8006ca4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7fb f8d0 	bl	8001e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2224      	movs	r2, #36	@ 0x24
 8006ca8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f022 0201 	bic.w	r2, r2, #1
 8006cb8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d002      	beq.n	8006cc8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fa86 	bl	80071d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f8af 	bl	8006e2c <UART_SetConfig>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d101      	bne.n	8006cd8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e01b      	b.n	8006d10 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	685a      	ldr	r2, [r3, #4]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ce6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	689a      	ldr	r2, [r3, #8]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006cf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f042 0201 	orr.w	r2, r2, #1
 8006d06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 fb05 	bl	8007318 <UART_CheckIdleState>
 8006d0e:	4603      	mov	r3, r0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b08a      	sub	sp, #40	@ 0x28
 8006d1c:	af02      	add	r7, sp, #8
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	603b      	str	r3, [r7, #0]
 8006d24:	4613      	mov	r3, r2
 8006d26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d2c:	2b20      	cmp	r3, #32
 8006d2e:	d177      	bne.n	8006e20 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d002      	beq.n	8006d3c <HAL_UART_Transmit+0x24>
 8006d36:	88fb      	ldrh	r3, [r7, #6]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d101      	bne.n	8006d40 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e070      	b.n	8006e22 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2221      	movs	r2, #33	@ 0x21
 8006d4c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d4e:	f7fb f90f 	bl	8001f70 <HAL_GetTick>
 8006d52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	88fa      	ldrh	r2, [r7, #6]
 8006d58:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	88fa      	ldrh	r2, [r7, #6]
 8006d60:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d6c:	d108      	bne.n	8006d80 <HAL_UART_Transmit+0x68>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d104      	bne.n	8006d80 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006d76:	2300      	movs	r3, #0
 8006d78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	61bb      	str	r3, [r7, #24]
 8006d7e:	e003      	b.n	8006d88 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d84:	2300      	movs	r3, #0
 8006d86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d88:	e02f      	b.n	8006dea <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	2200      	movs	r2, #0
 8006d92:	2180      	movs	r1, #128	@ 0x80
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f000 fb67 	bl	8007468 <UART_WaitOnFlagUntilTimeout>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d004      	beq.n	8006daa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2220      	movs	r2, #32
 8006da4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e03b      	b.n	8006e22 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d10b      	bne.n	8006dc8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	881a      	ldrh	r2, [r3, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dbc:	b292      	uxth	r2, r2
 8006dbe:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	3302      	adds	r3, #2
 8006dc4:	61bb      	str	r3, [r7, #24]
 8006dc6:	e007      	b.n	8006dd8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	781a      	ldrb	r2, [r3, #0]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	3b01      	subs	r3, #1
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1c9      	bne.n	8006d8a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	2140      	movs	r1, #64	@ 0x40
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f000 fb31 	bl	8007468 <UART_WaitOnFlagUntilTimeout>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d004      	beq.n	8006e16 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e005      	b.n	8006e22 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2220      	movs	r2, #32
 8006e1a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	e000      	b.n	8006e22 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006e20:	2302      	movs	r3, #2
  }
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3720      	adds	r7, #32
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
	...

08006e2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b088      	sub	sp, #32
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e34:	2300      	movs	r3, #0
 8006e36:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	689a      	ldr	r2, [r3, #8]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	431a      	orrs	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	431a      	orrs	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	69db      	ldr	r3, [r3, #28]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	4b92      	ldr	r3, [pc, #584]	@ (80070a0 <UART_SetConfig+0x274>)
 8006e58:	4013      	ands	r3, r2
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	6812      	ldr	r2, [r2, #0]
 8006e5e:	6979      	ldr	r1, [r7, #20]
 8006e60:	430b      	orrs	r3, r1
 8006e62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68da      	ldr	r2, [r3, #12]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	430a      	orrs	r2, r1
 8006e78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a1b      	ldr	r3, [r3, #32]
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a80      	ldr	r2, [pc, #512]	@ (80070a4 <UART_SetConfig+0x278>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d120      	bne.n	8006eea <UART_SetConfig+0xbe>
 8006ea8:	4b7f      	ldr	r3, [pc, #508]	@ (80070a8 <UART_SetConfig+0x27c>)
 8006eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eac:	f003 0303 	and.w	r3, r3, #3
 8006eb0:	2b03      	cmp	r3, #3
 8006eb2:	d817      	bhi.n	8006ee4 <UART_SetConfig+0xb8>
 8006eb4:	a201      	add	r2, pc, #4	@ (adr r2, 8006ebc <UART_SetConfig+0x90>)
 8006eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eba:	bf00      	nop
 8006ebc:	08006ecd 	.word	0x08006ecd
 8006ec0:	08006ed9 	.word	0x08006ed9
 8006ec4:	08006edf 	.word	0x08006edf
 8006ec8:	08006ed3 	.word	0x08006ed3
 8006ecc:	2301      	movs	r3, #1
 8006ece:	77fb      	strb	r3, [r7, #31]
 8006ed0:	e0b5      	b.n	800703e <UART_SetConfig+0x212>
 8006ed2:	2302      	movs	r3, #2
 8006ed4:	77fb      	strb	r3, [r7, #31]
 8006ed6:	e0b2      	b.n	800703e <UART_SetConfig+0x212>
 8006ed8:	2304      	movs	r3, #4
 8006eda:	77fb      	strb	r3, [r7, #31]
 8006edc:	e0af      	b.n	800703e <UART_SetConfig+0x212>
 8006ede:	2308      	movs	r3, #8
 8006ee0:	77fb      	strb	r3, [r7, #31]
 8006ee2:	e0ac      	b.n	800703e <UART_SetConfig+0x212>
 8006ee4:	2310      	movs	r3, #16
 8006ee6:	77fb      	strb	r3, [r7, #31]
 8006ee8:	e0a9      	b.n	800703e <UART_SetConfig+0x212>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a6f      	ldr	r2, [pc, #444]	@ (80070ac <UART_SetConfig+0x280>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d124      	bne.n	8006f3e <UART_SetConfig+0x112>
 8006ef4:	4b6c      	ldr	r3, [pc, #432]	@ (80070a8 <UART_SetConfig+0x27c>)
 8006ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ef8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006efc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f00:	d011      	beq.n	8006f26 <UART_SetConfig+0xfa>
 8006f02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f06:	d817      	bhi.n	8006f38 <UART_SetConfig+0x10c>
 8006f08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f0c:	d011      	beq.n	8006f32 <UART_SetConfig+0x106>
 8006f0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f12:	d811      	bhi.n	8006f38 <UART_SetConfig+0x10c>
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d003      	beq.n	8006f20 <UART_SetConfig+0xf4>
 8006f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f1c:	d006      	beq.n	8006f2c <UART_SetConfig+0x100>
 8006f1e:	e00b      	b.n	8006f38 <UART_SetConfig+0x10c>
 8006f20:	2300      	movs	r3, #0
 8006f22:	77fb      	strb	r3, [r7, #31]
 8006f24:	e08b      	b.n	800703e <UART_SetConfig+0x212>
 8006f26:	2302      	movs	r3, #2
 8006f28:	77fb      	strb	r3, [r7, #31]
 8006f2a:	e088      	b.n	800703e <UART_SetConfig+0x212>
 8006f2c:	2304      	movs	r3, #4
 8006f2e:	77fb      	strb	r3, [r7, #31]
 8006f30:	e085      	b.n	800703e <UART_SetConfig+0x212>
 8006f32:	2308      	movs	r3, #8
 8006f34:	77fb      	strb	r3, [r7, #31]
 8006f36:	e082      	b.n	800703e <UART_SetConfig+0x212>
 8006f38:	2310      	movs	r3, #16
 8006f3a:	77fb      	strb	r3, [r7, #31]
 8006f3c:	e07f      	b.n	800703e <UART_SetConfig+0x212>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a5b      	ldr	r2, [pc, #364]	@ (80070b0 <UART_SetConfig+0x284>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d124      	bne.n	8006f92 <UART_SetConfig+0x166>
 8006f48:	4b57      	ldr	r3, [pc, #348]	@ (80070a8 <UART_SetConfig+0x27c>)
 8006f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f4c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006f50:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006f54:	d011      	beq.n	8006f7a <UART_SetConfig+0x14e>
 8006f56:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006f5a:	d817      	bhi.n	8006f8c <UART_SetConfig+0x160>
 8006f5c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006f60:	d011      	beq.n	8006f86 <UART_SetConfig+0x15a>
 8006f62:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006f66:	d811      	bhi.n	8006f8c <UART_SetConfig+0x160>
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d003      	beq.n	8006f74 <UART_SetConfig+0x148>
 8006f6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f70:	d006      	beq.n	8006f80 <UART_SetConfig+0x154>
 8006f72:	e00b      	b.n	8006f8c <UART_SetConfig+0x160>
 8006f74:	2300      	movs	r3, #0
 8006f76:	77fb      	strb	r3, [r7, #31]
 8006f78:	e061      	b.n	800703e <UART_SetConfig+0x212>
 8006f7a:	2302      	movs	r3, #2
 8006f7c:	77fb      	strb	r3, [r7, #31]
 8006f7e:	e05e      	b.n	800703e <UART_SetConfig+0x212>
 8006f80:	2304      	movs	r3, #4
 8006f82:	77fb      	strb	r3, [r7, #31]
 8006f84:	e05b      	b.n	800703e <UART_SetConfig+0x212>
 8006f86:	2308      	movs	r3, #8
 8006f88:	77fb      	strb	r3, [r7, #31]
 8006f8a:	e058      	b.n	800703e <UART_SetConfig+0x212>
 8006f8c:	2310      	movs	r3, #16
 8006f8e:	77fb      	strb	r3, [r7, #31]
 8006f90:	e055      	b.n	800703e <UART_SetConfig+0x212>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a47      	ldr	r2, [pc, #284]	@ (80070b4 <UART_SetConfig+0x288>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d124      	bne.n	8006fe6 <UART_SetConfig+0x1ba>
 8006f9c:	4b42      	ldr	r3, [pc, #264]	@ (80070a8 <UART_SetConfig+0x27c>)
 8006f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fa0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006fa4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006fa8:	d011      	beq.n	8006fce <UART_SetConfig+0x1a2>
 8006faa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006fae:	d817      	bhi.n	8006fe0 <UART_SetConfig+0x1b4>
 8006fb0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fb4:	d011      	beq.n	8006fda <UART_SetConfig+0x1ae>
 8006fb6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fba:	d811      	bhi.n	8006fe0 <UART_SetConfig+0x1b4>
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d003      	beq.n	8006fc8 <UART_SetConfig+0x19c>
 8006fc0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fc4:	d006      	beq.n	8006fd4 <UART_SetConfig+0x1a8>
 8006fc6:	e00b      	b.n	8006fe0 <UART_SetConfig+0x1b4>
 8006fc8:	2300      	movs	r3, #0
 8006fca:	77fb      	strb	r3, [r7, #31]
 8006fcc:	e037      	b.n	800703e <UART_SetConfig+0x212>
 8006fce:	2302      	movs	r3, #2
 8006fd0:	77fb      	strb	r3, [r7, #31]
 8006fd2:	e034      	b.n	800703e <UART_SetConfig+0x212>
 8006fd4:	2304      	movs	r3, #4
 8006fd6:	77fb      	strb	r3, [r7, #31]
 8006fd8:	e031      	b.n	800703e <UART_SetConfig+0x212>
 8006fda:	2308      	movs	r3, #8
 8006fdc:	77fb      	strb	r3, [r7, #31]
 8006fde:	e02e      	b.n	800703e <UART_SetConfig+0x212>
 8006fe0:	2310      	movs	r3, #16
 8006fe2:	77fb      	strb	r3, [r7, #31]
 8006fe4:	e02b      	b.n	800703e <UART_SetConfig+0x212>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a33      	ldr	r2, [pc, #204]	@ (80070b8 <UART_SetConfig+0x28c>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d124      	bne.n	800703a <UART_SetConfig+0x20e>
 8006ff0:	4b2d      	ldr	r3, [pc, #180]	@ (80070a8 <UART_SetConfig+0x27c>)
 8006ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ff4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8006ff8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006ffc:	d011      	beq.n	8007022 <UART_SetConfig+0x1f6>
 8006ffe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007002:	d817      	bhi.n	8007034 <UART_SetConfig+0x208>
 8007004:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007008:	d011      	beq.n	800702e <UART_SetConfig+0x202>
 800700a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800700e:	d811      	bhi.n	8007034 <UART_SetConfig+0x208>
 8007010:	2b00      	cmp	r3, #0
 8007012:	d003      	beq.n	800701c <UART_SetConfig+0x1f0>
 8007014:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007018:	d006      	beq.n	8007028 <UART_SetConfig+0x1fc>
 800701a:	e00b      	b.n	8007034 <UART_SetConfig+0x208>
 800701c:	2300      	movs	r3, #0
 800701e:	77fb      	strb	r3, [r7, #31]
 8007020:	e00d      	b.n	800703e <UART_SetConfig+0x212>
 8007022:	2302      	movs	r3, #2
 8007024:	77fb      	strb	r3, [r7, #31]
 8007026:	e00a      	b.n	800703e <UART_SetConfig+0x212>
 8007028:	2304      	movs	r3, #4
 800702a:	77fb      	strb	r3, [r7, #31]
 800702c:	e007      	b.n	800703e <UART_SetConfig+0x212>
 800702e:	2308      	movs	r3, #8
 8007030:	77fb      	strb	r3, [r7, #31]
 8007032:	e004      	b.n	800703e <UART_SetConfig+0x212>
 8007034:	2310      	movs	r3, #16
 8007036:	77fb      	strb	r3, [r7, #31]
 8007038:	e001      	b.n	800703e <UART_SetConfig+0x212>
 800703a:	2310      	movs	r3, #16
 800703c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007046:	d16b      	bne.n	8007120 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8007048:	7ffb      	ldrb	r3, [r7, #31]
 800704a:	2b08      	cmp	r3, #8
 800704c:	d838      	bhi.n	80070c0 <UART_SetConfig+0x294>
 800704e:	a201      	add	r2, pc, #4	@ (adr r2, 8007054 <UART_SetConfig+0x228>)
 8007050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007054:	08007079 	.word	0x08007079
 8007058:	08007081 	.word	0x08007081
 800705c:	08007089 	.word	0x08007089
 8007060:	080070c1 	.word	0x080070c1
 8007064:	0800708f 	.word	0x0800708f
 8007068:	080070c1 	.word	0x080070c1
 800706c:	080070c1 	.word	0x080070c1
 8007070:	080070c1 	.word	0x080070c1
 8007074:	08007097 	.word	0x08007097
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007078:	f7fe fa78 	bl	800556c <HAL_RCC_GetPCLK1Freq>
 800707c:	61b8      	str	r0, [r7, #24]
        break;
 800707e:	e024      	b.n	80070ca <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007080:	f7fe fa96 	bl	80055b0 <HAL_RCC_GetPCLK2Freq>
 8007084:	61b8      	str	r0, [r7, #24]
        break;
 8007086:	e020      	b.n	80070ca <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007088:	4b0c      	ldr	r3, [pc, #48]	@ (80070bc <UART_SetConfig+0x290>)
 800708a:	61bb      	str	r3, [r7, #24]
        break;
 800708c:	e01d      	b.n	80070ca <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800708e:	f7fe fa0d 	bl	80054ac <HAL_RCC_GetSysClockFreq>
 8007092:	61b8      	str	r0, [r7, #24]
        break;
 8007094:	e019      	b.n	80070ca <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007096:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800709a:	61bb      	str	r3, [r7, #24]
        break;
 800709c:	e015      	b.n	80070ca <UART_SetConfig+0x29e>
 800709e:	bf00      	nop
 80070a0:	efff69f3 	.word	0xefff69f3
 80070a4:	40013800 	.word	0x40013800
 80070a8:	40021000 	.word	0x40021000
 80070ac:	40004400 	.word	0x40004400
 80070b0:	40004800 	.word	0x40004800
 80070b4:	40004c00 	.word	0x40004c00
 80070b8:	40005000 	.word	0x40005000
 80070bc:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80070c0:	2300      	movs	r3, #0
 80070c2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	77bb      	strb	r3, [r7, #30]
        break;
 80070c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d073      	beq.n	80071b8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	005a      	lsls	r2, r3, #1
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	085b      	lsrs	r3, r3, #1
 80070da:	441a      	add	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	2b0f      	cmp	r3, #15
 80070ea:	d916      	bls.n	800711a <UART_SetConfig+0x2ee>
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070f2:	d212      	bcs.n	800711a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	f023 030f 	bic.w	r3, r3, #15
 80070fc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	085b      	lsrs	r3, r3, #1
 8007102:	b29b      	uxth	r3, r3
 8007104:	f003 0307 	and.w	r3, r3, #7
 8007108:	b29a      	uxth	r2, r3
 800710a:	89fb      	ldrh	r3, [r7, #14]
 800710c:	4313      	orrs	r3, r2
 800710e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	89fa      	ldrh	r2, [r7, #14]
 8007116:	60da      	str	r2, [r3, #12]
 8007118:	e04e      	b.n	80071b8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	77bb      	strb	r3, [r7, #30]
 800711e:	e04b      	b.n	80071b8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007120:	7ffb      	ldrb	r3, [r7, #31]
 8007122:	2b08      	cmp	r3, #8
 8007124:	d827      	bhi.n	8007176 <UART_SetConfig+0x34a>
 8007126:	a201      	add	r2, pc, #4	@ (adr r2, 800712c <UART_SetConfig+0x300>)
 8007128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712c:	08007151 	.word	0x08007151
 8007130:	08007159 	.word	0x08007159
 8007134:	08007161 	.word	0x08007161
 8007138:	08007177 	.word	0x08007177
 800713c:	08007167 	.word	0x08007167
 8007140:	08007177 	.word	0x08007177
 8007144:	08007177 	.word	0x08007177
 8007148:	08007177 	.word	0x08007177
 800714c:	0800716f 	.word	0x0800716f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007150:	f7fe fa0c 	bl	800556c <HAL_RCC_GetPCLK1Freq>
 8007154:	61b8      	str	r0, [r7, #24]
        break;
 8007156:	e013      	b.n	8007180 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007158:	f7fe fa2a 	bl	80055b0 <HAL_RCC_GetPCLK2Freq>
 800715c:	61b8      	str	r0, [r7, #24]
        break;
 800715e:	e00f      	b.n	8007180 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007160:	4b1b      	ldr	r3, [pc, #108]	@ (80071d0 <UART_SetConfig+0x3a4>)
 8007162:	61bb      	str	r3, [r7, #24]
        break;
 8007164:	e00c      	b.n	8007180 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007166:	f7fe f9a1 	bl	80054ac <HAL_RCC_GetSysClockFreq>
 800716a:	61b8      	str	r0, [r7, #24]
        break;
 800716c:	e008      	b.n	8007180 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800716e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007172:	61bb      	str	r3, [r7, #24]
        break;
 8007174:	e004      	b.n	8007180 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8007176:	2300      	movs	r3, #0
 8007178:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	77bb      	strb	r3, [r7, #30]
        break;
 800717e:	bf00      	nop
    }

    if (pclk != 0U)
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d018      	beq.n	80071b8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	085a      	lsrs	r2, r3, #1
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	441a      	add	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	fbb2 f3f3 	udiv	r3, r2, r3
 8007198:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	2b0f      	cmp	r3, #15
 800719e:	d909      	bls.n	80071b4 <UART_SetConfig+0x388>
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071a6:	d205      	bcs.n	80071b4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	60da      	str	r2, [r3, #12]
 80071b2:	e001      	b.n	80071b8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80071c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3720      	adds	r7, #32
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	007a1200 	.word	0x007a1200

080071d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071e0:	f003 0308 	and.w	r3, r3, #8
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00a      	beq.n	80071fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	430a      	orrs	r2, r1
 80071fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00a      	beq.n	8007220 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	430a      	orrs	r2, r1
 800721e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007224:	f003 0302 	and.w	r3, r3, #2
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00a      	beq.n	8007242 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007246:	f003 0304 	and.w	r3, r3, #4
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00a      	beq.n	8007264 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	430a      	orrs	r2, r1
 8007262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007268:	f003 0310 	and.w	r3, r3, #16
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00a      	beq.n	8007286 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	430a      	orrs	r2, r1
 8007284:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800728a:	f003 0320 	and.w	r3, r3, #32
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00a      	beq.n	80072a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	430a      	orrs	r2, r1
 80072a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d01a      	beq.n	80072ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	430a      	orrs	r2, r1
 80072c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072d2:	d10a      	bne.n	80072ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	430a      	orrs	r2, r1
 80072e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00a      	beq.n	800730c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	430a      	orrs	r2, r1
 800730a:	605a      	str	r2, [r3, #4]
  }
}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b098      	sub	sp, #96	@ 0x60
 800731c:	af02      	add	r7, sp, #8
 800731e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007328:	f7fa fe22 	bl	8001f70 <HAL_GetTick>
 800732c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0308 	and.w	r3, r3, #8
 8007338:	2b08      	cmp	r3, #8
 800733a:	d12e      	bne.n	800739a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800733c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007340:	9300      	str	r3, [sp, #0]
 8007342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007344:	2200      	movs	r2, #0
 8007346:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f88c 	bl	8007468 <UART_WaitOnFlagUntilTimeout>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d021      	beq.n	800739a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800735e:	e853 3f00 	ldrex	r3, [r3]
 8007362:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007366:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800736a:	653b      	str	r3, [r7, #80]	@ 0x50
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	461a      	mov	r2, r3
 8007372:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007374:	647b      	str	r3, [r7, #68]	@ 0x44
 8007376:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007378:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800737a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800737c:	e841 2300 	strex	r3, r2, [r1]
 8007380:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1e6      	bne.n	8007356 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2220      	movs	r2, #32
 800738c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e062      	b.n	8007460 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0304 	and.w	r3, r3, #4
 80073a4:	2b04      	cmp	r3, #4
 80073a6:	d149      	bne.n	800743c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80073ac:	9300      	str	r3, [sp, #0]
 80073ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073b0:	2200      	movs	r2, #0
 80073b2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f856 	bl	8007468 <UART_WaitOnFlagUntilTimeout>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d03c      	beq.n	800743c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ca:	e853 3f00 	ldrex	r3, [r3]
 80073ce:	623b      	str	r3, [r7, #32]
   return(result);
 80073d0:	6a3b      	ldr	r3, [r7, #32]
 80073d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	461a      	mov	r2, r3
 80073de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80073e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073e8:	e841 2300 	strex	r3, r2, [r1]
 80073ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1e6      	bne.n	80073c2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	3308      	adds	r3, #8
 80073fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	e853 3f00 	ldrex	r3, [r3]
 8007402:	60fb      	str	r3, [r7, #12]
   return(result);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f023 0301 	bic.w	r3, r3, #1
 800740a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	3308      	adds	r3, #8
 8007412:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007414:	61fa      	str	r2, [r7, #28]
 8007416:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007418:	69b9      	ldr	r1, [r7, #24]
 800741a:	69fa      	ldr	r2, [r7, #28]
 800741c:	e841 2300 	strex	r3, r2, [r1]
 8007420:	617b      	str	r3, [r7, #20]
   return(result);
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1e5      	bne.n	80073f4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2220      	movs	r2, #32
 800742c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e011      	b.n	8007460 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2220      	movs	r2, #32
 8007440:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2220      	movs	r2, #32
 8007446:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3758      	adds	r7, #88	@ 0x58
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	603b      	str	r3, [r7, #0]
 8007474:	4613      	mov	r3, r2
 8007476:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007478:	e04f      	b.n	800751a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007480:	d04b      	beq.n	800751a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007482:	f7fa fd75 	bl	8001f70 <HAL_GetTick>
 8007486:	4602      	mov	r2, r0
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	69ba      	ldr	r2, [r7, #24]
 800748e:	429a      	cmp	r2, r3
 8007490:	d302      	bcc.n	8007498 <UART_WaitOnFlagUntilTimeout+0x30>
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d101      	bne.n	800749c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	e04e      	b.n	800753a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 0304 	and.w	r3, r3, #4
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d037      	beq.n	800751a <UART_WaitOnFlagUntilTimeout+0xb2>
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	2b80      	cmp	r3, #128	@ 0x80
 80074ae:	d034      	beq.n	800751a <UART_WaitOnFlagUntilTimeout+0xb2>
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	2b40      	cmp	r3, #64	@ 0x40
 80074b4:	d031      	beq.n	800751a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	69db      	ldr	r3, [r3, #28]
 80074bc:	f003 0308 	and.w	r3, r3, #8
 80074c0:	2b08      	cmp	r3, #8
 80074c2:	d110      	bne.n	80074e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2208      	movs	r2, #8
 80074ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f000 f838 	bl	8007542 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2208      	movs	r2, #8
 80074d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e029      	b.n	800753a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	69db      	ldr	r3, [r3, #28]
 80074ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074f4:	d111      	bne.n	800751a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80074fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f000 f81e 	bl	8007542 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2220      	movs	r2, #32
 800750a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e00f      	b.n	800753a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	69da      	ldr	r2, [r3, #28]
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	4013      	ands	r3, r2
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	429a      	cmp	r2, r3
 8007528:	bf0c      	ite	eq
 800752a:	2301      	moveq	r3, #1
 800752c:	2300      	movne	r3, #0
 800752e:	b2db      	uxtb	r3, r3
 8007530:	461a      	mov	r2, r3
 8007532:	79fb      	ldrb	r3, [r7, #7]
 8007534:	429a      	cmp	r2, r3
 8007536:	d0a0      	beq.n	800747a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007542:	b480      	push	{r7}
 8007544:	b095      	sub	sp, #84	@ 0x54
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007552:	e853 3f00 	ldrex	r3, [r3]
 8007556:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800755a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800755e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	461a      	mov	r2, r3
 8007566:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007568:	643b      	str	r3, [r7, #64]	@ 0x40
 800756a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800756e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007570:	e841 2300 	strex	r3, r2, [r1]
 8007574:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1e6      	bne.n	800754a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	3308      	adds	r3, #8
 8007582:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007584:	6a3b      	ldr	r3, [r7, #32]
 8007586:	e853 3f00 	ldrex	r3, [r3]
 800758a:	61fb      	str	r3, [r7, #28]
   return(result);
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	f023 0301 	bic.w	r3, r3, #1
 8007592:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	3308      	adds	r3, #8
 800759a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800759c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800759e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075a4:	e841 2300 	strex	r3, r2, [r1]
 80075a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80075aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1e5      	bne.n	800757c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d118      	bne.n	80075ea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	e853 3f00 	ldrex	r3, [r3]
 80075c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	f023 0310 	bic.w	r3, r3, #16
 80075cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	461a      	mov	r2, r3
 80075d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075d6:	61bb      	str	r3, [r7, #24]
 80075d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075da:	6979      	ldr	r1, [r7, #20]
 80075dc:	69ba      	ldr	r2, [r7, #24]
 80075de:	e841 2300 	strex	r3, r2, [r1]
 80075e2:	613b      	str	r3, [r7, #16]
   return(result);
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1e6      	bne.n	80075b8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2220      	movs	r2, #32
 80075ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80075fe:	bf00      	nop
 8007600:	3754      	adds	r7, #84	@ 0x54
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
	...

0800760c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007612:	f3ef 8305 	mrs	r3, IPSR
 8007616:	60bb      	str	r3, [r7, #8]
  return(result);
 8007618:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10f      	bne.n	800763e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800761e:	f3ef 8310 	mrs	r3, PRIMASK
 8007622:	607b      	str	r3, [r7, #4]
  return(result);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d109      	bne.n	800763e <osKernelInitialize+0x32>
 800762a:	4b11      	ldr	r3, [pc, #68]	@ (8007670 <osKernelInitialize+0x64>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2b02      	cmp	r3, #2
 8007630:	d109      	bne.n	8007646 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007632:	f3ef 8311 	mrs	r3, BASEPRI
 8007636:	603b      	str	r3, [r7, #0]
  return(result);
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d003      	beq.n	8007646 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800763e:	f06f 0305 	mvn.w	r3, #5
 8007642:	60fb      	str	r3, [r7, #12]
 8007644:	e00c      	b.n	8007660 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007646:	4b0a      	ldr	r3, [pc, #40]	@ (8007670 <osKernelInitialize+0x64>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d105      	bne.n	800765a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800764e:	4b08      	ldr	r3, [pc, #32]	@ (8007670 <osKernelInitialize+0x64>)
 8007650:	2201      	movs	r2, #1
 8007652:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007654:	2300      	movs	r3, #0
 8007656:	60fb      	str	r3, [r7, #12]
 8007658:	e002      	b.n	8007660 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800765a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800765e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007660:	68fb      	ldr	r3, [r7, #12]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3714      	adds	r7, #20
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	20000640 	.word	0x20000640

08007674 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800767a:	f3ef 8305 	mrs	r3, IPSR
 800767e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007680:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10f      	bne.n	80076a6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007686:	f3ef 8310 	mrs	r3, PRIMASK
 800768a:	607b      	str	r3, [r7, #4]
  return(result);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d109      	bne.n	80076a6 <osKernelStart+0x32>
 8007692:	4b11      	ldr	r3, [pc, #68]	@ (80076d8 <osKernelStart+0x64>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b02      	cmp	r3, #2
 8007698:	d109      	bne.n	80076ae <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800769a:	f3ef 8311 	mrs	r3, BASEPRI
 800769e:	603b      	str	r3, [r7, #0]
  return(result);
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d003      	beq.n	80076ae <osKernelStart+0x3a>
    stat = osErrorISR;
 80076a6:	f06f 0305 	mvn.w	r3, #5
 80076aa:	60fb      	str	r3, [r7, #12]
 80076ac:	e00e      	b.n	80076cc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80076ae:	4b0a      	ldr	r3, [pc, #40]	@ (80076d8 <osKernelStart+0x64>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d107      	bne.n	80076c6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80076b6:	4b08      	ldr	r3, [pc, #32]	@ (80076d8 <osKernelStart+0x64>)
 80076b8:	2202      	movs	r2, #2
 80076ba:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80076bc:	f001 f8b0 	bl	8008820 <vTaskStartScheduler>
      stat = osOK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	60fb      	str	r3, [r7, #12]
 80076c4:	e002      	b.n	80076cc <osKernelStart+0x58>
    } else {
      stat = osError;
 80076c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80076ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80076cc:	68fb      	ldr	r3, [r7, #12]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	20000640 	.word	0x20000640

080076dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80076dc:	b580      	push	{r7, lr}
 80076de:	b092      	sub	sp, #72	@ 0x48
 80076e0:	af04      	add	r7, sp, #16
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80076e8:	2300      	movs	r3, #0
 80076ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076ec:	f3ef 8305 	mrs	r3, IPSR
 80076f0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80076f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f040 8094 	bne.w	8007822 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076fa:	f3ef 8310 	mrs	r3, PRIMASK
 80076fe:	623b      	str	r3, [r7, #32]
  return(result);
 8007700:	6a3b      	ldr	r3, [r7, #32]
 8007702:	2b00      	cmp	r3, #0
 8007704:	f040 808d 	bne.w	8007822 <osThreadNew+0x146>
 8007708:	4b48      	ldr	r3, [pc, #288]	@ (800782c <osThreadNew+0x150>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2b02      	cmp	r3, #2
 800770e:	d106      	bne.n	800771e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007710:	f3ef 8311 	mrs	r3, BASEPRI
 8007714:	61fb      	str	r3, [r7, #28]
  return(result);
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	2b00      	cmp	r3, #0
 800771a:	f040 8082 	bne.w	8007822 <osThreadNew+0x146>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d07e      	beq.n	8007822 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8007724:	2380      	movs	r3, #128	@ 0x80
 8007726:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8007728:	2318      	movs	r3, #24
 800772a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 800772c:	2300      	movs	r3, #0
 800772e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007730:	f107 031b 	add.w	r3, r7, #27
 8007734:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8007736:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800773a:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d045      	beq.n	80077ce <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d002      	beq.n	8007750 <osThreadNew+0x74>
        name = attr->name;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	699b      	ldr	r3, [r3, #24]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d002      	beq.n	800775e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800775e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007760:	2b00      	cmp	r3, #0
 8007762:	d008      	beq.n	8007776 <osThreadNew+0x9a>
 8007764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007766:	2b38      	cmp	r3, #56	@ 0x38
 8007768:	d805      	bhi.n	8007776 <osThreadNew+0x9a>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	f003 0301 	and.w	r3, r3, #1
 8007772:	2b00      	cmp	r3, #0
 8007774:	d001      	beq.n	800777a <osThreadNew+0x9e>
        return (NULL);
 8007776:	2300      	movs	r3, #0
 8007778:	e054      	b.n	8007824 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d003      	beq.n	800778a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	695b      	ldr	r3, [r3, #20]
 8007786:	089b      	lsrs	r3, r3, #2
 8007788:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00e      	beq.n	80077b0 <osThreadNew+0xd4>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	2ba7      	cmp	r3, #167	@ 0xa7
 8007798:	d90a      	bls.n	80077b0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d006      	beq.n	80077b0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d002      	beq.n	80077b0 <osThreadNew+0xd4>
        mem = 1;
 80077aa:	2301      	movs	r3, #1
 80077ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077ae:	e010      	b.n	80077d2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d10c      	bne.n	80077d2 <osThreadNew+0xf6>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d108      	bne.n	80077d2 <osThreadNew+0xf6>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d104      	bne.n	80077d2 <osThreadNew+0xf6>
          mem = 0;
 80077c8:	2300      	movs	r3, #0
 80077ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077cc:	e001      	b.n	80077d2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80077ce:	2300      	movs	r3, #0
 80077d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 80077d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d110      	bne.n	80077fa <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80077e0:	9202      	str	r2, [sp, #8]
 80077e2:	9301      	str	r3, [sp, #4]
 80077e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e6:	9300      	str	r3, [sp, #0]
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077ec:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f000 fe2c 	bl	800844c <xTaskCreateStatic>
 80077f4:	4603      	mov	r3, r0
 80077f6:	617b      	str	r3, [r7, #20]
 80077f8:	e013      	b.n	8007822 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80077fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d110      	bne.n	8007822 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007802:	b29a      	uxth	r2, r3
 8007804:	f107 0314 	add.w	r3, r7, #20
 8007808:	9301      	str	r3, [sp, #4]
 800780a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800780c:	9300      	str	r3, [sp, #0]
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f000 fe79 	bl	800850a <xTaskCreate>
 8007818:	4603      	mov	r3, r0
 800781a:	2b01      	cmp	r3, #1
 800781c:	d001      	beq.n	8007822 <osThreadNew+0x146>
          hTask = NULL;
 800781e:	2300      	movs	r3, #0
 8007820:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007822:	697b      	ldr	r3, [r7, #20]
}
 8007824:	4618      	mov	r0, r3
 8007826:	3738      	adds	r7, #56	@ 0x38
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	20000640 	.word	0x20000640

08007830 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007838:	f3ef 8305 	mrs	r3, IPSR
 800783c:	613b      	str	r3, [r7, #16]
  return(result);
 800783e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007840:	2b00      	cmp	r3, #0
 8007842:	d10f      	bne.n	8007864 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007844:	f3ef 8310 	mrs	r3, PRIMASK
 8007848:	60fb      	str	r3, [r7, #12]
  return(result);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d109      	bne.n	8007864 <osDelay+0x34>
 8007850:	4b0d      	ldr	r3, [pc, #52]	@ (8007888 <osDelay+0x58>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2b02      	cmp	r3, #2
 8007856:	d109      	bne.n	800786c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007858:	f3ef 8311 	mrs	r3, BASEPRI
 800785c:	60bb      	str	r3, [r7, #8]
  return(result);
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d003      	beq.n	800786c <osDelay+0x3c>
    stat = osErrorISR;
 8007864:	f06f 0305 	mvn.w	r3, #5
 8007868:	617b      	str	r3, [r7, #20]
 800786a:	e007      	b.n	800787c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800786c:	2300      	movs	r3, #0
 800786e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d002      	beq.n	800787c <osDelay+0x4c>
      vTaskDelay(ticks);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 ff9c 	bl	80087b4 <vTaskDelay>
    }
  }

  return (stat);
 800787c:	697b      	ldr	r3, [r7, #20]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3718      	adds	r7, #24
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	20000640 	.word	0x20000640

0800788c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800788c:	b480      	push	{r7}
 800788e:	b085      	sub	sp, #20
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	4a07      	ldr	r2, [pc, #28]	@ (80078b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800789c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	4a06      	ldr	r2, [pc, #24]	@ (80078bc <vApplicationGetIdleTaskMemory+0x30>)
 80078a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2280      	movs	r2, #128	@ 0x80
 80078a8:	601a      	str	r2, [r3, #0]
}
 80078aa:	bf00      	nop
 80078ac:	3714      	adds	r7, #20
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	20000644 	.word	0x20000644
 80078bc:	200006ec 	.word	0x200006ec

080078c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	4a07      	ldr	r2, [pc, #28]	@ (80078ec <vApplicationGetTimerTaskMemory+0x2c>)
 80078d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	4a06      	ldr	r2, [pc, #24]	@ (80078f0 <vApplicationGetTimerTaskMemory+0x30>)
 80078d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80078de:	601a      	str	r2, [r3, #0]
}
 80078e0:	bf00      	nop
 80078e2:	3714      	adds	r7, #20
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr
 80078ec:	200008ec 	.word	0x200008ec
 80078f0:	20000994 	.word	0x20000994

080078f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f103 0208 	add.w	r2, r3, #8
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800790c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f103 0208 	add.w	r2, r3, #8
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f103 0208 	add.w	r2, r3, #8
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007942:	bf00      	nop
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800794e:	b480      	push	{r7}
 8007950:	b085      	sub	sp, #20
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	689a      	ldr	r2, [r3, #8]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	683a      	ldr	r2, [r7, #0]
 8007978:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	1c5a      	adds	r2, r3, #1
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	601a      	str	r2, [r3, #0]
}
 800798a:	bf00      	nop
 800798c:	3714      	adds	r7, #20
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007996:	b480      	push	{r7}
 8007998:	b085      	sub	sp, #20
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
 800799e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079ac:	d103      	bne.n	80079b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	60fb      	str	r3, [r7, #12]
 80079b4:	e00c      	b.n	80079d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	3308      	adds	r3, #8
 80079ba:	60fb      	str	r3, [r7, #12]
 80079bc:	e002      	b.n	80079c4 <vListInsert+0x2e>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	60fb      	str	r3, [r7, #12]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d2f6      	bcs.n	80079be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	685a      	ldr	r2, [r3, #4]
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	683a      	ldr	r2, [r7, #0]
 80079ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	1c5a      	adds	r2, r3, #1
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	601a      	str	r2, [r3, #0]
}
 80079fc:	bf00      	nop
 80079fe:	3714      	adds	r7, #20
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	6892      	ldr	r2, [r2, #8]
 8007a1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	6852      	ldr	r2, [r2, #4]
 8007a28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d103      	bne.n	8007a3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	689a      	ldr	r2, [r3, #8]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	1e5a      	subs	r2, r3, #1
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3714      	adds	r7, #20
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d10b      	bne.n	8007a88 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a74:	f383 8811 	msr	BASEPRI, r3
 8007a78:	f3bf 8f6f 	isb	sy
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007a82:	bf00      	nop
 8007a84:	bf00      	nop
 8007a86:	e7fd      	b.n	8007a84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007a88:	f002 f86e 	bl	8009b68 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a94:	68f9      	ldr	r1, [r7, #12]
 8007a96:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007a98:	fb01 f303 	mul.w	r3, r1, r3
 8007a9c:	441a      	add	r2, r3
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	68f9      	ldr	r1, [r7, #12]
 8007abc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007abe:	fb01 f303 	mul.w	r3, r1, r3
 8007ac2:	441a      	add	r2, r3
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	22ff      	movs	r2, #255	@ 0xff
 8007acc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	22ff      	movs	r2, #255	@ 0xff
 8007ad4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d114      	bne.n	8007b08 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d01a      	beq.n	8007b1c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	3310      	adds	r3, #16
 8007aea:	4618      	mov	r0, r3
 8007aec:	f001 f93c 	bl	8008d68 <xTaskRemoveFromEventList>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d012      	beq.n	8007b1c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007af6:	4b0d      	ldr	r3, [pc, #52]	@ (8007b2c <xQueueGenericReset+0xd0>)
 8007af8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007afc:	601a      	str	r2, [r3, #0]
 8007afe:	f3bf 8f4f 	dsb	sy
 8007b02:	f3bf 8f6f 	isb	sy
 8007b06:	e009      	b.n	8007b1c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	3310      	adds	r3, #16
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7ff fef1 	bl	80078f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	3324      	adds	r3, #36	@ 0x24
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7ff feec 	bl	80078f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007b1c:	f002 f856 	bl	8009bcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007b20:	2301      	movs	r3, #1
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3710      	adds	r7, #16
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	e000ed04 	.word	0xe000ed04

08007b30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b08e      	sub	sp, #56	@ 0x38
 8007b34:	af02      	add	r7, sp, #8
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
 8007b3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10b      	bne.n	8007b5c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b48:	f383 8811 	msr	BASEPRI, r3
 8007b4c:	f3bf 8f6f 	isb	sy
 8007b50:	f3bf 8f4f 	dsb	sy
 8007b54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007b56:	bf00      	nop
 8007b58:	bf00      	nop
 8007b5a:	e7fd      	b.n	8007b58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10b      	bne.n	8007b7a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b66:	f383 8811 	msr	BASEPRI, r3
 8007b6a:	f3bf 8f6f 	isb	sy
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007b74:	bf00      	nop
 8007b76:	bf00      	nop
 8007b78:	e7fd      	b.n	8007b76 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d002      	beq.n	8007b86 <xQueueGenericCreateStatic+0x56>
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d001      	beq.n	8007b8a <xQueueGenericCreateStatic+0x5a>
 8007b86:	2301      	movs	r3, #1
 8007b88:	e000      	b.n	8007b8c <xQueueGenericCreateStatic+0x5c>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10b      	bne.n	8007ba8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b94:	f383 8811 	msr	BASEPRI, r3
 8007b98:	f3bf 8f6f 	isb	sy
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	623b      	str	r3, [r7, #32]
}
 8007ba2:	bf00      	nop
 8007ba4:	bf00      	nop
 8007ba6:	e7fd      	b.n	8007ba4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d102      	bne.n	8007bb4 <xQueueGenericCreateStatic+0x84>
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d101      	bne.n	8007bb8 <xQueueGenericCreateStatic+0x88>
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e000      	b.n	8007bba <xQueueGenericCreateStatic+0x8a>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d10b      	bne.n	8007bd6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc2:	f383 8811 	msr	BASEPRI, r3
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	61fb      	str	r3, [r7, #28]
}
 8007bd0:	bf00      	nop
 8007bd2:	bf00      	nop
 8007bd4:	e7fd      	b.n	8007bd2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007bd6:	2350      	movs	r3, #80	@ 0x50
 8007bd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	2b50      	cmp	r3, #80	@ 0x50
 8007bde:	d00b      	beq.n	8007bf8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007be4:	f383 8811 	msr	BASEPRI, r3
 8007be8:	f3bf 8f6f 	isb	sy
 8007bec:	f3bf 8f4f 	dsb	sy
 8007bf0:	61bb      	str	r3, [r7, #24]
}
 8007bf2:	bf00      	nop
 8007bf4:	bf00      	nop
 8007bf6:	e7fd      	b.n	8007bf4 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00d      	beq.n	8007c1e <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c0a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	4613      	mov	r3, r2
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	68b9      	ldr	r1, [r7, #8]
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f000 f805 	bl	8007c28 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3730      	adds	r7, #48	@ 0x30
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
 8007c34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d103      	bne.n	8007c44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	69ba      	ldr	r2, [r7, #24]
 8007c40:	601a      	str	r2, [r3, #0]
 8007c42:	e002      	b.n	8007c4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c56:	2101      	movs	r1, #1
 8007c58:	69b8      	ldr	r0, [r7, #24]
 8007c5a:	f7ff feff 	bl	8007a5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	78fa      	ldrb	r2, [r7, #3]
 8007c62:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c66:	bf00      	nop
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
	...

08007c70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b08e      	sub	sp, #56	@ 0x38
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	607a      	str	r2, [r7, #4]
 8007c7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10b      	bne.n	8007ca4 <xQueueGenericSend+0x34>
	__asm volatile
 8007c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c90:	f383 8811 	msr	BASEPRI, r3
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007c9e:	bf00      	nop
 8007ca0:	bf00      	nop
 8007ca2:	e7fd      	b.n	8007ca0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d103      	bne.n	8007cb2 <xQueueGenericSend+0x42>
 8007caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d101      	bne.n	8007cb6 <xQueueGenericSend+0x46>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e000      	b.n	8007cb8 <xQueueGenericSend+0x48>
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10b      	bne.n	8007cd4 <xQueueGenericSend+0x64>
	__asm volatile
 8007cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc0:	f383 8811 	msr	BASEPRI, r3
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007cce:	bf00      	nop
 8007cd0:	bf00      	nop
 8007cd2:	e7fd      	b.n	8007cd0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d103      	bne.n	8007ce2 <xQueueGenericSend+0x72>
 8007cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d101      	bne.n	8007ce6 <xQueueGenericSend+0x76>
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e000      	b.n	8007ce8 <xQueueGenericSend+0x78>
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d10b      	bne.n	8007d04 <xQueueGenericSend+0x94>
	__asm volatile
 8007cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf0:	f383 8811 	msr	BASEPRI, r3
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	f3bf 8f4f 	dsb	sy
 8007cfc:	623b      	str	r3, [r7, #32]
}
 8007cfe:	bf00      	nop
 8007d00:	bf00      	nop
 8007d02:	e7fd      	b.n	8007d00 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d04:	f001 f9fc 	bl	8009100 <xTaskGetSchedulerState>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d102      	bne.n	8007d14 <xQueueGenericSend+0xa4>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d101      	bne.n	8007d18 <xQueueGenericSend+0xa8>
 8007d14:	2301      	movs	r3, #1
 8007d16:	e000      	b.n	8007d1a <xQueueGenericSend+0xaa>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10b      	bne.n	8007d36 <xQueueGenericSend+0xc6>
	__asm volatile
 8007d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d22:	f383 8811 	msr	BASEPRI, r3
 8007d26:	f3bf 8f6f 	isb	sy
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	61fb      	str	r3, [r7, #28]
}
 8007d30:	bf00      	nop
 8007d32:	bf00      	nop
 8007d34:	e7fd      	b.n	8007d32 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d36:	f001 ff17 	bl	8009b68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d302      	bcc.n	8007d4c <xQueueGenericSend+0xdc>
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	d129      	bne.n	8007da0 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d4c:	683a      	ldr	r2, [r7, #0]
 8007d4e:	68b9      	ldr	r1, [r7, #8]
 8007d50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d52:	f000 fa0d 	bl	8008170 <prvCopyDataToQueue>
 8007d56:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d010      	beq.n	8007d82 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d62:	3324      	adds	r3, #36	@ 0x24
 8007d64:	4618      	mov	r0, r3
 8007d66:	f000 ffff 	bl	8008d68 <xTaskRemoveFromEventList>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d013      	beq.n	8007d98 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d70:	4b3f      	ldr	r3, [pc, #252]	@ (8007e70 <xQueueGenericSend+0x200>)
 8007d72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d76:	601a      	str	r2, [r3, #0]
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	f3bf 8f6f 	isb	sy
 8007d80:	e00a      	b.n	8007d98 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d007      	beq.n	8007d98 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d88:	4b39      	ldr	r3, [pc, #228]	@ (8007e70 <xQueueGenericSend+0x200>)
 8007d8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d8e:	601a      	str	r2, [r3, #0]
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007d98:	f001 ff18 	bl	8009bcc <vPortExitCritical>
				return pdPASS;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e063      	b.n	8007e68 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d103      	bne.n	8007dae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007da6:	f001 ff11 	bl	8009bcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007daa:	2300      	movs	r3, #0
 8007dac:	e05c      	b.n	8007e68 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d106      	bne.n	8007dc2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007db4:	f107 0314 	add.w	r3, r7, #20
 8007db8:	4618      	mov	r0, r3
 8007dba:	f001 f839 	bl	8008e30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007dc2:	f001 ff03 	bl	8009bcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007dc6:	f000 fd9b 	bl	8008900 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007dca:	f001 fecd 	bl	8009b68 <vPortEnterCritical>
 8007dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007dd4:	b25b      	sxtb	r3, r3
 8007dd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007dda:	d103      	bne.n	8007de4 <xQueueGenericSend+0x174>
 8007ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007dea:	b25b      	sxtb	r3, r3
 8007dec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007df0:	d103      	bne.n	8007dfa <xQueueGenericSend+0x18a>
 8007df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007dfa:	f001 fee7 	bl	8009bcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007dfe:	1d3a      	adds	r2, r7, #4
 8007e00:	f107 0314 	add.w	r3, r7, #20
 8007e04:	4611      	mov	r1, r2
 8007e06:	4618      	mov	r0, r3
 8007e08:	f001 f828 	bl	8008e5c <xTaskCheckForTimeOut>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d124      	bne.n	8007e5c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e14:	f000 faa4 	bl	8008360 <prvIsQueueFull>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d018      	beq.n	8007e50 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e20:	3310      	adds	r3, #16
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	4611      	mov	r1, r2
 8007e26:	4618      	mov	r0, r3
 8007e28:	f000 ff4c 	bl	8008cc4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e2e:	f000 fa2f 	bl	8008290 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007e32:	f000 fd73 	bl	800891c <xTaskResumeAll>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f47f af7c 	bne.w	8007d36 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8007e70 <xQueueGenericSend+0x200>)
 8007e40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e44:	601a      	str	r2, [r3, #0]
 8007e46:	f3bf 8f4f 	dsb	sy
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	e772      	b.n	8007d36 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007e50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e52:	f000 fa1d 	bl	8008290 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e56:	f000 fd61 	bl	800891c <xTaskResumeAll>
 8007e5a:	e76c      	b.n	8007d36 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e5e:	f000 fa17 	bl	8008290 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e62:	f000 fd5b 	bl	800891c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e66:	2300      	movs	r3, #0
		}
	}
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3738      	adds	r7, #56	@ 0x38
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	e000ed04 	.word	0xe000ed04

08007e74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b08e      	sub	sp, #56	@ 0x38
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	607a      	str	r2, [r7, #4]
 8007e80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d10b      	bne.n	8007ea4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e90:	f383 8811 	msr	BASEPRI, r3
 8007e94:	f3bf 8f6f 	isb	sy
 8007e98:	f3bf 8f4f 	dsb	sy
 8007e9c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007e9e:	bf00      	nop
 8007ea0:	bf00      	nop
 8007ea2:	e7fd      	b.n	8007ea0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d103      	bne.n	8007eb2 <xQueueGenericSendFromISR+0x3e>
 8007eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d101      	bne.n	8007eb6 <xQueueGenericSendFromISR+0x42>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e000      	b.n	8007eb8 <xQueueGenericSendFromISR+0x44>
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10b      	bne.n	8007ed4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec0:	f383 8811 	msr	BASEPRI, r3
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	623b      	str	r3, [r7, #32]
}
 8007ece:	bf00      	nop
 8007ed0:	bf00      	nop
 8007ed2:	e7fd      	b.n	8007ed0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d103      	bne.n	8007ee2 <xQueueGenericSendFromISR+0x6e>
 8007eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d101      	bne.n	8007ee6 <xQueueGenericSendFromISR+0x72>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e000      	b.n	8007ee8 <xQueueGenericSendFromISR+0x74>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10b      	bne.n	8007f04 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	61fb      	str	r3, [r7, #28]
}
 8007efe:	bf00      	nop
 8007f00:	bf00      	nop
 8007f02:	e7fd      	b.n	8007f00 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f04:	f001 ff10 	bl	8009d28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f08:	f3ef 8211 	mrs	r2, BASEPRI
 8007f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f10:	f383 8811 	msr	BASEPRI, r3
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	61ba      	str	r2, [r7, #24]
 8007f1e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007f20:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d302      	bcc.n	8007f36 <xQueueGenericSendFromISR+0xc2>
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d12c      	bne.n	8007f90 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f40:	683a      	ldr	r2, [r7, #0]
 8007f42:	68b9      	ldr	r1, [r7, #8]
 8007f44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f46:	f000 f913 	bl	8008170 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f4a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8007f4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f52:	d112      	bne.n	8007f7a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d016      	beq.n	8007f8a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f5e:	3324      	adds	r3, #36	@ 0x24
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 ff01 	bl	8008d68 <xTaskRemoveFromEventList>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00e      	beq.n	8007f8a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00b      	beq.n	8007f8a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2201      	movs	r2, #1
 8007f76:	601a      	str	r2, [r3, #0]
 8007f78:	e007      	b.n	8007f8a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f7a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007f7e:	3301      	adds	r3, #1
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	b25a      	sxtb	r2, r3
 8007f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8007f8e:	e001      	b.n	8007f94 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f90:	2300      	movs	r3, #0
 8007f92:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f96:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007f9e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3738      	adds	r7, #56	@ 0x38
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
	...

08007fac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b08c      	sub	sp, #48	@ 0x30
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d10b      	bne.n	8007fde <xQueueReceive+0x32>
	__asm volatile
 8007fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fca:	f383 8811 	msr	BASEPRI, r3
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f3bf 8f4f 	dsb	sy
 8007fd6:	623b      	str	r3, [r7, #32]
}
 8007fd8:	bf00      	nop
 8007fda:	bf00      	nop
 8007fdc:	e7fd      	b.n	8007fda <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d103      	bne.n	8007fec <xQueueReceive+0x40>
 8007fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d101      	bne.n	8007ff0 <xQueueReceive+0x44>
 8007fec:	2301      	movs	r3, #1
 8007fee:	e000      	b.n	8007ff2 <xQueueReceive+0x46>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10b      	bne.n	800800e <xQueueReceive+0x62>
	__asm volatile
 8007ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ffa:	f383 8811 	msr	BASEPRI, r3
 8007ffe:	f3bf 8f6f 	isb	sy
 8008002:	f3bf 8f4f 	dsb	sy
 8008006:	61fb      	str	r3, [r7, #28]
}
 8008008:	bf00      	nop
 800800a:	bf00      	nop
 800800c:	e7fd      	b.n	800800a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800800e:	f001 f877 	bl	8009100 <xTaskGetSchedulerState>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d102      	bne.n	800801e <xQueueReceive+0x72>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d101      	bne.n	8008022 <xQueueReceive+0x76>
 800801e:	2301      	movs	r3, #1
 8008020:	e000      	b.n	8008024 <xQueueReceive+0x78>
 8008022:	2300      	movs	r3, #0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10b      	bne.n	8008040 <xQueueReceive+0x94>
	__asm volatile
 8008028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800802c:	f383 8811 	msr	BASEPRI, r3
 8008030:	f3bf 8f6f 	isb	sy
 8008034:	f3bf 8f4f 	dsb	sy
 8008038:	61bb      	str	r3, [r7, #24]
}
 800803a:	bf00      	nop
 800803c:	bf00      	nop
 800803e:	e7fd      	b.n	800803c <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008040:	f001 fd92 	bl	8009b68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008048:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800804a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804c:	2b00      	cmp	r3, #0
 800804e:	d01f      	beq.n	8008090 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008050:	68b9      	ldr	r1, [r7, #8]
 8008052:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008054:	f000 f8f6 	bl	8008244 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805a:	1e5a      	subs	r2, r3, #1
 800805c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800805e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00f      	beq.n	8008088 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800806a:	3310      	adds	r3, #16
 800806c:	4618      	mov	r0, r3
 800806e:	f000 fe7b 	bl	8008d68 <xTaskRemoveFromEventList>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d007      	beq.n	8008088 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008078:	4b3c      	ldr	r3, [pc, #240]	@ (800816c <xQueueReceive+0x1c0>)
 800807a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800807e:	601a      	str	r2, [r3, #0]
 8008080:	f3bf 8f4f 	dsb	sy
 8008084:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008088:	f001 fda0 	bl	8009bcc <vPortExitCritical>
				return pdPASS;
 800808c:	2301      	movs	r3, #1
 800808e:	e069      	b.n	8008164 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d103      	bne.n	800809e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008096:	f001 fd99 	bl	8009bcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800809a:	2300      	movs	r3, #0
 800809c:	e062      	b.n	8008164 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800809e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d106      	bne.n	80080b2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080a4:	f107 0310 	add.w	r3, r7, #16
 80080a8:	4618      	mov	r0, r3
 80080aa:	f000 fec1 	bl	8008e30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080ae:	2301      	movs	r3, #1
 80080b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080b2:	f001 fd8b 	bl	8009bcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080b6:	f000 fc23 	bl	8008900 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080ba:	f001 fd55 	bl	8009b68 <vPortEnterCritical>
 80080be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080c4:	b25b      	sxtb	r3, r3
 80080c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080ca:	d103      	bne.n	80080d4 <xQueueReceive+0x128>
 80080cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080da:	b25b      	sxtb	r3, r3
 80080dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080e0:	d103      	bne.n	80080ea <xQueueReceive+0x13e>
 80080e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080ea:	f001 fd6f 	bl	8009bcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080ee:	1d3a      	adds	r2, r7, #4
 80080f0:	f107 0310 	add.w	r3, r7, #16
 80080f4:	4611      	mov	r1, r2
 80080f6:	4618      	mov	r0, r3
 80080f8:	f000 feb0 	bl	8008e5c <xTaskCheckForTimeOut>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d123      	bne.n	800814a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008102:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008104:	f000 f916 	bl	8008334 <prvIsQueueEmpty>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d017      	beq.n	800813e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800810e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008110:	3324      	adds	r3, #36	@ 0x24
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	4611      	mov	r1, r2
 8008116:	4618      	mov	r0, r3
 8008118:	f000 fdd4 	bl	8008cc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800811c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800811e:	f000 f8b7 	bl	8008290 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008122:	f000 fbfb 	bl	800891c <xTaskResumeAll>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d189      	bne.n	8008040 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800812c:	4b0f      	ldr	r3, [pc, #60]	@ (800816c <xQueueReceive+0x1c0>)
 800812e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008132:	601a      	str	r2, [r3, #0]
 8008134:	f3bf 8f4f 	dsb	sy
 8008138:	f3bf 8f6f 	isb	sy
 800813c:	e780      	b.n	8008040 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800813e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008140:	f000 f8a6 	bl	8008290 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008144:	f000 fbea 	bl	800891c <xTaskResumeAll>
 8008148:	e77a      	b.n	8008040 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800814a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800814c:	f000 f8a0 	bl	8008290 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008150:	f000 fbe4 	bl	800891c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008154:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008156:	f000 f8ed 	bl	8008334 <prvIsQueueEmpty>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	f43f af6f 	beq.w	8008040 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008162:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008164:	4618      	mov	r0, r3
 8008166:	3730      	adds	r7, #48	@ 0x30
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	e000ed04 	.word	0xe000ed04

08008170 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800817c:	2300      	movs	r3, #0
 800817e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008184:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10d      	bne.n	80081aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d14d      	bne.n	8008232 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	4618      	mov	r0, r3
 800819c:	f000 ffce 	bl	800913c <xTaskPriorityDisinherit>
 80081a0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	605a      	str	r2, [r3, #4]
 80081a8:	e043      	b.n	8008232 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d119      	bne.n	80081e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6898      	ldr	r0, [r3, #8]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081b8:	461a      	mov	r2, r3
 80081ba:	68b9      	ldr	r1, [r7, #8]
 80081bc:	f003 f857 	bl	800b26e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	689a      	ldr	r2, [r3, #8]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081c8:	441a      	add	r2, r3
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	689a      	ldr	r2, [r3, #8]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d32b      	bcc.n	8008232 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	609a      	str	r2, [r3, #8]
 80081e2:	e026      	b.n	8008232 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	68d8      	ldr	r0, [r3, #12]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ec:	461a      	mov	r2, r3
 80081ee:	68b9      	ldr	r1, [r7, #8]
 80081f0:	f003 f83d 	bl	800b26e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	68da      	ldr	r2, [r3, #12]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081fc:	425b      	negs	r3, r3
 80081fe:	441a      	add	r2, r3
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	68da      	ldr	r2, [r3, #12]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	429a      	cmp	r2, r3
 800820e:	d207      	bcs.n	8008220 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	685a      	ldr	r2, [r3, #4]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008218:	425b      	negs	r3, r3
 800821a:	441a      	add	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2b02      	cmp	r3, #2
 8008224:	d105      	bne.n	8008232 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d002      	beq.n	8008232 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	3b01      	subs	r3, #1
 8008230:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	1c5a      	adds	r2, r3, #1
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800823a:	697b      	ldr	r3, [r7, #20]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3718      	adds	r7, #24
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008252:	2b00      	cmp	r3, #0
 8008254:	d018      	beq.n	8008288 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	68da      	ldr	r2, [r3, #12]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800825e:	441a      	add	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	68da      	ldr	r2, [r3, #12]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	429a      	cmp	r2, r3
 800826e:	d303      	bcc.n	8008278 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	68d9      	ldr	r1, [r3, #12]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008280:	461a      	mov	r2, r3
 8008282:	6838      	ldr	r0, [r7, #0]
 8008284:	f002 fff3 	bl	800b26e <memcpy>
	}
}
 8008288:	bf00      	nop
 800828a:	3708      	adds	r7, #8
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008298:	f001 fc66 	bl	8009b68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082a4:	e011      	b.n	80082ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d012      	beq.n	80082d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	3324      	adds	r3, #36	@ 0x24
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 fd58 	bl	8008d68 <xTaskRemoveFromEventList>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d001      	beq.n	80082c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80082be:	f000 fe31 	bl	8008f24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
 80082c4:	3b01      	subs	r3, #1
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	dce9      	bgt.n	80082a6 <prvUnlockQueue+0x16>
 80082d2:	e000      	b.n	80082d6 <prvUnlockQueue+0x46>
					break;
 80082d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	22ff      	movs	r2, #255	@ 0xff
 80082da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80082de:	f001 fc75 	bl	8009bcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80082e2:	f001 fc41 	bl	8009b68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80082ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082ee:	e011      	b.n	8008314 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d012      	beq.n	800831e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	3310      	adds	r3, #16
 80082fc:	4618      	mov	r0, r3
 80082fe:	f000 fd33 	bl	8008d68 <xTaskRemoveFromEventList>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d001      	beq.n	800830c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008308:	f000 fe0c 	bl	8008f24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800830c:	7bbb      	ldrb	r3, [r7, #14]
 800830e:	3b01      	subs	r3, #1
 8008310:	b2db      	uxtb	r3, r3
 8008312:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008314:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008318:	2b00      	cmp	r3, #0
 800831a:	dce9      	bgt.n	80082f0 <prvUnlockQueue+0x60>
 800831c:	e000      	b.n	8008320 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800831e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	22ff      	movs	r2, #255	@ 0xff
 8008324:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008328:	f001 fc50 	bl	8009bcc <vPortExitCritical>
}
 800832c:	bf00      	nop
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800833c:	f001 fc14 	bl	8009b68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008344:	2b00      	cmp	r3, #0
 8008346:	d102      	bne.n	800834e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008348:	2301      	movs	r3, #1
 800834a:	60fb      	str	r3, [r7, #12]
 800834c:	e001      	b.n	8008352 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800834e:	2300      	movs	r3, #0
 8008350:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008352:	f001 fc3b 	bl	8009bcc <vPortExitCritical>

	return xReturn;
 8008356:	68fb      	ldr	r3, [r7, #12]
}
 8008358:	4618      	mov	r0, r3
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008368:	f001 fbfe 	bl	8009b68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008374:	429a      	cmp	r2, r3
 8008376:	d102      	bne.n	800837e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008378:	2301      	movs	r3, #1
 800837a:	60fb      	str	r3, [r7, #12]
 800837c:	e001      	b.n	8008382 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800837e:	2300      	movs	r3, #0
 8008380:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008382:	f001 fc23 	bl	8009bcc <vPortExitCritical>

	return xReturn;
 8008386:	68fb      	ldr	r3, [r7, #12]
}
 8008388:	4618      	mov	r0, r3
 800838a:	3710      	adds	r7, #16
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800839a:	2300      	movs	r3, #0
 800839c:	60fb      	str	r3, [r7, #12]
 800839e:	e014      	b.n	80083ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80083a0:	4a0f      	ldr	r2, [pc, #60]	@ (80083e0 <vQueueAddToRegistry+0x50>)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d10b      	bne.n	80083c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80083ac:	490c      	ldr	r1, [pc, #48]	@ (80083e0 <vQueueAddToRegistry+0x50>)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	683a      	ldr	r2, [r7, #0]
 80083b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80083b6:	4a0a      	ldr	r2, [pc, #40]	@ (80083e0 <vQueueAddToRegistry+0x50>)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	00db      	lsls	r3, r3, #3
 80083bc:	4413      	add	r3, r2
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80083c2:	e006      	b.n	80083d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	3301      	adds	r3, #1
 80083c8:	60fb      	str	r3, [r7, #12]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2b07      	cmp	r3, #7
 80083ce:	d9e7      	bls.n	80083a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80083d0:	bf00      	nop
 80083d2:	bf00      	nop
 80083d4:	3714      	adds	r7, #20
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	20000d94 	.word	0x20000d94

080083e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80083f4:	f001 fbb8 	bl	8009b68 <vPortEnterCritical>
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083fe:	b25b      	sxtb	r3, r3
 8008400:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008404:	d103      	bne.n	800840e <vQueueWaitForMessageRestricted+0x2a>
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008414:	b25b      	sxtb	r3, r3
 8008416:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800841a:	d103      	bne.n	8008424 <vQueueWaitForMessageRestricted+0x40>
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	2200      	movs	r2, #0
 8008420:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008424:	f001 fbd2 	bl	8009bcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800842c:	2b00      	cmp	r3, #0
 800842e:	d106      	bne.n	800843e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	3324      	adds	r3, #36	@ 0x24
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	68b9      	ldr	r1, [r7, #8]
 8008438:	4618      	mov	r0, r3
 800843a:	f000 fc69 	bl	8008d10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800843e:	6978      	ldr	r0, [r7, #20]
 8008440:	f7ff ff26 	bl	8008290 <prvUnlockQueue>
	}
 8008444:	bf00      	nop
 8008446:	3718      	adds	r7, #24
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800844c:	b580      	push	{r7, lr}
 800844e:	b08e      	sub	sp, #56	@ 0x38
 8008450:	af04      	add	r7, sp, #16
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
 8008458:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800845a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800845c:	2b00      	cmp	r3, #0
 800845e:	d10b      	bne.n	8008478 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	623b      	str	r3, [r7, #32]
}
 8008472:	bf00      	nop
 8008474:	bf00      	nop
 8008476:	e7fd      	b.n	8008474 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800847a:	2b00      	cmp	r3, #0
 800847c:	d10b      	bne.n	8008496 <xTaskCreateStatic+0x4a>
	__asm volatile
 800847e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008482:	f383 8811 	msr	BASEPRI, r3
 8008486:	f3bf 8f6f 	isb	sy
 800848a:	f3bf 8f4f 	dsb	sy
 800848e:	61fb      	str	r3, [r7, #28]
}
 8008490:	bf00      	nop
 8008492:	bf00      	nop
 8008494:	e7fd      	b.n	8008492 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008496:	23a8      	movs	r3, #168	@ 0xa8
 8008498:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	2ba8      	cmp	r3, #168	@ 0xa8
 800849e:	d00b      	beq.n	80084b8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80084a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a4:	f383 8811 	msr	BASEPRI, r3
 80084a8:	f3bf 8f6f 	isb	sy
 80084ac:	f3bf 8f4f 	dsb	sy
 80084b0:	61bb      	str	r3, [r7, #24]
}
 80084b2:	bf00      	nop
 80084b4:	bf00      	nop
 80084b6:	e7fd      	b.n	80084b4 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80084b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d01e      	beq.n	80084fc <xTaskCreateStatic+0xb0>
 80084be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d01b      	beq.n	80084fc <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80084cc:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d0:	2202      	movs	r2, #2
 80084d2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084d6:	2300      	movs	r3, #0
 80084d8:	9303      	str	r3, [sp, #12]
 80084da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084dc:	9302      	str	r3, [sp, #8]
 80084de:	f107 0314 	add.w	r3, r7, #20
 80084e2:	9301      	str	r3, [sp, #4]
 80084e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e6:	9300      	str	r3, [sp, #0]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	68b9      	ldr	r1, [r7, #8]
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f000 f850 	bl	8008594 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80084f6:	f000 f8ed 	bl	80086d4 <prvAddNewTaskToReadyList>
 80084fa:	e001      	b.n	8008500 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80084fc:	2300      	movs	r3, #0
 80084fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008500:	697b      	ldr	r3, [r7, #20]
	}
 8008502:	4618      	mov	r0, r3
 8008504:	3728      	adds	r7, #40	@ 0x28
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800850a:	b580      	push	{r7, lr}
 800850c:	b08c      	sub	sp, #48	@ 0x30
 800850e:	af04      	add	r7, sp, #16
 8008510:	60f8      	str	r0, [r7, #12]
 8008512:	60b9      	str	r1, [r7, #8]
 8008514:	603b      	str	r3, [r7, #0]
 8008516:	4613      	mov	r3, r2
 8008518:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800851a:	88fb      	ldrh	r3, [r7, #6]
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	4618      	mov	r0, r3
 8008520:	f001 fc44 	bl	8009dac <pvPortMalloc>
 8008524:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00e      	beq.n	800854a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800852c:	20a8      	movs	r0, #168	@ 0xa8
 800852e:	f001 fc3d 	bl	8009dac <pvPortMalloc>
 8008532:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d003      	beq.n	8008542 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	697a      	ldr	r2, [r7, #20]
 800853e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008540:	e005      	b.n	800854e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008542:	6978      	ldr	r0, [r7, #20]
 8008544:	f001 fcfa 	bl	8009f3c <vPortFree>
 8008548:	e001      	b.n	800854e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800854a:	2300      	movs	r3, #0
 800854c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d017      	beq.n	8008584 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	2200      	movs	r2, #0
 8008558:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800855c:	88fa      	ldrh	r2, [r7, #6]
 800855e:	2300      	movs	r3, #0
 8008560:	9303      	str	r3, [sp, #12]
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	9302      	str	r3, [sp, #8]
 8008566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008568:	9301      	str	r3, [sp, #4]
 800856a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	68b9      	ldr	r1, [r7, #8]
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 f80e 	bl	8008594 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008578:	69f8      	ldr	r0, [r7, #28]
 800857a:	f000 f8ab 	bl	80086d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800857e:	2301      	movs	r3, #1
 8008580:	61bb      	str	r3, [r7, #24]
 8008582:	e002      	b.n	800858a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008584:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008588:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800858a:	69bb      	ldr	r3, [r7, #24]
	}
 800858c:	4618      	mov	r0, r3
 800858e:	3720      	adds	r7, #32
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b088      	sub	sp, #32
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	607a      	str	r2, [r7, #4]
 80085a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80085a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	461a      	mov	r2, r3
 80085ac:	21a5      	movs	r1, #165	@ 0xa5
 80085ae:	f002 fd88 	bl	800b0c2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80085b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80085bc:	3b01      	subs	r3, #1
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4413      	add	r3, r2
 80085c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	f023 0307 	bic.w	r3, r3, #7
 80085ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	f003 0307 	and.w	r3, r3, #7
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00b      	beq.n	80085ee <prvInitialiseNewTask+0x5a>
	__asm volatile
 80085d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085da:	f383 8811 	msr	BASEPRI, r3
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	617b      	str	r3, [r7, #20]
}
 80085e8:	bf00      	nop
 80085ea:	bf00      	nop
 80085ec:	e7fd      	b.n	80085ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085ee:	2300      	movs	r3, #0
 80085f0:	61fb      	str	r3, [r7, #28]
 80085f2:	e012      	b.n	800861a <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80085f4:	68ba      	ldr	r2, [r7, #8]
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	4413      	add	r3, r2
 80085fa:	7819      	ldrb	r1, [r3, #0]
 80085fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	4413      	add	r3, r2
 8008602:	3334      	adds	r3, #52	@ 0x34
 8008604:	460a      	mov	r2, r1
 8008606:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008608:	68ba      	ldr	r2, [r7, #8]
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	4413      	add	r3, r2
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d006      	beq.n	8008622 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	3301      	adds	r3, #1
 8008618:	61fb      	str	r3, [r7, #28]
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	2b0f      	cmp	r3, #15
 800861e:	d9e9      	bls.n	80085f4 <prvInitialiseNewTask+0x60>
 8008620:	e000      	b.n	8008624 <prvInitialiseNewTask+0x90>
		{
			break;
 8008622:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008626:	2200      	movs	r2, #0
 8008628:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800862c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800862e:	2b37      	cmp	r3, #55	@ 0x37
 8008630:	d901      	bls.n	8008636 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008632:	2337      	movs	r3, #55	@ 0x37
 8008634:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008638:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800863a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800863c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800863e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008640:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008644:	2200      	movs	r2, #0
 8008646:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864a:	3304      	adds	r3, #4
 800864c:	4618      	mov	r0, r3
 800864e:	f7ff f971 	bl	8007934 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008654:	3318      	adds	r3, #24
 8008656:	4618      	mov	r0, r3
 8008658:	f7ff f96c 	bl	8007934 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800865c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008660:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008664:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800866a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800866c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800866e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008670:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008674:	2200      	movs	r2, #0
 8008676:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800867a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867c:	2200      	movs	r2, #0
 800867e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008684:	3354      	adds	r3, #84	@ 0x54
 8008686:	224c      	movs	r2, #76	@ 0x4c
 8008688:	2100      	movs	r1, #0
 800868a:	4618      	mov	r0, r3
 800868c:	f002 fd19 	bl	800b0c2 <memset>
 8008690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008692:	4a0d      	ldr	r2, [pc, #52]	@ (80086c8 <prvInitialiseNewTask+0x134>)
 8008694:	659a      	str	r2, [r3, #88]	@ 0x58
 8008696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008698:	4a0c      	ldr	r2, [pc, #48]	@ (80086cc <prvInitialiseNewTask+0x138>)
 800869a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800869c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869e:	4a0c      	ldr	r2, [pc, #48]	@ (80086d0 <prvInitialiseNewTask+0x13c>)
 80086a0:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	68f9      	ldr	r1, [r7, #12]
 80086a6:	69b8      	ldr	r0, [r7, #24]
 80086a8:	f001 f92c 	bl	8009904 <pxPortInitialiseStack>
 80086ac:	4602      	mov	r2, r0
 80086ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80086b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d002      	beq.n	80086be <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80086b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086be:	bf00      	nop
 80086c0:	3720      	adds	r7, #32
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	20002020 	.word	0x20002020
 80086cc:	20002088 	.word	0x20002088
 80086d0:	200020f0 	.word	0x200020f0

080086d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80086dc:	f001 fa44 	bl	8009b68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80086e0:	4b2d      	ldr	r3, [pc, #180]	@ (8008798 <prvAddNewTaskToReadyList+0xc4>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	3301      	adds	r3, #1
 80086e6:	4a2c      	ldr	r2, [pc, #176]	@ (8008798 <prvAddNewTaskToReadyList+0xc4>)
 80086e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80086ea:	4b2c      	ldr	r3, [pc, #176]	@ (800879c <prvAddNewTaskToReadyList+0xc8>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d109      	bne.n	8008706 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80086f2:	4a2a      	ldr	r2, [pc, #168]	@ (800879c <prvAddNewTaskToReadyList+0xc8>)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80086f8:	4b27      	ldr	r3, [pc, #156]	@ (8008798 <prvAddNewTaskToReadyList+0xc4>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d110      	bne.n	8008722 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008700:	f000 fc34 	bl	8008f6c <prvInitialiseTaskLists>
 8008704:	e00d      	b.n	8008722 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008706:	4b26      	ldr	r3, [pc, #152]	@ (80087a0 <prvAddNewTaskToReadyList+0xcc>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d109      	bne.n	8008722 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800870e:	4b23      	ldr	r3, [pc, #140]	@ (800879c <prvAddNewTaskToReadyList+0xc8>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008718:	429a      	cmp	r2, r3
 800871a:	d802      	bhi.n	8008722 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800871c:	4a1f      	ldr	r2, [pc, #124]	@ (800879c <prvAddNewTaskToReadyList+0xc8>)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008722:	4b20      	ldr	r3, [pc, #128]	@ (80087a4 <prvAddNewTaskToReadyList+0xd0>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	3301      	adds	r3, #1
 8008728:	4a1e      	ldr	r2, [pc, #120]	@ (80087a4 <prvAddNewTaskToReadyList+0xd0>)
 800872a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800872c:	4b1d      	ldr	r3, [pc, #116]	@ (80087a4 <prvAddNewTaskToReadyList+0xd0>)
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008738:	4b1b      	ldr	r3, [pc, #108]	@ (80087a8 <prvAddNewTaskToReadyList+0xd4>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	429a      	cmp	r2, r3
 800873e:	d903      	bls.n	8008748 <prvAddNewTaskToReadyList+0x74>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008744:	4a18      	ldr	r2, [pc, #96]	@ (80087a8 <prvAddNewTaskToReadyList+0xd4>)
 8008746:	6013      	str	r3, [r2, #0]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800874c:	4613      	mov	r3, r2
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	4413      	add	r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4a15      	ldr	r2, [pc, #84]	@ (80087ac <prvAddNewTaskToReadyList+0xd8>)
 8008756:	441a      	add	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	3304      	adds	r3, #4
 800875c:	4619      	mov	r1, r3
 800875e:	4610      	mov	r0, r2
 8008760:	f7ff f8f5 	bl	800794e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008764:	f001 fa32 	bl	8009bcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008768:	4b0d      	ldr	r3, [pc, #52]	@ (80087a0 <prvAddNewTaskToReadyList+0xcc>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00e      	beq.n	800878e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008770:	4b0a      	ldr	r3, [pc, #40]	@ (800879c <prvAddNewTaskToReadyList+0xc8>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800877a:	429a      	cmp	r2, r3
 800877c:	d207      	bcs.n	800878e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800877e:	4b0c      	ldr	r3, [pc, #48]	@ (80087b0 <prvAddNewTaskToReadyList+0xdc>)
 8008780:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008784:	601a      	str	r2, [r3, #0]
 8008786:	f3bf 8f4f 	dsb	sy
 800878a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800878e:	bf00      	nop
 8008790:	3708      	adds	r7, #8
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
 8008796:	bf00      	nop
 8008798:	200012a8 	.word	0x200012a8
 800879c:	20000dd4 	.word	0x20000dd4
 80087a0:	200012b4 	.word	0x200012b4
 80087a4:	200012c4 	.word	0x200012c4
 80087a8:	200012b0 	.word	0x200012b0
 80087ac:	20000dd8 	.word	0x20000dd8
 80087b0:	e000ed04 	.word	0xe000ed04

080087b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80087bc:	2300      	movs	r3, #0
 80087be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d018      	beq.n	80087f8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80087c6:	4b14      	ldr	r3, [pc, #80]	@ (8008818 <vTaskDelay+0x64>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00b      	beq.n	80087e6 <vTaskDelay+0x32>
	__asm volatile
 80087ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d2:	f383 8811 	msr	BASEPRI, r3
 80087d6:	f3bf 8f6f 	isb	sy
 80087da:	f3bf 8f4f 	dsb	sy
 80087de:	60bb      	str	r3, [r7, #8]
}
 80087e0:	bf00      	nop
 80087e2:	bf00      	nop
 80087e4:	e7fd      	b.n	80087e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80087e6:	f000 f88b 	bl	8008900 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80087ea:	2100      	movs	r1, #0
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 fd15 	bl	800921c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80087f2:	f000 f893 	bl	800891c <xTaskResumeAll>
 80087f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d107      	bne.n	800880e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80087fe:	4b07      	ldr	r3, [pc, #28]	@ (800881c <vTaskDelay+0x68>)
 8008800:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008804:	601a      	str	r2, [r3, #0]
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800880e:	bf00      	nop
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	200012d0 	.word	0x200012d0
 800881c:	e000ed04 	.word	0xe000ed04

08008820 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b08a      	sub	sp, #40	@ 0x28
 8008824:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008826:	2300      	movs	r3, #0
 8008828:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800882a:	2300      	movs	r3, #0
 800882c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800882e:	463a      	mov	r2, r7
 8008830:	1d39      	adds	r1, r7, #4
 8008832:	f107 0308 	add.w	r3, r7, #8
 8008836:	4618      	mov	r0, r3
 8008838:	f7ff f828 	bl	800788c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800883c:	6839      	ldr	r1, [r7, #0]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	68ba      	ldr	r2, [r7, #8]
 8008842:	9202      	str	r2, [sp, #8]
 8008844:	9301      	str	r3, [sp, #4]
 8008846:	2300      	movs	r3, #0
 8008848:	9300      	str	r3, [sp, #0]
 800884a:	2300      	movs	r3, #0
 800884c:	460a      	mov	r2, r1
 800884e:	4924      	ldr	r1, [pc, #144]	@ (80088e0 <vTaskStartScheduler+0xc0>)
 8008850:	4824      	ldr	r0, [pc, #144]	@ (80088e4 <vTaskStartScheduler+0xc4>)
 8008852:	f7ff fdfb 	bl	800844c <xTaskCreateStatic>
 8008856:	4603      	mov	r3, r0
 8008858:	4a23      	ldr	r2, [pc, #140]	@ (80088e8 <vTaskStartScheduler+0xc8>)
 800885a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800885c:	4b22      	ldr	r3, [pc, #136]	@ (80088e8 <vTaskStartScheduler+0xc8>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d002      	beq.n	800886a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008864:	2301      	movs	r3, #1
 8008866:	617b      	str	r3, [r7, #20]
 8008868:	e001      	b.n	800886e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800886a:	2300      	movs	r3, #0
 800886c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	2b01      	cmp	r3, #1
 8008872:	d102      	bne.n	800887a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008874:	f000 fd26 	bl	80092c4 <xTimerCreateTimerTask>
 8008878:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d11b      	bne.n	80088b8 <vTaskStartScheduler+0x98>
	__asm volatile
 8008880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008884:	f383 8811 	msr	BASEPRI, r3
 8008888:	f3bf 8f6f 	isb	sy
 800888c:	f3bf 8f4f 	dsb	sy
 8008890:	613b      	str	r3, [r7, #16]
}
 8008892:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008894:	4b15      	ldr	r3, [pc, #84]	@ (80088ec <vTaskStartScheduler+0xcc>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	3354      	adds	r3, #84	@ 0x54
 800889a:	4a15      	ldr	r2, [pc, #84]	@ (80088f0 <vTaskStartScheduler+0xd0>)
 800889c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800889e:	4b15      	ldr	r3, [pc, #84]	@ (80088f4 <vTaskStartScheduler+0xd4>)
 80088a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80088a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80088a6:	4b14      	ldr	r3, [pc, #80]	@ (80088f8 <vTaskStartScheduler+0xd8>)
 80088a8:	2201      	movs	r2, #1
 80088aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80088ac:	4b13      	ldr	r3, [pc, #76]	@ (80088fc <vTaskStartScheduler+0xdc>)
 80088ae:	2200      	movs	r2, #0
 80088b0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80088b2:	f001 f8b5 	bl	8009a20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80088b6:	e00f      	b.n	80088d8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088be:	d10b      	bne.n	80088d8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80088c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c4:	f383 8811 	msr	BASEPRI, r3
 80088c8:	f3bf 8f6f 	isb	sy
 80088cc:	f3bf 8f4f 	dsb	sy
 80088d0:	60fb      	str	r3, [r7, #12]
}
 80088d2:	bf00      	nop
 80088d4:	bf00      	nop
 80088d6:	e7fd      	b.n	80088d4 <vTaskStartScheduler+0xb4>
}
 80088d8:	bf00      	nop
 80088da:	3718      	adds	r7, #24
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	0800e97c 	.word	0x0800e97c
 80088e4:	08008f3d 	.word	0x08008f3d
 80088e8:	200012cc 	.word	0x200012cc
 80088ec:	20000dd4 	.word	0x20000dd4
 80088f0:	2000001c 	.word	0x2000001c
 80088f4:	200012c8 	.word	0x200012c8
 80088f8:	200012b4 	.word	0x200012b4
 80088fc:	200012ac 	.word	0x200012ac

08008900 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008900:	b480      	push	{r7}
 8008902:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008904:	4b04      	ldr	r3, [pc, #16]	@ (8008918 <vTaskSuspendAll+0x18>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	3301      	adds	r3, #1
 800890a:	4a03      	ldr	r2, [pc, #12]	@ (8008918 <vTaskSuspendAll+0x18>)
 800890c:	6013      	str	r3, [r2, #0]
}
 800890e:	bf00      	nop
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr
 8008918:	200012d0 	.word	0x200012d0

0800891c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008922:	2300      	movs	r3, #0
 8008924:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008926:	2300      	movs	r3, #0
 8008928:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800892a:	4b42      	ldr	r3, [pc, #264]	@ (8008a34 <xTaskResumeAll+0x118>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10b      	bne.n	800894a <xTaskResumeAll+0x2e>
	__asm volatile
 8008932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	603b      	str	r3, [r7, #0]
}
 8008944:	bf00      	nop
 8008946:	bf00      	nop
 8008948:	e7fd      	b.n	8008946 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800894a:	f001 f90d 	bl	8009b68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800894e:	4b39      	ldr	r3, [pc, #228]	@ (8008a34 <xTaskResumeAll+0x118>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	3b01      	subs	r3, #1
 8008954:	4a37      	ldr	r2, [pc, #220]	@ (8008a34 <xTaskResumeAll+0x118>)
 8008956:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008958:	4b36      	ldr	r3, [pc, #216]	@ (8008a34 <xTaskResumeAll+0x118>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d162      	bne.n	8008a26 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008960:	4b35      	ldr	r3, [pc, #212]	@ (8008a38 <xTaskResumeAll+0x11c>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d05e      	beq.n	8008a26 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008968:	e02f      	b.n	80089ca <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800896a:	4b34      	ldr	r3, [pc, #208]	@ (8008a3c <xTaskResumeAll+0x120>)
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	3318      	adds	r3, #24
 8008976:	4618      	mov	r0, r3
 8008978:	f7ff f846 	bl	8007a08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	3304      	adds	r3, #4
 8008980:	4618      	mov	r0, r3
 8008982:	f7ff f841 	bl	8007a08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800898a:	4b2d      	ldr	r3, [pc, #180]	@ (8008a40 <xTaskResumeAll+0x124>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	429a      	cmp	r2, r3
 8008990:	d903      	bls.n	800899a <xTaskResumeAll+0x7e>
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008996:	4a2a      	ldr	r2, [pc, #168]	@ (8008a40 <xTaskResumeAll+0x124>)
 8008998:	6013      	str	r3, [r2, #0]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800899e:	4613      	mov	r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	4413      	add	r3, r2
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	4a27      	ldr	r2, [pc, #156]	@ (8008a44 <xTaskResumeAll+0x128>)
 80089a8:	441a      	add	r2, r3
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	3304      	adds	r3, #4
 80089ae:	4619      	mov	r1, r3
 80089b0:	4610      	mov	r0, r2
 80089b2:	f7fe ffcc 	bl	800794e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089ba:	4b23      	ldr	r3, [pc, #140]	@ (8008a48 <xTaskResumeAll+0x12c>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d302      	bcc.n	80089ca <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80089c4:	4b21      	ldr	r3, [pc, #132]	@ (8008a4c <xTaskResumeAll+0x130>)
 80089c6:	2201      	movs	r2, #1
 80089c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089ca:	4b1c      	ldr	r3, [pc, #112]	@ (8008a3c <xTaskResumeAll+0x120>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1cb      	bne.n	800896a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d001      	beq.n	80089dc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80089d8:	f000 fb6c 	bl	80090b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80089dc:	4b1c      	ldr	r3, [pc, #112]	@ (8008a50 <xTaskResumeAll+0x134>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d010      	beq.n	8008a0a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80089e8:	f000 f846 	bl	8008a78 <xTaskIncrementTick>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d002      	beq.n	80089f8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80089f2:	4b16      	ldr	r3, [pc, #88]	@ (8008a4c <xTaskResumeAll+0x130>)
 80089f4:	2201      	movs	r2, #1
 80089f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	3b01      	subs	r3, #1
 80089fc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d1f1      	bne.n	80089e8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8008a04:	4b12      	ldr	r3, [pc, #72]	@ (8008a50 <xTaskResumeAll+0x134>)
 8008a06:	2200      	movs	r2, #0
 8008a08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a0a:	4b10      	ldr	r3, [pc, #64]	@ (8008a4c <xTaskResumeAll+0x130>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d009      	beq.n	8008a26 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a12:	2301      	movs	r3, #1
 8008a14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a16:	4b0f      	ldr	r3, [pc, #60]	@ (8008a54 <xTaskResumeAll+0x138>)
 8008a18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a1c:	601a      	str	r2, [r3, #0]
 8008a1e:	f3bf 8f4f 	dsb	sy
 8008a22:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a26:	f001 f8d1 	bl	8009bcc <vPortExitCritical>

	return xAlreadyYielded;
 8008a2a:	68bb      	ldr	r3, [r7, #8]
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	200012d0 	.word	0x200012d0
 8008a38:	200012a8 	.word	0x200012a8
 8008a3c:	20001268 	.word	0x20001268
 8008a40:	200012b0 	.word	0x200012b0
 8008a44:	20000dd8 	.word	0x20000dd8
 8008a48:	20000dd4 	.word	0x20000dd4
 8008a4c:	200012bc 	.word	0x200012bc
 8008a50:	200012b8 	.word	0x200012b8
 8008a54:	e000ed04 	.word	0xe000ed04

08008a58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a5e:	4b05      	ldr	r3, [pc, #20]	@ (8008a74 <xTaskGetTickCount+0x1c>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a64:	687b      	ldr	r3, [r7, #4]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	370c      	adds	r7, #12
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	200012ac 	.word	0x200012ac

08008a78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b086      	sub	sp, #24
 8008a7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a82:	4b52      	ldr	r3, [pc, #328]	@ (8008bcc <xTaskIncrementTick+0x154>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	f040 808f 	bne.w	8008baa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a8c:	4b50      	ldr	r3, [pc, #320]	@ (8008bd0 <xTaskIncrementTick+0x158>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	3301      	adds	r3, #1
 8008a92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a94:	4a4e      	ldr	r2, [pc, #312]	@ (8008bd0 <xTaskIncrementTick+0x158>)
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d121      	bne.n	8008ae4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008aa0:	4b4c      	ldr	r3, [pc, #304]	@ (8008bd4 <xTaskIncrementTick+0x15c>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00b      	beq.n	8008ac2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aae:	f383 8811 	msr	BASEPRI, r3
 8008ab2:	f3bf 8f6f 	isb	sy
 8008ab6:	f3bf 8f4f 	dsb	sy
 8008aba:	603b      	str	r3, [r7, #0]
}
 8008abc:	bf00      	nop
 8008abe:	bf00      	nop
 8008ac0:	e7fd      	b.n	8008abe <xTaskIncrementTick+0x46>
 8008ac2:	4b44      	ldr	r3, [pc, #272]	@ (8008bd4 <xTaskIncrementTick+0x15c>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	60fb      	str	r3, [r7, #12]
 8008ac8:	4b43      	ldr	r3, [pc, #268]	@ (8008bd8 <xTaskIncrementTick+0x160>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a41      	ldr	r2, [pc, #260]	@ (8008bd4 <xTaskIncrementTick+0x15c>)
 8008ace:	6013      	str	r3, [r2, #0]
 8008ad0:	4a41      	ldr	r2, [pc, #260]	@ (8008bd8 <xTaskIncrementTick+0x160>)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6013      	str	r3, [r2, #0]
 8008ad6:	4b41      	ldr	r3, [pc, #260]	@ (8008bdc <xTaskIncrementTick+0x164>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	3301      	adds	r3, #1
 8008adc:	4a3f      	ldr	r2, [pc, #252]	@ (8008bdc <xTaskIncrementTick+0x164>)
 8008ade:	6013      	str	r3, [r2, #0]
 8008ae0:	f000 fae8 	bl	80090b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008ae4:	4b3e      	ldr	r3, [pc, #248]	@ (8008be0 <xTaskIncrementTick+0x168>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d34e      	bcc.n	8008b8c <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008aee:	4b39      	ldr	r3, [pc, #228]	@ (8008bd4 <xTaskIncrementTick+0x15c>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d101      	bne.n	8008afc <xTaskIncrementTick+0x84>
 8008af8:	2301      	movs	r3, #1
 8008afa:	e000      	b.n	8008afe <xTaskIncrementTick+0x86>
 8008afc:	2300      	movs	r3, #0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d004      	beq.n	8008b0c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b02:	4b37      	ldr	r3, [pc, #220]	@ (8008be0 <xTaskIncrementTick+0x168>)
 8008b04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008b08:	601a      	str	r2, [r3, #0]
					break;
 8008b0a:	e03f      	b.n	8008b8c <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008b0c:	4b31      	ldr	r3, [pc, #196]	@ (8008bd4 <xTaskIncrementTick+0x15c>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b1c:	693a      	ldr	r2, [r7, #16]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d203      	bcs.n	8008b2c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b24:	4a2e      	ldr	r2, [pc, #184]	@ (8008be0 <xTaskIncrementTick+0x168>)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6013      	str	r3, [r2, #0]
						break;
 8008b2a:	e02f      	b.n	8008b8c <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	3304      	adds	r3, #4
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7fe ff69 	bl	8007a08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d004      	beq.n	8008b48 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	3318      	adds	r3, #24
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7fe ff60 	bl	8007a08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b4c:	4b25      	ldr	r3, [pc, #148]	@ (8008be4 <xTaskIncrementTick+0x16c>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d903      	bls.n	8008b5c <xTaskIncrementTick+0xe4>
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b58:	4a22      	ldr	r2, [pc, #136]	@ (8008be4 <xTaskIncrementTick+0x16c>)
 8008b5a:	6013      	str	r3, [r2, #0]
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b60:	4613      	mov	r3, r2
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	4413      	add	r3, r2
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	4a1f      	ldr	r2, [pc, #124]	@ (8008be8 <xTaskIncrementTick+0x170>)
 8008b6a:	441a      	add	r2, r3
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	3304      	adds	r3, #4
 8008b70:	4619      	mov	r1, r3
 8008b72:	4610      	mov	r0, r2
 8008b74:	f7fe feeb 	bl	800794e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8008bec <xTaskIncrementTick+0x174>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d3b3      	bcc.n	8008aee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008b86:	2301      	movs	r3, #1
 8008b88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b8a:	e7b0      	b.n	8008aee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b8c:	4b17      	ldr	r3, [pc, #92]	@ (8008bec <xTaskIncrementTick+0x174>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b92:	4915      	ldr	r1, [pc, #84]	@ (8008be8 <xTaskIncrementTick+0x170>)
 8008b94:	4613      	mov	r3, r2
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	4413      	add	r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	440b      	add	r3, r1
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d907      	bls.n	8008bb4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	617b      	str	r3, [r7, #20]
 8008ba8:	e004      	b.n	8008bb4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008baa:	4b11      	ldr	r3, [pc, #68]	@ (8008bf0 <xTaskIncrementTick+0x178>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	4a0f      	ldr	r2, [pc, #60]	@ (8008bf0 <xTaskIncrementTick+0x178>)
 8008bb2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8008bf4 <xTaskIncrementTick+0x17c>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d001      	beq.n	8008bc0 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008bc0:	697b      	ldr	r3, [r7, #20]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3718      	adds	r7, #24
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	200012d0 	.word	0x200012d0
 8008bd0:	200012ac 	.word	0x200012ac
 8008bd4:	20001260 	.word	0x20001260
 8008bd8:	20001264 	.word	0x20001264
 8008bdc:	200012c0 	.word	0x200012c0
 8008be0:	200012c8 	.word	0x200012c8
 8008be4:	200012b0 	.word	0x200012b0
 8008be8:	20000dd8 	.word	0x20000dd8
 8008bec:	20000dd4 	.word	0x20000dd4
 8008bf0:	200012b8 	.word	0x200012b8
 8008bf4:	200012bc 	.word	0x200012bc

08008bf8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8008cac <vTaskSwitchContext+0xb4>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d003      	beq.n	8008c0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c06:	4b2a      	ldr	r3, [pc, #168]	@ (8008cb0 <vTaskSwitchContext+0xb8>)
 8008c08:	2201      	movs	r2, #1
 8008c0a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c0c:	e047      	b.n	8008c9e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008c0e:	4b28      	ldr	r3, [pc, #160]	@ (8008cb0 <vTaskSwitchContext+0xb8>)
 8008c10:	2200      	movs	r2, #0
 8008c12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008c14:	4b27      	ldr	r3, [pc, #156]	@ (8008cb4 <vTaskSwitchContext+0xbc>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	60fb      	str	r3, [r7, #12]
 8008c1a:	e011      	b.n	8008c40 <vTaskSwitchContext+0x48>
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d10b      	bne.n	8008c3a <vTaskSwitchContext+0x42>
	__asm volatile
 8008c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c26:	f383 8811 	msr	BASEPRI, r3
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	607b      	str	r3, [r7, #4]
}
 8008c34:	bf00      	nop
 8008c36:	bf00      	nop
 8008c38:	e7fd      	b.n	8008c36 <vTaskSwitchContext+0x3e>
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	60fb      	str	r3, [r7, #12]
 8008c40:	491d      	ldr	r1, [pc, #116]	@ (8008cb8 <vTaskSwitchContext+0xc0>)
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	4613      	mov	r3, r2
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	4413      	add	r3, r2
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	440b      	add	r3, r1
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d0e3      	beq.n	8008c1c <vTaskSwitchContext+0x24>
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	4613      	mov	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4413      	add	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4a16      	ldr	r2, [pc, #88]	@ (8008cb8 <vTaskSwitchContext+0xc0>)
 8008c60:	4413      	add	r3, r2
 8008c62:	60bb      	str	r3, [r7, #8]
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	685a      	ldr	r2, [r3, #4]
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	605a      	str	r2, [r3, #4]
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	3308      	adds	r3, #8
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d104      	bne.n	8008c84 <vTaskSwitchContext+0x8c>
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	685a      	ldr	r2, [r3, #4]
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	605a      	str	r2, [r3, #4]
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	4a0c      	ldr	r2, [pc, #48]	@ (8008cbc <vTaskSwitchContext+0xc4>)
 8008c8c:	6013      	str	r3, [r2, #0]
 8008c8e:	4a09      	ldr	r2, [pc, #36]	@ (8008cb4 <vTaskSwitchContext+0xbc>)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008c94:	4b09      	ldr	r3, [pc, #36]	@ (8008cbc <vTaskSwitchContext+0xc4>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	3354      	adds	r3, #84	@ 0x54
 8008c9a:	4a09      	ldr	r2, [pc, #36]	@ (8008cc0 <vTaskSwitchContext+0xc8>)
 8008c9c:	6013      	str	r3, [r2, #0]
}
 8008c9e:	bf00      	nop
 8008ca0:	3714      	adds	r7, #20
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	200012d0 	.word	0x200012d0
 8008cb0:	200012bc 	.word	0x200012bc
 8008cb4:	200012b0 	.word	0x200012b0
 8008cb8:	20000dd8 	.word	0x20000dd8
 8008cbc:	20000dd4 	.word	0x20000dd4
 8008cc0:	2000001c 	.word	0x2000001c

08008cc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d10b      	bne.n	8008cec <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd8:	f383 8811 	msr	BASEPRI, r3
 8008cdc:	f3bf 8f6f 	isb	sy
 8008ce0:	f3bf 8f4f 	dsb	sy
 8008ce4:	60fb      	str	r3, [r7, #12]
}
 8008ce6:	bf00      	nop
 8008ce8:	bf00      	nop
 8008cea:	e7fd      	b.n	8008ce8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008cec:	4b07      	ldr	r3, [pc, #28]	@ (8008d0c <vTaskPlaceOnEventList+0x48>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	3318      	adds	r3, #24
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f7fe fe4e 	bl	8007996 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008cfa:	2101      	movs	r1, #1
 8008cfc:	6838      	ldr	r0, [r7, #0]
 8008cfe:	f000 fa8d 	bl	800921c <prvAddCurrentTaskToDelayedList>
}
 8008d02:	bf00      	nop
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	20000dd4 	.word	0x20000dd4

08008d10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b086      	sub	sp, #24
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d10b      	bne.n	8008d3a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d26:	f383 8811 	msr	BASEPRI, r3
 8008d2a:	f3bf 8f6f 	isb	sy
 8008d2e:	f3bf 8f4f 	dsb	sy
 8008d32:	617b      	str	r3, [r7, #20]
}
 8008d34:	bf00      	nop
 8008d36:	bf00      	nop
 8008d38:	e7fd      	b.n	8008d36 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8008d64 <vTaskPlaceOnEventListRestricted+0x54>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	3318      	adds	r3, #24
 8008d40:	4619      	mov	r1, r3
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	f7fe fe03 	bl	800794e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d002      	beq.n	8008d54 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008d4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008d52:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d54:	6879      	ldr	r1, [r7, #4]
 8008d56:	68b8      	ldr	r0, [r7, #8]
 8008d58:	f000 fa60 	bl	800921c <prvAddCurrentTaskToDelayedList>
	}
 8008d5c:	bf00      	nop
 8008d5e:	3718      	adds	r7, #24
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	20000dd4 	.word	0x20000dd4

08008d68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b086      	sub	sp, #24
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d10b      	bne.n	8008d96 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d82:	f383 8811 	msr	BASEPRI, r3
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	60fb      	str	r3, [r7, #12]
}
 8008d90:	bf00      	nop
 8008d92:	bf00      	nop
 8008d94:	e7fd      	b.n	8008d92 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	3318      	adds	r3, #24
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7fe fe34 	bl	8007a08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008da0:	4b1d      	ldr	r3, [pc, #116]	@ (8008e18 <xTaskRemoveFromEventList+0xb0>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d11d      	bne.n	8008de4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	3304      	adds	r3, #4
 8008dac:	4618      	mov	r0, r3
 8008dae:	f7fe fe2b 	bl	8007a08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008db6:	4b19      	ldr	r3, [pc, #100]	@ (8008e1c <xTaskRemoveFromEventList+0xb4>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d903      	bls.n	8008dc6 <xTaskRemoveFromEventList+0x5e>
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dc2:	4a16      	ldr	r2, [pc, #88]	@ (8008e1c <xTaskRemoveFromEventList+0xb4>)
 8008dc4:	6013      	str	r3, [r2, #0]
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dca:	4613      	mov	r3, r2
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	4413      	add	r3, r2
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4a13      	ldr	r2, [pc, #76]	@ (8008e20 <xTaskRemoveFromEventList+0xb8>)
 8008dd4:	441a      	add	r2, r3
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	3304      	adds	r3, #4
 8008dda:	4619      	mov	r1, r3
 8008ddc:	4610      	mov	r0, r2
 8008dde:	f7fe fdb6 	bl	800794e <vListInsertEnd>
 8008de2:	e005      	b.n	8008df0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	3318      	adds	r3, #24
 8008de8:	4619      	mov	r1, r3
 8008dea:	480e      	ldr	r0, [pc, #56]	@ (8008e24 <xTaskRemoveFromEventList+0xbc>)
 8008dec:	f7fe fdaf 	bl	800794e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008df4:	4b0c      	ldr	r3, [pc, #48]	@ (8008e28 <xTaskRemoveFromEventList+0xc0>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d905      	bls.n	8008e0a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e02:	4b0a      	ldr	r3, [pc, #40]	@ (8008e2c <xTaskRemoveFromEventList+0xc4>)
 8008e04:	2201      	movs	r2, #1
 8008e06:	601a      	str	r2, [r3, #0]
 8008e08:	e001      	b.n	8008e0e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008e0e:	697b      	ldr	r3, [r7, #20]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3718      	adds	r7, #24
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	200012d0 	.word	0x200012d0
 8008e1c:	200012b0 	.word	0x200012b0
 8008e20:	20000dd8 	.word	0x20000dd8
 8008e24:	20001268 	.word	0x20001268
 8008e28:	20000dd4 	.word	0x20000dd4
 8008e2c:	200012bc 	.word	0x200012bc

08008e30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e38:	4b06      	ldr	r3, [pc, #24]	@ (8008e54 <vTaskInternalSetTimeOutState+0x24>)
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e40:	4b05      	ldr	r3, [pc, #20]	@ (8008e58 <vTaskInternalSetTimeOutState+0x28>)
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	605a      	str	r2, [r3, #4]
}
 8008e48:	bf00      	nop
 8008e4a:	370c      	adds	r7, #12
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr
 8008e54:	200012c0 	.word	0x200012c0
 8008e58:	200012ac 	.word	0x200012ac

08008e5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b088      	sub	sp, #32
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d10b      	bne.n	8008e84 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e70:	f383 8811 	msr	BASEPRI, r3
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	f3bf 8f4f 	dsb	sy
 8008e7c:	613b      	str	r3, [r7, #16]
}
 8008e7e:	bf00      	nop
 8008e80:	bf00      	nop
 8008e82:	e7fd      	b.n	8008e80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d10b      	bne.n	8008ea2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e8e:	f383 8811 	msr	BASEPRI, r3
 8008e92:	f3bf 8f6f 	isb	sy
 8008e96:	f3bf 8f4f 	dsb	sy
 8008e9a:	60fb      	str	r3, [r7, #12]
}
 8008e9c:	bf00      	nop
 8008e9e:	bf00      	nop
 8008ea0:	e7fd      	b.n	8008e9e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008ea2:	f000 fe61 	bl	8009b68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8008f1c <xTaskCheckForTimeOut+0xc0>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	69ba      	ldr	r2, [r7, #24]
 8008eb2:	1ad3      	subs	r3, r2, r3
 8008eb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ebe:	d102      	bne.n	8008ec6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	61fb      	str	r3, [r7, #28]
 8008ec4:	e023      	b.n	8008f0e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	4b15      	ldr	r3, [pc, #84]	@ (8008f20 <xTaskCheckForTimeOut+0xc4>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d007      	beq.n	8008ee2 <xTaskCheckForTimeOut+0x86>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	69ba      	ldr	r2, [r7, #24]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d302      	bcc.n	8008ee2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008edc:	2301      	movs	r3, #1
 8008ede:	61fb      	str	r3, [r7, #28]
 8008ee0:	e015      	b.n	8008f0e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	697a      	ldr	r2, [r7, #20]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d20b      	bcs.n	8008f04 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	1ad2      	subs	r2, r2, r3
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f7ff ff99 	bl	8008e30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008efe:	2300      	movs	r3, #0
 8008f00:	61fb      	str	r3, [r7, #28]
 8008f02:	e004      	b.n	8008f0e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	2200      	movs	r2, #0
 8008f08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f0e:	f000 fe5d 	bl	8009bcc <vPortExitCritical>

	return xReturn;
 8008f12:	69fb      	ldr	r3, [r7, #28]
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3720      	adds	r7, #32
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	200012ac 	.word	0x200012ac
 8008f20:	200012c0 	.word	0x200012c0

08008f24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f24:	b480      	push	{r7}
 8008f26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f28:	4b03      	ldr	r3, [pc, #12]	@ (8008f38 <vTaskMissedYield+0x14>)
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	601a      	str	r2, [r3, #0]
}
 8008f2e:	bf00      	nop
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr
 8008f38:	200012bc 	.word	0x200012bc

08008f3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f44:	f000 f852 	bl	8008fec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f48:	4b06      	ldr	r3, [pc, #24]	@ (8008f64 <prvIdleTask+0x28>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d9f9      	bls.n	8008f44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008f50:	4b05      	ldr	r3, [pc, #20]	@ (8008f68 <prvIdleTask+0x2c>)
 8008f52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f56:	601a      	str	r2, [r3, #0]
 8008f58:	f3bf 8f4f 	dsb	sy
 8008f5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008f60:	e7f0      	b.n	8008f44 <prvIdleTask+0x8>
 8008f62:	bf00      	nop
 8008f64:	20000dd8 	.word	0x20000dd8
 8008f68:	e000ed04 	.word	0xe000ed04

08008f6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f72:	2300      	movs	r3, #0
 8008f74:	607b      	str	r3, [r7, #4]
 8008f76:	e00c      	b.n	8008f92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	4413      	add	r3, r2
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	4a12      	ldr	r2, [pc, #72]	@ (8008fcc <prvInitialiseTaskLists+0x60>)
 8008f84:	4413      	add	r3, r2
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7fe fcb4 	bl	80078f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	3301      	adds	r3, #1
 8008f90:	607b      	str	r3, [r7, #4]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2b37      	cmp	r3, #55	@ 0x37
 8008f96:	d9ef      	bls.n	8008f78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008f98:	480d      	ldr	r0, [pc, #52]	@ (8008fd0 <prvInitialiseTaskLists+0x64>)
 8008f9a:	f7fe fcab 	bl	80078f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f9e:	480d      	ldr	r0, [pc, #52]	@ (8008fd4 <prvInitialiseTaskLists+0x68>)
 8008fa0:	f7fe fca8 	bl	80078f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008fa4:	480c      	ldr	r0, [pc, #48]	@ (8008fd8 <prvInitialiseTaskLists+0x6c>)
 8008fa6:	f7fe fca5 	bl	80078f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008faa:	480c      	ldr	r0, [pc, #48]	@ (8008fdc <prvInitialiseTaskLists+0x70>)
 8008fac:	f7fe fca2 	bl	80078f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008fb0:	480b      	ldr	r0, [pc, #44]	@ (8008fe0 <prvInitialiseTaskLists+0x74>)
 8008fb2:	f7fe fc9f 	bl	80078f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8008fe4 <prvInitialiseTaskLists+0x78>)
 8008fb8:	4a05      	ldr	r2, [pc, #20]	@ (8008fd0 <prvInitialiseTaskLists+0x64>)
 8008fba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8008fe8 <prvInitialiseTaskLists+0x7c>)
 8008fbe:	4a05      	ldr	r2, [pc, #20]	@ (8008fd4 <prvInitialiseTaskLists+0x68>)
 8008fc0:	601a      	str	r2, [r3, #0]
}
 8008fc2:	bf00      	nop
 8008fc4:	3708      	adds	r7, #8
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	20000dd8 	.word	0x20000dd8
 8008fd0:	20001238 	.word	0x20001238
 8008fd4:	2000124c 	.word	0x2000124c
 8008fd8:	20001268 	.word	0x20001268
 8008fdc:	2000127c 	.word	0x2000127c
 8008fe0:	20001294 	.word	0x20001294
 8008fe4:	20001260 	.word	0x20001260
 8008fe8:	20001264 	.word	0x20001264

08008fec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ff2:	e019      	b.n	8009028 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ff4:	f000 fdb8 	bl	8009b68 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008ff8:	4b10      	ldr	r3, [pc, #64]	@ (800903c <prvCheckTasksWaitingTermination+0x50>)
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	3304      	adds	r3, #4
 8009004:	4618      	mov	r0, r3
 8009006:	f7fe fcff 	bl	8007a08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800900a:	4b0d      	ldr	r3, [pc, #52]	@ (8009040 <prvCheckTasksWaitingTermination+0x54>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	3b01      	subs	r3, #1
 8009010:	4a0b      	ldr	r2, [pc, #44]	@ (8009040 <prvCheckTasksWaitingTermination+0x54>)
 8009012:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009014:	4b0b      	ldr	r3, [pc, #44]	@ (8009044 <prvCheckTasksWaitingTermination+0x58>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	3b01      	subs	r3, #1
 800901a:	4a0a      	ldr	r2, [pc, #40]	@ (8009044 <prvCheckTasksWaitingTermination+0x58>)
 800901c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800901e:	f000 fdd5 	bl	8009bcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 f810 	bl	8009048 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009028:	4b06      	ldr	r3, [pc, #24]	@ (8009044 <prvCheckTasksWaitingTermination+0x58>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d1e1      	bne.n	8008ff4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009030:	bf00      	nop
 8009032:	bf00      	nop
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	2000127c 	.word	0x2000127c
 8009040:	200012a8 	.word	0x200012a8
 8009044:	20001290 	.word	0x20001290

08009048 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	3354      	adds	r3, #84	@ 0x54
 8009054:	4618      	mov	r0, r3
 8009056:	f002 f851 	bl	800b0fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009060:	2b00      	cmp	r3, #0
 8009062:	d108      	bne.n	8009076 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009068:	4618      	mov	r0, r3
 800906a:	f000 ff67 	bl	8009f3c <vPortFree>
				vPortFree( pxTCB );
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 ff64 	bl	8009f3c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009074:	e019      	b.n	80090aa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800907c:	2b01      	cmp	r3, #1
 800907e:	d103      	bne.n	8009088 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 ff5b 	bl	8009f3c <vPortFree>
	}
 8009086:	e010      	b.n	80090aa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800908e:	2b02      	cmp	r3, #2
 8009090:	d00b      	beq.n	80090aa <prvDeleteTCB+0x62>
	__asm volatile
 8009092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009096:	f383 8811 	msr	BASEPRI, r3
 800909a:	f3bf 8f6f 	isb	sy
 800909e:	f3bf 8f4f 	dsb	sy
 80090a2:	60fb      	str	r3, [r7, #12]
}
 80090a4:	bf00      	nop
 80090a6:	bf00      	nop
 80090a8:	e7fd      	b.n	80090a6 <prvDeleteTCB+0x5e>
	}
 80090aa:	bf00      	nop
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
	...

080090b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090ba:	4b0f      	ldr	r3, [pc, #60]	@ (80090f8 <prvResetNextTaskUnblockTime+0x44>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d101      	bne.n	80090c8 <prvResetNextTaskUnblockTime+0x14>
 80090c4:	2301      	movs	r3, #1
 80090c6:	e000      	b.n	80090ca <prvResetNextTaskUnblockTime+0x16>
 80090c8:	2300      	movs	r3, #0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d004      	beq.n	80090d8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80090ce:	4b0b      	ldr	r3, [pc, #44]	@ (80090fc <prvResetNextTaskUnblockTime+0x48>)
 80090d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80090d4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80090d6:	e008      	b.n	80090ea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80090d8:	4b07      	ldr	r3, [pc, #28]	@ (80090f8 <prvResetNextTaskUnblockTime+0x44>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	4a05      	ldr	r2, [pc, #20]	@ (80090fc <prvResetNextTaskUnblockTime+0x48>)
 80090e8:	6013      	str	r3, [r2, #0]
}
 80090ea:	bf00      	nop
 80090ec:	370c      	adds	r7, #12
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	20001260 	.word	0x20001260
 80090fc:	200012c8 	.word	0x200012c8

08009100 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009106:	4b0b      	ldr	r3, [pc, #44]	@ (8009134 <xTaskGetSchedulerState+0x34>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d102      	bne.n	8009114 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800910e:	2301      	movs	r3, #1
 8009110:	607b      	str	r3, [r7, #4]
 8009112:	e008      	b.n	8009126 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009114:	4b08      	ldr	r3, [pc, #32]	@ (8009138 <xTaskGetSchedulerState+0x38>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d102      	bne.n	8009122 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800911c:	2302      	movs	r3, #2
 800911e:	607b      	str	r3, [r7, #4]
 8009120:	e001      	b.n	8009126 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009122:	2300      	movs	r3, #0
 8009124:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009126:	687b      	ldr	r3, [r7, #4]
	}
 8009128:	4618      	mov	r0, r3
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr
 8009134:	200012b4 	.word	0x200012b4
 8009138:	200012d0 	.word	0x200012d0

0800913c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800913c:	b580      	push	{r7, lr}
 800913e:	b086      	sub	sp, #24
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009148:	2300      	movs	r3, #0
 800914a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d058      	beq.n	8009204 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009152:	4b2f      	ldr	r3, [pc, #188]	@ (8009210 <xTaskPriorityDisinherit+0xd4>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	693a      	ldr	r2, [r7, #16]
 8009158:	429a      	cmp	r2, r3
 800915a:	d00b      	beq.n	8009174 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800915c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009160:	f383 8811 	msr	BASEPRI, r3
 8009164:	f3bf 8f6f 	isb	sy
 8009168:	f3bf 8f4f 	dsb	sy
 800916c:	60fb      	str	r3, [r7, #12]
}
 800916e:	bf00      	nop
 8009170:	bf00      	nop
 8009172:	e7fd      	b.n	8009170 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009178:	2b00      	cmp	r3, #0
 800917a:	d10b      	bne.n	8009194 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800917c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009180:	f383 8811 	msr	BASEPRI, r3
 8009184:	f3bf 8f6f 	isb	sy
 8009188:	f3bf 8f4f 	dsb	sy
 800918c:	60bb      	str	r3, [r7, #8]
}
 800918e:	bf00      	nop
 8009190:	bf00      	nop
 8009192:	e7fd      	b.n	8009190 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009198:	1e5a      	subs	r2, r3, #1
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d02c      	beq.n	8009204 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d128      	bne.n	8009204 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	3304      	adds	r3, #4
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7fe fc26 	bl	8007a08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091d4:	4b0f      	ldr	r3, [pc, #60]	@ (8009214 <xTaskPriorityDisinherit+0xd8>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d903      	bls.n	80091e4 <xTaskPriorityDisinherit+0xa8>
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091e0:	4a0c      	ldr	r2, [pc, #48]	@ (8009214 <xTaskPriorityDisinherit+0xd8>)
 80091e2:	6013      	str	r3, [r2, #0]
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091e8:	4613      	mov	r3, r2
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	4413      	add	r3, r2
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	4a09      	ldr	r2, [pc, #36]	@ (8009218 <xTaskPriorityDisinherit+0xdc>)
 80091f2:	441a      	add	r2, r3
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	3304      	adds	r3, #4
 80091f8:	4619      	mov	r1, r3
 80091fa:	4610      	mov	r0, r2
 80091fc:	f7fe fba7 	bl	800794e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009200:	2301      	movs	r3, #1
 8009202:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009204:	697b      	ldr	r3, [r7, #20]
	}
 8009206:	4618      	mov	r0, r3
 8009208:	3718      	adds	r7, #24
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	20000dd4 	.word	0x20000dd4
 8009214:	200012b0 	.word	0x200012b0
 8009218:	20000dd8 	.word	0x20000dd8

0800921c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009226:	4b21      	ldr	r3, [pc, #132]	@ (80092ac <prvAddCurrentTaskToDelayedList+0x90>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800922c:	4b20      	ldr	r3, [pc, #128]	@ (80092b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	3304      	adds	r3, #4
 8009232:	4618      	mov	r0, r3
 8009234:	f7fe fbe8 	bl	8007a08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800923e:	d10a      	bne.n	8009256 <prvAddCurrentTaskToDelayedList+0x3a>
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d007      	beq.n	8009256 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009246:	4b1a      	ldr	r3, [pc, #104]	@ (80092b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	3304      	adds	r3, #4
 800924c:	4619      	mov	r1, r3
 800924e:	4819      	ldr	r0, [pc, #100]	@ (80092b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009250:	f7fe fb7d 	bl	800794e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009254:	e026      	b.n	80092a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009256:	68fa      	ldr	r2, [r7, #12]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4413      	add	r3, r2
 800925c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800925e:	4b14      	ldr	r3, [pc, #80]	@ (80092b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	68ba      	ldr	r2, [r7, #8]
 8009264:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009266:	68ba      	ldr	r2, [r7, #8]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	429a      	cmp	r2, r3
 800926c:	d209      	bcs.n	8009282 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800926e:	4b12      	ldr	r3, [pc, #72]	@ (80092b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	4b0f      	ldr	r3, [pc, #60]	@ (80092b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	3304      	adds	r3, #4
 8009278:	4619      	mov	r1, r3
 800927a:	4610      	mov	r0, r2
 800927c:	f7fe fb8b 	bl	8007996 <vListInsert>
}
 8009280:	e010      	b.n	80092a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009282:	4b0e      	ldr	r3, [pc, #56]	@ (80092bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	4b0a      	ldr	r3, [pc, #40]	@ (80092b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	3304      	adds	r3, #4
 800928c:	4619      	mov	r1, r3
 800928e:	4610      	mov	r0, r2
 8009290:	f7fe fb81 	bl	8007996 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009294:	4b0a      	ldr	r3, [pc, #40]	@ (80092c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	68ba      	ldr	r2, [r7, #8]
 800929a:	429a      	cmp	r2, r3
 800929c:	d202      	bcs.n	80092a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800929e:	4a08      	ldr	r2, [pc, #32]	@ (80092c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	6013      	str	r3, [r2, #0]
}
 80092a4:	bf00      	nop
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}
 80092ac:	200012ac 	.word	0x200012ac
 80092b0:	20000dd4 	.word	0x20000dd4
 80092b4:	20001294 	.word	0x20001294
 80092b8:	20001264 	.word	0x20001264
 80092bc:	20001260 	.word	0x20001260
 80092c0:	200012c8 	.word	0x200012c8

080092c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b08a      	sub	sp, #40	@ 0x28
 80092c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80092ca:	2300      	movs	r3, #0
 80092cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80092ce:	f000 fad9 	bl	8009884 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80092d2:	4b1d      	ldr	r3, [pc, #116]	@ (8009348 <xTimerCreateTimerTask+0x84>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d021      	beq.n	800931e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80092da:	2300      	movs	r3, #0
 80092dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80092de:	2300      	movs	r3, #0
 80092e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80092e2:	1d3a      	adds	r2, r7, #4
 80092e4:	f107 0108 	add.w	r1, r7, #8
 80092e8:	f107 030c 	add.w	r3, r7, #12
 80092ec:	4618      	mov	r0, r3
 80092ee:	f7fe fae7 	bl	80078c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80092f2:	6879      	ldr	r1, [r7, #4]
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	68fa      	ldr	r2, [r7, #12]
 80092f8:	9202      	str	r2, [sp, #8]
 80092fa:	9301      	str	r3, [sp, #4]
 80092fc:	2302      	movs	r3, #2
 80092fe:	9300      	str	r3, [sp, #0]
 8009300:	2300      	movs	r3, #0
 8009302:	460a      	mov	r2, r1
 8009304:	4911      	ldr	r1, [pc, #68]	@ (800934c <xTimerCreateTimerTask+0x88>)
 8009306:	4812      	ldr	r0, [pc, #72]	@ (8009350 <xTimerCreateTimerTask+0x8c>)
 8009308:	f7ff f8a0 	bl	800844c <xTaskCreateStatic>
 800930c:	4603      	mov	r3, r0
 800930e:	4a11      	ldr	r2, [pc, #68]	@ (8009354 <xTimerCreateTimerTask+0x90>)
 8009310:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009312:	4b10      	ldr	r3, [pc, #64]	@ (8009354 <xTimerCreateTimerTask+0x90>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d001      	beq.n	800931e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800931a:	2301      	movs	r3, #1
 800931c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d10b      	bne.n	800933c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009328:	f383 8811 	msr	BASEPRI, r3
 800932c:	f3bf 8f6f 	isb	sy
 8009330:	f3bf 8f4f 	dsb	sy
 8009334:	613b      	str	r3, [r7, #16]
}
 8009336:	bf00      	nop
 8009338:	bf00      	nop
 800933a:	e7fd      	b.n	8009338 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800933c:	697b      	ldr	r3, [r7, #20]
}
 800933e:	4618      	mov	r0, r3
 8009340:	3718      	adds	r7, #24
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	20001304 	.word	0x20001304
 800934c:	0800e984 	.word	0x0800e984
 8009350:	08009479 	.word	0x08009479
 8009354:	20001308 	.word	0x20001308

08009358 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b08a      	sub	sp, #40	@ 0x28
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	607a      	str	r2, [r7, #4]
 8009364:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009366:	2300      	movs	r3, #0
 8009368:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d10b      	bne.n	8009388 <xTimerGenericCommand+0x30>
	__asm volatile
 8009370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009374:	f383 8811 	msr	BASEPRI, r3
 8009378:	f3bf 8f6f 	isb	sy
 800937c:	f3bf 8f4f 	dsb	sy
 8009380:	623b      	str	r3, [r7, #32]
}
 8009382:	bf00      	nop
 8009384:	bf00      	nop
 8009386:	e7fd      	b.n	8009384 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009388:	4b19      	ldr	r3, [pc, #100]	@ (80093f0 <xTimerGenericCommand+0x98>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d02a      	beq.n	80093e6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	2b05      	cmp	r3, #5
 80093a0:	dc18      	bgt.n	80093d4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80093a2:	f7ff fead 	bl	8009100 <xTaskGetSchedulerState>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b02      	cmp	r3, #2
 80093aa:	d109      	bne.n	80093c0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80093ac:	4b10      	ldr	r3, [pc, #64]	@ (80093f0 <xTimerGenericCommand+0x98>)
 80093ae:	6818      	ldr	r0, [r3, #0]
 80093b0:	f107 0110 	add.w	r1, r7, #16
 80093b4:	2300      	movs	r3, #0
 80093b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093b8:	f7fe fc5a 	bl	8007c70 <xQueueGenericSend>
 80093bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80093be:	e012      	b.n	80093e6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80093c0:	4b0b      	ldr	r3, [pc, #44]	@ (80093f0 <xTimerGenericCommand+0x98>)
 80093c2:	6818      	ldr	r0, [r3, #0]
 80093c4:	f107 0110 	add.w	r1, r7, #16
 80093c8:	2300      	movs	r3, #0
 80093ca:	2200      	movs	r2, #0
 80093cc:	f7fe fc50 	bl	8007c70 <xQueueGenericSend>
 80093d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80093d2:	e008      	b.n	80093e6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80093d4:	4b06      	ldr	r3, [pc, #24]	@ (80093f0 <xTimerGenericCommand+0x98>)
 80093d6:	6818      	ldr	r0, [r3, #0]
 80093d8:	f107 0110 	add.w	r1, r7, #16
 80093dc:	2300      	movs	r3, #0
 80093de:	683a      	ldr	r2, [r7, #0]
 80093e0:	f7fe fd48 	bl	8007e74 <xQueueGenericSendFromISR>
 80093e4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80093e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3728      	adds	r7, #40	@ 0x28
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}
 80093f0:	20001304 	.word	0x20001304

080093f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b088      	sub	sp, #32
 80093f8:	af02      	add	r7, sp, #8
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80093fe:	4b1d      	ldr	r3, [pc, #116]	@ (8009474 <prvProcessExpiredTimer+0x80>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	3304      	adds	r3, #4
 800940c:	4618      	mov	r0, r3
 800940e:	f7fe fafb 	bl	8007a08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	69db      	ldr	r3, [r3, #28]
 8009416:	2b01      	cmp	r3, #1
 8009418:	d123      	bne.n	8009462 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	699a      	ldr	r2, [r3, #24]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	18d1      	adds	r1, r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	683a      	ldr	r2, [r7, #0]
 8009426:	6978      	ldr	r0, [r7, #20]
 8009428:	f000 f8cc 	bl	80095c4 <prvInsertTimerInActiveList>
 800942c:	4603      	mov	r3, r0
 800942e:	2b00      	cmp	r3, #0
 8009430:	d017      	beq.n	8009462 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009432:	2300      	movs	r3, #0
 8009434:	9300      	str	r3, [sp, #0]
 8009436:	2300      	movs	r3, #0
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	2100      	movs	r1, #0
 800943c:	6978      	ldr	r0, [r7, #20]
 800943e:	f7ff ff8b 	bl	8009358 <xTimerGenericCommand>
 8009442:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d10b      	bne.n	8009462 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 800944a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800944e:	f383 8811 	msr	BASEPRI, r3
 8009452:	f3bf 8f6f 	isb	sy
 8009456:	f3bf 8f4f 	dsb	sy
 800945a:	60fb      	str	r3, [r7, #12]
}
 800945c:	bf00      	nop
 800945e:	bf00      	nop
 8009460:	e7fd      	b.n	800945e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009466:	6978      	ldr	r0, [r7, #20]
 8009468:	4798      	blx	r3
}
 800946a:	bf00      	nop
 800946c:	3718      	adds	r7, #24
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	200012fc 	.word	0x200012fc

08009478 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009480:	f107 0308 	add.w	r3, r7, #8
 8009484:	4618      	mov	r0, r3
 8009486:	f000 f859 	bl	800953c <prvGetNextExpireTime>
 800948a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	4619      	mov	r1, r3
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f000 f805 	bl	80094a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009496:	f000 f8d7 	bl	8009648 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800949a:	bf00      	nop
 800949c:	e7f0      	b.n	8009480 <prvTimerTask+0x8>
	...

080094a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80094aa:	f7ff fa29 	bl	8008900 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094ae:	f107 0308 	add.w	r3, r7, #8
 80094b2:	4618      	mov	r0, r3
 80094b4:	f000 f866 	bl	8009584 <prvSampleTimeNow>
 80094b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d130      	bne.n	8009522 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d10a      	bne.n	80094dc <prvProcessTimerOrBlockTask+0x3c>
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d806      	bhi.n	80094dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80094ce:	f7ff fa25 	bl	800891c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80094d2:	68f9      	ldr	r1, [r7, #12]
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f7ff ff8d 	bl	80093f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80094da:	e024      	b.n	8009526 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d008      	beq.n	80094f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80094e2:	4b13      	ldr	r3, [pc, #76]	@ (8009530 <prvProcessTimerOrBlockTask+0x90>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	bf0c      	ite	eq
 80094ec:	2301      	moveq	r3, #1
 80094ee:	2300      	movne	r3, #0
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80094f4:	4b0f      	ldr	r3, [pc, #60]	@ (8009534 <prvProcessTimerOrBlockTask+0x94>)
 80094f6:	6818      	ldr	r0, [r3, #0]
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	1ad3      	subs	r3, r2, r3
 80094fe:	683a      	ldr	r2, [r7, #0]
 8009500:	4619      	mov	r1, r3
 8009502:	f7fe ff6f 	bl	80083e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009506:	f7ff fa09 	bl	800891c <xTaskResumeAll>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d10a      	bne.n	8009526 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009510:	4b09      	ldr	r3, [pc, #36]	@ (8009538 <prvProcessTimerOrBlockTask+0x98>)
 8009512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009516:	601a      	str	r2, [r3, #0]
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	f3bf 8f6f 	isb	sy
}
 8009520:	e001      	b.n	8009526 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009522:	f7ff f9fb 	bl	800891c <xTaskResumeAll>
}
 8009526:	bf00      	nop
 8009528:	3710      	adds	r7, #16
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	20001300 	.word	0x20001300
 8009534:	20001304 	.word	0x20001304
 8009538:	e000ed04 	.word	0xe000ed04

0800953c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800953c:	b480      	push	{r7}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009544:	4b0e      	ldr	r3, [pc, #56]	@ (8009580 <prvGetNextExpireTime+0x44>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	bf0c      	ite	eq
 800954e:	2301      	moveq	r3, #1
 8009550:	2300      	movne	r3, #0
 8009552:	b2db      	uxtb	r3, r3
 8009554:	461a      	mov	r2, r3
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d105      	bne.n	800956e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009562:	4b07      	ldr	r3, [pc, #28]	@ (8009580 <prvGetNextExpireTime+0x44>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	68db      	ldr	r3, [r3, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	60fb      	str	r3, [r7, #12]
 800956c:	e001      	b.n	8009572 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800956e:	2300      	movs	r3, #0
 8009570:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009572:	68fb      	ldr	r3, [r7, #12]
}
 8009574:	4618      	mov	r0, r3
 8009576:	3714      	adds	r7, #20
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr
 8009580:	200012fc 	.word	0x200012fc

08009584 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800958c:	f7ff fa64 	bl	8008a58 <xTaskGetTickCount>
 8009590:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009592:	4b0b      	ldr	r3, [pc, #44]	@ (80095c0 <prvSampleTimeNow+0x3c>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68fa      	ldr	r2, [r7, #12]
 8009598:	429a      	cmp	r2, r3
 800959a:	d205      	bcs.n	80095a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800959c:	f000 f910 	bl	80097c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	601a      	str	r2, [r3, #0]
 80095a6:	e002      	b.n	80095ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80095ae:	4a04      	ldr	r2, [pc, #16]	@ (80095c0 <prvSampleTimeNow+0x3c>)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80095b4:	68fb      	ldr	r3, [r7, #12]
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	2000130c 	.word	0x2000130c

080095c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b086      	sub	sp, #24
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	607a      	str	r2, [r7, #4]
 80095d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80095d2:	2300      	movs	r3, #0
 80095d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	68ba      	ldr	r2, [r7, #8]
 80095da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	68fa      	ldr	r2, [r7, #12]
 80095e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80095e2:	68ba      	ldr	r2, [r7, #8]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d812      	bhi.n	8009610 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	1ad2      	subs	r2, r2, r3
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	699b      	ldr	r3, [r3, #24]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d302      	bcc.n	80095fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80095f8:	2301      	movs	r3, #1
 80095fa:	617b      	str	r3, [r7, #20]
 80095fc:	e01b      	b.n	8009636 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80095fe:	4b10      	ldr	r3, [pc, #64]	@ (8009640 <prvInsertTimerInActiveList+0x7c>)
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	3304      	adds	r3, #4
 8009606:	4619      	mov	r1, r3
 8009608:	4610      	mov	r0, r2
 800960a:	f7fe f9c4 	bl	8007996 <vListInsert>
 800960e:	e012      	b.n	8009636 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	429a      	cmp	r2, r3
 8009616:	d206      	bcs.n	8009626 <prvInsertTimerInActiveList+0x62>
 8009618:	68ba      	ldr	r2, [r7, #8]
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	429a      	cmp	r2, r3
 800961e:	d302      	bcc.n	8009626 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009620:	2301      	movs	r3, #1
 8009622:	617b      	str	r3, [r7, #20]
 8009624:	e007      	b.n	8009636 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009626:	4b07      	ldr	r3, [pc, #28]	@ (8009644 <prvInsertTimerInActiveList+0x80>)
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	3304      	adds	r3, #4
 800962e:	4619      	mov	r1, r3
 8009630:	4610      	mov	r0, r2
 8009632:	f7fe f9b0 	bl	8007996 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009636:	697b      	ldr	r3, [r7, #20]
}
 8009638:	4618      	mov	r0, r3
 800963a:	3718      	adds	r7, #24
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	20001300 	.word	0x20001300
 8009644:	200012fc 	.word	0x200012fc

08009648 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b08e      	sub	sp, #56	@ 0x38
 800964c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800964e:	e0a5      	b.n	800979c <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	da19      	bge.n	800968a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009656:	1d3b      	adds	r3, r7, #4
 8009658:	3304      	adds	r3, #4
 800965a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800965c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800965e:	2b00      	cmp	r3, #0
 8009660:	d10b      	bne.n	800967a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009666:	f383 8811 	msr	BASEPRI, r3
 800966a:	f3bf 8f6f 	isb	sy
 800966e:	f3bf 8f4f 	dsb	sy
 8009672:	61fb      	str	r3, [r7, #28]
}
 8009674:	bf00      	nop
 8009676:	bf00      	nop
 8009678:	e7fd      	b.n	8009676 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800967a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009680:	6850      	ldr	r0, [r2, #4]
 8009682:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009684:	6892      	ldr	r2, [r2, #8]
 8009686:	4611      	mov	r1, r2
 8009688:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2b00      	cmp	r3, #0
 800968e:	f2c0 8085 	blt.w	800979c <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009698:	695b      	ldr	r3, [r3, #20]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d004      	beq.n	80096a8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800969e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a0:	3304      	adds	r3, #4
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7fe f9b0 	bl	8007a08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096a8:	463b      	mov	r3, r7
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7ff ff6a 	bl	8009584 <prvSampleTimeNow>
 80096b0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2b09      	cmp	r3, #9
 80096b6:	d86c      	bhi.n	8009792 <prvProcessReceivedCommands+0x14a>
 80096b8:	a201      	add	r2, pc, #4	@ (adr r2, 80096c0 <prvProcessReceivedCommands+0x78>)
 80096ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096be:	bf00      	nop
 80096c0:	080096e9 	.word	0x080096e9
 80096c4:	080096e9 	.word	0x080096e9
 80096c8:	080096e9 	.word	0x080096e9
 80096cc:	08009793 	.word	0x08009793
 80096d0:	08009747 	.word	0x08009747
 80096d4:	08009781 	.word	0x08009781
 80096d8:	080096e9 	.word	0x080096e9
 80096dc:	080096e9 	.word	0x080096e9
 80096e0:	08009793 	.word	0x08009793
 80096e4:	08009747 	.word	0x08009747
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80096e8:	68ba      	ldr	r2, [r7, #8]
 80096ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ec:	699b      	ldr	r3, [r3, #24]
 80096ee:	18d1      	adds	r1, r2, r3
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096f6:	f7ff ff65 	bl	80095c4 <prvInsertTimerInActiveList>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d04a      	beq.n	8009796 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009704:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009706:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800970a:	69db      	ldr	r3, [r3, #28]
 800970c:	2b01      	cmp	r3, #1
 800970e:	d142      	bne.n	8009796 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009710:	68ba      	ldr	r2, [r7, #8]
 8009712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009714:	699b      	ldr	r3, [r3, #24]
 8009716:	441a      	add	r2, r3
 8009718:	2300      	movs	r3, #0
 800971a:	9300      	str	r3, [sp, #0]
 800971c:	2300      	movs	r3, #0
 800971e:	2100      	movs	r1, #0
 8009720:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009722:	f7ff fe19 	bl	8009358 <xTimerGenericCommand>
 8009726:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009728:	6a3b      	ldr	r3, [r7, #32]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d133      	bne.n	8009796 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 800972e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009732:	f383 8811 	msr	BASEPRI, r3
 8009736:	f3bf 8f6f 	isb	sy
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	61bb      	str	r3, [r7, #24]
}
 8009740:	bf00      	nop
 8009742:	bf00      	nop
 8009744:	e7fd      	b.n	8009742 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009746:	68ba      	ldr	r2, [r7, #8]
 8009748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800974a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800974c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800974e:	699b      	ldr	r3, [r3, #24]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d10b      	bne.n	800976c <prvProcessReceivedCommands+0x124>
	__asm volatile
 8009754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009758:	f383 8811 	msr	BASEPRI, r3
 800975c:	f3bf 8f6f 	isb	sy
 8009760:	f3bf 8f4f 	dsb	sy
 8009764:	617b      	str	r3, [r7, #20]
}
 8009766:	bf00      	nop
 8009768:	bf00      	nop
 800976a:	e7fd      	b.n	8009768 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800976c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800976e:	699a      	ldr	r2, [r3, #24]
 8009770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009772:	18d1      	adds	r1, r2, r3
 8009774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009778:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800977a:	f7ff ff23 	bl	80095c4 <prvInsertTimerInActiveList>
					break;
 800977e:	e00d      	b.n	800979c <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009782:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009786:	2b00      	cmp	r3, #0
 8009788:	d107      	bne.n	800979a <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 800978a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800978c:	f000 fbd6 	bl	8009f3c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009790:	e003      	b.n	800979a <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8009792:	bf00      	nop
 8009794:	e002      	b.n	800979c <prvProcessReceivedCommands+0x154>
					break;
 8009796:	bf00      	nop
 8009798:	e000      	b.n	800979c <prvProcessReceivedCommands+0x154>
					break;
 800979a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800979c:	4b07      	ldr	r3, [pc, #28]	@ (80097bc <prvProcessReceivedCommands+0x174>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	1d39      	adds	r1, r7, #4
 80097a2:	2200      	movs	r2, #0
 80097a4:	4618      	mov	r0, r3
 80097a6:	f7fe fc01 	bl	8007fac <xQueueReceive>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	f47f af4f 	bne.w	8009650 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80097b2:	bf00      	nop
 80097b4:	bf00      	nop
 80097b6:	3730      	adds	r7, #48	@ 0x30
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	20001304 	.word	0x20001304

080097c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b088      	sub	sp, #32
 80097c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80097c6:	e046      	b.n	8009856 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097c8:	4b2c      	ldr	r3, [pc, #176]	@ (800987c <prvSwitchTimerLists+0xbc>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097d2:	4b2a      	ldr	r3, [pc, #168]	@ (800987c <prvSwitchTimerLists+0xbc>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	68db      	ldr	r3, [r3, #12]
 80097da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	3304      	adds	r3, #4
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7fe f911 	bl	8007a08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097ea:	68f8      	ldr	r0, [r7, #12]
 80097ec:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	69db      	ldr	r3, [r3, #28]
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d12f      	bne.n	8009856 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	699b      	ldr	r3, [r3, #24]
 80097fa:	693a      	ldr	r2, [r7, #16]
 80097fc:	4413      	add	r3, r2
 80097fe:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009800:	68ba      	ldr	r2, [r7, #8]
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	429a      	cmp	r2, r3
 8009806:	d90e      	bls.n	8009826 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	68ba      	ldr	r2, [r7, #8]
 800980c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009814:	4b19      	ldr	r3, [pc, #100]	@ (800987c <prvSwitchTimerLists+0xbc>)
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	3304      	adds	r3, #4
 800981c:	4619      	mov	r1, r3
 800981e:	4610      	mov	r0, r2
 8009820:	f7fe f8b9 	bl	8007996 <vListInsert>
 8009824:	e017      	b.n	8009856 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009826:	2300      	movs	r3, #0
 8009828:	9300      	str	r3, [sp, #0]
 800982a:	2300      	movs	r3, #0
 800982c:	693a      	ldr	r2, [r7, #16]
 800982e:	2100      	movs	r1, #0
 8009830:	68f8      	ldr	r0, [r7, #12]
 8009832:	f7ff fd91 	bl	8009358 <xTimerGenericCommand>
 8009836:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d10b      	bne.n	8009856 <prvSwitchTimerLists+0x96>
	__asm volatile
 800983e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009842:	f383 8811 	msr	BASEPRI, r3
 8009846:	f3bf 8f6f 	isb	sy
 800984a:	f3bf 8f4f 	dsb	sy
 800984e:	603b      	str	r3, [r7, #0]
}
 8009850:	bf00      	nop
 8009852:	bf00      	nop
 8009854:	e7fd      	b.n	8009852 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009856:	4b09      	ldr	r3, [pc, #36]	@ (800987c <prvSwitchTimerLists+0xbc>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d1b3      	bne.n	80097c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009860:	4b06      	ldr	r3, [pc, #24]	@ (800987c <prvSwitchTimerLists+0xbc>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009866:	4b06      	ldr	r3, [pc, #24]	@ (8009880 <prvSwitchTimerLists+0xc0>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a04      	ldr	r2, [pc, #16]	@ (800987c <prvSwitchTimerLists+0xbc>)
 800986c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800986e:	4a04      	ldr	r2, [pc, #16]	@ (8009880 <prvSwitchTimerLists+0xc0>)
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	6013      	str	r3, [r2, #0]
}
 8009874:	bf00      	nop
 8009876:	3718      	adds	r7, #24
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}
 800987c:	200012fc 	.word	0x200012fc
 8009880:	20001300 	.word	0x20001300

08009884 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b082      	sub	sp, #8
 8009888:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800988a:	f000 f96d 	bl	8009b68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800988e:	4b15      	ldr	r3, [pc, #84]	@ (80098e4 <prvCheckForValidListAndQueue+0x60>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d120      	bne.n	80098d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009896:	4814      	ldr	r0, [pc, #80]	@ (80098e8 <prvCheckForValidListAndQueue+0x64>)
 8009898:	f7fe f82c 	bl	80078f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800989c:	4813      	ldr	r0, [pc, #76]	@ (80098ec <prvCheckForValidListAndQueue+0x68>)
 800989e:	f7fe f829 	bl	80078f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80098a2:	4b13      	ldr	r3, [pc, #76]	@ (80098f0 <prvCheckForValidListAndQueue+0x6c>)
 80098a4:	4a10      	ldr	r2, [pc, #64]	@ (80098e8 <prvCheckForValidListAndQueue+0x64>)
 80098a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80098a8:	4b12      	ldr	r3, [pc, #72]	@ (80098f4 <prvCheckForValidListAndQueue+0x70>)
 80098aa:	4a10      	ldr	r2, [pc, #64]	@ (80098ec <prvCheckForValidListAndQueue+0x68>)
 80098ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80098ae:	2300      	movs	r3, #0
 80098b0:	9300      	str	r3, [sp, #0]
 80098b2:	4b11      	ldr	r3, [pc, #68]	@ (80098f8 <prvCheckForValidListAndQueue+0x74>)
 80098b4:	4a11      	ldr	r2, [pc, #68]	@ (80098fc <prvCheckForValidListAndQueue+0x78>)
 80098b6:	2110      	movs	r1, #16
 80098b8:	200a      	movs	r0, #10
 80098ba:	f7fe f939 	bl	8007b30 <xQueueGenericCreateStatic>
 80098be:	4603      	mov	r3, r0
 80098c0:	4a08      	ldr	r2, [pc, #32]	@ (80098e4 <prvCheckForValidListAndQueue+0x60>)
 80098c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80098c4:	4b07      	ldr	r3, [pc, #28]	@ (80098e4 <prvCheckForValidListAndQueue+0x60>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d005      	beq.n	80098d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80098cc:	4b05      	ldr	r3, [pc, #20]	@ (80098e4 <prvCheckForValidListAndQueue+0x60>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	490b      	ldr	r1, [pc, #44]	@ (8009900 <prvCheckForValidListAndQueue+0x7c>)
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7fe fd5c 	bl	8008390 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80098d8:	f000 f978 	bl	8009bcc <vPortExitCritical>
}
 80098dc:	bf00      	nop
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	20001304 	.word	0x20001304
 80098e8:	200012d4 	.word	0x200012d4
 80098ec:	200012e8 	.word	0x200012e8
 80098f0:	200012fc 	.word	0x200012fc
 80098f4:	20001300 	.word	0x20001300
 80098f8:	200013b0 	.word	0x200013b0
 80098fc:	20001310 	.word	0x20001310
 8009900:	0800e98c 	.word	0x0800e98c

08009904 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009904:	b480      	push	{r7}
 8009906:	b085      	sub	sp, #20
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	3b04      	subs	r3, #4
 8009914:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800991c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	3b04      	subs	r3, #4
 8009922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	f023 0201 	bic.w	r2, r3, #1
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	3b04      	subs	r3, #4
 8009932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009934:	4a0c      	ldr	r2, [pc, #48]	@ (8009968 <pxPortInitialiseStack+0x64>)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	3b14      	subs	r3, #20
 800993e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	3b04      	subs	r3, #4
 800994a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f06f 0202 	mvn.w	r2, #2
 8009952:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	3b20      	subs	r3, #32
 8009958:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800995a:	68fb      	ldr	r3, [r7, #12]
}
 800995c:	4618      	mov	r0, r3
 800995e:	3714      	adds	r7, #20
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr
 8009968:	0800996d 	.word	0x0800996d

0800996c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800996c:	b480      	push	{r7}
 800996e:	b085      	sub	sp, #20
 8009970:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009972:	2300      	movs	r3, #0
 8009974:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009976:	4b13      	ldr	r3, [pc, #76]	@ (80099c4 <prvTaskExitError+0x58>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800997e:	d00b      	beq.n	8009998 <prvTaskExitError+0x2c>
	__asm volatile
 8009980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009984:	f383 8811 	msr	BASEPRI, r3
 8009988:	f3bf 8f6f 	isb	sy
 800998c:	f3bf 8f4f 	dsb	sy
 8009990:	60fb      	str	r3, [r7, #12]
}
 8009992:	bf00      	nop
 8009994:	bf00      	nop
 8009996:	e7fd      	b.n	8009994 <prvTaskExitError+0x28>
	__asm volatile
 8009998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800999c:	f383 8811 	msr	BASEPRI, r3
 80099a0:	f3bf 8f6f 	isb	sy
 80099a4:	f3bf 8f4f 	dsb	sy
 80099a8:	60bb      	str	r3, [r7, #8]
}
 80099aa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80099ac:	bf00      	nop
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d0fc      	beq.n	80099ae <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80099b4:	bf00      	nop
 80099b6:	bf00      	nop
 80099b8:	3714      	adds	r7, #20
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	2000000c 	.word	0x2000000c
	...

080099d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80099d0:	4b07      	ldr	r3, [pc, #28]	@ (80099f0 <pxCurrentTCBConst2>)
 80099d2:	6819      	ldr	r1, [r3, #0]
 80099d4:	6808      	ldr	r0, [r1, #0]
 80099d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099da:	f380 8809 	msr	PSP, r0
 80099de:	f3bf 8f6f 	isb	sy
 80099e2:	f04f 0000 	mov.w	r0, #0
 80099e6:	f380 8811 	msr	BASEPRI, r0
 80099ea:	4770      	bx	lr
 80099ec:	f3af 8000 	nop.w

080099f0 <pxCurrentTCBConst2>:
 80099f0:	20000dd4 	.word	0x20000dd4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80099f4:	bf00      	nop
 80099f6:	bf00      	nop

080099f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80099f8:	4808      	ldr	r0, [pc, #32]	@ (8009a1c <prvPortStartFirstTask+0x24>)
 80099fa:	6800      	ldr	r0, [r0, #0]
 80099fc:	6800      	ldr	r0, [r0, #0]
 80099fe:	f380 8808 	msr	MSP, r0
 8009a02:	f04f 0000 	mov.w	r0, #0
 8009a06:	f380 8814 	msr	CONTROL, r0
 8009a0a:	b662      	cpsie	i
 8009a0c:	b661      	cpsie	f
 8009a0e:	f3bf 8f4f 	dsb	sy
 8009a12:	f3bf 8f6f 	isb	sy
 8009a16:	df00      	svc	0
 8009a18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a1a:	bf00      	nop
 8009a1c:	e000ed08 	.word	0xe000ed08

08009a20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b086      	sub	sp, #24
 8009a24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009a26:	4b47      	ldr	r3, [pc, #284]	@ (8009b44 <xPortStartScheduler+0x124>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a47      	ldr	r2, [pc, #284]	@ (8009b48 <xPortStartScheduler+0x128>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d10b      	bne.n	8009a48 <xPortStartScheduler+0x28>
	__asm volatile
 8009a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a34:	f383 8811 	msr	BASEPRI, r3
 8009a38:	f3bf 8f6f 	isb	sy
 8009a3c:	f3bf 8f4f 	dsb	sy
 8009a40:	613b      	str	r3, [r7, #16]
}
 8009a42:	bf00      	nop
 8009a44:	bf00      	nop
 8009a46:	e7fd      	b.n	8009a44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009a48:	4b3e      	ldr	r3, [pc, #248]	@ (8009b44 <xPortStartScheduler+0x124>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a3f      	ldr	r2, [pc, #252]	@ (8009b4c <xPortStartScheduler+0x12c>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d10b      	bne.n	8009a6a <xPortStartScheduler+0x4a>
	__asm volatile
 8009a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a56:	f383 8811 	msr	BASEPRI, r3
 8009a5a:	f3bf 8f6f 	isb	sy
 8009a5e:	f3bf 8f4f 	dsb	sy
 8009a62:	60fb      	str	r3, [r7, #12]
}
 8009a64:	bf00      	nop
 8009a66:	bf00      	nop
 8009a68:	e7fd      	b.n	8009a66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a6a:	4b39      	ldr	r3, [pc, #228]	@ (8009b50 <xPortStartScheduler+0x130>)
 8009a6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	22ff      	movs	r2, #255	@ 0xff
 8009a7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a84:	78fb      	ldrb	r3, [r7, #3]
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009a8c:	b2da      	uxtb	r2, r3
 8009a8e:	4b31      	ldr	r3, [pc, #196]	@ (8009b54 <xPortStartScheduler+0x134>)
 8009a90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a92:	4b31      	ldr	r3, [pc, #196]	@ (8009b58 <xPortStartScheduler+0x138>)
 8009a94:	2207      	movs	r2, #7
 8009a96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a98:	e009      	b.n	8009aae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8009b58 <xPortStartScheduler+0x138>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	3b01      	subs	r3, #1
 8009aa0:	4a2d      	ldr	r2, [pc, #180]	@ (8009b58 <xPortStartScheduler+0x138>)
 8009aa2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009aa4:	78fb      	ldrb	r3, [r7, #3]
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	005b      	lsls	r3, r3, #1
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009aae:	78fb      	ldrb	r3, [r7, #3]
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ab6:	2b80      	cmp	r3, #128	@ 0x80
 8009ab8:	d0ef      	beq.n	8009a9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009aba:	4b27      	ldr	r3, [pc, #156]	@ (8009b58 <xPortStartScheduler+0x138>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f1c3 0307 	rsb	r3, r3, #7
 8009ac2:	2b04      	cmp	r3, #4
 8009ac4:	d00b      	beq.n	8009ade <xPortStartScheduler+0xbe>
	__asm volatile
 8009ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aca:	f383 8811 	msr	BASEPRI, r3
 8009ace:	f3bf 8f6f 	isb	sy
 8009ad2:	f3bf 8f4f 	dsb	sy
 8009ad6:	60bb      	str	r3, [r7, #8]
}
 8009ad8:	bf00      	nop
 8009ada:	bf00      	nop
 8009adc:	e7fd      	b.n	8009ada <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ade:	4b1e      	ldr	r3, [pc, #120]	@ (8009b58 <xPortStartScheduler+0x138>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	021b      	lsls	r3, r3, #8
 8009ae4:	4a1c      	ldr	r2, [pc, #112]	@ (8009b58 <xPortStartScheduler+0x138>)
 8009ae6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8009b58 <xPortStartScheduler+0x138>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009af0:	4a19      	ldr	r2, [pc, #100]	@ (8009b58 <xPortStartScheduler+0x138>)
 8009af2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	b2da      	uxtb	r2, r3
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009afc:	4b17      	ldr	r3, [pc, #92]	@ (8009b5c <xPortStartScheduler+0x13c>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a16      	ldr	r2, [pc, #88]	@ (8009b5c <xPortStartScheduler+0x13c>)
 8009b02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009b06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009b08:	4b14      	ldr	r3, [pc, #80]	@ (8009b5c <xPortStartScheduler+0x13c>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a13      	ldr	r2, [pc, #76]	@ (8009b5c <xPortStartScheduler+0x13c>)
 8009b0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009b12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009b14:	f000 f8da 	bl	8009ccc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009b18:	4b11      	ldr	r3, [pc, #68]	@ (8009b60 <xPortStartScheduler+0x140>)
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009b1e:	f000 f8f9 	bl	8009d14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009b22:	4b10      	ldr	r3, [pc, #64]	@ (8009b64 <xPortStartScheduler+0x144>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a0f      	ldr	r2, [pc, #60]	@ (8009b64 <xPortStartScheduler+0x144>)
 8009b28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009b2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009b2e:	f7ff ff63 	bl	80099f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009b32:	f7ff f861 	bl	8008bf8 <vTaskSwitchContext>
	prvTaskExitError();
 8009b36:	f7ff ff19 	bl	800996c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009b3a:	2300      	movs	r3, #0
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3718      	adds	r7, #24
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}
 8009b44:	e000ed00 	.word	0xe000ed00
 8009b48:	410fc271 	.word	0x410fc271
 8009b4c:	410fc270 	.word	0x410fc270
 8009b50:	e000e400 	.word	0xe000e400
 8009b54:	20001400 	.word	0x20001400
 8009b58:	20001404 	.word	0x20001404
 8009b5c:	e000ed20 	.word	0xe000ed20
 8009b60:	2000000c 	.word	0x2000000c
 8009b64:	e000ef34 	.word	0xe000ef34

08009b68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b72:	f383 8811 	msr	BASEPRI, r3
 8009b76:	f3bf 8f6f 	isb	sy
 8009b7a:	f3bf 8f4f 	dsb	sy
 8009b7e:	607b      	str	r3, [r7, #4]
}
 8009b80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b82:	4b10      	ldr	r3, [pc, #64]	@ (8009bc4 <vPortEnterCritical+0x5c>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	3301      	adds	r3, #1
 8009b88:	4a0e      	ldr	r2, [pc, #56]	@ (8009bc4 <vPortEnterCritical+0x5c>)
 8009b8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8009bc4 <vPortEnterCritical+0x5c>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d110      	bne.n	8009bb6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b94:	4b0c      	ldr	r3, [pc, #48]	@ (8009bc8 <vPortEnterCritical+0x60>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00b      	beq.n	8009bb6 <vPortEnterCritical+0x4e>
	__asm volatile
 8009b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba2:	f383 8811 	msr	BASEPRI, r3
 8009ba6:	f3bf 8f6f 	isb	sy
 8009baa:	f3bf 8f4f 	dsb	sy
 8009bae:	603b      	str	r3, [r7, #0]
}
 8009bb0:	bf00      	nop
 8009bb2:	bf00      	nop
 8009bb4:	e7fd      	b.n	8009bb2 <vPortEnterCritical+0x4a>
	}
}
 8009bb6:	bf00      	nop
 8009bb8:	370c      	adds	r7, #12
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	2000000c 	.word	0x2000000c
 8009bc8:	e000ed04 	.word	0xe000ed04

08009bcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009bd2:	4b12      	ldr	r3, [pc, #72]	@ (8009c1c <vPortExitCritical+0x50>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d10b      	bne.n	8009bf2 <vPortExitCritical+0x26>
	__asm volatile
 8009bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bde:	f383 8811 	msr	BASEPRI, r3
 8009be2:	f3bf 8f6f 	isb	sy
 8009be6:	f3bf 8f4f 	dsb	sy
 8009bea:	607b      	str	r3, [r7, #4]
}
 8009bec:	bf00      	nop
 8009bee:	bf00      	nop
 8009bf0:	e7fd      	b.n	8009bee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8009c1c <vPortExitCritical+0x50>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	3b01      	subs	r3, #1
 8009bf8:	4a08      	ldr	r2, [pc, #32]	@ (8009c1c <vPortExitCritical+0x50>)
 8009bfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009bfc:	4b07      	ldr	r3, [pc, #28]	@ (8009c1c <vPortExitCritical+0x50>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d105      	bne.n	8009c10 <vPortExitCritical+0x44>
 8009c04:	2300      	movs	r3, #0
 8009c06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	f383 8811 	msr	BASEPRI, r3
}
 8009c0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009c10:	bf00      	nop
 8009c12:	370c      	adds	r7, #12
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr
 8009c1c:	2000000c 	.word	0x2000000c

08009c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009c20:	f3ef 8009 	mrs	r0, PSP
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	4b15      	ldr	r3, [pc, #84]	@ (8009c80 <pxCurrentTCBConst>)
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	f01e 0f10 	tst.w	lr, #16
 8009c30:	bf08      	it	eq
 8009c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3a:	6010      	str	r0, [r2, #0]
 8009c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009c44:	f380 8811 	msr	BASEPRI, r0
 8009c48:	f3bf 8f4f 	dsb	sy
 8009c4c:	f3bf 8f6f 	isb	sy
 8009c50:	f7fe ffd2 	bl	8008bf8 <vTaskSwitchContext>
 8009c54:	f04f 0000 	mov.w	r0, #0
 8009c58:	f380 8811 	msr	BASEPRI, r0
 8009c5c:	bc09      	pop	{r0, r3}
 8009c5e:	6819      	ldr	r1, [r3, #0]
 8009c60:	6808      	ldr	r0, [r1, #0]
 8009c62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c66:	f01e 0f10 	tst.w	lr, #16
 8009c6a:	bf08      	it	eq
 8009c6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c70:	f380 8809 	msr	PSP, r0
 8009c74:	f3bf 8f6f 	isb	sy
 8009c78:	4770      	bx	lr
 8009c7a:	bf00      	nop
 8009c7c:	f3af 8000 	nop.w

08009c80 <pxCurrentTCBConst>:
 8009c80:	20000dd4 	.word	0x20000dd4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c84:	bf00      	nop
 8009c86:	bf00      	nop

08009c88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c92:	f383 8811 	msr	BASEPRI, r3
 8009c96:	f3bf 8f6f 	isb	sy
 8009c9a:	f3bf 8f4f 	dsb	sy
 8009c9e:	607b      	str	r3, [r7, #4]
}
 8009ca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009ca2:	f7fe fee9 	bl	8008a78 <xTaskIncrementTick>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d003      	beq.n	8009cb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009cac:	4b06      	ldr	r3, [pc, #24]	@ (8009cc8 <SysTick_Handler+0x40>)
 8009cae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cb2:	601a      	str	r2, [r3, #0]
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	f383 8811 	msr	BASEPRI, r3
}
 8009cbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009cc0:	bf00      	nop
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	e000ed04 	.word	0xe000ed04

08009ccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009ccc:	b480      	push	{r7}
 8009cce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8009d00 <vPortSetupTimerInterrupt+0x34>)
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8009d04 <vPortSetupTimerInterrupt+0x38>)
 8009cd8:	2200      	movs	r2, #0
 8009cda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8009d08 <vPortSetupTimerInterrupt+0x3c>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8009d0c <vPortSetupTimerInterrupt+0x40>)
 8009ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ce6:	099b      	lsrs	r3, r3, #6
 8009ce8:	4a09      	ldr	r2, [pc, #36]	@ (8009d10 <vPortSetupTimerInterrupt+0x44>)
 8009cea:	3b01      	subs	r3, #1
 8009cec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009cee:	4b04      	ldr	r3, [pc, #16]	@ (8009d00 <vPortSetupTimerInterrupt+0x34>)
 8009cf0:	2207      	movs	r2, #7
 8009cf2:	601a      	str	r2, [r3, #0]
}
 8009cf4:	bf00      	nop
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop
 8009d00:	e000e010 	.word	0xe000e010
 8009d04:	e000e018 	.word	0xe000e018
 8009d08:	20000000 	.word	0x20000000
 8009d0c:	10624dd3 	.word	0x10624dd3
 8009d10:	e000e014 	.word	0xe000e014

08009d14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009d14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009d24 <vPortEnableVFP+0x10>
 8009d18:	6801      	ldr	r1, [r0, #0]
 8009d1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009d1e:	6001      	str	r1, [r0, #0]
 8009d20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009d22:	bf00      	nop
 8009d24:	e000ed88 	.word	0xe000ed88

08009d28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009d28:	b480      	push	{r7}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009d2e:	f3ef 8305 	mrs	r3, IPSR
 8009d32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2b0f      	cmp	r3, #15
 8009d38:	d915      	bls.n	8009d66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d3a:	4a18      	ldr	r2, [pc, #96]	@ (8009d9c <vPortValidateInterruptPriority+0x74>)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	4413      	add	r3, r2
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d44:	4b16      	ldr	r3, [pc, #88]	@ (8009da0 <vPortValidateInterruptPriority+0x78>)
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	7afa      	ldrb	r2, [r7, #11]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d20b      	bcs.n	8009d66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d52:	f383 8811 	msr	BASEPRI, r3
 8009d56:	f3bf 8f6f 	isb	sy
 8009d5a:	f3bf 8f4f 	dsb	sy
 8009d5e:	607b      	str	r3, [r7, #4]
}
 8009d60:	bf00      	nop
 8009d62:	bf00      	nop
 8009d64:	e7fd      	b.n	8009d62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d66:	4b0f      	ldr	r3, [pc, #60]	@ (8009da4 <vPortValidateInterruptPriority+0x7c>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8009da8 <vPortValidateInterruptPriority+0x80>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d90b      	bls.n	8009d8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d7a:	f383 8811 	msr	BASEPRI, r3
 8009d7e:	f3bf 8f6f 	isb	sy
 8009d82:	f3bf 8f4f 	dsb	sy
 8009d86:	603b      	str	r3, [r7, #0]
}
 8009d88:	bf00      	nop
 8009d8a:	bf00      	nop
 8009d8c:	e7fd      	b.n	8009d8a <vPortValidateInterruptPriority+0x62>
	}
 8009d8e:	bf00      	nop
 8009d90:	3714      	adds	r7, #20
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr
 8009d9a:	bf00      	nop
 8009d9c:	e000e3f0 	.word	0xe000e3f0
 8009da0:	20001400 	.word	0x20001400
 8009da4:	e000ed0c 	.word	0xe000ed0c
 8009da8:	20001404 	.word	0x20001404

08009dac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b08a      	sub	sp, #40	@ 0x28
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009db4:	2300      	movs	r3, #0
 8009db6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009db8:	f7fe fda2 	bl	8008900 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009dbc:	4b5a      	ldr	r3, [pc, #360]	@ (8009f28 <pvPortMalloc+0x17c>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d101      	bne.n	8009dc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009dc4:	f000 f916 	bl	8009ff4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009dc8:	4b58      	ldr	r3, [pc, #352]	@ (8009f2c <pvPortMalloc+0x180>)
 8009dca:	681a      	ldr	r2, [r3, #0]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4013      	ands	r3, r2
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	f040 8090 	bne.w	8009ef6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d01e      	beq.n	8009e1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009ddc:	2208      	movs	r2, #8
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	4413      	add	r3, r2
 8009de2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f003 0307 	and.w	r3, r3, #7
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d015      	beq.n	8009e1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f023 0307 	bic.w	r3, r3, #7
 8009df4:	3308      	adds	r3, #8
 8009df6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f003 0307 	and.w	r3, r3, #7
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d00b      	beq.n	8009e1a <pvPortMalloc+0x6e>
	__asm volatile
 8009e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e06:	f383 8811 	msr	BASEPRI, r3
 8009e0a:	f3bf 8f6f 	isb	sy
 8009e0e:	f3bf 8f4f 	dsb	sy
 8009e12:	617b      	str	r3, [r7, #20]
}
 8009e14:	bf00      	nop
 8009e16:	bf00      	nop
 8009e18:	e7fd      	b.n	8009e16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d06a      	beq.n	8009ef6 <pvPortMalloc+0x14a>
 8009e20:	4b43      	ldr	r3, [pc, #268]	@ (8009f30 <pvPortMalloc+0x184>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d865      	bhi.n	8009ef6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009e2a:	4b42      	ldr	r3, [pc, #264]	@ (8009f34 <pvPortMalloc+0x188>)
 8009e2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009e2e:	4b41      	ldr	r3, [pc, #260]	@ (8009f34 <pvPortMalloc+0x188>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e34:	e004      	b.n	8009e40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d903      	bls.n	8009e52 <pvPortMalloc+0xa6>
 8009e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1f1      	bne.n	8009e36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e52:	4b35      	ldr	r3, [pc, #212]	@ (8009f28 <pvPortMalloc+0x17c>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d04c      	beq.n	8009ef6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e5c:	6a3b      	ldr	r3, [r7, #32]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2208      	movs	r2, #8
 8009e62:	4413      	add	r3, r2
 8009e64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	6a3b      	ldr	r3, [r7, #32]
 8009e6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e70:	685a      	ldr	r2, [r3, #4]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	1ad2      	subs	r2, r2, r3
 8009e76:	2308      	movs	r3, #8
 8009e78:	005b      	lsls	r3, r3, #1
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d920      	bls.n	8009ec0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	4413      	add	r3, r2
 8009e84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e86:	69bb      	ldr	r3, [r7, #24]
 8009e88:	f003 0307 	and.w	r3, r3, #7
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d00b      	beq.n	8009ea8 <pvPortMalloc+0xfc>
	__asm volatile
 8009e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e94:	f383 8811 	msr	BASEPRI, r3
 8009e98:	f3bf 8f6f 	isb	sy
 8009e9c:	f3bf 8f4f 	dsb	sy
 8009ea0:	613b      	str	r3, [r7, #16]
}
 8009ea2:	bf00      	nop
 8009ea4:	bf00      	nop
 8009ea6:	e7fd      	b.n	8009ea4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eaa:	685a      	ldr	r2, [r3, #4]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	1ad2      	subs	r2, r2, r3
 8009eb0:	69bb      	ldr	r3, [r7, #24]
 8009eb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009eba:	69b8      	ldr	r0, [r7, #24]
 8009ebc:	f000 f8fc 	bl	800a0b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8009f30 <pvPortMalloc+0x184>)
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	1ad3      	subs	r3, r2, r3
 8009eca:	4a19      	ldr	r2, [pc, #100]	@ (8009f30 <pvPortMalloc+0x184>)
 8009ecc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009ece:	4b18      	ldr	r3, [pc, #96]	@ (8009f30 <pvPortMalloc+0x184>)
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	4b19      	ldr	r3, [pc, #100]	@ (8009f38 <pvPortMalloc+0x18c>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d203      	bcs.n	8009ee2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009eda:	4b15      	ldr	r3, [pc, #84]	@ (8009f30 <pvPortMalloc+0x184>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a16      	ldr	r2, [pc, #88]	@ (8009f38 <pvPortMalloc+0x18c>)
 8009ee0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ee4:	685a      	ldr	r2, [r3, #4]
 8009ee6:	4b11      	ldr	r3, [pc, #68]	@ (8009f2c <pvPortMalloc+0x180>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	431a      	orrs	r2, r3
 8009eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009ef6:	f7fe fd11 	bl	800891c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009efa:	69fb      	ldr	r3, [r7, #28]
 8009efc:	f003 0307 	and.w	r3, r3, #7
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d00b      	beq.n	8009f1c <pvPortMalloc+0x170>
	__asm volatile
 8009f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f08:	f383 8811 	msr	BASEPRI, r3
 8009f0c:	f3bf 8f6f 	isb	sy
 8009f10:	f3bf 8f4f 	dsb	sy
 8009f14:	60fb      	str	r3, [r7, #12]
}
 8009f16:	bf00      	nop
 8009f18:	bf00      	nop
 8009f1a:	e7fd      	b.n	8009f18 <pvPortMalloc+0x16c>
	return pvReturn;
 8009f1c:	69fb      	ldr	r3, [r7, #28]
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3728      	adds	r7, #40	@ 0x28
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	20002010 	.word	0x20002010
 8009f2c:	2000201c 	.word	0x2000201c
 8009f30:	20002014 	.word	0x20002014
 8009f34:	20002008 	.word	0x20002008
 8009f38:	20002018 	.word	0x20002018

08009f3c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b086      	sub	sp, #24
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d04a      	beq.n	8009fe4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009f4e:	2308      	movs	r3, #8
 8009f50:	425b      	negs	r3, r3
 8009f52:	697a      	ldr	r2, [r7, #20]
 8009f54:	4413      	add	r3, r2
 8009f56:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	685a      	ldr	r2, [r3, #4]
 8009f60:	4b22      	ldr	r3, [pc, #136]	@ (8009fec <vPortFree+0xb0>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4013      	ands	r3, r2
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d10b      	bne.n	8009f82 <vPortFree+0x46>
	__asm volatile
 8009f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f6e:	f383 8811 	msr	BASEPRI, r3
 8009f72:	f3bf 8f6f 	isb	sy
 8009f76:	f3bf 8f4f 	dsb	sy
 8009f7a:	60fb      	str	r3, [r7, #12]
}
 8009f7c:	bf00      	nop
 8009f7e:	bf00      	nop
 8009f80:	e7fd      	b.n	8009f7e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d00b      	beq.n	8009fa2 <vPortFree+0x66>
	__asm volatile
 8009f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f8e:	f383 8811 	msr	BASEPRI, r3
 8009f92:	f3bf 8f6f 	isb	sy
 8009f96:	f3bf 8f4f 	dsb	sy
 8009f9a:	60bb      	str	r3, [r7, #8]
}
 8009f9c:	bf00      	nop
 8009f9e:	bf00      	nop
 8009fa0:	e7fd      	b.n	8009f9e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	685a      	ldr	r2, [r3, #4]
 8009fa6:	4b11      	ldr	r3, [pc, #68]	@ (8009fec <vPortFree+0xb0>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4013      	ands	r3, r2
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d019      	beq.n	8009fe4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d115      	bne.n	8009fe4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	685a      	ldr	r2, [r3, #4]
 8009fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8009fec <vPortFree+0xb0>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	43db      	mvns	r3, r3
 8009fc2:	401a      	ands	r2, r3
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009fc8:	f7fe fc9a 	bl	8008900 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	685a      	ldr	r2, [r3, #4]
 8009fd0:	4b07      	ldr	r3, [pc, #28]	@ (8009ff0 <vPortFree+0xb4>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4413      	add	r3, r2
 8009fd6:	4a06      	ldr	r2, [pc, #24]	@ (8009ff0 <vPortFree+0xb4>)
 8009fd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009fda:	6938      	ldr	r0, [r7, #16]
 8009fdc:	f000 f86c 	bl	800a0b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009fe0:	f7fe fc9c 	bl	800891c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009fe4:	bf00      	nop
 8009fe6:	3718      	adds	r7, #24
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	2000201c 	.word	0x2000201c
 8009ff0:	20002014 	.word	0x20002014

08009ff4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b085      	sub	sp, #20
 8009ff8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009ffa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8009ffe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a000:	4b27      	ldr	r3, [pc, #156]	@ (800a0a0 <prvHeapInit+0xac>)
 800a002:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f003 0307 	and.w	r3, r3, #7
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00c      	beq.n	800a028 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	3307      	adds	r3, #7
 800a012:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f023 0307 	bic.w	r3, r3, #7
 800a01a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a01c:	68ba      	ldr	r2, [r7, #8]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	4a1f      	ldr	r2, [pc, #124]	@ (800a0a0 <prvHeapInit+0xac>)
 800a024:	4413      	add	r3, r2
 800a026:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a02c:	4a1d      	ldr	r2, [pc, #116]	@ (800a0a4 <prvHeapInit+0xb0>)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a032:	4b1c      	ldr	r3, [pc, #112]	@ (800a0a4 <prvHeapInit+0xb0>)
 800a034:	2200      	movs	r2, #0
 800a036:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	68ba      	ldr	r2, [r7, #8]
 800a03c:	4413      	add	r3, r2
 800a03e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a040:	2208      	movs	r2, #8
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	1a9b      	subs	r3, r3, r2
 800a046:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f023 0307 	bic.w	r3, r3, #7
 800a04e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	4a15      	ldr	r2, [pc, #84]	@ (800a0a8 <prvHeapInit+0xb4>)
 800a054:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a056:	4b14      	ldr	r3, [pc, #80]	@ (800a0a8 <prvHeapInit+0xb4>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	2200      	movs	r2, #0
 800a05c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a05e:	4b12      	ldr	r3, [pc, #72]	@ (800a0a8 <prvHeapInit+0xb4>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	2200      	movs	r2, #0
 800a064:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	68fa      	ldr	r2, [r7, #12]
 800a06e:	1ad2      	subs	r2, r2, r3
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a074:	4b0c      	ldr	r3, [pc, #48]	@ (800a0a8 <prvHeapInit+0xb4>)
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	4a0a      	ldr	r2, [pc, #40]	@ (800a0ac <prvHeapInit+0xb8>)
 800a082:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	4a09      	ldr	r2, [pc, #36]	@ (800a0b0 <prvHeapInit+0xbc>)
 800a08a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a08c:	4b09      	ldr	r3, [pc, #36]	@ (800a0b4 <prvHeapInit+0xc0>)
 800a08e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a092:	601a      	str	r2, [r3, #0]
}
 800a094:	bf00      	nop
 800a096:	3714      	adds	r7, #20
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr
 800a0a0:	20001408 	.word	0x20001408
 800a0a4:	20002008 	.word	0x20002008
 800a0a8:	20002010 	.word	0x20002010
 800a0ac:	20002018 	.word	0x20002018
 800a0b0:	20002014 	.word	0x20002014
 800a0b4:	2000201c 	.word	0x2000201c

0800a0b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b085      	sub	sp, #20
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a0c0:	4b28      	ldr	r3, [pc, #160]	@ (800a164 <prvInsertBlockIntoFreeList+0xac>)
 800a0c2:	60fb      	str	r3, [r7, #12]
 800a0c4:	e002      	b.n	800a0cc <prvInsertBlockIntoFreeList+0x14>
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	60fb      	str	r3, [r7, #12]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d8f7      	bhi.n	800a0c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	68ba      	ldr	r2, [r7, #8]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d108      	bne.n	800a0fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	685a      	ldr	r2, [r3, #4]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	441a      	add	r2, r3
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	68ba      	ldr	r2, [r7, #8]
 800a104:	441a      	add	r2, r3
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d118      	bne.n	800a140 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	4b15      	ldr	r3, [pc, #84]	@ (800a168 <prvInsertBlockIntoFreeList+0xb0>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	429a      	cmp	r2, r3
 800a118:	d00d      	beq.n	800a136 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	685a      	ldr	r2, [r3, #4]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	441a      	add	r2, r3
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	601a      	str	r2, [r3, #0]
 800a134:	e008      	b.n	800a148 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a136:	4b0c      	ldr	r3, [pc, #48]	@ (800a168 <prvInsertBlockIntoFreeList+0xb0>)
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	601a      	str	r2, [r3, #0]
 800a13e:	e003      	b.n	800a148 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a148:	68fa      	ldr	r2, [r7, #12]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d002      	beq.n	800a156 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a156:	bf00      	nop
 800a158:	3714      	adds	r7, #20
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop
 800a164:	20002008 	.word	0x20002008
 800a168:	20002010 	.word	0x20002010

0800a16c <__cvt>:
 800a16c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a170:	ec57 6b10 	vmov	r6, r7, d0
 800a174:	2f00      	cmp	r7, #0
 800a176:	460c      	mov	r4, r1
 800a178:	4619      	mov	r1, r3
 800a17a:	463b      	mov	r3, r7
 800a17c:	bfbb      	ittet	lt
 800a17e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a182:	461f      	movlt	r7, r3
 800a184:	2300      	movge	r3, #0
 800a186:	232d      	movlt	r3, #45	@ 0x2d
 800a188:	700b      	strb	r3, [r1, #0]
 800a18a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a18c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a190:	4691      	mov	r9, r2
 800a192:	f023 0820 	bic.w	r8, r3, #32
 800a196:	bfbc      	itt	lt
 800a198:	4632      	movlt	r2, r6
 800a19a:	4616      	movlt	r6, r2
 800a19c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a1a0:	d005      	beq.n	800a1ae <__cvt+0x42>
 800a1a2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a1a6:	d100      	bne.n	800a1aa <__cvt+0x3e>
 800a1a8:	3401      	adds	r4, #1
 800a1aa:	2102      	movs	r1, #2
 800a1ac:	e000      	b.n	800a1b0 <__cvt+0x44>
 800a1ae:	2103      	movs	r1, #3
 800a1b0:	ab03      	add	r3, sp, #12
 800a1b2:	9301      	str	r3, [sp, #4]
 800a1b4:	ab02      	add	r3, sp, #8
 800a1b6:	9300      	str	r3, [sp, #0]
 800a1b8:	ec47 6b10 	vmov	d0, r6, r7
 800a1bc:	4653      	mov	r3, sl
 800a1be:	4622      	mov	r2, r4
 800a1c0:	f001 f8f2 	bl	800b3a8 <_dtoa_r>
 800a1c4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a1c8:	4605      	mov	r5, r0
 800a1ca:	d119      	bne.n	800a200 <__cvt+0x94>
 800a1cc:	f019 0f01 	tst.w	r9, #1
 800a1d0:	d00e      	beq.n	800a1f0 <__cvt+0x84>
 800a1d2:	eb00 0904 	add.w	r9, r0, r4
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	2300      	movs	r3, #0
 800a1da:	4630      	mov	r0, r6
 800a1dc:	4639      	mov	r1, r7
 800a1de:	f7f6 fc7b 	bl	8000ad8 <__aeabi_dcmpeq>
 800a1e2:	b108      	cbz	r0, 800a1e8 <__cvt+0x7c>
 800a1e4:	f8cd 900c 	str.w	r9, [sp, #12]
 800a1e8:	2230      	movs	r2, #48	@ 0x30
 800a1ea:	9b03      	ldr	r3, [sp, #12]
 800a1ec:	454b      	cmp	r3, r9
 800a1ee:	d31e      	bcc.n	800a22e <__cvt+0xc2>
 800a1f0:	9b03      	ldr	r3, [sp, #12]
 800a1f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1f4:	1b5b      	subs	r3, r3, r5
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	6013      	str	r3, [r2, #0]
 800a1fa:	b004      	add	sp, #16
 800a1fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a200:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a204:	eb00 0904 	add.w	r9, r0, r4
 800a208:	d1e5      	bne.n	800a1d6 <__cvt+0x6a>
 800a20a:	7803      	ldrb	r3, [r0, #0]
 800a20c:	2b30      	cmp	r3, #48	@ 0x30
 800a20e:	d10a      	bne.n	800a226 <__cvt+0xba>
 800a210:	2200      	movs	r2, #0
 800a212:	2300      	movs	r3, #0
 800a214:	4630      	mov	r0, r6
 800a216:	4639      	mov	r1, r7
 800a218:	f7f6 fc5e 	bl	8000ad8 <__aeabi_dcmpeq>
 800a21c:	b918      	cbnz	r0, 800a226 <__cvt+0xba>
 800a21e:	f1c4 0401 	rsb	r4, r4, #1
 800a222:	f8ca 4000 	str.w	r4, [sl]
 800a226:	f8da 3000 	ldr.w	r3, [sl]
 800a22a:	4499      	add	r9, r3
 800a22c:	e7d3      	b.n	800a1d6 <__cvt+0x6a>
 800a22e:	1c59      	adds	r1, r3, #1
 800a230:	9103      	str	r1, [sp, #12]
 800a232:	701a      	strb	r2, [r3, #0]
 800a234:	e7d9      	b.n	800a1ea <__cvt+0x7e>

0800a236 <__exponent>:
 800a236:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a238:	2900      	cmp	r1, #0
 800a23a:	bfba      	itte	lt
 800a23c:	4249      	neglt	r1, r1
 800a23e:	232d      	movlt	r3, #45	@ 0x2d
 800a240:	232b      	movge	r3, #43	@ 0x2b
 800a242:	2909      	cmp	r1, #9
 800a244:	7002      	strb	r2, [r0, #0]
 800a246:	7043      	strb	r3, [r0, #1]
 800a248:	dd29      	ble.n	800a29e <__exponent+0x68>
 800a24a:	f10d 0307 	add.w	r3, sp, #7
 800a24e:	461d      	mov	r5, r3
 800a250:	270a      	movs	r7, #10
 800a252:	461a      	mov	r2, r3
 800a254:	fbb1 f6f7 	udiv	r6, r1, r7
 800a258:	fb07 1416 	mls	r4, r7, r6, r1
 800a25c:	3430      	adds	r4, #48	@ 0x30
 800a25e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a262:	460c      	mov	r4, r1
 800a264:	2c63      	cmp	r4, #99	@ 0x63
 800a266:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a26a:	4631      	mov	r1, r6
 800a26c:	dcf1      	bgt.n	800a252 <__exponent+0x1c>
 800a26e:	3130      	adds	r1, #48	@ 0x30
 800a270:	1e94      	subs	r4, r2, #2
 800a272:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a276:	1c41      	adds	r1, r0, #1
 800a278:	4623      	mov	r3, r4
 800a27a:	42ab      	cmp	r3, r5
 800a27c:	d30a      	bcc.n	800a294 <__exponent+0x5e>
 800a27e:	f10d 0309 	add.w	r3, sp, #9
 800a282:	1a9b      	subs	r3, r3, r2
 800a284:	42ac      	cmp	r4, r5
 800a286:	bf88      	it	hi
 800a288:	2300      	movhi	r3, #0
 800a28a:	3302      	adds	r3, #2
 800a28c:	4403      	add	r3, r0
 800a28e:	1a18      	subs	r0, r3, r0
 800a290:	b003      	add	sp, #12
 800a292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a294:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a298:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a29c:	e7ed      	b.n	800a27a <__exponent+0x44>
 800a29e:	2330      	movs	r3, #48	@ 0x30
 800a2a0:	3130      	adds	r1, #48	@ 0x30
 800a2a2:	7083      	strb	r3, [r0, #2]
 800a2a4:	70c1      	strb	r1, [r0, #3]
 800a2a6:	1d03      	adds	r3, r0, #4
 800a2a8:	e7f1      	b.n	800a28e <__exponent+0x58>
	...

0800a2ac <_printf_float>:
 800a2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b0:	b08d      	sub	sp, #52	@ 0x34
 800a2b2:	460c      	mov	r4, r1
 800a2b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a2b8:	4616      	mov	r6, r2
 800a2ba:	461f      	mov	r7, r3
 800a2bc:	4605      	mov	r5, r0
 800a2be:	f000 ff09 	bl	800b0d4 <_localeconv_r>
 800a2c2:	6803      	ldr	r3, [r0, #0]
 800a2c4:	9304      	str	r3, [sp, #16]
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7f5 ffda 	bl	8000280 <strlen>
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2d0:	f8d8 3000 	ldr.w	r3, [r8]
 800a2d4:	9005      	str	r0, [sp, #20]
 800a2d6:	3307      	adds	r3, #7
 800a2d8:	f023 0307 	bic.w	r3, r3, #7
 800a2dc:	f103 0208 	add.w	r2, r3, #8
 800a2e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a2e4:	f8d4 b000 	ldr.w	fp, [r4]
 800a2e8:	f8c8 2000 	str.w	r2, [r8]
 800a2ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a2f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a2f4:	9307      	str	r3, [sp, #28]
 800a2f6:	f8cd 8018 	str.w	r8, [sp, #24]
 800a2fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a2fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a302:	4b9c      	ldr	r3, [pc, #624]	@ (800a574 <_printf_float+0x2c8>)
 800a304:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a308:	f7f6 fc18 	bl	8000b3c <__aeabi_dcmpun>
 800a30c:	bb70      	cbnz	r0, 800a36c <_printf_float+0xc0>
 800a30e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a312:	4b98      	ldr	r3, [pc, #608]	@ (800a574 <_printf_float+0x2c8>)
 800a314:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a318:	f7f6 fbf2 	bl	8000b00 <__aeabi_dcmple>
 800a31c:	bb30      	cbnz	r0, 800a36c <_printf_float+0xc0>
 800a31e:	2200      	movs	r2, #0
 800a320:	2300      	movs	r3, #0
 800a322:	4640      	mov	r0, r8
 800a324:	4649      	mov	r1, r9
 800a326:	f7f6 fbe1 	bl	8000aec <__aeabi_dcmplt>
 800a32a:	b110      	cbz	r0, 800a332 <_printf_float+0x86>
 800a32c:	232d      	movs	r3, #45	@ 0x2d
 800a32e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a332:	4a91      	ldr	r2, [pc, #580]	@ (800a578 <_printf_float+0x2cc>)
 800a334:	4b91      	ldr	r3, [pc, #580]	@ (800a57c <_printf_float+0x2d0>)
 800a336:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a33a:	bf94      	ite	ls
 800a33c:	4690      	movls	r8, r2
 800a33e:	4698      	movhi	r8, r3
 800a340:	2303      	movs	r3, #3
 800a342:	6123      	str	r3, [r4, #16]
 800a344:	f02b 0304 	bic.w	r3, fp, #4
 800a348:	6023      	str	r3, [r4, #0]
 800a34a:	f04f 0900 	mov.w	r9, #0
 800a34e:	9700      	str	r7, [sp, #0]
 800a350:	4633      	mov	r3, r6
 800a352:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a354:	4621      	mov	r1, r4
 800a356:	4628      	mov	r0, r5
 800a358:	f000 f9d2 	bl	800a700 <_printf_common>
 800a35c:	3001      	adds	r0, #1
 800a35e:	f040 808d 	bne.w	800a47c <_printf_float+0x1d0>
 800a362:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a366:	b00d      	add	sp, #52	@ 0x34
 800a368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a36c:	4642      	mov	r2, r8
 800a36e:	464b      	mov	r3, r9
 800a370:	4640      	mov	r0, r8
 800a372:	4649      	mov	r1, r9
 800a374:	f7f6 fbe2 	bl	8000b3c <__aeabi_dcmpun>
 800a378:	b140      	cbz	r0, 800a38c <_printf_float+0xe0>
 800a37a:	464b      	mov	r3, r9
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	bfbc      	itt	lt
 800a380:	232d      	movlt	r3, #45	@ 0x2d
 800a382:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a386:	4a7e      	ldr	r2, [pc, #504]	@ (800a580 <_printf_float+0x2d4>)
 800a388:	4b7e      	ldr	r3, [pc, #504]	@ (800a584 <_printf_float+0x2d8>)
 800a38a:	e7d4      	b.n	800a336 <_printf_float+0x8a>
 800a38c:	6863      	ldr	r3, [r4, #4]
 800a38e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a392:	9206      	str	r2, [sp, #24]
 800a394:	1c5a      	adds	r2, r3, #1
 800a396:	d13b      	bne.n	800a410 <_printf_float+0x164>
 800a398:	2306      	movs	r3, #6
 800a39a:	6063      	str	r3, [r4, #4]
 800a39c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	6022      	str	r2, [r4, #0]
 800a3a4:	9303      	str	r3, [sp, #12]
 800a3a6:	ab0a      	add	r3, sp, #40	@ 0x28
 800a3a8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a3ac:	ab09      	add	r3, sp, #36	@ 0x24
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	6861      	ldr	r1, [r4, #4]
 800a3b2:	ec49 8b10 	vmov	d0, r8, r9
 800a3b6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a3ba:	4628      	mov	r0, r5
 800a3bc:	f7ff fed6 	bl	800a16c <__cvt>
 800a3c0:	9b06      	ldr	r3, [sp, #24]
 800a3c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a3c4:	2b47      	cmp	r3, #71	@ 0x47
 800a3c6:	4680      	mov	r8, r0
 800a3c8:	d129      	bne.n	800a41e <_printf_float+0x172>
 800a3ca:	1cc8      	adds	r0, r1, #3
 800a3cc:	db02      	blt.n	800a3d4 <_printf_float+0x128>
 800a3ce:	6863      	ldr	r3, [r4, #4]
 800a3d0:	4299      	cmp	r1, r3
 800a3d2:	dd41      	ble.n	800a458 <_printf_float+0x1ac>
 800a3d4:	f1aa 0a02 	sub.w	sl, sl, #2
 800a3d8:	fa5f fa8a 	uxtb.w	sl, sl
 800a3dc:	3901      	subs	r1, #1
 800a3de:	4652      	mov	r2, sl
 800a3e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a3e4:	9109      	str	r1, [sp, #36]	@ 0x24
 800a3e6:	f7ff ff26 	bl	800a236 <__exponent>
 800a3ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a3ec:	1813      	adds	r3, r2, r0
 800a3ee:	2a01      	cmp	r2, #1
 800a3f0:	4681      	mov	r9, r0
 800a3f2:	6123      	str	r3, [r4, #16]
 800a3f4:	dc02      	bgt.n	800a3fc <_printf_float+0x150>
 800a3f6:	6822      	ldr	r2, [r4, #0]
 800a3f8:	07d2      	lsls	r2, r2, #31
 800a3fa:	d501      	bpl.n	800a400 <_printf_float+0x154>
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	6123      	str	r3, [r4, #16]
 800a400:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a404:	2b00      	cmp	r3, #0
 800a406:	d0a2      	beq.n	800a34e <_printf_float+0xa2>
 800a408:	232d      	movs	r3, #45	@ 0x2d
 800a40a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a40e:	e79e      	b.n	800a34e <_printf_float+0xa2>
 800a410:	9a06      	ldr	r2, [sp, #24]
 800a412:	2a47      	cmp	r2, #71	@ 0x47
 800a414:	d1c2      	bne.n	800a39c <_printf_float+0xf0>
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1c0      	bne.n	800a39c <_printf_float+0xf0>
 800a41a:	2301      	movs	r3, #1
 800a41c:	e7bd      	b.n	800a39a <_printf_float+0xee>
 800a41e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a422:	d9db      	bls.n	800a3dc <_printf_float+0x130>
 800a424:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a428:	d118      	bne.n	800a45c <_printf_float+0x1b0>
 800a42a:	2900      	cmp	r1, #0
 800a42c:	6863      	ldr	r3, [r4, #4]
 800a42e:	dd0b      	ble.n	800a448 <_printf_float+0x19c>
 800a430:	6121      	str	r1, [r4, #16]
 800a432:	b913      	cbnz	r3, 800a43a <_printf_float+0x18e>
 800a434:	6822      	ldr	r2, [r4, #0]
 800a436:	07d0      	lsls	r0, r2, #31
 800a438:	d502      	bpl.n	800a440 <_printf_float+0x194>
 800a43a:	3301      	adds	r3, #1
 800a43c:	440b      	add	r3, r1
 800a43e:	6123      	str	r3, [r4, #16]
 800a440:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a442:	f04f 0900 	mov.w	r9, #0
 800a446:	e7db      	b.n	800a400 <_printf_float+0x154>
 800a448:	b913      	cbnz	r3, 800a450 <_printf_float+0x1a4>
 800a44a:	6822      	ldr	r2, [r4, #0]
 800a44c:	07d2      	lsls	r2, r2, #31
 800a44e:	d501      	bpl.n	800a454 <_printf_float+0x1a8>
 800a450:	3302      	adds	r3, #2
 800a452:	e7f4      	b.n	800a43e <_printf_float+0x192>
 800a454:	2301      	movs	r3, #1
 800a456:	e7f2      	b.n	800a43e <_printf_float+0x192>
 800a458:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a45c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a45e:	4299      	cmp	r1, r3
 800a460:	db05      	blt.n	800a46e <_printf_float+0x1c2>
 800a462:	6823      	ldr	r3, [r4, #0]
 800a464:	6121      	str	r1, [r4, #16]
 800a466:	07d8      	lsls	r0, r3, #31
 800a468:	d5ea      	bpl.n	800a440 <_printf_float+0x194>
 800a46a:	1c4b      	adds	r3, r1, #1
 800a46c:	e7e7      	b.n	800a43e <_printf_float+0x192>
 800a46e:	2900      	cmp	r1, #0
 800a470:	bfd4      	ite	le
 800a472:	f1c1 0202 	rsble	r2, r1, #2
 800a476:	2201      	movgt	r2, #1
 800a478:	4413      	add	r3, r2
 800a47a:	e7e0      	b.n	800a43e <_printf_float+0x192>
 800a47c:	6823      	ldr	r3, [r4, #0]
 800a47e:	055a      	lsls	r2, r3, #21
 800a480:	d407      	bmi.n	800a492 <_printf_float+0x1e6>
 800a482:	6923      	ldr	r3, [r4, #16]
 800a484:	4642      	mov	r2, r8
 800a486:	4631      	mov	r1, r6
 800a488:	4628      	mov	r0, r5
 800a48a:	47b8      	blx	r7
 800a48c:	3001      	adds	r0, #1
 800a48e:	d12b      	bne.n	800a4e8 <_printf_float+0x23c>
 800a490:	e767      	b.n	800a362 <_printf_float+0xb6>
 800a492:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a496:	f240 80dd 	bls.w	800a654 <_printf_float+0x3a8>
 800a49a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a49e:	2200      	movs	r2, #0
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	f7f6 fb19 	bl	8000ad8 <__aeabi_dcmpeq>
 800a4a6:	2800      	cmp	r0, #0
 800a4a8:	d033      	beq.n	800a512 <_printf_float+0x266>
 800a4aa:	4a37      	ldr	r2, [pc, #220]	@ (800a588 <_printf_float+0x2dc>)
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	4631      	mov	r1, r6
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	47b8      	blx	r7
 800a4b4:	3001      	adds	r0, #1
 800a4b6:	f43f af54 	beq.w	800a362 <_printf_float+0xb6>
 800a4ba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a4be:	4543      	cmp	r3, r8
 800a4c0:	db02      	blt.n	800a4c8 <_printf_float+0x21c>
 800a4c2:	6823      	ldr	r3, [r4, #0]
 800a4c4:	07d8      	lsls	r0, r3, #31
 800a4c6:	d50f      	bpl.n	800a4e8 <_printf_float+0x23c>
 800a4c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4cc:	4631      	mov	r1, r6
 800a4ce:	4628      	mov	r0, r5
 800a4d0:	47b8      	blx	r7
 800a4d2:	3001      	adds	r0, #1
 800a4d4:	f43f af45 	beq.w	800a362 <_printf_float+0xb6>
 800a4d8:	f04f 0900 	mov.w	r9, #0
 800a4dc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a4e0:	f104 0a1a 	add.w	sl, r4, #26
 800a4e4:	45c8      	cmp	r8, r9
 800a4e6:	dc09      	bgt.n	800a4fc <_printf_float+0x250>
 800a4e8:	6823      	ldr	r3, [r4, #0]
 800a4ea:	079b      	lsls	r3, r3, #30
 800a4ec:	f100 8103 	bmi.w	800a6f6 <_printf_float+0x44a>
 800a4f0:	68e0      	ldr	r0, [r4, #12]
 800a4f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4f4:	4298      	cmp	r0, r3
 800a4f6:	bfb8      	it	lt
 800a4f8:	4618      	movlt	r0, r3
 800a4fa:	e734      	b.n	800a366 <_printf_float+0xba>
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	4652      	mov	r2, sl
 800a500:	4631      	mov	r1, r6
 800a502:	4628      	mov	r0, r5
 800a504:	47b8      	blx	r7
 800a506:	3001      	adds	r0, #1
 800a508:	f43f af2b 	beq.w	800a362 <_printf_float+0xb6>
 800a50c:	f109 0901 	add.w	r9, r9, #1
 800a510:	e7e8      	b.n	800a4e4 <_printf_float+0x238>
 800a512:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a514:	2b00      	cmp	r3, #0
 800a516:	dc39      	bgt.n	800a58c <_printf_float+0x2e0>
 800a518:	4a1b      	ldr	r2, [pc, #108]	@ (800a588 <_printf_float+0x2dc>)
 800a51a:	2301      	movs	r3, #1
 800a51c:	4631      	mov	r1, r6
 800a51e:	4628      	mov	r0, r5
 800a520:	47b8      	blx	r7
 800a522:	3001      	adds	r0, #1
 800a524:	f43f af1d 	beq.w	800a362 <_printf_float+0xb6>
 800a528:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a52c:	ea59 0303 	orrs.w	r3, r9, r3
 800a530:	d102      	bne.n	800a538 <_printf_float+0x28c>
 800a532:	6823      	ldr	r3, [r4, #0]
 800a534:	07d9      	lsls	r1, r3, #31
 800a536:	d5d7      	bpl.n	800a4e8 <_printf_float+0x23c>
 800a538:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a53c:	4631      	mov	r1, r6
 800a53e:	4628      	mov	r0, r5
 800a540:	47b8      	blx	r7
 800a542:	3001      	adds	r0, #1
 800a544:	f43f af0d 	beq.w	800a362 <_printf_float+0xb6>
 800a548:	f04f 0a00 	mov.w	sl, #0
 800a54c:	f104 0b1a 	add.w	fp, r4, #26
 800a550:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a552:	425b      	negs	r3, r3
 800a554:	4553      	cmp	r3, sl
 800a556:	dc01      	bgt.n	800a55c <_printf_float+0x2b0>
 800a558:	464b      	mov	r3, r9
 800a55a:	e793      	b.n	800a484 <_printf_float+0x1d8>
 800a55c:	2301      	movs	r3, #1
 800a55e:	465a      	mov	r2, fp
 800a560:	4631      	mov	r1, r6
 800a562:	4628      	mov	r0, r5
 800a564:	47b8      	blx	r7
 800a566:	3001      	adds	r0, #1
 800a568:	f43f aefb 	beq.w	800a362 <_printf_float+0xb6>
 800a56c:	f10a 0a01 	add.w	sl, sl, #1
 800a570:	e7ee      	b.n	800a550 <_printf_float+0x2a4>
 800a572:	bf00      	nop
 800a574:	7fefffff 	.word	0x7fefffff
 800a578:	0800f1b0 	.word	0x0800f1b0
 800a57c:	0800f1b4 	.word	0x0800f1b4
 800a580:	0800f1b8 	.word	0x0800f1b8
 800a584:	0800f1bc 	.word	0x0800f1bc
 800a588:	0800f1c0 	.word	0x0800f1c0
 800a58c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a58e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a592:	4553      	cmp	r3, sl
 800a594:	bfa8      	it	ge
 800a596:	4653      	movge	r3, sl
 800a598:	2b00      	cmp	r3, #0
 800a59a:	4699      	mov	r9, r3
 800a59c:	dc36      	bgt.n	800a60c <_printf_float+0x360>
 800a59e:	f04f 0b00 	mov.w	fp, #0
 800a5a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5a6:	f104 021a 	add.w	r2, r4, #26
 800a5aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a5ac:	9306      	str	r3, [sp, #24]
 800a5ae:	eba3 0309 	sub.w	r3, r3, r9
 800a5b2:	455b      	cmp	r3, fp
 800a5b4:	dc31      	bgt.n	800a61a <_printf_float+0x36e>
 800a5b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5b8:	459a      	cmp	sl, r3
 800a5ba:	dc3a      	bgt.n	800a632 <_printf_float+0x386>
 800a5bc:	6823      	ldr	r3, [r4, #0]
 800a5be:	07da      	lsls	r2, r3, #31
 800a5c0:	d437      	bmi.n	800a632 <_printf_float+0x386>
 800a5c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5c4:	ebaa 0903 	sub.w	r9, sl, r3
 800a5c8:	9b06      	ldr	r3, [sp, #24]
 800a5ca:	ebaa 0303 	sub.w	r3, sl, r3
 800a5ce:	4599      	cmp	r9, r3
 800a5d0:	bfa8      	it	ge
 800a5d2:	4699      	movge	r9, r3
 800a5d4:	f1b9 0f00 	cmp.w	r9, #0
 800a5d8:	dc33      	bgt.n	800a642 <_printf_float+0x396>
 800a5da:	f04f 0800 	mov.w	r8, #0
 800a5de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5e2:	f104 0b1a 	add.w	fp, r4, #26
 800a5e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5e8:	ebaa 0303 	sub.w	r3, sl, r3
 800a5ec:	eba3 0309 	sub.w	r3, r3, r9
 800a5f0:	4543      	cmp	r3, r8
 800a5f2:	f77f af79 	ble.w	800a4e8 <_printf_float+0x23c>
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	465a      	mov	r2, fp
 800a5fa:	4631      	mov	r1, r6
 800a5fc:	4628      	mov	r0, r5
 800a5fe:	47b8      	blx	r7
 800a600:	3001      	adds	r0, #1
 800a602:	f43f aeae 	beq.w	800a362 <_printf_float+0xb6>
 800a606:	f108 0801 	add.w	r8, r8, #1
 800a60a:	e7ec      	b.n	800a5e6 <_printf_float+0x33a>
 800a60c:	4642      	mov	r2, r8
 800a60e:	4631      	mov	r1, r6
 800a610:	4628      	mov	r0, r5
 800a612:	47b8      	blx	r7
 800a614:	3001      	adds	r0, #1
 800a616:	d1c2      	bne.n	800a59e <_printf_float+0x2f2>
 800a618:	e6a3      	b.n	800a362 <_printf_float+0xb6>
 800a61a:	2301      	movs	r3, #1
 800a61c:	4631      	mov	r1, r6
 800a61e:	4628      	mov	r0, r5
 800a620:	9206      	str	r2, [sp, #24]
 800a622:	47b8      	blx	r7
 800a624:	3001      	adds	r0, #1
 800a626:	f43f ae9c 	beq.w	800a362 <_printf_float+0xb6>
 800a62a:	9a06      	ldr	r2, [sp, #24]
 800a62c:	f10b 0b01 	add.w	fp, fp, #1
 800a630:	e7bb      	b.n	800a5aa <_printf_float+0x2fe>
 800a632:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a636:	4631      	mov	r1, r6
 800a638:	4628      	mov	r0, r5
 800a63a:	47b8      	blx	r7
 800a63c:	3001      	adds	r0, #1
 800a63e:	d1c0      	bne.n	800a5c2 <_printf_float+0x316>
 800a640:	e68f      	b.n	800a362 <_printf_float+0xb6>
 800a642:	9a06      	ldr	r2, [sp, #24]
 800a644:	464b      	mov	r3, r9
 800a646:	4442      	add	r2, r8
 800a648:	4631      	mov	r1, r6
 800a64a:	4628      	mov	r0, r5
 800a64c:	47b8      	blx	r7
 800a64e:	3001      	adds	r0, #1
 800a650:	d1c3      	bne.n	800a5da <_printf_float+0x32e>
 800a652:	e686      	b.n	800a362 <_printf_float+0xb6>
 800a654:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a658:	f1ba 0f01 	cmp.w	sl, #1
 800a65c:	dc01      	bgt.n	800a662 <_printf_float+0x3b6>
 800a65e:	07db      	lsls	r3, r3, #31
 800a660:	d536      	bpl.n	800a6d0 <_printf_float+0x424>
 800a662:	2301      	movs	r3, #1
 800a664:	4642      	mov	r2, r8
 800a666:	4631      	mov	r1, r6
 800a668:	4628      	mov	r0, r5
 800a66a:	47b8      	blx	r7
 800a66c:	3001      	adds	r0, #1
 800a66e:	f43f ae78 	beq.w	800a362 <_printf_float+0xb6>
 800a672:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a676:	4631      	mov	r1, r6
 800a678:	4628      	mov	r0, r5
 800a67a:	47b8      	blx	r7
 800a67c:	3001      	adds	r0, #1
 800a67e:	f43f ae70 	beq.w	800a362 <_printf_float+0xb6>
 800a682:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a686:	2200      	movs	r2, #0
 800a688:	2300      	movs	r3, #0
 800a68a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a68e:	f7f6 fa23 	bl	8000ad8 <__aeabi_dcmpeq>
 800a692:	b9c0      	cbnz	r0, 800a6c6 <_printf_float+0x41a>
 800a694:	4653      	mov	r3, sl
 800a696:	f108 0201 	add.w	r2, r8, #1
 800a69a:	4631      	mov	r1, r6
 800a69c:	4628      	mov	r0, r5
 800a69e:	47b8      	blx	r7
 800a6a0:	3001      	adds	r0, #1
 800a6a2:	d10c      	bne.n	800a6be <_printf_float+0x412>
 800a6a4:	e65d      	b.n	800a362 <_printf_float+0xb6>
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	465a      	mov	r2, fp
 800a6aa:	4631      	mov	r1, r6
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	47b8      	blx	r7
 800a6b0:	3001      	adds	r0, #1
 800a6b2:	f43f ae56 	beq.w	800a362 <_printf_float+0xb6>
 800a6b6:	f108 0801 	add.w	r8, r8, #1
 800a6ba:	45d0      	cmp	r8, sl
 800a6bc:	dbf3      	blt.n	800a6a6 <_printf_float+0x3fa>
 800a6be:	464b      	mov	r3, r9
 800a6c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a6c4:	e6df      	b.n	800a486 <_printf_float+0x1da>
 800a6c6:	f04f 0800 	mov.w	r8, #0
 800a6ca:	f104 0b1a 	add.w	fp, r4, #26
 800a6ce:	e7f4      	b.n	800a6ba <_printf_float+0x40e>
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	4642      	mov	r2, r8
 800a6d4:	e7e1      	b.n	800a69a <_printf_float+0x3ee>
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	464a      	mov	r2, r9
 800a6da:	4631      	mov	r1, r6
 800a6dc:	4628      	mov	r0, r5
 800a6de:	47b8      	blx	r7
 800a6e0:	3001      	adds	r0, #1
 800a6e2:	f43f ae3e 	beq.w	800a362 <_printf_float+0xb6>
 800a6e6:	f108 0801 	add.w	r8, r8, #1
 800a6ea:	68e3      	ldr	r3, [r4, #12]
 800a6ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a6ee:	1a5b      	subs	r3, r3, r1
 800a6f0:	4543      	cmp	r3, r8
 800a6f2:	dcf0      	bgt.n	800a6d6 <_printf_float+0x42a>
 800a6f4:	e6fc      	b.n	800a4f0 <_printf_float+0x244>
 800a6f6:	f04f 0800 	mov.w	r8, #0
 800a6fa:	f104 0919 	add.w	r9, r4, #25
 800a6fe:	e7f4      	b.n	800a6ea <_printf_float+0x43e>

0800a700 <_printf_common>:
 800a700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a704:	4616      	mov	r6, r2
 800a706:	4698      	mov	r8, r3
 800a708:	688a      	ldr	r2, [r1, #8]
 800a70a:	690b      	ldr	r3, [r1, #16]
 800a70c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a710:	4293      	cmp	r3, r2
 800a712:	bfb8      	it	lt
 800a714:	4613      	movlt	r3, r2
 800a716:	6033      	str	r3, [r6, #0]
 800a718:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a71c:	4607      	mov	r7, r0
 800a71e:	460c      	mov	r4, r1
 800a720:	b10a      	cbz	r2, 800a726 <_printf_common+0x26>
 800a722:	3301      	adds	r3, #1
 800a724:	6033      	str	r3, [r6, #0]
 800a726:	6823      	ldr	r3, [r4, #0]
 800a728:	0699      	lsls	r1, r3, #26
 800a72a:	bf42      	ittt	mi
 800a72c:	6833      	ldrmi	r3, [r6, #0]
 800a72e:	3302      	addmi	r3, #2
 800a730:	6033      	strmi	r3, [r6, #0]
 800a732:	6825      	ldr	r5, [r4, #0]
 800a734:	f015 0506 	ands.w	r5, r5, #6
 800a738:	d106      	bne.n	800a748 <_printf_common+0x48>
 800a73a:	f104 0a19 	add.w	sl, r4, #25
 800a73e:	68e3      	ldr	r3, [r4, #12]
 800a740:	6832      	ldr	r2, [r6, #0]
 800a742:	1a9b      	subs	r3, r3, r2
 800a744:	42ab      	cmp	r3, r5
 800a746:	dc26      	bgt.n	800a796 <_printf_common+0x96>
 800a748:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a74c:	6822      	ldr	r2, [r4, #0]
 800a74e:	3b00      	subs	r3, #0
 800a750:	bf18      	it	ne
 800a752:	2301      	movne	r3, #1
 800a754:	0692      	lsls	r2, r2, #26
 800a756:	d42b      	bmi.n	800a7b0 <_printf_common+0xb0>
 800a758:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a75c:	4641      	mov	r1, r8
 800a75e:	4638      	mov	r0, r7
 800a760:	47c8      	blx	r9
 800a762:	3001      	adds	r0, #1
 800a764:	d01e      	beq.n	800a7a4 <_printf_common+0xa4>
 800a766:	6823      	ldr	r3, [r4, #0]
 800a768:	6922      	ldr	r2, [r4, #16]
 800a76a:	f003 0306 	and.w	r3, r3, #6
 800a76e:	2b04      	cmp	r3, #4
 800a770:	bf02      	ittt	eq
 800a772:	68e5      	ldreq	r5, [r4, #12]
 800a774:	6833      	ldreq	r3, [r6, #0]
 800a776:	1aed      	subeq	r5, r5, r3
 800a778:	68a3      	ldr	r3, [r4, #8]
 800a77a:	bf0c      	ite	eq
 800a77c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a780:	2500      	movne	r5, #0
 800a782:	4293      	cmp	r3, r2
 800a784:	bfc4      	itt	gt
 800a786:	1a9b      	subgt	r3, r3, r2
 800a788:	18ed      	addgt	r5, r5, r3
 800a78a:	2600      	movs	r6, #0
 800a78c:	341a      	adds	r4, #26
 800a78e:	42b5      	cmp	r5, r6
 800a790:	d11a      	bne.n	800a7c8 <_printf_common+0xc8>
 800a792:	2000      	movs	r0, #0
 800a794:	e008      	b.n	800a7a8 <_printf_common+0xa8>
 800a796:	2301      	movs	r3, #1
 800a798:	4652      	mov	r2, sl
 800a79a:	4641      	mov	r1, r8
 800a79c:	4638      	mov	r0, r7
 800a79e:	47c8      	blx	r9
 800a7a0:	3001      	adds	r0, #1
 800a7a2:	d103      	bne.n	800a7ac <_printf_common+0xac>
 800a7a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a7a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ac:	3501      	adds	r5, #1
 800a7ae:	e7c6      	b.n	800a73e <_printf_common+0x3e>
 800a7b0:	18e1      	adds	r1, r4, r3
 800a7b2:	1c5a      	adds	r2, r3, #1
 800a7b4:	2030      	movs	r0, #48	@ 0x30
 800a7b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a7ba:	4422      	add	r2, r4
 800a7bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a7c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a7c4:	3302      	adds	r3, #2
 800a7c6:	e7c7      	b.n	800a758 <_printf_common+0x58>
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	4622      	mov	r2, r4
 800a7cc:	4641      	mov	r1, r8
 800a7ce:	4638      	mov	r0, r7
 800a7d0:	47c8      	blx	r9
 800a7d2:	3001      	adds	r0, #1
 800a7d4:	d0e6      	beq.n	800a7a4 <_printf_common+0xa4>
 800a7d6:	3601      	adds	r6, #1
 800a7d8:	e7d9      	b.n	800a78e <_printf_common+0x8e>
	...

0800a7dc <_printf_i>:
 800a7dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7e0:	7e0f      	ldrb	r7, [r1, #24]
 800a7e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a7e4:	2f78      	cmp	r7, #120	@ 0x78
 800a7e6:	4691      	mov	r9, r2
 800a7e8:	4680      	mov	r8, r0
 800a7ea:	460c      	mov	r4, r1
 800a7ec:	469a      	mov	sl, r3
 800a7ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a7f2:	d807      	bhi.n	800a804 <_printf_i+0x28>
 800a7f4:	2f62      	cmp	r7, #98	@ 0x62
 800a7f6:	d80a      	bhi.n	800a80e <_printf_i+0x32>
 800a7f8:	2f00      	cmp	r7, #0
 800a7fa:	f000 80d2 	beq.w	800a9a2 <_printf_i+0x1c6>
 800a7fe:	2f58      	cmp	r7, #88	@ 0x58
 800a800:	f000 80b9 	beq.w	800a976 <_printf_i+0x19a>
 800a804:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a808:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a80c:	e03a      	b.n	800a884 <_printf_i+0xa8>
 800a80e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a812:	2b15      	cmp	r3, #21
 800a814:	d8f6      	bhi.n	800a804 <_printf_i+0x28>
 800a816:	a101      	add	r1, pc, #4	@ (adr r1, 800a81c <_printf_i+0x40>)
 800a818:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a81c:	0800a875 	.word	0x0800a875
 800a820:	0800a889 	.word	0x0800a889
 800a824:	0800a805 	.word	0x0800a805
 800a828:	0800a805 	.word	0x0800a805
 800a82c:	0800a805 	.word	0x0800a805
 800a830:	0800a805 	.word	0x0800a805
 800a834:	0800a889 	.word	0x0800a889
 800a838:	0800a805 	.word	0x0800a805
 800a83c:	0800a805 	.word	0x0800a805
 800a840:	0800a805 	.word	0x0800a805
 800a844:	0800a805 	.word	0x0800a805
 800a848:	0800a989 	.word	0x0800a989
 800a84c:	0800a8b3 	.word	0x0800a8b3
 800a850:	0800a943 	.word	0x0800a943
 800a854:	0800a805 	.word	0x0800a805
 800a858:	0800a805 	.word	0x0800a805
 800a85c:	0800a9ab 	.word	0x0800a9ab
 800a860:	0800a805 	.word	0x0800a805
 800a864:	0800a8b3 	.word	0x0800a8b3
 800a868:	0800a805 	.word	0x0800a805
 800a86c:	0800a805 	.word	0x0800a805
 800a870:	0800a94b 	.word	0x0800a94b
 800a874:	6833      	ldr	r3, [r6, #0]
 800a876:	1d1a      	adds	r2, r3, #4
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	6032      	str	r2, [r6, #0]
 800a87c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a880:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a884:	2301      	movs	r3, #1
 800a886:	e09d      	b.n	800a9c4 <_printf_i+0x1e8>
 800a888:	6833      	ldr	r3, [r6, #0]
 800a88a:	6820      	ldr	r0, [r4, #0]
 800a88c:	1d19      	adds	r1, r3, #4
 800a88e:	6031      	str	r1, [r6, #0]
 800a890:	0606      	lsls	r6, r0, #24
 800a892:	d501      	bpl.n	800a898 <_printf_i+0xbc>
 800a894:	681d      	ldr	r5, [r3, #0]
 800a896:	e003      	b.n	800a8a0 <_printf_i+0xc4>
 800a898:	0645      	lsls	r5, r0, #25
 800a89a:	d5fb      	bpl.n	800a894 <_printf_i+0xb8>
 800a89c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a8a0:	2d00      	cmp	r5, #0
 800a8a2:	da03      	bge.n	800a8ac <_printf_i+0xd0>
 800a8a4:	232d      	movs	r3, #45	@ 0x2d
 800a8a6:	426d      	negs	r5, r5
 800a8a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8ac:	4859      	ldr	r0, [pc, #356]	@ (800aa14 <_printf_i+0x238>)
 800a8ae:	230a      	movs	r3, #10
 800a8b0:	e011      	b.n	800a8d6 <_printf_i+0xfa>
 800a8b2:	6821      	ldr	r1, [r4, #0]
 800a8b4:	6833      	ldr	r3, [r6, #0]
 800a8b6:	0608      	lsls	r0, r1, #24
 800a8b8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a8bc:	d402      	bmi.n	800a8c4 <_printf_i+0xe8>
 800a8be:	0649      	lsls	r1, r1, #25
 800a8c0:	bf48      	it	mi
 800a8c2:	b2ad      	uxthmi	r5, r5
 800a8c4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a8c6:	4853      	ldr	r0, [pc, #332]	@ (800aa14 <_printf_i+0x238>)
 800a8c8:	6033      	str	r3, [r6, #0]
 800a8ca:	bf14      	ite	ne
 800a8cc:	230a      	movne	r3, #10
 800a8ce:	2308      	moveq	r3, #8
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a8d6:	6866      	ldr	r6, [r4, #4]
 800a8d8:	60a6      	str	r6, [r4, #8]
 800a8da:	2e00      	cmp	r6, #0
 800a8dc:	bfa2      	ittt	ge
 800a8de:	6821      	ldrge	r1, [r4, #0]
 800a8e0:	f021 0104 	bicge.w	r1, r1, #4
 800a8e4:	6021      	strge	r1, [r4, #0]
 800a8e6:	b90d      	cbnz	r5, 800a8ec <_printf_i+0x110>
 800a8e8:	2e00      	cmp	r6, #0
 800a8ea:	d04b      	beq.n	800a984 <_printf_i+0x1a8>
 800a8ec:	4616      	mov	r6, r2
 800a8ee:	fbb5 f1f3 	udiv	r1, r5, r3
 800a8f2:	fb03 5711 	mls	r7, r3, r1, r5
 800a8f6:	5dc7      	ldrb	r7, [r0, r7]
 800a8f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a8fc:	462f      	mov	r7, r5
 800a8fe:	42bb      	cmp	r3, r7
 800a900:	460d      	mov	r5, r1
 800a902:	d9f4      	bls.n	800a8ee <_printf_i+0x112>
 800a904:	2b08      	cmp	r3, #8
 800a906:	d10b      	bne.n	800a920 <_printf_i+0x144>
 800a908:	6823      	ldr	r3, [r4, #0]
 800a90a:	07df      	lsls	r7, r3, #31
 800a90c:	d508      	bpl.n	800a920 <_printf_i+0x144>
 800a90e:	6923      	ldr	r3, [r4, #16]
 800a910:	6861      	ldr	r1, [r4, #4]
 800a912:	4299      	cmp	r1, r3
 800a914:	bfde      	ittt	le
 800a916:	2330      	movle	r3, #48	@ 0x30
 800a918:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a91c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a920:	1b92      	subs	r2, r2, r6
 800a922:	6122      	str	r2, [r4, #16]
 800a924:	f8cd a000 	str.w	sl, [sp]
 800a928:	464b      	mov	r3, r9
 800a92a:	aa03      	add	r2, sp, #12
 800a92c:	4621      	mov	r1, r4
 800a92e:	4640      	mov	r0, r8
 800a930:	f7ff fee6 	bl	800a700 <_printf_common>
 800a934:	3001      	adds	r0, #1
 800a936:	d14a      	bne.n	800a9ce <_printf_i+0x1f2>
 800a938:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a93c:	b004      	add	sp, #16
 800a93e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a942:	6823      	ldr	r3, [r4, #0]
 800a944:	f043 0320 	orr.w	r3, r3, #32
 800a948:	6023      	str	r3, [r4, #0]
 800a94a:	4833      	ldr	r0, [pc, #204]	@ (800aa18 <_printf_i+0x23c>)
 800a94c:	2778      	movs	r7, #120	@ 0x78
 800a94e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a952:	6823      	ldr	r3, [r4, #0]
 800a954:	6831      	ldr	r1, [r6, #0]
 800a956:	061f      	lsls	r7, r3, #24
 800a958:	f851 5b04 	ldr.w	r5, [r1], #4
 800a95c:	d402      	bmi.n	800a964 <_printf_i+0x188>
 800a95e:	065f      	lsls	r7, r3, #25
 800a960:	bf48      	it	mi
 800a962:	b2ad      	uxthmi	r5, r5
 800a964:	6031      	str	r1, [r6, #0]
 800a966:	07d9      	lsls	r1, r3, #31
 800a968:	bf44      	itt	mi
 800a96a:	f043 0320 	orrmi.w	r3, r3, #32
 800a96e:	6023      	strmi	r3, [r4, #0]
 800a970:	b11d      	cbz	r5, 800a97a <_printf_i+0x19e>
 800a972:	2310      	movs	r3, #16
 800a974:	e7ac      	b.n	800a8d0 <_printf_i+0xf4>
 800a976:	4827      	ldr	r0, [pc, #156]	@ (800aa14 <_printf_i+0x238>)
 800a978:	e7e9      	b.n	800a94e <_printf_i+0x172>
 800a97a:	6823      	ldr	r3, [r4, #0]
 800a97c:	f023 0320 	bic.w	r3, r3, #32
 800a980:	6023      	str	r3, [r4, #0]
 800a982:	e7f6      	b.n	800a972 <_printf_i+0x196>
 800a984:	4616      	mov	r6, r2
 800a986:	e7bd      	b.n	800a904 <_printf_i+0x128>
 800a988:	6833      	ldr	r3, [r6, #0]
 800a98a:	6825      	ldr	r5, [r4, #0]
 800a98c:	6961      	ldr	r1, [r4, #20]
 800a98e:	1d18      	adds	r0, r3, #4
 800a990:	6030      	str	r0, [r6, #0]
 800a992:	062e      	lsls	r6, r5, #24
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	d501      	bpl.n	800a99c <_printf_i+0x1c0>
 800a998:	6019      	str	r1, [r3, #0]
 800a99a:	e002      	b.n	800a9a2 <_printf_i+0x1c6>
 800a99c:	0668      	lsls	r0, r5, #25
 800a99e:	d5fb      	bpl.n	800a998 <_printf_i+0x1bc>
 800a9a0:	8019      	strh	r1, [r3, #0]
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	6123      	str	r3, [r4, #16]
 800a9a6:	4616      	mov	r6, r2
 800a9a8:	e7bc      	b.n	800a924 <_printf_i+0x148>
 800a9aa:	6833      	ldr	r3, [r6, #0]
 800a9ac:	1d1a      	adds	r2, r3, #4
 800a9ae:	6032      	str	r2, [r6, #0]
 800a9b0:	681e      	ldr	r6, [r3, #0]
 800a9b2:	6862      	ldr	r2, [r4, #4]
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	4630      	mov	r0, r6
 800a9b8:	f7f5 fc12 	bl	80001e0 <memchr>
 800a9bc:	b108      	cbz	r0, 800a9c2 <_printf_i+0x1e6>
 800a9be:	1b80      	subs	r0, r0, r6
 800a9c0:	6060      	str	r0, [r4, #4]
 800a9c2:	6863      	ldr	r3, [r4, #4]
 800a9c4:	6123      	str	r3, [r4, #16]
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9cc:	e7aa      	b.n	800a924 <_printf_i+0x148>
 800a9ce:	6923      	ldr	r3, [r4, #16]
 800a9d0:	4632      	mov	r2, r6
 800a9d2:	4649      	mov	r1, r9
 800a9d4:	4640      	mov	r0, r8
 800a9d6:	47d0      	blx	sl
 800a9d8:	3001      	adds	r0, #1
 800a9da:	d0ad      	beq.n	800a938 <_printf_i+0x15c>
 800a9dc:	6823      	ldr	r3, [r4, #0]
 800a9de:	079b      	lsls	r3, r3, #30
 800a9e0:	d413      	bmi.n	800aa0a <_printf_i+0x22e>
 800a9e2:	68e0      	ldr	r0, [r4, #12]
 800a9e4:	9b03      	ldr	r3, [sp, #12]
 800a9e6:	4298      	cmp	r0, r3
 800a9e8:	bfb8      	it	lt
 800a9ea:	4618      	movlt	r0, r3
 800a9ec:	e7a6      	b.n	800a93c <_printf_i+0x160>
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	4632      	mov	r2, r6
 800a9f2:	4649      	mov	r1, r9
 800a9f4:	4640      	mov	r0, r8
 800a9f6:	47d0      	blx	sl
 800a9f8:	3001      	adds	r0, #1
 800a9fa:	d09d      	beq.n	800a938 <_printf_i+0x15c>
 800a9fc:	3501      	adds	r5, #1
 800a9fe:	68e3      	ldr	r3, [r4, #12]
 800aa00:	9903      	ldr	r1, [sp, #12]
 800aa02:	1a5b      	subs	r3, r3, r1
 800aa04:	42ab      	cmp	r3, r5
 800aa06:	dcf2      	bgt.n	800a9ee <_printf_i+0x212>
 800aa08:	e7eb      	b.n	800a9e2 <_printf_i+0x206>
 800aa0a:	2500      	movs	r5, #0
 800aa0c:	f104 0619 	add.w	r6, r4, #25
 800aa10:	e7f5      	b.n	800a9fe <_printf_i+0x222>
 800aa12:	bf00      	nop
 800aa14:	0800f1c2 	.word	0x0800f1c2
 800aa18:	0800f1d3 	.word	0x0800f1d3

0800aa1c <_scanf_float>:
 800aa1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa20:	b087      	sub	sp, #28
 800aa22:	4617      	mov	r7, r2
 800aa24:	9303      	str	r3, [sp, #12]
 800aa26:	688b      	ldr	r3, [r1, #8]
 800aa28:	1e5a      	subs	r2, r3, #1
 800aa2a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800aa2e:	bf81      	itttt	hi
 800aa30:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800aa34:	eb03 0b05 	addhi.w	fp, r3, r5
 800aa38:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800aa3c:	608b      	strhi	r3, [r1, #8]
 800aa3e:	680b      	ldr	r3, [r1, #0]
 800aa40:	460a      	mov	r2, r1
 800aa42:	f04f 0500 	mov.w	r5, #0
 800aa46:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800aa4a:	f842 3b1c 	str.w	r3, [r2], #28
 800aa4e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aa52:	4680      	mov	r8, r0
 800aa54:	460c      	mov	r4, r1
 800aa56:	bf98      	it	ls
 800aa58:	f04f 0b00 	movls.w	fp, #0
 800aa5c:	9201      	str	r2, [sp, #4]
 800aa5e:	4616      	mov	r6, r2
 800aa60:	46aa      	mov	sl, r5
 800aa62:	46a9      	mov	r9, r5
 800aa64:	9502      	str	r5, [sp, #8]
 800aa66:	68a2      	ldr	r2, [r4, #8]
 800aa68:	b152      	cbz	r2, 800aa80 <_scanf_float+0x64>
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	2b4e      	cmp	r3, #78	@ 0x4e
 800aa70:	d864      	bhi.n	800ab3c <_scanf_float+0x120>
 800aa72:	2b40      	cmp	r3, #64	@ 0x40
 800aa74:	d83c      	bhi.n	800aaf0 <_scanf_float+0xd4>
 800aa76:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800aa7a:	b2c8      	uxtb	r0, r1
 800aa7c:	280e      	cmp	r0, #14
 800aa7e:	d93a      	bls.n	800aaf6 <_scanf_float+0xda>
 800aa80:	f1b9 0f00 	cmp.w	r9, #0
 800aa84:	d003      	beq.n	800aa8e <_scanf_float+0x72>
 800aa86:	6823      	ldr	r3, [r4, #0]
 800aa88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa8c:	6023      	str	r3, [r4, #0]
 800aa8e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800aa92:	f1ba 0f01 	cmp.w	sl, #1
 800aa96:	f200 8117 	bhi.w	800acc8 <_scanf_float+0x2ac>
 800aa9a:	9b01      	ldr	r3, [sp, #4]
 800aa9c:	429e      	cmp	r6, r3
 800aa9e:	f200 8108 	bhi.w	800acb2 <_scanf_float+0x296>
 800aaa2:	2001      	movs	r0, #1
 800aaa4:	b007      	add	sp, #28
 800aaa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaaa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800aaae:	2a0d      	cmp	r2, #13
 800aab0:	d8e6      	bhi.n	800aa80 <_scanf_float+0x64>
 800aab2:	a101      	add	r1, pc, #4	@ (adr r1, 800aab8 <_scanf_float+0x9c>)
 800aab4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aab8:	0800abff 	.word	0x0800abff
 800aabc:	0800aa81 	.word	0x0800aa81
 800aac0:	0800aa81 	.word	0x0800aa81
 800aac4:	0800aa81 	.word	0x0800aa81
 800aac8:	0800ac5f 	.word	0x0800ac5f
 800aacc:	0800ac37 	.word	0x0800ac37
 800aad0:	0800aa81 	.word	0x0800aa81
 800aad4:	0800aa81 	.word	0x0800aa81
 800aad8:	0800ac0d 	.word	0x0800ac0d
 800aadc:	0800aa81 	.word	0x0800aa81
 800aae0:	0800aa81 	.word	0x0800aa81
 800aae4:	0800aa81 	.word	0x0800aa81
 800aae8:	0800aa81 	.word	0x0800aa81
 800aaec:	0800abc5 	.word	0x0800abc5
 800aaf0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800aaf4:	e7db      	b.n	800aaae <_scanf_float+0x92>
 800aaf6:	290e      	cmp	r1, #14
 800aaf8:	d8c2      	bhi.n	800aa80 <_scanf_float+0x64>
 800aafa:	a001      	add	r0, pc, #4	@ (adr r0, 800ab00 <_scanf_float+0xe4>)
 800aafc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ab00:	0800abb5 	.word	0x0800abb5
 800ab04:	0800aa81 	.word	0x0800aa81
 800ab08:	0800abb5 	.word	0x0800abb5
 800ab0c:	0800ac4b 	.word	0x0800ac4b
 800ab10:	0800aa81 	.word	0x0800aa81
 800ab14:	0800ab5d 	.word	0x0800ab5d
 800ab18:	0800ab9b 	.word	0x0800ab9b
 800ab1c:	0800ab9b 	.word	0x0800ab9b
 800ab20:	0800ab9b 	.word	0x0800ab9b
 800ab24:	0800ab9b 	.word	0x0800ab9b
 800ab28:	0800ab9b 	.word	0x0800ab9b
 800ab2c:	0800ab9b 	.word	0x0800ab9b
 800ab30:	0800ab9b 	.word	0x0800ab9b
 800ab34:	0800ab9b 	.word	0x0800ab9b
 800ab38:	0800ab9b 	.word	0x0800ab9b
 800ab3c:	2b6e      	cmp	r3, #110	@ 0x6e
 800ab3e:	d809      	bhi.n	800ab54 <_scanf_float+0x138>
 800ab40:	2b60      	cmp	r3, #96	@ 0x60
 800ab42:	d8b2      	bhi.n	800aaaa <_scanf_float+0x8e>
 800ab44:	2b54      	cmp	r3, #84	@ 0x54
 800ab46:	d07b      	beq.n	800ac40 <_scanf_float+0x224>
 800ab48:	2b59      	cmp	r3, #89	@ 0x59
 800ab4a:	d199      	bne.n	800aa80 <_scanf_float+0x64>
 800ab4c:	2d07      	cmp	r5, #7
 800ab4e:	d197      	bne.n	800aa80 <_scanf_float+0x64>
 800ab50:	2508      	movs	r5, #8
 800ab52:	e02c      	b.n	800abae <_scanf_float+0x192>
 800ab54:	2b74      	cmp	r3, #116	@ 0x74
 800ab56:	d073      	beq.n	800ac40 <_scanf_float+0x224>
 800ab58:	2b79      	cmp	r3, #121	@ 0x79
 800ab5a:	e7f6      	b.n	800ab4a <_scanf_float+0x12e>
 800ab5c:	6821      	ldr	r1, [r4, #0]
 800ab5e:	05c8      	lsls	r0, r1, #23
 800ab60:	d51b      	bpl.n	800ab9a <_scanf_float+0x17e>
 800ab62:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ab66:	6021      	str	r1, [r4, #0]
 800ab68:	f109 0901 	add.w	r9, r9, #1
 800ab6c:	f1bb 0f00 	cmp.w	fp, #0
 800ab70:	d003      	beq.n	800ab7a <_scanf_float+0x15e>
 800ab72:	3201      	adds	r2, #1
 800ab74:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800ab78:	60a2      	str	r2, [r4, #8]
 800ab7a:	68a3      	ldr	r3, [r4, #8]
 800ab7c:	3b01      	subs	r3, #1
 800ab7e:	60a3      	str	r3, [r4, #8]
 800ab80:	6923      	ldr	r3, [r4, #16]
 800ab82:	3301      	adds	r3, #1
 800ab84:	6123      	str	r3, [r4, #16]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	607b      	str	r3, [r7, #4]
 800ab8e:	f340 8087 	ble.w	800aca0 <_scanf_float+0x284>
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	3301      	adds	r3, #1
 800ab96:	603b      	str	r3, [r7, #0]
 800ab98:	e765      	b.n	800aa66 <_scanf_float+0x4a>
 800ab9a:	eb1a 0105 	adds.w	r1, sl, r5
 800ab9e:	f47f af6f 	bne.w	800aa80 <_scanf_float+0x64>
 800aba2:	6822      	ldr	r2, [r4, #0]
 800aba4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800aba8:	6022      	str	r2, [r4, #0]
 800abaa:	460d      	mov	r5, r1
 800abac:	468a      	mov	sl, r1
 800abae:	f806 3b01 	strb.w	r3, [r6], #1
 800abb2:	e7e2      	b.n	800ab7a <_scanf_float+0x15e>
 800abb4:	6822      	ldr	r2, [r4, #0]
 800abb6:	0610      	lsls	r0, r2, #24
 800abb8:	f57f af62 	bpl.w	800aa80 <_scanf_float+0x64>
 800abbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800abc0:	6022      	str	r2, [r4, #0]
 800abc2:	e7f4      	b.n	800abae <_scanf_float+0x192>
 800abc4:	f1ba 0f00 	cmp.w	sl, #0
 800abc8:	d10e      	bne.n	800abe8 <_scanf_float+0x1cc>
 800abca:	f1b9 0f00 	cmp.w	r9, #0
 800abce:	d10e      	bne.n	800abee <_scanf_float+0x1d2>
 800abd0:	6822      	ldr	r2, [r4, #0]
 800abd2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800abd6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800abda:	d108      	bne.n	800abee <_scanf_float+0x1d2>
 800abdc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800abe0:	6022      	str	r2, [r4, #0]
 800abe2:	f04f 0a01 	mov.w	sl, #1
 800abe6:	e7e2      	b.n	800abae <_scanf_float+0x192>
 800abe8:	f1ba 0f02 	cmp.w	sl, #2
 800abec:	d055      	beq.n	800ac9a <_scanf_float+0x27e>
 800abee:	2d01      	cmp	r5, #1
 800abf0:	d002      	beq.n	800abf8 <_scanf_float+0x1dc>
 800abf2:	2d04      	cmp	r5, #4
 800abf4:	f47f af44 	bne.w	800aa80 <_scanf_float+0x64>
 800abf8:	3501      	adds	r5, #1
 800abfa:	b2ed      	uxtb	r5, r5
 800abfc:	e7d7      	b.n	800abae <_scanf_float+0x192>
 800abfe:	f1ba 0f01 	cmp.w	sl, #1
 800ac02:	f47f af3d 	bne.w	800aa80 <_scanf_float+0x64>
 800ac06:	f04f 0a02 	mov.w	sl, #2
 800ac0a:	e7d0      	b.n	800abae <_scanf_float+0x192>
 800ac0c:	b97d      	cbnz	r5, 800ac2e <_scanf_float+0x212>
 800ac0e:	f1b9 0f00 	cmp.w	r9, #0
 800ac12:	f47f af38 	bne.w	800aa86 <_scanf_float+0x6a>
 800ac16:	6822      	ldr	r2, [r4, #0]
 800ac18:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ac1c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ac20:	f040 8108 	bne.w	800ae34 <_scanf_float+0x418>
 800ac24:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ac28:	6022      	str	r2, [r4, #0]
 800ac2a:	2501      	movs	r5, #1
 800ac2c:	e7bf      	b.n	800abae <_scanf_float+0x192>
 800ac2e:	2d03      	cmp	r5, #3
 800ac30:	d0e2      	beq.n	800abf8 <_scanf_float+0x1dc>
 800ac32:	2d05      	cmp	r5, #5
 800ac34:	e7de      	b.n	800abf4 <_scanf_float+0x1d8>
 800ac36:	2d02      	cmp	r5, #2
 800ac38:	f47f af22 	bne.w	800aa80 <_scanf_float+0x64>
 800ac3c:	2503      	movs	r5, #3
 800ac3e:	e7b6      	b.n	800abae <_scanf_float+0x192>
 800ac40:	2d06      	cmp	r5, #6
 800ac42:	f47f af1d 	bne.w	800aa80 <_scanf_float+0x64>
 800ac46:	2507      	movs	r5, #7
 800ac48:	e7b1      	b.n	800abae <_scanf_float+0x192>
 800ac4a:	6822      	ldr	r2, [r4, #0]
 800ac4c:	0591      	lsls	r1, r2, #22
 800ac4e:	f57f af17 	bpl.w	800aa80 <_scanf_float+0x64>
 800ac52:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ac56:	6022      	str	r2, [r4, #0]
 800ac58:	f8cd 9008 	str.w	r9, [sp, #8]
 800ac5c:	e7a7      	b.n	800abae <_scanf_float+0x192>
 800ac5e:	6822      	ldr	r2, [r4, #0]
 800ac60:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ac64:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ac68:	d006      	beq.n	800ac78 <_scanf_float+0x25c>
 800ac6a:	0550      	lsls	r0, r2, #21
 800ac6c:	f57f af08 	bpl.w	800aa80 <_scanf_float+0x64>
 800ac70:	f1b9 0f00 	cmp.w	r9, #0
 800ac74:	f000 80de 	beq.w	800ae34 <_scanf_float+0x418>
 800ac78:	0591      	lsls	r1, r2, #22
 800ac7a:	bf58      	it	pl
 800ac7c:	9902      	ldrpl	r1, [sp, #8]
 800ac7e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ac82:	bf58      	it	pl
 800ac84:	eba9 0101 	subpl.w	r1, r9, r1
 800ac88:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ac8c:	bf58      	it	pl
 800ac8e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ac92:	6022      	str	r2, [r4, #0]
 800ac94:	f04f 0900 	mov.w	r9, #0
 800ac98:	e789      	b.n	800abae <_scanf_float+0x192>
 800ac9a:	f04f 0a03 	mov.w	sl, #3
 800ac9e:	e786      	b.n	800abae <_scanf_float+0x192>
 800aca0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800aca4:	4639      	mov	r1, r7
 800aca6:	4640      	mov	r0, r8
 800aca8:	4798      	blx	r3
 800acaa:	2800      	cmp	r0, #0
 800acac:	f43f aedb 	beq.w	800aa66 <_scanf_float+0x4a>
 800acb0:	e6e6      	b.n	800aa80 <_scanf_float+0x64>
 800acb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800acb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800acba:	463a      	mov	r2, r7
 800acbc:	4640      	mov	r0, r8
 800acbe:	4798      	blx	r3
 800acc0:	6923      	ldr	r3, [r4, #16]
 800acc2:	3b01      	subs	r3, #1
 800acc4:	6123      	str	r3, [r4, #16]
 800acc6:	e6e8      	b.n	800aa9a <_scanf_float+0x7e>
 800acc8:	1e6b      	subs	r3, r5, #1
 800acca:	2b06      	cmp	r3, #6
 800accc:	d824      	bhi.n	800ad18 <_scanf_float+0x2fc>
 800acce:	2d02      	cmp	r5, #2
 800acd0:	d836      	bhi.n	800ad40 <_scanf_float+0x324>
 800acd2:	9b01      	ldr	r3, [sp, #4]
 800acd4:	429e      	cmp	r6, r3
 800acd6:	f67f aee4 	bls.w	800aaa2 <_scanf_float+0x86>
 800acda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800acde:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ace2:	463a      	mov	r2, r7
 800ace4:	4640      	mov	r0, r8
 800ace6:	4798      	blx	r3
 800ace8:	6923      	ldr	r3, [r4, #16]
 800acea:	3b01      	subs	r3, #1
 800acec:	6123      	str	r3, [r4, #16]
 800acee:	e7f0      	b.n	800acd2 <_scanf_float+0x2b6>
 800acf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800acf4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800acf8:	463a      	mov	r2, r7
 800acfa:	4640      	mov	r0, r8
 800acfc:	4798      	blx	r3
 800acfe:	6923      	ldr	r3, [r4, #16]
 800ad00:	3b01      	subs	r3, #1
 800ad02:	6123      	str	r3, [r4, #16]
 800ad04:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800ad08:	fa5f fa8a 	uxtb.w	sl, sl
 800ad0c:	f1ba 0f02 	cmp.w	sl, #2
 800ad10:	d1ee      	bne.n	800acf0 <_scanf_float+0x2d4>
 800ad12:	3d03      	subs	r5, #3
 800ad14:	b2ed      	uxtb	r5, r5
 800ad16:	1b76      	subs	r6, r6, r5
 800ad18:	6823      	ldr	r3, [r4, #0]
 800ad1a:	05da      	lsls	r2, r3, #23
 800ad1c:	d530      	bpl.n	800ad80 <_scanf_float+0x364>
 800ad1e:	055b      	lsls	r3, r3, #21
 800ad20:	d511      	bpl.n	800ad46 <_scanf_float+0x32a>
 800ad22:	9b01      	ldr	r3, [sp, #4]
 800ad24:	429e      	cmp	r6, r3
 800ad26:	f67f aebc 	bls.w	800aaa2 <_scanf_float+0x86>
 800ad2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ad32:	463a      	mov	r2, r7
 800ad34:	4640      	mov	r0, r8
 800ad36:	4798      	blx	r3
 800ad38:	6923      	ldr	r3, [r4, #16]
 800ad3a:	3b01      	subs	r3, #1
 800ad3c:	6123      	str	r3, [r4, #16]
 800ad3e:	e7f0      	b.n	800ad22 <_scanf_float+0x306>
 800ad40:	46aa      	mov	sl, r5
 800ad42:	46b3      	mov	fp, r6
 800ad44:	e7de      	b.n	800ad04 <_scanf_float+0x2e8>
 800ad46:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ad4a:	6923      	ldr	r3, [r4, #16]
 800ad4c:	2965      	cmp	r1, #101	@ 0x65
 800ad4e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ad52:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800ad56:	6123      	str	r3, [r4, #16]
 800ad58:	d00c      	beq.n	800ad74 <_scanf_float+0x358>
 800ad5a:	2945      	cmp	r1, #69	@ 0x45
 800ad5c:	d00a      	beq.n	800ad74 <_scanf_float+0x358>
 800ad5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad62:	463a      	mov	r2, r7
 800ad64:	4640      	mov	r0, r8
 800ad66:	4798      	blx	r3
 800ad68:	6923      	ldr	r3, [r4, #16]
 800ad6a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ad6e:	3b01      	subs	r3, #1
 800ad70:	1eb5      	subs	r5, r6, #2
 800ad72:	6123      	str	r3, [r4, #16]
 800ad74:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad78:	463a      	mov	r2, r7
 800ad7a:	4640      	mov	r0, r8
 800ad7c:	4798      	blx	r3
 800ad7e:	462e      	mov	r6, r5
 800ad80:	6822      	ldr	r2, [r4, #0]
 800ad82:	f012 0210 	ands.w	r2, r2, #16
 800ad86:	d001      	beq.n	800ad8c <_scanf_float+0x370>
 800ad88:	2000      	movs	r0, #0
 800ad8a:	e68b      	b.n	800aaa4 <_scanf_float+0x88>
 800ad8c:	7032      	strb	r2, [r6, #0]
 800ad8e:	6823      	ldr	r3, [r4, #0]
 800ad90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ad94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad98:	d11c      	bne.n	800add4 <_scanf_float+0x3b8>
 800ad9a:	9b02      	ldr	r3, [sp, #8]
 800ad9c:	454b      	cmp	r3, r9
 800ad9e:	eba3 0209 	sub.w	r2, r3, r9
 800ada2:	d123      	bne.n	800adec <_scanf_float+0x3d0>
 800ada4:	9901      	ldr	r1, [sp, #4]
 800ada6:	2200      	movs	r2, #0
 800ada8:	4640      	mov	r0, r8
 800adaa:	f002 fc75 	bl	800d698 <_strtod_r>
 800adae:	9b03      	ldr	r3, [sp, #12]
 800adb0:	6821      	ldr	r1, [r4, #0]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f011 0f02 	tst.w	r1, #2
 800adb8:	ec57 6b10 	vmov	r6, r7, d0
 800adbc:	f103 0204 	add.w	r2, r3, #4
 800adc0:	d01f      	beq.n	800ae02 <_scanf_float+0x3e6>
 800adc2:	9903      	ldr	r1, [sp, #12]
 800adc4:	600a      	str	r2, [r1, #0]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	e9c3 6700 	strd	r6, r7, [r3]
 800adcc:	68e3      	ldr	r3, [r4, #12]
 800adce:	3301      	adds	r3, #1
 800add0:	60e3      	str	r3, [r4, #12]
 800add2:	e7d9      	b.n	800ad88 <_scanf_float+0x36c>
 800add4:	9b04      	ldr	r3, [sp, #16]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d0e4      	beq.n	800ada4 <_scanf_float+0x388>
 800adda:	9905      	ldr	r1, [sp, #20]
 800addc:	230a      	movs	r3, #10
 800adde:	3101      	adds	r1, #1
 800ade0:	4640      	mov	r0, r8
 800ade2:	f002 fcd9 	bl	800d798 <_strtol_r>
 800ade6:	9b04      	ldr	r3, [sp, #16]
 800ade8:	9e05      	ldr	r6, [sp, #20]
 800adea:	1ac2      	subs	r2, r0, r3
 800adec:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800adf0:	429e      	cmp	r6, r3
 800adf2:	bf28      	it	cs
 800adf4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800adf8:	4910      	ldr	r1, [pc, #64]	@ (800ae3c <_scanf_float+0x420>)
 800adfa:	4630      	mov	r0, r6
 800adfc:	f000 f8e4 	bl	800afc8 <siprintf>
 800ae00:	e7d0      	b.n	800ada4 <_scanf_float+0x388>
 800ae02:	f011 0f04 	tst.w	r1, #4
 800ae06:	9903      	ldr	r1, [sp, #12]
 800ae08:	600a      	str	r2, [r1, #0]
 800ae0a:	d1dc      	bne.n	800adc6 <_scanf_float+0x3aa>
 800ae0c:	681d      	ldr	r5, [r3, #0]
 800ae0e:	4632      	mov	r2, r6
 800ae10:	463b      	mov	r3, r7
 800ae12:	4630      	mov	r0, r6
 800ae14:	4639      	mov	r1, r7
 800ae16:	f7f5 fe91 	bl	8000b3c <__aeabi_dcmpun>
 800ae1a:	b128      	cbz	r0, 800ae28 <_scanf_float+0x40c>
 800ae1c:	4808      	ldr	r0, [pc, #32]	@ (800ae40 <_scanf_float+0x424>)
 800ae1e:	f000 fa35 	bl	800b28c <nanf>
 800ae22:	ed85 0a00 	vstr	s0, [r5]
 800ae26:	e7d1      	b.n	800adcc <_scanf_float+0x3b0>
 800ae28:	4630      	mov	r0, r6
 800ae2a:	4639      	mov	r1, r7
 800ae2c:	f7f5 fee4 	bl	8000bf8 <__aeabi_d2f>
 800ae30:	6028      	str	r0, [r5, #0]
 800ae32:	e7cb      	b.n	800adcc <_scanf_float+0x3b0>
 800ae34:	f04f 0900 	mov.w	r9, #0
 800ae38:	e629      	b.n	800aa8e <_scanf_float+0x72>
 800ae3a:	bf00      	nop
 800ae3c:	0800f1e4 	.word	0x0800f1e4
 800ae40:	0800f57d 	.word	0x0800f57d

0800ae44 <std>:
 800ae44:	2300      	movs	r3, #0
 800ae46:	b510      	push	{r4, lr}
 800ae48:	4604      	mov	r4, r0
 800ae4a:	e9c0 3300 	strd	r3, r3, [r0]
 800ae4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae52:	6083      	str	r3, [r0, #8]
 800ae54:	8181      	strh	r1, [r0, #12]
 800ae56:	6643      	str	r3, [r0, #100]	@ 0x64
 800ae58:	81c2      	strh	r2, [r0, #14]
 800ae5a:	6183      	str	r3, [r0, #24]
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	2208      	movs	r2, #8
 800ae60:	305c      	adds	r0, #92	@ 0x5c
 800ae62:	f000 f92e 	bl	800b0c2 <memset>
 800ae66:	4b0d      	ldr	r3, [pc, #52]	@ (800ae9c <std+0x58>)
 800ae68:	6263      	str	r3, [r4, #36]	@ 0x24
 800ae6a:	4b0d      	ldr	r3, [pc, #52]	@ (800aea0 <std+0x5c>)
 800ae6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ae6e:	4b0d      	ldr	r3, [pc, #52]	@ (800aea4 <std+0x60>)
 800ae70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ae72:	4b0d      	ldr	r3, [pc, #52]	@ (800aea8 <std+0x64>)
 800ae74:	6323      	str	r3, [r4, #48]	@ 0x30
 800ae76:	4b0d      	ldr	r3, [pc, #52]	@ (800aeac <std+0x68>)
 800ae78:	6224      	str	r4, [r4, #32]
 800ae7a:	429c      	cmp	r4, r3
 800ae7c:	d006      	beq.n	800ae8c <std+0x48>
 800ae7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ae82:	4294      	cmp	r4, r2
 800ae84:	d002      	beq.n	800ae8c <std+0x48>
 800ae86:	33d0      	adds	r3, #208	@ 0xd0
 800ae88:	429c      	cmp	r4, r3
 800ae8a:	d105      	bne.n	800ae98 <std+0x54>
 800ae8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ae90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae94:	f000 b9e8 	b.w	800b268 <__retarget_lock_init_recursive>
 800ae98:	bd10      	pop	{r4, pc}
 800ae9a:	bf00      	nop
 800ae9c:	0800b009 	.word	0x0800b009
 800aea0:	0800b02b 	.word	0x0800b02b
 800aea4:	0800b063 	.word	0x0800b063
 800aea8:	0800b087 	.word	0x0800b087
 800aeac:	20002020 	.word	0x20002020

0800aeb0 <stdio_exit_handler>:
 800aeb0:	4a02      	ldr	r2, [pc, #8]	@ (800aebc <stdio_exit_handler+0xc>)
 800aeb2:	4903      	ldr	r1, [pc, #12]	@ (800aec0 <stdio_exit_handler+0x10>)
 800aeb4:	4803      	ldr	r0, [pc, #12]	@ (800aec4 <stdio_exit_handler+0x14>)
 800aeb6:	f000 b869 	b.w	800af8c <_fwalk_sglue>
 800aeba:	bf00      	nop
 800aebc:	20000010 	.word	0x20000010
 800aec0:	0800db55 	.word	0x0800db55
 800aec4:	20000020 	.word	0x20000020

0800aec8 <cleanup_stdio>:
 800aec8:	6841      	ldr	r1, [r0, #4]
 800aeca:	4b0c      	ldr	r3, [pc, #48]	@ (800aefc <cleanup_stdio+0x34>)
 800aecc:	4299      	cmp	r1, r3
 800aece:	b510      	push	{r4, lr}
 800aed0:	4604      	mov	r4, r0
 800aed2:	d001      	beq.n	800aed8 <cleanup_stdio+0x10>
 800aed4:	f002 fe3e 	bl	800db54 <_fflush_r>
 800aed8:	68a1      	ldr	r1, [r4, #8]
 800aeda:	4b09      	ldr	r3, [pc, #36]	@ (800af00 <cleanup_stdio+0x38>)
 800aedc:	4299      	cmp	r1, r3
 800aede:	d002      	beq.n	800aee6 <cleanup_stdio+0x1e>
 800aee0:	4620      	mov	r0, r4
 800aee2:	f002 fe37 	bl	800db54 <_fflush_r>
 800aee6:	68e1      	ldr	r1, [r4, #12]
 800aee8:	4b06      	ldr	r3, [pc, #24]	@ (800af04 <cleanup_stdio+0x3c>)
 800aeea:	4299      	cmp	r1, r3
 800aeec:	d004      	beq.n	800aef8 <cleanup_stdio+0x30>
 800aeee:	4620      	mov	r0, r4
 800aef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aef4:	f002 be2e 	b.w	800db54 <_fflush_r>
 800aef8:	bd10      	pop	{r4, pc}
 800aefa:	bf00      	nop
 800aefc:	20002020 	.word	0x20002020
 800af00:	20002088 	.word	0x20002088
 800af04:	200020f0 	.word	0x200020f0

0800af08 <global_stdio_init.part.0>:
 800af08:	b510      	push	{r4, lr}
 800af0a:	4b0b      	ldr	r3, [pc, #44]	@ (800af38 <global_stdio_init.part.0+0x30>)
 800af0c:	4c0b      	ldr	r4, [pc, #44]	@ (800af3c <global_stdio_init.part.0+0x34>)
 800af0e:	4a0c      	ldr	r2, [pc, #48]	@ (800af40 <global_stdio_init.part.0+0x38>)
 800af10:	601a      	str	r2, [r3, #0]
 800af12:	4620      	mov	r0, r4
 800af14:	2200      	movs	r2, #0
 800af16:	2104      	movs	r1, #4
 800af18:	f7ff ff94 	bl	800ae44 <std>
 800af1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800af20:	2201      	movs	r2, #1
 800af22:	2109      	movs	r1, #9
 800af24:	f7ff ff8e 	bl	800ae44 <std>
 800af28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800af2c:	2202      	movs	r2, #2
 800af2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af32:	2112      	movs	r1, #18
 800af34:	f7ff bf86 	b.w	800ae44 <std>
 800af38:	20002158 	.word	0x20002158
 800af3c:	20002020 	.word	0x20002020
 800af40:	0800aeb1 	.word	0x0800aeb1

0800af44 <__sfp_lock_acquire>:
 800af44:	4801      	ldr	r0, [pc, #4]	@ (800af4c <__sfp_lock_acquire+0x8>)
 800af46:	f000 b990 	b.w	800b26a <__retarget_lock_acquire_recursive>
 800af4a:	bf00      	nop
 800af4c:	20002161 	.word	0x20002161

0800af50 <__sfp_lock_release>:
 800af50:	4801      	ldr	r0, [pc, #4]	@ (800af58 <__sfp_lock_release+0x8>)
 800af52:	f000 b98b 	b.w	800b26c <__retarget_lock_release_recursive>
 800af56:	bf00      	nop
 800af58:	20002161 	.word	0x20002161

0800af5c <__sinit>:
 800af5c:	b510      	push	{r4, lr}
 800af5e:	4604      	mov	r4, r0
 800af60:	f7ff fff0 	bl	800af44 <__sfp_lock_acquire>
 800af64:	6a23      	ldr	r3, [r4, #32]
 800af66:	b11b      	cbz	r3, 800af70 <__sinit+0x14>
 800af68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af6c:	f7ff bff0 	b.w	800af50 <__sfp_lock_release>
 800af70:	4b04      	ldr	r3, [pc, #16]	@ (800af84 <__sinit+0x28>)
 800af72:	6223      	str	r3, [r4, #32]
 800af74:	4b04      	ldr	r3, [pc, #16]	@ (800af88 <__sinit+0x2c>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d1f5      	bne.n	800af68 <__sinit+0xc>
 800af7c:	f7ff ffc4 	bl	800af08 <global_stdio_init.part.0>
 800af80:	e7f2      	b.n	800af68 <__sinit+0xc>
 800af82:	bf00      	nop
 800af84:	0800aec9 	.word	0x0800aec9
 800af88:	20002158 	.word	0x20002158

0800af8c <_fwalk_sglue>:
 800af8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af90:	4607      	mov	r7, r0
 800af92:	4688      	mov	r8, r1
 800af94:	4614      	mov	r4, r2
 800af96:	2600      	movs	r6, #0
 800af98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af9c:	f1b9 0901 	subs.w	r9, r9, #1
 800afa0:	d505      	bpl.n	800afae <_fwalk_sglue+0x22>
 800afa2:	6824      	ldr	r4, [r4, #0]
 800afa4:	2c00      	cmp	r4, #0
 800afa6:	d1f7      	bne.n	800af98 <_fwalk_sglue+0xc>
 800afa8:	4630      	mov	r0, r6
 800afaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afae:	89ab      	ldrh	r3, [r5, #12]
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	d907      	bls.n	800afc4 <_fwalk_sglue+0x38>
 800afb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800afb8:	3301      	adds	r3, #1
 800afba:	d003      	beq.n	800afc4 <_fwalk_sglue+0x38>
 800afbc:	4629      	mov	r1, r5
 800afbe:	4638      	mov	r0, r7
 800afc0:	47c0      	blx	r8
 800afc2:	4306      	orrs	r6, r0
 800afc4:	3568      	adds	r5, #104	@ 0x68
 800afc6:	e7e9      	b.n	800af9c <_fwalk_sglue+0x10>

0800afc8 <siprintf>:
 800afc8:	b40e      	push	{r1, r2, r3}
 800afca:	b500      	push	{lr}
 800afcc:	b09c      	sub	sp, #112	@ 0x70
 800afce:	ab1d      	add	r3, sp, #116	@ 0x74
 800afd0:	9002      	str	r0, [sp, #8]
 800afd2:	9006      	str	r0, [sp, #24]
 800afd4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800afd8:	4809      	ldr	r0, [pc, #36]	@ (800b000 <siprintf+0x38>)
 800afda:	9107      	str	r1, [sp, #28]
 800afdc:	9104      	str	r1, [sp, #16]
 800afde:	4909      	ldr	r1, [pc, #36]	@ (800b004 <siprintf+0x3c>)
 800afe0:	f853 2b04 	ldr.w	r2, [r3], #4
 800afe4:	9105      	str	r1, [sp, #20]
 800afe6:	6800      	ldr	r0, [r0, #0]
 800afe8:	9301      	str	r3, [sp, #4]
 800afea:	a902      	add	r1, sp, #8
 800afec:	f002 fc32 	bl	800d854 <_svfiprintf_r>
 800aff0:	9b02      	ldr	r3, [sp, #8]
 800aff2:	2200      	movs	r2, #0
 800aff4:	701a      	strb	r2, [r3, #0]
 800aff6:	b01c      	add	sp, #112	@ 0x70
 800aff8:	f85d eb04 	ldr.w	lr, [sp], #4
 800affc:	b003      	add	sp, #12
 800affe:	4770      	bx	lr
 800b000:	2000001c 	.word	0x2000001c
 800b004:	ffff0208 	.word	0xffff0208

0800b008 <__sread>:
 800b008:	b510      	push	{r4, lr}
 800b00a:	460c      	mov	r4, r1
 800b00c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b010:	f000 f8dc 	bl	800b1cc <_read_r>
 800b014:	2800      	cmp	r0, #0
 800b016:	bfab      	itete	ge
 800b018:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b01a:	89a3      	ldrhlt	r3, [r4, #12]
 800b01c:	181b      	addge	r3, r3, r0
 800b01e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b022:	bfac      	ite	ge
 800b024:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b026:	81a3      	strhlt	r3, [r4, #12]
 800b028:	bd10      	pop	{r4, pc}

0800b02a <__swrite>:
 800b02a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b02e:	461f      	mov	r7, r3
 800b030:	898b      	ldrh	r3, [r1, #12]
 800b032:	05db      	lsls	r3, r3, #23
 800b034:	4605      	mov	r5, r0
 800b036:	460c      	mov	r4, r1
 800b038:	4616      	mov	r6, r2
 800b03a:	d505      	bpl.n	800b048 <__swrite+0x1e>
 800b03c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b040:	2302      	movs	r3, #2
 800b042:	2200      	movs	r2, #0
 800b044:	f000 f8b0 	bl	800b1a8 <_lseek_r>
 800b048:	89a3      	ldrh	r3, [r4, #12]
 800b04a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b04e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b052:	81a3      	strh	r3, [r4, #12]
 800b054:	4632      	mov	r2, r6
 800b056:	463b      	mov	r3, r7
 800b058:	4628      	mov	r0, r5
 800b05a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b05e:	f000 b8c7 	b.w	800b1f0 <_write_r>

0800b062 <__sseek>:
 800b062:	b510      	push	{r4, lr}
 800b064:	460c      	mov	r4, r1
 800b066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b06a:	f000 f89d 	bl	800b1a8 <_lseek_r>
 800b06e:	1c43      	adds	r3, r0, #1
 800b070:	89a3      	ldrh	r3, [r4, #12]
 800b072:	bf15      	itete	ne
 800b074:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b076:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b07a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b07e:	81a3      	strheq	r3, [r4, #12]
 800b080:	bf18      	it	ne
 800b082:	81a3      	strhne	r3, [r4, #12]
 800b084:	bd10      	pop	{r4, pc}

0800b086 <__sclose>:
 800b086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b08a:	f000 b827 	b.w	800b0dc <_close_r>

0800b08e <memmove>:
 800b08e:	4288      	cmp	r0, r1
 800b090:	b510      	push	{r4, lr}
 800b092:	eb01 0402 	add.w	r4, r1, r2
 800b096:	d902      	bls.n	800b09e <memmove+0x10>
 800b098:	4284      	cmp	r4, r0
 800b09a:	4623      	mov	r3, r4
 800b09c:	d807      	bhi.n	800b0ae <memmove+0x20>
 800b09e:	1e43      	subs	r3, r0, #1
 800b0a0:	42a1      	cmp	r1, r4
 800b0a2:	d008      	beq.n	800b0b6 <memmove+0x28>
 800b0a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b0ac:	e7f8      	b.n	800b0a0 <memmove+0x12>
 800b0ae:	4402      	add	r2, r0
 800b0b0:	4601      	mov	r1, r0
 800b0b2:	428a      	cmp	r2, r1
 800b0b4:	d100      	bne.n	800b0b8 <memmove+0x2a>
 800b0b6:	bd10      	pop	{r4, pc}
 800b0b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b0bc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b0c0:	e7f7      	b.n	800b0b2 <memmove+0x24>

0800b0c2 <memset>:
 800b0c2:	4402      	add	r2, r0
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d100      	bne.n	800b0cc <memset+0xa>
 800b0ca:	4770      	bx	lr
 800b0cc:	f803 1b01 	strb.w	r1, [r3], #1
 800b0d0:	e7f9      	b.n	800b0c6 <memset+0x4>
	...

0800b0d4 <_localeconv_r>:
 800b0d4:	4800      	ldr	r0, [pc, #0]	@ (800b0d8 <_localeconv_r+0x4>)
 800b0d6:	4770      	bx	lr
 800b0d8:	2000015c 	.word	0x2000015c

0800b0dc <_close_r>:
 800b0dc:	b538      	push	{r3, r4, r5, lr}
 800b0de:	4d06      	ldr	r5, [pc, #24]	@ (800b0f8 <_close_r+0x1c>)
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	4604      	mov	r4, r0
 800b0e4:	4608      	mov	r0, r1
 800b0e6:	602b      	str	r3, [r5, #0]
 800b0e8:	f7f6 fd50 	bl	8001b8c <_close>
 800b0ec:	1c43      	adds	r3, r0, #1
 800b0ee:	d102      	bne.n	800b0f6 <_close_r+0x1a>
 800b0f0:	682b      	ldr	r3, [r5, #0]
 800b0f2:	b103      	cbz	r3, 800b0f6 <_close_r+0x1a>
 800b0f4:	6023      	str	r3, [r4, #0]
 800b0f6:	bd38      	pop	{r3, r4, r5, pc}
 800b0f8:	2000215c 	.word	0x2000215c

0800b0fc <_reclaim_reent>:
 800b0fc:	4b29      	ldr	r3, [pc, #164]	@ (800b1a4 <_reclaim_reent+0xa8>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4283      	cmp	r3, r0
 800b102:	b570      	push	{r4, r5, r6, lr}
 800b104:	4604      	mov	r4, r0
 800b106:	d04b      	beq.n	800b1a0 <_reclaim_reent+0xa4>
 800b108:	69c3      	ldr	r3, [r0, #28]
 800b10a:	b1ab      	cbz	r3, 800b138 <_reclaim_reent+0x3c>
 800b10c:	68db      	ldr	r3, [r3, #12]
 800b10e:	b16b      	cbz	r3, 800b12c <_reclaim_reent+0x30>
 800b110:	2500      	movs	r5, #0
 800b112:	69e3      	ldr	r3, [r4, #28]
 800b114:	68db      	ldr	r3, [r3, #12]
 800b116:	5959      	ldr	r1, [r3, r5]
 800b118:	2900      	cmp	r1, #0
 800b11a:	d13b      	bne.n	800b194 <_reclaim_reent+0x98>
 800b11c:	3504      	adds	r5, #4
 800b11e:	2d80      	cmp	r5, #128	@ 0x80
 800b120:	d1f7      	bne.n	800b112 <_reclaim_reent+0x16>
 800b122:	69e3      	ldr	r3, [r4, #28]
 800b124:	4620      	mov	r0, r4
 800b126:	68d9      	ldr	r1, [r3, #12]
 800b128:	f000 ff02 	bl	800bf30 <_free_r>
 800b12c:	69e3      	ldr	r3, [r4, #28]
 800b12e:	6819      	ldr	r1, [r3, #0]
 800b130:	b111      	cbz	r1, 800b138 <_reclaim_reent+0x3c>
 800b132:	4620      	mov	r0, r4
 800b134:	f000 fefc 	bl	800bf30 <_free_r>
 800b138:	6961      	ldr	r1, [r4, #20]
 800b13a:	b111      	cbz	r1, 800b142 <_reclaim_reent+0x46>
 800b13c:	4620      	mov	r0, r4
 800b13e:	f000 fef7 	bl	800bf30 <_free_r>
 800b142:	69e1      	ldr	r1, [r4, #28]
 800b144:	b111      	cbz	r1, 800b14c <_reclaim_reent+0x50>
 800b146:	4620      	mov	r0, r4
 800b148:	f000 fef2 	bl	800bf30 <_free_r>
 800b14c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b14e:	b111      	cbz	r1, 800b156 <_reclaim_reent+0x5a>
 800b150:	4620      	mov	r0, r4
 800b152:	f000 feed 	bl	800bf30 <_free_r>
 800b156:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b158:	b111      	cbz	r1, 800b160 <_reclaim_reent+0x64>
 800b15a:	4620      	mov	r0, r4
 800b15c:	f000 fee8 	bl	800bf30 <_free_r>
 800b160:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b162:	b111      	cbz	r1, 800b16a <_reclaim_reent+0x6e>
 800b164:	4620      	mov	r0, r4
 800b166:	f000 fee3 	bl	800bf30 <_free_r>
 800b16a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b16c:	b111      	cbz	r1, 800b174 <_reclaim_reent+0x78>
 800b16e:	4620      	mov	r0, r4
 800b170:	f000 fede 	bl	800bf30 <_free_r>
 800b174:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b176:	b111      	cbz	r1, 800b17e <_reclaim_reent+0x82>
 800b178:	4620      	mov	r0, r4
 800b17a:	f000 fed9 	bl	800bf30 <_free_r>
 800b17e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b180:	b111      	cbz	r1, 800b188 <_reclaim_reent+0x8c>
 800b182:	4620      	mov	r0, r4
 800b184:	f000 fed4 	bl	800bf30 <_free_r>
 800b188:	6a23      	ldr	r3, [r4, #32]
 800b18a:	b14b      	cbz	r3, 800b1a0 <_reclaim_reent+0xa4>
 800b18c:	4620      	mov	r0, r4
 800b18e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b192:	4718      	bx	r3
 800b194:	680e      	ldr	r6, [r1, #0]
 800b196:	4620      	mov	r0, r4
 800b198:	f000 feca 	bl	800bf30 <_free_r>
 800b19c:	4631      	mov	r1, r6
 800b19e:	e7bb      	b.n	800b118 <_reclaim_reent+0x1c>
 800b1a0:	bd70      	pop	{r4, r5, r6, pc}
 800b1a2:	bf00      	nop
 800b1a4:	2000001c 	.word	0x2000001c

0800b1a8 <_lseek_r>:
 800b1a8:	b538      	push	{r3, r4, r5, lr}
 800b1aa:	4d07      	ldr	r5, [pc, #28]	@ (800b1c8 <_lseek_r+0x20>)
 800b1ac:	4604      	mov	r4, r0
 800b1ae:	4608      	mov	r0, r1
 800b1b0:	4611      	mov	r1, r2
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	602a      	str	r2, [r5, #0]
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	f7f6 fd0f 	bl	8001bda <_lseek>
 800b1bc:	1c43      	adds	r3, r0, #1
 800b1be:	d102      	bne.n	800b1c6 <_lseek_r+0x1e>
 800b1c0:	682b      	ldr	r3, [r5, #0]
 800b1c2:	b103      	cbz	r3, 800b1c6 <_lseek_r+0x1e>
 800b1c4:	6023      	str	r3, [r4, #0]
 800b1c6:	bd38      	pop	{r3, r4, r5, pc}
 800b1c8:	2000215c 	.word	0x2000215c

0800b1cc <_read_r>:
 800b1cc:	b538      	push	{r3, r4, r5, lr}
 800b1ce:	4d07      	ldr	r5, [pc, #28]	@ (800b1ec <_read_r+0x20>)
 800b1d0:	4604      	mov	r4, r0
 800b1d2:	4608      	mov	r0, r1
 800b1d4:	4611      	mov	r1, r2
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	602a      	str	r2, [r5, #0]
 800b1da:	461a      	mov	r2, r3
 800b1dc:	f7f6 fc9d 	bl	8001b1a <_read>
 800b1e0:	1c43      	adds	r3, r0, #1
 800b1e2:	d102      	bne.n	800b1ea <_read_r+0x1e>
 800b1e4:	682b      	ldr	r3, [r5, #0]
 800b1e6:	b103      	cbz	r3, 800b1ea <_read_r+0x1e>
 800b1e8:	6023      	str	r3, [r4, #0]
 800b1ea:	bd38      	pop	{r3, r4, r5, pc}
 800b1ec:	2000215c 	.word	0x2000215c

0800b1f0 <_write_r>:
 800b1f0:	b538      	push	{r3, r4, r5, lr}
 800b1f2:	4d07      	ldr	r5, [pc, #28]	@ (800b210 <_write_r+0x20>)
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	4608      	mov	r0, r1
 800b1f8:	4611      	mov	r1, r2
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	602a      	str	r2, [r5, #0]
 800b1fe:	461a      	mov	r2, r3
 800b200:	f7f6 fca8 	bl	8001b54 <_write>
 800b204:	1c43      	adds	r3, r0, #1
 800b206:	d102      	bne.n	800b20e <_write_r+0x1e>
 800b208:	682b      	ldr	r3, [r5, #0]
 800b20a:	b103      	cbz	r3, 800b20e <_write_r+0x1e>
 800b20c:	6023      	str	r3, [r4, #0]
 800b20e:	bd38      	pop	{r3, r4, r5, pc}
 800b210:	2000215c 	.word	0x2000215c

0800b214 <__errno>:
 800b214:	4b01      	ldr	r3, [pc, #4]	@ (800b21c <__errno+0x8>)
 800b216:	6818      	ldr	r0, [r3, #0]
 800b218:	4770      	bx	lr
 800b21a:	bf00      	nop
 800b21c:	2000001c 	.word	0x2000001c

0800b220 <__libc_init_array>:
 800b220:	b570      	push	{r4, r5, r6, lr}
 800b222:	4d0d      	ldr	r5, [pc, #52]	@ (800b258 <__libc_init_array+0x38>)
 800b224:	4c0d      	ldr	r4, [pc, #52]	@ (800b25c <__libc_init_array+0x3c>)
 800b226:	1b64      	subs	r4, r4, r5
 800b228:	10a4      	asrs	r4, r4, #2
 800b22a:	2600      	movs	r6, #0
 800b22c:	42a6      	cmp	r6, r4
 800b22e:	d109      	bne.n	800b244 <__libc_init_array+0x24>
 800b230:	4d0b      	ldr	r5, [pc, #44]	@ (800b260 <__libc_init_array+0x40>)
 800b232:	4c0c      	ldr	r4, [pc, #48]	@ (800b264 <__libc_init_array+0x44>)
 800b234:	f003 fb56 	bl	800e8e4 <_init>
 800b238:	1b64      	subs	r4, r4, r5
 800b23a:	10a4      	asrs	r4, r4, #2
 800b23c:	2600      	movs	r6, #0
 800b23e:	42a6      	cmp	r6, r4
 800b240:	d105      	bne.n	800b24e <__libc_init_array+0x2e>
 800b242:	bd70      	pop	{r4, r5, r6, pc}
 800b244:	f855 3b04 	ldr.w	r3, [r5], #4
 800b248:	4798      	blx	r3
 800b24a:	3601      	adds	r6, #1
 800b24c:	e7ee      	b.n	800b22c <__libc_init_array+0xc>
 800b24e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b252:	4798      	blx	r3
 800b254:	3601      	adds	r6, #1
 800b256:	e7f2      	b.n	800b23e <__libc_init_array+0x1e>
 800b258:	0800f5e8 	.word	0x0800f5e8
 800b25c:	0800f5e8 	.word	0x0800f5e8
 800b260:	0800f5e8 	.word	0x0800f5e8
 800b264:	0800f5ec 	.word	0x0800f5ec

0800b268 <__retarget_lock_init_recursive>:
 800b268:	4770      	bx	lr

0800b26a <__retarget_lock_acquire_recursive>:
 800b26a:	4770      	bx	lr

0800b26c <__retarget_lock_release_recursive>:
 800b26c:	4770      	bx	lr

0800b26e <memcpy>:
 800b26e:	440a      	add	r2, r1
 800b270:	4291      	cmp	r1, r2
 800b272:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b276:	d100      	bne.n	800b27a <memcpy+0xc>
 800b278:	4770      	bx	lr
 800b27a:	b510      	push	{r4, lr}
 800b27c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b280:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b284:	4291      	cmp	r1, r2
 800b286:	d1f9      	bne.n	800b27c <memcpy+0xe>
 800b288:	bd10      	pop	{r4, pc}
	...

0800b28c <nanf>:
 800b28c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b294 <nanf+0x8>
 800b290:	4770      	bx	lr
 800b292:	bf00      	nop
 800b294:	7fc00000 	.word	0x7fc00000

0800b298 <quorem>:
 800b298:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b29c:	6903      	ldr	r3, [r0, #16]
 800b29e:	690c      	ldr	r4, [r1, #16]
 800b2a0:	42a3      	cmp	r3, r4
 800b2a2:	4607      	mov	r7, r0
 800b2a4:	db7e      	blt.n	800b3a4 <quorem+0x10c>
 800b2a6:	3c01      	subs	r4, #1
 800b2a8:	f101 0814 	add.w	r8, r1, #20
 800b2ac:	00a3      	lsls	r3, r4, #2
 800b2ae:	f100 0514 	add.w	r5, r0, #20
 800b2b2:	9300      	str	r3, [sp, #0]
 800b2b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2b8:	9301      	str	r3, [sp, #4]
 800b2ba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b2be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b2ca:	fbb2 f6f3 	udiv	r6, r2, r3
 800b2ce:	d32e      	bcc.n	800b32e <quorem+0x96>
 800b2d0:	f04f 0a00 	mov.w	sl, #0
 800b2d4:	46c4      	mov	ip, r8
 800b2d6:	46ae      	mov	lr, r5
 800b2d8:	46d3      	mov	fp, sl
 800b2da:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b2de:	b298      	uxth	r0, r3
 800b2e0:	fb06 a000 	mla	r0, r6, r0, sl
 800b2e4:	0c02      	lsrs	r2, r0, #16
 800b2e6:	0c1b      	lsrs	r3, r3, #16
 800b2e8:	fb06 2303 	mla	r3, r6, r3, r2
 800b2ec:	f8de 2000 	ldr.w	r2, [lr]
 800b2f0:	b280      	uxth	r0, r0
 800b2f2:	b292      	uxth	r2, r2
 800b2f4:	1a12      	subs	r2, r2, r0
 800b2f6:	445a      	add	r2, fp
 800b2f8:	f8de 0000 	ldr.w	r0, [lr]
 800b2fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b300:	b29b      	uxth	r3, r3
 800b302:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b306:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b30a:	b292      	uxth	r2, r2
 800b30c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b310:	45e1      	cmp	r9, ip
 800b312:	f84e 2b04 	str.w	r2, [lr], #4
 800b316:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b31a:	d2de      	bcs.n	800b2da <quorem+0x42>
 800b31c:	9b00      	ldr	r3, [sp, #0]
 800b31e:	58eb      	ldr	r3, [r5, r3]
 800b320:	b92b      	cbnz	r3, 800b32e <quorem+0x96>
 800b322:	9b01      	ldr	r3, [sp, #4]
 800b324:	3b04      	subs	r3, #4
 800b326:	429d      	cmp	r5, r3
 800b328:	461a      	mov	r2, r3
 800b32a:	d32f      	bcc.n	800b38c <quorem+0xf4>
 800b32c:	613c      	str	r4, [r7, #16]
 800b32e:	4638      	mov	r0, r7
 800b330:	f001 f9c2 	bl	800c6b8 <__mcmp>
 800b334:	2800      	cmp	r0, #0
 800b336:	db25      	blt.n	800b384 <quorem+0xec>
 800b338:	4629      	mov	r1, r5
 800b33a:	2000      	movs	r0, #0
 800b33c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b340:	f8d1 c000 	ldr.w	ip, [r1]
 800b344:	fa1f fe82 	uxth.w	lr, r2
 800b348:	fa1f f38c 	uxth.w	r3, ip
 800b34c:	eba3 030e 	sub.w	r3, r3, lr
 800b350:	4403      	add	r3, r0
 800b352:	0c12      	lsrs	r2, r2, #16
 800b354:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b358:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b362:	45c1      	cmp	r9, r8
 800b364:	f841 3b04 	str.w	r3, [r1], #4
 800b368:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b36c:	d2e6      	bcs.n	800b33c <quorem+0xa4>
 800b36e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b372:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b376:	b922      	cbnz	r2, 800b382 <quorem+0xea>
 800b378:	3b04      	subs	r3, #4
 800b37a:	429d      	cmp	r5, r3
 800b37c:	461a      	mov	r2, r3
 800b37e:	d30b      	bcc.n	800b398 <quorem+0x100>
 800b380:	613c      	str	r4, [r7, #16]
 800b382:	3601      	adds	r6, #1
 800b384:	4630      	mov	r0, r6
 800b386:	b003      	add	sp, #12
 800b388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b38c:	6812      	ldr	r2, [r2, #0]
 800b38e:	3b04      	subs	r3, #4
 800b390:	2a00      	cmp	r2, #0
 800b392:	d1cb      	bne.n	800b32c <quorem+0x94>
 800b394:	3c01      	subs	r4, #1
 800b396:	e7c6      	b.n	800b326 <quorem+0x8e>
 800b398:	6812      	ldr	r2, [r2, #0]
 800b39a:	3b04      	subs	r3, #4
 800b39c:	2a00      	cmp	r2, #0
 800b39e:	d1ef      	bne.n	800b380 <quorem+0xe8>
 800b3a0:	3c01      	subs	r4, #1
 800b3a2:	e7ea      	b.n	800b37a <quorem+0xe2>
 800b3a4:	2000      	movs	r0, #0
 800b3a6:	e7ee      	b.n	800b386 <quorem+0xee>

0800b3a8 <_dtoa_r>:
 800b3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ac:	69c7      	ldr	r7, [r0, #28]
 800b3ae:	b099      	sub	sp, #100	@ 0x64
 800b3b0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b3b4:	ec55 4b10 	vmov	r4, r5, d0
 800b3b8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b3ba:	9109      	str	r1, [sp, #36]	@ 0x24
 800b3bc:	4683      	mov	fp, r0
 800b3be:	920e      	str	r2, [sp, #56]	@ 0x38
 800b3c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b3c2:	b97f      	cbnz	r7, 800b3e4 <_dtoa_r+0x3c>
 800b3c4:	2010      	movs	r0, #16
 800b3c6:	f000 fdfd 	bl	800bfc4 <malloc>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	f8cb 001c 	str.w	r0, [fp, #28]
 800b3d0:	b920      	cbnz	r0, 800b3dc <_dtoa_r+0x34>
 800b3d2:	4ba7      	ldr	r3, [pc, #668]	@ (800b670 <_dtoa_r+0x2c8>)
 800b3d4:	21ef      	movs	r1, #239	@ 0xef
 800b3d6:	48a7      	ldr	r0, [pc, #668]	@ (800b674 <_dtoa_r+0x2cc>)
 800b3d8:	f002 fc0e 	bl	800dbf8 <__assert_func>
 800b3dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b3e0:	6007      	str	r7, [r0, #0]
 800b3e2:	60c7      	str	r7, [r0, #12]
 800b3e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b3e8:	6819      	ldr	r1, [r3, #0]
 800b3ea:	b159      	cbz	r1, 800b404 <_dtoa_r+0x5c>
 800b3ec:	685a      	ldr	r2, [r3, #4]
 800b3ee:	604a      	str	r2, [r1, #4]
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	4093      	lsls	r3, r2
 800b3f4:	608b      	str	r3, [r1, #8]
 800b3f6:	4658      	mov	r0, fp
 800b3f8:	f000 feda 	bl	800c1b0 <_Bfree>
 800b3fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b400:	2200      	movs	r2, #0
 800b402:	601a      	str	r2, [r3, #0]
 800b404:	1e2b      	subs	r3, r5, #0
 800b406:	bfb9      	ittee	lt
 800b408:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b40c:	9303      	strlt	r3, [sp, #12]
 800b40e:	2300      	movge	r3, #0
 800b410:	6033      	strge	r3, [r6, #0]
 800b412:	9f03      	ldr	r7, [sp, #12]
 800b414:	4b98      	ldr	r3, [pc, #608]	@ (800b678 <_dtoa_r+0x2d0>)
 800b416:	bfbc      	itt	lt
 800b418:	2201      	movlt	r2, #1
 800b41a:	6032      	strlt	r2, [r6, #0]
 800b41c:	43bb      	bics	r3, r7
 800b41e:	d112      	bne.n	800b446 <_dtoa_r+0x9e>
 800b420:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b422:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b426:	6013      	str	r3, [r2, #0]
 800b428:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b42c:	4323      	orrs	r3, r4
 800b42e:	f000 854d 	beq.w	800becc <_dtoa_r+0xb24>
 800b432:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b434:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b68c <_dtoa_r+0x2e4>
 800b438:	2b00      	cmp	r3, #0
 800b43a:	f000 854f 	beq.w	800bedc <_dtoa_r+0xb34>
 800b43e:	f10a 0303 	add.w	r3, sl, #3
 800b442:	f000 bd49 	b.w	800bed8 <_dtoa_r+0xb30>
 800b446:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b44a:	2200      	movs	r2, #0
 800b44c:	ec51 0b17 	vmov	r0, r1, d7
 800b450:	2300      	movs	r3, #0
 800b452:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b456:	f7f5 fb3f 	bl	8000ad8 <__aeabi_dcmpeq>
 800b45a:	4680      	mov	r8, r0
 800b45c:	b158      	cbz	r0, 800b476 <_dtoa_r+0xce>
 800b45e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b460:	2301      	movs	r3, #1
 800b462:	6013      	str	r3, [r2, #0]
 800b464:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b466:	b113      	cbz	r3, 800b46e <_dtoa_r+0xc6>
 800b468:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b46a:	4b84      	ldr	r3, [pc, #528]	@ (800b67c <_dtoa_r+0x2d4>)
 800b46c:	6013      	str	r3, [r2, #0]
 800b46e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b690 <_dtoa_r+0x2e8>
 800b472:	f000 bd33 	b.w	800bedc <_dtoa_r+0xb34>
 800b476:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b47a:	aa16      	add	r2, sp, #88	@ 0x58
 800b47c:	a917      	add	r1, sp, #92	@ 0x5c
 800b47e:	4658      	mov	r0, fp
 800b480:	f001 fa3a 	bl	800c8f8 <__d2b>
 800b484:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b488:	4681      	mov	r9, r0
 800b48a:	2e00      	cmp	r6, #0
 800b48c:	d077      	beq.n	800b57e <_dtoa_r+0x1d6>
 800b48e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b490:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b494:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b498:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b49c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b4a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b4a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	4b74      	ldr	r3, [pc, #464]	@ (800b680 <_dtoa_r+0x2d8>)
 800b4ae:	f7f4 fef3 	bl	8000298 <__aeabi_dsub>
 800b4b2:	a369      	add	r3, pc, #420	@ (adr r3, 800b658 <_dtoa_r+0x2b0>)
 800b4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b8:	f7f5 f8a6 	bl	8000608 <__aeabi_dmul>
 800b4bc:	a368      	add	r3, pc, #416	@ (adr r3, 800b660 <_dtoa_r+0x2b8>)
 800b4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c2:	f7f4 feeb 	bl	800029c <__adddf3>
 800b4c6:	4604      	mov	r4, r0
 800b4c8:	4630      	mov	r0, r6
 800b4ca:	460d      	mov	r5, r1
 800b4cc:	f7f5 f832 	bl	8000534 <__aeabi_i2d>
 800b4d0:	a365      	add	r3, pc, #404	@ (adr r3, 800b668 <_dtoa_r+0x2c0>)
 800b4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d6:	f7f5 f897 	bl	8000608 <__aeabi_dmul>
 800b4da:	4602      	mov	r2, r0
 800b4dc:	460b      	mov	r3, r1
 800b4de:	4620      	mov	r0, r4
 800b4e0:	4629      	mov	r1, r5
 800b4e2:	f7f4 fedb 	bl	800029c <__adddf3>
 800b4e6:	4604      	mov	r4, r0
 800b4e8:	460d      	mov	r5, r1
 800b4ea:	f7f5 fb3d 	bl	8000b68 <__aeabi_d2iz>
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	4607      	mov	r7, r0
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	4629      	mov	r1, r5
 800b4f8:	f7f5 faf8 	bl	8000aec <__aeabi_dcmplt>
 800b4fc:	b140      	cbz	r0, 800b510 <_dtoa_r+0x168>
 800b4fe:	4638      	mov	r0, r7
 800b500:	f7f5 f818 	bl	8000534 <__aeabi_i2d>
 800b504:	4622      	mov	r2, r4
 800b506:	462b      	mov	r3, r5
 800b508:	f7f5 fae6 	bl	8000ad8 <__aeabi_dcmpeq>
 800b50c:	b900      	cbnz	r0, 800b510 <_dtoa_r+0x168>
 800b50e:	3f01      	subs	r7, #1
 800b510:	2f16      	cmp	r7, #22
 800b512:	d851      	bhi.n	800b5b8 <_dtoa_r+0x210>
 800b514:	4b5b      	ldr	r3, [pc, #364]	@ (800b684 <_dtoa_r+0x2dc>)
 800b516:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b522:	f7f5 fae3 	bl	8000aec <__aeabi_dcmplt>
 800b526:	2800      	cmp	r0, #0
 800b528:	d048      	beq.n	800b5bc <_dtoa_r+0x214>
 800b52a:	3f01      	subs	r7, #1
 800b52c:	2300      	movs	r3, #0
 800b52e:	9312      	str	r3, [sp, #72]	@ 0x48
 800b530:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b532:	1b9b      	subs	r3, r3, r6
 800b534:	1e5a      	subs	r2, r3, #1
 800b536:	bf44      	itt	mi
 800b538:	f1c3 0801 	rsbmi	r8, r3, #1
 800b53c:	2300      	movmi	r3, #0
 800b53e:	9208      	str	r2, [sp, #32]
 800b540:	bf54      	ite	pl
 800b542:	f04f 0800 	movpl.w	r8, #0
 800b546:	9308      	strmi	r3, [sp, #32]
 800b548:	2f00      	cmp	r7, #0
 800b54a:	db39      	blt.n	800b5c0 <_dtoa_r+0x218>
 800b54c:	9b08      	ldr	r3, [sp, #32]
 800b54e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b550:	443b      	add	r3, r7
 800b552:	9308      	str	r3, [sp, #32]
 800b554:	2300      	movs	r3, #0
 800b556:	930a      	str	r3, [sp, #40]	@ 0x28
 800b558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b55a:	2b09      	cmp	r3, #9
 800b55c:	d864      	bhi.n	800b628 <_dtoa_r+0x280>
 800b55e:	2b05      	cmp	r3, #5
 800b560:	bfc4      	itt	gt
 800b562:	3b04      	subgt	r3, #4
 800b564:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b568:	f1a3 0302 	sub.w	r3, r3, #2
 800b56c:	bfcc      	ite	gt
 800b56e:	2400      	movgt	r4, #0
 800b570:	2401      	movle	r4, #1
 800b572:	2b03      	cmp	r3, #3
 800b574:	d863      	bhi.n	800b63e <_dtoa_r+0x296>
 800b576:	e8df f003 	tbb	[pc, r3]
 800b57a:	372a      	.short	0x372a
 800b57c:	5535      	.short	0x5535
 800b57e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b582:	441e      	add	r6, r3
 800b584:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b588:	2b20      	cmp	r3, #32
 800b58a:	bfc1      	itttt	gt
 800b58c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b590:	409f      	lslgt	r7, r3
 800b592:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b596:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b59a:	bfd6      	itet	le
 800b59c:	f1c3 0320 	rsble	r3, r3, #32
 800b5a0:	ea47 0003 	orrgt.w	r0, r7, r3
 800b5a4:	fa04 f003 	lslle.w	r0, r4, r3
 800b5a8:	f7f4 ffb4 	bl	8000514 <__aeabi_ui2d>
 800b5ac:	2201      	movs	r2, #1
 800b5ae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b5b2:	3e01      	subs	r6, #1
 800b5b4:	9214      	str	r2, [sp, #80]	@ 0x50
 800b5b6:	e777      	b.n	800b4a8 <_dtoa_r+0x100>
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	e7b8      	b.n	800b52e <_dtoa_r+0x186>
 800b5bc:	9012      	str	r0, [sp, #72]	@ 0x48
 800b5be:	e7b7      	b.n	800b530 <_dtoa_r+0x188>
 800b5c0:	427b      	negs	r3, r7
 800b5c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	eba8 0807 	sub.w	r8, r8, r7
 800b5ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b5cc:	e7c4      	b.n	800b558 <_dtoa_r+0x1b0>
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b5d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	dc35      	bgt.n	800b644 <_dtoa_r+0x29c>
 800b5d8:	2301      	movs	r3, #1
 800b5da:	9300      	str	r3, [sp, #0]
 800b5dc:	9307      	str	r3, [sp, #28]
 800b5de:	461a      	mov	r2, r3
 800b5e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b5e2:	e00b      	b.n	800b5fc <_dtoa_r+0x254>
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	e7f3      	b.n	800b5d0 <_dtoa_r+0x228>
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b5ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5ee:	18fb      	adds	r3, r7, r3
 800b5f0:	9300      	str	r3, [sp, #0]
 800b5f2:	3301      	adds	r3, #1
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	9307      	str	r3, [sp, #28]
 800b5f8:	bfb8      	it	lt
 800b5fa:	2301      	movlt	r3, #1
 800b5fc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b600:	2100      	movs	r1, #0
 800b602:	2204      	movs	r2, #4
 800b604:	f102 0514 	add.w	r5, r2, #20
 800b608:	429d      	cmp	r5, r3
 800b60a:	d91f      	bls.n	800b64c <_dtoa_r+0x2a4>
 800b60c:	6041      	str	r1, [r0, #4]
 800b60e:	4658      	mov	r0, fp
 800b610:	f000 fd8e 	bl	800c130 <_Balloc>
 800b614:	4682      	mov	sl, r0
 800b616:	2800      	cmp	r0, #0
 800b618:	d13c      	bne.n	800b694 <_dtoa_r+0x2ec>
 800b61a:	4b1b      	ldr	r3, [pc, #108]	@ (800b688 <_dtoa_r+0x2e0>)
 800b61c:	4602      	mov	r2, r0
 800b61e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b622:	e6d8      	b.n	800b3d6 <_dtoa_r+0x2e>
 800b624:	2301      	movs	r3, #1
 800b626:	e7e0      	b.n	800b5ea <_dtoa_r+0x242>
 800b628:	2401      	movs	r4, #1
 800b62a:	2300      	movs	r3, #0
 800b62c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b62e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b630:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b634:	9300      	str	r3, [sp, #0]
 800b636:	9307      	str	r3, [sp, #28]
 800b638:	2200      	movs	r2, #0
 800b63a:	2312      	movs	r3, #18
 800b63c:	e7d0      	b.n	800b5e0 <_dtoa_r+0x238>
 800b63e:	2301      	movs	r3, #1
 800b640:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b642:	e7f5      	b.n	800b630 <_dtoa_r+0x288>
 800b644:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b646:	9300      	str	r3, [sp, #0]
 800b648:	9307      	str	r3, [sp, #28]
 800b64a:	e7d7      	b.n	800b5fc <_dtoa_r+0x254>
 800b64c:	3101      	adds	r1, #1
 800b64e:	0052      	lsls	r2, r2, #1
 800b650:	e7d8      	b.n	800b604 <_dtoa_r+0x25c>
 800b652:	bf00      	nop
 800b654:	f3af 8000 	nop.w
 800b658:	636f4361 	.word	0x636f4361
 800b65c:	3fd287a7 	.word	0x3fd287a7
 800b660:	8b60c8b3 	.word	0x8b60c8b3
 800b664:	3fc68a28 	.word	0x3fc68a28
 800b668:	509f79fb 	.word	0x509f79fb
 800b66c:	3fd34413 	.word	0x3fd34413
 800b670:	0800f1f6 	.word	0x0800f1f6
 800b674:	0800f20d 	.word	0x0800f20d
 800b678:	7ff00000 	.word	0x7ff00000
 800b67c:	0800f1c1 	.word	0x0800f1c1
 800b680:	3ff80000 	.word	0x3ff80000
 800b684:	0800f308 	.word	0x0800f308
 800b688:	0800f265 	.word	0x0800f265
 800b68c:	0800f1f2 	.word	0x0800f1f2
 800b690:	0800f1c0 	.word	0x0800f1c0
 800b694:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b698:	6018      	str	r0, [r3, #0]
 800b69a:	9b07      	ldr	r3, [sp, #28]
 800b69c:	2b0e      	cmp	r3, #14
 800b69e:	f200 80a4 	bhi.w	800b7ea <_dtoa_r+0x442>
 800b6a2:	2c00      	cmp	r4, #0
 800b6a4:	f000 80a1 	beq.w	800b7ea <_dtoa_r+0x442>
 800b6a8:	2f00      	cmp	r7, #0
 800b6aa:	dd33      	ble.n	800b714 <_dtoa_r+0x36c>
 800b6ac:	4bad      	ldr	r3, [pc, #692]	@ (800b964 <_dtoa_r+0x5bc>)
 800b6ae:	f007 020f 	and.w	r2, r7, #15
 800b6b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6b6:	ed93 7b00 	vldr	d7, [r3]
 800b6ba:	05f8      	lsls	r0, r7, #23
 800b6bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b6c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b6c4:	d516      	bpl.n	800b6f4 <_dtoa_r+0x34c>
 800b6c6:	4ba8      	ldr	r3, [pc, #672]	@ (800b968 <_dtoa_r+0x5c0>)
 800b6c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b6cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b6d0:	f7f5 f8c4 	bl	800085c <__aeabi_ddiv>
 800b6d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6d8:	f004 040f 	and.w	r4, r4, #15
 800b6dc:	2603      	movs	r6, #3
 800b6de:	4da2      	ldr	r5, [pc, #648]	@ (800b968 <_dtoa_r+0x5c0>)
 800b6e0:	b954      	cbnz	r4, 800b6f8 <_dtoa_r+0x350>
 800b6e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6ea:	f7f5 f8b7 	bl	800085c <__aeabi_ddiv>
 800b6ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6f2:	e028      	b.n	800b746 <_dtoa_r+0x39e>
 800b6f4:	2602      	movs	r6, #2
 800b6f6:	e7f2      	b.n	800b6de <_dtoa_r+0x336>
 800b6f8:	07e1      	lsls	r1, r4, #31
 800b6fa:	d508      	bpl.n	800b70e <_dtoa_r+0x366>
 800b6fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b700:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b704:	f7f4 ff80 	bl	8000608 <__aeabi_dmul>
 800b708:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b70c:	3601      	adds	r6, #1
 800b70e:	1064      	asrs	r4, r4, #1
 800b710:	3508      	adds	r5, #8
 800b712:	e7e5      	b.n	800b6e0 <_dtoa_r+0x338>
 800b714:	f000 80d2 	beq.w	800b8bc <_dtoa_r+0x514>
 800b718:	427c      	negs	r4, r7
 800b71a:	4b92      	ldr	r3, [pc, #584]	@ (800b964 <_dtoa_r+0x5bc>)
 800b71c:	4d92      	ldr	r5, [pc, #584]	@ (800b968 <_dtoa_r+0x5c0>)
 800b71e:	f004 020f 	and.w	r2, r4, #15
 800b722:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b72e:	f7f4 ff6b 	bl	8000608 <__aeabi_dmul>
 800b732:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b736:	1124      	asrs	r4, r4, #4
 800b738:	2300      	movs	r3, #0
 800b73a:	2602      	movs	r6, #2
 800b73c:	2c00      	cmp	r4, #0
 800b73e:	f040 80b2 	bne.w	800b8a6 <_dtoa_r+0x4fe>
 800b742:	2b00      	cmp	r3, #0
 800b744:	d1d3      	bne.n	800b6ee <_dtoa_r+0x346>
 800b746:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b748:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	f000 80b7 	beq.w	800b8c0 <_dtoa_r+0x518>
 800b752:	4b86      	ldr	r3, [pc, #536]	@ (800b96c <_dtoa_r+0x5c4>)
 800b754:	2200      	movs	r2, #0
 800b756:	4620      	mov	r0, r4
 800b758:	4629      	mov	r1, r5
 800b75a:	f7f5 f9c7 	bl	8000aec <__aeabi_dcmplt>
 800b75e:	2800      	cmp	r0, #0
 800b760:	f000 80ae 	beq.w	800b8c0 <_dtoa_r+0x518>
 800b764:	9b07      	ldr	r3, [sp, #28]
 800b766:	2b00      	cmp	r3, #0
 800b768:	f000 80aa 	beq.w	800b8c0 <_dtoa_r+0x518>
 800b76c:	9b00      	ldr	r3, [sp, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	dd37      	ble.n	800b7e2 <_dtoa_r+0x43a>
 800b772:	1e7b      	subs	r3, r7, #1
 800b774:	9304      	str	r3, [sp, #16]
 800b776:	4620      	mov	r0, r4
 800b778:	4b7d      	ldr	r3, [pc, #500]	@ (800b970 <_dtoa_r+0x5c8>)
 800b77a:	2200      	movs	r2, #0
 800b77c:	4629      	mov	r1, r5
 800b77e:	f7f4 ff43 	bl	8000608 <__aeabi_dmul>
 800b782:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b786:	9c00      	ldr	r4, [sp, #0]
 800b788:	3601      	adds	r6, #1
 800b78a:	4630      	mov	r0, r6
 800b78c:	f7f4 fed2 	bl	8000534 <__aeabi_i2d>
 800b790:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b794:	f7f4 ff38 	bl	8000608 <__aeabi_dmul>
 800b798:	4b76      	ldr	r3, [pc, #472]	@ (800b974 <_dtoa_r+0x5cc>)
 800b79a:	2200      	movs	r2, #0
 800b79c:	f7f4 fd7e 	bl	800029c <__adddf3>
 800b7a0:	4605      	mov	r5, r0
 800b7a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b7a6:	2c00      	cmp	r4, #0
 800b7a8:	f040 808d 	bne.w	800b8c6 <_dtoa_r+0x51e>
 800b7ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7b0:	4b71      	ldr	r3, [pc, #452]	@ (800b978 <_dtoa_r+0x5d0>)
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f7f4 fd70 	bl	8000298 <__aeabi_dsub>
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	460b      	mov	r3, r1
 800b7bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b7c0:	462a      	mov	r2, r5
 800b7c2:	4633      	mov	r3, r6
 800b7c4:	f7f5 f9b0 	bl	8000b28 <__aeabi_dcmpgt>
 800b7c8:	2800      	cmp	r0, #0
 800b7ca:	f040 828b 	bne.w	800bce4 <_dtoa_r+0x93c>
 800b7ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7d2:	462a      	mov	r2, r5
 800b7d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b7d8:	f7f5 f988 	bl	8000aec <__aeabi_dcmplt>
 800b7dc:	2800      	cmp	r0, #0
 800b7de:	f040 8128 	bne.w	800ba32 <_dtoa_r+0x68a>
 800b7e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b7e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b7ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	f2c0 815a 	blt.w	800baa6 <_dtoa_r+0x6fe>
 800b7f2:	2f0e      	cmp	r7, #14
 800b7f4:	f300 8157 	bgt.w	800baa6 <_dtoa_r+0x6fe>
 800b7f8:	4b5a      	ldr	r3, [pc, #360]	@ (800b964 <_dtoa_r+0x5bc>)
 800b7fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b7fe:	ed93 7b00 	vldr	d7, [r3]
 800b802:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b804:	2b00      	cmp	r3, #0
 800b806:	ed8d 7b00 	vstr	d7, [sp]
 800b80a:	da03      	bge.n	800b814 <_dtoa_r+0x46c>
 800b80c:	9b07      	ldr	r3, [sp, #28]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	f340 8101 	ble.w	800ba16 <_dtoa_r+0x66e>
 800b814:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b818:	4656      	mov	r6, sl
 800b81a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b81e:	4620      	mov	r0, r4
 800b820:	4629      	mov	r1, r5
 800b822:	f7f5 f81b 	bl	800085c <__aeabi_ddiv>
 800b826:	f7f5 f99f 	bl	8000b68 <__aeabi_d2iz>
 800b82a:	4680      	mov	r8, r0
 800b82c:	f7f4 fe82 	bl	8000534 <__aeabi_i2d>
 800b830:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b834:	f7f4 fee8 	bl	8000608 <__aeabi_dmul>
 800b838:	4602      	mov	r2, r0
 800b83a:	460b      	mov	r3, r1
 800b83c:	4620      	mov	r0, r4
 800b83e:	4629      	mov	r1, r5
 800b840:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b844:	f7f4 fd28 	bl	8000298 <__aeabi_dsub>
 800b848:	f806 4b01 	strb.w	r4, [r6], #1
 800b84c:	9d07      	ldr	r5, [sp, #28]
 800b84e:	eba6 040a 	sub.w	r4, r6, sl
 800b852:	42a5      	cmp	r5, r4
 800b854:	4602      	mov	r2, r0
 800b856:	460b      	mov	r3, r1
 800b858:	f040 8117 	bne.w	800ba8a <_dtoa_r+0x6e2>
 800b85c:	f7f4 fd1e 	bl	800029c <__adddf3>
 800b860:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b864:	4604      	mov	r4, r0
 800b866:	460d      	mov	r5, r1
 800b868:	f7f5 f95e 	bl	8000b28 <__aeabi_dcmpgt>
 800b86c:	2800      	cmp	r0, #0
 800b86e:	f040 80f9 	bne.w	800ba64 <_dtoa_r+0x6bc>
 800b872:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b876:	4620      	mov	r0, r4
 800b878:	4629      	mov	r1, r5
 800b87a:	f7f5 f92d 	bl	8000ad8 <__aeabi_dcmpeq>
 800b87e:	b118      	cbz	r0, 800b888 <_dtoa_r+0x4e0>
 800b880:	f018 0f01 	tst.w	r8, #1
 800b884:	f040 80ee 	bne.w	800ba64 <_dtoa_r+0x6bc>
 800b888:	4649      	mov	r1, r9
 800b88a:	4658      	mov	r0, fp
 800b88c:	f000 fc90 	bl	800c1b0 <_Bfree>
 800b890:	2300      	movs	r3, #0
 800b892:	7033      	strb	r3, [r6, #0]
 800b894:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b896:	3701      	adds	r7, #1
 800b898:	601f      	str	r7, [r3, #0]
 800b89a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	f000 831d 	beq.w	800bedc <_dtoa_r+0xb34>
 800b8a2:	601e      	str	r6, [r3, #0]
 800b8a4:	e31a      	b.n	800bedc <_dtoa_r+0xb34>
 800b8a6:	07e2      	lsls	r2, r4, #31
 800b8a8:	d505      	bpl.n	800b8b6 <_dtoa_r+0x50e>
 800b8aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b8ae:	f7f4 feab 	bl	8000608 <__aeabi_dmul>
 800b8b2:	3601      	adds	r6, #1
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	1064      	asrs	r4, r4, #1
 800b8b8:	3508      	adds	r5, #8
 800b8ba:	e73f      	b.n	800b73c <_dtoa_r+0x394>
 800b8bc:	2602      	movs	r6, #2
 800b8be:	e742      	b.n	800b746 <_dtoa_r+0x39e>
 800b8c0:	9c07      	ldr	r4, [sp, #28]
 800b8c2:	9704      	str	r7, [sp, #16]
 800b8c4:	e761      	b.n	800b78a <_dtoa_r+0x3e2>
 800b8c6:	4b27      	ldr	r3, [pc, #156]	@ (800b964 <_dtoa_r+0x5bc>)
 800b8c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b8ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b8ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b8d2:	4454      	add	r4, sl
 800b8d4:	2900      	cmp	r1, #0
 800b8d6:	d053      	beq.n	800b980 <_dtoa_r+0x5d8>
 800b8d8:	4928      	ldr	r1, [pc, #160]	@ (800b97c <_dtoa_r+0x5d4>)
 800b8da:	2000      	movs	r0, #0
 800b8dc:	f7f4 ffbe 	bl	800085c <__aeabi_ddiv>
 800b8e0:	4633      	mov	r3, r6
 800b8e2:	462a      	mov	r2, r5
 800b8e4:	f7f4 fcd8 	bl	8000298 <__aeabi_dsub>
 800b8e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b8ec:	4656      	mov	r6, sl
 800b8ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8f2:	f7f5 f939 	bl	8000b68 <__aeabi_d2iz>
 800b8f6:	4605      	mov	r5, r0
 800b8f8:	f7f4 fe1c 	bl	8000534 <__aeabi_i2d>
 800b8fc:	4602      	mov	r2, r0
 800b8fe:	460b      	mov	r3, r1
 800b900:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b904:	f7f4 fcc8 	bl	8000298 <__aeabi_dsub>
 800b908:	3530      	adds	r5, #48	@ 0x30
 800b90a:	4602      	mov	r2, r0
 800b90c:	460b      	mov	r3, r1
 800b90e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b912:	f806 5b01 	strb.w	r5, [r6], #1
 800b916:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b91a:	f7f5 f8e7 	bl	8000aec <__aeabi_dcmplt>
 800b91e:	2800      	cmp	r0, #0
 800b920:	d171      	bne.n	800ba06 <_dtoa_r+0x65e>
 800b922:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b926:	4911      	ldr	r1, [pc, #68]	@ (800b96c <_dtoa_r+0x5c4>)
 800b928:	2000      	movs	r0, #0
 800b92a:	f7f4 fcb5 	bl	8000298 <__aeabi_dsub>
 800b92e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b932:	f7f5 f8db 	bl	8000aec <__aeabi_dcmplt>
 800b936:	2800      	cmp	r0, #0
 800b938:	f040 8095 	bne.w	800ba66 <_dtoa_r+0x6be>
 800b93c:	42a6      	cmp	r6, r4
 800b93e:	f43f af50 	beq.w	800b7e2 <_dtoa_r+0x43a>
 800b942:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b946:	4b0a      	ldr	r3, [pc, #40]	@ (800b970 <_dtoa_r+0x5c8>)
 800b948:	2200      	movs	r2, #0
 800b94a:	f7f4 fe5d 	bl	8000608 <__aeabi_dmul>
 800b94e:	4b08      	ldr	r3, [pc, #32]	@ (800b970 <_dtoa_r+0x5c8>)
 800b950:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b954:	2200      	movs	r2, #0
 800b956:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b95a:	f7f4 fe55 	bl	8000608 <__aeabi_dmul>
 800b95e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b962:	e7c4      	b.n	800b8ee <_dtoa_r+0x546>
 800b964:	0800f308 	.word	0x0800f308
 800b968:	0800f2e0 	.word	0x0800f2e0
 800b96c:	3ff00000 	.word	0x3ff00000
 800b970:	40240000 	.word	0x40240000
 800b974:	401c0000 	.word	0x401c0000
 800b978:	40140000 	.word	0x40140000
 800b97c:	3fe00000 	.word	0x3fe00000
 800b980:	4631      	mov	r1, r6
 800b982:	4628      	mov	r0, r5
 800b984:	f7f4 fe40 	bl	8000608 <__aeabi_dmul>
 800b988:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b98c:	9415      	str	r4, [sp, #84]	@ 0x54
 800b98e:	4656      	mov	r6, sl
 800b990:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b994:	f7f5 f8e8 	bl	8000b68 <__aeabi_d2iz>
 800b998:	4605      	mov	r5, r0
 800b99a:	f7f4 fdcb 	bl	8000534 <__aeabi_i2d>
 800b99e:	4602      	mov	r2, r0
 800b9a0:	460b      	mov	r3, r1
 800b9a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9a6:	f7f4 fc77 	bl	8000298 <__aeabi_dsub>
 800b9aa:	3530      	adds	r5, #48	@ 0x30
 800b9ac:	f806 5b01 	strb.w	r5, [r6], #1
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	42a6      	cmp	r6, r4
 800b9b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b9ba:	f04f 0200 	mov.w	r2, #0
 800b9be:	d124      	bne.n	800ba0a <_dtoa_r+0x662>
 800b9c0:	4bac      	ldr	r3, [pc, #688]	@ (800bc74 <_dtoa_r+0x8cc>)
 800b9c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b9c6:	f7f4 fc69 	bl	800029c <__adddf3>
 800b9ca:	4602      	mov	r2, r0
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9d2:	f7f5 f8a9 	bl	8000b28 <__aeabi_dcmpgt>
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	d145      	bne.n	800ba66 <_dtoa_r+0x6be>
 800b9da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b9de:	49a5      	ldr	r1, [pc, #660]	@ (800bc74 <_dtoa_r+0x8cc>)
 800b9e0:	2000      	movs	r0, #0
 800b9e2:	f7f4 fc59 	bl	8000298 <__aeabi_dsub>
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9ee:	f7f5 f87d 	bl	8000aec <__aeabi_dcmplt>
 800b9f2:	2800      	cmp	r0, #0
 800b9f4:	f43f aef5 	beq.w	800b7e2 <_dtoa_r+0x43a>
 800b9f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b9fa:	1e73      	subs	r3, r6, #1
 800b9fc:	9315      	str	r3, [sp, #84]	@ 0x54
 800b9fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ba02:	2b30      	cmp	r3, #48	@ 0x30
 800ba04:	d0f8      	beq.n	800b9f8 <_dtoa_r+0x650>
 800ba06:	9f04      	ldr	r7, [sp, #16]
 800ba08:	e73e      	b.n	800b888 <_dtoa_r+0x4e0>
 800ba0a:	4b9b      	ldr	r3, [pc, #620]	@ (800bc78 <_dtoa_r+0x8d0>)
 800ba0c:	f7f4 fdfc 	bl	8000608 <__aeabi_dmul>
 800ba10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba14:	e7bc      	b.n	800b990 <_dtoa_r+0x5e8>
 800ba16:	d10c      	bne.n	800ba32 <_dtoa_r+0x68a>
 800ba18:	4b98      	ldr	r3, [pc, #608]	@ (800bc7c <_dtoa_r+0x8d4>)
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba20:	f7f4 fdf2 	bl	8000608 <__aeabi_dmul>
 800ba24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba28:	f7f5 f874 	bl	8000b14 <__aeabi_dcmpge>
 800ba2c:	2800      	cmp	r0, #0
 800ba2e:	f000 8157 	beq.w	800bce0 <_dtoa_r+0x938>
 800ba32:	2400      	movs	r4, #0
 800ba34:	4625      	mov	r5, r4
 800ba36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba38:	43db      	mvns	r3, r3
 800ba3a:	9304      	str	r3, [sp, #16]
 800ba3c:	4656      	mov	r6, sl
 800ba3e:	2700      	movs	r7, #0
 800ba40:	4621      	mov	r1, r4
 800ba42:	4658      	mov	r0, fp
 800ba44:	f000 fbb4 	bl	800c1b0 <_Bfree>
 800ba48:	2d00      	cmp	r5, #0
 800ba4a:	d0dc      	beq.n	800ba06 <_dtoa_r+0x65e>
 800ba4c:	b12f      	cbz	r7, 800ba5a <_dtoa_r+0x6b2>
 800ba4e:	42af      	cmp	r7, r5
 800ba50:	d003      	beq.n	800ba5a <_dtoa_r+0x6b2>
 800ba52:	4639      	mov	r1, r7
 800ba54:	4658      	mov	r0, fp
 800ba56:	f000 fbab 	bl	800c1b0 <_Bfree>
 800ba5a:	4629      	mov	r1, r5
 800ba5c:	4658      	mov	r0, fp
 800ba5e:	f000 fba7 	bl	800c1b0 <_Bfree>
 800ba62:	e7d0      	b.n	800ba06 <_dtoa_r+0x65e>
 800ba64:	9704      	str	r7, [sp, #16]
 800ba66:	4633      	mov	r3, r6
 800ba68:	461e      	mov	r6, r3
 800ba6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba6e:	2a39      	cmp	r2, #57	@ 0x39
 800ba70:	d107      	bne.n	800ba82 <_dtoa_r+0x6da>
 800ba72:	459a      	cmp	sl, r3
 800ba74:	d1f8      	bne.n	800ba68 <_dtoa_r+0x6c0>
 800ba76:	9a04      	ldr	r2, [sp, #16]
 800ba78:	3201      	adds	r2, #1
 800ba7a:	9204      	str	r2, [sp, #16]
 800ba7c:	2230      	movs	r2, #48	@ 0x30
 800ba7e:	f88a 2000 	strb.w	r2, [sl]
 800ba82:	781a      	ldrb	r2, [r3, #0]
 800ba84:	3201      	adds	r2, #1
 800ba86:	701a      	strb	r2, [r3, #0]
 800ba88:	e7bd      	b.n	800ba06 <_dtoa_r+0x65e>
 800ba8a:	4b7b      	ldr	r3, [pc, #492]	@ (800bc78 <_dtoa_r+0x8d0>)
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	f7f4 fdbb 	bl	8000608 <__aeabi_dmul>
 800ba92:	2200      	movs	r2, #0
 800ba94:	2300      	movs	r3, #0
 800ba96:	4604      	mov	r4, r0
 800ba98:	460d      	mov	r5, r1
 800ba9a:	f7f5 f81d 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba9e:	2800      	cmp	r0, #0
 800baa0:	f43f aebb 	beq.w	800b81a <_dtoa_r+0x472>
 800baa4:	e6f0      	b.n	800b888 <_dtoa_r+0x4e0>
 800baa6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800baa8:	2a00      	cmp	r2, #0
 800baaa:	f000 80db 	beq.w	800bc64 <_dtoa_r+0x8bc>
 800baae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bab0:	2a01      	cmp	r2, #1
 800bab2:	f300 80bf 	bgt.w	800bc34 <_dtoa_r+0x88c>
 800bab6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bab8:	2a00      	cmp	r2, #0
 800baba:	f000 80b7 	beq.w	800bc2c <_dtoa_r+0x884>
 800babe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bac2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bac4:	4646      	mov	r6, r8
 800bac6:	9a08      	ldr	r2, [sp, #32]
 800bac8:	2101      	movs	r1, #1
 800baca:	441a      	add	r2, r3
 800bacc:	4658      	mov	r0, fp
 800bace:	4498      	add	r8, r3
 800bad0:	9208      	str	r2, [sp, #32]
 800bad2:	f000 fc6b 	bl	800c3ac <__i2b>
 800bad6:	4605      	mov	r5, r0
 800bad8:	b15e      	cbz	r6, 800baf2 <_dtoa_r+0x74a>
 800bada:	9b08      	ldr	r3, [sp, #32]
 800badc:	2b00      	cmp	r3, #0
 800bade:	dd08      	ble.n	800baf2 <_dtoa_r+0x74a>
 800bae0:	42b3      	cmp	r3, r6
 800bae2:	9a08      	ldr	r2, [sp, #32]
 800bae4:	bfa8      	it	ge
 800bae6:	4633      	movge	r3, r6
 800bae8:	eba8 0803 	sub.w	r8, r8, r3
 800baec:	1af6      	subs	r6, r6, r3
 800baee:	1ad3      	subs	r3, r2, r3
 800baf0:	9308      	str	r3, [sp, #32]
 800baf2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800baf4:	b1f3      	cbz	r3, 800bb34 <_dtoa_r+0x78c>
 800baf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	f000 80b7 	beq.w	800bc6c <_dtoa_r+0x8c4>
 800bafe:	b18c      	cbz	r4, 800bb24 <_dtoa_r+0x77c>
 800bb00:	4629      	mov	r1, r5
 800bb02:	4622      	mov	r2, r4
 800bb04:	4658      	mov	r0, fp
 800bb06:	f000 fd11 	bl	800c52c <__pow5mult>
 800bb0a:	464a      	mov	r2, r9
 800bb0c:	4601      	mov	r1, r0
 800bb0e:	4605      	mov	r5, r0
 800bb10:	4658      	mov	r0, fp
 800bb12:	f000 fc61 	bl	800c3d8 <__multiply>
 800bb16:	4649      	mov	r1, r9
 800bb18:	9004      	str	r0, [sp, #16]
 800bb1a:	4658      	mov	r0, fp
 800bb1c:	f000 fb48 	bl	800c1b0 <_Bfree>
 800bb20:	9b04      	ldr	r3, [sp, #16]
 800bb22:	4699      	mov	r9, r3
 800bb24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb26:	1b1a      	subs	r2, r3, r4
 800bb28:	d004      	beq.n	800bb34 <_dtoa_r+0x78c>
 800bb2a:	4649      	mov	r1, r9
 800bb2c:	4658      	mov	r0, fp
 800bb2e:	f000 fcfd 	bl	800c52c <__pow5mult>
 800bb32:	4681      	mov	r9, r0
 800bb34:	2101      	movs	r1, #1
 800bb36:	4658      	mov	r0, fp
 800bb38:	f000 fc38 	bl	800c3ac <__i2b>
 800bb3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb3e:	4604      	mov	r4, r0
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	f000 81cf 	beq.w	800bee4 <_dtoa_r+0xb3c>
 800bb46:	461a      	mov	r2, r3
 800bb48:	4601      	mov	r1, r0
 800bb4a:	4658      	mov	r0, fp
 800bb4c:	f000 fcee 	bl	800c52c <__pow5mult>
 800bb50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	4604      	mov	r4, r0
 800bb56:	f300 8095 	bgt.w	800bc84 <_dtoa_r+0x8dc>
 800bb5a:	9b02      	ldr	r3, [sp, #8]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	f040 8087 	bne.w	800bc70 <_dtoa_r+0x8c8>
 800bb62:	9b03      	ldr	r3, [sp, #12]
 800bb64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	f040 8089 	bne.w	800bc80 <_dtoa_r+0x8d8>
 800bb6e:	9b03      	ldr	r3, [sp, #12]
 800bb70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bb74:	0d1b      	lsrs	r3, r3, #20
 800bb76:	051b      	lsls	r3, r3, #20
 800bb78:	b12b      	cbz	r3, 800bb86 <_dtoa_r+0x7de>
 800bb7a:	9b08      	ldr	r3, [sp, #32]
 800bb7c:	3301      	adds	r3, #1
 800bb7e:	9308      	str	r3, [sp, #32]
 800bb80:	f108 0801 	add.w	r8, r8, #1
 800bb84:	2301      	movs	r3, #1
 800bb86:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	f000 81b0 	beq.w	800bef0 <_dtoa_r+0xb48>
 800bb90:	6923      	ldr	r3, [r4, #16]
 800bb92:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bb96:	6918      	ldr	r0, [r3, #16]
 800bb98:	f000 fbbc 	bl	800c314 <__hi0bits>
 800bb9c:	f1c0 0020 	rsb	r0, r0, #32
 800bba0:	9b08      	ldr	r3, [sp, #32]
 800bba2:	4418      	add	r0, r3
 800bba4:	f010 001f 	ands.w	r0, r0, #31
 800bba8:	d077      	beq.n	800bc9a <_dtoa_r+0x8f2>
 800bbaa:	f1c0 0320 	rsb	r3, r0, #32
 800bbae:	2b04      	cmp	r3, #4
 800bbb0:	dd6b      	ble.n	800bc8a <_dtoa_r+0x8e2>
 800bbb2:	9b08      	ldr	r3, [sp, #32]
 800bbb4:	f1c0 001c 	rsb	r0, r0, #28
 800bbb8:	4403      	add	r3, r0
 800bbba:	4480      	add	r8, r0
 800bbbc:	4406      	add	r6, r0
 800bbbe:	9308      	str	r3, [sp, #32]
 800bbc0:	f1b8 0f00 	cmp.w	r8, #0
 800bbc4:	dd05      	ble.n	800bbd2 <_dtoa_r+0x82a>
 800bbc6:	4649      	mov	r1, r9
 800bbc8:	4642      	mov	r2, r8
 800bbca:	4658      	mov	r0, fp
 800bbcc:	f000 fd08 	bl	800c5e0 <__lshift>
 800bbd0:	4681      	mov	r9, r0
 800bbd2:	9b08      	ldr	r3, [sp, #32]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	dd05      	ble.n	800bbe4 <_dtoa_r+0x83c>
 800bbd8:	4621      	mov	r1, r4
 800bbda:	461a      	mov	r2, r3
 800bbdc:	4658      	mov	r0, fp
 800bbde:	f000 fcff 	bl	800c5e0 <__lshift>
 800bbe2:	4604      	mov	r4, r0
 800bbe4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d059      	beq.n	800bc9e <_dtoa_r+0x8f6>
 800bbea:	4621      	mov	r1, r4
 800bbec:	4648      	mov	r0, r9
 800bbee:	f000 fd63 	bl	800c6b8 <__mcmp>
 800bbf2:	2800      	cmp	r0, #0
 800bbf4:	da53      	bge.n	800bc9e <_dtoa_r+0x8f6>
 800bbf6:	1e7b      	subs	r3, r7, #1
 800bbf8:	9304      	str	r3, [sp, #16]
 800bbfa:	4649      	mov	r1, r9
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	220a      	movs	r2, #10
 800bc00:	4658      	mov	r0, fp
 800bc02:	f000 faf7 	bl	800c1f4 <__multadd>
 800bc06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc08:	4681      	mov	r9, r0
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	f000 8172 	beq.w	800bef4 <_dtoa_r+0xb4c>
 800bc10:	2300      	movs	r3, #0
 800bc12:	4629      	mov	r1, r5
 800bc14:	220a      	movs	r2, #10
 800bc16:	4658      	mov	r0, fp
 800bc18:	f000 faec 	bl	800c1f4 <__multadd>
 800bc1c:	9b00      	ldr	r3, [sp, #0]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	4605      	mov	r5, r0
 800bc22:	dc67      	bgt.n	800bcf4 <_dtoa_r+0x94c>
 800bc24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc26:	2b02      	cmp	r3, #2
 800bc28:	dc41      	bgt.n	800bcae <_dtoa_r+0x906>
 800bc2a:	e063      	b.n	800bcf4 <_dtoa_r+0x94c>
 800bc2c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bc2e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bc32:	e746      	b.n	800bac2 <_dtoa_r+0x71a>
 800bc34:	9b07      	ldr	r3, [sp, #28]
 800bc36:	1e5c      	subs	r4, r3, #1
 800bc38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc3a:	42a3      	cmp	r3, r4
 800bc3c:	bfbf      	itttt	lt
 800bc3e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bc40:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bc42:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bc44:	1ae3      	sublt	r3, r4, r3
 800bc46:	bfb4      	ite	lt
 800bc48:	18d2      	addlt	r2, r2, r3
 800bc4a:	1b1c      	subge	r4, r3, r4
 800bc4c:	9b07      	ldr	r3, [sp, #28]
 800bc4e:	bfbc      	itt	lt
 800bc50:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bc52:	2400      	movlt	r4, #0
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	bfb5      	itete	lt
 800bc58:	eba8 0603 	sublt.w	r6, r8, r3
 800bc5c:	9b07      	ldrge	r3, [sp, #28]
 800bc5e:	2300      	movlt	r3, #0
 800bc60:	4646      	movge	r6, r8
 800bc62:	e730      	b.n	800bac6 <_dtoa_r+0x71e>
 800bc64:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bc66:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bc68:	4646      	mov	r6, r8
 800bc6a:	e735      	b.n	800bad8 <_dtoa_r+0x730>
 800bc6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bc6e:	e75c      	b.n	800bb2a <_dtoa_r+0x782>
 800bc70:	2300      	movs	r3, #0
 800bc72:	e788      	b.n	800bb86 <_dtoa_r+0x7de>
 800bc74:	3fe00000 	.word	0x3fe00000
 800bc78:	40240000 	.word	0x40240000
 800bc7c:	40140000 	.word	0x40140000
 800bc80:	9b02      	ldr	r3, [sp, #8]
 800bc82:	e780      	b.n	800bb86 <_dtoa_r+0x7de>
 800bc84:	2300      	movs	r3, #0
 800bc86:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc88:	e782      	b.n	800bb90 <_dtoa_r+0x7e8>
 800bc8a:	d099      	beq.n	800bbc0 <_dtoa_r+0x818>
 800bc8c:	9a08      	ldr	r2, [sp, #32]
 800bc8e:	331c      	adds	r3, #28
 800bc90:	441a      	add	r2, r3
 800bc92:	4498      	add	r8, r3
 800bc94:	441e      	add	r6, r3
 800bc96:	9208      	str	r2, [sp, #32]
 800bc98:	e792      	b.n	800bbc0 <_dtoa_r+0x818>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	e7f6      	b.n	800bc8c <_dtoa_r+0x8e4>
 800bc9e:	9b07      	ldr	r3, [sp, #28]
 800bca0:	9704      	str	r7, [sp, #16]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	dc20      	bgt.n	800bce8 <_dtoa_r+0x940>
 800bca6:	9300      	str	r3, [sp, #0]
 800bca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcaa:	2b02      	cmp	r3, #2
 800bcac:	dd1e      	ble.n	800bcec <_dtoa_r+0x944>
 800bcae:	9b00      	ldr	r3, [sp, #0]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	f47f aec0 	bne.w	800ba36 <_dtoa_r+0x68e>
 800bcb6:	4621      	mov	r1, r4
 800bcb8:	2205      	movs	r2, #5
 800bcba:	4658      	mov	r0, fp
 800bcbc:	f000 fa9a 	bl	800c1f4 <__multadd>
 800bcc0:	4601      	mov	r1, r0
 800bcc2:	4604      	mov	r4, r0
 800bcc4:	4648      	mov	r0, r9
 800bcc6:	f000 fcf7 	bl	800c6b8 <__mcmp>
 800bcca:	2800      	cmp	r0, #0
 800bccc:	f77f aeb3 	ble.w	800ba36 <_dtoa_r+0x68e>
 800bcd0:	4656      	mov	r6, sl
 800bcd2:	2331      	movs	r3, #49	@ 0x31
 800bcd4:	f806 3b01 	strb.w	r3, [r6], #1
 800bcd8:	9b04      	ldr	r3, [sp, #16]
 800bcda:	3301      	adds	r3, #1
 800bcdc:	9304      	str	r3, [sp, #16]
 800bcde:	e6ae      	b.n	800ba3e <_dtoa_r+0x696>
 800bce0:	9c07      	ldr	r4, [sp, #28]
 800bce2:	9704      	str	r7, [sp, #16]
 800bce4:	4625      	mov	r5, r4
 800bce6:	e7f3      	b.n	800bcd0 <_dtoa_r+0x928>
 800bce8:	9b07      	ldr	r3, [sp, #28]
 800bcea:	9300      	str	r3, [sp, #0]
 800bcec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	f000 8104 	beq.w	800befc <_dtoa_r+0xb54>
 800bcf4:	2e00      	cmp	r6, #0
 800bcf6:	dd05      	ble.n	800bd04 <_dtoa_r+0x95c>
 800bcf8:	4629      	mov	r1, r5
 800bcfa:	4632      	mov	r2, r6
 800bcfc:	4658      	mov	r0, fp
 800bcfe:	f000 fc6f 	bl	800c5e0 <__lshift>
 800bd02:	4605      	mov	r5, r0
 800bd04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d05a      	beq.n	800bdc0 <_dtoa_r+0xa18>
 800bd0a:	6869      	ldr	r1, [r5, #4]
 800bd0c:	4658      	mov	r0, fp
 800bd0e:	f000 fa0f 	bl	800c130 <_Balloc>
 800bd12:	4606      	mov	r6, r0
 800bd14:	b928      	cbnz	r0, 800bd22 <_dtoa_r+0x97a>
 800bd16:	4b84      	ldr	r3, [pc, #528]	@ (800bf28 <_dtoa_r+0xb80>)
 800bd18:	4602      	mov	r2, r0
 800bd1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bd1e:	f7ff bb5a 	b.w	800b3d6 <_dtoa_r+0x2e>
 800bd22:	692a      	ldr	r2, [r5, #16]
 800bd24:	3202      	adds	r2, #2
 800bd26:	0092      	lsls	r2, r2, #2
 800bd28:	f105 010c 	add.w	r1, r5, #12
 800bd2c:	300c      	adds	r0, #12
 800bd2e:	f7ff fa9e 	bl	800b26e <memcpy>
 800bd32:	2201      	movs	r2, #1
 800bd34:	4631      	mov	r1, r6
 800bd36:	4658      	mov	r0, fp
 800bd38:	f000 fc52 	bl	800c5e0 <__lshift>
 800bd3c:	f10a 0301 	add.w	r3, sl, #1
 800bd40:	9307      	str	r3, [sp, #28]
 800bd42:	9b00      	ldr	r3, [sp, #0]
 800bd44:	4453      	add	r3, sl
 800bd46:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd48:	9b02      	ldr	r3, [sp, #8]
 800bd4a:	f003 0301 	and.w	r3, r3, #1
 800bd4e:	462f      	mov	r7, r5
 800bd50:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd52:	4605      	mov	r5, r0
 800bd54:	9b07      	ldr	r3, [sp, #28]
 800bd56:	4621      	mov	r1, r4
 800bd58:	3b01      	subs	r3, #1
 800bd5a:	4648      	mov	r0, r9
 800bd5c:	9300      	str	r3, [sp, #0]
 800bd5e:	f7ff fa9b 	bl	800b298 <quorem>
 800bd62:	4639      	mov	r1, r7
 800bd64:	9002      	str	r0, [sp, #8]
 800bd66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bd6a:	4648      	mov	r0, r9
 800bd6c:	f000 fca4 	bl	800c6b8 <__mcmp>
 800bd70:	462a      	mov	r2, r5
 800bd72:	9008      	str	r0, [sp, #32]
 800bd74:	4621      	mov	r1, r4
 800bd76:	4658      	mov	r0, fp
 800bd78:	f000 fcba 	bl	800c6f0 <__mdiff>
 800bd7c:	68c2      	ldr	r2, [r0, #12]
 800bd7e:	4606      	mov	r6, r0
 800bd80:	bb02      	cbnz	r2, 800bdc4 <_dtoa_r+0xa1c>
 800bd82:	4601      	mov	r1, r0
 800bd84:	4648      	mov	r0, r9
 800bd86:	f000 fc97 	bl	800c6b8 <__mcmp>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	4631      	mov	r1, r6
 800bd8e:	4658      	mov	r0, fp
 800bd90:	920e      	str	r2, [sp, #56]	@ 0x38
 800bd92:	f000 fa0d 	bl	800c1b0 <_Bfree>
 800bd96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd9a:	9e07      	ldr	r6, [sp, #28]
 800bd9c:	ea43 0102 	orr.w	r1, r3, r2
 800bda0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bda2:	4319      	orrs	r1, r3
 800bda4:	d110      	bne.n	800bdc8 <_dtoa_r+0xa20>
 800bda6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bdaa:	d029      	beq.n	800be00 <_dtoa_r+0xa58>
 800bdac:	9b08      	ldr	r3, [sp, #32]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	dd02      	ble.n	800bdb8 <_dtoa_r+0xa10>
 800bdb2:	9b02      	ldr	r3, [sp, #8]
 800bdb4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bdb8:	9b00      	ldr	r3, [sp, #0]
 800bdba:	f883 8000 	strb.w	r8, [r3]
 800bdbe:	e63f      	b.n	800ba40 <_dtoa_r+0x698>
 800bdc0:	4628      	mov	r0, r5
 800bdc2:	e7bb      	b.n	800bd3c <_dtoa_r+0x994>
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	e7e1      	b.n	800bd8c <_dtoa_r+0x9e4>
 800bdc8:	9b08      	ldr	r3, [sp, #32]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	db04      	blt.n	800bdd8 <_dtoa_r+0xa30>
 800bdce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bdd0:	430b      	orrs	r3, r1
 800bdd2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bdd4:	430b      	orrs	r3, r1
 800bdd6:	d120      	bne.n	800be1a <_dtoa_r+0xa72>
 800bdd8:	2a00      	cmp	r2, #0
 800bdda:	dded      	ble.n	800bdb8 <_dtoa_r+0xa10>
 800bddc:	4649      	mov	r1, r9
 800bdde:	2201      	movs	r2, #1
 800bde0:	4658      	mov	r0, fp
 800bde2:	f000 fbfd 	bl	800c5e0 <__lshift>
 800bde6:	4621      	mov	r1, r4
 800bde8:	4681      	mov	r9, r0
 800bdea:	f000 fc65 	bl	800c6b8 <__mcmp>
 800bdee:	2800      	cmp	r0, #0
 800bdf0:	dc03      	bgt.n	800bdfa <_dtoa_r+0xa52>
 800bdf2:	d1e1      	bne.n	800bdb8 <_dtoa_r+0xa10>
 800bdf4:	f018 0f01 	tst.w	r8, #1
 800bdf8:	d0de      	beq.n	800bdb8 <_dtoa_r+0xa10>
 800bdfa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bdfe:	d1d8      	bne.n	800bdb2 <_dtoa_r+0xa0a>
 800be00:	9a00      	ldr	r2, [sp, #0]
 800be02:	2339      	movs	r3, #57	@ 0x39
 800be04:	7013      	strb	r3, [r2, #0]
 800be06:	4633      	mov	r3, r6
 800be08:	461e      	mov	r6, r3
 800be0a:	3b01      	subs	r3, #1
 800be0c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800be10:	2a39      	cmp	r2, #57	@ 0x39
 800be12:	d052      	beq.n	800beba <_dtoa_r+0xb12>
 800be14:	3201      	adds	r2, #1
 800be16:	701a      	strb	r2, [r3, #0]
 800be18:	e612      	b.n	800ba40 <_dtoa_r+0x698>
 800be1a:	2a00      	cmp	r2, #0
 800be1c:	dd07      	ble.n	800be2e <_dtoa_r+0xa86>
 800be1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800be22:	d0ed      	beq.n	800be00 <_dtoa_r+0xa58>
 800be24:	9a00      	ldr	r2, [sp, #0]
 800be26:	f108 0301 	add.w	r3, r8, #1
 800be2a:	7013      	strb	r3, [r2, #0]
 800be2c:	e608      	b.n	800ba40 <_dtoa_r+0x698>
 800be2e:	9b07      	ldr	r3, [sp, #28]
 800be30:	9a07      	ldr	r2, [sp, #28]
 800be32:	f803 8c01 	strb.w	r8, [r3, #-1]
 800be36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be38:	4293      	cmp	r3, r2
 800be3a:	d028      	beq.n	800be8e <_dtoa_r+0xae6>
 800be3c:	4649      	mov	r1, r9
 800be3e:	2300      	movs	r3, #0
 800be40:	220a      	movs	r2, #10
 800be42:	4658      	mov	r0, fp
 800be44:	f000 f9d6 	bl	800c1f4 <__multadd>
 800be48:	42af      	cmp	r7, r5
 800be4a:	4681      	mov	r9, r0
 800be4c:	f04f 0300 	mov.w	r3, #0
 800be50:	f04f 020a 	mov.w	r2, #10
 800be54:	4639      	mov	r1, r7
 800be56:	4658      	mov	r0, fp
 800be58:	d107      	bne.n	800be6a <_dtoa_r+0xac2>
 800be5a:	f000 f9cb 	bl	800c1f4 <__multadd>
 800be5e:	4607      	mov	r7, r0
 800be60:	4605      	mov	r5, r0
 800be62:	9b07      	ldr	r3, [sp, #28]
 800be64:	3301      	adds	r3, #1
 800be66:	9307      	str	r3, [sp, #28]
 800be68:	e774      	b.n	800bd54 <_dtoa_r+0x9ac>
 800be6a:	f000 f9c3 	bl	800c1f4 <__multadd>
 800be6e:	4629      	mov	r1, r5
 800be70:	4607      	mov	r7, r0
 800be72:	2300      	movs	r3, #0
 800be74:	220a      	movs	r2, #10
 800be76:	4658      	mov	r0, fp
 800be78:	f000 f9bc 	bl	800c1f4 <__multadd>
 800be7c:	4605      	mov	r5, r0
 800be7e:	e7f0      	b.n	800be62 <_dtoa_r+0xaba>
 800be80:	9b00      	ldr	r3, [sp, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	bfcc      	ite	gt
 800be86:	461e      	movgt	r6, r3
 800be88:	2601      	movle	r6, #1
 800be8a:	4456      	add	r6, sl
 800be8c:	2700      	movs	r7, #0
 800be8e:	4649      	mov	r1, r9
 800be90:	2201      	movs	r2, #1
 800be92:	4658      	mov	r0, fp
 800be94:	f000 fba4 	bl	800c5e0 <__lshift>
 800be98:	4621      	mov	r1, r4
 800be9a:	4681      	mov	r9, r0
 800be9c:	f000 fc0c 	bl	800c6b8 <__mcmp>
 800bea0:	2800      	cmp	r0, #0
 800bea2:	dcb0      	bgt.n	800be06 <_dtoa_r+0xa5e>
 800bea4:	d102      	bne.n	800beac <_dtoa_r+0xb04>
 800bea6:	f018 0f01 	tst.w	r8, #1
 800beaa:	d1ac      	bne.n	800be06 <_dtoa_r+0xa5e>
 800beac:	4633      	mov	r3, r6
 800beae:	461e      	mov	r6, r3
 800beb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800beb4:	2a30      	cmp	r2, #48	@ 0x30
 800beb6:	d0fa      	beq.n	800beae <_dtoa_r+0xb06>
 800beb8:	e5c2      	b.n	800ba40 <_dtoa_r+0x698>
 800beba:	459a      	cmp	sl, r3
 800bebc:	d1a4      	bne.n	800be08 <_dtoa_r+0xa60>
 800bebe:	9b04      	ldr	r3, [sp, #16]
 800bec0:	3301      	adds	r3, #1
 800bec2:	9304      	str	r3, [sp, #16]
 800bec4:	2331      	movs	r3, #49	@ 0x31
 800bec6:	f88a 3000 	strb.w	r3, [sl]
 800beca:	e5b9      	b.n	800ba40 <_dtoa_r+0x698>
 800becc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bece:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bf2c <_dtoa_r+0xb84>
 800bed2:	b11b      	cbz	r3, 800bedc <_dtoa_r+0xb34>
 800bed4:	f10a 0308 	add.w	r3, sl, #8
 800bed8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800beda:	6013      	str	r3, [r2, #0]
 800bedc:	4650      	mov	r0, sl
 800bede:	b019      	add	sp, #100	@ 0x64
 800bee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bee6:	2b01      	cmp	r3, #1
 800bee8:	f77f ae37 	ble.w	800bb5a <_dtoa_r+0x7b2>
 800beec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800beee:	930a      	str	r3, [sp, #40]	@ 0x28
 800bef0:	2001      	movs	r0, #1
 800bef2:	e655      	b.n	800bba0 <_dtoa_r+0x7f8>
 800bef4:	9b00      	ldr	r3, [sp, #0]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	f77f aed6 	ble.w	800bca8 <_dtoa_r+0x900>
 800befc:	4656      	mov	r6, sl
 800befe:	4621      	mov	r1, r4
 800bf00:	4648      	mov	r0, r9
 800bf02:	f7ff f9c9 	bl	800b298 <quorem>
 800bf06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bf0a:	f806 8b01 	strb.w	r8, [r6], #1
 800bf0e:	9b00      	ldr	r3, [sp, #0]
 800bf10:	eba6 020a 	sub.w	r2, r6, sl
 800bf14:	4293      	cmp	r3, r2
 800bf16:	ddb3      	ble.n	800be80 <_dtoa_r+0xad8>
 800bf18:	4649      	mov	r1, r9
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	220a      	movs	r2, #10
 800bf1e:	4658      	mov	r0, fp
 800bf20:	f000 f968 	bl	800c1f4 <__multadd>
 800bf24:	4681      	mov	r9, r0
 800bf26:	e7ea      	b.n	800befe <_dtoa_r+0xb56>
 800bf28:	0800f265 	.word	0x0800f265
 800bf2c:	0800f1e9 	.word	0x0800f1e9

0800bf30 <_free_r>:
 800bf30:	b538      	push	{r3, r4, r5, lr}
 800bf32:	4605      	mov	r5, r0
 800bf34:	2900      	cmp	r1, #0
 800bf36:	d041      	beq.n	800bfbc <_free_r+0x8c>
 800bf38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf3c:	1f0c      	subs	r4, r1, #4
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	bfb8      	it	lt
 800bf42:	18e4      	addlt	r4, r4, r3
 800bf44:	f000 f8e8 	bl	800c118 <__malloc_lock>
 800bf48:	4a1d      	ldr	r2, [pc, #116]	@ (800bfc0 <_free_r+0x90>)
 800bf4a:	6813      	ldr	r3, [r2, #0]
 800bf4c:	b933      	cbnz	r3, 800bf5c <_free_r+0x2c>
 800bf4e:	6063      	str	r3, [r4, #4]
 800bf50:	6014      	str	r4, [r2, #0]
 800bf52:	4628      	mov	r0, r5
 800bf54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf58:	f000 b8e4 	b.w	800c124 <__malloc_unlock>
 800bf5c:	42a3      	cmp	r3, r4
 800bf5e:	d908      	bls.n	800bf72 <_free_r+0x42>
 800bf60:	6820      	ldr	r0, [r4, #0]
 800bf62:	1821      	adds	r1, r4, r0
 800bf64:	428b      	cmp	r3, r1
 800bf66:	bf01      	itttt	eq
 800bf68:	6819      	ldreq	r1, [r3, #0]
 800bf6a:	685b      	ldreq	r3, [r3, #4]
 800bf6c:	1809      	addeq	r1, r1, r0
 800bf6e:	6021      	streq	r1, [r4, #0]
 800bf70:	e7ed      	b.n	800bf4e <_free_r+0x1e>
 800bf72:	461a      	mov	r2, r3
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	b10b      	cbz	r3, 800bf7c <_free_r+0x4c>
 800bf78:	42a3      	cmp	r3, r4
 800bf7a:	d9fa      	bls.n	800bf72 <_free_r+0x42>
 800bf7c:	6811      	ldr	r1, [r2, #0]
 800bf7e:	1850      	adds	r0, r2, r1
 800bf80:	42a0      	cmp	r0, r4
 800bf82:	d10b      	bne.n	800bf9c <_free_r+0x6c>
 800bf84:	6820      	ldr	r0, [r4, #0]
 800bf86:	4401      	add	r1, r0
 800bf88:	1850      	adds	r0, r2, r1
 800bf8a:	4283      	cmp	r3, r0
 800bf8c:	6011      	str	r1, [r2, #0]
 800bf8e:	d1e0      	bne.n	800bf52 <_free_r+0x22>
 800bf90:	6818      	ldr	r0, [r3, #0]
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	6053      	str	r3, [r2, #4]
 800bf96:	4408      	add	r0, r1
 800bf98:	6010      	str	r0, [r2, #0]
 800bf9a:	e7da      	b.n	800bf52 <_free_r+0x22>
 800bf9c:	d902      	bls.n	800bfa4 <_free_r+0x74>
 800bf9e:	230c      	movs	r3, #12
 800bfa0:	602b      	str	r3, [r5, #0]
 800bfa2:	e7d6      	b.n	800bf52 <_free_r+0x22>
 800bfa4:	6820      	ldr	r0, [r4, #0]
 800bfa6:	1821      	adds	r1, r4, r0
 800bfa8:	428b      	cmp	r3, r1
 800bfaa:	bf04      	itt	eq
 800bfac:	6819      	ldreq	r1, [r3, #0]
 800bfae:	685b      	ldreq	r3, [r3, #4]
 800bfb0:	6063      	str	r3, [r4, #4]
 800bfb2:	bf04      	itt	eq
 800bfb4:	1809      	addeq	r1, r1, r0
 800bfb6:	6021      	streq	r1, [r4, #0]
 800bfb8:	6054      	str	r4, [r2, #4]
 800bfba:	e7ca      	b.n	800bf52 <_free_r+0x22>
 800bfbc:	bd38      	pop	{r3, r4, r5, pc}
 800bfbe:	bf00      	nop
 800bfc0:	20002168 	.word	0x20002168

0800bfc4 <malloc>:
 800bfc4:	4b02      	ldr	r3, [pc, #8]	@ (800bfd0 <malloc+0xc>)
 800bfc6:	4601      	mov	r1, r0
 800bfc8:	6818      	ldr	r0, [r3, #0]
 800bfca:	f000 b825 	b.w	800c018 <_malloc_r>
 800bfce:	bf00      	nop
 800bfd0:	2000001c 	.word	0x2000001c

0800bfd4 <sbrk_aligned>:
 800bfd4:	b570      	push	{r4, r5, r6, lr}
 800bfd6:	4e0f      	ldr	r6, [pc, #60]	@ (800c014 <sbrk_aligned+0x40>)
 800bfd8:	460c      	mov	r4, r1
 800bfda:	6831      	ldr	r1, [r6, #0]
 800bfdc:	4605      	mov	r5, r0
 800bfde:	b911      	cbnz	r1, 800bfe6 <sbrk_aligned+0x12>
 800bfe0:	f001 fdf2 	bl	800dbc8 <_sbrk_r>
 800bfe4:	6030      	str	r0, [r6, #0]
 800bfe6:	4621      	mov	r1, r4
 800bfe8:	4628      	mov	r0, r5
 800bfea:	f001 fded 	bl	800dbc8 <_sbrk_r>
 800bfee:	1c43      	adds	r3, r0, #1
 800bff0:	d103      	bne.n	800bffa <sbrk_aligned+0x26>
 800bff2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800bff6:	4620      	mov	r0, r4
 800bff8:	bd70      	pop	{r4, r5, r6, pc}
 800bffa:	1cc4      	adds	r4, r0, #3
 800bffc:	f024 0403 	bic.w	r4, r4, #3
 800c000:	42a0      	cmp	r0, r4
 800c002:	d0f8      	beq.n	800bff6 <sbrk_aligned+0x22>
 800c004:	1a21      	subs	r1, r4, r0
 800c006:	4628      	mov	r0, r5
 800c008:	f001 fdde 	bl	800dbc8 <_sbrk_r>
 800c00c:	3001      	adds	r0, #1
 800c00e:	d1f2      	bne.n	800bff6 <sbrk_aligned+0x22>
 800c010:	e7ef      	b.n	800bff2 <sbrk_aligned+0x1e>
 800c012:	bf00      	nop
 800c014:	20002164 	.word	0x20002164

0800c018 <_malloc_r>:
 800c018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c01c:	1ccd      	adds	r5, r1, #3
 800c01e:	f025 0503 	bic.w	r5, r5, #3
 800c022:	3508      	adds	r5, #8
 800c024:	2d0c      	cmp	r5, #12
 800c026:	bf38      	it	cc
 800c028:	250c      	movcc	r5, #12
 800c02a:	2d00      	cmp	r5, #0
 800c02c:	4606      	mov	r6, r0
 800c02e:	db01      	blt.n	800c034 <_malloc_r+0x1c>
 800c030:	42a9      	cmp	r1, r5
 800c032:	d904      	bls.n	800c03e <_malloc_r+0x26>
 800c034:	230c      	movs	r3, #12
 800c036:	6033      	str	r3, [r6, #0]
 800c038:	2000      	movs	r0, #0
 800c03a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c03e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c114 <_malloc_r+0xfc>
 800c042:	f000 f869 	bl	800c118 <__malloc_lock>
 800c046:	f8d8 3000 	ldr.w	r3, [r8]
 800c04a:	461c      	mov	r4, r3
 800c04c:	bb44      	cbnz	r4, 800c0a0 <_malloc_r+0x88>
 800c04e:	4629      	mov	r1, r5
 800c050:	4630      	mov	r0, r6
 800c052:	f7ff ffbf 	bl	800bfd4 <sbrk_aligned>
 800c056:	1c43      	adds	r3, r0, #1
 800c058:	4604      	mov	r4, r0
 800c05a:	d158      	bne.n	800c10e <_malloc_r+0xf6>
 800c05c:	f8d8 4000 	ldr.w	r4, [r8]
 800c060:	4627      	mov	r7, r4
 800c062:	2f00      	cmp	r7, #0
 800c064:	d143      	bne.n	800c0ee <_malloc_r+0xd6>
 800c066:	2c00      	cmp	r4, #0
 800c068:	d04b      	beq.n	800c102 <_malloc_r+0xea>
 800c06a:	6823      	ldr	r3, [r4, #0]
 800c06c:	4639      	mov	r1, r7
 800c06e:	4630      	mov	r0, r6
 800c070:	eb04 0903 	add.w	r9, r4, r3
 800c074:	f001 fda8 	bl	800dbc8 <_sbrk_r>
 800c078:	4581      	cmp	r9, r0
 800c07a:	d142      	bne.n	800c102 <_malloc_r+0xea>
 800c07c:	6821      	ldr	r1, [r4, #0]
 800c07e:	1a6d      	subs	r5, r5, r1
 800c080:	4629      	mov	r1, r5
 800c082:	4630      	mov	r0, r6
 800c084:	f7ff ffa6 	bl	800bfd4 <sbrk_aligned>
 800c088:	3001      	adds	r0, #1
 800c08a:	d03a      	beq.n	800c102 <_malloc_r+0xea>
 800c08c:	6823      	ldr	r3, [r4, #0]
 800c08e:	442b      	add	r3, r5
 800c090:	6023      	str	r3, [r4, #0]
 800c092:	f8d8 3000 	ldr.w	r3, [r8]
 800c096:	685a      	ldr	r2, [r3, #4]
 800c098:	bb62      	cbnz	r2, 800c0f4 <_malloc_r+0xdc>
 800c09a:	f8c8 7000 	str.w	r7, [r8]
 800c09e:	e00f      	b.n	800c0c0 <_malloc_r+0xa8>
 800c0a0:	6822      	ldr	r2, [r4, #0]
 800c0a2:	1b52      	subs	r2, r2, r5
 800c0a4:	d420      	bmi.n	800c0e8 <_malloc_r+0xd0>
 800c0a6:	2a0b      	cmp	r2, #11
 800c0a8:	d917      	bls.n	800c0da <_malloc_r+0xc2>
 800c0aa:	1961      	adds	r1, r4, r5
 800c0ac:	42a3      	cmp	r3, r4
 800c0ae:	6025      	str	r5, [r4, #0]
 800c0b0:	bf18      	it	ne
 800c0b2:	6059      	strne	r1, [r3, #4]
 800c0b4:	6863      	ldr	r3, [r4, #4]
 800c0b6:	bf08      	it	eq
 800c0b8:	f8c8 1000 	streq.w	r1, [r8]
 800c0bc:	5162      	str	r2, [r4, r5]
 800c0be:	604b      	str	r3, [r1, #4]
 800c0c0:	4630      	mov	r0, r6
 800c0c2:	f000 f82f 	bl	800c124 <__malloc_unlock>
 800c0c6:	f104 000b 	add.w	r0, r4, #11
 800c0ca:	1d23      	adds	r3, r4, #4
 800c0cc:	f020 0007 	bic.w	r0, r0, #7
 800c0d0:	1ac2      	subs	r2, r0, r3
 800c0d2:	bf1c      	itt	ne
 800c0d4:	1a1b      	subne	r3, r3, r0
 800c0d6:	50a3      	strne	r3, [r4, r2]
 800c0d8:	e7af      	b.n	800c03a <_malloc_r+0x22>
 800c0da:	6862      	ldr	r2, [r4, #4]
 800c0dc:	42a3      	cmp	r3, r4
 800c0de:	bf0c      	ite	eq
 800c0e0:	f8c8 2000 	streq.w	r2, [r8]
 800c0e4:	605a      	strne	r2, [r3, #4]
 800c0e6:	e7eb      	b.n	800c0c0 <_malloc_r+0xa8>
 800c0e8:	4623      	mov	r3, r4
 800c0ea:	6864      	ldr	r4, [r4, #4]
 800c0ec:	e7ae      	b.n	800c04c <_malloc_r+0x34>
 800c0ee:	463c      	mov	r4, r7
 800c0f0:	687f      	ldr	r7, [r7, #4]
 800c0f2:	e7b6      	b.n	800c062 <_malloc_r+0x4a>
 800c0f4:	461a      	mov	r2, r3
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	42a3      	cmp	r3, r4
 800c0fa:	d1fb      	bne.n	800c0f4 <_malloc_r+0xdc>
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	6053      	str	r3, [r2, #4]
 800c100:	e7de      	b.n	800c0c0 <_malloc_r+0xa8>
 800c102:	230c      	movs	r3, #12
 800c104:	6033      	str	r3, [r6, #0]
 800c106:	4630      	mov	r0, r6
 800c108:	f000 f80c 	bl	800c124 <__malloc_unlock>
 800c10c:	e794      	b.n	800c038 <_malloc_r+0x20>
 800c10e:	6005      	str	r5, [r0, #0]
 800c110:	e7d6      	b.n	800c0c0 <_malloc_r+0xa8>
 800c112:	bf00      	nop
 800c114:	20002168 	.word	0x20002168

0800c118 <__malloc_lock>:
 800c118:	4801      	ldr	r0, [pc, #4]	@ (800c120 <__malloc_lock+0x8>)
 800c11a:	f7ff b8a6 	b.w	800b26a <__retarget_lock_acquire_recursive>
 800c11e:	bf00      	nop
 800c120:	20002160 	.word	0x20002160

0800c124 <__malloc_unlock>:
 800c124:	4801      	ldr	r0, [pc, #4]	@ (800c12c <__malloc_unlock+0x8>)
 800c126:	f7ff b8a1 	b.w	800b26c <__retarget_lock_release_recursive>
 800c12a:	bf00      	nop
 800c12c:	20002160 	.word	0x20002160

0800c130 <_Balloc>:
 800c130:	b570      	push	{r4, r5, r6, lr}
 800c132:	69c6      	ldr	r6, [r0, #28]
 800c134:	4604      	mov	r4, r0
 800c136:	460d      	mov	r5, r1
 800c138:	b976      	cbnz	r6, 800c158 <_Balloc+0x28>
 800c13a:	2010      	movs	r0, #16
 800c13c:	f7ff ff42 	bl	800bfc4 <malloc>
 800c140:	4602      	mov	r2, r0
 800c142:	61e0      	str	r0, [r4, #28]
 800c144:	b920      	cbnz	r0, 800c150 <_Balloc+0x20>
 800c146:	4b18      	ldr	r3, [pc, #96]	@ (800c1a8 <_Balloc+0x78>)
 800c148:	4818      	ldr	r0, [pc, #96]	@ (800c1ac <_Balloc+0x7c>)
 800c14a:	216b      	movs	r1, #107	@ 0x6b
 800c14c:	f001 fd54 	bl	800dbf8 <__assert_func>
 800c150:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c154:	6006      	str	r6, [r0, #0]
 800c156:	60c6      	str	r6, [r0, #12]
 800c158:	69e6      	ldr	r6, [r4, #28]
 800c15a:	68f3      	ldr	r3, [r6, #12]
 800c15c:	b183      	cbz	r3, 800c180 <_Balloc+0x50>
 800c15e:	69e3      	ldr	r3, [r4, #28]
 800c160:	68db      	ldr	r3, [r3, #12]
 800c162:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c166:	b9b8      	cbnz	r0, 800c198 <_Balloc+0x68>
 800c168:	2101      	movs	r1, #1
 800c16a:	fa01 f605 	lsl.w	r6, r1, r5
 800c16e:	1d72      	adds	r2, r6, #5
 800c170:	0092      	lsls	r2, r2, #2
 800c172:	4620      	mov	r0, r4
 800c174:	f001 fd5e 	bl	800dc34 <_calloc_r>
 800c178:	b160      	cbz	r0, 800c194 <_Balloc+0x64>
 800c17a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c17e:	e00e      	b.n	800c19e <_Balloc+0x6e>
 800c180:	2221      	movs	r2, #33	@ 0x21
 800c182:	2104      	movs	r1, #4
 800c184:	4620      	mov	r0, r4
 800c186:	f001 fd55 	bl	800dc34 <_calloc_r>
 800c18a:	69e3      	ldr	r3, [r4, #28]
 800c18c:	60f0      	str	r0, [r6, #12]
 800c18e:	68db      	ldr	r3, [r3, #12]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d1e4      	bne.n	800c15e <_Balloc+0x2e>
 800c194:	2000      	movs	r0, #0
 800c196:	bd70      	pop	{r4, r5, r6, pc}
 800c198:	6802      	ldr	r2, [r0, #0]
 800c19a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c19e:	2300      	movs	r3, #0
 800c1a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c1a4:	e7f7      	b.n	800c196 <_Balloc+0x66>
 800c1a6:	bf00      	nop
 800c1a8:	0800f1f6 	.word	0x0800f1f6
 800c1ac:	0800f276 	.word	0x0800f276

0800c1b0 <_Bfree>:
 800c1b0:	b570      	push	{r4, r5, r6, lr}
 800c1b2:	69c6      	ldr	r6, [r0, #28]
 800c1b4:	4605      	mov	r5, r0
 800c1b6:	460c      	mov	r4, r1
 800c1b8:	b976      	cbnz	r6, 800c1d8 <_Bfree+0x28>
 800c1ba:	2010      	movs	r0, #16
 800c1bc:	f7ff ff02 	bl	800bfc4 <malloc>
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	61e8      	str	r0, [r5, #28]
 800c1c4:	b920      	cbnz	r0, 800c1d0 <_Bfree+0x20>
 800c1c6:	4b09      	ldr	r3, [pc, #36]	@ (800c1ec <_Bfree+0x3c>)
 800c1c8:	4809      	ldr	r0, [pc, #36]	@ (800c1f0 <_Bfree+0x40>)
 800c1ca:	218f      	movs	r1, #143	@ 0x8f
 800c1cc:	f001 fd14 	bl	800dbf8 <__assert_func>
 800c1d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1d4:	6006      	str	r6, [r0, #0]
 800c1d6:	60c6      	str	r6, [r0, #12]
 800c1d8:	b13c      	cbz	r4, 800c1ea <_Bfree+0x3a>
 800c1da:	69eb      	ldr	r3, [r5, #28]
 800c1dc:	6862      	ldr	r2, [r4, #4]
 800c1de:	68db      	ldr	r3, [r3, #12]
 800c1e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c1e4:	6021      	str	r1, [r4, #0]
 800c1e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c1ea:	bd70      	pop	{r4, r5, r6, pc}
 800c1ec:	0800f1f6 	.word	0x0800f1f6
 800c1f0:	0800f276 	.word	0x0800f276

0800c1f4 <__multadd>:
 800c1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1f8:	690d      	ldr	r5, [r1, #16]
 800c1fa:	4607      	mov	r7, r0
 800c1fc:	460c      	mov	r4, r1
 800c1fe:	461e      	mov	r6, r3
 800c200:	f101 0c14 	add.w	ip, r1, #20
 800c204:	2000      	movs	r0, #0
 800c206:	f8dc 3000 	ldr.w	r3, [ip]
 800c20a:	b299      	uxth	r1, r3
 800c20c:	fb02 6101 	mla	r1, r2, r1, r6
 800c210:	0c1e      	lsrs	r6, r3, #16
 800c212:	0c0b      	lsrs	r3, r1, #16
 800c214:	fb02 3306 	mla	r3, r2, r6, r3
 800c218:	b289      	uxth	r1, r1
 800c21a:	3001      	adds	r0, #1
 800c21c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c220:	4285      	cmp	r5, r0
 800c222:	f84c 1b04 	str.w	r1, [ip], #4
 800c226:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c22a:	dcec      	bgt.n	800c206 <__multadd+0x12>
 800c22c:	b30e      	cbz	r6, 800c272 <__multadd+0x7e>
 800c22e:	68a3      	ldr	r3, [r4, #8]
 800c230:	42ab      	cmp	r3, r5
 800c232:	dc19      	bgt.n	800c268 <__multadd+0x74>
 800c234:	6861      	ldr	r1, [r4, #4]
 800c236:	4638      	mov	r0, r7
 800c238:	3101      	adds	r1, #1
 800c23a:	f7ff ff79 	bl	800c130 <_Balloc>
 800c23e:	4680      	mov	r8, r0
 800c240:	b928      	cbnz	r0, 800c24e <__multadd+0x5a>
 800c242:	4602      	mov	r2, r0
 800c244:	4b0c      	ldr	r3, [pc, #48]	@ (800c278 <__multadd+0x84>)
 800c246:	480d      	ldr	r0, [pc, #52]	@ (800c27c <__multadd+0x88>)
 800c248:	21ba      	movs	r1, #186	@ 0xba
 800c24a:	f001 fcd5 	bl	800dbf8 <__assert_func>
 800c24e:	6922      	ldr	r2, [r4, #16]
 800c250:	3202      	adds	r2, #2
 800c252:	f104 010c 	add.w	r1, r4, #12
 800c256:	0092      	lsls	r2, r2, #2
 800c258:	300c      	adds	r0, #12
 800c25a:	f7ff f808 	bl	800b26e <memcpy>
 800c25e:	4621      	mov	r1, r4
 800c260:	4638      	mov	r0, r7
 800c262:	f7ff ffa5 	bl	800c1b0 <_Bfree>
 800c266:	4644      	mov	r4, r8
 800c268:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c26c:	3501      	adds	r5, #1
 800c26e:	615e      	str	r6, [r3, #20]
 800c270:	6125      	str	r5, [r4, #16]
 800c272:	4620      	mov	r0, r4
 800c274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c278:	0800f265 	.word	0x0800f265
 800c27c:	0800f276 	.word	0x0800f276

0800c280 <__s2b>:
 800c280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c284:	460c      	mov	r4, r1
 800c286:	4615      	mov	r5, r2
 800c288:	461f      	mov	r7, r3
 800c28a:	2209      	movs	r2, #9
 800c28c:	3308      	adds	r3, #8
 800c28e:	4606      	mov	r6, r0
 800c290:	fb93 f3f2 	sdiv	r3, r3, r2
 800c294:	2100      	movs	r1, #0
 800c296:	2201      	movs	r2, #1
 800c298:	429a      	cmp	r2, r3
 800c29a:	db09      	blt.n	800c2b0 <__s2b+0x30>
 800c29c:	4630      	mov	r0, r6
 800c29e:	f7ff ff47 	bl	800c130 <_Balloc>
 800c2a2:	b940      	cbnz	r0, 800c2b6 <__s2b+0x36>
 800c2a4:	4602      	mov	r2, r0
 800c2a6:	4b19      	ldr	r3, [pc, #100]	@ (800c30c <__s2b+0x8c>)
 800c2a8:	4819      	ldr	r0, [pc, #100]	@ (800c310 <__s2b+0x90>)
 800c2aa:	21d3      	movs	r1, #211	@ 0xd3
 800c2ac:	f001 fca4 	bl	800dbf8 <__assert_func>
 800c2b0:	0052      	lsls	r2, r2, #1
 800c2b2:	3101      	adds	r1, #1
 800c2b4:	e7f0      	b.n	800c298 <__s2b+0x18>
 800c2b6:	9b08      	ldr	r3, [sp, #32]
 800c2b8:	6143      	str	r3, [r0, #20]
 800c2ba:	2d09      	cmp	r5, #9
 800c2bc:	f04f 0301 	mov.w	r3, #1
 800c2c0:	6103      	str	r3, [r0, #16]
 800c2c2:	dd16      	ble.n	800c2f2 <__s2b+0x72>
 800c2c4:	f104 0909 	add.w	r9, r4, #9
 800c2c8:	46c8      	mov	r8, r9
 800c2ca:	442c      	add	r4, r5
 800c2cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c2d0:	4601      	mov	r1, r0
 800c2d2:	3b30      	subs	r3, #48	@ 0x30
 800c2d4:	220a      	movs	r2, #10
 800c2d6:	4630      	mov	r0, r6
 800c2d8:	f7ff ff8c 	bl	800c1f4 <__multadd>
 800c2dc:	45a0      	cmp	r8, r4
 800c2de:	d1f5      	bne.n	800c2cc <__s2b+0x4c>
 800c2e0:	f1a5 0408 	sub.w	r4, r5, #8
 800c2e4:	444c      	add	r4, r9
 800c2e6:	1b2d      	subs	r5, r5, r4
 800c2e8:	1963      	adds	r3, r4, r5
 800c2ea:	42bb      	cmp	r3, r7
 800c2ec:	db04      	blt.n	800c2f8 <__s2b+0x78>
 800c2ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2f2:	340a      	adds	r4, #10
 800c2f4:	2509      	movs	r5, #9
 800c2f6:	e7f6      	b.n	800c2e6 <__s2b+0x66>
 800c2f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c2fc:	4601      	mov	r1, r0
 800c2fe:	3b30      	subs	r3, #48	@ 0x30
 800c300:	220a      	movs	r2, #10
 800c302:	4630      	mov	r0, r6
 800c304:	f7ff ff76 	bl	800c1f4 <__multadd>
 800c308:	e7ee      	b.n	800c2e8 <__s2b+0x68>
 800c30a:	bf00      	nop
 800c30c:	0800f265 	.word	0x0800f265
 800c310:	0800f276 	.word	0x0800f276

0800c314 <__hi0bits>:
 800c314:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c318:	4603      	mov	r3, r0
 800c31a:	bf36      	itet	cc
 800c31c:	0403      	lslcc	r3, r0, #16
 800c31e:	2000      	movcs	r0, #0
 800c320:	2010      	movcc	r0, #16
 800c322:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c326:	bf3c      	itt	cc
 800c328:	021b      	lslcc	r3, r3, #8
 800c32a:	3008      	addcc	r0, #8
 800c32c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c330:	bf3c      	itt	cc
 800c332:	011b      	lslcc	r3, r3, #4
 800c334:	3004      	addcc	r0, #4
 800c336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c33a:	bf3c      	itt	cc
 800c33c:	009b      	lslcc	r3, r3, #2
 800c33e:	3002      	addcc	r0, #2
 800c340:	2b00      	cmp	r3, #0
 800c342:	db05      	blt.n	800c350 <__hi0bits+0x3c>
 800c344:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c348:	f100 0001 	add.w	r0, r0, #1
 800c34c:	bf08      	it	eq
 800c34e:	2020      	moveq	r0, #32
 800c350:	4770      	bx	lr

0800c352 <__lo0bits>:
 800c352:	6803      	ldr	r3, [r0, #0]
 800c354:	4602      	mov	r2, r0
 800c356:	f013 0007 	ands.w	r0, r3, #7
 800c35a:	d00b      	beq.n	800c374 <__lo0bits+0x22>
 800c35c:	07d9      	lsls	r1, r3, #31
 800c35e:	d421      	bmi.n	800c3a4 <__lo0bits+0x52>
 800c360:	0798      	lsls	r0, r3, #30
 800c362:	bf49      	itett	mi
 800c364:	085b      	lsrmi	r3, r3, #1
 800c366:	089b      	lsrpl	r3, r3, #2
 800c368:	2001      	movmi	r0, #1
 800c36a:	6013      	strmi	r3, [r2, #0]
 800c36c:	bf5c      	itt	pl
 800c36e:	6013      	strpl	r3, [r2, #0]
 800c370:	2002      	movpl	r0, #2
 800c372:	4770      	bx	lr
 800c374:	b299      	uxth	r1, r3
 800c376:	b909      	cbnz	r1, 800c37c <__lo0bits+0x2a>
 800c378:	0c1b      	lsrs	r3, r3, #16
 800c37a:	2010      	movs	r0, #16
 800c37c:	b2d9      	uxtb	r1, r3
 800c37e:	b909      	cbnz	r1, 800c384 <__lo0bits+0x32>
 800c380:	3008      	adds	r0, #8
 800c382:	0a1b      	lsrs	r3, r3, #8
 800c384:	0719      	lsls	r1, r3, #28
 800c386:	bf04      	itt	eq
 800c388:	091b      	lsreq	r3, r3, #4
 800c38a:	3004      	addeq	r0, #4
 800c38c:	0799      	lsls	r1, r3, #30
 800c38e:	bf04      	itt	eq
 800c390:	089b      	lsreq	r3, r3, #2
 800c392:	3002      	addeq	r0, #2
 800c394:	07d9      	lsls	r1, r3, #31
 800c396:	d403      	bmi.n	800c3a0 <__lo0bits+0x4e>
 800c398:	085b      	lsrs	r3, r3, #1
 800c39a:	f100 0001 	add.w	r0, r0, #1
 800c39e:	d003      	beq.n	800c3a8 <__lo0bits+0x56>
 800c3a0:	6013      	str	r3, [r2, #0]
 800c3a2:	4770      	bx	lr
 800c3a4:	2000      	movs	r0, #0
 800c3a6:	4770      	bx	lr
 800c3a8:	2020      	movs	r0, #32
 800c3aa:	4770      	bx	lr

0800c3ac <__i2b>:
 800c3ac:	b510      	push	{r4, lr}
 800c3ae:	460c      	mov	r4, r1
 800c3b0:	2101      	movs	r1, #1
 800c3b2:	f7ff febd 	bl	800c130 <_Balloc>
 800c3b6:	4602      	mov	r2, r0
 800c3b8:	b928      	cbnz	r0, 800c3c6 <__i2b+0x1a>
 800c3ba:	4b05      	ldr	r3, [pc, #20]	@ (800c3d0 <__i2b+0x24>)
 800c3bc:	4805      	ldr	r0, [pc, #20]	@ (800c3d4 <__i2b+0x28>)
 800c3be:	f240 1145 	movw	r1, #325	@ 0x145
 800c3c2:	f001 fc19 	bl	800dbf8 <__assert_func>
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	6144      	str	r4, [r0, #20]
 800c3ca:	6103      	str	r3, [r0, #16]
 800c3cc:	bd10      	pop	{r4, pc}
 800c3ce:	bf00      	nop
 800c3d0:	0800f265 	.word	0x0800f265
 800c3d4:	0800f276 	.word	0x0800f276

0800c3d8 <__multiply>:
 800c3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3dc:	4614      	mov	r4, r2
 800c3de:	690a      	ldr	r2, [r1, #16]
 800c3e0:	6923      	ldr	r3, [r4, #16]
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	bfa8      	it	ge
 800c3e6:	4623      	movge	r3, r4
 800c3e8:	460f      	mov	r7, r1
 800c3ea:	bfa4      	itt	ge
 800c3ec:	460c      	movge	r4, r1
 800c3ee:	461f      	movge	r7, r3
 800c3f0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c3f4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c3f8:	68a3      	ldr	r3, [r4, #8]
 800c3fa:	6861      	ldr	r1, [r4, #4]
 800c3fc:	eb0a 0609 	add.w	r6, sl, r9
 800c400:	42b3      	cmp	r3, r6
 800c402:	b085      	sub	sp, #20
 800c404:	bfb8      	it	lt
 800c406:	3101      	addlt	r1, #1
 800c408:	f7ff fe92 	bl	800c130 <_Balloc>
 800c40c:	b930      	cbnz	r0, 800c41c <__multiply+0x44>
 800c40e:	4602      	mov	r2, r0
 800c410:	4b44      	ldr	r3, [pc, #272]	@ (800c524 <__multiply+0x14c>)
 800c412:	4845      	ldr	r0, [pc, #276]	@ (800c528 <__multiply+0x150>)
 800c414:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c418:	f001 fbee 	bl	800dbf8 <__assert_func>
 800c41c:	f100 0514 	add.w	r5, r0, #20
 800c420:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c424:	462b      	mov	r3, r5
 800c426:	2200      	movs	r2, #0
 800c428:	4543      	cmp	r3, r8
 800c42a:	d321      	bcc.n	800c470 <__multiply+0x98>
 800c42c:	f107 0114 	add.w	r1, r7, #20
 800c430:	f104 0214 	add.w	r2, r4, #20
 800c434:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c438:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c43c:	9302      	str	r3, [sp, #8]
 800c43e:	1b13      	subs	r3, r2, r4
 800c440:	3b15      	subs	r3, #21
 800c442:	f023 0303 	bic.w	r3, r3, #3
 800c446:	3304      	adds	r3, #4
 800c448:	f104 0715 	add.w	r7, r4, #21
 800c44c:	42ba      	cmp	r2, r7
 800c44e:	bf38      	it	cc
 800c450:	2304      	movcc	r3, #4
 800c452:	9301      	str	r3, [sp, #4]
 800c454:	9b02      	ldr	r3, [sp, #8]
 800c456:	9103      	str	r1, [sp, #12]
 800c458:	428b      	cmp	r3, r1
 800c45a:	d80c      	bhi.n	800c476 <__multiply+0x9e>
 800c45c:	2e00      	cmp	r6, #0
 800c45e:	dd03      	ble.n	800c468 <__multiply+0x90>
 800c460:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c464:	2b00      	cmp	r3, #0
 800c466:	d05b      	beq.n	800c520 <__multiply+0x148>
 800c468:	6106      	str	r6, [r0, #16]
 800c46a:	b005      	add	sp, #20
 800c46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c470:	f843 2b04 	str.w	r2, [r3], #4
 800c474:	e7d8      	b.n	800c428 <__multiply+0x50>
 800c476:	f8b1 a000 	ldrh.w	sl, [r1]
 800c47a:	f1ba 0f00 	cmp.w	sl, #0
 800c47e:	d024      	beq.n	800c4ca <__multiply+0xf2>
 800c480:	f104 0e14 	add.w	lr, r4, #20
 800c484:	46a9      	mov	r9, r5
 800c486:	f04f 0c00 	mov.w	ip, #0
 800c48a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c48e:	f8d9 3000 	ldr.w	r3, [r9]
 800c492:	fa1f fb87 	uxth.w	fp, r7
 800c496:	b29b      	uxth	r3, r3
 800c498:	fb0a 330b 	mla	r3, sl, fp, r3
 800c49c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c4a0:	f8d9 7000 	ldr.w	r7, [r9]
 800c4a4:	4463      	add	r3, ip
 800c4a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c4aa:	fb0a c70b 	mla	r7, sl, fp, ip
 800c4ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c4b2:	b29b      	uxth	r3, r3
 800c4b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c4b8:	4572      	cmp	r2, lr
 800c4ba:	f849 3b04 	str.w	r3, [r9], #4
 800c4be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c4c2:	d8e2      	bhi.n	800c48a <__multiply+0xb2>
 800c4c4:	9b01      	ldr	r3, [sp, #4]
 800c4c6:	f845 c003 	str.w	ip, [r5, r3]
 800c4ca:	9b03      	ldr	r3, [sp, #12]
 800c4cc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c4d0:	3104      	adds	r1, #4
 800c4d2:	f1b9 0f00 	cmp.w	r9, #0
 800c4d6:	d021      	beq.n	800c51c <__multiply+0x144>
 800c4d8:	682b      	ldr	r3, [r5, #0]
 800c4da:	f104 0c14 	add.w	ip, r4, #20
 800c4de:	46ae      	mov	lr, r5
 800c4e0:	f04f 0a00 	mov.w	sl, #0
 800c4e4:	f8bc b000 	ldrh.w	fp, [ip]
 800c4e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c4ec:	fb09 770b 	mla	r7, r9, fp, r7
 800c4f0:	4457      	add	r7, sl
 800c4f2:	b29b      	uxth	r3, r3
 800c4f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c4f8:	f84e 3b04 	str.w	r3, [lr], #4
 800c4fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c500:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c504:	f8be 3000 	ldrh.w	r3, [lr]
 800c508:	fb09 330a 	mla	r3, r9, sl, r3
 800c50c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c510:	4562      	cmp	r2, ip
 800c512:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c516:	d8e5      	bhi.n	800c4e4 <__multiply+0x10c>
 800c518:	9f01      	ldr	r7, [sp, #4]
 800c51a:	51eb      	str	r3, [r5, r7]
 800c51c:	3504      	adds	r5, #4
 800c51e:	e799      	b.n	800c454 <__multiply+0x7c>
 800c520:	3e01      	subs	r6, #1
 800c522:	e79b      	b.n	800c45c <__multiply+0x84>
 800c524:	0800f265 	.word	0x0800f265
 800c528:	0800f276 	.word	0x0800f276

0800c52c <__pow5mult>:
 800c52c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c530:	4615      	mov	r5, r2
 800c532:	f012 0203 	ands.w	r2, r2, #3
 800c536:	4607      	mov	r7, r0
 800c538:	460e      	mov	r6, r1
 800c53a:	d007      	beq.n	800c54c <__pow5mult+0x20>
 800c53c:	4c25      	ldr	r4, [pc, #148]	@ (800c5d4 <__pow5mult+0xa8>)
 800c53e:	3a01      	subs	r2, #1
 800c540:	2300      	movs	r3, #0
 800c542:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c546:	f7ff fe55 	bl	800c1f4 <__multadd>
 800c54a:	4606      	mov	r6, r0
 800c54c:	10ad      	asrs	r5, r5, #2
 800c54e:	d03d      	beq.n	800c5cc <__pow5mult+0xa0>
 800c550:	69fc      	ldr	r4, [r7, #28]
 800c552:	b97c      	cbnz	r4, 800c574 <__pow5mult+0x48>
 800c554:	2010      	movs	r0, #16
 800c556:	f7ff fd35 	bl	800bfc4 <malloc>
 800c55a:	4602      	mov	r2, r0
 800c55c:	61f8      	str	r0, [r7, #28]
 800c55e:	b928      	cbnz	r0, 800c56c <__pow5mult+0x40>
 800c560:	4b1d      	ldr	r3, [pc, #116]	@ (800c5d8 <__pow5mult+0xac>)
 800c562:	481e      	ldr	r0, [pc, #120]	@ (800c5dc <__pow5mult+0xb0>)
 800c564:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c568:	f001 fb46 	bl	800dbf8 <__assert_func>
 800c56c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c570:	6004      	str	r4, [r0, #0]
 800c572:	60c4      	str	r4, [r0, #12]
 800c574:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c578:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c57c:	b94c      	cbnz	r4, 800c592 <__pow5mult+0x66>
 800c57e:	f240 2171 	movw	r1, #625	@ 0x271
 800c582:	4638      	mov	r0, r7
 800c584:	f7ff ff12 	bl	800c3ac <__i2b>
 800c588:	2300      	movs	r3, #0
 800c58a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c58e:	4604      	mov	r4, r0
 800c590:	6003      	str	r3, [r0, #0]
 800c592:	f04f 0900 	mov.w	r9, #0
 800c596:	07eb      	lsls	r3, r5, #31
 800c598:	d50a      	bpl.n	800c5b0 <__pow5mult+0x84>
 800c59a:	4631      	mov	r1, r6
 800c59c:	4622      	mov	r2, r4
 800c59e:	4638      	mov	r0, r7
 800c5a0:	f7ff ff1a 	bl	800c3d8 <__multiply>
 800c5a4:	4631      	mov	r1, r6
 800c5a6:	4680      	mov	r8, r0
 800c5a8:	4638      	mov	r0, r7
 800c5aa:	f7ff fe01 	bl	800c1b0 <_Bfree>
 800c5ae:	4646      	mov	r6, r8
 800c5b0:	106d      	asrs	r5, r5, #1
 800c5b2:	d00b      	beq.n	800c5cc <__pow5mult+0xa0>
 800c5b4:	6820      	ldr	r0, [r4, #0]
 800c5b6:	b938      	cbnz	r0, 800c5c8 <__pow5mult+0x9c>
 800c5b8:	4622      	mov	r2, r4
 800c5ba:	4621      	mov	r1, r4
 800c5bc:	4638      	mov	r0, r7
 800c5be:	f7ff ff0b 	bl	800c3d8 <__multiply>
 800c5c2:	6020      	str	r0, [r4, #0]
 800c5c4:	f8c0 9000 	str.w	r9, [r0]
 800c5c8:	4604      	mov	r4, r0
 800c5ca:	e7e4      	b.n	800c596 <__pow5mult+0x6a>
 800c5cc:	4630      	mov	r0, r6
 800c5ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5d2:	bf00      	nop
 800c5d4:	0800f2d0 	.word	0x0800f2d0
 800c5d8:	0800f1f6 	.word	0x0800f1f6
 800c5dc:	0800f276 	.word	0x0800f276

0800c5e0 <__lshift>:
 800c5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5e4:	460c      	mov	r4, r1
 800c5e6:	6849      	ldr	r1, [r1, #4]
 800c5e8:	6923      	ldr	r3, [r4, #16]
 800c5ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c5ee:	68a3      	ldr	r3, [r4, #8]
 800c5f0:	4607      	mov	r7, r0
 800c5f2:	4691      	mov	r9, r2
 800c5f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c5f8:	f108 0601 	add.w	r6, r8, #1
 800c5fc:	42b3      	cmp	r3, r6
 800c5fe:	db0b      	blt.n	800c618 <__lshift+0x38>
 800c600:	4638      	mov	r0, r7
 800c602:	f7ff fd95 	bl	800c130 <_Balloc>
 800c606:	4605      	mov	r5, r0
 800c608:	b948      	cbnz	r0, 800c61e <__lshift+0x3e>
 800c60a:	4602      	mov	r2, r0
 800c60c:	4b28      	ldr	r3, [pc, #160]	@ (800c6b0 <__lshift+0xd0>)
 800c60e:	4829      	ldr	r0, [pc, #164]	@ (800c6b4 <__lshift+0xd4>)
 800c610:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c614:	f001 faf0 	bl	800dbf8 <__assert_func>
 800c618:	3101      	adds	r1, #1
 800c61a:	005b      	lsls	r3, r3, #1
 800c61c:	e7ee      	b.n	800c5fc <__lshift+0x1c>
 800c61e:	2300      	movs	r3, #0
 800c620:	f100 0114 	add.w	r1, r0, #20
 800c624:	f100 0210 	add.w	r2, r0, #16
 800c628:	4618      	mov	r0, r3
 800c62a:	4553      	cmp	r3, sl
 800c62c:	db33      	blt.n	800c696 <__lshift+0xb6>
 800c62e:	6920      	ldr	r0, [r4, #16]
 800c630:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c634:	f104 0314 	add.w	r3, r4, #20
 800c638:	f019 091f 	ands.w	r9, r9, #31
 800c63c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c640:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c644:	d02b      	beq.n	800c69e <__lshift+0xbe>
 800c646:	f1c9 0e20 	rsb	lr, r9, #32
 800c64a:	468a      	mov	sl, r1
 800c64c:	2200      	movs	r2, #0
 800c64e:	6818      	ldr	r0, [r3, #0]
 800c650:	fa00 f009 	lsl.w	r0, r0, r9
 800c654:	4310      	orrs	r0, r2
 800c656:	f84a 0b04 	str.w	r0, [sl], #4
 800c65a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c65e:	459c      	cmp	ip, r3
 800c660:	fa22 f20e 	lsr.w	r2, r2, lr
 800c664:	d8f3      	bhi.n	800c64e <__lshift+0x6e>
 800c666:	ebac 0304 	sub.w	r3, ip, r4
 800c66a:	3b15      	subs	r3, #21
 800c66c:	f023 0303 	bic.w	r3, r3, #3
 800c670:	3304      	adds	r3, #4
 800c672:	f104 0015 	add.w	r0, r4, #21
 800c676:	4584      	cmp	ip, r0
 800c678:	bf38      	it	cc
 800c67a:	2304      	movcc	r3, #4
 800c67c:	50ca      	str	r2, [r1, r3]
 800c67e:	b10a      	cbz	r2, 800c684 <__lshift+0xa4>
 800c680:	f108 0602 	add.w	r6, r8, #2
 800c684:	3e01      	subs	r6, #1
 800c686:	4638      	mov	r0, r7
 800c688:	612e      	str	r6, [r5, #16]
 800c68a:	4621      	mov	r1, r4
 800c68c:	f7ff fd90 	bl	800c1b0 <_Bfree>
 800c690:	4628      	mov	r0, r5
 800c692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c696:	f842 0f04 	str.w	r0, [r2, #4]!
 800c69a:	3301      	adds	r3, #1
 800c69c:	e7c5      	b.n	800c62a <__lshift+0x4a>
 800c69e:	3904      	subs	r1, #4
 800c6a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c6a8:	459c      	cmp	ip, r3
 800c6aa:	d8f9      	bhi.n	800c6a0 <__lshift+0xc0>
 800c6ac:	e7ea      	b.n	800c684 <__lshift+0xa4>
 800c6ae:	bf00      	nop
 800c6b0:	0800f265 	.word	0x0800f265
 800c6b4:	0800f276 	.word	0x0800f276

0800c6b8 <__mcmp>:
 800c6b8:	690a      	ldr	r2, [r1, #16]
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	6900      	ldr	r0, [r0, #16]
 800c6be:	1a80      	subs	r0, r0, r2
 800c6c0:	b530      	push	{r4, r5, lr}
 800c6c2:	d10e      	bne.n	800c6e2 <__mcmp+0x2a>
 800c6c4:	3314      	adds	r3, #20
 800c6c6:	3114      	adds	r1, #20
 800c6c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c6cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c6d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c6d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c6d8:	4295      	cmp	r5, r2
 800c6da:	d003      	beq.n	800c6e4 <__mcmp+0x2c>
 800c6dc:	d205      	bcs.n	800c6ea <__mcmp+0x32>
 800c6de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c6e2:	bd30      	pop	{r4, r5, pc}
 800c6e4:	42a3      	cmp	r3, r4
 800c6e6:	d3f3      	bcc.n	800c6d0 <__mcmp+0x18>
 800c6e8:	e7fb      	b.n	800c6e2 <__mcmp+0x2a>
 800c6ea:	2001      	movs	r0, #1
 800c6ec:	e7f9      	b.n	800c6e2 <__mcmp+0x2a>
	...

0800c6f0 <__mdiff>:
 800c6f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f4:	4689      	mov	r9, r1
 800c6f6:	4606      	mov	r6, r0
 800c6f8:	4611      	mov	r1, r2
 800c6fa:	4648      	mov	r0, r9
 800c6fc:	4614      	mov	r4, r2
 800c6fe:	f7ff ffdb 	bl	800c6b8 <__mcmp>
 800c702:	1e05      	subs	r5, r0, #0
 800c704:	d112      	bne.n	800c72c <__mdiff+0x3c>
 800c706:	4629      	mov	r1, r5
 800c708:	4630      	mov	r0, r6
 800c70a:	f7ff fd11 	bl	800c130 <_Balloc>
 800c70e:	4602      	mov	r2, r0
 800c710:	b928      	cbnz	r0, 800c71e <__mdiff+0x2e>
 800c712:	4b3f      	ldr	r3, [pc, #252]	@ (800c810 <__mdiff+0x120>)
 800c714:	f240 2137 	movw	r1, #567	@ 0x237
 800c718:	483e      	ldr	r0, [pc, #248]	@ (800c814 <__mdiff+0x124>)
 800c71a:	f001 fa6d 	bl	800dbf8 <__assert_func>
 800c71e:	2301      	movs	r3, #1
 800c720:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c724:	4610      	mov	r0, r2
 800c726:	b003      	add	sp, #12
 800c728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c72c:	bfbc      	itt	lt
 800c72e:	464b      	movlt	r3, r9
 800c730:	46a1      	movlt	r9, r4
 800c732:	4630      	mov	r0, r6
 800c734:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c738:	bfba      	itte	lt
 800c73a:	461c      	movlt	r4, r3
 800c73c:	2501      	movlt	r5, #1
 800c73e:	2500      	movge	r5, #0
 800c740:	f7ff fcf6 	bl	800c130 <_Balloc>
 800c744:	4602      	mov	r2, r0
 800c746:	b918      	cbnz	r0, 800c750 <__mdiff+0x60>
 800c748:	4b31      	ldr	r3, [pc, #196]	@ (800c810 <__mdiff+0x120>)
 800c74a:	f240 2145 	movw	r1, #581	@ 0x245
 800c74e:	e7e3      	b.n	800c718 <__mdiff+0x28>
 800c750:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c754:	6926      	ldr	r6, [r4, #16]
 800c756:	60c5      	str	r5, [r0, #12]
 800c758:	f109 0310 	add.w	r3, r9, #16
 800c75c:	f109 0514 	add.w	r5, r9, #20
 800c760:	f104 0e14 	add.w	lr, r4, #20
 800c764:	f100 0b14 	add.w	fp, r0, #20
 800c768:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c76c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c770:	9301      	str	r3, [sp, #4]
 800c772:	46d9      	mov	r9, fp
 800c774:	f04f 0c00 	mov.w	ip, #0
 800c778:	9b01      	ldr	r3, [sp, #4]
 800c77a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c77e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c782:	9301      	str	r3, [sp, #4]
 800c784:	fa1f f38a 	uxth.w	r3, sl
 800c788:	4619      	mov	r1, r3
 800c78a:	b283      	uxth	r3, r0
 800c78c:	1acb      	subs	r3, r1, r3
 800c78e:	0c00      	lsrs	r0, r0, #16
 800c790:	4463      	add	r3, ip
 800c792:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c796:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c79a:	b29b      	uxth	r3, r3
 800c79c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c7a0:	4576      	cmp	r6, lr
 800c7a2:	f849 3b04 	str.w	r3, [r9], #4
 800c7a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c7aa:	d8e5      	bhi.n	800c778 <__mdiff+0x88>
 800c7ac:	1b33      	subs	r3, r6, r4
 800c7ae:	3b15      	subs	r3, #21
 800c7b0:	f023 0303 	bic.w	r3, r3, #3
 800c7b4:	3415      	adds	r4, #21
 800c7b6:	3304      	adds	r3, #4
 800c7b8:	42a6      	cmp	r6, r4
 800c7ba:	bf38      	it	cc
 800c7bc:	2304      	movcc	r3, #4
 800c7be:	441d      	add	r5, r3
 800c7c0:	445b      	add	r3, fp
 800c7c2:	461e      	mov	r6, r3
 800c7c4:	462c      	mov	r4, r5
 800c7c6:	4544      	cmp	r4, r8
 800c7c8:	d30e      	bcc.n	800c7e8 <__mdiff+0xf8>
 800c7ca:	f108 0103 	add.w	r1, r8, #3
 800c7ce:	1b49      	subs	r1, r1, r5
 800c7d0:	f021 0103 	bic.w	r1, r1, #3
 800c7d4:	3d03      	subs	r5, #3
 800c7d6:	45a8      	cmp	r8, r5
 800c7d8:	bf38      	it	cc
 800c7da:	2100      	movcc	r1, #0
 800c7dc:	440b      	add	r3, r1
 800c7de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c7e2:	b191      	cbz	r1, 800c80a <__mdiff+0x11a>
 800c7e4:	6117      	str	r7, [r2, #16]
 800c7e6:	e79d      	b.n	800c724 <__mdiff+0x34>
 800c7e8:	f854 1b04 	ldr.w	r1, [r4], #4
 800c7ec:	46e6      	mov	lr, ip
 800c7ee:	0c08      	lsrs	r0, r1, #16
 800c7f0:	fa1c fc81 	uxtah	ip, ip, r1
 800c7f4:	4471      	add	r1, lr
 800c7f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c7fa:	b289      	uxth	r1, r1
 800c7fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c800:	f846 1b04 	str.w	r1, [r6], #4
 800c804:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c808:	e7dd      	b.n	800c7c6 <__mdiff+0xd6>
 800c80a:	3f01      	subs	r7, #1
 800c80c:	e7e7      	b.n	800c7de <__mdiff+0xee>
 800c80e:	bf00      	nop
 800c810:	0800f265 	.word	0x0800f265
 800c814:	0800f276 	.word	0x0800f276

0800c818 <__ulp>:
 800c818:	b082      	sub	sp, #8
 800c81a:	ed8d 0b00 	vstr	d0, [sp]
 800c81e:	9a01      	ldr	r2, [sp, #4]
 800c820:	4b0f      	ldr	r3, [pc, #60]	@ (800c860 <__ulp+0x48>)
 800c822:	4013      	ands	r3, r2
 800c824:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c828:	2b00      	cmp	r3, #0
 800c82a:	dc08      	bgt.n	800c83e <__ulp+0x26>
 800c82c:	425b      	negs	r3, r3
 800c82e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c832:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c836:	da04      	bge.n	800c842 <__ulp+0x2a>
 800c838:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c83c:	4113      	asrs	r3, r2
 800c83e:	2200      	movs	r2, #0
 800c840:	e008      	b.n	800c854 <__ulp+0x3c>
 800c842:	f1a2 0314 	sub.w	r3, r2, #20
 800c846:	2b1e      	cmp	r3, #30
 800c848:	bfda      	itte	le
 800c84a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c84e:	40da      	lsrle	r2, r3
 800c850:	2201      	movgt	r2, #1
 800c852:	2300      	movs	r3, #0
 800c854:	4619      	mov	r1, r3
 800c856:	4610      	mov	r0, r2
 800c858:	ec41 0b10 	vmov	d0, r0, r1
 800c85c:	b002      	add	sp, #8
 800c85e:	4770      	bx	lr
 800c860:	7ff00000 	.word	0x7ff00000

0800c864 <__b2d>:
 800c864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c868:	6906      	ldr	r6, [r0, #16]
 800c86a:	f100 0814 	add.w	r8, r0, #20
 800c86e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c872:	1f37      	subs	r7, r6, #4
 800c874:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c878:	4610      	mov	r0, r2
 800c87a:	f7ff fd4b 	bl	800c314 <__hi0bits>
 800c87e:	f1c0 0320 	rsb	r3, r0, #32
 800c882:	280a      	cmp	r0, #10
 800c884:	600b      	str	r3, [r1, #0]
 800c886:	491b      	ldr	r1, [pc, #108]	@ (800c8f4 <__b2d+0x90>)
 800c888:	dc15      	bgt.n	800c8b6 <__b2d+0x52>
 800c88a:	f1c0 0c0b 	rsb	ip, r0, #11
 800c88e:	fa22 f30c 	lsr.w	r3, r2, ip
 800c892:	45b8      	cmp	r8, r7
 800c894:	ea43 0501 	orr.w	r5, r3, r1
 800c898:	bf34      	ite	cc
 800c89a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c89e:	2300      	movcs	r3, #0
 800c8a0:	3015      	adds	r0, #21
 800c8a2:	fa02 f000 	lsl.w	r0, r2, r0
 800c8a6:	fa23 f30c 	lsr.w	r3, r3, ip
 800c8aa:	4303      	orrs	r3, r0
 800c8ac:	461c      	mov	r4, r3
 800c8ae:	ec45 4b10 	vmov	d0, r4, r5
 800c8b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8b6:	45b8      	cmp	r8, r7
 800c8b8:	bf3a      	itte	cc
 800c8ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c8be:	f1a6 0708 	subcc.w	r7, r6, #8
 800c8c2:	2300      	movcs	r3, #0
 800c8c4:	380b      	subs	r0, #11
 800c8c6:	d012      	beq.n	800c8ee <__b2d+0x8a>
 800c8c8:	f1c0 0120 	rsb	r1, r0, #32
 800c8cc:	fa23 f401 	lsr.w	r4, r3, r1
 800c8d0:	4082      	lsls	r2, r0
 800c8d2:	4322      	orrs	r2, r4
 800c8d4:	4547      	cmp	r7, r8
 800c8d6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c8da:	bf8c      	ite	hi
 800c8dc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c8e0:	2200      	movls	r2, #0
 800c8e2:	4083      	lsls	r3, r0
 800c8e4:	40ca      	lsrs	r2, r1
 800c8e6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	e7de      	b.n	800c8ac <__b2d+0x48>
 800c8ee:	ea42 0501 	orr.w	r5, r2, r1
 800c8f2:	e7db      	b.n	800c8ac <__b2d+0x48>
 800c8f4:	3ff00000 	.word	0x3ff00000

0800c8f8 <__d2b>:
 800c8f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c8fc:	460f      	mov	r7, r1
 800c8fe:	2101      	movs	r1, #1
 800c900:	ec59 8b10 	vmov	r8, r9, d0
 800c904:	4616      	mov	r6, r2
 800c906:	f7ff fc13 	bl	800c130 <_Balloc>
 800c90a:	4604      	mov	r4, r0
 800c90c:	b930      	cbnz	r0, 800c91c <__d2b+0x24>
 800c90e:	4602      	mov	r2, r0
 800c910:	4b23      	ldr	r3, [pc, #140]	@ (800c9a0 <__d2b+0xa8>)
 800c912:	4824      	ldr	r0, [pc, #144]	@ (800c9a4 <__d2b+0xac>)
 800c914:	f240 310f 	movw	r1, #783	@ 0x30f
 800c918:	f001 f96e 	bl	800dbf8 <__assert_func>
 800c91c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c920:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c924:	b10d      	cbz	r5, 800c92a <__d2b+0x32>
 800c926:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c92a:	9301      	str	r3, [sp, #4]
 800c92c:	f1b8 0300 	subs.w	r3, r8, #0
 800c930:	d023      	beq.n	800c97a <__d2b+0x82>
 800c932:	4668      	mov	r0, sp
 800c934:	9300      	str	r3, [sp, #0]
 800c936:	f7ff fd0c 	bl	800c352 <__lo0bits>
 800c93a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c93e:	b1d0      	cbz	r0, 800c976 <__d2b+0x7e>
 800c940:	f1c0 0320 	rsb	r3, r0, #32
 800c944:	fa02 f303 	lsl.w	r3, r2, r3
 800c948:	430b      	orrs	r3, r1
 800c94a:	40c2      	lsrs	r2, r0
 800c94c:	6163      	str	r3, [r4, #20]
 800c94e:	9201      	str	r2, [sp, #4]
 800c950:	9b01      	ldr	r3, [sp, #4]
 800c952:	61a3      	str	r3, [r4, #24]
 800c954:	2b00      	cmp	r3, #0
 800c956:	bf0c      	ite	eq
 800c958:	2201      	moveq	r2, #1
 800c95a:	2202      	movne	r2, #2
 800c95c:	6122      	str	r2, [r4, #16]
 800c95e:	b1a5      	cbz	r5, 800c98a <__d2b+0x92>
 800c960:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c964:	4405      	add	r5, r0
 800c966:	603d      	str	r5, [r7, #0]
 800c968:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c96c:	6030      	str	r0, [r6, #0]
 800c96e:	4620      	mov	r0, r4
 800c970:	b003      	add	sp, #12
 800c972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c976:	6161      	str	r1, [r4, #20]
 800c978:	e7ea      	b.n	800c950 <__d2b+0x58>
 800c97a:	a801      	add	r0, sp, #4
 800c97c:	f7ff fce9 	bl	800c352 <__lo0bits>
 800c980:	9b01      	ldr	r3, [sp, #4]
 800c982:	6163      	str	r3, [r4, #20]
 800c984:	3020      	adds	r0, #32
 800c986:	2201      	movs	r2, #1
 800c988:	e7e8      	b.n	800c95c <__d2b+0x64>
 800c98a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c98e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c992:	6038      	str	r0, [r7, #0]
 800c994:	6918      	ldr	r0, [r3, #16]
 800c996:	f7ff fcbd 	bl	800c314 <__hi0bits>
 800c99a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c99e:	e7e5      	b.n	800c96c <__d2b+0x74>
 800c9a0:	0800f265 	.word	0x0800f265
 800c9a4:	0800f276 	.word	0x0800f276

0800c9a8 <__ratio>:
 800c9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ac:	b085      	sub	sp, #20
 800c9ae:	e9cd 1000 	strd	r1, r0, [sp]
 800c9b2:	a902      	add	r1, sp, #8
 800c9b4:	f7ff ff56 	bl	800c864 <__b2d>
 800c9b8:	9800      	ldr	r0, [sp, #0]
 800c9ba:	a903      	add	r1, sp, #12
 800c9bc:	ec55 4b10 	vmov	r4, r5, d0
 800c9c0:	f7ff ff50 	bl	800c864 <__b2d>
 800c9c4:	9b01      	ldr	r3, [sp, #4]
 800c9c6:	6919      	ldr	r1, [r3, #16]
 800c9c8:	9b00      	ldr	r3, [sp, #0]
 800c9ca:	691b      	ldr	r3, [r3, #16]
 800c9cc:	1ac9      	subs	r1, r1, r3
 800c9ce:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c9d2:	1a9b      	subs	r3, r3, r2
 800c9d4:	ec5b ab10 	vmov	sl, fp, d0
 800c9d8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	bfce      	itee	gt
 800c9e0:	462a      	movgt	r2, r5
 800c9e2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c9e6:	465a      	movle	r2, fp
 800c9e8:	462f      	mov	r7, r5
 800c9ea:	46d9      	mov	r9, fp
 800c9ec:	bfcc      	ite	gt
 800c9ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c9f2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c9f6:	464b      	mov	r3, r9
 800c9f8:	4652      	mov	r2, sl
 800c9fa:	4620      	mov	r0, r4
 800c9fc:	4639      	mov	r1, r7
 800c9fe:	f7f3 ff2d 	bl	800085c <__aeabi_ddiv>
 800ca02:	ec41 0b10 	vmov	d0, r0, r1
 800ca06:	b005      	add	sp, #20
 800ca08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ca0c <__copybits>:
 800ca0c:	3901      	subs	r1, #1
 800ca0e:	b570      	push	{r4, r5, r6, lr}
 800ca10:	1149      	asrs	r1, r1, #5
 800ca12:	6914      	ldr	r4, [r2, #16]
 800ca14:	3101      	adds	r1, #1
 800ca16:	f102 0314 	add.w	r3, r2, #20
 800ca1a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ca1e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ca22:	1f05      	subs	r5, r0, #4
 800ca24:	42a3      	cmp	r3, r4
 800ca26:	d30c      	bcc.n	800ca42 <__copybits+0x36>
 800ca28:	1aa3      	subs	r3, r4, r2
 800ca2a:	3b11      	subs	r3, #17
 800ca2c:	f023 0303 	bic.w	r3, r3, #3
 800ca30:	3211      	adds	r2, #17
 800ca32:	42a2      	cmp	r2, r4
 800ca34:	bf88      	it	hi
 800ca36:	2300      	movhi	r3, #0
 800ca38:	4418      	add	r0, r3
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	4288      	cmp	r0, r1
 800ca3e:	d305      	bcc.n	800ca4c <__copybits+0x40>
 800ca40:	bd70      	pop	{r4, r5, r6, pc}
 800ca42:	f853 6b04 	ldr.w	r6, [r3], #4
 800ca46:	f845 6f04 	str.w	r6, [r5, #4]!
 800ca4a:	e7eb      	b.n	800ca24 <__copybits+0x18>
 800ca4c:	f840 3b04 	str.w	r3, [r0], #4
 800ca50:	e7f4      	b.n	800ca3c <__copybits+0x30>

0800ca52 <__any_on>:
 800ca52:	f100 0214 	add.w	r2, r0, #20
 800ca56:	6900      	ldr	r0, [r0, #16]
 800ca58:	114b      	asrs	r3, r1, #5
 800ca5a:	4298      	cmp	r0, r3
 800ca5c:	b510      	push	{r4, lr}
 800ca5e:	db11      	blt.n	800ca84 <__any_on+0x32>
 800ca60:	dd0a      	ble.n	800ca78 <__any_on+0x26>
 800ca62:	f011 011f 	ands.w	r1, r1, #31
 800ca66:	d007      	beq.n	800ca78 <__any_on+0x26>
 800ca68:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ca6c:	fa24 f001 	lsr.w	r0, r4, r1
 800ca70:	fa00 f101 	lsl.w	r1, r0, r1
 800ca74:	428c      	cmp	r4, r1
 800ca76:	d10b      	bne.n	800ca90 <__any_on+0x3e>
 800ca78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d803      	bhi.n	800ca88 <__any_on+0x36>
 800ca80:	2000      	movs	r0, #0
 800ca82:	bd10      	pop	{r4, pc}
 800ca84:	4603      	mov	r3, r0
 800ca86:	e7f7      	b.n	800ca78 <__any_on+0x26>
 800ca88:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca8c:	2900      	cmp	r1, #0
 800ca8e:	d0f5      	beq.n	800ca7c <__any_on+0x2a>
 800ca90:	2001      	movs	r0, #1
 800ca92:	e7f6      	b.n	800ca82 <__any_on+0x30>

0800ca94 <sulp>:
 800ca94:	b570      	push	{r4, r5, r6, lr}
 800ca96:	4604      	mov	r4, r0
 800ca98:	460d      	mov	r5, r1
 800ca9a:	ec45 4b10 	vmov	d0, r4, r5
 800ca9e:	4616      	mov	r6, r2
 800caa0:	f7ff feba 	bl	800c818 <__ulp>
 800caa4:	ec51 0b10 	vmov	r0, r1, d0
 800caa8:	b17e      	cbz	r6, 800caca <sulp+0x36>
 800caaa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800caae:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	dd09      	ble.n	800caca <sulp+0x36>
 800cab6:	051b      	lsls	r3, r3, #20
 800cab8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800cabc:	2400      	movs	r4, #0
 800cabe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800cac2:	4622      	mov	r2, r4
 800cac4:	462b      	mov	r3, r5
 800cac6:	f7f3 fd9f 	bl	8000608 <__aeabi_dmul>
 800caca:	ec41 0b10 	vmov	d0, r0, r1
 800cace:	bd70      	pop	{r4, r5, r6, pc}

0800cad0 <_strtod_l>:
 800cad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad4:	b09f      	sub	sp, #124	@ 0x7c
 800cad6:	460c      	mov	r4, r1
 800cad8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800cada:	2200      	movs	r2, #0
 800cadc:	921a      	str	r2, [sp, #104]	@ 0x68
 800cade:	9005      	str	r0, [sp, #20]
 800cae0:	f04f 0a00 	mov.w	sl, #0
 800cae4:	f04f 0b00 	mov.w	fp, #0
 800cae8:	460a      	mov	r2, r1
 800caea:	9219      	str	r2, [sp, #100]	@ 0x64
 800caec:	7811      	ldrb	r1, [r2, #0]
 800caee:	292b      	cmp	r1, #43	@ 0x2b
 800caf0:	d04a      	beq.n	800cb88 <_strtod_l+0xb8>
 800caf2:	d838      	bhi.n	800cb66 <_strtod_l+0x96>
 800caf4:	290d      	cmp	r1, #13
 800caf6:	d832      	bhi.n	800cb5e <_strtod_l+0x8e>
 800caf8:	2908      	cmp	r1, #8
 800cafa:	d832      	bhi.n	800cb62 <_strtod_l+0x92>
 800cafc:	2900      	cmp	r1, #0
 800cafe:	d03b      	beq.n	800cb78 <_strtod_l+0xa8>
 800cb00:	2200      	movs	r2, #0
 800cb02:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cb04:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800cb06:	782a      	ldrb	r2, [r5, #0]
 800cb08:	2a30      	cmp	r2, #48	@ 0x30
 800cb0a:	f040 80b3 	bne.w	800cc74 <_strtod_l+0x1a4>
 800cb0e:	786a      	ldrb	r2, [r5, #1]
 800cb10:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cb14:	2a58      	cmp	r2, #88	@ 0x58
 800cb16:	d16e      	bne.n	800cbf6 <_strtod_l+0x126>
 800cb18:	9302      	str	r3, [sp, #8]
 800cb1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb1c:	9301      	str	r3, [sp, #4]
 800cb1e:	ab1a      	add	r3, sp, #104	@ 0x68
 800cb20:	9300      	str	r3, [sp, #0]
 800cb22:	4a8e      	ldr	r2, [pc, #568]	@ (800cd5c <_strtod_l+0x28c>)
 800cb24:	9805      	ldr	r0, [sp, #20]
 800cb26:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cb28:	a919      	add	r1, sp, #100	@ 0x64
 800cb2a:	f001 f8ff 	bl	800dd2c <__gethex>
 800cb2e:	f010 060f 	ands.w	r6, r0, #15
 800cb32:	4604      	mov	r4, r0
 800cb34:	d005      	beq.n	800cb42 <_strtod_l+0x72>
 800cb36:	2e06      	cmp	r6, #6
 800cb38:	d128      	bne.n	800cb8c <_strtod_l+0xbc>
 800cb3a:	3501      	adds	r5, #1
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	9519      	str	r5, [sp, #100]	@ 0x64
 800cb40:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb42:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	f040 858e 	bne.w	800d666 <_strtod_l+0xb96>
 800cb4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb4c:	b1cb      	cbz	r3, 800cb82 <_strtod_l+0xb2>
 800cb4e:	4652      	mov	r2, sl
 800cb50:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800cb54:	ec43 2b10 	vmov	d0, r2, r3
 800cb58:	b01f      	add	sp, #124	@ 0x7c
 800cb5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb5e:	2920      	cmp	r1, #32
 800cb60:	d1ce      	bne.n	800cb00 <_strtod_l+0x30>
 800cb62:	3201      	adds	r2, #1
 800cb64:	e7c1      	b.n	800caea <_strtod_l+0x1a>
 800cb66:	292d      	cmp	r1, #45	@ 0x2d
 800cb68:	d1ca      	bne.n	800cb00 <_strtod_l+0x30>
 800cb6a:	2101      	movs	r1, #1
 800cb6c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cb6e:	1c51      	adds	r1, r2, #1
 800cb70:	9119      	str	r1, [sp, #100]	@ 0x64
 800cb72:	7852      	ldrb	r2, [r2, #1]
 800cb74:	2a00      	cmp	r2, #0
 800cb76:	d1c5      	bne.n	800cb04 <_strtod_l+0x34>
 800cb78:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cb7a:	9419      	str	r4, [sp, #100]	@ 0x64
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	f040 8570 	bne.w	800d662 <_strtod_l+0xb92>
 800cb82:	4652      	mov	r2, sl
 800cb84:	465b      	mov	r3, fp
 800cb86:	e7e5      	b.n	800cb54 <_strtod_l+0x84>
 800cb88:	2100      	movs	r1, #0
 800cb8a:	e7ef      	b.n	800cb6c <_strtod_l+0x9c>
 800cb8c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cb8e:	b13a      	cbz	r2, 800cba0 <_strtod_l+0xd0>
 800cb90:	2135      	movs	r1, #53	@ 0x35
 800cb92:	a81c      	add	r0, sp, #112	@ 0x70
 800cb94:	f7ff ff3a 	bl	800ca0c <__copybits>
 800cb98:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cb9a:	9805      	ldr	r0, [sp, #20]
 800cb9c:	f7ff fb08 	bl	800c1b0 <_Bfree>
 800cba0:	3e01      	subs	r6, #1
 800cba2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800cba4:	2e04      	cmp	r6, #4
 800cba6:	d806      	bhi.n	800cbb6 <_strtod_l+0xe6>
 800cba8:	e8df f006 	tbb	[pc, r6]
 800cbac:	201d0314 	.word	0x201d0314
 800cbb0:	14          	.byte	0x14
 800cbb1:	00          	.byte	0x00
 800cbb2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800cbb6:	05e1      	lsls	r1, r4, #23
 800cbb8:	bf48      	it	mi
 800cbba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cbbe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cbc2:	0d1b      	lsrs	r3, r3, #20
 800cbc4:	051b      	lsls	r3, r3, #20
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d1bb      	bne.n	800cb42 <_strtod_l+0x72>
 800cbca:	f7fe fb23 	bl	800b214 <__errno>
 800cbce:	2322      	movs	r3, #34	@ 0x22
 800cbd0:	6003      	str	r3, [r0, #0]
 800cbd2:	e7b6      	b.n	800cb42 <_strtod_l+0x72>
 800cbd4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cbd8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cbdc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cbe0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cbe4:	e7e7      	b.n	800cbb6 <_strtod_l+0xe6>
 800cbe6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800cd64 <_strtod_l+0x294>
 800cbea:	e7e4      	b.n	800cbb6 <_strtod_l+0xe6>
 800cbec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cbf0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800cbf4:	e7df      	b.n	800cbb6 <_strtod_l+0xe6>
 800cbf6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbf8:	1c5a      	adds	r2, r3, #1
 800cbfa:	9219      	str	r2, [sp, #100]	@ 0x64
 800cbfc:	785b      	ldrb	r3, [r3, #1]
 800cbfe:	2b30      	cmp	r3, #48	@ 0x30
 800cc00:	d0f9      	beq.n	800cbf6 <_strtod_l+0x126>
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d09d      	beq.n	800cb42 <_strtod_l+0x72>
 800cc06:	2301      	movs	r3, #1
 800cc08:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc0c:	930c      	str	r3, [sp, #48]	@ 0x30
 800cc0e:	2300      	movs	r3, #0
 800cc10:	9308      	str	r3, [sp, #32]
 800cc12:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc14:	461f      	mov	r7, r3
 800cc16:	220a      	movs	r2, #10
 800cc18:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cc1a:	7805      	ldrb	r5, [r0, #0]
 800cc1c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cc20:	b2d9      	uxtb	r1, r3
 800cc22:	2909      	cmp	r1, #9
 800cc24:	d928      	bls.n	800cc78 <_strtod_l+0x1a8>
 800cc26:	494e      	ldr	r1, [pc, #312]	@ (800cd60 <_strtod_l+0x290>)
 800cc28:	2201      	movs	r2, #1
 800cc2a:	f000 ffbb 	bl	800dba4 <strncmp>
 800cc2e:	2800      	cmp	r0, #0
 800cc30:	d032      	beq.n	800cc98 <_strtod_l+0x1c8>
 800cc32:	2000      	movs	r0, #0
 800cc34:	462a      	mov	r2, r5
 800cc36:	4681      	mov	r9, r0
 800cc38:	463d      	mov	r5, r7
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	2a65      	cmp	r2, #101	@ 0x65
 800cc3e:	d001      	beq.n	800cc44 <_strtod_l+0x174>
 800cc40:	2a45      	cmp	r2, #69	@ 0x45
 800cc42:	d114      	bne.n	800cc6e <_strtod_l+0x19e>
 800cc44:	b91d      	cbnz	r5, 800cc4e <_strtod_l+0x17e>
 800cc46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc48:	4302      	orrs	r2, r0
 800cc4a:	d095      	beq.n	800cb78 <_strtod_l+0xa8>
 800cc4c:	2500      	movs	r5, #0
 800cc4e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800cc50:	1c62      	adds	r2, r4, #1
 800cc52:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc54:	7862      	ldrb	r2, [r4, #1]
 800cc56:	2a2b      	cmp	r2, #43	@ 0x2b
 800cc58:	d077      	beq.n	800cd4a <_strtod_l+0x27a>
 800cc5a:	2a2d      	cmp	r2, #45	@ 0x2d
 800cc5c:	d07b      	beq.n	800cd56 <_strtod_l+0x286>
 800cc5e:	f04f 0c00 	mov.w	ip, #0
 800cc62:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cc66:	2909      	cmp	r1, #9
 800cc68:	f240 8082 	bls.w	800cd70 <_strtod_l+0x2a0>
 800cc6c:	9419      	str	r4, [sp, #100]	@ 0x64
 800cc6e:	f04f 0800 	mov.w	r8, #0
 800cc72:	e0a2      	b.n	800cdba <_strtod_l+0x2ea>
 800cc74:	2300      	movs	r3, #0
 800cc76:	e7c7      	b.n	800cc08 <_strtod_l+0x138>
 800cc78:	2f08      	cmp	r7, #8
 800cc7a:	bfd5      	itete	le
 800cc7c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800cc7e:	9908      	ldrgt	r1, [sp, #32]
 800cc80:	fb02 3301 	mlale	r3, r2, r1, r3
 800cc84:	fb02 3301 	mlagt	r3, r2, r1, r3
 800cc88:	f100 0001 	add.w	r0, r0, #1
 800cc8c:	bfd4      	ite	le
 800cc8e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800cc90:	9308      	strgt	r3, [sp, #32]
 800cc92:	3701      	adds	r7, #1
 800cc94:	9019      	str	r0, [sp, #100]	@ 0x64
 800cc96:	e7bf      	b.n	800cc18 <_strtod_l+0x148>
 800cc98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc9a:	1c5a      	adds	r2, r3, #1
 800cc9c:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc9e:	785a      	ldrb	r2, [r3, #1]
 800cca0:	b37f      	cbz	r7, 800cd02 <_strtod_l+0x232>
 800cca2:	4681      	mov	r9, r0
 800cca4:	463d      	mov	r5, r7
 800cca6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ccaa:	2b09      	cmp	r3, #9
 800ccac:	d912      	bls.n	800ccd4 <_strtod_l+0x204>
 800ccae:	2301      	movs	r3, #1
 800ccb0:	e7c4      	b.n	800cc3c <_strtod_l+0x16c>
 800ccb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ccb4:	1c5a      	adds	r2, r3, #1
 800ccb6:	9219      	str	r2, [sp, #100]	@ 0x64
 800ccb8:	785a      	ldrb	r2, [r3, #1]
 800ccba:	3001      	adds	r0, #1
 800ccbc:	2a30      	cmp	r2, #48	@ 0x30
 800ccbe:	d0f8      	beq.n	800ccb2 <_strtod_l+0x1e2>
 800ccc0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ccc4:	2b08      	cmp	r3, #8
 800ccc6:	f200 84d3 	bhi.w	800d670 <_strtod_l+0xba0>
 800ccca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cccc:	930c      	str	r3, [sp, #48]	@ 0x30
 800ccce:	4681      	mov	r9, r0
 800ccd0:	2000      	movs	r0, #0
 800ccd2:	4605      	mov	r5, r0
 800ccd4:	3a30      	subs	r2, #48	@ 0x30
 800ccd6:	f100 0301 	add.w	r3, r0, #1
 800ccda:	d02a      	beq.n	800cd32 <_strtod_l+0x262>
 800ccdc:	4499      	add	r9, r3
 800ccde:	eb00 0c05 	add.w	ip, r0, r5
 800cce2:	462b      	mov	r3, r5
 800cce4:	210a      	movs	r1, #10
 800cce6:	4563      	cmp	r3, ip
 800cce8:	d10d      	bne.n	800cd06 <_strtod_l+0x236>
 800ccea:	1c69      	adds	r1, r5, #1
 800ccec:	4401      	add	r1, r0
 800ccee:	4428      	add	r0, r5
 800ccf0:	2808      	cmp	r0, #8
 800ccf2:	dc16      	bgt.n	800cd22 <_strtod_l+0x252>
 800ccf4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ccf6:	230a      	movs	r3, #10
 800ccf8:	fb03 2300 	mla	r3, r3, r0, r2
 800ccfc:	930a      	str	r3, [sp, #40]	@ 0x28
 800ccfe:	2300      	movs	r3, #0
 800cd00:	e018      	b.n	800cd34 <_strtod_l+0x264>
 800cd02:	4638      	mov	r0, r7
 800cd04:	e7da      	b.n	800ccbc <_strtod_l+0x1ec>
 800cd06:	2b08      	cmp	r3, #8
 800cd08:	f103 0301 	add.w	r3, r3, #1
 800cd0c:	dc03      	bgt.n	800cd16 <_strtod_l+0x246>
 800cd0e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cd10:	434e      	muls	r6, r1
 800cd12:	960a      	str	r6, [sp, #40]	@ 0x28
 800cd14:	e7e7      	b.n	800cce6 <_strtod_l+0x216>
 800cd16:	2b10      	cmp	r3, #16
 800cd18:	bfde      	ittt	le
 800cd1a:	9e08      	ldrle	r6, [sp, #32]
 800cd1c:	434e      	mulle	r6, r1
 800cd1e:	9608      	strle	r6, [sp, #32]
 800cd20:	e7e1      	b.n	800cce6 <_strtod_l+0x216>
 800cd22:	280f      	cmp	r0, #15
 800cd24:	dceb      	bgt.n	800ccfe <_strtod_l+0x22e>
 800cd26:	9808      	ldr	r0, [sp, #32]
 800cd28:	230a      	movs	r3, #10
 800cd2a:	fb03 2300 	mla	r3, r3, r0, r2
 800cd2e:	9308      	str	r3, [sp, #32]
 800cd30:	e7e5      	b.n	800ccfe <_strtod_l+0x22e>
 800cd32:	4629      	mov	r1, r5
 800cd34:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cd36:	1c50      	adds	r0, r2, #1
 800cd38:	9019      	str	r0, [sp, #100]	@ 0x64
 800cd3a:	7852      	ldrb	r2, [r2, #1]
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	460d      	mov	r5, r1
 800cd40:	e7b1      	b.n	800cca6 <_strtod_l+0x1d6>
 800cd42:	f04f 0900 	mov.w	r9, #0
 800cd46:	2301      	movs	r3, #1
 800cd48:	e77d      	b.n	800cc46 <_strtod_l+0x176>
 800cd4a:	f04f 0c00 	mov.w	ip, #0
 800cd4e:	1ca2      	adds	r2, r4, #2
 800cd50:	9219      	str	r2, [sp, #100]	@ 0x64
 800cd52:	78a2      	ldrb	r2, [r4, #2]
 800cd54:	e785      	b.n	800cc62 <_strtod_l+0x192>
 800cd56:	f04f 0c01 	mov.w	ip, #1
 800cd5a:	e7f8      	b.n	800cd4e <_strtod_l+0x27e>
 800cd5c:	0800f3e8 	.word	0x0800f3e8
 800cd60:	0800f3d0 	.word	0x0800f3d0
 800cd64:	7ff00000 	.word	0x7ff00000
 800cd68:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cd6a:	1c51      	adds	r1, r2, #1
 800cd6c:	9119      	str	r1, [sp, #100]	@ 0x64
 800cd6e:	7852      	ldrb	r2, [r2, #1]
 800cd70:	2a30      	cmp	r2, #48	@ 0x30
 800cd72:	d0f9      	beq.n	800cd68 <_strtod_l+0x298>
 800cd74:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cd78:	2908      	cmp	r1, #8
 800cd7a:	f63f af78 	bhi.w	800cc6e <_strtod_l+0x19e>
 800cd7e:	3a30      	subs	r2, #48	@ 0x30
 800cd80:	920e      	str	r2, [sp, #56]	@ 0x38
 800cd82:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cd84:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cd86:	f04f 080a 	mov.w	r8, #10
 800cd8a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cd8c:	1c56      	adds	r6, r2, #1
 800cd8e:	9619      	str	r6, [sp, #100]	@ 0x64
 800cd90:	7852      	ldrb	r2, [r2, #1]
 800cd92:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cd96:	f1be 0f09 	cmp.w	lr, #9
 800cd9a:	d939      	bls.n	800ce10 <_strtod_l+0x340>
 800cd9c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cd9e:	1a76      	subs	r6, r6, r1
 800cda0:	2e08      	cmp	r6, #8
 800cda2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cda6:	dc03      	bgt.n	800cdb0 <_strtod_l+0x2e0>
 800cda8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cdaa:	4588      	cmp	r8, r1
 800cdac:	bfa8      	it	ge
 800cdae:	4688      	movge	r8, r1
 800cdb0:	f1bc 0f00 	cmp.w	ip, #0
 800cdb4:	d001      	beq.n	800cdba <_strtod_l+0x2ea>
 800cdb6:	f1c8 0800 	rsb	r8, r8, #0
 800cdba:	2d00      	cmp	r5, #0
 800cdbc:	d14e      	bne.n	800ce5c <_strtod_l+0x38c>
 800cdbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cdc0:	4308      	orrs	r0, r1
 800cdc2:	f47f aebe 	bne.w	800cb42 <_strtod_l+0x72>
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	f47f aed6 	bne.w	800cb78 <_strtod_l+0xa8>
 800cdcc:	2a69      	cmp	r2, #105	@ 0x69
 800cdce:	d028      	beq.n	800ce22 <_strtod_l+0x352>
 800cdd0:	dc25      	bgt.n	800ce1e <_strtod_l+0x34e>
 800cdd2:	2a49      	cmp	r2, #73	@ 0x49
 800cdd4:	d025      	beq.n	800ce22 <_strtod_l+0x352>
 800cdd6:	2a4e      	cmp	r2, #78	@ 0x4e
 800cdd8:	f47f aece 	bne.w	800cb78 <_strtod_l+0xa8>
 800cddc:	499b      	ldr	r1, [pc, #620]	@ (800d04c <_strtod_l+0x57c>)
 800cdde:	a819      	add	r0, sp, #100	@ 0x64
 800cde0:	f001 f9c6 	bl	800e170 <__match>
 800cde4:	2800      	cmp	r0, #0
 800cde6:	f43f aec7 	beq.w	800cb78 <_strtod_l+0xa8>
 800cdea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	2b28      	cmp	r3, #40	@ 0x28
 800cdf0:	d12e      	bne.n	800ce50 <_strtod_l+0x380>
 800cdf2:	4997      	ldr	r1, [pc, #604]	@ (800d050 <_strtod_l+0x580>)
 800cdf4:	aa1c      	add	r2, sp, #112	@ 0x70
 800cdf6:	a819      	add	r0, sp, #100	@ 0x64
 800cdf8:	f001 f9ce 	bl	800e198 <__hexnan>
 800cdfc:	2805      	cmp	r0, #5
 800cdfe:	d127      	bne.n	800ce50 <_strtod_l+0x380>
 800ce00:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ce02:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ce06:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ce0a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ce0e:	e698      	b.n	800cb42 <_strtod_l+0x72>
 800ce10:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ce12:	fb08 2101 	mla	r1, r8, r1, r2
 800ce16:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ce1a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ce1c:	e7b5      	b.n	800cd8a <_strtod_l+0x2ba>
 800ce1e:	2a6e      	cmp	r2, #110	@ 0x6e
 800ce20:	e7da      	b.n	800cdd8 <_strtod_l+0x308>
 800ce22:	498c      	ldr	r1, [pc, #560]	@ (800d054 <_strtod_l+0x584>)
 800ce24:	a819      	add	r0, sp, #100	@ 0x64
 800ce26:	f001 f9a3 	bl	800e170 <__match>
 800ce2a:	2800      	cmp	r0, #0
 800ce2c:	f43f aea4 	beq.w	800cb78 <_strtod_l+0xa8>
 800ce30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce32:	4989      	ldr	r1, [pc, #548]	@ (800d058 <_strtod_l+0x588>)
 800ce34:	3b01      	subs	r3, #1
 800ce36:	a819      	add	r0, sp, #100	@ 0x64
 800ce38:	9319      	str	r3, [sp, #100]	@ 0x64
 800ce3a:	f001 f999 	bl	800e170 <__match>
 800ce3e:	b910      	cbnz	r0, 800ce46 <_strtod_l+0x376>
 800ce40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce42:	3301      	adds	r3, #1
 800ce44:	9319      	str	r3, [sp, #100]	@ 0x64
 800ce46:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d068 <_strtod_l+0x598>
 800ce4a:	f04f 0a00 	mov.w	sl, #0
 800ce4e:	e678      	b.n	800cb42 <_strtod_l+0x72>
 800ce50:	4882      	ldr	r0, [pc, #520]	@ (800d05c <_strtod_l+0x58c>)
 800ce52:	f000 fec9 	bl	800dbe8 <nan>
 800ce56:	ec5b ab10 	vmov	sl, fp, d0
 800ce5a:	e672      	b.n	800cb42 <_strtod_l+0x72>
 800ce5c:	eba8 0309 	sub.w	r3, r8, r9
 800ce60:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ce62:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce64:	2f00      	cmp	r7, #0
 800ce66:	bf08      	it	eq
 800ce68:	462f      	moveq	r7, r5
 800ce6a:	2d10      	cmp	r5, #16
 800ce6c:	462c      	mov	r4, r5
 800ce6e:	bfa8      	it	ge
 800ce70:	2410      	movge	r4, #16
 800ce72:	f7f3 fb4f 	bl	8000514 <__aeabi_ui2d>
 800ce76:	2d09      	cmp	r5, #9
 800ce78:	4682      	mov	sl, r0
 800ce7a:	468b      	mov	fp, r1
 800ce7c:	dc13      	bgt.n	800cea6 <_strtod_l+0x3d6>
 800ce7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	f43f ae5e 	beq.w	800cb42 <_strtod_l+0x72>
 800ce86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce88:	dd78      	ble.n	800cf7c <_strtod_l+0x4ac>
 800ce8a:	2b16      	cmp	r3, #22
 800ce8c:	dc5f      	bgt.n	800cf4e <_strtod_l+0x47e>
 800ce8e:	4974      	ldr	r1, [pc, #464]	@ (800d060 <_strtod_l+0x590>)
 800ce90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ce94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce98:	4652      	mov	r2, sl
 800ce9a:	465b      	mov	r3, fp
 800ce9c:	f7f3 fbb4 	bl	8000608 <__aeabi_dmul>
 800cea0:	4682      	mov	sl, r0
 800cea2:	468b      	mov	fp, r1
 800cea4:	e64d      	b.n	800cb42 <_strtod_l+0x72>
 800cea6:	4b6e      	ldr	r3, [pc, #440]	@ (800d060 <_strtod_l+0x590>)
 800cea8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ceac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ceb0:	f7f3 fbaa 	bl	8000608 <__aeabi_dmul>
 800ceb4:	4682      	mov	sl, r0
 800ceb6:	9808      	ldr	r0, [sp, #32]
 800ceb8:	468b      	mov	fp, r1
 800ceba:	f7f3 fb2b 	bl	8000514 <__aeabi_ui2d>
 800cebe:	4602      	mov	r2, r0
 800cec0:	460b      	mov	r3, r1
 800cec2:	4650      	mov	r0, sl
 800cec4:	4659      	mov	r1, fp
 800cec6:	f7f3 f9e9 	bl	800029c <__adddf3>
 800ceca:	2d0f      	cmp	r5, #15
 800cecc:	4682      	mov	sl, r0
 800cece:	468b      	mov	fp, r1
 800ced0:	ddd5      	ble.n	800ce7e <_strtod_l+0x3ae>
 800ced2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ced4:	1b2c      	subs	r4, r5, r4
 800ced6:	441c      	add	r4, r3
 800ced8:	2c00      	cmp	r4, #0
 800ceda:	f340 8096 	ble.w	800d00a <_strtod_l+0x53a>
 800cede:	f014 030f 	ands.w	r3, r4, #15
 800cee2:	d00a      	beq.n	800cefa <_strtod_l+0x42a>
 800cee4:	495e      	ldr	r1, [pc, #376]	@ (800d060 <_strtod_l+0x590>)
 800cee6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ceea:	4652      	mov	r2, sl
 800ceec:	465b      	mov	r3, fp
 800ceee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cef2:	f7f3 fb89 	bl	8000608 <__aeabi_dmul>
 800cef6:	4682      	mov	sl, r0
 800cef8:	468b      	mov	fp, r1
 800cefa:	f034 040f 	bics.w	r4, r4, #15
 800cefe:	d073      	beq.n	800cfe8 <_strtod_l+0x518>
 800cf00:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800cf04:	dd48      	ble.n	800cf98 <_strtod_l+0x4c8>
 800cf06:	2400      	movs	r4, #0
 800cf08:	46a0      	mov	r8, r4
 800cf0a:	940a      	str	r4, [sp, #40]	@ 0x28
 800cf0c:	46a1      	mov	r9, r4
 800cf0e:	9a05      	ldr	r2, [sp, #20]
 800cf10:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d068 <_strtod_l+0x598>
 800cf14:	2322      	movs	r3, #34	@ 0x22
 800cf16:	6013      	str	r3, [r2, #0]
 800cf18:	f04f 0a00 	mov.w	sl, #0
 800cf1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	f43f ae0f 	beq.w	800cb42 <_strtod_l+0x72>
 800cf24:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cf26:	9805      	ldr	r0, [sp, #20]
 800cf28:	f7ff f942 	bl	800c1b0 <_Bfree>
 800cf2c:	9805      	ldr	r0, [sp, #20]
 800cf2e:	4649      	mov	r1, r9
 800cf30:	f7ff f93e 	bl	800c1b0 <_Bfree>
 800cf34:	9805      	ldr	r0, [sp, #20]
 800cf36:	4641      	mov	r1, r8
 800cf38:	f7ff f93a 	bl	800c1b0 <_Bfree>
 800cf3c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cf3e:	9805      	ldr	r0, [sp, #20]
 800cf40:	f7ff f936 	bl	800c1b0 <_Bfree>
 800cf44:	9805      	ldr	r0, [sp, #20]
 800cf46:	4621      	mov	r1, r4
 800cf48:	f7ff f932 	bl	800c1b0 <_Bfree>
 800cf4c:	e5f9      	b.n	800cb42 <_strtod_l+0x72>
 800cf4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf50:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cf54:	4293      	cmp	r3, r2
 800cf56:	dbbc      	blt.n	800ced2 <_strtod_l+0x402>
 800cf58:	4c41      	ldr	r4, [pc, #260]	@ (800d060 <_strtod_l+0x590>)
 800cf5a:	f1c5 050f 	rsb	r5, r5, #15
 800cf5e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cf62:	4652      	mov	r2, sl
 800cf64:	465b      	mov	r3, fp
 800cf66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf6a:	f7f3 fb4d 	bl	8000608 <__aeabi_dmul>
 800cf6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf70:	1b5d      	subs	r5, r3, r5
 800cf72:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cf76:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cf7a:	e78f      	b.n	800ce9c <_strtod_l+0x3cc>
 800cf7c:	3316      	adds	r3, #22
 800cf7e:	dba8      	blt.n	800ced2 <_strtod_l+0x402>
 800cf80:	4b37      	ldr	r3, [pc, #220]	@ (800d060 <_strtod_l+0x590>)
 800cf82:	eba9 0808 	sub.w	r8, r9, r8
 800cf86:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cf8a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cf8e:	4650      	mov	r0, sl
 800cf90:	4659      	mov	r1, fp
 800cf92:	f7f3 fc63 	bl	800085c <__aeabi_ddiv>
 800cf96:	e783      	b.n	800cea0 <_strtod_l+0x3d0>
 800cf98:	4b32      	ldr	r3, [pc, #200]	@ (800d064 <_strtod_l+0x594>)
 800cf9a:	9308      	str	r3, [sp, #32]
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	1124      	asrs	r4, r4, #4
 800cfa0:	4650      	mov	r0, sl
 800cfa2:	4659      	mov	r1, fp
 800cfa4:	461e      	mov	r6, r3
 800cfa6:	2c01      	cmp	r4, #1
 800cfa8:	dc21      	bgt.n	800cfee <_strtod_l+0x51e>
 800cfaa:	b10b      	cbz	r3, 800cfb0 <_strtod_l+0x4e0>
 800cfac:	4682      	mov	sl, r0
 800cfae:	468b      	mov	fp, r1
 800cfb0:	492c      	ldr	r1, [pc, #176]	@ (800d064 <_strtod_l+0x594>)
 800cfb2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cfb6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cfba:	4652      	mov	r2, sl
 800cfbc:	465b      	mov	r3, fp
 800cfbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfc2:	f7f3 fb21 	bl	8000608 <__aeabi_dmul>
 800cfc6:	4b28      	ldr	r3, [pc, #160]	@ (800d068 <_strtod_l+0x598>)
 800cfc8:	460a      	mov	r2, r1
 800cfca:	400b      	ands	r3, r1
 800cfcc:	4927      	ldr	r1, [pc, #156]	@ (800d06c <_strtod_l+0x59c>)
 800cfce:	428b      	cmp	r3, r1
 800cfd0:	4682      	mov	sl, r0
 800cfd2:	d898      	bhi.n	800cf06 <_strtod_l+0x436>
 800cfd4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cfd8:	428b      	cmp	r3, r1
 800cfda:	bf86      	itte	hi
 800cfdc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d070 <_strtod_l+0x5a0>
 800cfe0:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800cfe4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cfe8:	2300      	movs	r3, #0
 800cfea:	9308      	str	r3, [sp, #32]
 800cfec:	e07a      	b.n	800d0e4 <_strtod_l+0x614>
 800cfee:	07e2      	lsls	r2, r4, #31
 800cff0:	d505      	bpl.n	800cffe <_strtod_l+0x52e>
 800cff2:	9b08      	ldr	r3, [sp, #32]
 800cff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff8:	f7f3 fb06 	bl	8000608 <__aeabi_dmul>
 800cffc:	2301      	movs	r3, #1
 800cffe:	9a08      	ldr	r2, [sp, #32]
 800d000:	3208      	adds	r2, #8
 800d002:	3601      	adds	r6, #1
 800d004:	1064      	asrs	r4, r4, #1
 800d006:	9208      	str	r2, [sp, #32]
 800d008:	e7cd      	b.n	800cfa6 <_strtod_l+0x4d6>
 800d00a:	d0ed      	beq.n	800cfe8 <_strtod_l+0x518>
 800d00c:	4264      	negs	r4, r4
 800d00e:	f014 020f 	ands.w	r2, r4, #15
 800d012:	d00a      	beq.n	800d02a <_strtod_l+0x55a>
 800d014:	4b12      	ldr	r3, [pc, #72]	@ (800d060 <_strtod_l+0x590>)
 800d016:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d01a:	4650      	mov	r0, sl
 800d01c:	4659      	mov	r1, fp
 800d01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d022:	f7f3 fc1b 	bl	800085c <__aeabi_ddiv>
 800d026:	4682      	mov	sl, r0
 800d028:	468b      	mov	fp, r1
 800d02a:	1124      	asrs	r4, r4, #4
 800d02c:	d0dc      	beq.n	800cfe8 <_strtod_l+0x518>
 800d02e:	2c1f      	cmp	r4, #31
 800d030:	dd20      	ble.n	800d074 <_strtod_l+0x5a4>
 800d032:	2400      	movs	r4, #0
 800d034:	46a0      	mov	r8, r4
 800d036:	940a      	str	r4, [sp, #40]	@ 0x28
 800d038:	46a1      	mov	r9, r4
 800d03a:	9a05      	ldr	r2, [sp, #20]
 800d03c:	2322      	movs	r3, #34	@ 0x22
 800d03e:	f04f 0a00 	mov.w	sl, #0
 800d042:	f04f 0b00 	mov.w	fp, #0
 800d046:	6013      	str	r3, [r2, #0]
 800d048:	e768      	b.n	800cf1c <_strtod_l+0x44c>
 800d04a:	bf00      	nop
 800d04c:	0800f1bd 	.word	0x0800f1bd
 800d050:	0800f3d4 	.word	0x0800f3d4
 800d054:	0800f1b5 	.word	0x0800f1b5
 800d058:	0800f1ec 	.word	0x0800f1ec
 800d05c:	0800f57d 	.word	0x0800f57d
 800d060:	0800f308 	.word	0x0800f308
 800d064:	0800f2e0 	.word	0x0800f2e0
 800d068:	7ff00000 	.word	0x7ff00000
 800d06c:	7ca00000 	.word	0x7ca00000
 800d070:	7fefffff 	.word	0x7fefffff
 800d074:	f014 0310 	ands.w	r3, r4, #16
 800d078:	bf18      	it	ne
 800d07a:	236a      	movne	r3, #106	@ 0x6a
 800d07c:	4ea9      	ldr	r6, [pc, #676]	@ (800d324 <_strtod_l+0x854>)
 800d07e:	9308      	str	r3, [sp, #32]
 800d080:	4650      	mov	r0, sl
 800d082:	4659      	mov	r1, fp
 800d084:	2300      	movs	r3, #0
 800d086:	07e2      	lsls	r2, r4, #31
 800d088:	d504      	bpl.n	800d094 <_strtod_l+0x5c4>
 800d08a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d08e:	f7f3 fabb 	bl	8000608 <__aeabi_dmul>
 800d092:	2301      	movs	r3, #1
 800d094:	1064      	asrs	r4, r4, #1
 800d096:	f106 0608 	add.w	r6, r6, #8
 800d09a:	d1f4      	bne.n	800d086 <_strtod_l+0x5b6>
 800d09c:	b10b      	cbz	r3, 800d0a2 <_strtod_l+0x5d2>
 800d09e:	4682      	mov	sl, r0
 800d0a0:	468b      	mov	fp, r1
 800d0a2:	9b08      	ldr	r3, [sp, #32]
 800d0a4:	b1b3      	cbz	r3, 800d0d4 <_strtod_l+0x604>
 800d0a6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d0aa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	4659      	mov	r1, fp
 800d0b2:	dd0f      	ble.n	800d0d4 <_strtod_l+0x604>
 800d0b4:	2b1f      	cmp	r3, #31
 800d0b6:	dd55      	ble.n	800d164 <_strtod_l+0x694>
 800d0b8:	2b34      	cmp	r3, #52	@ 0x34
 800d0ba:	bfde      	ittt	le
 800d0bc:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800d0c0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d0c4:	4093      	lslle	r3, r2
 800d0c6:	f04f 0a00 	mov.w	sl, #0
 800d0ca:	bfcc      	ite	gt
 800d0cc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d0d0:	ea03 0b01 	andle.w	fp, r3, r1
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	4650      	mov	r0, sl
 800d0da:	4659      	mov	r1, fp
 800d0dc:	f7f3 fcfc 	bl	8000ad8 <__aeabi_dcmpeq>
 800d0e0:	2800      	cmp	r0, #0
 800d0e2:	d1a6      	bne.n	800d032 <_strtod_l+0x562>
 800d0e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0e6:	9300      	str	r3, [sp, #0]
 800d0e8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d0ea:	9805      	ldr	r0, [sp, #20]
 800d0ec:	462b      	mov	r3, r5
 800d0ee:	463a      	mov	r2, r7
 800d0f0:	f7ff f8c6 	bl	800c280 <__s2b>
 800d0f4:	900a      	str	r0, [sp, #40]	@ 0x28
 800d0f6:	2800      	cmp	r0, #0
 800d0f8:	f43f af05 	beq.w	800cf06 <_strtod_l+0x436>
 800d0fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d0fe:	2a00      	cmp	r2, #0
 800d100:	eba9 0308 	sub.w	r3, r9, r8
 800d104:	bfa8      	it	ge
 800d106:	2300      	movge	r3, #0
 800d108:	9312      	str	r3, [sp, #72]	@ 0x48
 800d10a:	2400      	movs	r4, #0
 800d10c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d110:	9316      	str	r3, [sp, #88]	@ 0x58
 800d112:	46a0      	mov	r8, r4
 800d114:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d116:	9805      	ldr	r0, [sp, #20]
 800d118:	6859      	ldr	r1, [r3, #4]
 800d11a:	f7ff f809 	bl	800c130 <_Balloc>
 800d11e:	4681      	mov	r9, r0
 800d120:	2800      	cmp	r0, #0
 800d122:	f43f aef4 	beq.w	800cf0e <_strtod_l+0x43e>
 800d126:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d128:	691a      	ldr	r2, [r3, #16]
 800d12a:	3202      	adds	r2, #2
 800d12c:	f103 010c 	add.w	r1, r3, #12
 800d130:	0092      	lsls	r2, r2, #2
 800d132:	300c      	adds	r0, #12
 800d134:	f7fe f89b 	bl	800b26e <memcpy>
 800d138:	ec4b ab10 	vmov	d0, sl, fp
 800d13c:	9805      	ldr	r0, [sp, #20]
 800d13e:	aa1c      	add	r2, sp, #112	@ 0x70
 800d140:	a91b      	add	r1, sp, #108	@ 0x6c
 800d142:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d146:	f7ff fbd7 	bl	800c8f8 <__d2b>
 800d14a:	901a      	str	r0, [sp, #104]	@ 0x68
 800d14c:	2800      	cmp	r0, #0
 800d14e:	f43f aede 	beq.w	800cf0e <_strtod_l+0x43e>
 800d152:	9805      	ldr	r0, [sp, #20]
 800d154:	2101      	movs	r1, #1
 800d156:	f7ff f929 	bl	800c3ac <__i2b>
 800d15a:	4680      	mov	r8, r0
 800d15c:	b948      	cbnz	r0, 800d172 <_strtod_l+0x6a2>
 800d15e:	f04f 0800 	mov.w	r8, #0
 800d162:	e6d4      	b.n	800cf0e <_strtod_l+0x43e>
 800d164:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d168:	fa02 f303 	lsl.w	r3, r2, r3
 800d16c:	ea03 0a0a 	and.w	sl, r3, sl
 800d170:	e7b0      	b.n	800d0d4 <_strtod_l+0x604>
 800d172:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d174:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d176:	2d00      	cmp	r5, #0
 800d178:	bfab      	itete	ge
 800d17a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d17c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d17e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d180:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d182:	bfac      	ite	ge
 800d184:	18ef      	addge	r7, r5, r3
 800d186:	1b5e      	sublt	r6, r3, r5
 800d188:	9b08      	ldr	r3, [sp, #32]
 800d18a:	1aed      	subs	r5, r5, r3
 800d18c:	4415      	add	r5, r2
 800d18e:	4b66      	ldr	r3, [pc, #408]	@ (800d328 <_strtod_l+0x858>)
 800d190:	3d01      	subs	r5, #1
 800d192:	429d      	cmp	r5, r3
 800d194:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d198:	da50      	bge.n	800d23c <_strtod_l+0x76c>
 800d19a:	1b5b      	subs	r3, r3, r5
 800d19c:	2b1f      	cmp	r3, #31
 800d19e:	eba2 0203 	sub.w	r2, r2, r3
 800d1a2:	f04f 0101 	mov.w	r1, #1
 800d1a6:	dc3d      	bgt.n	800d224 <_strtod_l+0x754>
 800d1a8:	fa01 f303 	lsl.w	r3, r1, r3
 800d1ac:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	9310      	str	r3, [sp, #64]	@ 0x40
 800d1b2:	18bd      	adds	r5, r7, r2
 800d1b4:	9b08      	ldr	r3, [sp, #32]
 800d1b6:	42af      	cmp	r7, r5
 800d1b8:	4416      	add	r6, r2
 800d1ba:	441e      	add	r6, r3
 800d1bc:	463b      	mov	r3, r7
 800d1be:	bfa8      	it	ge
 800d1c0:	462b      	movge	r3, r5
 800d1c2:	42b3      	cmp	r3, r6
 800d1c4:	bfa8      	it	ge
 800d1c6:	4633      	movge	r3, r6
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	bfc2      	ittt	gt
 800d1cc:	1aed      	subgt	r5, r5, r3
 800d1ce:	1af6      	subgt	r6, r6, r3
 800d1d0:	1aff      	subgt	r7, r7, r3
 800d1d2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	dd16      	ble.n	800d206 <_strtod_l+0x736>
 800d1d8:	4641      	mov	r1, r8
 800d1da:	9805      	ldr	r0, [sp, #20]
 800d1dc:	461a      	mov	r2, r3
 800d1de:	f7ff f9a5 	bl	800c52c <__pow5mult>
 800d1e2:	4680      	mov	r8, r0
 800d1e4:	2800      	cmp	r0, #0
 800d1e6:	d0ba      	beq.n	800d15e <_strtod_l+0x68e>
 800d1e8:	4601      	mov	r1, r0
 800d1ea:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d1ec:	9805      	ldr	r0, [sp, #20]
 800d1ee:	f7ff f8f3 	bl	800c3d8 <__multiply>
 800d1f2:	900e      	str	r0, [sp, #56]	@ 0x38
 800d1f4:	2800      	cmp	r0, #0
 800d1f6:	f43f ae8a 	beq.w	800cf0e <_strtod_l+0x43e>
 800d1fa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d1fc:	9805      	ldr	r0, [sp, #20]
 800d1fe:	f7fe ffd7 	bl	800c1b0 <_Bfree>
 800d202:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d204:	931a      	str	r3, [sp, #104]	@ 0x68
 800d206:	2d00      	cmp	r5, #0
 800d208:	dc1d      	bgt.n	800d246 <_strtod_l+0x776>
 800d20a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	dd23      	ble.n	800d258 <_strtod_l+0x788>
 800d210:	4649      	mov	r1, r9
 800d212:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d214:	9805      	ldr	r0, [sp, #20]
 800d216:	f7ff f989 	bl	800c52c <__pow5mult>
 800d21a:	4681      	mov	r9, r0
 800d21c:	b9e0      	cbnz	r0, 800d258 <_strtod_l+0x788>
 800d21e:	f04f 0900 	mov.w	r9, #0
 800d222:	e674      	b.n	800cf0e <_strtod_l+0x43e>
 800d224:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d228:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d22c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d230:	35e2      	adds	r5, #226	@ 0xe2
 800d232:	fa01 f305 	lsl.w	r3, r1, r5
 800d236:	9310      	str	r3, [sp, #64]	@ 0x40
 800d238:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d23a:	e7ba      	b.n	800d1b2 <_strtod_l+0x6e2>
 800d23c:	2300      	movs	r3, #0
 800d23e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d240:	2301      	movs	r3, #1
 800d242:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d244:	e7b5      	b.n	800d1b2 <_strtod_l+0x6e2>
 800d246:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d248:	9805      	ldr	r0, [sp, #20]
 800d24a:	462a      	mov	r2, r5
 800d24c:	f7ff f9c8 	bl	800c5e0 <__lshift>
 800d250:	901a      	str	r0, [sp, #104]	@ 0x68
 800d252:	2800      	cmp	r0, #0
 800d254:	d1d9      	bne.n	800d20a <_strtod_l+0x73a>
 800d256:	e65a      	b.n	800cf0e <_strtod_l+0x43e>
 800d258:	2e00      	cmp	r6, #0
 800d25a:	dd07      	ble.n	800d26c <_strtod_l+0x79c>
 800d25c:	4649      	mov	r1, r9
 800d25e:	9805      	ldr	r0, [sp, #20]
 800d260:	4632      	mov	r2, r6
 800d262:	f7ff f9bd 	bl	800c5e0 <__lshift>
 800d266:	4681      	mov	r9, r0
 800d268:	2800      	cmp	r0, #0
 800d26a:	d0d8      	beq.n	800d21e <_strtod_l+0x74e>
 800d26c:	2f00      	cmp	r7, #0
 800d26e:	dd08      	ble.n	800d282 <_strtod_l+0x7b2>
 800d270:	4641      	mov	r1, r8
 800d272:	9805      	ldr	r0, [sp, #20]
 800d274:	463a      	mov	r2, r7
 800d276:	f7ff f9b3 	bl	800c5e0 <__lshift>
 800d27a:	4680      	mov	r8, r0
 800d27c:	2800      	cmp	r0, #0
 800d27e:	f43f ae46 	beq.w	800cf0e <_strtod_l+0x43e>
 800d282:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d284:	9805      	ldr	r0, [sp, #20]
 800d286:	464a      	mov	r2, r9
 800d288:	f7ff fa32 	bl	800c6f0 <__mdiff>
 800d28c:	4604      	mov	r4, r0
 800d28e:	2800      	cmp	r0, #0
 800d290:	f43f ae3d 	beq.w	800cf0e <_strtod_l+0x43e>
 800d294:	68c3      	ldr	r3, [r0, #12]
 800d296:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d298:	2300      	movs	r3, #0
 800d29a:	60c3      	str	r3, [r0, #12]
 800d29c:	4641      	mov	r1, r8
 800d29e:	f7ff fa0b 	bl	800c6b8 <__mcmp>
 800d2a2:	2800      	cmp	r0, #0
 800d2a4:	da46      	bge.n	800d334 <_strtod_l+0x864>
 800d2a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2a8:	ea53 030a 	orrs.w	r3, r3, sl
 800d2ac:	d16c      	bne.n	800d388 <_strtod_l+0x8b8>
 800d2ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d168      	bne.n	800d388 <_strtod_l+0x8b8>
 800d2b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d2ba:	0d1b      	lsrs	r3, r3, #20
 800d2bc:	051b      	lsls	r3, r3, #20
 800d2be:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d2c2:	d961      	bls.n	800d388 <_strtod_l+0x8b8>
 800d2c4:	6963      	ldr	r3, [r4, #20]
 800d2c6:	b913      	cbnz	r3, 800d2ce <_strtod_l+0x7fe>
 800d2c8:	6923      	ldr	r3, [r4, #16]
 800d2ca:	2b01      	cmp	r3, #1
 800d2cc:	dd5c      	ble.n	800d388 <_strtod_l+0x8b8>
 800d2ce:	4621      	mov	r1, r4
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	9805      	ldr	r0, [sp, #20]
 800d2d4:	f7ff f984 	bl	800c5e0 <__lshift>
 800d2d8:	4641      	mov	r1, r8
 800d2da:	4604      	mov	r4, r0
 800d2dc:	f7ff f9ec 	bl	800c6b8 <__mcmp>
 800d2e0:	2800      	cmp	r0, #0
 800d2e2:	dd51      	ble.n	800d388 <_strtod_l+0x8b8>
 800d2e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d2e8:	9a08      	ldr	r2, [sp, #32]
 800d2ea:	0d1b      	lsrs	r3, r3, #20
 800d2ec:	051b      	lsls	r3, r3, #20
 800d2ee:	2a00      	cmp	r2, #0
 800d2f0:	d06b      	beq.n	800d3ca <_strtod_l+0x8fa>
 800d2f2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d2f6:	d868      	bhi.n	800d3ca <_strtod_l+0x8fa>
 800d2f8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d2fc:	f67f ae9d 	bls.w	800d03a <_strtod_l+0x56a>
 800d300:	4b0a      	ldr	r3, [pc, #40]	@ (800d32c <_strtod_l+0x85c>)
 800d302:	4650      	mov	r0, sl
 800d304:	4659      	mov	r1, fp
 800d306:	2200      	movs	r2, #0
 800d308:	f7f3 f97e 	bl	8000608 <__aeabi_dmul>
 800d30c:	4b08      	ldr	r3, [pc, #32]	@ (800d330 <_strtod_l+0x860>)
 800d30e:	400b      	ands	r3, r1
 800d310:	4682      	mov	sl, r0
 800d312:	468b      	mov	fp, r1
 800d314:	2b00      	cmp	r3, #0
 800d316:	f47f ae05 	bne.w	800cf24 <_strtod_l+0x454>
 800d31a:	9a05      	ldr	r2, [sp, #20]
 800d31c:	2322      	movs	r3, #34	@ 0x22
 800d31e:	6013      	str	r3, [r2, #0]
 800d320:	e600      	b.n	800cf24 <_strtod_l+0x454>
 800d322:	bf00      	nop
 800d324:	0800f400 	.word	0x0800f400
 800d328:	fffffc02 	.word	0xfffffc02
 800d32c:	39500000 	.word	0x39500000
 800d330:	7ff00000 	.word	0x7ff00000
 800d334:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d338:	d165      	bne.n	800d406 <_strtod_l+0x936>
 800d33a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d33c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d340:	b35a      	cbz	r2, 800d39a <_strtod_l+0x8ca>
 800d342:	4a9f      	ldr	r2, [pc, #636]	@ (800d5c0 <_strtod_l+0xaf0>)
 800d344:	4293      	cmp	r3, r2
 800d346:	d12b      	bne.n	800d3a0 <_strtod_l+0x8d0>
 800d348:	9b08      	ldr	r3, [sp, #32]
 800d34a:	4651      	mov	r1, sl
 800d34c:	b303      	cbz	r3, 800d390 <_strtod_l+0x8c0>
 800d34e:	4b9d      	ldr	r3, [pc, #628]	@ (800d5c4 <_strtod_l+0xaf4>)
 800d350:	465a      	mov	r2, fp
 800d352:	4013      	ands	r3, r2
 800d354:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d358:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d35c:	d81b      	bhi.n	800d396 <_strtod_l+0x8c6>
 800d35e:	0d1b      	lsrs	r3, r3, #20
 800d360:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d364:	fa02 f303 	lsl.w	r3, r2, r3
 800d368:	4299      	cmp	r1, r3
 800d36a:	d119      	bne.n	800d3a0 <_strtod_l+0x8d0>
 800d36c:	4b96      	ldr	r3, [pc, #600]	@ (800d5c8 <_strtod_l+0xaf8>)
 800d36e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d370:	429a      	cmp	r2, r3
 800d372:	d102      	bne.n	800d37a <_strtod_l+0x8aa>
 800d374:	3101      	adds	r1, #1
 800d376:	f43f adca 	beq.w	800cf0e <_strtod_l+0x43e>
 800d37a:	4b92      	ldr	r3, [pc, #584]	@ (800d5c4 <_strtod_l+0xaf4>)
 800d37c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d37e:	401a      	ands	r2, r3
 800d380:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d384:	f04f 0a00 	mov.w	sl, #0
 800d388:	9b08      	ldr	r3, [sp, #32]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d1b8      	bne.n	800d300 <_strtod_l+0x830>
 800d38e:	e5c9      	b.n	800cf24 <_strtod_l+0x454>
 800d390:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d394:	e7e8      	b.n	800d368 <_strtod_l+0x898>
 800d396:	4613      	mov	r3, r2
 800d398:	e7e6      	b.n	800d368 <_strtod_l+0x898>
 800d39a:	ea53 030a 	orrs.w	r3, r3, sl
 800d39e:	d0a1      	beq.n	800d2e4 <_strtod_l+0x814>
 800d3a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d3a2:	b1db      	cbz	r3, 800d3dc <_strtod_l+0x90c>
 800d3a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d3a6:	4213      	tst	r3, r2
 800d3a8:	d0ee      	beq.n	800d388 <_strtod_l+0x8b8>
 800d3aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3ac:	9a08      	ldr	r2, [sp, #32]
 800d3ae:	4650      	mov	r0, sl
 800d3b0:	4659      	mov	r1, fp
 800d3b2:	b1bb      	cbz	r3, 800d3e4 <_strtod_l+0x914>
 800d3b4:	f7ff fb6e 	bl	800ca94 <sulp>
 800d3b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d3bc:	ec53 2b10 	vmov	r2, r3, d0
 800d3c0:	f7f2 ff6c 	bl	800029c <__adddf3>
 800d3c4:	4682      	mov	sl, r0
 800d3c6:	468b      	mov	fp, r1
 800d3c8:	e7de      	b.n	800d388 <_strtod_l+0x8b8>
 800d3ca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d3ce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d3d2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d3d6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800d3da:	e7d5      	b.n	800d388 <_strtod_l+0x8b8>
 800d3dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d3de:	ea13 0f0a 	tst.w	r3, sl
 800d3e2:	e7e1      	b.n	800d3a8 <_strtod_l+0x8d8>
 800d3e4:	f7ff fb56 	bl	800ca94 <sulp>
 800d3e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d3ec:	ec53 2b10 	vmov	r2, r3, d0
 800d3f0:	f7f2 ff52 	bl	8000298 <__aeabi_dsub>
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	4682      	mov	sl, r0
 800d3fa:	468b      	mov	fp, r1
 800d3fc:	f7f3 fb6c 	bl	8000ad8 <__aeabi_dcmpeq>
 800d400:	2800      	cmp	r0, #0
 800d402:	d0c1      	beq.n	800d388 <_strtod_l+0x8b8>
 800d404:	e619      	b.n	800d03a <_strtod_l+0x56a>
 800d406:	4641      	mov	r1, r8
 800d408:	4620      	mov	r0, r4
 800d40a:	f7ff facd 	bl	800c9a8 <__ratio>
 800d40e:	ec57 6b10 	vmov	r6, r7, d0
 800d412:	2200      	movs	r2, #0
 800d414:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d418:	4630      	mov	r0, r6
 800d41a:	4639      	mov	r1, r7
 800d41c:	f7f3 fb70 	bl	8000b00 <__aeabi_dcmple>
 800d420:	2800      	cmp	r0, #0
 800d422:	d06f      	beq.n	800d504 <_strtod_l+0xa34>
 800d424:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d426:	2b00      	cmp	r3, #0
 800d428:	d17a      	bne.n	800d520 <_strtod_l+0xa50>
 800d42a:	f1ba 0f00 	cmp.w	sl, #0
 800d42e:	d158      	bne.n	800d4e2 <_strtod_l+0xa12>
 800d430:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d432:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d436:	2b00      	cmp	r3, #0
 800d438:	d15a      	bne.n	800d4f0 <_strtod_l+0xa20>
 800d43a:	4b64      	ldr	r3, [pc, #400]	@ (800d5cc <_strtod_l+0xafc>)
 800d43c:	2200      	movs	r2, #0
 800d43e:	4630      	mov	r0, r6
 800d440:	4639      	mov	r1, r7
 800d442:	f7f3 fb53 	bl	8000aec <__aeabi_dcmplt>
 800d446:	2800      	cmp	r0, #0
 800d448:	d159      	bne.n	800d4fe <_strtod_l+0xa2e>
 800d44a:	4630      	mov	r0, r6
 800d44c:	4639      	mov	r1, r7
 800d44e:	4b60      	ldr	r3, [pc, #384]	@ (800d5d0 <_strtod_l+0xb00>)
 800d450:	2200      	movs	r2, #0
 800d452:	f7f3 f8d9 	bl	8000608 <__aeabi_dmul>
 800d456:	4606      	mov	r6, r0
 800d458:	460f      	mov	r7, r1
 800d45a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d45e:	9606      	str	r6, [sp, #24]
 800d460:	9307      	str	r3, [sp, #28]
 800d462:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d466:	4d57      	ldr	r5, [pc, #348]	@ (800d5c4 <_strtod_l+0xaf4>)
 800d468:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d46c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d46e:	401d      	ands	r5, r3
 800d470:	4b58      	ldr	r3, [pc, #352]	@ (800d5d4 <_strtod_l+0xb04>)
 800d472:	429d      	cmp	r5, r3
 800d474:	f040 80b2 	bne.w	800d5dc <_strtod_l+0xb0c>
 800d478:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d47a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d47e:	ec4b ab10 	vmov	d0, sl, fp
 800d482:	f7ff f9c9 	bl	800c818 <__ulp>
 800d486:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d48a:	ec51 0b10 	vmov	r0, r1, d0
 800d48e:	f7f3 f8bb 	bl	8000608 <__aeabi_dmul>
 800d492:	4652      	mov	r2, sl
 800d494:	465b      	mov	r3, fp
 800d496:	f7f2 ff01 	bl	800029c <__adddf3>
 800d49a:	460b      	mov	r3, r1
 800d49c:	4949      	ldr	r1, [pc, #292]	@ (800d5c4 <_strtod_l+0xaf4>)
 800d49e:	4a4e      	ldr	r2, [pc, #312]	@ (800d5d8 <_strtod_l+0xb08>)
 800d4a0:	4019      	ands	r1, r3
 800d4a2:	4291      	cmp	r1, r2
 800d4a4:	4682      	mov	sl, r0
 800d4a6:	d942      	bls.n	800d52e <_strtod_l+0xa5e>
 800d4a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d4aa:	4b47      	ldr	r3, [pc, #284]	@ (800d5c8 <_strtod_l+0xaf8>)
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d103      	bne.n	800d4b8 <_strtod_l+0x9e8>
 800d4b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d4b2:	3301      	adds	r3, #1
 800d4b4:	f43f ad2b 	beq.w	800cf0e <_strtod_l+0x43e>
 800d4b8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d5c8 <_strtod_l+0xaf8>
 800d4bc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800d4c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d4c2:	9805      	ldr	r0, [sp, #20]
 800d4c4:	f7fe fe74 	bl	800c1b0 <_Bfree>
 800d4c8:	9805      	ldr	r0, [sp, #20]
 800d4ca:	4649      	mov	r1, r9
 800d4cc:	f7fe fe70 	bl	800c1b0 <_Bfree>
 800d4d0:	9805      	ldr	r0, [sp, #20]
 800d4d2:	4641      	mov	r1, r8
 800d4d4:	f7fe fe6c 	bl	800c1b0 <_Bfree>
 800d4d8:	9805      	ldr	r0, [sp, #20]
 800d4da:	4621      	mov	r1, r4
 800d4dc:	f7fe fe68 	bl	800c1b0 <_Bfree>
 800d4e0:	e618      	b.n	800d114 <_strtod_l+0x644>
 800d4e2:	f1ba 0f01 	cmp.w	sl, #1
 800d4e6:	d103      	bne.n	800d4f0 <_strtod_l+0xa20>
 800d4e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	f43f ada5 	beq.w	800d03a <_strtod_l+0x56a>
 800d4f0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d5a0 <_strtod_l+0xad0>
 800d4f4:	4f35      	ldr	r7, [pc, #212]	@ (800d5cc <_strtod_l+0xafc>)
 800d4f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d4fa:	2600      	movs	r6, #0
 800d4fc:	e7b1      	b.n	800d462 <_strtod_l+0x992>
 800d4fe:	4f34      	ldr	r7, [pc, #208]	@ (800d5d0 <_strtod_l+0xb00>)
 800d500:	2600      	movs	r6, #0
 800d502:	e7aa      	b.n	800d45a <_strtod_l+0x98a>
 800d504:	4b32      	ldr	r3, [pc, #200]	@ (800d5d0 <_strtod_l+0xb00>)
 800d506:	4630      	mov	r0, r6
 800d508:	4639      	mov	r1, r7
 800d50a:	2200      	movs	r2, #0
 800d50c:	f7f3 f87c 	bl	8000608 <__aeabi_dmul>
 800d510:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d512:	4606      	mov	r6, r0
 800d514:	460f      	mov	r7, r1
 800d516:	2b00      	cmp	r3, #0
 800d518:	d09f      	beq.n	800d45a <_strtod_l+0x98a>
 800d51a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d51e:	e7a0      	b.n	800d462 <_strtod_l+0x992>
 800d520:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d5a8 <_strtod_l+0xad8>
 800d524:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d528:	ec57 6b17 	vmov	r6, r7, d7
 800d52c:	e799      	b.n	800d462 <_strtod_l+0x992>
 800d52e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d532:	9b08      	ldr	r3, [sp, #32]
 800d534:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d1c1      	bne.n	800d4c0 <_strtod_l+0x9f0>
 800d53c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d540:	0d1b      	lsrs	r3, r3, #20
 800d542:	051b      	lsls	r3, r3, #20
 800d544:	429d      	cmp	r5, r3
 800d546:	d1bb      	bne.n	800d4c0 <_strtod_l+0x9f0>
 800d548:	4630      	mov	r0, r6
 800d54a:	4639      	mov	r1, r7
 800d54c:	f7f3 fba4 	bl	8000c98 <__aeabi_d2lz>
 800d550:	f7f3 f82c 	bl	80005ac <__aeabi_l2d>
 800d554:	4602      	mov	r2, r0
 800d556:	460b      	mov	r3, r1
 800d558:	4630      	mov	r0, r6
 800d55a:	4639      	mov	r1, r7
 800d55c:	f7f2 fe9c 	bl	8000298 <__aeabi_dsub>
 800d560:	460b      	mov	r3, r1
 800d562:	4602      	mov	r2, r0
 800d564:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d568:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d56c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d56e:	ea46 060a 	orr.w	r6, r6, sl
 800d572:	431e      	orrs	r6, r3
 800d574:	d06f      	beq.n	800d656 <_strtod_l+0xb86>
 800d576:	a30e      	add	r3, pc, #56	@ (adr r3, 800d5b0 <_strtod_l+0xae0>)
 800d578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57c:	f7f3 fab6 	bl	8000aec <__aeabi_dcmplt>
 800d580:	2800      	cmp	r0, #0
 800d582:	f47f accf 	bne.w	800cf24 <_strtod_l+0x454>
 800d586:	a30c      	add	r3, pc, #48	@ (adr r3, 800d5b8 <_strtod_l+0xae8>)
 800d588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d58c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d590:	f7f3 faca 	bl	8000b28 <__aeabi_dcmpgt>
 800d594:	2800      	cmp	r0, #0
 800d596:	d093      	beq.n	800d4c0 <_strtod_l+0x9f0>
 800d598:	e4c4      	b.n	800cf24 <_strtod_l+0x454>
 800d59a:	bf00      	nop
 800d59c:	f3af 8000 	nop.w
 800d5a0:	00000000 	.word	0x00000000
 800d5a4:	bff00000 	.word	0xbff00000
 800d5a8:	00000000 	.word	0x00000000
 800d5ac:	3ff00000 	.word	0x3ff00000
 800d5b0:	94a03595 	.word	0x94a03595
 800d5b4:	3fdfffff 	.word	0x3fdfffff
 800d5b8:	35afe535 	.word	0x35afe535
 800d5bc:	3fe00000 	.word	0x3fe00000
 800d5c0:	000fffff 	.word	0x000fffff
 800d5c4:	7ff00000 	.word	0x7ff00000
 800d5c8:	7fefffff 	.word	0x7fefffff
 800d5cc:	3ff00000 	.word	0x3ff00000
 800d5d0:	3fe00000 	.word	0x3fe00000
 800d5d4:	7fe00000 	.word	0x7fe00000
 800d5d8:	7c9fffff 	.word	0x7c9fffff
 800d5dc:	9b08      	ldr	r3, [sp, #32]
 800d5de:	b323      	cbz	r3, 800d62a <_strtod_l+0xb5a>
 800d5e0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d5e4:	d821      	bhi.n	800d62a <_strtod_l+0xb5a>
 800d5e6:	a328      	add	r3, pc, #160	@ (adr r3, 800d688 <_strtod_l+0xbb8>)
 800d5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ec:	4630      	mov	r0, r6
 800d5ee:	4639      	mov	r1, r7
 800d5f0:	f7f3 fa86 	bl	8000b00 <__aeabi_dcmple>
 800d5f4:	b1a0      	cbz	r0, 800d620 <_strtod_l+0xb50>
 800d5f6:	4639      	mov	r1, r7
 800d5f8:	4630      	mov	r0, r6
 800d5fa:	f7f3 fadd 	bl	8000bb8 <__aeabi_d2uiz>
 800d5fe:	2801      	cmp	r0, #1
 800d600:	bf38      	it	cc
 800d602:	2001      	movcc	r0, #1
 800d604:	f7f2 ff86 	bl	8000514 <__aeabi_ui2d>
 800d608:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d60a:	4606      	mov	r6, r0
 800d60c:	460f      	mov	r7, r1
 800d60e:	b9fb      	cbnz	r3, 800d650 <_strtod_l+0xb80>
 800d610:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d614:	9014      	str	r0, [sp, #80]	@ 0x50
 800d616:	9315      	str	r3, [sp, #84]	@ 0x54
 800d618:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d61c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d620:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d622:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d626:	1b5b      	subs	r3, r3, r5
 800d628:	9311      	str	r3, [sp, #68]	@ 0x44
 800d62a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d62e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d632:	f7ff f8f1 	bl	800c818 <__ulp>
 800d636:	4650      	mov	r0, sl
 800d638:	ec53 2b10 	vmov	r2, r3, d0
 800d63c:	4659      	mov	r1, fp
 800d63e:	f7f2 ffe3 	bl	8000608 <__aeabi_dmul>
 800d642:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d646:	f7f2 fe29 	bl	800029c <__adddf3>
 800d64a:	4682      	mov	sl, r0
 800d64c:	468b      	mov	fp, r1
 800d64e:	e770      	b.n	800d532 <_strtod_l+0xa62>
 800d650:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d654:	e7e0      	b.n	800d618 <_strtod_l+0xb48>
 800d656:	a30e      	add	r3, pc, #56	@ (adr r3, 800d690 <_strtod_l+0xbc0>)
 800d658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d65c:	f7f3 fa46 	bl	8000aec <__aeabi_dcmplt>
 800d660:	e798      	b.n	800d594 <_strtod_l+0xac4>
 800d662:	2300      	movs	r3, #0
 800d664:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d666:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d668:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d66a:	6013      	str	r3, [r2, #0]
 800d66c:	f7ff ba6d 	b.w	800cb4a <_strtod_l+0x7a>
 800d670:	2a65      	cmp	r2, #101	@ 0x65
 800d672:	f43f ab66 	beq.w	800cd42 <_strtod_l+0x272>
 800d676:	2a45      	cmp	r2, #69	@ 0x45
 800d678:	f43f ab63 	beq.w	800cd42 <_strtod_l+0x272>
 800d67c:	2301      	movs	r3, #1
 800d67e:	f7ff bb9e 	b.w	800cdbe <_strtod_l+0x2ee>
 800d682:	bf00      	nop
 800d684:	f3af 8000 	nop.w
 800d688:	ffc00000 	.word	0xffc00000
 800d68c:	41dfffff 	.word	0x41dfffff
 800d690:	94a03595 	.word	0x94a03595
 800d694:	3fcfffff 	.word	0x3fcfffff

0800d698 <_strtod_r>:
 800d698:	4b01      	ldr	r3, [pc, #4]	@ (800d6a0 <_strtod_r+0x8>)
 800d69a:	f7ff ba19 	b.w	800cad0 <_strtod_l>
 800d69e:	bf00      	nop
 800d6a0:	2000006c 	.word	0x2000006c

0800d6a4 <_strtol_l.constprop.0>:
 800d6a4:	2b24      	cmp	r3, #36	@ 0x24
 800d6a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6aa:	4686      	mov	lr, r0
 800d6ac:	4690      	mov	r8, r2
 800d6ae:	d801      	bhi.n	800d6b4 <_strtol_l.constprop.0+0x10>
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	d106      	bne.n	800d6c2 <_strtol_l.constprop.0+0x1e>
 800d6b4:	f7fd fdae 	bl	800b214 <__errno>
 800d6b8:	2316      	movs	r3, #22
 800d6ba:	6003      	str	r3, [r0, #0]
 800d6bc:	2000      	movs	r0, #0
 800d6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6c2:	4834      	ldr	r0, [pc, #208]	@ (800d794 <_strtol_l.constprop.0+0xf0>)
 800d6c4:	460d      	mov	r5, r1
 800d6c6:	462a      	mov	r2, r5
 800d6c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d6cc:	5d06      	ldrb	r6, [r0, r4]
 800d6ce:	f016 0608 	ands.w	r6, r6, #8
 800d6d2:	d1f8      	bne.n	800d6c6 <_strtol_l.constprop.0+0x22>
 800d6d4:	2c2d      	cmp	r4, #45	@ 0x2d
 800d6d6:	d12d      	bne.n	800d734 <_strtol_l.constprop.0+0x90>
 800d6d8:	782c      	ldrb	r4, [r5, #0]
 800d6da:	2601      	movs	r6, #1
 800d6dc:	1c95      	adds	r5, r2, #2
 800d6de:	f033 0210 	bics.w	r2, r3, #16
 800d6e2:	d109      	bne.n	800d6f8 <_strtol_l.constprop.0+0x54>
 800d6e4:	2c30      	cmp	r4, #48	@ 0x30
 800d6e6:	d12a      	bne.n	800d73e <_strtol_l.constprop.0+0x9a>
 800d6e8:	782a      	ldrb	r2, [r5, #0]
 800d6ea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d6ee:	2a58      	cmp	r2, #88	@ 0x58
 800d6f0:	d125      	bne.n	800d73e <_strtol_l.constprop.0+0x9a>
 800d6f2:	786c      	ldrb	r4, [r5, #1]
 800d6f4:	2310      	movs	r3, #16
 800d6f6:	3502      	adds	r5, #2
 800d6f8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d6fc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800d700:	2200      	movs	r2, #0
 800d702:	fbbc f9f3 	udiv	r9, ip, r3
 800d706:	4610      	mov	r0, r2
 800d708:	fb03 ca19 	mls	sl, r3, r9, ip
 800d70c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d710:	2f09      	cmp	r7, #9
 800d712:	d81b      	bhi.n	800d74c <_strtol_l.constprop.0+0xa8>
 800d714:	463c      	mov	r4, r7
 800d716:	42a3      	cmp	r3, r4
 800d718:	dd27      	ble.n	800d76a <_strtol_l.constprop.0+0xc6>
 800d71a:	1c57      	adds	r7, r2, #1
 800d71c:	d007      	beq.n	800d72e <_strtol_l.constprop.0+0x8a>
 800d71e:	4581      	cmp	r9, r0
 800d720:	d320      	bcc.n	800d764 <_strtol_l.constprop.0+0xc0>
 800d722:	d101      	bne.n	800d728 <_strtol_l.constprop.0+0x84>
 800d724:	45a2      	cmp	sl, r4
 800d726:	db1d      	blt.n	800d764 <_strtol_l.constprop.0+0xc0>
 800d728:	fb00 4003 	mla	r0, r0, r3, r4
 800d72c:	2201      	movs	r2, #1
 800d72e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d732:	e7eb      	b.n	800d70c <_strtol_l.constprop.0+0x68>
 800d734:	2c2b      	cmp	r4, #43	@ 0x2b
 800d736:	bf04      	itt	eq
 800d738:	782c      	ldrbeq	r4, [r5, #0]
 800d73a:	1c95      	addeq	r5, r2, #2
 800d73c:	e7cf      	b.n	800d6de <_strtol_l.constprop.0+0x3a>
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d1da      	bne.n	800d6f8 <_strtol_l.constprop.0+0x54>
 800d742:	2c30      	cmp	r4, #48	@ 0x30
 800d744:	bf0c      	ite	eq
 800d746:	2308      	moveq	r3, #8
 800d748:	230a      	movne	r3, #10
 800d74a:	e7d5      	b.n	800d6f8 <_strtol_l.constprop.0+0x54>
 800d74c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d750:	2f19      	cmp	r7, #25
 800d752:	d801      	bhi.n	800d758 <_strtol_l.constprop.0+0xb4>
 800d754:	3c37      	subs	r4, #55	@ 0x37
 800d756:	e7de      	b.n	800d716 <_strtol_l.constprop.0+0x72>
 800d758:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d75c:	2f19      	cmp	r7, #25
 800d75e:	d804      	bhi.n	800d76a <_strtol_l.constprop.0+0xc6>
 800d760:	3c57      	subs	r4, #87	@ 0x57
 800d762:	e7d8      	b.n	800d716 <_strtol_l.constprop.0+0x72>
 800d764:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d768:	e7e1      	b.n	800d72e <_strtol_l.constprop.0+0x8a>
 800d76a:	1c53      	adds	r3, r2, #1
 800d76c:	d108      	bne.n	800d780 <_strtol_l.constprop.0+0xdc>
 800d76e:	2322      	movs	r3, #34	@ 0x22
 800d770:	f8ce 3000 	str.w	r3, [lr]
 800d774:	4660      	mov	r0, ip
 800d776:	f1b8 0f00 	cmp.w	r8, #0
 800d77a:	d0a0      	beq.n	800d6be <_strtol_l.constprop.0+0x1a>
 800d77c:	1e69      	subs	r1, r5, #1
 800d77e:	e006      	b.n	800d78e <_strtol_l.constprop.0+0xea>
 800d780:	b106      	cbz	r6, 800d784 <_strtol_l.constprop.0+0xe0>
 800d782:	4240      	negs	r0, r0
 800d784:	f1b8 0f00 	cmp.w	r8, #0
 800d788:	d099      	beq.n	800d6be <_strtol_l.constprop.0+0x1a>
 800d78a:	2a00      	cmp	r2, #0
 800d78c:	d1f6      	bne.n	800d77c <_strtol_l.constprop.0+0xd8>
 800d78e:	f8c8 1000 	str.w	r1, [r8]
 800d792:	e794      	b.n	800d6be <_strtol_l.constprop.0+0x1a>
 800d794:	0800f429 	.word	0x0800f429

0800d798 <_strtol_r>:
 800d798:	f7ff bf84 	b.w	800d6a4 <_strtol_l.constprop.0>

0800d79c <__ssputs_r>:
 800d79c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7a0:	688e      	ldr	r6, [r1, #8]
 800d7a2:	461f      	mov	r7, r3
 800d7a4:	42be      	cmp	r6, r7
 800d7a6:	680b      	ldr	r3, [r1, #0]
 800d7a8:	4682      	mov	sl, r0
 800d7aa:	460c      	mov	r4, r1
 800d7ac:	4690      	mov	r8, r2
 800d7ae:	d82d      	bhi.n	800d80c <__ssputs_r+0x70>
 800d7b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d7b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d7b8:	d026      	beq.n	800d808 <__ssputs_r+0x6c>
 800d7ba:	6965      	ldr	r5, [r4, #20]
 800d7bc:	6909      	ldr	r1, [r1, #16]
 800d7be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d7c2:	eba3 0901 	sub.w	r9, r3, r1
 800d7c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d7ca:	1c7b      	adds	r3, r7, #1
 800d7cc:	444b      	add	r3, r9
 800d7ce:	106d      	asrs	r5, r5, #1
 800d7d0:	429d      	cmp	r5, r3
 800d7d2:	bf38      	it	cc
 800d7d4:	461d      	movcc	r5, r3
 800d7d6:	0553      	lsls	r3, r2, #21
 800d7d8:	d527      	bpl.n	800d82a <__ssputs_r+0x8e>
 800d7da:	4629      	mov	r1, r5
 800d7dc:	f7fe fc1c 	bl	800c018 <_malloc_r>
 800d7e0:	4606      	mov	r6, r0
 800d7e2:	b360      	cbz	r0, 800d83e <__ssputs_r+0xa2>
 800d7e4:	6921      	ldr	r1, [r4, #16]
 800d7e6:	464a      	mov	r2, r9
 800d7e8:	f7fd fd41 	bl	800b26e <memcpy>
 800d7ec:	89a3      	ldrh	r3, [r4, #12]
 800d7ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d7f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7f6:	81a3      	strh	r3, [r4, #12]
 800d7f8:	6126      	str	r6, [r4, #16]
 800d7fa:	6165      	str	r5, [r4, #20]
 800d7fc:	444e      	add	r6, r9
 800d7fe:	eba5 0509 	sub.w	r5, r5, r9
 800d802:	6026      	str	r6, [r4, #0]
 800d804:	60a5      	str	r5, [r4, #8]
 800d806:	463e      	mov	r6, r7
 800d808:	42be      	cmp	r6, r7
 800d80a:	d900      	bls.n	800d80e <__ssputs_r+0x72>
 800d80c:	463e      	mov	r6, r7
 800d80e:	6820      	ldr	r0, [r4, #0]
 800d810:	4632      	mov	r2, r6
 800d812:	4641      	mov	r1, r8
 800d814:	f7fd fc3b 	bl	800b08e <memmove>
 800d818:	68a3      	ldr	r3, [r4, #8]
 800d81a:	1b9b      	subs	r3, r3, r6
 800d81c:	60a3      	str	r3, [r4, #8]
 800d81e:	6823      	ldr	r3, [r4, #0]
 800d820:	4433      	add	r3, r6
 800d822:	6023      	str	r3, [r4, #0]
 800d824:	2000      	movs	r0, #0
 800d826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d82a:	462a      	mov	r2, r5
 800d82c:	f000 fd61 	bl	800e2f2 <_realloc_r>
 800d830:	4606      	mov	r6, r0
 800d832:	2800      	cmp	r0, #0
 800d834:	d1e0      	bne.n	800d7f8 <__ssputs_r+0x5c>
 800d836:	6921      	ldr	r1, [r4, #16]
 800d838:	4650      	mov	r0, sl
 800d83a:	f7fe fb79 	bl	800bf30 <_free_r>
 800d83e:	230c      	movs	r3, #12
 800d840:	f8ca 3000 	str.w	r3, [sl]
 800d844:	89a3      	ldrh	r3, [r4, #12]
 800d846:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d84a:	81a3      	strh	r3, [r4, #12]
 800d84c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d850:	e7e9      	b.n	800d826 <__ssputs_r+0x8a>
	...

0800d854 <_svfiprintf_r>:
 800d854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d858:	4698      	mov	r8, r3
 800d85a:	898b      	ldrh	r3, [r1, #12]
 800d85c:	061b      	lsls	r3, r3, #24
 800d85e:	b09d      	sub	sp, #116	@ 0x74
 800d860:	4607      	mov	r7, r0
 800d862:	460d      	mov	r5, r1
 800d864:	4614      	mov	r4, r2
 800d866:	d510      	bpl.n	800d88a <_svfiprintf_r+0x36>
 800d868:	690b      	ldr	r3, [r1, #16]
 800d86a:	b973      	cbnz	r3, 800d88a <_svfiprintf_r+0x36>
 800d86c:	2140      	movs	r1, #64	@ 0x40
 800d86e:	f7fe fbd3 	bl	800c018 <_malloc_r>
 800d872:	6028      	str	r0, [r5, #0]
 800d874:	6128      	str	r0, [r5, #16]
 800d876:	b930      	cbnz	r0, 800d886 <_svfiprintf_r+0x32>
 800d878:	230c      	movs	r3, #12
 800d87a:	603b      	str	r3, [r7, #0]
 800d87c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d880:	b01d      	add	sp, #116	@ 0x74
 800d882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d886:	2340      	movs	r3, #64	@ 0x40
 800d888:	616b      	str	r3, [r5, #20]
 800d88a:	2300      	movs	r3, #0
 800d88c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d88e:	2320      	movs	r3, #32
 800d890:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d894:	f8cd 800c 	str.w	r8, [sp, #12]
 800d898:	2330      	movs	r3, #48	@ 0x30
 800d89a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800da38 <_svfiprintf_r+0x1e4>
 800d89e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d8a2:	f04f 0901 	mov.w	r9, #1
 800d8a6:	4623      	mov	r3, r4
 800d8a8:	469a      	mov	sl, r3
 800d8aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8ae:	b10a      	cbz	r2, 800d8b4 <_svfiprintf_r+0x60>
 800d8b0:	2a25      	cmp	r2, #37	@ 0x25
 800d8b2:	d1f9      	bne.n	800d8a8 <_svfiprintf_r+0x54>
 800d8b4:	ebba 0b04 	subs.w	fp, sl, r4
 800d8b8:	d00b      	beq.n	800d8d2 <_svfiprintf_r+0x7e>
 800d8ba:	465b      	mov	r3, fp
 800d8bc:	4622      	mov	r2, r4
 800d8be:	4629      	mov	r1, r5
 800d8c0:	4638      	mov	r0, r7
 800d8c2:	f7ff ff6b 	bl	800d79c <__ssputs_r>
 800d8c6:	3001      	adds	r0, #1
 800d8c8:	f000 80a7 	beq.w	800da1a <_svfiprintf_r+0x1c6>
 800d8cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d8ce:	445a      	add	r2, fp
 800d8d0:	9209      	str	r2, [sp, #36]	@ 0x24
 800d8d2:	f89a 3000 	ldrb.w	r3, [sl]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	f000 809f 	beq.w	800da1a <_svfiprintf_r+0x1c6>
 800d8dc:	2300      	movs	r3, #0
 800d8de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d8e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8e6:	f10a 0a01 	add.w	sl, sl, #1
 800d8ea:	9304      	str	r3, [sp, #16]
 800d8ec:	9307      	str	r3, [sp, #28]
 800d8ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d8f2:	931a      	str	r3, [sp, #104]	@ 0x68
 800d8f4:	4654      	mov	r4, sl
 800d8f6:	2205      	movs	r2, #5
 800d8f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8fc:	484e      	ldr	r0, [pc, #312]	@ (800da38 <_svfiprintf_r+0x1e4>)
 800d8fe:	f7f2 fc6f 	bl	80001e0 <memchr>
 800d902:	9a04      	ldr	r2, [sp, #16]
 800d904:	b9d8      	cbnz	r0, 800d93e <_svfiprintf_r+0xea>
 800d906:	06d0      	lsls	r0, r2, #27
 800d908:	bf44      	itt	mi
 800d90a:	2320      	movmi	r3, #32
 800d90c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d910:	0711      	lsls	r1, r2, #28
 800d912:	bf44      	itt	mi
 800d914:	232b      	movmi	r3, #43	@ 0x2b
 800d916:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d91a:	f89a 3000 	ldrb.w	r3, [sl]
 800d91e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d920:	d015      	beq.n	800d94e <_svfiprintf_r+0xfa>
 800d922:	9a07      	ldr	r2, [sp, #28]
 800d924:	4654      	mov	r4, sl
 800d926:	2000      	movs	r0, #0
 800d928:	f04f 0c0a 	mov.w	ip, #10
 800d92c:	4621      	mov	r1, r4
 800d92e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d932:	3b30      	subs	r3, #48	@ 0x30
 800d934:	2b09      	cmp	r3, #9
 800d936:	d94b      	bls.n	800d9d0 <_svfiprintf_r+0x17c>
 800d938:	b1b0      	cbz	r0, 800d968 <_svfiprintf_r+0x114>
 800d93a:	9207      	str	r2, [sp, #28]
 800d93c:	e014      	b.n	800d968 <_svfiprintf_r+0x114>
 800d93e:	eba0 0308 	sub.w	r3, r0, r8
 800d942:	fa09 f303 	lsl.w	r3, r9, r3
 800d946:	4313      	orrs	r3, r2
 800d948:	9304      	str	r3, [sp, #16]
 800d94a:	46a2      	mov	sl, r4
 800d94c:	e7d2      	b.n	800d8f4 <_svfiprintf_r+0xa0>
 800d94e:	9b03      	ldr	r3, [sp, #12]
 800d950:	1d19      	adds	r1, r3, #4
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	9103      	str	r1, [sp, #12]
 800d956:	2b00      	cmp	r3, #0
 800d958:	bfbb      	ittet	lt
 800d95a:	425b      	neglt	r3, r3
 800d95c:	f042 0202 	orrlt.w	r2, r2, #2
 800d960:	9307      	strge	r3, [sp, #28]
 800d962:	9307      	strlt	r3, [sp, #28]
 800d964:	bfb8      	it	lt
 800d966:	9204      	strlt	r2, [sp, #16]
 800d968:	7823      	ldrb	r3, [r4, #0]
 800d96a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d96c:	d10a      	bne.n	800d984 <_svfiprintf_r+0x130>
 800d96e:	7863      	ldrb	r3, [r4, #1]
 800d970:	2b2a      	cmp	r3, #42	@ 0x2a
 800d972:	d132      	bne.n	800d9da <_svfiprintf_r+0x186>
 800d974:	9b03      	ldr	r3, [sp, #12]
 800d976:	1d1a      	adds	r2, r3, #4
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	9203      	str	r2, [sp, #12]
 800d97c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d980:	3402      	adds	r4, #2
 800d982:	9305      	str	r3, [sp, #20]
 800d984:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800da48 <_svfiprintf_r+0x1f4>
 800d988:	7821      	ldrb	r1, [r4, #0]
 800d98a:	2203      	movs	r2, #3
 800d98c:	4650      	mov	r0, sl
 800d98e:	f7f2 fc27 	bl	80001e0 <memchr>
 800d992:	b138      	cbz	r0, 800d9a4 <_svfiprintf_r+0x150>
 800d994:	9b04      	ldr	r3, [sp, #16]
 800d996:	eba0 000a 	sub.w	r0, r0, sl
 800d99a:	2240      	movs	r2, #64	@ 0x40
 800d99c:	4082      	lsls	r2, r0
 800d99e:	4313      	orrs	r3, r2
 800d9a0:	3401      	adds	r4, #1
 800d9a2:	9304      	str	r3, [sp, #16]
 800d9a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9a8:	4824      	ldr	r0, [pc, #144]	@ (800da3c <_svfiprintf_r+0x1e8>)
 800d9aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d9ae:	2206      	movs	r2, #6
 800d9b0:	f7f2 fc16 	bl	80001e0 <memchr>
 800d9b4:	2800      	cmp	r0, #0
 800d9b6:	d036      	beq.n	800da26 <_svfiprintf_r+0x1d2>
 800d9b8:	4b21      	ldr	r3, [pc, #132]	@ (800da40 <_svfiprintf_r+0x1ec>)
 800d9ba:	bb1b      	cbnz	r3, 800da04 <_svfiprintf_r+0x1b0>
 800d9bc:	9b03      	ldr	r3, [sp, #12]
 800d9be:	3307      	adds	r3, #7
 800d9c0:	f023 0307 	bic.w	r3, r3, #7
 800d9c4:	3308      	adds	r3, #8
 800d9c6:	9303      	str	r3, [sp, #12]
 800d9c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9ca:	4433      	add	r3, r6
 800d9cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9ce:	e76a      	b.n	800d8a6 <_svfiprintf_r+0x52>
 800d9d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9d4:	460c      	mov	r4, r1
 800d9d6:	2001      	movs	r0, #1
 800d9d8:	e7a8      	b.n	800d92c <_svfiprintf_r+0xd8>
 800d9da:	2300      	movs	r3, #0
 800d9dc:	3401      	adds	r4, #1
 800d9de:	9305      	str	r3, [sp, #20]
 800d9e0:	4619      	mov	r1, r3
 800d9e2:	f04f 0c0a 	mov.w	ip, #10
 800d9e6:	4620      	mov	r0, r4
 800d9e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9ec:	3a30      	subs	r2, #48	@ 0x30
 800d9ee:	2a09      	cmp	r2, #9
 800d9f0:	d903      	bls.n	800d9fa <_svfiprintf_r+0x1a6>
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d0c6      	beq.n	800d984 <_svfiprintf_r+0x130>
 800d9f6:	9105      	str	r1, [sp, #20]
 800d9f8:	e7c4      	b.n	800d984 <_svfiprintf_r+0x130>
 800d9fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800d9fe:	4604      	mov	r4, r0
 800da00:	2301      	movs	r3, #1
 800da02:	e7f0      	b.n	800d9e6 <_svfiprintf_r+0x192>
 800da04:	ab03      	add	r3, sp, #12
 800da06:	9300      	str	r3, [sp, #0]
 800da08:	462a      	mov	r2, r5
 800da0a:	4b0e      	ldr	r3, [pc, #56]	@ (800da44 <_svfiprintf_r+0x1f0>)
 800da0c:	a904      	add	r1, sp, #16
 800da0e:	4638      	mov	r0, r7
 800da10:	f7fc fc4c 	bl	800a2ac <_printf_float>
 800da14:	1c42      	adds	r2, r0, #1
 800da16:	4606      	mov	r6, r0
 800da18:	d1d6      	bne.n	800d9c8 <_svfiprintf_r+0x174>
 800da1a:	89ab      	ldrh	r3, [r5, #12]
 800da1c:	065b      	lsls	r3, r3, #25
 800da1e:	f53f af2d 	bmi.w	800d87c <_svfiprintf_r+0x28>
 800da22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800da24:	e72c      	b.n	800d880 <_svfiprintf_r+0x2c>
 800da26:	ab03      	add	r3, sp, #12
 800da28:	9300      	str	r3, [sp, #0]
 800da2a:	462a      	mov	r2, r5
 800da2c:	4b05      	ldr	r3, [pc, #20]	@ (800da44 <_svfiprintf_r+0x1f0>)
 800da2e:	a904      	add	r1, sp, #16
 800da30:	4638      	mov	r0, r7
 800da32:	f7fc fed3 	bl	800a7dc <_printf_i>
 800da36:	e7ed      	b.n	800da14 <_svfiprintf_r+0x1c0>
 800da38:	0800f529 	.word	0x0800f529
 800da3c:	0800f533 	.word	0x0800f533
 800da40:	0800a2ad 	.word	0x0800a2ad
 800da44:	0800d79d 	.word	0x0800d79d
 800da48:	0800f52f 	.word	0x0800f52f

0800da4c <__sflush_r>:
 800da4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800da50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da54:	0716      	lsls	r6, r2, #28
 800da56:	4605      	mov	r5, r0
 800da58:	460c      	mov	r4, r1
 800da5a:	d454      	bmi.n	800db06 <__sflush_r+0xba>
 800da5c:	684b      	ldr	r3, [r1, #4]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	dc02      	bgt.n	800da68 <__sflush_r+0x1c>
 800da62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800da64:	2b00      	cmp	r3, #0
 800da66:	dd48      	ble.n	800dafa <__sflush_r+0xae>
 800da68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800da6a:	2e00      	cmp	r6, #0
 800da6c:	d045      	beq.n	800dafa <__sflush_r+0xae>
 800da6e:	2300      	movs	r3, #0
 800da70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800da74:	682f      	ldr	r7, [r5, #0]
 800da76:	6a21      	ldr	r1, [r4, #32]
 800da78:	602b      	str	r3, [r5, #0]
 800da7a:	d030      	beq.n	800dade <__sflush_r+0x92>
 800da7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800da7e:	89a3      	ldrh	r3, [r4, #12]
 800da80:	0759      	lsls	r1, r3, #29
 800da82:	d505      	bpl.n	800da90 <__sflush_r+0x44>
 800da84:	6863      	ldr	r3, [r4, #4]
 800da86:	1ad2      	subs	r2, r2, r3
 800da88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800da8a:	b10b      	cbz	r3, 800da90 <__sflush_r+0x44>
 800da8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800da8e:	1ad2      	subs	r2, r2, r3
 800da90:	2300      	movs	r3, #0
 800da92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800da94:	6a21      	ldr	r1, [r4, #32]
 800da96:	4628      	mov	r0, r5
 800da98:	47b0      	blx	r6
 800da9a:	1c43      	adds	r3, r0, #1
 800da9c:	89a3      	ldrh	r3, [r4, #12]
 800da9e:	d106      	bne.n	800daae <__sflush_r+0x62>
 800daa0:	6829      	ldr	r1, [r5, #0]
 800daa2:	291d      	cmp	r1, #29
 800daa4:	d82b      	bhi.n	800dafe <__sflush_r+0xb2>
 800daa6:	4a2a      	ldr	r2, [pc, #168]	@ (800db50 <__sflush_r+0x104>)
 800daa8:	410a      	asrs	r2, r1
 800daaa:	07d6      	lsls	r6, r2, #31
 800daac:	d427      	bmi.n	800dafe <__sflush_r+0xb2>
 800daae:	2200      	movs	r2, #0
 800dab0:	6062      	str	r2, [r4, #4]
 800dab2:	04d9      	lsls	r1, r3, #19
 800dab4:	6922      	ldr	r2, [r4, #16]
 800dab6:	6022      	str	r2, [r4, #0]
 800dab8:	d504      	bpl.n	800dac4 <__sflush_r+0x78>
 800daba:	1c42      	adds	r2, r0, #1
 800dabc:	d101      	bne.n	800dac2 <__sflush_r+0x76>
 800dabe:	682b      	ldr	r3, [r5, #0]
 800dac0:	b903      	cbnz	r3, 800dac4 <__sflush_r+0x78>
 800dac2:	6560      	str	r0, [r4, #84]	@ 0x54
 800dac4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dac6:	602f      	str	r7, [r5, #0]
 800dac8:	b1b9      	cbz	r1, 800dafa <__sflush_r+0xae>
 800daca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dace:	4299      	cmp	r1, r3
 800dad0:	d002      	beq.n	800dad8 <__sflush_r+0x8c>
 800dad2:	4628      	mov	r0, r5
 800dad4:	f7fe fa2c 	bl	800bf30 <_free_r>
 800dad8:	2300      	movs	r3, #0
 800dada:	6363      	str	r3, [r4, #52]	@ 0x34
 800dadc:	e00d      	b.n	800dafa <__sflush_r+0xae>
 800dade:	2301      	movs	r3, #1
 800dae0:	4628      	mov	r0, r5
 800dae2:	47b0      	blx	r6
 800dae4:	4602      	mov	r2, r0
 800dae6:	1c50      	adds	r0, r2, #1
 800dae8:	d1c9      	bne.n	800da7e <__sflush_r+0x32>
 800daea:	682b      	ldr	r3, [r5, #0]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d0c6      	beq.n	800da7e <__sflush_r+0x32>
 800daf0:	2b1d      	cmp	r3, #29
 800daf2:	d001      	beq.n	800daf8 <__sflush_r+0xac>
 800daf4:	2b16      	cmp	r3, #22
 800daf6:	d11e      	bne.n	800db36 <__sflush_r+0xea>
 800daf8:	602f      	str	r7, [r5, #0]
 800dafa:	2000      	movs	r0, #0
 800dafc:	e022      	b.n	800db44 <__sflush_r+0xf8>
 800dafe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db02:	b21b      	sxth	r3, r3
 800db04:	e01b      	b.n	800db3e <__sflush_r+0xf2>
 800db06:	690f      	ldr	r7, [r1, #16]
 800db08:	2f00      	cmp	r7, #0
 800db0a:	d0f6      	beq.n	800dafa <__sflush_r+0xae>
 800db0c:	0793      	lsls	r3, r2, #30
 800db0e:	680e      	ldr	r6, [r1, #0]
 800db10:	bf08      	it	eq
 800db12:	694b      	ldreq	r3, [r1, #20]
 800db14:	600f      	str	r7, [r1, #0]
 800db16:	bf18      	it	ne
 800db18:	2300      	movne	r3, #0
 800db1a:	eba6 0807 	sub.w	r8, r6, r7
 800db1e:	608b      	str	r3, [r1, #8]
 800db20:	f1b8 0f00 	cmp.w	r8, #0
 800db24:	dde9      	ble.n	800dafa <__sflush_r+0xae>
 800db26:	6a21      	ldr	r1, [r4, #32]
 800db28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800db2a:	4643      	mov	r3, r8
 800db2c:	463a      	mov	r2, r7
 800db2e:	4628      	mov	r0, r5
 800db30:	47b0      	blx	r6
 800db32:	2800      	cmp	r0, #0
 800db34:	dc08      	bgt.n	800db48 <__sflush_r+0xfc>
 800db36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db3e:	81a3      	strh	r3, [r4, #12]
 800db40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800db44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db48:	4407      	add	r7, r0
 800db4a:	eba8 0800 	sub.w	r8, r8, r0
 800db4e:	e7e7      	b.n	800db20 <__sflush_r+0xd4>
 800db50:	dfbffffe 	.word	0xdfbffffe

0800db54 <_fflush_r>:
 800db54:	b538      	push	{r3, r4, r5, lr}
 800db56:	690b      	ldr	r3, [r1, #16]
 800db58:	4605      	mov	r5, r0
 800db5a:	460c      	mov	r4, r1
 800db5c:	b913      	cbnz	r3, 800db64 <_fflush_r+0x10>
 800db5e:	2500      	movs	r5, #0
 800db60:	4628      	mov	r0, r5
 800db62:	bd38      	pop	{r3, r4, r5, pc}
 800db64:	b118      	cbz	r0, 800db6e <_fflush_r+0x1a>
 800db66:	6a03      	ldr	r3, [r0, #32]
 800db68:	b90b      	cbnz	r3, 800db6e <_fflush_r+0x1a>
 800db6a:	f7fd f9f7 	bl	800af5c <__sinit>
 800db6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d0f3      	beq.n	800db5e <_fflush_r+0xa>
 800db76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800db78:	07d0      	lsls	r0, r2, #31
 800db7a:	d404      	bmi.n	800db86 <_fflush_r+0x32>
 800db7c:	0599      	lsls	r1, r3, #22
 800db7e:	d402      	bmi.n	800db86 <_fflush_r+0x32>
 800db80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db82:	f7fd fb72 	bl	800b26a <__retarget_lock_acquire_recursive>
 800db86:	4628      	mov	r0, r5
 800db88:	4621      	mov	r1, r4
 800db8a:	f7ff ff5f 	bl	800da4c <__sflush_r>
 800db8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800db90:	07da      	lsls	r2, r3, #31
 800db92:	4605      	mov	r5, r0
 800db94:	d4e4      	bmi.n	800db60 <_fflush_r+0xc>
 800db96:	89a3      	ldrh	r3, [r4, #12]
 800db98:	059b      	lsls	r3, r3, #22
 800db9a:	d4e1      	bmi.n	800db60 <_fflush_r+0xc>
 800db9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db9e:	f7fd fb65 	bl	800b26c <__retarget_lock_release_recursive>
 800dba2:	e7dd      	b.n	800db60 <_fflush_r+0xc>

0800dba4 <strncmp>:
 800dba4:	b510      	push	{r4, lr}
 800dba6:	b16a      	cbz	r2, 800dbc4 <strncmp+0x20>
 800dba8:	3901      	subs	r1, #1
 800dbaa:	1884      	adds	r4, r0, r2
 800dbac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbb0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	d103      	bne.n	800dbc0 <strncmp+0x1c>
 800dbb8:	42a0      	cmp	r0, r4
 800dbba:	d001      	beq.n	800dbc0 <strncmp+0x1c>
 800dbbc:	2a00      	cmp	r2, #0
 800dbbe:	d1f5      	bne.n	800dbac <strncmp+0x8>
 800dbc0:	1ad0      	subs	r0, r2, r3
 800dbc2:	bd10      	pop	{r4, pc}
 800dbc4:	4610      	mov	r0, r2
 800dbc6:	e7fc      	b.n	800dbc2 <strncmp+0x1e>

0800dbc8 <_sbrk_r>:
 800dbc8:	b538      	push	{r3, r4, r5, lr}
 800dbca:	4d06      	ldr	r5, [pc, #24]	@ (800dbe4 <_sbrk_r+0x1c>)
 800dbcc:	2300      	movs	r3, #0
 800dbce:	4604      	mov	r4, r0
 800dbd0:	4608      	mov	r0, r1
 800dbd2:	602b      	str	r3, [r5, #0]
 800dbd4:	f7f4 f80e 	bl	8001bf4 <_sbrk>
 800dbd8:	1c43      	adds	r3, r0, #1
 800dbda:	d102      	bne.n	800dbe2 <_sbrk_r+0x1a>
 800dbdc:	682b      	ldr	r3, [r5, #0]
 800dbde:	b103      	cbz	r3, 800dbe2 <_sbrk_r+0x1a>
 800dbe0:	6023      	str	r3, [r4, #0]
 800dbe2:	bd38      	pop	{r3, r4, r5, pc}
 800dbe4:	2000215c 	.word	0x2000215c

0800dbe8 <nan>:
 800dbe8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800dbf0 <nan+0x8>
 800dbec:	4770      	bx	lr
 800dbee:	bf00      	nop
 800dbf0:	00000000 	.word	0x00000000
 800dbf4:	7ff80000 	.word	0x7ff80000

0800dbf8 <__assert_func>:
 800dbf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dbfa:	4614      	mov	r4, r2
 800dbfc:	461a      	mov	r2, r3
 800dbfe:	4b09      	ldr	r3, [pc, #36]	@ (800dc24 <__assert_func+0x2c>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	4605      	mov	r5, r0
 800dc04:	68d8      	ldr	r0, [r3, #12]
 800dc06:	b954      	cbnz	r4, 800dc1e <__assert_func+0x26>
 800dc08:	4b07      	ldr	r3, [pc, #28]	@ (800dc28 <__assert_func+0x30>)
 800dc0a:	461c      	mov	r4, r3
 800dc0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dc10:	9100      	str	r1, [sp, #0]
 800dc12:	462b      	mov	r3, r5
 800dc14:	4905      	ldr	r1, [pc, #20]	@ (800dc2c <__assert_func+0x34>)
 800dc16:	f000 fba7 	bl	800e368 <fiprintf>
 800dc1a:	f000 fbb7 	bl	800e38c <abort>
 800dc1e:	4b04      	ldr	r3, [pc, #16]	@ (800dc30 <__assert_func+0x38>)
 800dc20:	e7f4      	b.n	800dc0c <__assert_func+0x14>
 800dc22:	bf00      	nop
 800dc24:	2000001c 	.word	0x2000001c
 800dc28:	0800f57d 	.word	0x0800f57d
 800dc2c:	0800f54f 	.word	0x0800f54f
 800dc30:	0800f542 	.word	0x0800f542

0800dc34 <_calloc_r>:
 800dc34:	b570      	push	{r4, r5, r6, lr}
 800dc36:	fba1 5402 	umull	r5, r4, r1, r2
 800dc3a:	b93c      	cbnz	r4, 800dc4c <_calloc_r+0x18>
 800dc3c:	4629      	mov	r1, r5
 800dc3e:	f7fe f9eb 	bl	800c018 <_malloc_r>
 800dc42:	4606      	mov	r6, r0
 800dc44:	b928      	cbnz	r0, 800dc52 <_calloc_r+0x1e>
 800dc46:	2600      	movs	r6, #0
 800dc48:	4630      	mov	r0, r6
 800dc4a:	bd70      	pop	{r4, r5, r6, pc}
 800dc4c:	220c      	movs	r2, #12
 800dc4e:	6002      	str	r2, [r0, #0]
 800dc50:	e7f9      	b.n	800dc46 <_calloc_r+0x12>
 800dc52:	462a      	mov	r2, r5
 800dc54:	4621      	mov	r1, r4
 800dc56:	f7fd fa34 	bl	800b0c2 <memset>
 800dc5a:	e7f5      	b.n	800dc48 <_calloc_r+0x14>

0800dc5c <rshift>:
 800dc5c:	6903      	ldr	r3, [r0, #16]
 800dc5e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dc62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc66:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dc6a:	f100 0414 	add.w	r4, r0, #20
 800dc6e:	dd45      	ble.n	800dcfc <rshift+0xa0>
 800dc70:	f011 011f 	ands.w	r1, r1, #31
 800dc74:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dc78:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dc7c:	d10c      	bne.n	800dc98 <rshift+0x3c>
 800dc7e:	f100 0710 	add.w	r7, r0, #16
 800dc82:	4629      	mov	r1, r5
 800dc84:	42b1      	cmp	r1, r6
 800dc86:	d334      	bcc.n	800dcf2 <rshift+0x96>
 800dc88:	1a9b      	subs	r3, r3, r2
 800dc8a:	009b      	lsls	r3, r3, #2
 800dc8c:	1eea      	subs	r2, r5, #3
 800dc8e:	4296      	cmp	r6, r2
 800dc90:	bf38      	it	cc
 800dc92:	2300      	movcc	r3, #0
 800dc94:	4423      	add	r3, r4
 800dc96:	e015      	b.n	800dcc4 <rshift+0x68>
 800dc98:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dc9c:	f1c1 0820 	rsb	r8, r1, #32
 800dca0:	40cf      	lsrs	r7, r1
 800dca2:	f105 0e04 	add.w	lr, r5, #4
 800dca6:	46a1      	mov	r9, r4
 800dca8:	4576      	cmp	r6, lr
 800dcaa:	46f4      	mov	ip, lr
 800dcac:	d815      	bhi.n	800dcda <rshift+0x7e>
 800dcae:	1a9a      	subs	r2, r3, r2
 800dcb0:	0092      	lsls	r2, r2, #2
 800dcb2:	3a04      	subs	r2, #4
 800dcb4:	3501      	adds	r5, #1
 800dcb6:	42ae      	cmp	r6, r5
 800dcb8:	bf38      	it	cc
 800dcba:	2200      	movcc	r2, #0
 800dcbc:	18a3      	adds	r3, r4, r2
 800dcbe:	50a7      	str	r7, [r4, r2]
 800dcc0:	b107      	cbz	r7, 800dcc4 <rshift+0x68>
 800dcc2:	3304      	adds	r3, #4
 800dcc4:	1b1a      	subs	r2, r3, r4
 800dcc6:	42a3      	cmp	r3, r4
 800dcc8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dccc:	bf08      	it	eq
 800dcce:	2300      	moveq	r3, #0
 800dcd0:	6102      	str	r2, [r0, #16]
 800dcd2:	bf08      	it	eq
 800dcd4:	6143      	streq	r3, [r0, #20]
 800dcd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dcda:	f8dc c000 	ldr.w	ip, [ip]
 800dcde:	fa0c fc08 	lsl.w	ip, ip, r8
 800dce2:	ea4c 0707 	orr.w	r7, ip, r7
 800dce6:	f849 7b04 	str.w	r7, [r9], #4
 800dcea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dcee:	40cf      	lsrs	r7, r1
 800dcf0:	e7da      	b.n	800dca8 <rshift+0x4c>
 800dcf2:	f851 cb04 	ldr.w	ip, [r1], #4
 800dcf6:	f847 cf04 	str.w	ip, [r7, #4]!
 800dcfa:	e7c3      	b.n	800dc84 <rshift+0x28>
 800dcfc:	4623      	mov	r3, r4
 800dcfe:	e7e1      	b.n	800dcc4 <rshift+0x68>

0800dd00 <__hexdig_fun>:
 800dd00:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800dd04:	2b09      	cmp	r3, #9
 800dd06:	d802      	bhi.n	800dd0e <__hexdig_fun+0xe>
 800dd08:	3820      	subs	r0, #32
 800dd0a:	b2c0      	uxtb	r0, r0
 800dd0c:	4770      	bx	lr
 800dd0e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800dd12:	2b05      	cmp	r3, #5
 800dd14:	d801      	bhi.n	800dd1a <__hexdig_fun+0x1a>
 800dd16:	3847      	subs	r0, #71	@ 0x47
 800dd18:	e7f7      	b.n	800dd0a <__hexdig_fun+0xa>
 800dd1a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800dd1e:	2b05      	cmp	r3, #5
 800dd20:	d801      	bhi.n	800dd26 <__hexdig_fun+0x26>
 800dd22:	3827      	subs	r0, #39	@ 0x27
 800dd24:	e7f1      	b.n	800dd0a <__hexdig_fun+0xa>
 800dd26:	2000      	movs	r0, #0
 800dd28:	4770      	bx	lr
	...

0800dd2c <__gethex>:
 800dd2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd30:	b085      	sub	sp, #20
 800dd32:	468a      	mov	sl, r1
 800dd34:	9302      	str	r3, [sp, #8]
 800dd36:	680b      	ldr	r3, [r1, #0]
 800dd38:	9001      	str	r0, [sp, #4]
 800dd3a:	4690      	mov	r8, r2
 800dd3c:	1c9c      	adds	r4, r3, #2
 800dd3e:	46a1      	mov	r9, r4
 800dd40:	f814 0b01 	ldrb.w	r0, [r4], #1
 800dd44:	2830      	cmp	r0, #48	@ 0x30
 800dd46:	d0fa      	beq.n	800dd3e <__gethex+0x12>
 800dd48:	eba9 0303 	sub.w	r3, r9, r3
 800dd4c:	f1a3 0b02 	sub.w	fp, r3, #2
 800dd50:	f7ff ffd6 	bl	800dd00 <__hexdig_fun>
 800dd54:	4605      	mov	r5, r0
 800dd56:	2800      	cmp	r0, #0
 800dd58:	d168      	bne.n	800de2c <__gethex+0x100>
 800dd5a:	49a0      	ldr	r1, [pc, #640]	@ (800dfdc <__gethex+0x2b0>)
 800dd5c:	2201      	movs	r2, #1
 800dd5e:	4648      	mov	r0, r9
 800dd60:	f7ff ff20 	bl	800dba4 <strncmp>
 800dd64:	4607      	mov	r7, r0
 800dd66:	2800      	cmp	r0, #0
 800dd68:	d167      	bne.n	800de3a <__gethex+0x10e>
 800dd6a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800dd6e:	4626      	mov	r6, r4
 800dd70:	f7ff ffc6 	bl	800dd00 <__hexdig_fun>
 800dd74:	2800      	cmp	r0, #0
 800dd76:	d062      	beq.n	800de3e <__gethex+0x112>
 800dd78:	4623      	mov	r3, r4
 800dd7a:	7818      	ldrb	r0, [r3, #0]
 800dd7c:	2830      	cmp	r0, #48	@ 0x30
 800dd7e:	4699      	mov	r9, r3
 800dd80:	f103 0301 	add.w	r3, r3, #1
 800dd84:	d0f9      	beq.n	800dd7a <__gethex+0x4e>
 800dd86:	f7ff ffbb 	bl	800dd00 <__hexdig_fun>
 800dd8a:	fab0 f580 	clz	r5, r0
 800dd8e:	096d      	lsrs	r5, r5, #5
 800dd90:	f04f 0b01 	mov.w	fp, #1
 800dd94:	464a      	mov	r2, r9
 800dd96:	4616      	mov	r6, r2
 800dd98:	3201      	adds	r2, #1
 800dd9a:	7830      	ldrb	r0, [r6, #0]
 800dd9c:	f7ff ffb0 	bl	800dd00 <__hexdig_fun>
 800dda0:	2800      	cmp	r0, #0
 800dda2:	d1f8      	bne.n	800dd96 <__gethex+0x6a>
 800dda4:	498d      	ldr	r1, [pc, #564]	@ (800dfdc <__gethex+0x2b0>)
 800dda6:	2201      	movs	r2, #1
 800dda8:	4630      	mov	r0, r6
 800ddaa:	f7ff fefb 	bl	800dba4 <strncmp>
 800ddae:	2800      	cmp	r0, #0
 800ddb0:	d13f      	bne.n	800de32 <__gethex+0x106>
 800ddb2:	b944      	cbnz	r4, 800ddc6 <__gethex+0x9a>
 800ddb4:	1c74      	adds	r4, r6, #1
 800ddb6:	4622      	mov	r2, r4
 800ddb8:	4616      	mov	r6, r2
 800ddba:	3201      	adds	r2, #1
 800ddbc:	7830      	ldrb	r0, [r6, #0]
 800ddbe:	f7ff ff9f 	bl	800dd00 <__hexdig_fun>
 800ddc2:	2800      	cmp	r0, #0
 800ddc4:	d1f8      	bne.n	800ddb8 <__gethex+0x8c>
 800ddc6:	1ba4      	subs	r4, r4, r6
 800ddc8:	00a7      	lsls	r7, r4, #2
 800ddca:	7833      	ldrb	r3, [r6, #0]
 800ddcc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ddd0:	2b50      	cmp	r3, #80	@ 0x50
 800ddd2:	d13e      	bne.n	800de52 <__gethex+0x126>
 800ddd4:	7873      	ldrb	r3, [r6, #1]
 800ddd6:	2b2b      	cmp	r3, #43	@ 0x2b
 800ddd8:	d033      	beq.n	800de42 <__gethex+0x116>
 800ddda:	2b2d      	cmp	r3, #45	@ 0x2d
 800dddc:	d034      	beq.n	800de48 <__gethex+0x11c>
 800ddde:	1c71      	adds	r1, r6, #1
 800dde0:	2400      	movs	r4, #0
 800dde2:	7808      	ldrb	r0, [r1, #0]
 800dde4:	f7ff ff8c 	bl	800dd00 <__hexdig_fun>
 800dde8:	1e43      	subs	r3, r0, #1
 800ddea:	b2db      	uxtb	r3, r3
 800ddec:	2b18      	cmp	r3, #24
 800ddee:	d830      	bhi.n	800de52 <__gethex+0x126>
 800ddf0:	f1a0 0210 	sub.w	r2, r0, #16
 800ddf4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ddf8:	f7ff ff82 	bl	800dd00 <__hexdig_fun>
 800ddfc:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800de00:	fa5f fc8c 	uxtb.w	ip, ip
 800de04:	f1bc 0f18 	cmp.w	ip, #24
 800de08:	f04f 030a 	mov.w	r3, #10
 800de0c:	d91e      	bls.n	800de4c <__gethex+0x120>
 800de0e:	b104      	cbz	r4, 800de12 <__gethex+0xe6>
 800de10:	4252      	negs	r2, r2
 800de12:	4417      	add	r7, r2
 800de14:	f8ca 1000 	str.w	r1, [sl]
 800de18:	b1ed      	cbz	r5, 800de56 <__gethex+0x12a>
 800de1a:	f1bb 0f00 	cmp.w	fp, #0
 800de1e:	bf0c      	ite	eq
 800de20:	2506      	moveq	r5, #6
 800de22:	2500      	movne	r5, #0
 800de24:	4628      	mov	r0, r5
 800de26:	b005      	add	sp, #20
 800de28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de2c:	2500      	movs	r5, #0
 800de2e:	462c      	mov	r4, r5
 800de30:	e7b0      	b.n	800dd94 <__gethex+0x68>
 800de32:	2c00      	cmp	r4, #0
 800de34:	d1c7      	bne.n	800ddc6 <__gethex+0x9a>
 800de36:	4627      	mov	r7, r4
 800de38:	e7c7      	b.n	800ddca <__gethex+0x9e>
 800de3a:	464e      	mov	r6, r9
 800de3c:	462f      	mov	r7, r5
 800de3e:	2501      	movs	r5, #1
 800de40:	e7c3      	b.n	800ddca <__gethex+0x9e>
 800de42:	2400      	movs	r4, #0
 800de44:	1cb1      	adds	r1, r6, #2
 800de46:	e7cc      	b.n	800dde2 <__gethex+0xb6>
 800de48:	2401      	movs	r4, #1
 800de4a:	e7fb      	b.n	800de44 <__gethex+0x118>
 800de4c:	fb03 0002 	mla	r0, r3, r2, r0
 800de50:	e7ce      	b.n	800ddf0 <__gethex+0xc4>
 800de52:	4631      	mov	r1, r6
 800de54:	e7de      	b.n	800de14 <__gethex+0xe8>
 800de56:	eba6 0309 	sub.w	r3, r6, r9
 800de5a:	3b01      	subs	r3, #1
 800de5c:	4629      	mov	r1, r5
 800de5e:	2b07      	cmp	r3, #7
 800de60:	dc0a      	bgt.n	800de78 <__gethex+0x14c>
 800de62:	9801      	ldr	r0, [sp, #4]
 800de64:	f7fe f964 	bl	800c130 <_Balloc>
 800de68:	4604      	mov	r4, r0
 800de6a:	b940      	cbnz	r0, 800de7e <__gethex+0x152>
 800de6c:	4b5c      	ldr	r3, [pc, #368]	@ (800dfe0 <__gethex+0x2b4>)
 800de6e:	4602      	mov	r2, r0
 800de70:	21e4      	movs	r1, #228	@ 0xe4
 800de72:	485c      	ldr	r0, [pc, #368]	@ (800dfe4 <__gethex+0x2b8>)
 800de74:	f7ff fec0 	bl	800dbf8 <__assert_func>
 800de78:	3101      	adds	r1, #1
 800de7a:	105b      	asrs	r3, r3, #1
 800de7c:	e7ef      	b.n	800de5e <__gethex+0x132>
 800de7e:	f100 0a14 	add.w	sl, r0, #20
 800de82:	2300      	movs	r3, #0
 800de84:	4655      	mov	r5, sl
 800de86:	469b      	mov	fp, r3
 800de88:	45b1      	cmp	r9, r6
 800de8a:	d337      	bcc.n	800defc <__gethex+0x1d0>
 800de8c:	f845 bb04 	str.w	fp, [r5], #4
 800de90:	eba5 050a 	sub.w	r5, r5, sl
 800de94:	10ad      	asrs	r5, r5, #2
 800de96:	6125      	str	r5, [r4, #16]
 800de98:	4658      	mov	r0, fp
 800de9a:	f7fe fa3b 	bl	800c314 <__hi0bits>
 800de9e:	016d      	lsls	r5, r5, #5
 800dea0:	f8d8 6000 	ldr.w	r6, [r8]
 800dea4:	1a2d      	subs	r5, r5, r0
 800dea6:	42b5      	cmp	r5, r6
 800dea8:	dd54      	ble.n	800df54 <__gethex+0x228>
 800deaa:	1bad      	subs	r5, r5, r6
 800deac:	4629      	mov	r1, r5
 800deae:	4620      	mov	r0, r4
 800deb0:	f7fe fdcf 	bl	800ca52 <__any_on>
 800deb4:	4681      	mov	r9, r0
 800deb6:	b178      	cbz	r0, 800ded8 <__gethex+0x1ac>
 800deb8:	1e6b      	subs	r3, r5, #1
 800deba:	1159      	asrs	r1, r3, #5
 800debc:	f003 021f 	and.w	r2, r3, #31
 800dec0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dec4:	f04f 0901 	mov.w	r9, #1
 800dec8:	fa09 f202 	lsl.w	r2, r9, r2
 800decc:	420a      	tst	r2, r1
 800dece:	d003      	beq.n	800ded8 <__gethex+0x1ac>
 800ded0:	454b      	cmp	r3, r9
 800ded2:	dc36      	bgt.n	800df42 <__gethex+0x216>
 800ded4:	f04f 0902 	mov.w	r9, #2
 800ded8:	4629      	mov	r1, r5
 800deda:	4620      	mov	r0, r4
 800dedc:	f7ff febe 	bl	800dc5c <rshift>
 800dee0:	442f      	add	r7, r5
 800dee2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dee6:	42bb      	cmp	r3, r7
 800dee8:	da42      	bge.n	800df70 <__gethex+0x244>
 800deea:	9801      	ldr	r0, [sp, #4]
 800deec:	4621      	mov	r1, r4
 800deee:	f7fe f95f 	bl	800c1b0 <_Bfree>
 800def2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800def4:	2300      	movs	r3, #0
 800def6:	6013      	str	r3, [r2, #0]
 800def8:	25a3      	movs	r5, #163	@ 0xa3
 800defa:	e793      	b.n	800de24 <__gethex+0xf8>
 800defc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800df00:	2a2e      	cmp	r2, #46	@ 0x2e
 800df02:	d012      	beq.n	800df2a <__gethex+0x1fe>
 800df04:	2b20      	cmp	r3, #32
 800df06:	d104      	bne.n	800df12 <__gethex+0x1e6>
 800df08:	f845 bb04 	str.w	fp, [r5], #4
 800df0c:	f04f 0b00 	mov.w	fp, #0
 800df10:	465b      	mov	r3, fp
 800df12:	7830      	ldrb	r0, [r6, #0]
 800df14:	9303      	str	r3, [sp, #12]
 800df16:	f7ff fef3 	bl	800dd00 <__hexdig_fun>
 800df1a:	9b03      	ldr	r3, [sp, #12]
 800df1c:	f000 000f 	and.w	r0, r0, #15
 800df20:	4098      	lsls	r0, r3
 800df22:	ea4b 0b00 	orr.w	fp, fp, r0
 800df26:	3304      	adds	r3, #4
 800df28:	e7ae      	b.n	800de88 <__gethex+0x15c>
 800df2a:	45b1      	cmp	r9, r6
 800df2c:	d8ea      	bhi.n	800df04 <__gethex+0x1d8>
 800df2e:	492b      	ldr	r1, [pc, #172]	@ (800dfdc <__gethex+0x2b0>)
 800df30:	9303      	str	r3, [sp, #12]
 800df32:	2201      	movs	r2, #1
 800df34:	4630      	mov	r0, r6
 800df36:	f7ff fe35 	bl	800dba4 <strncmp>
 800df3a:	9b03      	ldr	r3, [sp, #12]
 800df3c:	2800      	cmp	r0, #0
 800df3e:	d1e1      	bne.n	800df04 <__gethex+0x1d8>
 800df40:	e7a2      	b.n	800de88 <__gethex+0x15c>
 800df42:	1ea9      	subs	r1, r5, #2
 800df44:	4620      	mov	r0, r4
 800df46:	f7fe fd84 	bl	800ca52 <__any_on>
 800df4a:	2800      	cmp	r0, #0
 800df4c:	d0c2      	beq.n	800ded4 <__gethex+0x1a8>
 800df4e:	f04f 0903 	mov.w	r9, #3
 800df52:	e7c1      	b.n	800ded8 <__gethex+0x1ac>
 800df54:	da09      	bge.n	800df6a <__gethex+0x23e>
 800df56:	1b75      	subs	r5, r6, r5
 800df58:	4621      	mov	r1, r4
 800df5a:	9801      	ldr	r0, [sp, #4]
 800df5c:	462a      	mov	r2, r5
 800df5e:	f7fe fb3f 	bl	800c5e0 <__lshift>
 800df62:	1b7f      	subs	r7, r7, r5
 800df64:	4604      	mov	r4, r0
 800df66:	f100 0a14 	add.w	sl, r0, #20
 800df6a:	f04f 0900 	mov.w	r9, #0
 800df6e:	e7b8      	b.n	800dee2 <__gethex+0x1b6>
 800df70:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800df74:	42bd      	cmp	r5, r7
 800df76:	dd6f      	ble.n	800e058 <__gethex+0x32c>
 800df78:	1bed      	subs	r5, r5, r7
 800df7a:	42ae      	cmp	r6, r5
 800df7c:	dc34      	bgt.n	800dfe8 <__gethex+0x2bc>
 800df7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800df82:	2b02      	cmp	r3, #2
 800df84:	d022      	beq.n	800dfcc <__gethex+0x2a0>
 800df86:	2b03      	cmp	r3, #3
 800df88:	d024      	beq.n	800dfd4 <__gethex+0x2a8>
 800df8a:	2b01      	cmp	r3, #1
 800df8c:	d115      	bne.n	800dfba <__gethex+0x28e>
 800df8e:	42ae      	cmp	r6, r5
 800df90:	d113      	bne.n	800dfba <__gethex+0x28e>
 800df92:	2e01      	cmp	r6, #1
 800df94:	d10b      	bne.n	800dfae <__gethex+0x282>
 800df96:	9a02      	ldr	r2, [sp, #8]
 800df98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800df9c:	6013      	str	r3, [r2, #0]
 800df9e:	2301      	movs	r3, #1
 800dfa0:	6123      	str	r3, [r4, #16]
 800dfa2:	f8ca 3000 	str.w	r3, [sl]
 800dfa6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dfa8:	2562      	movs	r5, #98	@ 0x62
 800dfaa:	601c      	str	r4, [r3, #0]
 800dfac:	e73a      	b.n	800de24 <__gethex+0xf8>
 800dfae:	1e71      	subs	r1, r6, #1
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	f7fe fd4e 	bl	800ca52 <__any_on>
 800dfb6:	2800      	cmp	r0, #0
 800dfb8:	d1ed      	bne.n	800df96 <__gethex+0x26a>
 800dfba:	9801      	ldr	r0, [sp, #4]
 800dfbc:	4621      	mov	r1, r4
 800dfbe:	f7fe f8f7 	bl	800c1b0 <_Bfree>
 800dfc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	6013      	str	r3, [r2, #0]
 800dfc8:	2550      	movs	r5, #80	@ 0x50
 800dfca:	e72b      	b.n	800de24 <__gethex+0xf8>
 800dfcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d1f3      	bne.n	800dfba <__gethex+0x28e>
 800dfd2:	e7e0      	b.n	800df96 <__gethex+0x26a>
 800dfd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d1dd      	bne.n	800df96 <__gethex+0x26a>
 800dfda:	e7ee      	b.n	800dfba <__gethex+0x28e>
 800dfdc:	0800f3d0 	.word	0x0800f3d0
 800dfe0:	0800f265 	.word	0x0800f265
 800dfe4:	0800f57e 	.word	0x0800f57e
 800dfe8:	1e6f      	subs	r7, r5, #1
 800dfea:	f1b9 0f00 	cmp.w	r9, #0
 800dfee:	d130      	bne.n	800e052 <__gethex+0x326>
 800dff0:	b127      	cbz	r7, 800dffc <__gethex+0x2d0>
 800dff2:	4639      	mov	r1, r7
 800dff4:	4620      	mov	r0, r4
 800dff6:	f7fe fd2c 	bl	800ca52 <__any_on>
 800dffa:	4681      	mov	r9, r0
 800dffc:	117a      	asrs	r2, r7, #5
 800dffe:	2301      	movs	r3, #1
 800e000:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e004:	f007 071f 	and.w	r7, r7, #31
 800e008:	40bb      	lsls	r3, r7
 800e00a:	4213      	tst	r3, r2
 800e00c:	4629      	mov	r1, r5
 800e00e:	4620      	mov	r0, r4
 800e010:	bf18      	it	ne
 800e012:	f049 0902 	orrne.w	r9, r9, #2
 800e016:	f7ff fe21 	bl	800dc5c <rshift>
 800e01a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e01e:	1b76      	subs	r6, r6, r5
 800e020:	2502      	movs	r5, #2
 800e022:	f1b9 0f00 	cmp.w	r9, #0
 800e026:	d047      	beq.n	800e0b8 <__gethex+0x38c>
 800e028:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e02c:	2b02      	cmp	r3, #2
 800e02e:	d015      	beq.n	800e05c <__gethex+0x330>
 800e030:	2b03      	cmp	r3, #3
 800e032:	d017      	beq.n	800e064 <__gethex+0x338>
 800e034:	2b01      	cmp	r3, #1
 800e036:	d109      	bne.n	800e04c <__gethex+0x320>
 800e038:	f019 0f02 	tst.w	r9, #2
 800e03c:	d006      	beq.n	800e04c <__gethex+0x320>
 800e03e:	f8da 3000 	ldr.w	r3, [sl]
 800e042:	ea49 0903 	orr.w	r9, r9, r3
 800e046:	f019 0f01 	tst.w	r9, #1
 800e04a:	d10e      	bne.n	800e06a <__gethex+0x33e>
 800e04c:	f045 0510 	orr.w	r5, r5, #16
 800e050:	e032      	b.n	800e0b8 <__gethex+0x38c>
 800e052:	f04f 0901 	mov.w	r9, #1
 800e056:	e7d1      	b.n	800dffc <__gethex+0x2d0>
 800e058:	2501      	movs	r5, #1
 800e05a:	e7e2      	b.n	800e022 <__gethex+0x2f6>
 800e05c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e05e:	f1c3 0301 	rsb	r3, r3, #1
 800e062:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e064:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e066:	2b00      	cmp	r3, #0
 800e068:	d0f0      	beq.n	800e04c <__gethex+0x320>
 800e06a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e06e:	f104 0314 	add.w	r3, r4, #20
 800e072:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e076:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e07a:	f04f 0c00 	mov.w	ip, #0
 800e07e:	4618      	mov	r0, r3
 800e080:	f853 2b04 	ldr.w	r2, [r3], #4
 800e084:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800e088:	d01b      	beq.n	800e0c2 <__gethex+0x396>
 800e08a:	3201      	adds	r2, #1
 800e08c:	6002      	str	r2, [r0, #0]
 800e08e:	2d02      	cmp	r5, #2
 800e090:	f104 0314 	add.w	r3, r4, #20
 800e094:	d13c      	bne.n	800e110 <__gethex+0x3e4>
 800e096:	f8d8 2000 	ldr.w	r2, [r8]
 800e09a:	3a01      	subs	r2, #1
 800e09c:	42b2      	cmp	r2, r6
 800e09e:	d109      	bne.n	800e0b4 <__gethex+0x388>
 800e0a0:	1171      	asrs	r1, r6, #5
 800e0a2:	2201      	movs	r2, #1
 800e0a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e0a8:	f006 061f 	and.w	r6, r6, #31
 800e0ac:	fa02 f606 	lsl.w	r6, r2, r6
 800e0b0:	421e      	tst	r6, r3
 800e0b2:	d13a      	bne.n	800e12a <__gethex+0x3fe>
 800e0b4:	f045 0520 	orr.w	r5, r5, #32
 800e0b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e0ba:	601c      	str	r4, [r3, #0]
 800e0bc:	9b02      	ldr	r3, [sp, #8]
 800e0be:	601f      	str	r7, [r3, #0]
 800e0c0:	e6b0      	b.n	800de24 <__gethex+0xf8>
 800e0c2:	4299      	cmp	r1, r3
 800e0c4:	f843 cc04 	str.w	ip, [r3, #-4]
 800e0c8:	d8d9      	bhi.n	800e07e <__gethex+0x352>
 800e0ca:	68a3      	ldr	r3, [r4, #8]
 800e0cc:	459b      	cmp	fp, r3
 800e0ce:	db17      	blt.n	800e100 <__gethex+0x3d4>
 800e0d0:	6861      	ldr	r1, [r4, #4]
 800e0d2:	9801      	ldr	r0, [sp, #4]
 800e0d4:	3101      	adds	r1, #1
 800e0d6:	f7fe f82b 	bl	800c130 <_Balloc>
 800e0da:	4681      	mov	r9, r0
 800e0dc:	b918      	cbnz	r0, 800e0e6 <__gethex+0x3ba>
 800e0de:	4b1a      	ldr	r3, [pc, #104]	@ (800e148 <__gethex+0x41c>)
 800e0e0:	4602      	mov	r2, r0
 800e0e2:	2184      	movs	r1, #132	@ 0x84
 800e0e4:	e6c5      	b.n	800de72 <__gethex+0x146>
 800e0e6:	6922      	ldr	r2, [r4, #16]
 800e0e8:	3202      	adds	r2, #2
 800e0ea:	f104 010c 	add.w	r1, r4, #12
 800e0ee:	0092      	lsls	r2, r2, #2
 800e0f0:	300c      	adds	r0, #12
 800e0f2:	f7fd f8bc 	bl	800b26e <memcpy>
 800e0f6:	4621      	mov	r1, r4
 800e0f8:	9801      	ldr	r0, [sp, #4]
 800e0fa:	f7fe f859 	bl	800c1b0 <_Bfree>
 800e0fe:	464c      	mov	r4, r9
 800e100:	6923      	ldr	r3, [r4, #16]
 800e102:	1c5a      	adds	r2, r3, #1
 800e104:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e108:	6122      	str	r2, [r4, #16]
 800e10a:	2201      	movs	r2, #1
 800e10c:	615a      	str	r2, [r3, #20]
 800e10e:	e7be      	b.n	800e08e <__gethex+0x362>
 800e110:	6922      	ldr	r2, [r4, #16]
 800e112:	455a      	cmp	r2, fp
 800e114:	dd0b      	ble.n	800e12e <__gethex+0x402>
 800e116:	2101      	movs	r1, #1
 800e118:	4620      	mov	r0, r4
 800e11a:	f7ff fd9f 	bl	800dc5c <rshift>
 800e11e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e122:	3701      	adds	r7, #1
 800e124:	42bb      	cmp	r3, r7
 800e126:	f6ff aee0 	blt.w	800deea <__gethex+0x1be>
 800e12a:	2501      	movs	r5, #1
 800e12c:	e7c2      	b.n	800e0b4 <__gethex+0x388>
 800e12e:	f016 061f 	ands.w	r6, r6, #31
 800e132:	d0fa      	beq.n	800e12a <__gethex+0x3fe>
 800e134:	4453      	add	r3, sl
 800e136:	f1c6 0620 	rsb	r6, r6, #32
 800e13a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e13e:	f7fe f8e9 	bl	800c314 <__hi0bits>
 800e142:	42b0      	cmp	r0, r6
 800e144:	dbe7      	blt.n	800e116 <__gethex+0x3ea>
 800e146:	e7f0      	b.n	800e12a <__gethex+0x3fe>
 800e148:	0800f265 	.word	0x0800f265

0800e14c <L_shift>:
 800e14c:	f1c2 0208 	rsb	r2, r2, #8
 800e150:	0092      	lsls	r2, r2, #2
 800e152:	b570      	push	{r4, r5, r6, lr}
 800e154:	f1c2 0620 	rsb	r6, r2, #32
 800e158:	6843      	ldr	r3, [r0, #4]
 800e15a:	6804      	ldr	r4, [r0, #0]
 800e15c:	fa03 f506 	lsl.w	r5, r3, r6
 800e160:	432c      	orrs	r4, r5
 800e162:	40d3      	lsrs	r3, r2
 800e164:	6004      	str	r4, [r0, #0]
 800e166:	f840 3f04 	str.w	r3, [r0, #4]!
 800e16a:	4288      	cmp	r0, r1
 800e16c:	d3f4      	bcc.n	800e158 <L_shift+0xc>
 800e16e:	bd70      	pop	{r4, r5, r6, pc}

0800e170 <__match>:
 800e170:	b530      	push	{r4, r5, lr}
 800e172:	6803      	ldr	r3, [r0, #0]
 800e174:	3301      	adds	r3, #1
 800e176:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e17a:	b914      	cbnz	r4, 800e182 <__match+0x12>
 800e17c:	6003      	str	r3, [r0, #0]
 800e17e:	2001      	movs	r0, #1
 800e180:	bd30      	pop	{r4, r5, pc}
 800e182:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e186:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e18a:	2d19      	cmp	r5, #25
 800e18c:	bf98      	it	ls
 800e18e:	3220      	addls	r2, #32
 800e190:	42a2      	cmp	r2, r4
 800e192:	d0f0      	beq.n	800e176 <__match+0x6>
 800e194:	2000      	movs	r0, #0
 800e196:	e7f3      	b.n	800e180 <__match+0x10>

0800e198 <__hexnan>:
 800e198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e19c:	680b      	ldr	r3, [r1, #0]
 800e19e:	6801      	ldr	r1, [r0, #0]
 800e1a0:	115e      	asrs	r6, r3, #5
 800e1a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e1a6:	f013 031f 	ands.w	r3, r3, #31
 800e1aa:	b087      	sub	sp, #28
 800e1ac:	bf18      	it	ne
 800e1ae:	3604      	addne	r6, #4
 800e1b0:	2500      	movs	r5, #0
 800e1b2:	1f37      	subs	r7, r6, #4
 800e1b4:	4682      	mov	sl, r0
 800e1b6:	4690      	mov	r8, r2
 800e1b8:	9301      	str	r3, [sp, #4]
 800e1ba:	f846 5c04 	str.w	r5, [r6, #-4]
 800e1be:	46b9      	mov	r9, r7
 800e1c0:	463c      	mov	r4, r7
 800e1c2:	9502      	str	r5, [sp, #8]
 800e1c4:	46ab      	mov	fp, r5
 800e1c6:	784a      	ldrb	r2, [r1, #1]
 800e1c8:	1c4b      	adds	r3, r1, #1
 800e1ca:	9303      	str	r3, [sp, #12]
 800e1cc:	b342      	cbz	r2, 800e220 <__hexnan+0x88>
 800e1ce:	4610      	mov	r0, r2
 800e1d0:	9105      	str	r1, [sp, #20]
 800e1d2:	9204      	str	r2, [sp, #16]
 800e1d4:	f7ff fd94 	bl	800dd00 <__hexdig_fun>
 800e1d8:	2800      	cmp	r0, #0
 800e1da:	d151      	bne.n	800e280 <__hexnan+0xe8>
 800e1dc:	9a04      	ldr	r2, [sp, #16]
 800e1de:	9905      	ldr	r1, [sp, #20]
 800e1e0:	2a20      	cmp	r2, #32
 800e1e2:	d818      	bhi.n	800e216 <__hexnan+0x7e>
 800e1e4:	9b02      	ldr	r3, [sp, #8]
 800e1e6:	459b      	cmp	fp, r3
 800e1e8:	dd13      	ble.n	800e212 <__hexnan+0x7a>
 800e1ea:	454c      	cmp	r4, r9
 800e1ec:	d206      	bcs.n	800e1fc <__hexnan+0x64>
 800e1ee:	2d07      	cmp	r5, #7
 800e1f0:	dc04      	bgt.n	800e1fc <__hexnan+0x64>
 800e1f2:	462a      	mov	r2, r5
 800e1f4:	4649      	mov	r1, r9
 800e1f6:	4620      	mov	r0, r4
 800e1f8:	f7ff ffa8 	bl	800e14c <L_shift>
 800e1fc:	4544      	cmp	r4, r8
 800e1fe:	d952      	bls.n	800e2a6 <__hexnan+0x10e>
 800e200:	2300      	movs	r3, #0
 800e202:	f1a4 0904 	sub.w	r9, r4, #4
 800e206:	f844 3c04 	str.w	r3, [r4, #-4]
 800e20a:	f8cd b008 	str.w	fp, [sp, #8]
 800e20e:	464c      	mov	r4, r9
 800e210:	461d      	mov	r5, r3
 800e212:	9903      	ldr	r1, [sp, #12]
 800e214:	e7d7      	b.n	800e1c6 <__hexnan+0x2e>
 800e216:	2a29      	cmp	r2, #41	@ 0x29
 800e218:	d157      	bne.n	800e2ca <__hexnan+0x132>
 800e21a:	3102      	adds	r1, #2
 800e21c:	f8ca 1000 	str.w	r1, [sl]
 800e220:	f1bb 0f00 	cmp.w	fp, #0
 800e224:	d051      	beq.n	800e2ca <__hexnan+0x132>
 800e226:	454c      	cmp	r4, r9
 800e228:	d206      	bcs.n	800e238 <__hexnan+0xa0>
 800e22a:	2d07      	cmp	r5, #7
 800e22c:	dc04      	bgt.n	800e238 <__hexnan+0xa0>
 800e22e:	462a      	mov	r2, r5
 800e230:	4649      	mov	r1, r9
 800e232:	4620      	mov	r0, r4
 800e234:	f7ff ff8a 	bl	800e14c <L_shift>
 800e238:	4544      	cmp	r4, r8
 800e23a:	d936      	bls.n	800e2aa <__hexnan+0x112>
 800e23c:	f1a8 0204 	sub.w	r2, r8, #4
 800e240:	4623      	mov	r3, r4
 800e242:	f853 1b04 	ldr.w	r1, [r3], #4
 800e246:	f842 1f04 	str.w	r1, [r2, #4]!
 800e24a:	429f      	cmp	r7, r3
 800e24c:	d2f9      	bcs.n	800e242 <__hexnan+0xaa>
 800e24e:	1b3b      	subs	r3, r7, r4
 800e250:	f023 0303 	bic.w	r3, r3, #3
 800e254:	3304      	adds	r3, #4
 800e256:	3401      	adds	r4, #1
 800e258:	3e03      	subs	r6, #3
 800e25a:	42b4      	cmp	r4, r6
 800e25c:	bf88      	it	hi
 800e25e:	2304      	movhi	r3, #4
 800e260:	4443      	add	r3, r8
 800e262:	2200      	movs	r2, #0
 800e264:	f843 2b04 	str.w	r2, [r3], #4
 800e268:	429f      	cmp	r7, r3
 800e26a:	d2fb      	bcs.n	800e264 <__hexnan+0xcc>
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	b91b      	cbnz	r3, 800e278 <__hexnan+0xe0>
 800e270:	4547      	cmp	r7, r8
 800e272:	d128      	bne.n	800e2c6 <__hexnan+0x12e>
 800e274:	2301      	movs	r3, #1
 800e276:	603b      	str	r3, [r7, #0]
 800e278:	2005      	movs	r0, #5
 800e27a:	b007      	add	sp, #28
 800e27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e280:	3501      	adds	r5, #1
 800e282:	2d08      	cmp	r5, #8
 800e284:	f10b 0b01 	add.w	fp, fp, #1
 800e288:	dd06      	ble.n	800e298 <__hexnan+0x100>
 800e28a:	4544      	cmp	r4, r8
 800e28c:	d9c1      	bls.n	800e212 <__hexnan+0x7a>
 800e28e:	2300      	movs	r3, #0
 800e290:	f844 3c04 	str.w	r3, [r4, #-4]
 800e294:	2501      	movs	r5, #1
 800e296:	3c04      	subs	r4, #4
 800e298:	6822      	ldr	r2, [r4, #0]
 800e29a:	f000 000f 	and.w	r0, r0, #15
 800e29e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e2a2:	6020      	str	r0, [r4, #0]
 800e2a4:	e7b5      	b.n	800e212 <__hexnan+0x7a>
 800e2a6:	2508      	movs	r5, #8
 800e2a8:	e7b3      	b.n	800e212 <__hexnan+0x7a>
 800e2aa:	9b01      	ldr	r3, [sp, #4]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d0dd      	beq.n	800e26c <__hexnan+0xd4>
 800e2b0:	f1c3 0320 	rsb	r3, r3, #32
 800e2b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e2b8:	40da      	lsrs	r2, r3
 800e2ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e2be:	4013      	ands	r3, r2
 800e2c0:	f846 3c04 	str.w	r3, [r6, #-4]
 800e2c4:	e7d2      	b.n	800e26c <__hexnan+0xd4>
 800e2c6:	3f04      	subs	r7, #4
 800e2c8:	e7d0      	b.n	800e26c <__hexnan+0xd4>
 800e2ca:	2004      	movs	r0, #4
 800e2cc:	e7d5      	b.n	800e27a <__hexnan+0xe2>

0800e2ce <__ascii_mbtowc>:
 800e2ce:	b082      	sub	sp, #8
 800e2d0:	b901      	cbnz	r1, 800e2d4 <__ascii_mbtowc+0x6>
 800e2d2:	a901      	add	r1, sp, #4
 800e2d4:	b142      	cbz	r2, 800e2e8 <__ascii_mbtowc+0x1a>
 800e2d6:	b14b      	cbz	r3, 800e2ec <__ascii_mbtowc+0x1e>
 800e2d8:	7813      	ldrb	r3, [r2, #0]
 800e2da:	600b      	str	r3, [r1, #0]
 800e2dc:	7812      	ldrb	r2, [r2, #0]
 800e2de:	1e10      	subs	r0, r2, #0
 800e2e0:	bf18      	it	ne
 800e2e2:	2001      	movne	r0, #1
 800e2e4:	b002      	add	sp, #8
 800e2e6:	4770      	bx	lr
 800e2e8:	4610      	mov	r0, r2
 800e2ea:	e7fb      	b.n	800e2e4 <__ascii_mbtowc+0x16>
 800e2ec:	f06f 0001 	mvn.w	r0, #1
 800e2f0:	e7f8      	b.n	800e2e4 <__ascii_mbtowc+0x16>

0800e2f2 <_realloc_r>:
 800e2f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2f6:	4680      	mov	r8, r0
 800e2f8:	4615      	mov	r5, r2
 800e2fa:	460c      	mov	r4, r1
 800e2fc:	b921      	cbnz	r1, 800e308 <_realloc_r+0x16>
 800e2fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e302:	4611      	mov	r1, r2
 800e304:	f7fd be88 	b.w	800c018 <_malloc_r>
 800e308:	b92a      	cbnz	r2, 800e316 <_realloc_r+0x24>
 800e30a:	f7fd fe11 	bl	800bf30 <_free_r>
 800e30e:	2400      	movs	r4, #0
 800e310:	4620      	mov	r0, r4
 800e312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e316:	f000 f840 	bl	800e39a <_malloc_usable_size_r>
 800e31a:	4285      	cmp	r5, r0
 800e31c:	4606      	mov	r6, r0
 800e31e:	d802      	bhi.n	800e326 <_realloc_r+0x34>
 800e320:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e324:	d8f4      	bhi.n	800e310 <_realloc_r+0x1e>
 800e326:	4629      	mov	r1, r5
 800e328:	4640      	mov	r0, r8
 800e32a:	f7fd fe75 	bl	800c018 <_malloc_r>
 800e32e:	4607      	mov	r7, r0
 800e330:	2800      	cmp	r0, #0
 800e332:	d0ec      	beq.n	800e30e <_realloc_r+0x1c>
 800e334:	42b5      	cmp	r5, r6
 800e336:	462a      	mov	r2, r5
 800e338:	4621      	mov	r1, r4
 800e33a:	bf28      	it	cs
 800e33c:	4632      	movcs	r2, r6
 800e33e:	f7fc ff96 	bl	800b26e <memcpy>
 800e342:	4621      	mov	r1, r4
 800e344:	4640      	mov	r0, r8
 800e346:	f7fd fdf3 	bl	800bf30 <_free_r>
 800e34a:	463c      	mov	r4, r7
 800e34c:	e7e0      	b.n	800e310 <_realloc_r+0x1e>

0800e34e <__ascii_wctomb>:
 800e34e:	4603      	mov	r3, r0
 800e350:	4608      	mov	r0, r1
 800e352:	b141      	cbz	r1, 800e366 <__ascii_wctomb+0x18>
 800e354:	2aff      	cmp	r2, #255	@ 0xff
 800e356:	d904      	bls.n	800e362 <__ascii_wctomb+0x14>
 800e358:	228a      	movs	r2, #138	@ 0x8a
 800e35a:	601a      	str	r2, [r3, #0]
 800e35c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e360:	4770      	bx	lr
 800e362:	700a      	strb	r2, [r1, #0]
 800e364:	2001      	movs	r0, #1
 800e366:	4770      	bx	lr

0800e368 <fiprintf>:
 800e368:	b40e      	push	{r1, r2, r3}
 800e36a:	b503      	push	{r0, r1, lr}
 800e36c:	4601      	mov	r1, r0
 800e36e:	ab03      	add	r3, sp, #12
 800e370:	4805      	ldr	r0, [pc, #20]	@ (800e388 <fiprintf+0x20>)
 800e372:	f853 2b04 	ldr.w	r2, [r3], #4
 800e376:	6800      	ldr	r0, [r0, #0]
 800e378:	9301      	str	r3, [sp, #4]
 800e37a:	f000 f83f 	bl	800e3fc <_vfiprintf_r>
 800e37e:	b002      	add	sp, #8
 800e380:	f85d eb04 	ldr.w	lr, [sp], #4
 800e384:	b003      	add	sp, #12
 800e386:	4770      	bx	lr
 800e388:	2000001c 	.word	0x2000001c

0800e38c <abort>:
 800e38c:	b508      	push	{r3, lr}
 800e38e:	2006      	movs	r0, #6
 800e390:	f000 fa08 	bl	800e7a4 <raise>
 800e394:	2001      	movs	r0, #1
 800e396:	f7f3 fbb5 	bl	8001b04 <_exit>

0800e39a <_malloc_usable_size_r>:
 800e39a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e39e:	1f18      	subs	r0, r3, #4
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	bfbc      	itt	lt
 800e3a4:	580b      	ldrlt	r3, [r1, r0]
 800e3a6:	18c0      	addlt	r0, r0, r3
 800e3a8:	4770      	bx	lr

0800e3aa <__sfputc_r>:
 800e3aa:	6893      	ldr	r3, [r2, #8]
 800e3ac:	3b01      	subs	r3, #1
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	b410      	push	{r4}
 800e3b2:	6093      	str	r3, [r2, #8]
 800e3b4:	da08      	bge.n	800e3c8 <__sfputc_r+0x1e>
 800e3b6:	6994      	ldr	r4, [r2, #24]
 800e3b8:	42a3      	cmp	r3, r4
 800e3ba:	db01      	blt.n	800e3c0 <__sfputc_r+0x16>
 800e3bc:	290a      	cmp	r1, #10
 800e3be:	d103      	bne.n	800e3c8 <__sfputc_r+0x1e>
 800e3c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3c4:	f000 b932 	b.w	800e62c <__swbuf_r>
 800e3c8:	6813      	ldr	r3, [r2, #0]
 800e3ca:	1c58      	adds	r0, r3, #1
 800e3cc:	6010      	str	r0, [r2, #0]
 800e3ce:	7019      	strb	r1, [r3, #0]
 800e3d0:	4608      	mov	r0, r1
 800e3d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3d6:	4770      	bx	lr

0800e3d8 <__sfputs_r>:
 800e3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3da:	4606      	mov	r6, r0
 800e3dc:	460f      	mov	r7, r1
 800e3de:	4614      	mov	r4, r2
 800e3e0:	18d5      	adds	r5, r2, r3
 800e3e2:	42ac      	cmp	r4, r5
 800e3e4:	d101      	bne.n	800e3ea <__sfputs_r+0x12>
 800e3e6:	2000      	movs	r0, #0
 800e3e8:	e007      	b.n	800e3fa <__sfputs_r+0x22>
 800e3ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3ee:	463a      	mov	r2, r7
 800e3f0:	4630      	mov	r0, r6
 800e3f2:	f7ff ffda 	bl	800e3aa <__sfputc_r>
 800e3f6:	1c43      	adds	r3, r0, #1
 800e3f8:	d1f3      	bne.n	800e3e2 <__sfputs_r+0xa>
 800e3fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e3fc <_vfiprintf_r>:
 800e3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e400:	460d      	mov	r5, r1
 800e402:	b09d      	sub	sp, #116	@ 0x74
 800e404:	4614      	mov	r4, r2
 800e406:	4698      	mov	r8, r3
 800e408:	4606      	mov	r6, r0
 800e40a:	b118      	cbz	r0, 800e414 <_vfiprintf_r+0x18>
 800e40c:	6a03      	ldr	r3, [r0, #32]
 800e40e:	b90b      	cbnz	r3, 800e414 <_vfiprintf_r+0x18>
 800e410:	f7fc fda4 	bl	800af5c <__sinit>
 800e414:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e416:	07d9      	lsls	r1, r3, #31
 800e418:	d405      	bmi.n	800e426 <_vfiprintf_r+0x2a>
 800e41a:	89ab      	ldrh	r3, [r5, #12]
 800e41c:	059a      	lsls	r2, r3, #22
 800e41e:	d402      	bmi.n	800e426 <_vfiprintf_r+0x2a>
 800e420:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e422:	f7fc ff22 	bl	800b26a <__retarget_lock_acquire_recursive>
 800e426:	89ab      	ldrh	r3, [r5, #12]
 800e428:	071b      	lsls	r3, r3, #28
 800e42a:	d501      	bpl.n	800e430 <_vfiprintf_r+0x34>
 800e42c:	692b      	ldr	r3, [r5, #16]
 800e42e:	b99b      	cbnz	r3, 800e458 <_vfiprintf_r+0x5c>
 800e430:	4629      	mov	r1, r5
 800e432:	4630      	mov	r0, r6
 800e434:	f000 f938 	bl	800e6a8 <__swsetup_r>
 800e438:	b170      	cbz	r0, 800e458 <_vfiprintf_r+0x5c>
 800e43a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e43c:	07dc      	lsls	r4, r3, #31
 800e43e:	d504      	bpl.n	800e44a <_vfiprintf_r+0x4e>
 800e440:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e444:	b01d      	add	sp, #116	@ 0x74
 800e446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e44a:	89ab      	ldrh	r3, [r5, #12]
 800e44c:	0598      	lsls	r0, r3, #22
 800e44e:	d4f7      	bmi.n	800e440 <_vfiprintf_r+0x44>
 800e450:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e452:	f7fc ff0b 	bl	800b26c <__retarget_lock_release_recursive>
 800e456:	e7f3      	b.n	800e440 <_vfiprintf_r+0x44>
 800e458:	2300      	movs	r3, #0
 800e45a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e45c:	2320      	movs	r3, #32
 800e45e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e462:	f8cd 800c 	str.w	r8, [sp, #12]
 800e466:	2330      	movs	r3, #48	@ 0x30
 800e468:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e618 <_vfiprintf_r+0x21c>
 800e46c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e470:	f04f 0901 	mov.w	r9, #1
 800e474:	4623      	mov	r3, r4
 800e476:	469a      	mov	sl, r3
 800e478:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e47c:	b10a      	cbz	r2, 800e482 <_vfiprintf_r+0x86>
 800e47e:	2a25      	cmp	r2, #37	@ 0x25
 800e480:	d1f9      	bne.n	800e476 <_vfiprintf_r+0x7a>
 800e482:	ebba 0b04 	subs.w	fp, sl, r4
 800e486:	d00b      	beq.n	800e4a0 <_vfiprintf_r+0xa4>
 800e488:	465b      	mov	r3, fp
 800e48a:	4622      	mov	r2, r4
 800e48c:	4629      	mov	r1, r5
 800e48e:	4630      	mov	r0, r6
 800e490:	f7ff ffa2 	bl	800e3d8 <__sfputs_r>
 800e494:	3001      	adds	r0, #1
 800e496:	f000 80a7 	beq.w	800e5e8 <_vfiprintf_r+0x1ec>
 800e49a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e49c:	445a      	add	r2, fp
 800e49e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e4a0:	f89a 3000 	ldrb.w	r3, [sl]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	f000 809f 	beq.w	800e5e8 <_vfiprintf_r+0x1ec>
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e4b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4b4:	f10a 0a01 	add.w	sl, sl, #1
 800e4b8:	9304      	str	r3, [sp, #16]
 800e4ba:	9307      	str	r3, [sp, #28]
 800e4bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e4c0:	931a      	str	r3, [sp, #104]	@ 0x68
 800e4c2:	4654      	mov	r4, sl
 800e4c4:	2205      	movs	r2, #5
 800e4c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4ca:	4853      	ldr	r0, [pc, #332]	@ (800e618 <_vfiprintf_r+0x21c>)
 800e4cc:	f7f1 fe88 	bl	80001e0 <memchr>
 800e4d0:	9a04      	ldr	r2, [sp, #16]
 800e4d2:	b9d8      	cbnz	r0, 800e50c <_vfiprintf_r+0x110>
 800e4d4:	06d1      	lsls	r1, r2, #27
 800e4d6:	bf44      	itt	mi
 800e4d8:	2320      	movmi	r3, #32
 800e4da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4de:	0713      	lsls	r3, r2, #28
 800e4e0:	bf44      	itt	mi
 800e4e2:	232b      	movmi	r3, #43	@ 0x2b
 800e4e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4e8:	f89a 3000 	ldrb.w	r3, [sl]
 800e4ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4ee:	d015      	beq.n	800e51c <_vfiprintf_r+0x120>
 800e4f0:	9a07      	ldr	r2, [sp, #28]
 800e4f2:	4654      	mov	r4, sl
 800e4f4:	2000      	movs	r0, #0
 800e4f6:	f04f 0c0a 	mov.w	ip, #10
 800e4fa:	4621      	mov	r1, r4
 800e4fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e500:	3b30      	subs	r3, #48	@ 0x30
 800e502:	2b09      	cmp	r3, #9
 800e504:	d94b      	bls.n	800e59e <_vfiprintf_r+0x1a2>
 800e506:	b1b0      	cbz	r0, 800e536 <_vfiprintf_r+0x13a>
 800e508:	9207      	str	r2, [sp, #28]
 800e50a:	e014      	b.n	800e536 <_vfiprintf_r+0x13a>
 800e50c:	eba0 0308 	sub.w	r3, r0, r8
 800e510:	fa09 f303 	lsl.w	r3, r9, r3
 800e514:	4313      	orrs	r3, r2
 800e516:	9304      	str	r3, [sp, #16]
 800e518:	46a2      	mov	sl, r4
 800e51a:	e7d2      	b.n	800e4c2 <_vfiprintf_r+0xc6>
 800e51c:	9b03      	ldr	r3, [sp, #12]
 800e51e:	1d19      	adds	r1, r3, #4
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	9103      	str	r1, [sp, #12]
 800e524:	2b00      	cmp	r3, #0
 800e526:	bfbb      	ittet	lt
 800e528:	425b      	neglt	r3, r3
 800e52a:	f042 0202 	orrlt.w	r2, r2, #2
 800e52e:	9307      	strge	r3, [sp, #28]
 800e530:	9307      	strlt	r3, [sp, #28]
 800e532:	bfb8      	it	lt
 800e534:	9204      	strlt	r2, [sp, #16]
 800e536:	7823      	ldrb	r3, [r4, #0]
 800e538:	2b2e      	cmp	r3, #46	@ 0x2e
 800e53a:	d10a      	bne.n	800e552 <_vfiprintf_r+0x156>
 800e53c:	7863      	ldrb	r3, [r4, #1]
 800e53e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e540:	d132      	bne.n	800e5a8 <_vfiprintf_r+0x1ac>
 800e542:	9b03      	ldr	r3, [sp, #12]
 800e544:	1d1a      	adds	r2, r3, #4
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	9203      	str	r2, [sp, #12]
 800e54a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e54e:	3402      	adds	r4, #2
 800e550:	9305      	str	r3, [sp, #20]
 800e552:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e628 <_vfiprintf_r+0x22c>
 800e556:	7821      	ldrb	r1, [r4, #0]
 800e558:	2203      	movs	r2, #3
 800e55a:	4650      	mov	r0, sl
 800e55c:	f7f1 fe40 	bl	80001e0 <memchr>
 800e560:	b138      	cbz	r0, 800e572 <_vfiprintf_r+0x176>
 800e562:	9b04      	ldr	r3, [sp, #16]
 800e564:	eba0 000a 	sub.w	r0, r0, sl
 800e568:	2240      	movs	r2, #64	@ 0x40
 800e56a:	4082      	lsls	r2, r0
 800e56c:	4313      	orrs	r3, r2
 800e56e:	3401      	adds	r4, #1
 800e570:	9304      	str	r3, [sp, #16]
 800e572:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e576:	4829      	ldr	r0, [pc, #164]	@ (800e61c <_vfiprintf_r+0x220>)
 800e578:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e57c:	2206      	movs	r2, #6
 800e57e:	f7f1 fe2f 	bl	80001e0 <memchr>
 800e582:	2800      	cmp	r0, #0
 800e584:	d03f      	beq.n	800e606 <_vfiprintf_r+0x20a>
 800e586:	4b26      	ldr	r3, [pc, #152]	@ (800e620 <_vfiprintf_r+0x224>)
 800e588:	bb1b      	cbnz	r3, 800e5d2 <_vfiprintf_r+0x1d6>
 800e58a:	9b03      	ldr	r3, [sp, #12]
 800e58c:	3307      	adds	r3, #7
 800e58e:	f023 0307 	bic.w	r3, r3, #7
 800e592:	3308      	adds	r3, #8
 800e594:	9303      	str	r3, [sp, #12]
 800e596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e598:	443b      	add	r3, r7
 800e59a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e59c:	e76a      	b.n	800e474 <_vfiprintf_r+0x78>
 800e59e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5a2:	460c      	mov	r4, r1
 800e5a4:	2001      	movs	r0, #1
 800e5a6:	e7a8      	b.n	800e4fa <_vfiprintf_r+0xfe>
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	3401      	adds	r4, #1
 800e5ac:	9305      	str	r3, [sp, #20]
 800e5ae:	4619      	mov	r1, r3
 800e5b0:	f04f 0c0a 	mov.w	ip, #10
 800e5b4:	4620      	mov	r0, r4
 800e5b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5ba:	3a30      	subs	r2, #48	@ 0x30
 800e5bc:	2a09      	cmp	r2, #9
 800e5be:	d903      	bls.n	800e5c8 <_vfiprintf_r+0x1cc>
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d0c6      	beq.n	800e552 <_vfiprintf_r+0x156>
 800e5c4:	9105      	str	r1, [sp, #20]
 800e5c6:	e7c4      	b.n	800e552 <_vfiprintf_r+0x156>
 800e5c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5cc:	4604      	mov	r4, r0
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	e7f0      	b.n	800e5b4 <_vfiprintf_r+0x1b8>
 800e5d2:	ab03      	add	r3, sp, #12
 800e5d4:	9300      	str	r3, [sp, #0]
 800e5d6:	462a      	mov	r2, r5
 800e5d8:	4b12      	ldr	r3, [pc, #72]	@ (800e624 <_vfiprintf_r+0x228>)
 800e5da:	a904      	add	r1, sp, #16
 800e5dc:	4630      	mov	r0, r6
 800e5de:	f7fb fe65 	bl	800a2ac <_printf_float>
 800e5e2:	4607      	mov	r7, r0
 800e5e4:	1c78      	adds	r0, r7, #1
 800e5e6:	d1d6      	bne.n	800e596 <_vfiprintf_r+0x19a>
 800e5e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5ea:	07d9      	lsls	r1, r3, #31
 800e5ec:	d405      	bmi.n	800e5fa <_vfiprintf_r+0x1fe>
 800e5ee:	89ab      	ldrh	r3, [r5, #12]
 800e5f0:	059a      	lsls	r2, r3, #22
 800e5f2:	d402      	bmi.n	800e5fa <_vfiprintf_r+0x1fe>
 800e5f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e5f6:	f7fc fe39 	bl	800b26c <__retarget_lock_release_recursive>
 800e5fa:	89ab      	ldrh	r3, [r5, #12]
 800e5fc:	065b      	lsls	r3, r3, #25
 800e5fe:	f53f af1f 	bmi.w	800e440 <_vfiprintf_r+0x44>
 800e602:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e604:	e71e      	b.n	800e444 <_vfiprintf_r+0x48>
 800e606:	ab03      	add	r3, sp, #12
 800e608:	9300      	str	r3, [sp, #0]
 800e60a:	462a      	mov	r2, r5
 800e60c:	4b05      	ldr	r3, [pc, #20]	@ (800e624 <_vfiprintf_r+0x228>)
 800e60e:	a904      	add	r1, sp, #16
 800e610:	4630      	mov	r0, r6
 800e612:	f7fc f8e3 	bl	800a7dc <_printf_i>
 800e616:	e7e4      	b.n	800e5e2 <_vfiprintf_r+0x1e6>
 800e618:	0800f529 	.word	0x0800f529
 800e61c:	0800f533 	.word	0x0800f533
 800e620:	0800a2ad 	.word	0x0800a2ad
 800e624:	0800e3d9 	.word	0x0800e3d9
 800e628:	0800f52f 	.word	0x0800f52f

0800e62c <__swbuf_r>:
 800e62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e62e:	460e      	mov	r6, r1
 800e630:	4614      	mov	r4, r2
 800e632:	4605      	mov	r5, r0
 800e634:	b118      	cbz	r0, 800e63e <__swbuf_r+0x12>
 800e636:	6a03      	ldr	r3, [r0, #32]
 800e638:	b90b      	cbnz	r3, 800e63e <__swbuf_r+0x12>
 800e63a:	f7fc fc8f 	bl	800af5c <__sinit>
 800e63e:	69a3      	ldr	r3, [r4, #24]
 800e640:	60a3      	str	r3, [r4, #8]
 800e642:	89a3      	ldrh	r3, [r4, #12]
 800e644:	071a      	lsls	r2, r3, #28
 800e646:	d501      	bpl.n	800e64c <__swbuf_r+0x20>
 800e648:	6923      	ldr	r3, [r4, #16]
 800e64a:	b943      	cbnz	r3, 800e65e <__swbuf_r+0x32>
 800e64c:	4621      	mov	r1, r4
 800e64e:	4628      	mov	r0, r5
 800e650:	f000 f82a 	bl	800e6a8 <__swsetup_r>
 800e654:	b118      	cbz	r0, 800e65e <__swbuf_r+0x32>
 800e656:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800e65a:	4638      	mov	r0, r7
 800e65c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e65e:	6823      	ldr	r3, [r4, #0]
 800e660:	6922      	ldr	r2, [r4, #16]
 800e662:	1a98      	subs	r0, r3, r2
 800e664:	6963      	ldr	r3, [r4, #20]
 800e666:	b2f6      	uxtb	r6, r6
 800e668:	4283      	cmp	r3, r0
 800e66a:	4637      	mov	r7, r6
 800e66c:	dc05      	bgt.n	800e67a <__swbuf_r+0x4e>
 800e66e:	4621      	mov	r1, r4
 800e670:	4628      	mov	r0, r5
 800e672:	f7ff fa6f 	bl	800db54 <_fflush_r>
 800e676:	2800      	cmp	r0, #0
 800e678:	d1ed      	bne.n	800e656 <__swbuf_r+0x2a>
 800e67a:	68a3      	ldr	r3, [r4, #8]
 800e67c:	3b01      	subs	r3, #1
 800e67e:	60a3      	str	r3, [r4, #8]
 800e680:	6823      	ldr	r3, [r4, #0]
 800e682:	1c5a      	adds	r2, r3, #1
 800e684:	6022      	str	r2, [r4, #0]
 800e686:	701e      	strb	r6, [r3, #0]
 800e688:	6962      	ldr	r2, [r4, #20]
 800e68a:	1c43      	adds	r3, r0, #1
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d004      	beq.n	800e69a <__swbuf_r+0x6e>
 800e690:	89a3      	ldrh	r3, [r4, #12]
 800e692:	07db      	lsls	r3, r3, #31
 800e694:	d5e1      	bpl.n	800e65a <__swbuf_r+0x2e>
 800e696:	2e0a      	cmp	r6, #10
 800e698:	d1df      	bne.n	800e65a <__swbuf_r+0x2e>
 800e69a:	4621      	mov	r1, r4
 800e69c:	4628      	mov	r0, r5
 800e69e:	f7ff fa59 	bl	800db54 <_fflush_r>
 800e6a2:	2800      	cmp	r0, #0
 800e6a4:	d0d9      	beq.n	800e65a <__swbuf_r+0x2e>
 800e6a6:	e7d6      	b.n	800e656 <__swbuf_r+0x2a>

0800e6a8 <__swsetup_r>:
 800e6a8:	b538      	push	{r3, r4, r5, lr}
 800e6aa:	4b29      	ldr	r3, [pc, #164]	@ (800e750 <__swsetup_r+0xa8>)
 800e6ac:	4605      	mov	r5, r0
 800e6ae:	6818      	ldr	r0, [r3, #0]
 800e6b0:	460c      	mov	r4, r1
 800e6b2:	b118      	cbz	r0, 800e6bc <__swsetup_r+0x14>
 800e6b4:	6a03      	ldr	r3, [r0, #32]
 800e6b6:	b90b      	cbnz	r3, 800e6bc <__swsetup_r+0x14>
 800e6b8:	f7fc fc50 	bl	800af5c <__sinit>
 800e6bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6c0:	0719      	lsls	r1, r3, #28
 800e6c2:	d422      	bmi.n	800e70a <__swsetup_r+0x62>
 800e6c4:	06da      	lsls	r2, r3, #27
 800e6c6:	d407      	bmi.n	800e6d8 <__swsetup_r+0x30>
 800e6c8:	2209      	movs	r2, #9
 800e6ca:	602a      	str	r2, [r5, #0]
 800e6cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6d0:	81a3      	strh	r3, [r4, #12]
 800e6d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e6d6:	e033      	b.n	800e740 <__swsetup_r+0x98>
 800e6d8:	0758      	lsls	r0, r3, #29
 800e6da:	d512      	bpl.n	800e702 <__swsetup_r+0x5a>
 800e6dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e6de:	b141      	cbz	r1, 800e6f2 <__swsetup_r+0x4a>
 800e6e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e6e4:	4299      	cmp	r1, r3
 800e6e6:	d002      	beq.n	800e6ee <__swsetup_r+0x46>
 800e6e8:	4628      	mov	r0, r5
 800e6ea:	f7fd fc21 	bl	800bf30 <_free_r>
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	6363      	str	r3, [r4, #52]	@ 0x34
 800e6f2:	89a3      	ldrh	r3, [r4, #12]
 800e6f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e6f8:	81a3      	strh	r3, [r4, #12]
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	6063      	str	r3, [r4, #4]
 800e6fe:	6923      	ldr	r3, [r4, #16]
 800e700:	6023      	str	r3, [r4, #0]
 800e702:	89a3      	ldrh	r3, [r4, #12]
 800e704:	f043 0308 	orr.w	r3, r3, #8
 800e708:	81a3      	strh	r3, [r4, #12]
 800e70a:	6923      	ldr	r3, [r4, #16]
 800e70c:	b94b      	cbnz	r3, 800e722 <__swsetup_r+0x7a>
 800e70e:	89a3      	ldrh	r3, [r4, #12]
 800e710:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e718:	d003      	beq.n	800e722 <__swsetup_r+0x7a>
 800e71a:	4621      	mov	r1, r4
 800e71c:	4628      	mov	r0, r5
 800e71e:	f000 f883 	bl	800e828 <__smakebuf_r>
 800e722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e726:	f013 0201 	ands.w	r2, r3, #1
 800e72a:	d00a      	beq.n	800e742 <__swsetup_r+0x9a>
 800e72c:	2200      	movs	r2, #0
 800e72e:	60a2      	str	r2, [r4, #8]
 800e730:	6962      	ldr	r2, [r4, #20]
 800e732:	4252      	negs	r2, r2
 800e734:	61a2      	str	r2, [r4, #24]
 800e736:	6922      	ldr	r2, [r4, #16]
 800e738:	b942      	cbnz	r2, 800e74c <__swsetup_r+0xa4>
 800e73a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e73e:	d1c5      	bne.n	800e6cc <__swsetup_r+0x24>
 800e740:	bd38      	pop	{r3, r4, r5, pc}
 800e742:	0799      	lsls	r1, r3, #30
 800e744:	bf58      	it	pl
 800e746:	6962      	ldrpl	r2, [r4, #20]
 800e748:	60a2      	str	r2, [r4, #8]
 800e74a:	e7f4      	b.n	800e736 <__swsetup_r+0x8e>
 800e74c:	2000      	movs	r0, #0
 800e74e:	e7f7      	b.n	800e740 <__swsetup_r+0x98>
 800e750:	2000001c 	.word	0x2000001c

0800e754 <_raise_r>:
 800e754:	291f      	cmp	r1, #31
 800e756:	b538      	push	{r3, r4, r5, lr}
 800e758:	4605      	mov	r5, r0
 800e75a:	460c      	mov	r4, r1
 800e75c:	d904      	bls.n	800e768 <_raise_r+0x14>
 800e75e:	2316      	movs	r3, #22
 800e760:	6003      	str	r3, [r0, #0]
 800e762:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e766:	bd38      	pop	{r3, r4, r5, pc}
 800e768:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e76a:	b112      	cbz	r2, 800e772 <_raise_r+0x1e>
 800e76c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e770:	b94b      	cbnz	r3, 800e786 <_raise_r+0x32>
 800e772:	4628      	mov	r0, r5
 800e774:	f000 f830 	bl	800e7d8 <_getpid_r>
 800e778:	4622      	mov	r2, r4
 800e77a:	4601      	mov	r1, r0
 800e77c:	4628      	mov	r0, r5
 800e77e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e782:	f000 b817 	b.w	800e7b4 <_kill_r>
 800e786:	2b01      	cmp	r3, #1
 800e788:	d00a      	beq.n	800e7a0 <_raise_r+0x4c>
 800e78a:	1c59      	adds	r1, r3, #1
 800e78c:	d103      	bne.n	800e796 <_raise_r+0x42>
 800e78e:	2316      	movs	r3, #22
 800e790:	6003      	str	r3, [r0, #0]
 800e792:	2001      	movs	r0, #1
 800e794:	e7e7      	b.n	800e766 <_raise_r+0x12>
 800e796:	2100      	movs	r1, #0
 800e798:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e79c:	4620      	mov	r0, r4
 800e79e:	4798      	blx	r3
 800e7a0:	2000      	movs	r0, #0
 800e7a2:	e7e0      	b.n	800e766 <_raise_r+0x12>

0800e7a4 <raise>:
 800e7a4:	4b02      	ldr	r3, [pc, #8]	@ (800e7b0 <raise+0xc>)
 800e7a6:	4601      	mov	r1, r0
 800e7a8:	6818      	ldr	r0, [r3, #0]
 800e7aa:	f7ff bfd3 	b.w	800e754 <_raise_r>
 800e7ae:	bf00      	nop
 800e7b0:	2000001c 	.word	0x2000001c

0800e7b4 <_kill_r>:
 800e7b4:	b538      	push	{r3, r4, r5, lr}
 800e7b6:	4d07      	ldr	r5, [pc, #28]	@ (800e7d4 <_kill_r+0x20>)
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	4604      	mov	r4, r0
 800e7bc:	4608      	mov	r0, r1
 800e7be:	4611      	mov	r1, r2
 800e7c0:	602b      	str	r3, [r5, #0]
 800e7c2:	f7f3 f98f 	bl	8001ae4 <_kill>
 800e7c6:	1c43      	adds	r3, r0, #1
 800e7c8:	d102      	bne.n	800e7d0 <_kill_r+0x1c>
 800e7ca:	682b      	ldr	r3, [r5, #0]
 800e7cc:	b103      	cbz	r3, 800e7d0 <_kill_r+0x1c>
 800e7ce:	6023      	str	r3, [r4, #0]
 800e7d0:	bd38      	pop	{r3, r4, r5, pc}
 800e7d2:	bf00      	nop
 800e7d4:	2000215c 	.word	0x2000215c

0800e7d8 <_getpid_r>:
 800e7d8:	f7f3 b97c 	b.w	8001ad4 <_getpid>

0800e7dc <__swhatbuf_r>:
 800e7dc:	b570      	push	{r4, r5, r6, lr}
 800e7de:	460c      	mov	r4, r1
 800e7e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7e4:	2900      	cmp	r1, #0
 800e7e6:	b096      	sub	sp, #88	@ 0x58
 800e7e8:	4615      	mov	r5, r2
 800e7ea:	461e      	mov	r6, r3
 800e7ec:	da0d      	bge.n	800e80a <__swhatbuf_r+0x2e>
 800e7ee:	89a3      	ldrh	r3, [r4, #12]
 800e7f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e7f4:	f04f 0100 	mov.w	r1, #0
 800e7f8:	bf14      	ite	ne
 800e7fa:	2340      	movne	r3, #64	@ 0x40
 800e7fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e800:	2000      	movs	r0, #0
 800e802:	6031      	str	r1, [r6, #0]
 800e804:	602b      	str	r3, [r5, #0]
 800e806:	b016      	add	sp, #88	@ 0x58
 800e808:	bd70      	pop	{r4, r5, r6, pc}
 800e80a:	466a      	mov	r2, sp
 800e80c:	f000 f848 	bl	800e8a0 <_fstat_r>
 800e810:	2800      	cmp	r0, #0
 800e812:	dbec      	blt.n	800e7ee <__swhatbuf_r+0x12>
 800e814:	9901      	ldr	r1, [sp, #4]
 800e816:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e81a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e81e:	4259      	negs	r1, r3
 800e820:	4159      	adcs	r1, r3
 800e822:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e826:	e7eb      	b.n	800e800 <__swhatbuf_r+0x24>

0800e828 <__smakebuf_r>:
 800e828:	898b      	ldrh	r3, [r1, #12]
 800e82a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e82c:	079d      	lsls	r5, r3, #30
 800e82e:	4606      	mov	r6, r0
 800e830:	460c      	mov	r4, r1
 800e832:	d507      	bpl.n	800e844 <__smakebuf_r+0x1c>
 800e834:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e838:	6023      	str	r3, [r4, #0]
 800e83a:	6123      	str	r3, [r4, #16]
 800e83c:	2301      	movs	r3, #1
 800e83e:	6163      	str	r3, [r4, #20]
 800e840:	b003      	add	sp, #12
 800e842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e844:	ab01      	add	r3, sp, #4
 800e846:	466a      	mov	r2, sp
 800e848:	f7ff ffc8 	bl	800e7dc <__swhatbuf_r>
 800e84c:	9f00      	ldr	r7, [sp, #0]
 800e84e:	4605      	mov	r5, r0
 800e850:	4639      	mov	r1, r7
 800e852:	4630      	mov	r0, r6
 800e854:	f7fd fbe0 	bl	800c018 <_malloc_r>
 800e858:	b948      	cbnz	r0, 800e86e <__smakebuf_r+0x46>
 800e85a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e85e:	059a      	lsls	r2, r3, #22
 800e860:	d4ee      	bmi.n	800e840 <__smakebuf_r+0x18>
 800e862:	f023 0303 	bic.w	r3, r3, #3
 800e866:	f043 0302 	orr.w	r3, r3, #2
 800e86a:	81a3      	strh	r3, [r4, #12]
 800e86c:	e7e2      	b.n	800e834 <__smakebuf_r+0xc>
 800e86e:	89a3      	ldrh	r3, [r4, #12]
 800e870:	6020      	str	r0, [r4, #0]
 800e872:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e876:	81a3      	strh	r3, [r4, #12]
 800e878:	9b01      	ldr	r3, [sp, #4]
 800e87a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e87e:	b15b      	cbz	r3, 800e898 <__smakebuf_r+0x70>
 800e880:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e884:	4630      	mov	r0, r6
 800e886:	f000 f81d 	bl	800e8c4 <_isatty_r>
 800e88a:	b128      	cbz	r0, 800e898 <__smakebuf_r+0x70>
 800e88c:	89a3      	ldrh	r3, [r4, #12]
 800e88e:	f023 0303 	bic.w	r3, r3, #3
 800e892:	f043 0301 	orr.w	r3, r3, #1
 800e896:	81a3      	strh	r3, [r4, #12]
 800e898:	89a3      	ldrh	r3, [r4, #12]
 800e89a:	431d      	orrs	r5, r3
 800e89c:	81a5      	strh	r5, [r4, #12]
 800e89e:	e7cf      	b.n	800e840 <__smakebuf_r+0x18>

0800e8a0 <_fstat_r>:
 800e8a0:	b538      	push	{r3, r4, r5, lr}
 800e8a2:	4d07      	ldr	r5, [pc, #28]	@ (800e8c0 <_fstat_r+0x20>)
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	4604      	mov	r4, r0
 800e8a8:	4608      	mov	r0, r1
 800e8aa:	4611      	mov	r1, r2
 800e8ac:	602b      	str	r3, [r5, #0]
 800e8ae:	f7f3 f979 	bl	8001ba4 <_fstat>
 800e8b2:	1c43      	adds	r3, r0, #1
 800e8b4:	d102      	bne.n	800e8bc <_fstat_r+0x1c>
 800e8b6:	682b      	ldr	r3, [r5, #0]
 800e8b8:	b103      	cbz	r3, 800e8bc <_fstat_r+0x1c>
 800e8ba:	6023      	str	r3, [r4, #0]
 800e8bc:	bd38      	pop	{r3, r4, r5, pc}
 800e8be:	bf00      	nop
 800e8c0:	2000215c 	.word	0x2000215c

0800e8c4 <_isatty_r>:
 800e8c4:	b538      	push	{r3, r4, r5, lr}
 800e8c6:	4d06      	ldr	r5, [pc, #24]	@ (800e8e0 <_isatty_r+0x1c>)
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	4604      	mov	r4, r0
 800e8cc:	4608      	mov	r0, r1
 800e8ce:	602b      	str	r3, [r5, #0]
 800e8d0:	f7f3 f978 	bl	8001bc4 <_isatty>
 800e8d4:	1c43      	adds	r3, r0, #1
 800e8d6:	d102      	bne.n	800e8de <_isatty_r+0x1a>
 800e8d8:	682b      	ldr	r3, [r5, #0]
 800e8da:	b103      	cbz	r3, 800e8de <_isatty_r+0x1a>
 800e8dc:	6023      	str	r3, [r4, #0]
 800e8de:	bd38      	pop	{r3, r4, r5, pc}
 800e8e0:	2000215c 	.word	0x2000215c

0800e8e4 <_init>:
 800e8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8e6:	bf00      	nop
 800e8e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8ea:	bc08      	pop	{r3}
 800e8ec:	469e      	mov	lr, r3
 800e8ee:	4770      	bx	lr

0800e8f0 <_fini>:
 800e8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8f2:	bf00      	nop
 800e8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8f6:	bc08      	pop	{r3}
 800e8f8:	469e      	mov	lr, r3
 800e8fa:	4770      	bx	lr
