
pocket_meteostation_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000121ac  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c10  08012350  08012350  00013350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013f60  08013f60  00015200  2**0
                  CONTENTS
  4 .ARM          00000008  08013f60  08013f60  00014f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013f68  08013f68  00015200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013f68  08013f68  00014f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013f6c  08013f6c  00014f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  08013f70  00015000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00015200  2**0
                  CONTENTS
 10 .bss          0000340c  20000200  20000200  00015200  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000360c  2000360c  00015200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00015200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002417c  00000000  00000000  00015230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005216  00000000  00000000  000393ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001da0  00000000  00000000  0003e5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016f1  00000000  00000000  00040368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c16  00000000  00000000  00041a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026491  00000000  00000000  0006866f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2cae  00000000  00000000  0008eb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001717ae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000092b8  00000000  00000000  001717f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0017aaac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000200 	.word	0x20000200
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012334 	.word	0x08012334

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000204 	.word	0x20000204
 80001dc:	08012334 	.word	0x08012334

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cb6:	f000 b9d3 	b.w	8001060 <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f86b 	bl	8000da4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f85e 	bl	8000da4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f84d 	bl	8000da4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f83f 	bl	8000da4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_d2lz>:
 8000d38:	b538      	push	{r3, r4, r5, lr}
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	4604      	mov	r4, r0
 8000d40:	460d      	mov	r5, r1
 8000d42:	f7ff fed3 	bl	8000aec <__aeabi_dcmplt>
 8000d46:	b928      	cbnz	r0, 8000d54 <__aeabi_d2lz+0x1c>
 8000d48:	4620      	mov	r0, r4
 8000d4a:	4629      	mov	r1, r5
 8000d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d50:	f000 b80a 	b.w	8000d68 <__aeabi_d2ulz>
 8000d54:	4620      	mov	r0, r4
 8000d56:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d5a:	f000 f805 	bl	8000d68 <__aeabi_d2ulz>
 8000d5e:	4240      	negs	r0, r0
 8000d60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d64:	bd38      	pop	{r3, r4, r5, pc}
 8000d66:	bf00      	nop

08000d68 <__aeabi_d2ulz>:
 8000d68:	b5d0      	push	{r4, r6, r7, lr}
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <__aeabi_d2ulz+0x34>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	4606      	mov	r6, r0
 8000d70:	460f      	mov	r7, r1
 8000d72:	f7ff fc49 	bl	8000608 <__aeabi_dmul>
 8000d76:	f7ff ff1f 	bl	8000bb8 <__aeabi_d2uiz>
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	f7ff fbca 	bl	8000514 <__aeabi_ui2d>
 8000d80:	4b07      	ldr	r3, [pc, #28]	@ (8000da0 <__aeabi_d2ulz+0x38>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	f7ff fc40 	bl	8000608 <__aeabi_dmul>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	4639      	mov	r1, r7
 8000d90:	f7ff fa82 	bl	8000298 <__aeabi_dsub>
 8000d94:	f7ff ff10 	bl	8000bb8 <__aeabi_d2uiz>
 8000d98:	4621      	mov	r1, r4
 8000d9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d9c:	3df00000 	.word	0x3df00000
 8000da0:	41f00000 	.word	0x41f00000

08000da4 <__udivmoddi4>:
 8000da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da8:	9d08      	ldr	r5, [sp, #32]
 8000daa:	460c      	mov	r4, r1
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d14e      	bne.n	8000e4e <__udivmoddi4+0xaa>
 8000db0:	4694      	mov	ip, r2
 8000db2:	458c      	cmp	ip, r1
 8000db4:	4686      	mov	lr, r0
 8000db6:	fab2 f282 	clz	r2, r2
 8000dba:	d962      	bls.n	8000e82 <__udivmoddi4+0xde>
 8000dbc:	b14a      	cbz	r2, 8000dd2 <__udivmoddi4+0x2e>
 8000dbe:	f1c2 0320 	rsb	r3, r2, #32
 8000dc2:	4091      	lsls	r1, r2
 8000dc4:	fa20 f303 	lsr.w	r3, r0, r3
 8000dc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dcc:	4319      	orrs	r1, r3
 8000dce:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd6:	fa1f f68c 	uxth.w	r6, ip
 8000dda:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000de2:	fb07 1114 	mls	r1, r7, r4, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb04 f106 	mul.w	r1, r4, r6
 8000dee:	4299      	cmp	r1, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x64>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dfa:	f080 8112 	bcs.w	8001022 <__udivmoddi4+0x27e>
 8000dfe:	4299      	cmp	r1, r3
 8000e00:	f240 810f 	bls.w	8001022 <__udivmoddi4+0x27e>
 8000e04:	3c02      	subs	r4, #2
 8000e06:	4463      	add	r3, ip
 8000e08:	1a59      	subs	r1, r3, r1
 8000e0a:	fa1f f38e 	uxth.w	r3, lr
 8000e0e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e12:	fb07 1110 	mls	r1, r7, r0, r1
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f606 	mul.w	r6, r0, r6
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	d90a      	bls.n	8000e38 <__udivmoddi4+0x94>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000e2a:	f080 80fc 	bcs.w	8001026 <__udivmoddi4+0x282>
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	f240 80f9 	bls.w	8001026 <__udivmoddi4+0x282>
 8000e34:	4463      	add	r3, ip
 8000e36:	3802      	subs	r0, #2
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e3e:	2100      	movs	r1, #0
 8000e40:	b11d      	cbz	r5, 8000e4a <__udivmoddi4+0xa6>
 8000e42:	40d3      	lsrs	r3, r2
 8000e44:	2200      	movs	r2, #0
 8000e46:	e9c5 3200 	strd	r3, r2, [r5]
 8000e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d905      	bls.n	8000e5e <__udivmoddi4+0xba>
 8000e52:	b10d      	cbz	r5, 8000e58 <__udivmoddi4+0xb4>
 8000e54:	e9c5 0100 	strd	r0, r1, [r5]
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e7f5      	b.n	8000e4a <__udivmoddi4+0xa6>
 8000e5e:	fab3 f183 	clz	r1, r3
 8000e62:	2900      	cmp	r1, #0
 8000e64:	d146      	bne.n	8000ef4 <__udivmoddi4+0x150>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d302      	bcc.n	8000e70 <__udivmoddi4+0xcc>
 8000e6a:	4290      	cmp	r0, r2
 8000e6c:	f0c0 80f0 	bcc.w	8001050 <__udivmoddi4+0x2ac>
 8000e70:	1a86      	subs	r6, r0, r2
 8000e72:	eb64 0303 	sbc.w	r3, r4, r3
 8000e76:	2001      	movs	r0, #1
 8000e78:	2d00      	cmp	r5, #0
 8000e7a:	d0e6      	beq.n	8000e4a <__udivmoddi4+0xa6>
 8000e7c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e80:	e7e3      	b.n	8000e4a <__udivmoddi4+0xa6>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	f040 8090 	bne.w	8000fa8 <__udivmoddi4+0x204>
 8000e88:	eba1 040c 	sub.w	r4, r1, ip
 8000e8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e90:	fa1f f78c 	uxth.w	r7, ip
 8000e94:	2101      	movs	r1, #1
 8000e96:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e9a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e9e:	fb08 4416 	mls	r4, r8, r6, r4
 8000ea2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea6:	fb07 f006 	mul.w	r0, r7, r6
 8000eaa:	4298      	cmp	r0, r3
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x11c>
 8000eae:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0x11a>
 8000eb8:	4298      	cmp	r0, r3
 8000eba:	f200 80cd 	bhi.w	8001058 <__udivmoddi4+0x2b4>
 8000ebe:	4626      	mov	r6, r4
 8000ec0:	1a1c      	subs	r4, r3, r0
 8000ec2:	fa1f f38e 	uxth.w	r3, lr
 8000ec6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eca:	fb08 4410 	mls	r4, r8, r0, r4
 8000ece:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ed2:	fb00 f707 	mul.w	r7, r0, r7
 8000ed6:	429f      	cmp	r7, r3
 8000ed8:	d908      	bls.n	8000eec <__udivmoddi4+0x148>
 8000eda:	eb1c 0303 	adds.w	r3, ip, r3
 8000ede:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000ee2:	d202      	bcs.n	8000eea <__udivmoddi4+0x146>
 8000ee4:	429f      	cmp	r7, r3
 8000ee6:	f200 80b0 	bhi.w	800104a <__udivmoddi4+0x2a6>
 8000eea:	4620      	mov	r0, r4
 8000eec:	1bdb      	subs	r3, r3, r7
 8000eee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ef2:	e7a5      	b.n	8000e40 <__udivmoddi4+0x9c>
 8000ef4:	f1c1 0620 	rsb	r6, r1, #32
 8000ef8:	408b      	lsls	r3, r1
 8000efa:	fa22 f706 	lsr.w	r7, r2, r6
 8000efe:	431f      	orrs	r7, r3
 8000f00:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f04:	fa04 f301 	lsl.w	r3, r4, r1
 8000f08:	ea43 030c 	orr.w	r3, r3, ip
 8000f0c:	40f4      	lsrs	r4, r6
 8000f0e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f12:	0c38      	lsrs	r0, r7, #16
 8000f14:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f18:	fbb4 fef0 	udiv	lr, r4, r0
 8000f1c:	fa1f fc87 	uxth.w	ip, r7
 8000f20:	fb00 441e 	mls	r4, r0, lr, r4
 8000f24:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f28:	fb0e f90c 	mul.w	r9, lr, ip
 8000f2c:	45a1      	cmp	r9, r4
 8000f2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f32:	d90a      	bls.n	8000f4a <__udivmoddi4+0x1a6>
 8000f34:	193c      	adds	r4, r7, r4
 8000f36:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f3a:	f080 8084 	bcs.w	8001046 <__udivmoddi4+0x2a2>
 8000f3e:	45a1      	cmp	r9, r4
 8000f40:	f240 8081 	bls.w	8001046 <__udivmoddi4+0x2a2>
 8000f44:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f48:	443c      	add	r4, r7
 8000f4a:	eba4 0409 	sub.w	r4, r4, r9
 8000f4e:	fa1f f983 	uxth.w	r9, r3
 8000f52:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f56:	fb00 4413 	mls	r4, r0, r3, r4
 8000f5a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f5e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f62:	45a4      	cmp	ip, r4
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x1d2>
 8000f66:	193c      	adds	r4, r7, r4
 8000f68:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f6c:	d267      	bcs.n	800103e <__udivmoddi4+0x29a>
 8000f6e:	45a4      	cmp	ip, r4
 8000f70:	d965      	bls.n	800103e <__udivmoddi4+0x29a>
 8000f72:	3b02      	subs	r3, #2
 8000f74:	443c      	add	r4, r7
 8000f76:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f7a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f7e:	eba4 040c 	sub.w	r4, r4, ip
 8000f82:	429c      	cmp	r4, r3
 8000f84:	46ce      	mov	lr, r9
 8000f86:	469c      	mov	ip, r3
 8000f88:	d351      	bcc.n	800102e <__udivmoddi4+0x28a>
 8000f8a:	d04e      	beq.n	800102a <__udivmoddi4+0x286>
 8000f8c:	b155      	cbz	r5, 8000fa4 <__udivmoddi4+0x200>
 8000f8e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f92:	eb64 040c 	sbc.w	r4, r4, ip
 8000f96:	fa04 f606 	lsl.w	r6, r4, r6
 8000f9a:	40cb      	lsrs	r3, r1
 8000f9c:	431e      	orrs	r6, r3
 8000f9e:	40cc      	lsrs	r4, r1
 8000fa0:	e9c5 6400 	strd	r6, r4, [r5]
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	e750      	b.n	8000e4a <__udivmoddi4+0xa6>
 8000fa8:	f1c2 0320 	rsb	r3, r2, #32
 8000fac:	fa20 f103 	lsr.w	r1, r0, r3
 8000fb0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fb4:	fa24 f303 	lsr.w	r3, r4, r3
 8000fb8:	4094      	lsls	r4, r2
 8000fba:	430c      	orrs	r4, r1
 8000fbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fc0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fc4:	fa1f f78c 	uxth.w	r7, ip
 8000fc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fcc:	fb08 3110 	mls	r1, r8, r0, r3
 8000fd0:	0c23      	lsrs	r3, r4, #16
 8000fd2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fd6:	fb00 f107 	mul.w	r1, r0, r7
 8000fda:	4299      	cmp	r1, r3
 8000fdc:	d908      	bls.n	8000ff0 <__udivmoddi4+0x24c>
 8000fde:	eb1c 0303 	adds.w	r3, ip, r3
 8000fe2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fe6:	d22c      	bcs.n	8001042 <__udivmoddi4+0x29e>
 8000fe8:	4299      	cmp	r1, r3
 8000fea:	d92a      	bls.n	8001042 <__udivmoddi4+0x29e>
 8000fec:	3802      	subs	r0, #2
 8000fee:	4463      	add	r3, ip
 8000ff0:	1a5b      	subs	r3, r3, r1
 8000ff2:	b2a4      	uxth	r4, r4
 8000ff4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ff8:	fb08 3311 	mls	r3, r8, r1, r3
 8000ffc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001000:	fb01 f307 	mul.w	r3, r1, r7
 8001004:	42a3      	cmp	r3, r4
 8001006:	d908      	bls.n	800101a <__udivmoddi4+0x276>
 8001008:	eb1c 0404 	adds.w	r4, ip, r4
 800100c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8001010:	d213      	bcs.n	800103a <__udivmoddi4+0x296>
 8001012:	42a3      	cmp	r3, r4
 8001014:	d911      	bls.n	800103a <__udivmoddi4+0x296>
 8001016:	3902      	subs	r1, #2
 8001018:	4464      	add	r4, ip
 800101a:	1ae4      	subs	r4, r4, r3
 800101c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001020:	e739      	b.n	8000e96 <__udivmoddi4+0xf2>
 8001022:	4604      	mov	r4, r0
 8001024:	e6f0      	b.n	8000e08 <__udivmoddi4+0x64>
 8001026:	4608      	mov	r0, r1
 8001028:	e706      	b.n	8000e38 <__udivmoddi4+0x94>
 800102a:	45c8      	cmp	r8, r9
 800102c:	d2ae      	bcs.n	8000f8c <__udivmoddi4+0x1e8>
 800102e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001032:	eb63 0c07 	sbc.w	ip, r3, r7
 8001036:	3801      	subs	r0, #1
 8001038:	e7a8      	b.n	8000f8c <__udivmoddi4+0x1e8>
 800103a:	4631      	mov	r1, r6
 800103c:	e7ed      	b.n	800101a <__udivmoddi4+0x276>
 800103e:	4603      	mov	r3, r0
 8001040:	e799      	b.n	8000f76 <__udivmoddi4+0x1d2>
 8001042:	4630      	mov	r0, r6
 8001044:	e7d4      	b.n	8000ff0 <__udivmoddi4+0x24c>
 8001046:	46d6      	mov	lr, sl
 8001048:	e77f      	b.n	8000f4a <__udivmoddi4+0x1a6>
 800104a:	4463      	add	r3, ip
 800104c:	3802      	subs	r0, #2
 800104e:	e74d      	b.n	8000eec <__udivmoddi4+0x148>
 8001050:	4606      	mov	r6, r0
 8001052:	4623      	mov	r3, r4
 8001054:	4608      	mov	r0, r1
 8001056:	e70f      	b.n	8000e78 <__udivmoddi4+0xd4>
 8001058:	3e02      	subs	r6, #2
 800105a:	4463      	add	r3, ip
 800105c:	e730      	b.n	8000ec0 <__udivmoddi4+0x11c>
 800105e:	bf00      	nop

08001060 <__aeabi_idiv0>:
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <Error>:
extern char str1[100];
BME280_CalibData CalibData;
int32_t temper_int;
//------------------------------------------------
void Error(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  LED_OFF;
 8001068:	2200      	movs	r2, #0
 800106a:	2120      	movs	r1, #32
 800106c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001070:	f004 fdb2 	bl	8005bd8 <HAL_GPIO_WritePin>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}

08001078 <I2Cx_WriteData>:
//------------------------------------------------
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af04      	add	r7, sp, #16
 800107e:	4603      	mov	r3, r0
 8001080:	80fb      	strh	r3, [r7, #6]
 8001082:	460b      	mov	r3, r1
 8001084:	717b      	strb	r3, [r7, #5]
 8001086:	4613      	mov	r3, r2
 8001088:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 800108e:	797b      	ldrb	r3, [r7, #5]
 8001090:	b29a      	uxth	r2, r3
 8001092:	88f9      	ldrh	r1, [r7, #6]
 8001094:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001098:	9302      	str	r3, [sp, #8]
 800109a:	2301      	movs	r3, #1
 800109c:	9301      	str	r3, [sp, #4]
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2301      	movs	r3, #1
 80010a4:	4806      	ldr	r0, [pc, #24]	@ (80010c0 <I2Cx_WriteData+0x48>)
 80010a6:	f005 f873 	bl	8006190 <HAL_I2C_Mem_Write>
 80010aa:	4603      	mov	r3, r0
 80010ac:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <I2Cx_WriteData+0x40>
 80010b4:	f7ff ffd6 	bl	8001064 <Error>
}
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000350 	.word	0x20000350

080010c4 <I2Cx_ReadData>:
//------------------------------------------------
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af04      	add	r7, sp, #16
 80010ca:	4603      	mov	r3, r0
 80010cc:	460a      	mov	r2, r1
 80010ce:	80fb      	strh	r3, [r7, #6]
 80010d0:	4613      	mov	r3, r2
 80010d2:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80010d4:	2300      	movs	r3, #0
 80010d6:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	73bb      	strb	r3, [r7, #14]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 80010dc:	797b      	ldrb	r3, [r7, #5]
 80010de:	b29a      	uxth	r2, r3
 80010e0:	88f9      	ldrh	r1, [r7, #6]
 80010e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010e6:	9302      	str	r3, [sp, #8]
 80010e8:	2301      	movs	r3, #1
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	f107 030e 	add.w	r3, r7, #14
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2301      	movs	r3, #1
 80010f4:	4807      	ldr	r0, [pc, #28]	@ (8001114 <I2Cx_ReadData+0x50>)
 80010f6:	f005 f95f 	bl	80063b8 <HAL_I2C_Mem_Read>
 80010fa:	4603      	mov	r3, r0
 80010fc:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <I2Cx_ReadData+0x44>
 8001104:	f7ff ffae 	bl	8001064 <Error>
  return value;
 8001108:	7bbb      	ldrb	r3, [r7, #14]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000350 	.word	0x20000350

08001118 <I2Cx_ReadData16>:
//------------------------------------------------
static void I2Cx_ReadData16(uint16_t Addr, uint8_t Reg, uint16_t *Value)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af04      	add	r7, sp, #16
 800111e:	4603      	mov	r3, r0
 8001120:	603a      	str	r2, [r7, #0]
 8001122:	80fb      	strh	r3, [r7, #6]
 8001124:	460b      	mov	r3, r1
 8001126:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001128:	2300      	movs	r3, #0
 800112a:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 2, 0x10000);
 800112c:	797b      	ldrb	r3, [r7, #5]
 800112e:	b29a      	uxth	r2, r3
 8001130:	88f9      	ldrh	r1, [r7, #6]
 8001132:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	2302      	movs	r3, #2
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2301      	movs	r3, #1
 8001142:	4807      	ldr	r0, [pc, #28]	@ (8001160 <I2Cx_ReadData16+0x48>)
 8001144:	f005 f938 	bl	80063b8 <HAL_I2C_Mem_Read>
 8001148:	4603      	mov	r3, r0
 800114a:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <I2Cx_ReadData16+0x3e>
 8001152:	f7ff ff87 	bl	8001064 <Error>
}
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000350 	.word	0x20000350

08001164 <I2Cx_ReadData24>:
//------------------------------------------------
static void I2Cx_ReadData24(uint16_t Addr, uint8_t Reg, uint32_t *Value)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af04      	add	r7, sp, #16
 800116a:	4603      	mov	r3, r0
 800116c:	603a      	str	r2, [r7, #0]
 800116e:	80fb      	strh	r3, [r7, #6]
 8001170:	460b      	mov	r3, r1
 8001172:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001174:	2300      	movs	r3, #0
 8001176:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
 8001178:	797b      	ldrb	r3, [r7, #5]
 800117a:	b29a      	uxth	r2, r3
 800117c:	88f9      	ldrh	r1, [r7, #6]
 800117e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001182:	9302      	str	r3, [sp, #8]
 8001184:	2303      	movs	r3, #3
 8001186:	9301      	str	r3, [sp, #4]
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	2301      	movs	r3, #1
 800118e:	4807      	ldr	r0, [pc, #28]	@ (80011ac <I2Cx_ReadData24+0x48>)
 8001190:	f005 f912 	bl	80063b8 <HAL_I2C_Mem_Read>
 8001194:	4603      	mov	r3, r0
 8001196:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <I2Cx_ReadData24+0x3e>
 800119e:	f7ff ff61 	bl	8001064 <Error>
}
 80011a2:	bf00      	nop
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000350 	.word	0x20000350

080011b0 <BME280_WriteReg>:
//------------------------------------------------
void BME280_WriteReg(uint8_t Reg, uint8_t Value)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	460a      	mov	r2, r1
 80011ba:	71fb      	strb	r3, [r7, #7]
 80011bc:	4613      	mov	r3, r2
 80011be:	71bb      	strb	r3, [r7, #6]
  I2Cx_WriteData(BME280_ADDRESS, Reg, Value);
 80011c0:	79ba      	ldrb	r2, [r7, #6]
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	4619      	mov	r1, r3
 80011c6:	20ec      	movs	r0, #236	@ 0xec
 80011c8:	f7ff ff56 	bl	8001078 <I2Cx_WriteData>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <BME280_ReadReg>:
//------------------------------------------------
uint8_t BME280_ReadReg(uint8_t Reg)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
  uint8_t res = I2Cx_ReadData(BME280_ADDRESS,Reg);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4619      	mov	r1, r3
 80011e2:	20ec      	movs	r0, #236	@ 0xec
 80011e4:	f7ff ff6e 	bl	80010c4 <I2Cx_ReadData>
 80011e8:	4603      	mov	r3, r0
 80011ea:	73fb      	strb	r3, [r7, #15]
  return res;
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <BME280_ReadReg_U16>:
//------------------------------------------------
void BME280_ReadReg_U16(uint8_t Reg, uint16_t *Value)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	6039      	str	r1, [r7, #0]
 8001200:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg,Value);
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	4619      	mov	r1, r3
 8001208:	20ec      	movs	r0, #236	@ 0xec
 800120a:	f7ff ff85 	bl	8001118 <I2Cx_ReadData16>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <BME280_ReadReg_S16>:
//------------------------------------------------
void BME280_ReadReg_S16(uint8_t Reg, int16_t *Value)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	4603      	mov	r3, r0
 800121e:	6039      	str	r1, [r7, #0]
 8001220:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg, (uint16_t*) Value);
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	4619      	mov	r1, r3
 8001228:	20ec      	movs	r0, #236	@ 0xec
 800122a:	f7ff ff75 	bl	8001118 <I2Cx_ReadData16>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <BME280_ReadReg_BE_S16>:
//------------------------------------------------
void BME280_ReadReg_BE_S16(uint8_t Reg, int16_t *Value)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	6039      	str	r1, [r7, #0]
 8001240:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg,(uint16_t*)Value);
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	4619      	mov	r1, r3
 8001248:	20ec      	movs	r0, #236	@ 0xec
 800124a:	f7ff ff65 	bl	8001118 <I2Cx_ReadData16>
  *(uint16_t *) Value = be16toword(*(uint16_t *) Value);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	0a1b      	lsrs	r3, r3, #8
 8001254:	b29b      	uxth	r3, r3
 8001256:	b21a      	sxth	r2, r3
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	021b      	lsls	r3, r3, #8
 800125e:	b21b      	sxth	r3, r3
 8001260:	4313      	orrs	r3, r2
 8001262:	b21b      	sxth	r3, r3
 8001264:	b29a      	uxth	r2, r3
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	801a      	strh	r2, [r3, #0]
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <BME280_ReadReg_BE_U24>:
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
  *(uint32_t *) Value &= 0x00FFFFFF;
}
//------------------------------------------------
void BME280_ReadReg_BE_U24(uint8_t Reg, uint32_t *Value)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	6039      	str	r1, [r7, #0]
 800127c:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	4619      	mov	r1, r3
 8001284:	20ec      	movs	r0, #236	@ 0xec
 8001286:	f7ff ff6d 	bl	8001164 <I2Cx_ReadData24>
  *(uint32_t *) Value = be24toword(*(uint32_t *) Value) & 0x00FFFFFF;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	0c1b      	lsrs	r3, r3, #16
 8001290:	b2da      	uxtb	r2, r3
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800129a:	431a      	orrs	r2, r3
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	041b      	lsls	r3, r3, #16
 80012a2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80012a6:	4313      	orrs	r3, r2
 80012a8:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	601a      	str	r2, [r3, #0]
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <BME280_ReadStatus>:
//------------------------------------------------
uint8_t BME280_ReadStatus(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
  //clear unuset bits
  uint8_t res = BME280_ReadReg(BME280_REGISTER_STATUS)&0x09;
 80012be:	20f3      	movs	r0, #243	@ 0xf3
 80012c0:	f7ff ff88 	bl	80011d4 <BME280_ReadReg>
 80012c4:	4603      	mov	r3, r0
 80012c6:	f003 0309 	and.w	r3, r3, #9
 80012ca:	71fb      	strb	r3, [r7, #7]
  return res;
 80012cc:	79fb      	ldrb	r3, [r7, #7]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <BME280_ReadCoefficients>:
//------------------------------------------------
void BME280_ReadCoefficients(void)
{
 80012d8:	b598      	push	{r3, r4, r7, lr}
 80012da:	af00      	add	r7, sp, #0
  BME280_ReadReg_U16(BME280_REGISTER_DIG_T1,&CalibData.dig_T1);
 80012dc:	4937      	ldr	r1, [pc, #220]	@ (80013bc <BME280_ReadCoefficients+0xe4>)
 80012de:	2088      	movs	r0, #136	@ 0x88
 80012e0:	f7ff ff89 	bl	80011f6 <BME280_ReadReg_U16>
//  sprintf(str1, "DIG_T1: %u\r\n", CalibData.dig_T1);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T2,&CalibData.dig_T2);
 80012e4:	4936      	ldr	r1, [pc, #216]	@ (80013c0 <BME280_ReadCoefficients+0xe8>)
 80012e6:	208a      	movs	r0, #138	@ 0x8a
 80012e8:	f7ff ff95 	bl	8001216 <BME280_ReadReg_S16>
//  sprintf(str1, "DIG_T2: %d\r\n", CalibData.dig_T2);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T3,&CalibData.dig_T3);
 80012ec:	4935      	ldr	r1, [pc, #212]	@ (80013c4 <BME280_ReadCoefficients+0xec>)
 80012ee:	208c      	movs	r0, #140	@ 0x8c
 80012f0:	f7ff ff91 	bl	8001216 <BME280_ReadReg_S16>
//  sprintf(str1, "DIG_T3: %d\r\n", CalibData.dig_T3);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_U16(BME280_REGISTER_DIG_P1,&CalibData.dig_P1);
 80012f4:	4934      	ldr	r1, [pc, #208]	@ (80013c8 <BME280_ReadCoefficients+0xf0>)
 80012f6:	208e      	movs	r0, #142	@ 0x8e
 80012f8:	f7ff ff7d 	bl	80011f6 <BME280_ReadReg_U16>
//  sprintf(str1, "DIG_P1: %u\r\n", CalibData.dig_P1);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P2,&CalibData.dig_P2);
 80012fc:	4933      	ldr	r1, [pc, #204]	@ (80013cc <BME280_ReadCoefficients+0xf4>)
 80012fe:	2090      	movs	r0, #144	@ 0x90
 8001300:	f7ff ff89 	bl	8001216 <BME280_ReadReg_S16>
//  sprintf(str1, "DIG_P2: %d\r\n", CalibData.dig_P2);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P3,&CalibData.dig_P3);
 8001304:	4932      	ldr	r1, [pc, #200]	@ (80013d0 <BME280_ReadCoefficients+0xf8>)
 8001306:	2092      	movs	r0, #146	@ 0x92
 8001308:	f7ff ff85 	bl	8001216 <BME280_ReadReg_S16>
//  sprintf(str1, "DIG_P3: %d\r\n", CalibData.dig_P3);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P4,&CalibData.dig_P4);
 800130c:	4931      	ldr	r1, [pc, #196]	@ (80013d4 <BME280_ReadCoefficients+0xfc>)
 800130e:	2094      	movs	r0, #148	@ 0x94
 8001310:	f7ff ff81 	bl	8001216 <BME280_ReadReg_S16>
//  sprintf(str1, "DIG_P4: %d\r\n", CalibData.dig_P4);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P5,&CalibData.dig_P5);
 8001314:	4930      	ldr	r1, [pc, #192]	@ (80013d8 <BME280_ReadCoefficients+0x100>)
 8001316:	2096      	movs	r0, #150	@ 0x96
 8001318:	f7ff ff7d 	bl	8001216 <BME280_ReadReg_S16>
//  sprintf(str1, "DIG_P5: %d\r\n", CalibData.dig_P5);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P6,&CalibData.dig_P6);
 800131c:	492f      	ldr	r1, [pc, #188]	@ (80013dc <BME280_ReadCoefficients+0x104>)
 800131e:	2098      	movs	r0, #152	@ 0x98
 8001320:	f7ff ff79 	bl	8001216 <BME280_ReadReg_S16>
//  sprintf(str1, "DIG_P6: %d\r\n", CalibData.dig_P6);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P7,&CalibData.dig_P7);
 8001324:	492e      	ldr	r1, [pc, #184]	@ (80013e0 <BME280_ReadCoefficients+0x108>)
 8001326:	209a      	movs	r0, #154	@ 0x9a
 8001328:	f7ff ff75 	bl	8001216 <BME280_ReadReg_S16>
//  sprintf(str1, "DIG_P7: %d\r\n", CalibData.dig_P7);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P8,&CalibData.dig_P8);
 800132c:	492d      	ldr	r1, [pc, #180]	@ (80013e4 <BME280_ReadCoefficients+0x10c>)
 800132e:	209c      	movs	r0, #156	@ 0x9c
 8001330:	f7ff ff71 	bl	8001216 <BME280_ReadReg_S16>
//  sprintf(str1, "DIG_P8: %d\r\n", CalibData.dig_P8);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P9,&CalibData.dig_P9);
 8001334:	492c      	ldr	r1, [pc, #176]	@ (80013e8 <BME280_ReadCoefficients+0x110>)
 8001336:	209e      	movs	r0, #158	@ 0x9e
 8001338:	f7ff ff6d 	bl	8001216 <BME280_ReadReg_S16>
//  sprintf(str1, "DIG_P9: %d\r\n", CalibData.dig_P9);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  CalibData.dig_H1 = BME280_ReadReg(BME280_REGISTER_DIG_H1);
 800133c:	20a1      	movs	r0, #161	@ 0xa1
 800133e:	f7ff ff49 	bl	80011d4 <BME280_ReadReg>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	4b1d      	ldr	r3, [pc, #116]	@ (80013bc <BME280_ReadCoefficients+0xe4>)
 8001348:	761a      	strb	r2, [r3, #24]
//  sprintf(str1, "DIG_H1: %d\r\n", CalibData.dig_H1);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  BME280_ReadReg_S16(BME280_REGISTER_DIG_H2,&CalibData.dig_H2);
 800134a:	4928      	ldr	r1, [pc, #160]	@ (80013ec <BME280_ReadCoefficients+0x114>)
 800134c:	20e1      	movs	r0, #225	@ 0xe1
 800134e:	f7ff ff62 	bl	8001216 <BME280_ReadReg_S16>
//  sprintf(str1, "DIG_H2: %d\r\n", CalibData.dig_H2);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  CalibData.dig_H3 = BME280_ReadReg(BME280_REGISTER_DIG_H3);
 8001352:	20e3      	movs	r0, #227	@ 0xe3
 8001354:	f7ff ff3e 	bl	80011d4 <BME280_ReadReg>
 8001358:	4603      	mov	r3, r0
 800135a:	461a      	mov	r2, r3
 800135c:	4b17      	ldr	r3, [pc, #92]	@ (80013bc <BME280_ReadCoefficients+0xe4>)
 800135e:	771a      	strb	r2, [r3, #28]
//  sprintf(str1, "DIG_H3: %d\r\n", CalibData.dig_H3);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  CalibData.dig_H4 = (BME280_ReadReg(BME280_REGISTER_DIG_H4) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H4+1) & 0xF);
 8001360:	20e4      	movs	r0, #228	@ 0xe4
 8001362:	f7ff ff37 	bl	80011d4 <BME280_ReadReg>
 8001366:	4603      	mov	r3, r0
 8001368:	011b      	lsls	r3, r3, #4
 800136a:	b21c      	sxth	r4, r3
 800136c:	20e5      	movs	r0, #229	@ 0xe5
 800136e:	f7ff ff31 	bl	80011d4 <BME280_ReadReg>
 8001372:	4603      	mov	r3, r0
 8001374:	b21b      	sxth	r3, r3
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	b21b      	sxth	r3, r3
 800137c:	4323      	orrs	r3, r4
 800137e:	b21a      	sxth	r2, r3
 8001380:	4b0e      	ldr	r3, [pc, #56]	@ (80013bc <BME280_ReadCoefficients+0xe4>)
 8001382:	83da      	strh	r2, [r3, #30]
//  sprintf(str1, "DIG_H4: %d\r\n", CalibData.dig_H4);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  CalibData.dig_H5 = (BME280_ReadReg(BME280_REGISTER_DIG_H5+1) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H5) >> 4);
 8001384:	20e6      	movs	r0, #230	@ 0xe6
 8001386:	f7ff ff25 	bl	80011d4 <BME280_ReadReg>
 800138a:	4603      	mov	r3, r0
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	b21c      	sxth	r4, r3
 8001390:	20e5      	movs	r0, #229	@ 0xe5
 8001392:	f7ff ff1f 	bl	80011d4 <BME280_ReadReg>
 8001396:	4603      	mov	r3, r0
 8001398:	091b      	lsrs	r3, r3, #4
 800139a:	b2db      	uxtb	r3, r3
 800139c:	b21b      	sxth	r3, r3
 800139e:	4323      	orrs	r3, r4
 80013a0:	b21a      	sxth	r2, r3
 80013a2:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <BME280_ReadCoefficients+0xe4>)
 80013a4:	841a      	strh	r2, [r3, #32]
//  sprintf(str1, "DIG_H5: %d\r\n", CalibData.dig_H5);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  CalibData.dig_H6 = (int8_t)BME280_ReadReg(BME280_REGISTER_DIG_H6);
 80013a6:	20e7      	movs	r0, #231	@ 0xe7
 80013a8:	f7ff ff14 	bl	80011d4 <BME280_ReadReg>
 80013ac:	4603      	mov	r3, r0
 80013ae:	b25a      	sxtb	r2, r3
 80013b0:	4b02      	ldr	r3, [pc, #8]	@ (80013bc <BME280_ReadCoefficients+0xe4>)
 80013b2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
//  sprintf(str1, "DIG_H6: %d\r\n", CalibData.dig_H3);
//  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
}
 80013b6:	bf00      	nop
 80013b8:	bd98      	pop	{r3, r4, r7, pc}
 80013ba:	bf00      	nop
 80013bc:	2000021c 	.word	0x2000021c
 80013c0:	2000021e 	.word	0x2000021e
 80013c4:	20000220 	.word	0x20000220
 80013c8:	20000222 	.word	0x20000222
 80013cc:	20000224 	.word	0x20000224
 80013d0:	20000226 	.word	0x20000226
 80013d4:	20000228 	.word	0x20000228
 80013d8:	2000022a 	.word	0x2000022a
 80013dc:	2000022c 	.word	0x2000022c
 80013e0:	2000022e 	.word	0x2000022e
 80013e4:	20000230 	.word	0x20000230
 80013e8:	20000232 	.word	0x20000232
 80013ec:	20000236 	.word	0x20000236

080013f0 <BME280_SetStandby>:
//------------------------------------------------
void BME280_SetStandby(uint8_t tsb) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_STBY_MSK;
 80013fa:	20f5      	movs	r0, #245	@ 0xf5
 80013fc:	f7ff feea 	bl	80011d4 <BME280_ReadReg>
 8001400:	4603      	mov	r3, r0
 8001402:	f003 031f 	and.w	r3, r3, #31
 8001406:	73fb      	strb	r3, [r7, #15]
  reg |= tsb & BME280_STBY_MSK;
 8001408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140c:	f023 031f 	bic.w	r3, r3, #31
 8001410:	b25a      	sxtb	r2, r3
 8001412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001416:	4313      	orrs	r3, r2
 8001418:	b25b      	sxtb	r3, r3
 800141a:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	4619      	mov	r1, r3
 8001420:	20f5      	movs	r0, #245	@ 0xf5
 8001422:	f7ff fec5 	bl	80011b0 <BME280_WriteReg>
}
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <BME280_SetFilter>:
//------------------------------------------------
  void BME280_SetFilter(uint8_t filter) {
 800142e:	b580      	push	{r7, lr}
 8001430:	b084      	sub	sp, #16
 8001432:	af00      	add	r7, sp, #0
 8001434:	4603      	mov	r3, r0
 8001436:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_FILTER_MSK;
 8001438:	20f5      	movs	r0, #245	@ 0xf5
 800143a:	f7ff fecb 	bl	80011d4 <BME280_ReadReg>
 800143e:	4603      	mov	r3, r0
 8001440:	f023 031c 	bic.w	r3, r3, #28
 8001444:	73fb      	strb	r3, [r7, #15]
  reg |= filter & BME280_FILTER_MSK;
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	f003 031c 	and.w	r3, r3, #28
 800144e:	b25a      	sxtb	r2, r3
 8001450:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001454:	4313      	orrs	r3, r2
 8001456:	b25b      	sxtb	r3, r3
 8001458:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	4619      	mov	r1, r3
 800145e:	20f5      	movs	r0, #245	@ 0xf5
 8001460:	f7ff fea6 	bl	80011b0 <BME280_WriteReg>
}
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <BME280_SetOversamplingTemper>:
//------------------------------------------------
void BME280_SetOversamplingTemper(uint8_t osrs)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_T_MSK;
 8001476:	20f4      	movs	r0, #244	@ 0xf4
 8001478:	f7ff feac 	bl	80011d4 <BME280_ReadReg>
 800147c:	4603      	mov	r3, r0
 800147e:	f003 031f 	and.w	r3, r3, #31
 8001482:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_T_MSK;
 8001484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001488:	f023 031f 	bic.w	r3, r3, #31
 800148c:	b25a      	sxtb	r2, r3
 800148e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001492:	4313      	orrs	r3, r2
 8001494:	b25b      	sxtb	r3, r3
 8001496:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	4619      	mov	r1, r3
 800149c:	20f4      	movs	r0, #244	@ 0xf4
 800149e:	f7ff fe87 	bl	80011b0 <BME280_WriteReg>
}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <BME280_SetOversamplingPressure>:
//------------------------------------------------
void BME280_SetOversamplingPressure(uint8_t osrs)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b084      	sub	sp, #16
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	4603      	mov	r3, r0
 80014b2:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_P_MSK;
 80014b4:	20f4      	movs	r0, #244	@ 0xf4
 80014b6:	f7ff fe8d 	bl	80011d4 <BME280_ReadReg>
 80014ba:	4603      	mov	r3, r0
 80014bc:	f023 031c 	bic.w	r3, r3, #28
 80014c0:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_P_MSK;
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	f003 031c 	and.w	r3, r3, #28
 80014ca:	b25a      	sxtb	r2, r3
 80014cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	b25b      	sxtb	r3, r3
 80014d4:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	4619      	mov	r1, r3
 80014da:	20f4      	movs	r0, #244	@ 0xf4
 80014dc:	f7ff fe68 	bl	80011b0 <BME280_WriteReg>
}
 80014e0:	bf00      	nop
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <BME280_SetOversamplingHum>:
//------------------------------------------------
void BME280_SetOversamplingHum(uint8_t osrs)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_HUM) & ~BME280_OSRS_H_MSK;
 80014f2:	20f2      	movs	r0, #242	@ 0xf2
 80014f4:	f7ff fe6e 	bl	80011d4 <BME280_ReadReg>
 80014f8:	4603      	mov	r3, r0
 80014fa:	f023 0307 	bic.w	r3, r3, #7
 80014fe:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_H_MSK;
 8001500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	b25a      	sxtb	r2, r3
 800150a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150e:	4313      	orrs	r3, r2
 8001510:	b25b      	sxtb	r3, r3
 8001512:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_HUM,reg);
 8001514:	7bfb      	ldrb	r3, [r7, #15]
 8001516:	4619      	mov	r1, r3
 8001518:	20f2      	movs	r0, #242	@ 0xf2
 800151a:	f7ff fe49 	bl	80011b0 <BME280_WriteReg>
  //The 'ctrl_hum' register needs to be written
  //after changing 'ctrl_hum' for the changes to become effwctive.
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 800151e:	20f4      	movs	r0, #244	@ 0xf4
 8001520:	f7ff fe58 	bl	80011d4 <BME280_ReadReg>
 8001524:	4603      	mov	r3, r0
 8001526:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	4619      	mov	r1, r3
 800152c:	20f4      	movs	r0, #244	@ 0xf4
 800152e:	f7ff fe3f 	bl	80011b0 <BME280_WriteReg>
}
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <BME280_SetMode>:
//------------------------------------------------
void BME280_SetMode(uint8_t mode) {
 800153a:	b580      	push	{r7, lr}
 800153c:	b084      	sub	sp, #16
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_MODE_MSK;
 8001544:	20f4      	movs	r0, #244	@ 0xf4
 8001546:	f7ff fe45 	bl	80011d4 <BME280_ReadReg>
 800154a:	4603      	mov	r3, r0
 800154c:	f023 0303 	bic.w	r3, r3, #3
 8001550:	73fb      	strb	r3, [r7, #15]
  reg |= mode & BME280_MODE_MSK;
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	b25a      	sxtb	r2, r3
 800155c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001560:	4313      	orrs	r3, r2
 8001562:	b25b      	sxtb	r3, r3
 8001564:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	4619      	mov	r1, r3
 800156a:	20f4      	movs	r0, #244	@ 0xf4
 800156c:	f7ff fe20 	bl	80011b0 <BME280_WriteReg>
}
 8001570:	bf00      	nop
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <BME280_ReadTemperature>:
//------------------------------------------------
float BME280_ReadTemperature(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
  float temper_float = 0.0f;
 800157e:	f04f 0300 	mov.w	r3, #0
 8001582:	60fb      	str	r3, [r7, #12]
	uint32_t temper_raw;
	int32_t val1, val2;
	BME280_ReadReg_BE_U24(BME280_REGISTER_TEMPDATA,&temper_raw);
 8001584:	463b      	mov	r3, r7
 8001586:	4619      	mov	r1, r3
 8001588:	20fa      	movs	r0, #250	@ 0xfa
 800158a:	f7ff fe72 	bl	8001272 <BME280_ReadReg_BE_U24>
	temper_raw >>= 4;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	091b      	lsrs	r3, r3, #4
 8001592:	603b      	str	r3, [r7, #0]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	08da      	lsrs	r2, r3, #3
 8001598:	4b20      	ldr	r3, [pc, #128]	@ (800161c <BME280_ReadTemperature+0xa4>)
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	1ad3      	subs	r3, r2, r3
		((int32_t)CalibData.dig_T2)) >> 11;
 80015a0:	4a1e      	ldr	r2, [pc, #120]	@ (800161c <BME280_ReadTemperature+0xa4>)
 80015a2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 80015a6:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.dig_T2)) >> 11;
 80015aa:	0adb      	lsrs	r3, r3, #11
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 80015ac:	60bb      	str	r3, [r7, #8]
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	4a1a      	ldr	r2, [pc, #104]	@ (800161c <BME280_ReadTemperature+0xa4>)
 80015b4:	8812      	ldrh	r2, [r2, #0]
 80015b6:	1a9b      	subs	r3, r3, r2
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	0912      	lsrs	r2, r2, #4
 80015bc:	4917      	ldr	r1, [pc, #92]	@ (800161c <BME280_ReadTemperature+0xa4>)
 80015be:	8809      	ldrh	r1, [r1, #0]
 80015c0:	1a52      	subs	r2, r2, r1
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 80015c2:	fb02 f303 	mul.w	r3, r2, r3
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 80015c6:	0b1b      	lsrs	r3, r3, #12
		((int32_t)CalibData.dig_T3)) >> 14;
 80015c8:	4a14      	ldr	r2, [pc, #80]	@ (800161c <BME280_ReadTemperature+0xa4>)
 80015ca:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 80015ce:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.dig_T3)) >> 14;
 80015d2:	0b9b      	lsrs	r3, r3, #14
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 80015d4:	607b      	str	r3, [r7, #4]
	temper_int = val1 + val2;
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4413      	add	r3, r2
 80015dc:	4a10      	ldr	r2, [pc, #64]	@ (8001620 <BME280_ReadTemperature+0xa8>)
 80015de:	6013      	str	r3, [r2, #0]
	temper_float = ((temper_int * 5 + 128) >> 8);
 80015e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001620 <BME280_ReadTemperature+0xa8>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4613      	mov	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	3380      	adds	r3, #128	@ 0x80
 80015ec:	121b      	asrs	r3, r3, #8
 80015ee:	ee07 3a90 	vmov	s15, r3
 80015f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f6:	edc7 7a03 	vstr	s15, [r7, #12]
	temper_float /= 100.0f;
 80015fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80015fe:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001624 <BME280_ReadTemperature+0xac>
 8001602:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001606:	edc7 7a03 	vstr	s15, [r7, #12]
  return temper_float;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	ee07 3a90 	vmov	s15, r3
}
 8001610:	eeb0 0a67 	vmov.f32	s0, s15
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	2000021c 	.word	0x2000021c
 8001620:	20000240 	.word	0x20000240
 8001624:	42c80000 	.word	0x42c80000

08001628 <BME280_ReadPressure>:
//------------------------------------------------
float BME280_ReadPressure(void)
{
 8001628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800162c:	b0d0      	sub	sp, #320	@ 0x140
 800162e:	af00      	add	r7, sp, #0
  float press_float = 0.0f;
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
	uint32_t press_raw, pres_int;
	int64_t val1, val2, p;
	BME280_ReadTemperature(); // must be done first to get t_fine
 8001638:	f7ff ff9e 	bl	8001578 <BME280_ReadTemperature>
	BME280_ReadReg_BE_U24(BME280_REGISTER_PRESSUREDATA,&press_raw);
 800163c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001640:	4619      	mov	r1, r3
 8001642:	20f7      	movs	r0, #247	@ 0xf7
 8001644:	f7ff fe15 	bl	8001272 <BME280_ReadReg_BE_U24>
	press_raw >>= 4;
 8001648:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800164c:	091b      	lsrs	r3, r3, #4
 800164e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	val1 = ((int64_t) temper_int) - 128000;
 8001652:	4bac      	ldr	r3, [pc, #688]	@ (8001904 <BME280_ReadPressure+0x2dc>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	17da      	asrs	r2, r3, #31
 8001658:	4698      	mov	r8, r3
 800165a:	4691      	mov	r9, r2
 800165c:	f5b8 33fa 	subs.w	r3, r8, #128000	@ 0x1f400
 8001660:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001662:	f149 33ff 	adc.w	r3, r9, #4294967295	@ 0xffffffff
 8001666:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001668:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800166c:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
	val2 = val1 * val1 * (int64_t)CalibData.dig_P6;
 8001670:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8001674:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001678:	fb03 f102 	mul.w	r1, r3, r2
 800167c:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8001680:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001684:	fb02 f303 	mul.w	r3, r2, r3
 8001688:	18ca      	adds	r2, r1, r3
 800168a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800168e:	fba3 4503 	umull	r4, r5, r3, r3
 8001692:	1953      	adds	r3, r2, r5
 8001694:	461d      	mov	r5, r3
 8001696:	4b9c      	ldr	r3, [pc, #624]	@ (8001908 <BME280_ReadPressure+0x2e0>)
 8001698:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800169c:	b21b      	sxth	r3, r3
 800169e:	17da      	asrs	r2, r3, #31
 80016a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80016a4:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80016a8:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80016ac:	4603      	mov	r3, r0
 80016ae:	fb03 f205 	mul.w	r2, r3, r5
 80016b2:	460b      	mov	r3, r1
 80016b4:	fb04 f303 	mul.w	r3, r4, r3
 80016b8:	4413      	add	r3, r2
 80016ba:	4602      	mov	r2, r0
 80016bc:	fba4 ab02 	umull	sl, fp, r4, r2
 80016c0:	445b      	add	r3, fp
 80016c2:	469b      	mov	fp, r3
 80016c4:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
 80016c8:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	val2 = val2 + ((val1 * (int64_t)CalibData.dig_P5) << 17);
 80016cc:	4b8e      	ldr	r3, [pc, #568]	@ (8001908 <BME280_ReadPressure+0x2e0>)
 80016ce:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80016d2:	b21b      	sxth	r3, r3
 80016d4:	17da      	asrs	r2, r3, #31
 80016d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80016da:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80016de:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80016e2:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 80016e6:	462a      	mov	r2, r5
 80016e8:	fb02 f203 	mul.w	r2, r2, r3
 80016ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80016f0:	4621      	mov	r1, r4
 80016f2:	fb01 f303 	mul.w	r3, r1, r3
 80016f6:	441a      	add	r2, r3
 80016f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80016fc:	4621      	mov	r1, r4
 80016fe:	fba3 1301 	umull	r1, r3, r3, r1
 8001702:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001706:	460b      	mov	r3, r1
 8001708:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800170c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001710:	18d3      	adds	r3, r2, r3
 8001712:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001716:	f04f 0000 	mov.w	r0, #0
 800171a:	f04f 0100 	mov.w	r1, #0
 800171e:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
 8001722:	462b      	mov	r3, r5
 8001724:	0459      	lsls	r1, r3, #17
 8001726:	4623      	mov	r3, r4
 8001728:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 800172c:	4623      	mov	r3, r4
 800172e:	0458      	lsls	r0, r3, #17
 8001730:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001734:	1814      	adds	r4, r2, r0
 8001736:	643c      	str	r4, [r7, #64]	@ 0x40
 8001738:	414b      	adcs	r3, r1
 800173a:	647b      	str	r3, [r7, #68]	@ 0x44
 800173c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001740:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	val2 = val2 + ((int64_t)CalibData.dig_P4 << 35);
 8001744:	4b70      	ldr	r3, [pc, #448]	@ (8001908 <BME280_ReadPressure+0x2e0>)
 8001746:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800174a:	b21b      	sxth	r3, r3
 800174c:	17da      	asrs	r2, r3, #31
 800174e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001752:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001756:	f04f 0000 	mov.w	r0, #0
 800175a:	f04f 0100 	mov.w	r1, #0
 800175e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001762:	00d9      	lsls	r1, r3, #3
 8001764:	2000      	movs	r0, #0
 8001766:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800176a:	1814      	adds	r4, r2, r0
 800176c:	63bc      	str	r4, [r7, #56]	@ 0x38
 800176e:	414b      	adcs	r3, r1
 8001770:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001772:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001776:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	val1 = ((val1 * val1 * (int64_t)CalibData.dig_P3) >> 8) + ((val1 * (int64_t)CalibData.dig_P2) << 12);
 800177a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800177e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001782:	fb03 f102 	mul.w	r1, r3, r2
 8001786:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800178a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800178e:	fb02 f303 	mul.w	r3, r2, r3
 8001792:	18ca      	adds	r2, r1, r3
 8001794:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001798:	fba3 1303 	umull	r1, r3, r3, r3
 800179c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80017a0:	460b      	mov	r3, r1
 80017a2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80017a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80017aa:	18d3      	adds	r3, r2, r3
 80017ac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80017b0:	4b55      	ldr	r3, [pc, #340]	@ (8001908 <BME280_ReadPressure+0x2e0>)
 80017b2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80017b6:	b21b      	sxth	r3, r3
 80017b8:	17da      	asrs	r2, r3, #31
 80017ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80017be:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80017c2:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 80017c6:	462b      	mov	r3, r5
 80017c8:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	@ 0xb0
 80017cc:	4642      	mov	r2, r8
 80017ce:	fb02 f203 	mul.w	r2, r2, r3
 80017d2:	464b      	mov	r3, r9
 80017d4:	4621      	mov	r1, r4
 80017d6:	fb01 f303 	mul.w	r3, r1, r3
 80017da:	4413      	add	r3, r2
 80017dc:	4622      	mov	r2, r4
 80017de:	4641      	mov	r1, r8
 80017e0:	fba2 1201 	umull	r1, r2, r2, r1
 80017e4:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 80017e8:	460a      	mov	r2, r1
 80017ea:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 80017ee:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80017f2:	4413      	add	r3, r2
 80017f4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80017f8:	f04f 0000 	mov.w	r0, #0
 80017fc:	f04f 0100 	mov.w	r1, #0
 8001800:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001804:	4623      	mov	r3, r4
 8001806:	0a18      	lsrs	r0, r3, #8
 8001808:	462b      	mov	r3, r5
 800180a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800180e:	462b      	mov	r3, r5
 8001810:	1219      	asrs	r1, r3, #8
 8001812:	4b3d      	ldr	r3, [pc, #244]	@ (8001908 <BME280_ReadPressure+0x2e0>)
 8001814:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001818:	b21b      	sxth	r3, r3
 800181a:	17da      	asrs	r2, r3, #31
 800181c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001820:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001824:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001828:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800182c:	464a      	mov	r2, r9
 800182e:	fb02 f203 	mul.w	r2, r2, r3
 8001832:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001836:	4644      	mov	r4, r8
 8001838:	fb04 f303 	mul.w	r3, r4, r3
 800183c:	441a      	add	r2, r3
 800183e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001842:	4644      	mov	r4, r8
 8001844:	fba3 4304 	umull	r4, r3, r3, r4
 8001848:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800184c:	4623      	mov	r3, r4
 800184e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001856:	18d3      	adds	r3, r2, r3
 8001858:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	f04f 0300 	mov.w	r3, #0
 8001864:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8001868:	464c      	mov	r4, r9
 800186a:	0323      	lsls	r3, r4, #12
 800186c:	4644      	mov	r4, r8
 800186e:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001872:	4644      	mov	r4, r8
 8001874:	0322      	lsls	r2, r4, #12
 8001876:	1884      	adds	r4, r0, r2
 8001878:	633c      	str	r4, [r7, #48]	@ 0x30
 800187a:	eb41 0303 	adc.w	r3, r1, r3
 800187e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001880:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001884:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
	val1 = (((((int64_t)1) << 47) + val1)) * ((int64_t)CalibData.dig_P1) >> 33;
 8001888:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800188c:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001890:	f8c7 10a4 	str.w	r1, [r7, #164]	@ 0xa4
 8001894:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8001898:	4b1b      	ldr	r3, [pc, #108]	@ (8001908 <BME280_ReadPressure+0x2e0>)
 800189a:	88db      	ldrh	r3, [r3, #6]
 800189c:	b29b      	uxth	r3, r3
 800189e:	2200      	movs	r2, #0
 80018a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80018a4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80018a8:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 80018ac:	462b      	mov	r3, r5
 80018ae:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 80018b2:	4642      	mov	r2, r8
 80018b4:	fb02 f203 	mul.w	r2, r2, r3
 80018b8:	464b      	mov	r3, r9
 80018ba:	4621      	mov	r1, r4
 80018bc:	fb01 f303 	mul.w	r3, r1, r3
 80018c0:	4413      	add	r3, r2
 80018c2:	4622      	mov	r2, r4
 80018c4:	4641      	mov	r1, r8
 80018c6:	fba2 1201 	umull	r1, r2, r2, r1
 80018ca:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80018ce:	460a      	mov	r2, r1
 80018d0:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80018d4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80018d8:	4413      	add	r3, r2
 80018da:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80018ea:	4629      	mov	r1, r5
 80018ec:	104a      	asrs	r2, r1, #1
 80018ee:	4629      	mov	r1, r5
 80018f0:	17cb      	asrs	r3, r1, #31
 80018f2:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
	if (val1 == 0) {
 80018f6:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80018fa:	4313      	orrs	r3, r2
 80018fc:	d106      	bne.n	800190c <BME280_ReadPressure+0x2e4>
		return 0; // avoid exception caused by division by zero
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	e194      	b.n	8001c2e <BME280_ReadPressure+0x606>
 8001904:	20000240 	.word	0x20000240
 8001908:	2000021c 	.word	0x2000021c
	}
	p = 1048576 - press_raw;
 800190c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001910:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001914:	2200      	movs	r2, #0
 8001916:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001918:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800191a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800191e:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	p = (((p << 31) - val2) * 3125) / val1;
 8001922:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001926:	085b      	lsrs	r3, r3, #1
 8001928:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800192c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001930:	07db      	lsls	r3, r3, #31
 8001932:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001936:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800193a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800193e:	4621      	mov	r1, r4
 8001940:	1a89      	subs	r1, r1, r2
 8001942:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8001946:	4629      	mov	r1, r5
 8001948:	eb61 0303 	sbc.w	r3, r1, r3
 800194c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001950:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001954:	4622      	mov	r2, r4
 8001956:	462b      	mov	r3, r5
 8001958:	1891      	adds	r1, r2, r2
 800195a:	6239      	str	r1, [r7, #32]
 800195c:	415b      	adcs	r3, r3
 800195e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001960:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001964:	4621      	mov	r1, r4
 8001966:	1851      	adds	r1, r2, r1
 8001968:	61b9      	str	r1, [r7, #24]
 800196a:	4629      	mov	r1, r5
 800196c:	414b      	adcs	r3, r1
 800196e:	61fb      	str	r3, [r7, #28]
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	f04f 0300 	mov.w	r3, #0
 8001978:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800197c:	4649      	mov	r1, r9
 800197e:	018b      	lsls	r3, r1, #6
 8001980:	4641      	mov	r1, r8
 8001982:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001986:	4641      	mov	r1, r8
 8001988:	018a      	lsls	r2, r1, #6
 800198a:	4641      	mov	r1, r8
 800198c:	1889      	adds	r1, r1, r2
 800198e:	6139      	str	r1, [r7, #16]
 8001990:	4649      	mov	r1, r9
 8001992:	eb43 0101 	adc.w	r1, r3, r1
 8001996:	6179      	str	r1, [r7, #20]
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	f04f 0300 	mov.w	r3, #0
 80019a0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80019a4:	4649      	mov	r1, r9
 80019a6:	008b      	lsls	r3, r1, #2
 80019a8:	4641      	mov	r1, r8
 80019aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80019ae:	4641      	mov	r1, r8
 80019b0:	008a      	lsls	r2, r1, #2
 80019b2:	4610      	mov	r0, r2
 80019b4:	4619      	mov	r1, r3
 80019b6:	4603      	mov	r3, r0
 80019b8:	4622      	mov	r2, r4
 80019ba:	189b      	adds	r3, r3, r2
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	460b      	mov	r3, r1
 80019c0:	462a      	mov	r2, r5
 80019c2:	eb42 0303 	adc.w	r3, r2, r3
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80019d4:	4649      	mov	r1, r9
 80019d6:	008b      	lsls	r3, r1, #2
 80019d8:	4641      	mov	r1, r8
 80019da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80019de:	4641      	mov	r1, r8
 80019e0:	008a      	lsls	r2, r1, #2
 80019e2:	4610      	mov	r0, r2
 80019e4:	4619      	mov	r1, r3
 80019e6:	4603      	mov	r3, r0
 80019e8:	4622      	mov	r2, r4
 80019ea:	189b      	adds	r3, r3, r2
 80019ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80019f0:	462b      	mov	r3, r5
 80019f2:	460a      	mov	r2, r1
 80019f4:	eb42 0303 	adc.w	r3, r2, r3
 80019f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80019fc:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8001a00:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001a04:	f7ff f948 	bl	8000c98 <__aeabi_ldivmod>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	val1 = (((int64_t)CalibData.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8001a10:	4b8b      	ldr	r3, [pc, #556]	@ (8001c40 <BME280_ReadPressure+0x618>)
 8001a12:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001a16:	b21b      	sxth	r3, r3
 8001a18:	17da      	asrs	r2, r3, #31
 8001a1a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001a1c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001a1e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001a22:	f04f 0000 	mov.w	r0, #0
 8001a26:	f04f 0100 	mov.w	r1, #0
 8001a2a:	0b50      	lsrs	r0, r2, #13
 8001a2c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001a30:	1359      	asrs	r1, r3, #13
 8001a32:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001a36:	462b      	mov	r3, r5
 8001a38:	fb00 f203 	mul.w	r2, r0, r3
 8001a3c:	4623      	mov	r3, r4
 8001a3e:	fb03 f301 	mul.w	r3, r3, r1
 8001a42:	4413      	add	r3, r2
 8001a44:	4622      	mov	r2, r4
 8001a46:	fba2 1200 	umull	r1, r2, r2, r0
 8001a4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001a4e:	460a      	mov	r2, r1
 8001a50:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8001a54:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001a58:	4413      	add	r3, r2
 8001a5a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001a5e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001a62:	f04f 0000 	mov.w	r0, #0
 8001a66:	f04f 0100 	mov.w	r1, #0
 8001a6a:	0b50      	lsrs	r0, r2, #13
 8001a6c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001a70:	1359      	asrs	r1, r3, #13
 8001a72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001a76:	462b      	mov	r3, r5
 8001a78:	fb00 f203 	mul.w	r2, r0, r3
 8001a7c:	4623      	mov	r3, r4
 8001a7e:	fb03 f301 	mul.w	r3, r3, r1
 8001a82:	4413      	add	r3, r2
 8001a84:	4622      	mov	r2, r4
 8001a86:	fba2 1200 	umull	r1, r2, r2, r0
 8001a8a:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001a8e:	460a      	mov	r2, r1
 8001a90:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001a94:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001a98:	4413      	add	r3, r2
 8001a9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	f04f 0300 	mov.w	r3, #0
 8001aa6:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001aaa:	4621      	mov	r1, r4
 8001aac:	0e4a      	lsrs	r2, r1, #25
 8001aae:	4629      	mov	r1, r5
 8001ab0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001ab4:	4629      	mov	r1, r5
 8001ab6:	164b      	asrs	r3, r1, #25
 8001ab8:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
	val2 = (((int64_t)CalibData.dig_P8) * p) >> 19;
 8001abc:	4b60      	ldr	r3, [pc, #384]	@ (8001c40 <BME280_ReadPressure+0x618>)
 8001abe:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001ac2:	b21b      	sxth	r3, r3
 8001ac4:	17da      	asrs	r2, r3, #31
 8001ac6:	673b      	str	r3, [r7, #112]	@ 0x70
 8001ac8:	677a      	str	r2, [r7, #116]	@ 0x74
 8001aca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001ace:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001ad2:	462a      	mov	r2, r5
 8001ad4:	fb02 f203 	mul.w	r2, r2, r3
 8001ad8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001adc:	4621      	mov	r1, r4
 8001ade:	fb01 f303 	mul.w	r3, r1, r3
 8001ae2:	441a      	add	r2, r3
 8001ae4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001ae8:	4621      	mov	r1, r4
 8001aea:	fba3 1301 	umull	r1, r3, r3, r1
 8001aee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001af2:	460b      	mov	r3, r1
 8001af4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001afc:	18d3      	adds	r3, r2, r3
 8001afe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001b0e:	4621      	mov	r1, r4
 8001b10:	0cca      	lsrs	r2, r1, #19
 8001b12:	4629      	mov	r1, r5
 8001b14:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001b18:	4629      	mov	r1, r5
 8001b1a:	14cb      	asrs	r3, r1, #19
 8001b1c:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	p = ((p + val1 + val2) >> 8) + ((int64_t)CalibData.dig_P7 << 4);
 8001b20:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8001b24:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8001b28:	1884      	adds	r4, r0, r2
 8001b2a:	66bc      	str	r4, [r7, #104]	@ 0x68
 8001b2c:	eb41 0303 	adc.w	r3, r1, r3
 8001b30:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001b32:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001b36:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001b3a:	4621      	mov	r1, r4
 8001b3c:	1889      	adds	r1, r1, r2
 8001b3e:	6639      	str	r1, [r7, #96]	@ 0x60
 8001b40:	4629      	mov	r1, r5
 8001b42:	eb43 0101 	adc.w	r1, r3, r1
 8001b46:	6679      	str	r1, [r7, #100]	@ 0x64
 8001b48:	f04f 0000 	mov.w	r0, #0
 8001b4c:	f04f 0100 	mov.w	r1, #0
 8001b50:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001b54:	4623      	mov	r3, r4
 8001b56:	0a18      	lsrs	r0, r3, #8
 8001b58:	462b      	mov	r3, r5
 8001b5a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001b5e:	462b      	mov	r3, r5
 8001b60:	1219      	asrs	r1, r3, #8
 8001b62:	4b37      	ldr	r3, [pc, #220]	@ (8001c40 <BME280_ReadPressure+0x618>)
 8001b64:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001b68:	b21b      	sxth	r3, r3
 8001b6a:	17da      	asrs	r2, r3, #31
 8001b6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001b6e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 8001b7c:	464c      	mov	r4, r9
 8001b7e:	0123      	lsls	r3, r4, #4
 8001b80:	4644      	mov	r4, r8
 8001b82:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001b86:	4644      	mov	r4, r8
 8001b88:	0122      	lsls	r2, r4, #4
 8001b8a:	1884      	adds	r4, r0, r2
 8001b8c:	603c      	str	r4, [r7, #0]
 8001b8e:	eb41 0303 	adc.w	r3, r1, r3
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001b98:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	pres_int = ((p >> 8) * 1000) + (((p & 0xff) * 390625) / 100000);
 8001b9c:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	0a02      	lsrs	r2, r0, #8
 8001baa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001bae:	120b      	asrs	r3, r1, #8
 8001bb0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bb4:	fb03 f402 	mul.w	r4, r3, r2
 8001bb8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001bbc:	f002 03ff 	and.w	r3, r2, #255	@ 0xff
 8001bc0:	653b      	str	r3, [r7, #80]	@ 0x50
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	657b      	str	r3, [r7, #84]	@ 0x54
 8001bc6:	4b1f      	ldr	r3, [pc, #124]	@ (8001c44 <BME280_ReadPressure+0x61c>)
 8001bc8:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001bcc:	464a      	mov	r2, r9
 8001bce:	fb03 f202 	mul.w	r2, r3, r2
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	4641      	mov	r1, r8
 8001bd6:	fb01 f303 	mul.w	r3, r1, r3
 8001bda:	4413      	add	r3, r2
 8001bdc:	4a19      	ldr	r2, [pc, #100]	@ (8001c44 <BME280_ReadPressure+0x61c>)
 8001bde:	4641      	mov	r1, r8
 8001be0:	fba1 1202 	umull	r1, r2, r1, r2
 8001be4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001be8:	460a      	mov	r2, r1
 8001bea:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001bee:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001bf8:	4a13      	ldr	r2, [pc, #76]	@ (8001c48 <BME280_ReadPressure+0x620>)
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8001c02:	f7ff f849 	bl	8000c98 <__aeabi_ldivmod>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	4423      	add	r3, r4
 8001c0e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	press_float = pres_int / 100.0f;
 8001c12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001c16:	ee07 3a90 	vmov	s15, r3
 8001c1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c1e:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001c4c <BME280_ReadPressure+0x624>
 8001c22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c26:	edc7 7a4f 	vstr	s15, [r7, #316]	@ 0x13c
  return press_float;
 8001c2a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
}
 8001c2e:	ee07 3a90 	vmov	s15, r3
 8001c32:	eeb0 0a67 	vmov.f32	s0, s15
 8001c36:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c40:	2000021c 	.word	0x2000021c
 8001c44:	0005f5e1 	.word	0x0005f5e1
 8001c48:	000186a0 	.word	0x000186a0
 8001c4c:	42c80000 	.word	0x42c80000

08001c50 <BME280_ReadHumidity>:
//------------------------------------------------
float BME280_ReadHumidity(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
  float hum_float = 0.0f;
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
	int16_t hum_raw;
	int32_t hum_raw_sign, v_x1_u32r;
	BME280_ReadTemperature(); // must be done first to get t_fine
 8001c5c:	f7ff fc8c 	bl	8001578 <BME280_ReadTemperature>
	BME280_ReadReg_BE_S16(BME280_REGISTER_HUMIDDATA,&hum_raw);
 8001c60:	1cbb      	adds	r3, r7, #2
 8001c62:	4619      	mov	r1, r3
 8001c64:	20fd      	movs	r0, #253	@ 0xfd
 8001c66:	f7ff fae6 	bl	8001236 <BME280_ReadReg_BE_S16>
	hum_raw_sign = ((int32_t)hum_raw)&0x0000FFFF;
 8001c6a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	60bb      	str	r3, [r7, #8]
	v_x1_u32r = (temper_int - ((int32_t)76800));
 8001c72:	4b35      	ldr	r3, [pc, #212]	@ (8001d48 <BME280_ReadHumidity+0xf8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001c7a:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	039a      	lsls	r2, r3, #14
 8001c80:	4b32      	ldr	r3, [pc, #200]	@ (8001d4c <BME280_ReadHumidity+0xfc>)
 8001c82:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001c86:	051b      	lsls	r3, r3, #20
 8001c88:	1ad2      	subs	r2, r2, r3
		(((int32_t)CalibData.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8001c8a:	4b30      	ldr	r3, [pc, #192]	@ (8001d4c <BME280_ReadHumidity+0xfc>)
 8001c8c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001c90:	4619      	mov	r1, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	fb01 f303 	mul.w	r3, r1, r3
	v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 8001c98:	1ad3      	subs	r3, r2, r3
		(((int32_t)CalibData.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8001c9a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001c9e:	13db      	asrs	r3, r3, #15
		(((((((v_x1_u32r * ((int32_t)CalibData.dig_H6)) >> 10) *
 8001ca0:	4a2a      	ldr	r2, [pc, #168]	@ (8001d4c <BME280_ReadHumidity+0xfc>)
 8001ca2:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	fb01 f202 	mul.w	r2, r1, r2
 8001cae:	1292      	asrs	r2, r2, #10
		(((v_x1_u32r * ((int32_t)CalibData.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8001cb0:	4926      	ldr	r1, [pc, #152]	@ (8001d4c <BME280_ReadHumidity+0xfc>)
 8001cb2:	7f09      	ldrb	r1, [r1, #28]
 8001cb4:	4608      	mov	r0, r1
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	fb00 f101 	mul.w	r1, r0, r1
 8001cbc:	12c9      	asrs	r1, r1, #11
 8001cbe:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
		(((((((v_x1_u32r * ((int32_t)CalibData.dig_H6)) >> 10) *
 8001cc2:	fb01 f202 	mul.w	r2, r1, r2
		(((v_x1_u32r * ((int32_t)CalibData.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8001cc6:	1292      	asrs	r2, r2, #10
 8001cc8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
		((int32_t)2097152)) * ((int32_t)CalibData.dig_H2) + 8192) >> 14));
 8001ccc:	491f      	ldr	r1, [pc, #124]	@ (8001d4c <BME280_ReadHumidity+0xfc>)
 8001cce:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001cd2:	fb01 f202 	mul.w	r2, r1, r2
 8001cd6:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001cda:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 8001cdc:	fb02 f303 	mul.w	r3, r2, r3
 8001ce0:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	13db      	asrs	r3, r3, #15
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	13d2      	asrs	r2, r2, #15
 8001cea:	fb02 f303 	mul.w	r3, r2, r3
 8001cee:	11db      	asrs	r3, r3, #7
		((int32_t)CalibData.dig_H1)) >> 4));
 8001cf0:	4a16      	ldr	r2, [pc, #88]	@ (8001d4c <BME280_ReadHumidity+0xfc>)
 8001cf2:	7e12      	ldrb	r2, [r2, #24]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8001cf4:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.dig_H1)) >> 4));
 8001cf8:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001d06:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001d0e:	bfa8      	it	ge
 8001d10:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001d14:	607b      	str	r3, [r7, #4]
	hum_float = (v_x1_u32r>>12);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	131b      	asrs	r3, r3, #12
 8001d1a:	ee07 3a90 	vmov	s15, r3
 8001d1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d22:	edc7 7a03 	vstr	s15, [r7, #12]
	hum_float /= 1024.0f;
 8001d26:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d2a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001d50 <BME280_ReadHumidity+0x100>
 8001d2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d32:	edc7 7a03 	vstr	s15, [r7, #12]
  return hum_float;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	ee07 3a90 	vmov	s15, r3
}
 8001d3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000240 	.word	0x20000240
 8001d4c:	2000021c 	.word	0x2000021c
 8001d50:	44800000 	.word	0x44800000
 8001d54:	00000000 	.word	0x00000000

08001d58 <BME280_ReadAltitude>:
//------------------------------------------------
float BME280_ReadAltitude(float seaLevel)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	ed87 0a01 	vstr	s0, [r7, #4]
  float att = 0.0f;
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	60fb      	str	r3, [r7, #12]
	float atm = BME280_ReadPressure();
 8001d68:	f7ff fc5e 	bl	8001628 <BME280_ReadPressure>
 8001d6c:	ed87 0a02 	vstr	s0, [r7, #8]
	att = 44330.0 * (1.0 - pow(atm / seaLevel, 0.1903));
 8001d70:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d74:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d78:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d7c:	ee16 0a90 	vmov	r0, s13
 8001d80:	f7fe fbea 	bl	8000558 <__aeabi_f2d>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	ed9f 1b13 	vldr	d1, [pc, #76]	@ 8001dd8 <BME280_ReadAltitude+0x80>
 8001d8c:	ec43 2b10 	vmov	d0, r2, r3
 8001d90:	f00f fb70 	bl	8011474 <pow>
 8001d94:	ec53 2b10 	vmov	r2, r3, d0
 8001d98:	f04f 0000 	mov.w	r0, #0
 8001d9c:	4912      	ldr	r1, [pc, #72]	@ (8001de8 <BME280_ReadAltitude+0x90>)
 8001d9e:	f7fe fa7b 	bl	8000298 <__aeabi_dsub>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	4610      	mov	r0, r2
 8001da8:	4619      	mov	r1, r3
 8001daa:	a30d      	add	r3, pc, #52	@ (adr r3, 8001de0 <BME280_ReadAltitude+0x88>)
 8001dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db0:	f7fe fc2a 	bl	8000608 <__aeabi_dmul>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4610      	mov	r0, r2
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f7fe ff1c 	bl	8000bf8 <__aeabi_d2f>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	60fb      	str	r3, [r7, #12]
  return att;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	ee07 3a90 	vmov	s15, r3
}
 8001dca:	eeb0 0a67 	vmov.f32	s0, s15
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	f3af 8000 	nop.w
 8001dd8:	1a36e2eb 	.word	0x1a36e2eb
 8001ddc:	3fc85bc0 	.word	0x3fc85bc0
 8001de0:	00000000 	.word	0x00000000
 8001de4:	40e5a540 	.word	0x40e5a540
 8001de8:	3ff00000 	.word	0x3ff00000

08001dec <BME280_Init>:
//------------------------------------------------
void BME280_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
  uint8_t value=0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	71fb      	strb	r3, [r7, #7]
  uint32_t value32=0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	603b      	str	r3, [r7, #0]
  LED_ON;
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	2120      	movs	r1, #32
 8001dfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e02:	f003 fee9 	bl	8005bd8 <HAL_GPIO_WritePin>
	value = BME280_ReadReg(BME280_REG_ID);
 8001e06:	20d0      	movs	r0, #208	@ 0xd0
 8001e08:	f7ff f9e4 	bl	80011d4 <BME280_ReadReg>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	71fb      	strb	r3, [r7, #7]
//	sprintf(str1, "\r\n\r\nID: 0x%02X\r\n", value);
//	HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
	if(value !=BME280_ID)
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	2b60      	cmp	r3, #96	@ 0x60
 8001e14:	d002      	beq.n	8001e1c <BME280_Init+0x30>
	{
		Error();
 8001e16:	f7ff f925 	bl	8001064 <Error>
		return;
 8001e1a:	e02d      	b.n	8001e78 <BME280_Init+0x8c>
	}
	BME280_WriteReg(BME280_REG_SOFTRESET,BME280_SOFTRESET_VALUE);
 8001e1c:	21b6      	movs	r1, #182	@ 0xb6
 8001e1e:	20e0      	movs	r0, #224	@ 0xe0
 8001e20:	f7ff f9c6 	bl	80011b0 <BME280_WriteReg>
	while (BME280_ReadStatus() & BME280_STATUS_IM_UPDATE) ;
 8001e24:	bf00      	nop
 8001e26:	f7ff fa47 	bl	80012b8 <BME280_ReadStatus>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1f8      	bne.n	8001e26 <BME280_Init+0x3a>
	BME280_ReadCoefficients();
 8001e34:	f7ff fa50 	bl	80012d8 <BME280_ReadCoefficients>
	BME280_SetStandby(BME280_STBY_1000);
 8001e38:	20a0      	movs	r0, #160	@ 0xa0
 8001e3a:	f7ff fad9 	bl	80013f0 <BME280_SetStandby>
	BME280_SetFilter(BME280_FILTER_4);
 8001e3e:	2008      	movs	r0, #8
 8001e40:	f7ff faf5 	bl	800142e <BME280_SetFilter>
	BME280_SetOversamplingTemper(BME280_OSRS_T_x4);
 8001e44:	2060      	movs	r0, #96	@ 0x60
 8001e46:	f7ff fb11 	bl	800146c <BME280_SetOversamplingTemper>
	BME280_SetOversamplingPressure(BME280_OSRS_P_x2);
 8001e4a:	2008      	movs	r0, #8
 8001e4c:	f7ff fb2d 	bl	80014aa <BME280_SetOversamplingPressure>
	BME280_SetOversamplingHum(BME280_OSRS_H_x1);
 8001e50:	2001      	movs	r0, #1
 8001e52:	f7ff fb49 	bl	80014e8 <BME280_SetOversamplingHum>
	value32 = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 8001e56:	20f4      	movs	r0, #244	@ 0xf4
 8001e58:	f7ff f9bc 	bl	80011d4 <BME280_ReadReg>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	603b      	str	r3, [r7, #0]
	value32 |= BME280_ReadReg(BME280_REG_CTRL_HUM) << 8;
 8001e60:	20f2      	movs	r0, #242	@ 0xf2
 8001e62:	f7ff f9b7 	bl	80011d4 <BME280_ReadReg>
 8001e66:	4603      	mov	r3, r0
 8001e68:	021b      	lsls	r3, r3, #8
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	603b      	str	r3, [r7, #0]
//	sprintf(str1, "Temperature: %s\r\nPressure: %s\r\nHumidity: %s\r\n",
//		(value32 & BME280_OSRS_T_MSK) ? "ON" : "OFF",
//		(value32 & BME280_OSRS_P_MSK) ? "ON" : "OFF",
//		((value32 >> 8) & BME280_OSRS_H_MSK) ? "ON" : "OFF");
//	HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
	BME280_SetMode(BME280_MODE_NORMAL);
 8001e72:	2003      	movs	r0, #3
 8001e74:	f7ff fb61 	bl	800153a <BME280_SetMode>
}
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <pollKeypad>:

#include "Keypad.h"
#include "main.h"

Key pollKeypad()
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	// check left key
	if (HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port, BTN_LEFT_Pin) == GPIO_PIN_SET)
 8001e84:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001e88:	4818      	ldr	r0, [pc, #96]	@ (8001eec <pollKeypad+0x6c>)
 8001e8a:	f003 fe8d 	bl	8005ba8 <HAL_GPIO_ReadPin>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <pollKeypad+0x18>
	{
		return Left;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e026      	b.n	8001ee6 <pollKeypad+0x66>
	}

	// check up key
	if (HAL_GPIO_ReadPin(BTN_UP_GPIO_Port, BTN_UP_Pin) == GPIO_PIN_SET)
 8001e98:	2102      	movs	r1, #2
 8001e9a:	4814      	ldr	r0, [pc, #80]	@ (8001eec <pollKeypad+0x6c>)
 8001e9c:	f003 fe84 	bl	8005ba8 <HAL_GPIO_ReadPin>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <pollKeypad+0x2a>
	{
		return Up;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e01d      	b.n	8001ee6 <pollKeypad+0x66>
	}

	// check middle key
	if (HAL_GPIO_ReadPin(BTN_MIDDLE_GPIO_Port, BTN_MIDDLE_Pin) == GPIO_PIN_SET)
 8001eaa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001eae:	480f      	ldr	r0, [pc, #60]	@ (8001eec <pollKeypad+0x6c>)
 8001eb0:	f003 fe7a 	bl	8005ba8 <HAL_GPIO_ReadPin>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d101      	bne.n	8001ebe <pollKeypad+0x3e>
	{
		return Middle;
 8001eba:	2305      	movs	r3, #5
 8001ebc:	e013      	b.n	8001ee6 <pollKeypad+0x66>
	}

	// check down key
	if (HAL_GPIO_ReadPin(BTN_DOWN_GPIO_Port, BTN_DOWN_Pin) == GPIO_PIN_SET)
 8001ebe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ec2:	480a      	ldr	r0, [pc, #40]	@ (8001eec <pollKeypad+0x6c>)
 8001ec4:	f003 fe70 	bl	8005ba8 <HAL_GPIO_ReadPin>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <pollKeypad+0x52>
	{
		return Down;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e009      	b.n	8001ee6 <pollKeypad+0x66>
	}

	// check right key
	if (HAL_GPIO_ReadPin(BTN_RIGHT_GPIO_Port, BTN_RIGHT_Pin) == GPIO_PIN_SET)
 8001ed2:	2104      	movs	r1, #4
 8001ed4:	4805      	ldr	r0, [pc, #20]	@ (8001eec <pollKeypad+0x6c>)
 8001ed6:	f003 fe67 	bl	8005ba8 <HAL_GPIO_ReadPin>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <pollKeypad+0x64>
	{
		return Right;
 8001ee0:	2304      	movs	r3, #4
 8001ee2:	e000      	b.n	8001ee6 <pollKeypad+0x66>
	}

	return None;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	48000400 	.word	0x48000400

08001ef0 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ef6:	463b      	mov	r3, r7
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
 8001f04:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001f06:	4b27      	ldr	r3, [pc, #156]	@ (8001fa4 <MX_ADC2_Init+0xb4>)
 8001f08:	4a27      	ldr	r2, [pc, #156]	@ (8001fa8 <MX_ADC2_Init+0xb8>)
 8001f0a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001f0c:	4b25      	ldr	r3, [pc, #148]	@ (8001fa4 <MX_ADC2_Init+0xb4>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001f12:	4b24      	ldr	r3, [pc, #144]	@ (8001fa4 <MX_ADC2_Init+0xb4>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f18:	4b22      	ldr	r3, [pc, #136]	@ (8001fa4 <MX_ADC2_Init+0xb4>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001f1e:	4b21      	ldr	r3, [pc, #132]	@ (8001fa4 <MX_ADC2_Init+0xb4>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001f24:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa4 <MX_ADC2_Init+0xb4>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa4 <MX_ADC2_Init+0xb4>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f32:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa4 <MX_ADC2_Init+0xb4>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f38:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa4 <MX_ADC2_Init+0xb4>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001f3e:	4b19      	ldr	r3, [pc, #100]	@ (8001fa4 <MX_ADC2_Init+0xb4>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001f44:	4b17      	ldr	r3, [pc, #92]	@ (8001fa4 <MX_ADC2_Init+0xb4>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f4c:	4b15      	ldr	r3, [pc, #84]	@ (8001fa4 <MX_ADC2_Init+0xb4>)
 8001f4e:	2204      	movs	r2, #4
 8001f50:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001f52:	4b14      	ldr	r3, [pc, #80]	@ (8001fa4 <MX_ADC2_Init+0xb4>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001f58:	4b12      	ldr	r3, [pc, #72]	@ (8001fa4 <MX_ADC2_Init+0xb4>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001f5e:	4811      	ldr	r0, [pc, #68]	@ (8001fa4 <MX_ADC2_Init+0xb4>)
 8001f60:	f002 fa84 	bl	800446c <HAL_ADC_Init>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8001f6a:	f001 fc93 	bl	8003894 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f72:	2301      	movs	r3, #1
 8001f74:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001f86:	463b      	mov	r3, r7
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4806      	ldr	r0, [pc, #24]	@ (8001fa4 <MX_ADC2_Init+0xb4>)
 8001f8c:	f002 ff36 	bl	8004dfc <HAL_ADC_ConfigChannel>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8001f96:	f001 fc7d 	bl	8003894 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001f9a:	bf00      	nop
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000244 	.word	0x20000244
 8001fa8:	50000100 	.word	0x50000100

08001fac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	@ 0x28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a15      	ldr	r2, [pc, #84]	@ (8002020 <HAL_ADC_MspInit+0x74>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d124      	bne.n	8002018 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001fce:	4b15      	ldr	r3, [pc, #84]	@ (8002024 <HAL_ADC_MspInit+0x78>)
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	4a14      	ldr	r2, [pc, #80]	@ (8002024 <HAL_ADC_MspInit+0x78>)
 8001fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fd8:	6153      	str	r3, [r2, #20]
 8001fda:	4b12      	ldr	r3, [pc, #72]	@ (8002024 <HAL_ADC_MspInit+0x78>)
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8002024 <HAL_ADC_MspInit+0x78>)
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	4a0e      	ldr	r2, [pc, #56]	@ (8002024 <HAL_ADC_MspInit+0x78>)
 8001fec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ff0:	6153      	str	r3, [r2, #20]
 8001ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8002024 <HAL_ADC_MspInit+0x78>)
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = BATT_ADC_Pin;
 8001ffe:	2310      	movs	r3, #16
 8002000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002002:	2303      	movs	r3, #3
 8002004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_ADC_GPIO_Port, &GPIO_InitStruct);
 800200a:	f107 0314 	add.w	r3, r7, #20
 800200e:	4619      	mov	r1, r3
 8002010:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002014:	f003 fc3e 	bl	8005894 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8002018:	bf00      	nop
 800201a:	3728      	adds	r7, #40	@ 0x28
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	50000100 	.word	0x50000100
 8002024:	40021000 	.word	0x40021000

08002028 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 8002030:	4a09      	ldr	r2, [pc, #36]	@ (8002058 <DS3231_Init+0x30>)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 8002036:	2000      	movs	r0, #0
 8002038:	f000 f8a9 	bl	800218e <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 800203c:	2000      	movs	r0, #0
 800203e:	f000 f86d 	bl	800211c <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 8002042:	f000 f8c6 	bl	80021d2 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8002046:	f000 f88c 	bl	8002162 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 800204a:	2001      	movs	r0, #1
 800204c:	f000 f846 	bl	80020dc <DS3231_SetInterruptMode>
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20000294 	.word	0x20000294

0800205c <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af02      	add	r7, sp, #8
 8002062:	4603      	mov	r3, r0
 8002064:	460a      	mov	r2, r1
 8002066:	71fb      	strb	r3, [r7, #7]
 8002068:	4613      	mov	r3, r2
 800206a:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	733b      	strb	r3, [r7, #12]
 8002070:	79bb      	ldrb	r3, [r7, #6]
 8002072:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8002074:	4b07      	ldr	r3, [pc, #28]	@ (8002094 <DS3231_SetRegByte+0x38>)
 8002076:	6818      	ldr	r0, [r3, #0]
 8002078:	f107 020c 	add.w	r2, r7, #12
 800207c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	2302      	movs	r3, #2
 8002084:	21d0      	movs	r1, #208	@ 0xd0
 8002086:	f003 fe75 	bl	8005d74 <HAL_I2C_Master_Transmit>
}
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000294 	.word	0x20000294

08002098 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af02      	add	r7, sp, #8
 800209e:	4603      	mov	r3, r0
 80020a0:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 80020a2:	4b0d      	ldr	r3, [pc, #52]	@ (80020d8 <DS3231_GetRegByte+0x40>)
 80020a4:	6818      	ldr	r0, [r3, #0]
 80020a6:	1dfa      	adds	r2, r7, #7
 80020a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	2301      	movs	r3, #1
 80020b0:	21d0      	movs	r1, #208	@ 0xd0
 80020b2:	f003 fe5f 	bl	8005d74 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 80020b6:	4b08      	ldr	r3, [pc, #32]	@ (80020d8 <DS3231_GetRegByte+0x40>)
 80020b8:	6818      	ldr	r0, [r3, #0]
 80020ba:	f107 020f 	add.w	r2, r7, #15
 80020be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	2301      	movs	r3, #1
 80020c6:	21d0      	movs	r1, #208	@ 0xd0
 80020c8:	f003 ff6c 	bl	8005fa4 <HAL_I2C_Master_Receive>
	return val;
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000294 	.word	0x20000294

080020dc <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80020e6:	200e      	movs	r0, #14
 80020e8:	f7ff ffd6 	bl	8002098 <DS3231_GetRegByte>
 80020ec:	4603      	mov	r3, r0
 80020ee:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 80020f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f4:	f023 0304 	bic.w	r3, r3, #4
 80020f8:	b25a      	sxtb	r2, r3
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	b25b      	sxtb	r3, r3
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	b25b      	sxtb	r3, r3
 8002106:	4313      	orrs	r3, r2
 8002108:	b25b      	sxtb	r3, r3
 800210a:	b2db      	uxtb	r3, r3
 800210c:	4619      	mov	r1, r3
 800210e:	200e      	movs	r0, #14
 8002110:	f7ff ffa4 	bl	800205c <DS3231_SetRegByte>
}
 8002114:	bf00      	nop
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002126:	200e      	movs	r0, #14
 8002128:	f7ff ffb6 	bl	8002098 <DS3231_GetRegByte>
 800212c:	4603      	mov	r3, r0
 800212e:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 8002130:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002134:	f023 0302 	bic.w	r3, r3, #2
 8002138:	b25a      	sxtb	r2, r3
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	b25b      	sxtb	r3, r3
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	b25b      	sxtb	r3, r3
 8002146:	4313      	orrs	r3, r2
 8002148:	b25b      	sxtb	r3, r3
 800214a:	b2db      	uxtb	r3, r3
 800214c:	4619      	mov	r1, r3
 800214e:	200e      	movs	r0, #14
 8002150:	f7ff ff84 	bl	800205c <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002154:	2001      	movs	r0, #1
 8002156:	f7ff ffc1 	bl	80020dc <DS3231_SetInterruptMode>
}
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 8002168:	200f      	movs	r0, #15
 800216a:	f7ff ff95 	bl	8002098 <DS3231_GetRegByte>
 800216e:	4603      	mov	r3, r0
 8002170:	f023 0302 	bic.w	r3, r3, #2
 8002174:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	f023 0302 	bic.w	r3, r3, #2
 800217c:	b2db      	uxtb	r3, r3
 800217e:	4619      	mov	r1, r3
 8002180:	200f      	movs	r0, #15
 8002182:	f7ff ff6b 	bl	800205c <DS3231_SetRegByte>
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 800218e:	b580      	push	{r7, lr}
 8002190:	b084      	sub	sp, #16
 8002192:	af00      	add	r7, sp, #0
 8002194:	4603      	mov	r3, r0
 8002196:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002198:	200e      	movs	r0, #14
 800219a:	f7ff ff7d 	bl	8002098 <DS3231_GetRegByte>
 800219e:	4603      	mov	r3, r0
 80021a0:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 80021a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a6:	f023 0301 	bic.w	r3, r3, #1
 80021aa:	b25a      	sxtb	r2, r3
 80021ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	b25b      	sxtb	r3, r3
 80021b6:	4313      	orrs	r3, r2
 80021b8:	b25b      	sxtb	r3, r3
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	4619      	mov	r1, r3
 80021be:	200e      	movs	r0, #14
 80021c0:	f7ff ff4c 	bl	800205c <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80021c4:	2001      	movs	r0, #1
 80021c6:	f7ff ff89 	bl	80020dc <DS3231_SetInterruptMode>
}
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 80021d8:	200f      	movs	r0, #15
 80021da:	f7ff ff5d 	bl	8002098 <DS3231_GetRegByte>
 80021de:	4603      	mov	r3, r0
 80021e0:	f023 0301 	bic.w	r3, r3, #1
 80021e4:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	f023 0301 	bic.w	r3, r3, #1
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	4619      	mov	r1, r3
 80021f0:	200f      	movs	r0, #15
 80021f2:	f7ff ff33 	bl	800205c <DS3231_SetRegByte>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <DS3231_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS3231_GetDate(void) {
 80021fe:	b580      	push	{r7, lr}
 8002200:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DATE));
 8002202:	2004      	movs	r0, #4
 8002204:	f7ff ff48 	bl	8002098 <DS3231_GetRegByte>
 8002208:	4603      	mov	r3, r0
 800220a:	4618      	mov	r0, r3
 800220c:	f000 f85e 	bl	80022cc <DS3231_DecodeBCD>
 8002210:	4603      	mov	r3, r0
}
 8002212:	4618      	mov	r0, r3
 8002214:	bd80      	pop	{r7, pc}

08002216 <DS3231_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS3231_GetMonth(void) {
 8002216:	b580      	push	{r7, lr}
 8002218:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MONTH) & 0x7f);
 800221a:	2005      	movs	r0, #5
 800221c:	f7ff ff3c 	bl	8002098 <DS3231_GetRegByte>
 8002220:	4603      	mov	r3, r0
 8002222:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002226:	b2db      	uxtb	r3, r3
 8002228:	4618      	mov	r0, r3
 800222a:	f000 f84f 	bl	80022cc <DS3231_DecodeBCD>
 800222e:	4603      	mov	r3, r0
}
 8002230:	4618      	mov	r0, r3
 8002232:	bd80      	pop	{r7, pc}

08002234 <DS3231_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2199.
 */
uint16_t DS3231_GetYear(void) {
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
	uint8_t decYear = DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_YEAR));
 800223a:	2006      	movs	r0, #6
 800223c:	f7ff ff2c 	bl	8002098 <DS3231_GetRegByte>
 8002240:	4603      	mov	r3, r0
 8002242:	4618      	mov	r0, r3
 8002244:	f000 f842 	bl	80022cc <DS3231_DecodeBCD>
 8002248:	4603      	mov	r3, r0
 800224a:	71fb      	strb	r3, [r7, #7]
	uint16_t century = (DS3231_GetRegByte(DS3231_REG_MONTH) >> DS3231_CENTURY) * 100 + 2000;
 800224c:	2005      	movs	r0, #5
 800224e:	f7ff ff23 	bl	8002098 <DS3231_GetRegByte>
 8002252:	4603      	mov	r3, r0
 8002254:	09db      	lsrs	r3, r3, #7
 8002256:	b2db      	uxtb	r3, r3
 8002258:	461a      	mov	r2, r3
 800225a:	0092      	lsls	r2, r2, #2
 800225c:	4413      	add	r3, r2
 800225e:	461a      	mov	r2, r3
 8002260:	0091      	lsls	r1, r2, #2
 8002262:	461a      	mov	r2, r3
 8002264:	460b      	mov	r3, r1
 8002266:	4413      	add	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	b29b      	uxth	r3, r3
 800226c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8002270:	80bb      	strh	r3, [r7, #4]
	return century + decYear;
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	b29a      	uxth	r2, r3
 8002276:	88bb      	ldrh	r3, [r7, #4]
 8002278:	4413      	add	r3, r2
 800227a:	b29b      	uxth	r3, r3
}
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8002288:	2002      	movs	r0, #2
 800228a:	f7ff ff05 	bl	8002098 <DS3231_GetRegByte>
 800228e:	4603      	mov	r3, r0
 8002290:	4618      	mov	r0, r3
 8002292:	f000 f81b 	bl	80022cc <DS3231_DecodeBCD>
 8002296:	4603      	mov	r3, r0
}
 8002298:	4618      	mov	r0, r3
 800229a:	bd80      	pop	{r7, pc}

0800229c <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 80022a0:	2001      	movs	r0, #1
 80022a2:	f7ff fef9 	bl	8002098 <DS3231_GetRegByte>
 80022a6:	4603      	mov	r3, r0
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 f80f 	bl	80022cc <DS3231_DecodeBCD>
 80022ae:	4603      	mov	r3, r0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <DS3231_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS3231_GetSecond(void) {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_SECOND));
 80022b8:	2000      	movs	r0, #0
 80022ba:	f7ff feed 	bl	8002098 <DS3231_GetRegByte>
 80022be:	4603      	mov	r3, r0
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 f803 	bl	80022cc <DS3231_DecodeBCD>
 80022c6:	4603      	mov	r3, r0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	bd80      	pop	{r7, pc}

080022cc <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	461a      	mov	r2, r3
 80022de:	0092      	lsls	r2, r2, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	f003 030f 	and.w	r3, r3, #15
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	4413      	add	r3, r2
 80022f0:	b2db      	uxtb	r3, r3
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
	...

08002300 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of readBattVoltage */
	readBattVoltageHandle = osThreadNew(StartReadBattVoltageTask, NULL, &readBattVoltage_attributes);
 8002304:	4a18      	ldr	r2, [pc, #96]	@ (8002368 <MX_FREERTOS_Init+0x68>)
 8002306:	2100      	movs	r1, #0
 8002308:	4818      	ldr	r0, [pc, #96]	@ (800236c <MX_FREERTOS_Init+0x6c>)
 800230a:	f007 ffb3 	bl	800a274 <osThreadNew>
 800230e:	4603      	mov	r3, r0
 8002310:	4a17      	ldr	r2, [pc, #92]	@ (8002370 <MX_FREERTOS_Init+0x70>)
 8002312:	6013      	str	r3, [r2, #0]

	/* creation of renderUI */
	renderUIHandle = osThreadNew(StartRenderUITask, NULL, &renderUI_attributes);
 8002314:	4a17      	ldr	r2, [pc, #92]	@ (8002374 <MX_FREERTOS_Init+0x74>)
 8002316:	2100      	movs	r1, #0
 8002318:	4817      	ldr	r0, [pc, #92]	@ (8002378 <MX_FREERTOS_Init+0x78>)
 800231a:	f007 ffab 	bl	800a274 <osThreadNew>
 800231e:	4603      	mov	r3, r0
 8002320:	4a16      	ldr	r2, [pc, #88]	@ (800237c <MX_FREERTOS_Init+0x7c>)
 8002322:	6013      	str	r3, [r2, #0]

	/* creation of pollKeypad */
	pollKeypadHandle = osThreadNew(StartPollKeypadTask, NULL, &pollKeypad_attributes);
 8002324:	4a16      	ldr	r2, [pc, #88]	@ (8002380 <MX_FREERTOS_Init+0x80>)
 8002326:	2100      	movs	r1, #0
 8002328:	4816      	ldr	r0, [pc, #88]	@ (8002384 <MX_FREERTOS_Init+0x84>)
 800232a:	f007 ffa3 	bl	800a274 <osThreadNew>
 800232e:	4603      	mov	r3, r0
 8002330:	4a15      	ldr	r2, [pc, #84]	@ (8002388 <MX_FREERTOS_Init+0x88>)
 8002332:	6013      	str	r3, [r2, #0]

	/* creation of readBMEValues */
	readBMEValuesHandle = osThreadNew(StartReadBMEValuesTask, NULL, &readBMEValues_attributes);
 8002334:	4a15      	ldr	r2, [pc, #84]	@ (800238c <MX_FREERTOS_Init+0x8c>)
 8002336:	2100      	movs	r1, #0
 8002338:	4815      	ldr	r0, [pc, #84]	@ (8002390 <MX_FREERTOS_Init+0x90>)
 800233a:	f007 ff9b 	bl	800a274 <osThreadNew>
 800233e:	4603      	mov	r3, r0
 8002340:	4a14      	ldr	r2, [pc, #80]	@ (8002394 <MX_FREERTOS_Init+0x94>)
 8002342:	6013      	str	r3, [r2, #0]

	/* creation of readDateTime */
	readDateTimeHandle = osThreadNew(StartReadDateTimeTask, NULL, &readDateTime_attributes);
 8002344:	4a14      	ldr	r2, [pc, #80]	@ (8002398 <MX_FREERTOS_Init+0x98>)
 8002346:	2100      	movs	r1, #0
 8002348:	4814      	ldr	r0, [pc, #80]	@ (800239c <MX_FREERTOS_Init+0x9c>)
 800234a:	f007 ff93 	bl	800a274 <osThreadNew>
 800234e:	4603      	mov	r3, r0
 8002350:	4a13      	ldr	r2, [pc, #76]	@ (80023a0 <MX_FREERTOS_Init+0xa0>)
 8002352:	6013      	str	r3, [r2, #0]

	/* creation of blinkStatusLED */
	blinkStatusLEDHandle = osThreadNew(StartBlinkStatusLEDTask, NULL, &blinkStatusLED_attributes);
 8002354:	4a13      	ldr	r2, [pc, #76]	@ (80023a4 <MX_FREERTOS_Init+0xa4>)
 8002356:	2100      	movs	r1, #0
 8002358:	4813      	ldr	r0, [pc, #76]	@ (80023a8 <MX_FREERTOS_Init+0xa8>)
 800235a:	f007 ff8b 	bl	800a274 <osThreadNew>
 800235e:	4603      	mov	r3, r0
 8002360:	4a12      	ldr	r2, [pc, #72]	@ (80023ac <MX_FREERTOS_Init+0xac>)
 8002362:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 8002364:	bf00      	nop
 8002366:	bd80      	pop	{r7, pc}
 8002368:	08012514 	.word	0x08012514
 800236c:	080023b1 	.word	0x080023b1
 8002370:	20000338 	.word	0x20000338
 8002374:	08012538 	.word	0x08012538
 8002378:	0800246d 	.word	0x0800246d
 800237c:	2000033c 	.word	0x2000033c
 8002380:	0801255c 	.word	0x0801255c
 8002384:	08002551 	.word	0x08002551
 8002388:	20000340 	.word	0x20000340
 800238c:	08012580 	.word	0x08012580
 8002390:	08002591 	.word	0x08002591
 8002394:	20000344 	.word	0x20000344
 8002398:	080125a4 	.word	0x080125a4
 800239c:	08002619 	.word	0x08002619
 80023a0:	20000348 	.word	0x20000348
 80023a4:	080125c8 	.word	0x080125c8
 80023a8:	08002679 	.word	0x08002679
 80023ac:	2000034c 	.word	0x2000034c

080023b0 <StartReadBattVoltageTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartReadBattVoltageTask */
void StartReadBattVoltageTask(void *argument)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartReadBattVoltageTask */
	/* Infinite loop */

	for (;;)
	{
		HAL_ADC_Start(&hadc2);
 80023b8:	4824      	ldr	r0, [pc, #144]	@ (800244c <StartReadBattVoltageTask+0x9c>)
 80023ba:	f002 fa51 	bl	8004860 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, 10);
 80023be:	210a      	movs	r1, #10
 80023c0:	4822      	ldr	r0, [pc, #136]	@ (800244c <StartReadBattVoltageTask+0x9c>)
 80023c2:	f002 fb99 	bl	8004af8 <HAL_ADC_PollForConversion>
		battery.raw_adc_value = HAL_ADC_GetValue(&hadc2);
 80023c6:	4821      	ldr	r0, [pc, #132]	@ (800244c <StartReadBattVoltageTask+0x9c>)
 80023c8:	f002 fc98 	bl	8004cfc <HAL_ADC_GetValue>
 80023cc:	4603      	mov	r3, r0
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002450 <StartReadBattVoltageTask+0xa0>)
 80023d2:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc2);
 80023d4:	481d      	ldr	r0, [pc, #116]	@ (800244c <StartReadBattVoltageTask+0x9c>)
 80023d6:	f002 fb59 	bl	8004a8c <HAL_ADC_Stop>
		battery.voltage = (float) (battery.raw_adc_value * (3.3f / 4096.0f));
 80023da:	4b1d      	ldr	r3, [pc, #116]	@ (8002450 <StartReadBattVoltageTask+0xa0>)
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	ee07 3a90 	vmov	s15, r3
 80023e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023e6:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002454 <StartReadBattVoltageTask+0xa4>
 80023ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ee:	4b18      	ldr	r3, [pc, #96]	@ (8002450 <StartReadBattVoltageTask+0xa0>)
 80023f0:	edc3 7a01 	vstr	s15, [r3, #4]
		battery.percentage = (100.0f * battery.raw_adc_value) / 4095.0f;
 80023f4:	4b16      	ldr	r3, [pc, #88]	@ (8002450 <StartReadBattVoltageTask+0xa0>)
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	ee07 3a90 	vmov	s15, r3
 80023fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002400:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002458 <StartReadBattVoltageTask+0xa8>
 8002404:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002408:	eddf 6a14 	vldr	s13, [pc, #80]	@ 800245c <StartReadBattVoltageTask+0xac>
 800240c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002410:	4b0f      	ldr	r3, [pc, #60]	@ (8002450 <StartReadBattVoltageTask+0xa0>)
 8002412:	edc3 7a02 	vstr	s15, [r3, #8]
		Float_transform(battery.voltage, 2, &sign_number, &integer_number, &fractional_number);
 8002416:	4b0e      	ldr	r3, [pc, #56]	@ (8002450 <StartReadBattVoltageTask+0xa0>)
 8002418:	edd3 7a01 	vldr	s15, [r3, #4]
 800241c:	4b10      	ldr	r3, [pc, #64]	@ (8002460 <StartReadBattVoltageTask+0xb0>)
 800241e:	4a11      	ldr	r2, [pc, #68]	@ (8002464 <StartReadBattVoltageTask+0xb4>)
 8002420:	4911      	ldr	r1, [pc, #68]	@ (8002468 <StartReadBattVoltageTask+0xb8>)
 8002422:	2002      	movs	r0, #2
 8002424:	eeb0 0a67 	vmov.f32	s0, s15
 8002428:	f001 ff2a 	bl	8004280 <Float_transform>
		battery.voltage_integer_part = integer_number;
 800242c:	4b0d      	ldr	r3, [pc, #52]	@ (8002464 <StartReadBattVoltageTask+0xb4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4b07      	ldr	r3, [pc, #28]	@ (8002450 <StartReadBattVoltageTask+0xa0>)
 8002434:	709a      	strb	r2, [r3, #2]
		battery.voltage_float_part = fractional_number;
 8002436:	4b0a      	ldr	r3, [pc, #40]	@ (8002460 <StartReadBattVoltageTask+0xb0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	b2da      	uxtb	r2, r3
 800243c:	4b04      	ldr	r3, [pc, #16]	@ (8002450 <StartReadBattVoltageTask+0xa0>)
 800243e:	70da      	strb	r2, [r3, #3]
		osDelay(100);
 8002440:	2064      	movs	r0, #100	@ 0x64
 8002442:	f007 ffc1 	bl	800a3c8 <osDelay>
		HAL_ADC_Start(&hadc2);
 8002446:	bf00      	nop
 8002448:	e7b6      	b.n	80023b8 <StartReadBattVoltageTask+0x8>
 800244a:	bf00      	nop
 800244c:	20000244 	.word	0x20000244
 8002450:	2000030c 	.word	0x2000030c
 8002454:	3a533333 	.word	0x3a533333
 8002458:	42c80000 	.word	0x42c80000
 800245c:	457ff000 	.word	0x457ff000
 8002460:	200006d8 	.word	0x200006d8
 8002464:	200006d4 	.word	0x200006d4
 8002468:	200006d0 	.word	0x200006d0

0800246c <StartRenderUITask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartRenderUITask */
void StartRenderUITask(void *argument)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartRenderUITask */

	/* Infinite loop */
	for (;;)
	{
		switch (menu_pages[menu_kursor])
 8002474:	4b30      	ldr	r3, [pc, #192]	@ (8002538 <StartRenderUITask+0xcc>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	461a      	mov	r2, r3
 800247a:	4b30      	ldr	r3, [pc, #192]	@ (800253c <StartRenderUITask+0xd0>)
 800247c:	5c9b      	ldrb	r3, [r3, r2]
 800247e:	2b06      	cmp	r3, #6
 8002480:	d84d      	bhi.n	800251e <StartRenderUITask+0xb2>
 8002482:	a201      	add	r2, pc, #4	@ (adr r2, 8002488 <StartRenderUITask+0x1c>)
 8002484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002488:	080024a5 	.word	0x080024a5
 800248c:	080024c1 	.word	0x080024c1
 8002490:	080024dd 	.word	0x080024dd
 8002494:	080024e3 	.word	0x080024e3
 8002498:	080024e9 	.word	0x080024e9
 800249c:	08002505 	.word	0x08002505
 80024a0:	0800250b 	.word	0x0800250b
		{
		case BatteryMenu:
			if (batt_menu_kursor == 0)
 80024a4:	4b26      	ldr	r3, [pc, #152]	@ (8002540 <StartRenderUITask+0xd4>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d102      	bne.n	80024b2 <StartRenderUITask+0x46>
				showBatteryMenuPercent();
 80024ac:	f000 f92a 	bl	8002704 <showBatteryMenuPercent>
			else if (batt_menu_kursor == 1)
				showBatteryMenuVolts();
			break;
 80024b0:	e038      	b.n	8002524 <StartRenderUITask+0xb8>
			else if (batt_menu_kursor == 1)
 80024b2:	4b23      	ldr	r3, [pc, #140]	@ (8002540 <StartRenderUITask+0xd4>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d134      	bne.n	8002524 <StartRenderUITask+0xb8>
				showBatteryMenuVolts();
 80024ba:	f000 f8ed 	bl	8002698 <showBatteryMenuVolts>
			break;
 80024be:	e031      	b.n	8002524 <StartRenderUITask+0xb8>
		case TemperatureMenu:
			if (temp_menu_kursor == 0)
 80024c0:	4b20      	ldr	r3, [pc, #128]	@ (8002544 <StartRenderUITask+0xd8>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d102      	bne.n	80024ce <StartRenderUITask+0x62>
				showTemperatureMenu();
 80024c8:	f000 f962 	bl	8002790 <showTemperatureMenu>
			else if (temp_menu_kursor == 1)
				showTemperatureMenuF();
			break;
 80024cc:	e02c      	b.n	8002528 <StartRenderUITask+0xbc>
			else if (temp_menu_kursor == 1)
 80024ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002544 <StartRenderUITask+0xd8>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d128      	bne.n	8002528 <StartRenderUITask+0xbc>
				showTemperatureMenuF();
 80024d6:	f000 f9a1 	bl	800281c <showTemperatureMenuF>
			break;
 80024da:	e025      	b.n	8002528 <StartRenderUITask+0xbc>
		case TimeMenu:
			showTimeMenu();
 80024dc:	f000 f9f0 	bl	80028c0 <showTimeMenu>
			break;
 80024e0:	e025      	b.n	800252e <StartRenderUITask+0xc2>
		case HumidityMenu:
			showHumidityMenu();
 80024e2:	f000 fb8f 	bl	8002c04 <showHumidityMenu>
			break;
 80024e6:	e022      	b.n	800252e <StartRenderUITask+0xc2>
		case PreassureMenu:
			if (press_menu_kursor == 0)
 80024e8:	4b17      	ldr	r3, [pc, #92]	@ (8002548 <StartRenderUITask+0xdc>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d102      	bne.n	80024f6 <StartRenderUITask+0x8a>
				showPressureMenuMMHG();
 80024f0:	f000 fc5a 	bl	8002da8 <showPressureMenuMMHG>
			else if (press_menu_kursor == 1)
				showPressureMenuHPA();
			break;
 80024f4:	e01a      	b.n	800252c <StartRenderUITask+0xc0>
			else if (press_menu_kursor == 1)
 80024f6:	4b14      	ldr	r3, [pc, #80]	@ (8002548 <StartRenderUITask+0xdc>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d116      	bne.n	800252c <StartRenderUITask+0xc0>
				showPressureMenuHPA();
 80024fe:	f000 fc0d 	bl	8002d1c <showPressureMenuHPA>
			break;
 8002502:	e013      	b.n	800252c <StartRenderUITask+0xc0>
		case AltitudeMenu:
			showAltitudeMenu();
 8002504:	f000 fbc4 	bl	8002c90 <showAltitudeMenu>
			break;
 8002508:	e011      	b.n	800252e <StartRenderUITask+0xc2>
		case SettingsMenu:
			if (setTimeMode)
 800250a:	4b10      	ldr	r3, [pc, #64]	@ (800254c <StartRenderUITask+0xe0>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d002      	beq.n	8002518 <StartRenderUITask+0xac>
			{
//				vTaskSuspend(readDateTimeHandle);
				showSetTimeMenu();
 8002512:	f000 fa1f 	bl	8002954 <showSetTimeMenu>
			else
			{
//				vTaskResume(readDateTimeHandle);
				showSettingsMenu();
			}
			break;
 8002516:	e00a      	b.n	800252e <StartRenderUITask+0xc2>
				showSettingsMenu();
 8002518:	f000 fc8c 	bl	8002e34 <showSettingsMenu>
			break;
 800251c:	e007      	b.n	800252e <StartRenderUITask+0xc2>
		default:
			showTimeMenu();
 800251e:	f000 f9cf 	bl	80028c0 <showTimeMenu>
			break;
 8002522:	e004      	b.n	800252e <StartRenderUITask+0xc2>
			break;
 8002524:	bf00      	nop
 8002526:	e002      	b.n	800252e <StartRenderUITask+0xc2>
			break;
 8002528:	bf00      	nop
 800252a:	e000      	b.n	800252e <StartRenderUITask+0xc2>
			break;
 800252c:	bf00      	nop
		}

		osDelay(25); // refresh rate
 800252e:	2019      	movs	r0, #25
 8002530:	f007 ff4a 	bl	800a3c8 <osDelay>
		switch (menu_pages[menu_kursor])
 8002534:	e79e      	b.n	8002474 <StartRenderUITask+0x8>
 8002536:	bf00      	nop
 8002538:	200002fe 	.word	0x200002fe
 800253c:	20000004 	.word	0x20000004
 8002540:	20000301 	.word	0x20000301
 8002544:	200002ff 	.word	0x200002ff
 8002548:	20000300 	.word	0x20000300
 800254c:	20000304 	.word	0x20000304

08002550 <StartPollKeypadTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartPollKeypadTask */
void StartPollKeypadTask(void *argument)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartPollKeypadTask */
	/* Infinite loop */
	for (;;)
	{
		key_pressed = pollKeypad();
 8002558:	f7ff fc92 	bl	8001e80 <pollKeypad>
 800255c:	4603      	mov	r3, r0
 800255e:	461a      	mov	r2, r3
 8002560:	4b09      	ldr	r3, [pc, #36]	@ (8002588 <StartPollKeypadTask+0x38>)
 8002562:	701a      	strb	r2, [r3, #0]

		if (key_pressed != None)
 8002564:	4b08      	ldr	r3, [pc, #32]	@ (8002588 <StartPollKeypadTask+0x38>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <StartPollKeypadTask+0x2e>
		{
			previos_key = key_pressed;
 800256c:	4b06      	ldr	r3, [pc, #24]	@ (8002588 <StartPollKeypadTask+0x38>)
 800256e:	781a      	ldrb	r2, [r3, #0]
 8002570:	4b06      	ldr	r3, [pc, #24]	@ (800258c <StartPollKeypadTask+0x3c>)
 8002572:	701a      	strb	r2, [r3, #0]

			processKey(key_pressed);
 8002574:	4b04      	ldr	r3, [pc, #16]	@ (8002588 <StartPollKeypadTask+0x38>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f000 fcdf 	bl	8002f3c <processKey>
		}
		osDelay(100);
 800257e:	2064      	movs	r0, #100	@ 0x64
 8002580:	f007 ff22 	bl	800a3c8 <osDelay>
		key_pressed = pollKeypad();
 8002584:	e7e8      	b.n	8002558 <StartPollKeypadTask+0x8>
 8002586:	bf00      	nop
 8002588:	200002fc 	.word	0x200002fc
 800258c:	200002fd 	.word	0x200002fd

08002590 <StartReadBMEValuesTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartReadBMEValuesTask */
void StartReadBMEValuesTask(void *argument)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartReadBMEValuesTask */
	/* Infinite loop */
	for (;;)
	{
		// temperature
		bme_values.temperature = BME280_ReadTemperature();
 8002598:	f7fe ffee 	bl	8001578 <BME280_ReadTemperature>
 800259c:	eef0 7a40 	vmov.f32	s15, s0
 80025a0:	4b19      	ldr	r3, [pc, #100]	@ (8002608 <StartReadBMEValuesTask+0x78>)
 80025a2:	edc3 7a00 	vstr	s15, [r3]

		// preasures
		bme_values.preassurePA = BME280_ReadPressure();
 80025a6:	f7ff f83f 	bl	8001628 <BME280_ReadPressure>
 80025aa:	eef0 7a40 	vmov.f32	s15, s0
 80025ae:	4b16      	ldr	r3, [pc, #88]	@ (8002608 <StartReadBMEValuesTask+0x78>)
 80025b0:	edc3 7a01 	vstr	s15, [r3, #4]
		bme_values.preassureHPA = bme_values.preassurePA / 1000.0f;
 80025b4:	4b14      	ldr	r3, [pc, #80]	@ (8002608 <StartReadBMEValuesTask+0x78>)
 80025b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80025ba:	eddf 6a14 	vldr	s13, [pc, #80]	@ 800260c <StartReadBMEValuesTask+0x7c>
 80025be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025c2:	4b11      	ldr	r3, [pc, #68]	@ (8002608 <StartReadBMEValuesTask+0x78>)
 80025c4:	edc3 7a02 	vstr	s15, [r3, #8]
		bme_values.preassureMMHG = bme_values.preassurePA * 0.000750061683f;
 80025c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002608 <StartReadBMEValuesTask+0x78>)
 80025ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80025ce:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002610 <StartReadBMEValuesTask+0x80>
 80025d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002608 <StartReadBMEValuesTask+0x78>)
 80025d8:	edc3 7a03 	vstr	s15, [r3, #12]
//
//		// altitude
		bme_values.altitude = BME280_ReadAltitude(SEALEVELPRESSURE_PA);
 80025dc:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8002614 <StartReadBMEValuesTask+0x84>
 80025e0:	f7ff fbba 	bl	8001d58 <BME280_ReadAltitude>
 80025e4:	eef0 7a40 	vmov.f32	s15, s0
 80025e8:	4b07      	ldr	r3, [pc, #28]	@ (8002608 <StartReadBMEValuesTask+0x78>)
 80025ea:	edc3 7a05 	vstr	s15, [r3, #20]
//
//		// humidity
		bme_values.humidity = BME280_ReadHumidity();
 80025ee:	f7ff fb2f 	bl	8001c50 <BME280_ReadHumidity>
 80025f2:	eef0 7a40 	vmov.f32	s15, s0
 80025f6:	4b04      	ldr	r3, [pc, #16]	@ (8002608 <StartReadBMEValuesTask+0x78>)
 80025f8:	edc3 7a04 	vstr	s15, [r3, #16]

		osDelay(2000);
 80025fc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002600:	f007 fee2 	bl	800a3c8 <osDelay>
		bme_values.temperature = BME280_ReadTemperature();
 8002604:	bf00      	nop
 8002606:	e7c7      	b.n	8002598 <StartReadBMEValuesTask+0x8>
 8002608:	20000320 	.word	0x20000320
 800260c:	447a0000 	.word	0x447a0000
 8002610:	3a449fca 	.word	0x3a449fca
 8002614:	49776020 	.word	0x49776020

08002618 <StartReadDateTimeTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartReadDateTimeTask */
void StartReadDateTimeTask(void *argument)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartReadDateTimeTask */
	/* Infinite loop */
	for (;;)
	{
		date_time.hour = DS3231_GetHour();
 8002620:	f7ff fe30 	bl	8002284 <DS3231_GetHour>
 8002624:	4603      	mov	r3, r0
 8002626:	461a      	mov	r2, r3
 8002628:	4b12      	ldr	r3, [pc, #72]	@ (8002674 <StartReadDateTimeTask+0x5c>)
 800262a:	711a      	strb	r2, [r3, #4]
		date_time.minute = DS3231_GetMinute();
 800262c:	f7ff fe36 	bl	800229c <DS3231_GetMinute>
 8002630:	4603      	mov	r3, r0
 8002632:	461a      	mov	r2, r3
 8002634:	4b0f      	ldr	r3, [pc, #60]	@ (8002674 <StartReadDateTimeTask+0x5c>)
 8002636:	715a      	strb	r2, [r3, #5]
		date_time.second = DS3231_GetSecond();
 8002638:	f7ff fe3c 	bl	80022b4 <DS3231_GetSecond>
 800263c:	4603      	mov	r3, r0
 800263e:	461a      	mov	r2, r3
 8002640:	4b0c      	ldr	r3, [pc, #48]	@ (8002674 <StartReadDateTimeTask+0x5c>)
 8002642:	719a      	strb	r2, [r3, #6]

		date_time.year = DS3231_GetYear();
 8002644:	f7ff fdf6 	bl	8002234 <DS3231_GetYear>
 8002648:	4603      	mov	r3, r0
 800264a:	461a      	mov	r2, r3
 800264c:	4b09      	ldr	r3, [pc, #36]	@ (8002674 <StartReadDateTimeTask+0x5c>)
 800264e:	801a      	strh	r2, [r3, #0]
		date_time.month = DS3231_GetMonth();
 8002650:	f7ff fde1 	bl	8002216 <DS3231_GetMonth>
 8002654:	4603      	mov	r3, r0
 8002656:	461a      	mov	r2, r3
 8002658:	4b06      	ldr	r3, [pc, #24]	@ (8002674 <StartReadDateTimeTask+0x5c>)
 800265a:	709a      	strb	r2, [r3, #2]
		date_time.day = DS3231_GetDate();
 800265c:	f7ff fdcf 	bl	80021fe <DS3231_GetDate>
 8002660:	4603      	mov	r3, r0
 8002662:	461a      	mov	r2, r3
 8002664:	4b03      	ldr	r3, [pc, #12]	@ (8002674 <StartReadDateTimeTask+0x5c>)
 8002666:	70da      	strb	r2, [r3, #3]
		osDelay(500);
 8002668:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800266c:	f007 feac 	bl	800a3c8 <osDelay>
		date_time.hour = DS3231_GetHour();
 8002670:	bf00      	nop
 8002672:	e7d5      	b.n	8002620 <StartReadDateTimeTask+0x8>
 8002674:	20000318 	.word	0x20000318

08002678 <StartBlinkStatusLEDTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinkStatusLEDTask */
void StartBlinkStatusLEDTask(void *argument)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartBlinkStatusLEDTask */
	/* Infinite loop */
	for (;;)
	{
		HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8002680:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002684:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002688:	f003 fabe 	bl	8005c08 <HAL_GPIO_TogglePin>
		osDelay(500);
 800268c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002690:	f007 fe9a 	bl	800a3c8 <osDelay>
		HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8002694:	bf00      	nop
 8002696:	e7f3      	b.n	8002680 <StartBlinkStatusLEDTask+0x8>

08002698 <showBatteryMenuVolts>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

static void showBatteryMenuVolts()
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black); // clear display
 800269e:	2000      	movs	r0, #0
 80026a0:	f001 f9a2 	bl	80039e8 <ssd1306_Fill>

	ssd1306_SetCursor(0, 0);
 80026a4:	2100      	movs	r1, #0
 80026a6:	2000      	movs	r0, #0
 80026a8:	f001 fae8 	bl	8003c7c <ssd1306_SetCursor>
	ssd1306_WriteString("Battery voltage", Font_7x10, White);
 80026ac:	4b0f      	ldr	r3, [pc, #60]	@ (80026ec <showBatteryMenuVolts+0x54>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	9200      	str	r2, [sp, #0]
 80026b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026b4:	480e      	ldr	r0, [pc, #56]	@ (80026f0 <showBatteryMenuVolts+0x58>)
 80026b6:	f001 fabb 	bl	8003c30 <ssd1306_WriteString>

	ssd1306_SetCursor(0, 14);
 80026ba:	210e      	movs	r1, #14
 80026bc:	2000      	movs	r0, #0
 80026be:	f001 fadd 	bl	8003c7c <ssd1306_SetCursor>
	sprintf(msg_buffer, "%d.%02d V", battery.voltage_integer_part, battery.voltage_float_part);
 80026c2:	4b0c      	ldr	r3, [pc, #48]	@ (80026f4 <showBatteryMenuVolts+0x5c>)
 80026c4:	789b      	ldrb	r3, [r3, #2]
 80026c6:	461a      	mov	r2, r3
 80026c8:	4b0a      	ldr	r3, [pc, #40]	@ (80026f4 <showBatteryMenuVolts+0x5c>)
 80026ca:	78db      	ldrb	r3, [r3, #3]
 80026cc:	490a      	ldr	r1, [pc, #40]	@ (80026f8 <showBatteryMenuVolts+0x60>)
 80026ce:	480b      	ldr	r0, [pc, #44]	@ (80026fc <showBatteryMenuVolts+0x64>)
 80026d0:	f00b fa42 	bl	800db58 <siprintf>
	ssd1306_WriteString(msg_buffer, Font_11x18, White);
 80026d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002700 <showBatteryMenuVolts+0x68>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	9200      	str	r2, [sp, #0]
 80026da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026dc:	4807      	ldr	r0, [pc, #28]	@ (80026fc <showBatteryMenuVolts+0x64>)
 80026de:	f001 faa7 	bl	8003c30 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80026e2:	f001 f999 	bl	8003a18 <ssd1306_UpdateScreen>
}
 80026e6:	bf00      	nop
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	08013ab4 	.word	0x08013ab4
 80026f0:	080123a8 	.word	0x080123a8
 80026f4:	2000030c 	.word	0x2000030c
 80026f8:	080123b8 	.word	0x080123b8
 80026fc:	20000298 	.word	0x20000298
 8002700:	08013ac0 	.word	0x08013ac0

08002704 <showBatteryMenuPercent>:

static void showBatteryMenuPercent()
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black); // clear display
 800270a:	2000      	movs	r0, #0
 800270c:	f001 f96c 	bl	80039e8 <ssd1306_Fill>

	ssd1306_SetCursor(0, 0);
 8002710:	2100      	movs	r1, #0
 8002712:	2000      	movs	r0, #0
 8002714:	f001 fab2 	bl	8003c7c <ssd1306_SetCursor>
	ssd1306_WriteString("Battery percentage", Font_7x10, White);
 8002718:	4b14      	ldr	r3, [pc, #80]	@ (800276c <showBatteryMenuPercent+0x68>)
 800271a:	2201      	movs	r2, #1
 800271c:	9200      	str	r2, [sp, #0]
 800271e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002720:	4813      	ldr	r0, [pc, #76]	@ (8002770 <showBatteryMenuPercent+0x6c>)
 8002722:	f001 fa85 	bl	8003c30 <ssd1306_WriteString>

	ssd1306_SetCursor(0, 14);
 8002726:	210e      	movs	r1, #14
 8002728:	2000      	movs	r0, #0
 800272a:	f001 faa7 	bl	8003c7c <ssd1306_SetCursor>
	Float_transform(battery.percentage, 1, &sign_number, &integer_number, &fractional_number);
 800272e:	4b11      	ldr	r3, [pc, #68]	@ (8002774 <showBatteryMenuPercent+0x70>)
 8002730:	edd3 7a02 	vldr	s15, [r3, #8]
 8002734:	4b10      	ldr	r3, [pc, #64]	@ (8002778 <showBatteryMenuPercent+0x74>)
 8002736:	4a11      	ldr	r2, [pc, #68]	@ (800277c <showBatteryMenuPercent+0x78>)
 8002738:	4911      	ldr	r1, [pc, #68]	@ (8002780 <showBatteryMenuPercent+0x7c>)
 800273a:	2001      	movs	r0, #1
 800273c:	eeb0 0a67 	vmov.f32	s0, s15
 8002740:	f001 fd9e 	bl	8004280 <Float_transform>
	sprintf(msg_buffer, "%d.%01ld %%", integer_number, fractional_number);
 8002744:	4b0d      	ldr	r3, [pc, #52]	@ (800277c <showBatteryMenuPercent+0x78>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4b0b      	ldr	r3, [pc, #44]	@ (8002778 <showBatteryMenuPercent+0x74>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	490d      	ldr	r1, [pc, #52]	@ (8002784 <showBatteryMenuPercent+0x80>)
 800274e:	480e      	ldr	r0, [pc, #56]	@ (8002788 <showBatteryMenuPercent+0x84>)
 8002750:	f00b fa02 	bl	800db58 <siprintf>
	ssd1306_WriteString(msg_buffer, Font_11x18, White);
 8002754:	4b0d      	ldr	r3, [pc, #52]	@ (800278c <showBatteryMenuPercent+0x88>)
 8002756:	2201      	movs	r2, #1
 8002758:	9200      	str	r2, [sp, #0]
 800275a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800275c:	480a      	ldr	r0, [pc, #40]	@ (8002788 <showBatteryMenuPercent+0x84>)
 800275e:	f001 fa67 	bl	8003c30 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002762:	f001 f959 	bl	8003a18 <ssd1306_UpdateScreen>
}
 8002766:	bf00      	nop
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	08013ab4 	.word	0x08013ab4
 8002770:	080123c4 	.word	0x080123c4
 8002774:	2000030c 	.word	0x2000030c
 8002778:	200006d8 	.word	0x200006d8
 800277c:	200006d4 	.word	0x200006d4
 8002780:	200006d0 	.word	0x200006d0
 8002784:	080123d8 	.word	0x080123d8
 8002788:	20000298 	.word	0x20000298
 800278c:	08013ac0 	.word	0x08013ac0

08002790 <showTemperatureMenu>:

static void showTemperatureMenu()
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black); // clear display
 8002796:	2000      	movs	r0, #0
 8002798:	f001 f926 	bl	80039e8 <ssd1306_Fill>

	ssd1306_SetCursor(0, 0);
 800279c:	2100      	movs	r1, #0
 800279e:	2000      	movs	r0, #0
 80027a0:	f001 fa6c 	bl	8003c7c <ssd1306_SetCursor>
	ssd1306_WriteString("Temperature", Font_7x10, White);
 80027a4:	4b14      	ldr	r3, [pc, #80]	@ (80027f8 <showTemperatureMenu+0x68>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	9200      	str	r2, [sp, #0]
 80027aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027ac:	4813      	ldr	r0, [pc, #76]	@ (80027fc <showTemperatureMenu+0x6c>)
 80027ae:	f001 fa3f 	bl	8003c30 <ssd1306_WriteString>

	ssd1306_SetCursor(0, 14);
 80027b2:	210e      	movs	r1, #14
 80027b4:	2000      	movs	r0, #0
 80027b6:	f001 fa61 	bl	8003c7c <ssd1306_SetCursor>
	Float_transform(bme_values.temperature, 1, &sign_number, &integer_number, &fractional_number);
 80027ba:	4b11      	ldr	r3, [pc, #68]	@ (8002800 <showTemperatureMenu+0x70>)
 80027bc:	edd3 7a00 	vldr	s15, [r3]
 80027c0:	4b10      	ldr	r3, [pc, #64]	@ (8002804 <showTemperatureMenu+0x74>)
 80027c2:	4a11      	ldr	r2, [pc, #68]	@ (8002808 <showTemperatureMenu+0x78>)
 80027c4:	4911      	ldr	r1, [pc, #68]	@ (800280c <showTemperatureMenu+0x7c>)
 80027c6:	2001      	movs	r0, #1
 80027c8:	eeb0 0a67 	vmov.f32	s0, s15
 80027cc:	f001 fd58 	bl	8004280 <Float_transform>
	sprintf(msg_buffer, "%d.%.01ld *C", integer_number, fractional_number);
 80027d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002808 <showTemperatureMenu+0x78>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002804 <showTemperatureMenu+0x74>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	490d      	ldr	r1, [pc, #52]	@ (8002810 <showTemperatureMenu+0x80>)
 80027da:	480e      	ldr	r0, [pc, #56]	@ (8002814 <showTemperatureMenu+0x84>)
 80027dc:	f00b f9bc 	bl	800db58 <siprintf>
	ssd1306_WriteString(msg_buffer, Font_11x18, White);
 80027e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002818 <showTemperatureMenu+0x88>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	9200      	str	r2, [sp, #0]
 80027e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027e8:	480a      	ldr	r0, [pc, #40]	@ (8002814 <showTemperatureMenu+0x84>)
 80027ea:	f001 fa21 	bl	8003c30 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80027ee:	f001 f913 	bl	8003a18 <ssd1306_UpdateScreen>
}
 80027f2:	bf00      	nop
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	08013ab4 	.word	0x08013ab4
 80027fc:	080123e4 	.word	0x080123e4
 8002800:	20000320 	.word	0x20000320
 8002804:	200006d8 	.word	0x200006d8
 8002808:	200006d4 	.word	0x200006d4
 800280c:	200006d0 	.word	0x200006d0
 8002810:	080123f0 	.word	0x080123f0
 8002814:	20000298 	.word	0x20000298
 8002818:	08013ac0 	.word	0x08013ac0

0800281c <showTemperatureMenuF>:

static void showTemperatureMenuF()
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black); // clear display
 8002822:	2000      	movs	r0, #0
 8002824:	f001 f8e0 	bl	80039e8 <ssd1306_Fill>

	ssd1306_SetCursor(0, 0);
 8002828:	2100      	movs	r1, #0
 800282a:	2000      	movs	r0, #0
 800282c:	f001 fa26 	bl	8003c7c <ssd1306_SetCursor>
	ssd1306_WriteString("Temperature", Font_7x10, White);
 8002830:	4b18      	ldr	r3, [pc, #96]	@ (8002894 <showTemperatureMenuF+0x78>)
 8002832:	2201      	movs	r2, #1
 8002834:	9200      	str	r2, [sp, #0]
 8002836:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002838:	4817      	ldr	r0, [pc, #92]	@ (8002898 <showTemperatureMenuF+0x7c>)
 800283a:	f001 f9f9 	bl	8003c30 <ssd1306_WriteString>

	ssd1306_SetCursor(0, 14);
 800283e:	210e      	movs	r1, #14
 8002840:	2000      	movs	r0, #0
 8002842:	f001 fa1b 	bl	8003c7c <ssd1306_SetCursor>
	Float_transform(bme_values.temperature * (9.0f / 5.0f) + 32, 1, &sign_number, &integer_number, &fractional_number);
 8002846:	4b15      	ldr	r3, [pc, #84]	@ (800289c <showTemperatureMenuF+0x80>)
 8002848:	edd3 7a00 	vldr	s15, [r3]
 800284c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80028a0 <showTemperatureMenuF+0x84>
 8002850:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002854:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80028a4 <showTemperatureMenuF+0x88>
 8002858:	ee77 7a87 	vadd.f32	s15, s15, s14
 800285c:	4b12      	ldr	r3, [pc, #72]	@ (80028a8 <showTemperatureMenuF+0x8c>)
 800285e:	4a13      	ldr	r2, [pc, #76]	@ (80028ac <showTemperatureMenuF+0x90>)
 8002860:	4913      	ldr	r1, [pc, #76]	@ (80028b0 <showTemperatureMenuF+0x94>)
 8002862:	2001      	movs	r0, #1
 8002864:	eeb0 0a67 	vmov.f32	s0, s15
 8002868:	f001 fd0a 	bl	8004280 <Float_transform>
	sprintf(msg_buffer, "%d.%.01ld *F", integer_number, fractional_number);
 800286c:	4b0f      	ldr	r3, [pc, #60]	@ (80028ac <showTemperatureMenuF+0x90>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	4b0d      	ldr	r3, [pc, #52]	@ (80028a8 <showTemperatureMenuF+0x8c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	490f      	ldr	r1, [pc, #60]	@ (80028b4 <showTemperatureMenuF+0x98>)
 8002876:	4810      	ldr	r0, [pc, #64]	@ (80028b8 <showTemperatureMenuF+0x9c>)
 8002878:	f00b f96e 	bl	800db58 <siprintf>
	ssd1306_WriteString(msg_buffer, Font_11x18, White);
 800287c:	4b0f      	ldr	r3, [pc, #60]	@ (80028bc <showTemperatureMenuF+0xa0>)
 800287e:	2201      	movs	r2, #1
 8002880:	9200      	str	r2, [sp, #0]
 8002882:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002884:	480c      	ldr	r0, [pc, #48]	@ (80028b8 <showTemperatureMenuF+0x9c>)
 8002886:	f001 f9d3 	bl	8003c30 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800288a:	f001 f8c5 	bl	8003a18 <ssd1306_UpdateScreen>
}
 800288e:	bf00      	nop
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	08013ab4 	.word	0x08013ab4
 8002898:	080123e4 	.word	0x080123e4
 800289c:	20000320 	.word	0x20000320
 80028a0:	3fe66666 	.word	0x3fe66666
 80028a4:	42000000 	.word	0x42000000
 80028a8:	200006d8 	.word	0x200006d8
 80028ac:	200006d4 	.word	0x200006d4
 80028b0:	200006d0 	.word	0x200006d0
 80028b4:	08012400 	.word	0x08012400
 80028b8:	20000298 	.word	0x20000298
 80028bc:	08013ac0 	.word	0x08013ac0

080028c0 <showTimeMenu>:

static void showTimeMenu()
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black); // clear display
 80028c6:	2000      	movs	r0, #0
 80028c8:	f001 f88e 	bl	80039e8 <ssd1306_Fill>

	ssd1306_SetCursor(0, 0);
 80028cc:	2100      	movs	r1, #0
 80028ce:	2000      	movs	r0, #0
 80028d0:	f001 f9d4 	bl	8003c7c <ssd1306_SetCursor>
	sprintf(msg_buffer, "%d/%d/%d", date_time.day, date_time.month, date_time.year);
 80028d4:	4b19      	ldr	r3, [pc, #100]	@ (800293c <showTimeMenu+0x7c>)
 80028d6:	78db      	ldrb	r3, [r3, #3]
 80028d8:	461a      	mov	r2, r3
 80028da:	4b18      	ldr	r3, [pc, #96]	@ (800293c <showTimeMenu+0x7c>)
 80028dc:	789b      	ldrb	r3, [r3, #2]
 80028de:	4619      	mov	r1, r3
 80028e0:	4b16      	ldr	r3, [pc, #88]	@ (800293c <showTimeMenu+0x7c>)
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	460b      	mov	r3, r1
 80028e8:	4915      	ldr	r1, [pc, #84]	@ (8002940 <showTimeMenu+0x80>)
 80028ea:	4816      	ldr	r0, [pc, #88]	@ (8002944 <showTimeMenu+0x84>)
 80028ec:	f00b f934 	bl	800db58 <siprintf>
	ssd1306_WriteString(msg_buffer, Font_7x10, White);
 80028f0:	4b15      	ldr	r3, [pc, #84]	@ (8002948 <showTimeMenu+0x88>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	9200      	str	r2, [sp, #0]
 80028f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028f8:	4812      	ldr	r0, [pc, #72]	@ (8002944 <showTimeMenu+0x84>)
 80028fa:	f001 f999 	bl	8003c30 <ssd1306_WriteString>

	ssd1306_SetCursor(0, 12);
 80028fe:	210c      	movs	r1, #12
 8002900:	2000      	movs	r0, #0
 8002902:	f001 f9bb 	bl	8003c7c <ssd1306_SetCursor>
	sprintf(msg_buffer, "%d:%d:%d", date_time.hour, date_time.minute, date_time.second);
 8002906:	4b0d      	ldr	r3, [pc, #52]	@ (800293c <showTimeMenu+0x7c>)
 8002908:	791b      	ldrb	r3, [r3, #4]
 800290a:	461a      	mov	r2, r3
 800290c:	4b0b      	ldr	r3, [pc, #44]	@ (800293c <showTimeMenu+0x7c>)
 800290e:	795b      	ldrb	r3, [r3, #5]
 8002910:	4619      	mov	r1, r3
 8002912:	4b0a      	ldr	r3, [pc, #40]	@ (800293c <showTimeMenu+0x7c>)
 8002914:	799b      	ldrb	r3, [r3, #6]
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	460b      	mov	r3, r1
 800291a:	490c      	ldr	r1, [pc, #48]	@ (800294c <showTimeMenu+0x8c>)
 800291c:	4809      	ldr	r0, [pc, #36]	@ (8002944 <showTimeMenu+0x84>)
 800291e:	f00b f91b 	bl	800db58 <siprintf>
	ssd1306_WriteString(msg_buffer, Font_11x18, White);
 8002922:	4b0b      	ldr	r3, [pc, #44]	@ (8002950 <showTimeMenu+0x90>)
 8002924:	2201      	movs	r2, #1
 8002926:	9200      	str	r2, [sp, #0]
 8002928:	cb0e      	ldmia	r3, {r1, r2, r3}
 800292a:	4806      	ldr	r0, [pc, #24]	@ (8002944 <showTimeMenu+0x84>)
 800292c:	f001 f980 	bl	8003c30 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 8002930:	f001 f872 	bl	8003a18 <ssd1306_UpdateScreen>
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20000318 	.word	0x20000318
 8002940:	08012410 	.word	0x08012410
 8002944:	20000298 	.word	0x20000298
 8002948:	08013ab4 	.word	0x08013ab4
 800294c:	0801241c 	.word	0x0801241c
 8002950:	08013ac0 	.word	0x08013ac0

08002954 <showSetTimeMenu>:

static void showSetTimeMenu()
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af02      	add	r7, sp, #8
//	set_date_time.day = date_time.day;
//	set_date_time.hour = date_time.hour;
//	set_date_time.minute = date_time.minute;
//	set_date_time.second = date_time.second;

	ssd1306_Fill(Black); // clear display
 800295a:	2000      	movs	r0, #0
 800295c:	f001 f844 	bl	80039e8 <ssd1306_Fill>

	if (set_time_cursor >= 0 && set_time_cursor < 3)
 8002960:	4b95      	ldr	r3, [pc, #596]	@ (8002bb8 <showSetTimeMenu+0x264>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b02      	cmp	r3, #2
 8002966:	f200 808c 	bhi.w	8002a82 <showSetTimeMenu+0x12e>
	{
		// first page
		ssd1306_SetCursor(10, 0);
 800296a:	2100      	movs	r1, #0
 800296c:	200a      	movs	r0, #10
 800296e:	f001 f985 	bl	8003c7c <ssd1306_SetCursor>
		sprintf(msg_buffer, "Year: %d", set_date_time.year);
 8002972:	4b92      	ldr	r3, [pc, #584]	@ (8002bbc <showSetTimeMenu+0x268>)
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	4991      	ldr	r1, [pc, #580]	@ (8002bc0 <showSetTimeMenu+0x26c>)
 800297a:	4892      	ldr	r0, [pc, #584]	@ (8002bc4 <showSetTimeMenu+0x270>)
 800297c:	f00b f8ec 	bl	800db58 <siprintf>
		ssd1306_WriteString(msg_buffer, Font_7x10, White);
 8002980:	4b91      	ldr	r3, [pc, #580]	@ (8002bc8 <showSetTimeMenu+0x274>)
 8002982:	2201      	movs	r2, #1
 8002984:	9200      	str	r2, [sp, #0]
 8002986:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002988:	488e      	ldr	r0, [pc, #568]	@ (8002bc4 <showSetTimeMenu+0x270>)
 800298a:	f001 f951 	bl	8003c30 <ssd1306_WriteString>

		ssd1306_SetCursor(10, 11);
 800298e:	210b      	movs	r1, #11
 8002990:	200a      	movs	r0, #10
 8002992:	f001 f973 	bl	8003c7c <ssd1306_SetCursor>
		sprintf(msg_buffer, "Month: %d", set_date_time.month);
 8002996:	4b89      	ldr	r3, [pc, #548]	@ (8002bbc <showSetTimeMenu+0x268>)
 8002998:	789b      	ldrb	r3, [r3, #2]
 800299a:	461a      	mov	r2, r3
 800299c:	498b      	ldr	r1, [pc, #556]	@ (8002bcc <showSetTimeMenu+0x278>)
 800299e:	4889      	ldr	r0, [pc, #548]	@ (8002bc4 <showSetTimeMenu+0x270>)
 80029a0:	f00b f8da 	bl	800db58 <siprintf>
		ssd1306_WriteString(msg_buffer, Font_7x10, White);
 80029a4:	4b88      	ldr	r3, [pc, #544]	@ (8002bc8 <showSetTimeMenu+0x274>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	9200      	str	r2, [sp, #0]
 80029aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029ac:	4885      	ldr	r0, [pc, #532]	@ (8002bc4 <showSetTimeMenu+0x270>)
 80029ae:	f001 f93f 	bl	8003c30 <ssd1306_WriteString>

		ssd1306_SetCursor(10, 22);
 80029b2:	2116      	movs	r1, #22
 80029b4:	200a      	movs	r0, #10
 80029b6:	f001 f961 	bl	8003c7c <ssd1306_SetCursor>
		sprintf(msg_buffer, "Day: %d", set_date_time.day);
 80029ba:	4b80      	ldr	r3, [pc, #512]	@ (8002bbc <showSetTimeMenu+0x268>)
 80029bc:	78db      	ldrb	r3, [r3, #3]
 80029be:	461a      	mov	r2, r3
 80029c0:	4983      	ldr	r1, [pc, #524]	@ (8002bd0 <showSetTimeMenu+0x27c>)
 80029c2:	4880      	ldr	r0, [pc, #512]	@ (8002bc4 <showSetTimeMenu+0x270>)
 80029c4:	f00b f8c8 	bl	800db58 <siprintf>
		ssd1306_WriteString(msg_buffer, Font_7x10, White);
 80029c8:	4b7f      	ldr	r3, [pc, #508]	@ (8002bc8 <showSetTimeMenu+0x274>)
 80029ca:	2201      	movs	r2, #1
 80029cc:	9200      	str	r2, [sp, #0]
 80029ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029d0:	487c      	ldr	r0, [pc, #496]	@ (8002bc4 <showSetTimeMenu+0x270>)
 80029d2:	f001 f92d 	bl	8003c30 <ssd1306_WriteString>

		ssd1306_SetCursor(0, (set_time_cursor * 10) + 1);
 80029d6:	4b78      	ldr	r3, [pc, #480]	@ (8002bb8 <showSetTimeMenu+0x264>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	0092      	lsls	r2, r2, #2
 80029de:	4413      	add	r3, r2
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	3301      	adds	r3, #1
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	4619      	mov	r1, r3
 80029ea:	2000      	movs	r0, #0
 80029ec:	f001 f946 	bl	8003c7c <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 80029f0:	4b75      	ldr	r3, [pc, #468]	@ (8002bc8 <showSetTimeMenu+0x274>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	9200      	str	r2, [sp, #0]
 80029f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029f8:	4876      	ldr	r0, [pc, #472]	@ (8002bd4 <showSetTimeMenu+0x280>)
 80029fa:	f001 f919 	bl	8003c30 <ssd1306_WriteString>

		if (editYearMode || editMonthMode || editDayMode || editHourMode || editMinuteMode || editSecondMode)
 80029fe:	4b76      	ldr	r3, [pc, #472]	@ (8002bd8 <showSetTimeMenu+0x284>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d113      	bne.n	8002a2e <showSetTimeMenu+0xda>
 8002a06:	4b75      	ldr	r3, [pc, #468]	@ (8002bdc <showSetTimeMenu+0x288>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10f      	bne.n	8002a2e <showSetTimeMenu+0xda>
 8002a0e:	4b74      	ldr	r3, [pc, #464]	@ (8002be0 <showSetTimeMenu+0x28c>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10b      	bne.n	8002a2e <showSetTimeMenu+0xda>
 8002a16:	4b73      	ldr	r3, [pc, #460]	@ (8002be4 <showSetTimeMenu+0x290>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d107      	bne.n	8002a2e <showSetTimeMenu+0xda>
 8002a1e:	4b72      	ldr	r3, [pc, #456]	@ (8002be8 <showSetTimeMenu+0x294>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d103      	bne.n	8002a2e <showSetTimeMenu+0xda>
 8002a26:	4b71      	ldr	r3, [pc, #452]	@ (8002bec <showSetTimeMenu+0x298>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d014      	beq.n	8002a58 <showSetTimeMenu+0x104>
		{
			ssd1306_SetCursor(100, (set_time_cursor * 10) + 1);
 8002a2e:	4b62      	ldr	r3, [pc, #392]	@ (8002bb8 <showSetTimeMenu+0x264>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	0092      	lsls	r2, r2, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	4619      	mov	r1, r3
 8002a42:	2064      	movs	r0, #100	@ 0x64
 8002a44:	f001 f91a 	bl	8003c7c <ssd1306_SetCursor>
			ssd1306_WriteString("<--", Font_7x10, White);
 8002a48:	4b5f      	ldr	r3, [pc, #380]	@ (8002bc8 <showSetTimeMenu+0x274>)
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	9200      	str	r2, [sp, #0]
 8002a4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a50:	4867      	ldr	r0, [pc, #412]	@ (8002bf0 <showSetTimeMenu+0x29c>)
 8002a52:	f001 f8ed 	bl	8003c30 <ssd1306_WriteString>
 8002a56:	e0a9      	b.n	8002bac <showSetTimeMenu+0x258>
		}
		else
		{
			ssd1306_SetCursor(120, (set_time_cursor * 10) + 1);
 8002a58:	4b57      	ldr	r3, [pc, #348]	@ (8002bb8 <showSetTimeMenu+0x264>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	0092      	lsls	r2, r2, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	3301      	adds	r3, #1
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	2078      	movs	r0, #120	@ 0x78
 8002a6e:	f001 f905 	bl	8003c7c <ssd1306_SetCursor>
			ssd1306_WriteString("<", Font_7x10, White);
 8002a72:	4b55      	ldr	r3, [pc, #340]	@ (8002bc8 <showSetTimeMenu+0x274>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	9200      	str	r2, [sp, #0]
 8002a78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a7a:	485e      	ldr	r0, [pc, #376]	@ (8002bf4 <showSetTimeMenu+0x2a0>)
 8002a7c:	f001 f8d8 	bl	8003c30 <ssd1306_WriteString>
 8002a80:	e094      	b.n	8002bac <showSetTimeMenu+0x258>
		}

	}
	else if (set_time_cursor >= 3 && set_time_cursor < 6)
 8002a82:	4b4d      	ldr	r3, [pc, #308]	@ (8002bb8 <showSetTimeMenu+0x264>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	f240 8090 	bls.w	8002bac <showSetTimeMenu+0x258>
 8002a8c:	4b4a      	ldr	r3, [pc, #296]	@ (8002bb8 <showSetTimeMenu+0x264>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b05      	cmp	r3, #5
 8002a92:	f200 808b 	bhi.w	8002bac <showSetTimeMenu+0x258>
	{
		// second page
		ssd1306_SetCursor(10, 0);
 8002a96:	2100      	movs	r1, #0
 8002a98:	200a      	movs	r0, #10
 8002a9a:	f001 f8ef 	bl	8003c7c <ssd1306_SetCursor>
		sprintf(msg_buffer, "Hour: %d", set_date_time.hour);
 8002a9e:	4b47      	ldr	r3, [pc, #284]	@ (8002bbc <showSetTimeMenu+0x268>)
 8002aa0:	791b      	ldrb	r3, [r3, #4]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	4954      	ldr	r1, [pc, #336]	@ (8002bf8 <showSetTimeMenu+0x2a4>)
 8002aa6:	4847      	ldr	r0, [pc, #284]	@ (8002bc4 <showSetTimeMenu+0x270>)
 8002aa8:	f00b f856 	bl	800db58 <siprintf>
		ssd1306_WriteString(msg_buffer, Font_7x10, White);
 8002aac:	4b46      	ldr	r3, [pc, #280]	@ (8002bc8 <showSetTimeMenu+0x274>)
 8002aae:	2201      	movs	r2, #1
 8002ab0:	9200      	str	r2, [sp, #0]
 8002ab2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ab4:	4843      	ldr	r0, [pc, #268]	@ (8002bc4 <showSetTimeMenu+0x270>)
 8002ab6:	f001 f8bb 	bl	8003c30 <ssd1306_WriteString>

		ssd1306_SetCursor(10, 11);
 8002aba:	210b      	movs	r1, #11
 8002abc:	200a      	movs	r0, #10
 8002abe:	f001 f8dd 	bl	8003c7c <ssd1306_SetCursor>
		sprintf(msg_buffer, "Minute: %d", set_date_time.minute);
 8002ac2:	4b3e      	ldr	r3, [pc, #248]	@ (8002bbc <showSetTimeMenu+0x268>)
 8002ac4:	795b      	ldrb	r3, [r3, #5]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	494c      	ldr	r1, [pc, #304]	@ (8002bfc <showSetTimeMenu+0x2a8>)
 8002aca:	483e      	ldr	r0, [pc, #248]	@ (8002bc4 <showSetTimeMenu+0x270>)
 8002acc:	f00b f844 	bl	800db58 <siprintf>
		ssd1306_WriteString(msg_buffer, Font_7x10, White);
 8002ad0:	4b3d      	ldr	r3, [pc, #244]	@ (8002bc8 <showSetTimeMenu+0x274>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	9200      	str	r2, [sp, #0]
 8002ad6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ad8:	483a      	ldr	r0, [pc, #232]	@ (8002bc4 <showSetTimeMenu+0x270>)
 8002ada:	f001 f8a9 	bl	8003c30 <ssd1306_WriteString>

		ssd1306_SetCursor(10, 22);
 8002ade:	2116      	movs	r1, #22
 8002ae0:	200a      	movs	r0, #10
 8002ae2:	f001 f8cb 	bl	8003c7c <ssd1306_SetCursor>
		sprintf(msg_buffer, "Second: %d", set_date_time.second);
 8002ae6:	4b35      	ldr	r3, [pc, #212]	@ (8002bbc <showSetTimeMenu+0x268>)
 8002ae8:	799b      	ldrb	r3, [r3, #6]
 8002aea:	461a      	mov	r2, r3
 8002aec:	4944      	ldr	r1, [pc, #272]	@ (8002c00 <showSetTimeMenu+0x2ac>)
 8002aee:	4835      	ldr	r0, [pc, #212]	@ (8002bc4 <showSetTimeMenu+0x270>)
 8002af0:	f00b f832 	bl	800db58 <siprintf>
		ssd1306_WriteString(msg_buffer, Font_7x10, White);
 8002af4:	4b34      	ldr	r3, [pc, #208]	@ (8002bc8 <showSetTimeMenu+0x274>)
 8002af6:	2201      	movs	r2, #1
 8002af8:	9200      	str	r2, [sp, #0]
 8002afa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002afc:	4831      	ldr	r0, [pc, #196]	@ (8002bc4 <showSetTimeMenu+0x270>)
 8002afe:	f001 f897 	bl	8003c30 <ssd1306_WriteString>

		ssd1306_SetCursor(0, ((set_time_cursor - 3) * 10) + 1);
 8002b02:	4b2d      	ldr	r3, [pc, #180]	@ (8002bb8 <showSetTimeMenu+0x264>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	0092      	lsls	r2, r2, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	3b1d      	subs	r3, #29
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	4619      	mov	r1, r3
 8002b16:	2000      	movs	r0, #0
 8002b18:	f001 f8b0 	bl	8003c7c <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 8002b1c:	4b2a      	ldr	r3, [pc, #168]	@ (8002bc8 <showSetTimeMenu+0x274>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	9200      	str	r2, [sp, #0]
 8002b22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b24:	482b      	ldr	r0, [pc, #172]	@ (8002bd4 <showSetTimeMenu+0x280>)
 8002b26:	f001 f883 	bl	8003c30 <ssd1306_WriteString>

		if (editYearMode || editMonthMode || editDayMode || editHourMode || editMinuteMode || editSecondMode)
 8002b2a:	4b2b      	ldr	r3, [pc, #172]	@ (8002bd8 <showSetTimeMenu+0x284>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d113      	bne.n	8002b5a <showSetTimeMenu+0x206>
 8002b32:	4b2a      	ldr	r3, [pc, #168]	@ (8002bdc <showSetTimeMenu+0x288>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10f      	bne.n	8002b5a <showSetTimeMenu+0x206>
 8002b3a:	4b29      	ldr	r3, [pc, #164]	@ (8002be0 <showSetTimeMenu+0x28c>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10b      	bne.n	8002b5a <showSetTimeMenu+0x206>
 8002b42:	4b28      	ldr	r3, [pc, #160]	@ (8002be4 <showSetTimeMenu+0x290>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d107      	bne.n	8002b5a <showSetTimeMenu+0x206>
 8002b4a:	4b27      	ldr	r3, [pc, #156]	@ (8002be8 <showSetTimeMenu+0x294>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d103      	bne.n	8002b5a <showSetTimeMenu+0x206>
 8002b52:	4b26      	ldr	r3, [pc, #152]	@ (8002bec <showSetTimeMenu+0x298>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d014      	beq.n	8002b84 <showSetTimeMenu+0x230>
		{
			ssd1306_SetCursor(100, ((set_time_cursor - 3) * 10) + 1);
 8002b5a:	4b17      	ldr	r3, [pc, #92]	@ (8002bb8 <showSetTimeMenu+0x264>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	0092      	lsls	r2, r2, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	3b1d      	subs	r3, #29
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	2064      	movs	r0, #100	@ 0x64
 8002b70:	f001 f884 	bl	8003c7c <ssd1306_SetCursor>
			ssd1306_WriteString("<--", Font_7x10, White);
 8002b74:	4b14      	ldr	r3, [pc, #80]	@ (8002bc8 <showSetTimeMenu+0x274>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	9200      	str	r2, [sp, #0]
 8002b7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b7c:	481c      	ldr	r0, [pc, #112]	@ (8002bf0 <showSetTimeMenu+0x29c>)
 8002b7e:	f001 f857 	bl	8003c30 <ssd1306_WriteString>
 8002b82:	e013      	b.n	8002bac <showSetTimeMenu+0x258>
		}
		else
		{
			ssd1306_SetCursor(120, ((set_time_cursor - 3) * 10) + 1);
 8002b84:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb8 <showSetTimeMenu+0x264>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	0092      	lsls	r2, r2, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	3b1d      	subs	r3, #29
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	4619      	mov	r1, r3
 8002b98:	2078      	movs	r0, #120	@ 0x78
 8002b9a:	f001 f86f 	bl	8003c7c <ssd1306_SetCursor>
			ssd1306_WriteString("<", Font_7x10, White);
 8002b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc8 <showSetTimeMenu+0x274>)
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	9200      	str	r2, [sp, #0]
 8002ba4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ba6:	4813      	ldr	r0, [pc, #76]	@ (8002bf4 <showSetTimeMenu+0x2a0>)
 8002ba8:	f001 f842 	bl	8003c30 <ssd1306_WriteString>
		}

	}

	ssd1306_UpdateScreen();
 8002bac:	f000 ff34 	bl	8003a18 <ssd1306_UpdateScreen>
//
//	ssd1306_SetCursor(4, 11);
//	sprintf(msg_buffer, "%d:%d:%d", set_date_time.hour, set_date_time.minute, set_date_time.second);
//	ssd1306_WriteString(msg_buffer, Font_11x18, White);
//	ssd1306_UpdateScreen();
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20000303 	.word	0x20000303
 8002bbc:	2000000c 	.word	0x2000000c
 8002bc0:	08012428 	.word	0x08012428
 8002bc4:	20000298 	.word	0x20000298
 8002bc8:	08013ab4 	.word	0x08013ab4
 8002bcc:	08012434 	.word	0x08012434
 8002bd0:	08012440 	.word	0x08012440
 8002bd4:	08012448 	.word	0x08012448
 8002bd8:	20000305 	.word	0x20000305
 8002bdc:	20000306 	.word	0x20000306
 8002be0:	20000307 	.word	0x20000307
 8002be4:	20000308 	.word	0x20000308
 8002be8:	20000309 	.word	0x20000309
 8002bec:	2000030a 	.word	0x2000030a
 8002bf0:	0801244c 	.word	0x0801244c
 8002bf4:	08012450 	.word	0x08012450
 8002bf8:	08012454 	.word	0x08012454
 8002bfc:	08012460 	.word	0x08012460
 8002c00:	0801246c 	.word	0x0801246c

08002c04 <showHumidityMenu>:

static void showHumidityMenu()
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black); // clear display
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	f000 feec 	bl	80039e8 <ssd1306_Fill>

	ssd1306_SetCursor(0, 0);
 8002c10:	2100      	movs	r1, #0
 8002c12:	2000      	movs	r0, #0
 8002c14:	f001 f832 	bl	8003c7c <ssd1306_SetCursor>
	ssd1306_WriteString("Humidity", Font_7x10, White);
 8002c18:	4b14      	ldr	r3, [pc, #80]	@ (8002c6c <showHumidityMenu+0x68>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	9200      	str	r2, [sp, #0]
 8002c1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c20:	4813      	ldr	r0, [pc, #76]	@ (8002c70 <showHumidityMenu+0x6c>)
 8002c22:	f001 f805 	bl	8003c30 <ssd1306_WriteString>

	ssd1306_SetCursor(0, 14);
 8002c26:	210e      	movs	r1, #14
 8002c28:	2000      	movs	r0, #0
 8002c2a:	f001 f827 	bl	8003c7c <ssd1306_SetCursor>
	Float_transform(bme_values.humidity, 1, &sign_number, &integer_number, &fractional_number);
 8002c2e:	4b11      	ldr	r3, [pc, #68]	@ (8002c74 <showHumidityMenu+0x70>)
 8002c30:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c34:	4b10      	ldr	r3, [pc, #64]	@ (8002c78 <showHumidityMenu+0x74>)
 8002c36:	4a11      	ldr	r2, [pc, #68]	@ (8002c7c <showHumidityMenu+0x78>)
 8002c38:	4911      	ldr	r1, [pc, #68]	@ (8002c80 <showHumidityMenu+0x7c>)
 8002c3a:	2001      	movs	r0, #1
 8002c3c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c40:	f001 fb1e 	bl	8004280 <Float_transform>
	sprintf(msg_buffer, "%d.%.01ld %%", integer_number, fractional_number);
 8002c44:	4b0d      	ldr	r3, [pc, #52]	@ (8002c7c <showHumidityMenu+0x78>)
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	4b0b      	ldr	r3, [pc, #44]	@ (8002c78 <showHumidityMenu+0x74>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	490d      	ldr	r1, [pc, #52]	@ (8002c84 <showHumidityMenu+0x80>)
 8002c4e:	480e      	ldr	r0, [pc, #56]	@ (8002c88 <showHumidityMenu+0x84>)
 8002c50:	f00a ff82 	bl	800db58 <siprintf>
	ssd1306_WriteString(msg_buffer, Font_11x18, White);
 8002c54:	4b0d      	ldr	r3, [pc, #52]	@ (8002c8c <showHumidityMenu+0x88>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	9200      	str	r2, [sp, #0]
 8002c5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c5c:	480a      	ldr	r0, [pc, #40]	@ (8002c88 <showHumidityMenu+0x84>)
 8002c5e:	f000 ffe7 	bl	8003c30 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002c62:	f000 fed9 	bl	8003a18 <ssd1306_UpdateScreen>
}
 8002c66:	bf00      	nop
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	08013ab4 	.word	0x08013ab4
 8002c70:	08012478 	.word	0x08012478
 8002c74:	20000320 	.word	0x20000320
 8002c78:	200006d8 	.word	0x200006d8
 8002c7c:	200006d4 	.word	0x200006d4
 8002c80:	200006d0 	.word	0x200006d0
 8002c84:	08012484 	.word	0x08012484
 8002c88:	20000298 	.word	0x20000298
 8002c8c:	08013ac0 	.word	0x08013ac0

08002c90 <showAltitudeMenu>:

static void showAltitudeMenu()
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black); // clear display
 8002c96:	2000      	movs	r0, #0
 8002c98:	f000 fea6 	bl	80039e8 <ssd1306_Fill>

	ssd1306_SetCursor(0, 0);
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	f000 ffec 	bl	8003c7c <ssd1306_SetCursor>
	ssd1306_WriteString("Altitude", Font_7x10, White);
 8002ca4:	4b14      	ldr	r3, [pc, #80]	@ (8002cf8 <showAltitudeMenu+0x68>)
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	9200      	str	r2, [sp, #0]
 8002caa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cac:	4813      	ldr	r0, [pc, #76]	@ (8002cfc <showAltitudeMenu+0x6c>)
 8002cae:	f000 ffbf 	bl	8003c30 <ssd1306_WriteString>

	ssd1306_SetCursor(0, 14);
 8002cb2:	210e      	movs	r1, #14
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	f000 ffe1 	bl	8003c7c <ssd1306_SetCursor>
	Float_transform(bme_values.altitude, 1, &sign_number, &integer_number, &fractional_number);
 8002cba:	4b11      	ldr	r3, [pc, #68]	@ (8002d00 <showAltitudeMenu+0x70>)
 8002cbc:	edd3 7a05 	vldr	s15, [r3, #20]
 8002cc0:	4b10      	ldr	r3, [pc, #64]	@ (8002d04 <showAltitudeMenu+0x74>)
 8002cc2:	4a11      	ldr	r2, [pc, #68]	@ (8002d08 <showAltitudeMenu+0x78>)
 8002cc4:	4911      	ldr	r1, [pc, #68]	@ (8002d0c <showAltitudeMenu+0x7c>)
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8002ccc:	f001 fad8 	bl	8004280 <Float_transform>
	sprintf(msg_buffer, "%d.%.01ld m", integer_number, fractional_number);
 8002cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8002d08 <showAltitudeMenu+0x78>)
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d04 <showAltitudeMenu+0x74>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	490d      	ldr	r1, [pc, #52]	@ (8002d10 <showAltitudeMenu+0x80>)
 8002cda:	480e      	ldr	r0, [pc, #56]	@ (8002d14 <showAltitudeMenu+0x84>)
 8002cdc:	f00a ff3c 	bl	800db58 <siprintf>
	ssd1306_WriteString(msg_buffer, Font_11x18, White);
 8002ce0:	4b0d      	ldr	r3, [pc, #52]	@ (8002d18 <showAltitudeMenu+0x88>)
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	9200      	str	r2, [sp, #0]
 8002ce6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ce8:	480a      	ldr	r0, [pc, #40]	@ (8002d14 <showAltitudeMenu+0x84>)
 8002cea:	f000 ffa1 	bl	8003c30 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002cee:	f000 fe93 	bl	8003a18 <ssd1306_UpdateScreen>
}
 8002cf2:	bf00      	nop
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	08013ab4 	.word	0x08013ab4
 8002cfc:	08012494 	.word	0x08012494
 8002d00:	20000320 	.word	0x20000320
 8002d04:	200006d8 	.word	0x200006d8
 8002d08:	200006d4 	.word	0x200006d4
 8002d0c:	200006d0 	.word	0x200006d0
 8002d10:	080124a0 	.word	0x080124a0
 8002d14:	20000298 	.word	0x20000298
 8002d18:	08013ac0 	.word	0x08013ac0

08002d1c <showPressureMenuHPA>:

static void showPressureMenuHPA()
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black); // clear display
 8002d22:	2000      	movs	r0, #0
 8002d24:	f000 fe60 	bl	80039e8 <ssd1306_Fill>

	ssd1306_SetCursor(0, 0);
 8002d28:	2100      	movs	r1, #0
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	f000 ffa6 	bl	8003c7c <ssd1306_SetCursor>
	ssd1306_WriteString("Pressure", Font_7x10, White);
 8002d30:	4b14      	ldr	r3, [pc, #80]	@ (8002d84 <showPressureMenuHPA+0x68>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	9200      	str	r2, [sp, #0]
 8002d36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d38:	4813      	ldr	r0, [pc, #76]	@ (8002d88 <showPressureMenuHPA+0x6c>)
 8002d3a:	f000 ff79 	bl	8003c30 <ssd1306_WriteString>

	ssd1306_SetCursor(0, 14);
 8002d3e:	210e      	movs	r1, #14
 8002d40:	2000      	movs	r0, #0
 8002d42:	f000 ff9b 	bl	8003c7c <ssd1306_SetCursor>
	Float_transform(bme_values.preassureHPA, 1, &sign_number, &integer_number, &fractional_number);
 8002d46:	4b11      	ldr	r3, [pc, #68]	@ (8002d8c <showPressureMenuHPA+0x70>)
 8002d48:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d4c:	4b10      	ldr	r3, [pc, #64]	@ (8002d90 <showPressureMenuHPA+0x74>)
 8002d4e:	4a11      	ldr	r2, [pc, #68]	@ (8002d94 <showPressureMenuHPA+0x78>)
 8002d50:	4911      	ldr	r1, [pc, #68]	@ (8002d98 <showPressureMenuHPA+0x7c>)
 8002d52:	2001      	movs	r0, #1
 8002d54:	eeb0 0a67 	vmov.f32	s0, s15
 8002d58:	f001 fa92 	bl	8004280 <Float_transform>
	sprintf(msg_buffer, "%d.%.01ld hPA", integer_number, fractional_number);
 8002d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8002d94 <showPressureMenuHPA+0x78>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4b0b      	ldr	r3, [pc, #44]	@ (8002d90 <showPressureMenuHPA+0x74>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	490d      	ldr	r1, [pc, #52]	@ (8002d9c <showPressureMenuHPA+0x80>)
 8002d66:	480e      	ldr	r0, [pc, #56]	@ (8002da0 <showPressureMenuHPA+0x84>)
 8002d68:	f00a fef6 	bl	800db58 <siprintf>
	ssd1306_WriteString(msg_buffer, Font_11x18, White);
 8002d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8002da4 <showPressureMenuHPA+0x88>)
 8002d6e:	2201      	movs	r2, #1
 8002d70:	9200      	str	r2, [sp, #0]
 8002d72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d74:	480a      	ldr	r0, [pc, #40]	@ (8002da0 <showPressureMenuHPA+0x84>)
 8002d76:	f000 ff5b 	bl	8003c30 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002d7a:	f000 fe4d 	bl	8003a18 <ssd1306_UpdateScreen>

}
 8002d7e:	bf00      	nop
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	08013ab4 	.word	0x08013ab4
 8002d88:	080124ac 	.word	0x080124ac
 8002d8c:	20000320 	.word	0x20000320
 8002d90:	200006d8 	.word	0x200006d8
 8002d94:	200006d4 	.word	0x200006d4
 8002d98:	200006d0 	.word	0x200006d0
 8002d9c:	080124b8 	.word	0x080124b8
 8002da0:	20000298 	.word	0x20000298
 8002da4:	08013ac0 	.word	0x08013ac0

08002da8 <showPressureMenuMMHG>:

static void showPressureMenuMMHG()
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black); // clear display
 8002dae:	2000      	movs	r0, #0
 8002db0:	f000 fe1a 	bl	80039e8 <ssd1306_Fill>

	ssd1306_SetCursor(0, 0);
 8002db4:	2100      	movs	r1, #0
 8002db6:	2000      	movs	r0, #0
 8002db8:	f000 ff60 	bl	8003c7c <ssd1306_SetCursor>
	ssd1306_WriteString("Pressure", Font_7x10, White);
 8002dbc:	4b14      	ldr	r3, [pc, #80]	@ (8002e10 <showPressureMenuMMHG+0x68>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	9200      	str	r2, [sp, #0]
 8002dc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dc4:	4813      	ldr	r0, [pc, #76]	@ (8002e14 <showPressureMenuMMHG+0x6c>)
 8002dc6:	f000 ff33 	bl	8003c30 <ssd1306_WriteString>

	ssd1306_SetCursor(0, 14);
 8002dca:	210e      	movs	r1, #14
 8002dcc:	2000      	movs	r0, #0
 8002dce:	f000 ff55 	bl	8003c7c <ssd1306_SetCursor>
	Float_transform(bme_values.preassureMMHG, 1, &sign_number, &integer_number, &fractional_number);
 8002dd2:	4b11      	ldr	r3, [pc, #68]	@ (8002e18 <showPressureMenuMMHG+0x70>)
 8002dd4:	edd3 7a03 	vldr	s15, [r3, #12]
 8002dd8:	4b10      	ldr	r3, [pc, #64]	@ (8002e1c <showPressureMenuMMHG+0x74>)
 8002dda:	4a11      	ldr	r2, [pc, #68]	@ (8002e20 <showPressureMenuMMHG+0x78>)
 8002ddc:	4911      	ldr	r1, [pc, #68]	@ (8002e24 <showPressureMenuMMHG+0x7c>)
 8002dde:	2001      	movs	r0, #1
 8002de0:	eeb0 0a67 	vmov.f32	s0, s15
 8002de4:	f001 fa4c 	bl	8004280 <Float_transform>
	sprintf(msg_buffer, "%d.%.01ld mmHg", integer_number, fractional_number);
 8002de8:	4b0d      	ldr	r3, [pc, #52]	@ (8002e20 <showPressureMenuMMHG+0x78>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4b0b      	ldr	r3, [pc, #44]	@ (8002e1c <showPressureMenuMMHG+0x74>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	490d      	ldr	r1, [pc, #52]	@ (8002e28 <showPressureMenuMMHG+0x80>)
 8002df2:	480e      	ldr	r0, [pc, #56]	@ (8002e2c <showPressureMenuMMHG+0x84>)
 8002df4:	f00a feb0 	bl	800db58 <siprintf>
	ssd1306_WriteString(msg_buffer, Font_11x18, White);
 8002df8:	4b0d      	ldr	r3, [pc, #52]	@ (8002e30 <showPressureMenuMMHG+0x88>)
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	9200      	str	r2, [sp, #0]
 8002dfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e00:	480a      	ldr	r0, [pc, #40]	@ (8002e2c <showPressureMenuMMHG+0x84>)
 8002e02:	f000 ff15 	bl	8003c30 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002e06:	f000 fe07 	bl	8003a18 <ssd1306_UpdateScreen>
}
 8002e0a:	bf00      	nop
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	08013ab4 	.word	0x08013ab4
 8002e14:	080124ac 	.word	0x080124ac
 8002e18:	20000320 	.word	0x20000320
 8002e1c:	200006d8 	.word	0x200006d8
 8002e20:	200006d4 	.word	0x200006d4
 8002e24:	200006d0 	.word	0x200006d0
 8002e28:	080124c8 	.word	0x080124c8
 8002e2c:	20000298 	.word	0x20000298
 8002e30:	08013ac0 	.word	0x08013ac0

08002e34 <showSettingsMenu>:

static void showSettingsMenu()
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	f000 fdd4 	bl	80039e8 <ssd1306_Fill>

	ssd1306_SetCursor(10, 0);
 8002e40:	2100      	movs	r1, #0
 8002e42:	200a      	movs	r0, #10
 8002e44:	f000 ff1a 	bl	8003c7c <ssd1306_SetCursor>
	if (soundOn)
 8002e48:	4b28      	ldr	r3, [pc, #160]	@ (8002eec <showSettingsMenu+0xb8>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d007      	beq.n	8002e60 <showSettingsMenu+0x2c>
		ssd1306_WriteString("Sound: ON", Font_7x10, White);
 8002e50:	4b27      	ldr	r3, [pc, #156]	@ (8002ef0 <showSettingsMenu+0xbc>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	9200      	str	r2, [sp, #0]
 8002e56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e58:	4826      	ldr	r0, [pc, #152]	@ (8002ef4 <showSettingsMenu+0xc0>)
 8002e5a:	f000 fee9 	bl	8003c30 <ssd1306_WriteString>
 8002e5e:	e00d      	b.n	8002e7c <showSettingsMenu+0x48>
	else if (!soundOn)
 8002e60:	4b22      	ldr	r3, [pc, #136]	@ (8002eec <showSettingsMenu+0xb8>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	f083 0301 	eor.w	r3, r3, #1
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d006      	beq.n	8002e7c <showSettingsMenu+0x48>
		ssd1306_WriteString("Sound: OFF", Font_7x10, White);
 8002e6e:	4b20      	ldr	r3, [pc, #128]	@ (8002ef0 <showSettingsMenu+0xbc>)
 8002e70:	2201      	movs	r2, #1
 8002e72:	9200      	str	r2, [sp, #0]
 8002e74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e76:	4820      	ldr	r0, [pc, #128]	@ (8002ef8 <showSettingsMenu+0xc4>)
 8002e78:	f000 feda 	bl	8003c30 <ssd1306_WriteString>

	ssd1306_SetCursor(10, 12);
 8002e7c:	210c      	movs	r1, #12
 8002e7e:	200a      	movs	r0, #10
 8002e80:	f000 fefc 	bl	8003c7c <ssd1306_SetCursor>
	ssd1306_WriteString("Set time", Font_7x10, White);
 8002e84:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef0 <showSettingsMenu+0xbc>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	9200      	str	r2, [sp, #0]
 8002e8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e8c:	481b      	ldr	r0, [pc, #108]	@ (8002efc <showSettingsMenu+0xc8>)
 8002e8e:	f000 fecf 	bl	8003c30 <ssd1306_WriteString>

	ssd1306_SetCursor(0, (settings_menu_cursor * 10) + 2);
 8002e92:	4b1b      	ldr	r3, [pc, #108]	@ (8002f00 <showSettingsMenu+0xcc>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	0092      	lsls	r2, r2, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	3302      	adds	r3, #2
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	f000 fee8 	bl	8003c7c <ssd1306_SetCursor>
	ssd1306_WriteString(">", Font_7x10, White);
 8002eac:	4b10      	ldr	r3, [pc, #64]	@ (8002ef0 <showSettingsMenu+0xbc>)
 8002eae:	2201      	movs	r2, #1
 8002eb0:	9200      	str	r2, [sp, #0]
 8002eb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eb4:	4813      	ldr	r0, [pc, #76]	@ (8002f04 <showSettingsMenu+0xd0>)
 8002eb6:	f000 febb 	bl	8003c30 <ssd1306_WriteString>
	ssd1306_SetCursor(120, (settings_menu_cursor * 10) + 2);
 8002eba:	4b11      	ldr	r3, [pc, #68]	@ (8002f00 <showSettingsMenu+0xcc>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	0092      	lsls	r2, r2, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	3302      	adds	r3, #2
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	4619      	mov	r1, r3
 8002ece:	2078      	movs	r0, #120	@ 0x78
 8002ed0:	f000 fed4 	bl	8003c7c <ssd1306_SetCursor>
	ssd1306_WriteString("<", Font_7x10, White);
 8002ed4:	4b06      	ldr	r3, [pc, #24]	@ (8002ef0 <showSettingsMenu+0xbc>)
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	9200      	str	r2, [sp, #0]
 8002eda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002edc:	480a      	ldr	r0, [pc, #40]	@ (8002f08 <showSettingsMenu+0xd4>)
 8002ede:	f000 fea7 	bl	8003c30 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 8002ee2:	f000 fd99 	bl	8003a18 <ssd1306_UpdateScreen>
}
 8002ee6:	bf00      	nop
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20000000 	.word	0x20000000
 8002ef0:	08013ab4 	.word	0x08013ab4
 8002ef4:	080124d8 	.word	0x080124d8
 8002ef8:	080124e4 	.word	0x080124e4
 8002efc:	080124f0 	.word	0x080124f0
 8002f00:	20000302 	.word	0x20000302
 8002f04:	08012448 	.word	0x08012448
 8002f08:	08012450 	.word	0x08012450

08002f0c <makeBeepSound>:

static void makeBeepSound()
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
	if (soundOn)
 8002f10:	4b08      	ldr	r3, [pc, #32]	@ (8002f34 <makeBeepSound+0x28>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00b      	beq.n	8002f30 <makeBeepSound+0x24>
	{
		// make beep sound
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 500);
 8002f18:	4b07      	ldr	r3, [pc, #28]	@ (8002f38 <makeBeepSound+0x2c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002f20:	635a      	str	r2, [r3, #52]	@ 0x34
		osDelay(100);
 8002f22:	2064      	movs	r0, #100	@ 0x64
 8002f24:	f007 fa50 	bl	800a3c8 <osDelay>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8002f28:	4b03      	ldr	r3, [pc, #12]	@ (8002f38 <makeBeepSound+0x2c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	635a      	str	r2, [r3, #52]	@ 0x34
	}
}
 8002f30:	bf00      	nop
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20000000 	.word	0x20000000
 8002f38:	200005fc 	.word	0x200005fc

08002f3c <processKey>:

static void processKey(Key key)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4603      	mov	r3, r0
 8002f44:	71fb      	strb	r3, [r7, #7]
	if (key == Left)
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	2b03      	cmp	r3, #3
 8002f4a:	d11f      	bne.n	8002f8c <processKey+0x50>
	{
		if (setTimeMode)
 8002f4c:	4b92      	ldr	r3, [pc, #584]	@ (8003198 <processKey+0x25c>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d005      	beq.n	8002f60 <processKey+0x24>
		{
			makeBeepSound();
 8002f54:	f7ff ffda 	bl	8002f0c <makeBeepSound>
			setTimeMode = false;
 8002f58:	4b8f      	ldr	r3, [pc, #572]	@ (8003198 <processKey+0x25c>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	701a      	strb	r2, [r3, #0]
				else if (settings_menu_cursor == 1)
					setTimeMode = true;
			}
		}
	}
}
 8002f5e:	e2f2      	b.n	8003546 <processKey+0x60a>
			makeBeepSound();
 8002f60:	f7ff ffd4 	bl	8002f0c <makeBeepSound>
			if (menu_kursor > 0)
 8002f64:	4b8d      	ldr	r3, [pc, #564]	@ (800319c <processKey+0x260>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d006      	beq.n	8002f7a <processKey+0x3e>
				menu_kursor--;
 8002f6c:	4b8b      	ldr	r3, [pc, #556]	@ (800319c <processKey+0x260>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	4b89      	ldr	r3, [pc, #548]	@ (800319c <processKey+0x260>)
 8002f76:	701a      	strb	r2, [r3, #0]
}
 8002f78:	e2e5      	b.n	8003546 <processKey+0x60a>
			else if (menu_kursor == 0)
 8002f7a:	4b88      	ldr	r3, [pc, #544]	@ (800319c <processKey+0x260>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f040 82e1 	bne.w	8003546 <processKey+0x60a>
				menu_kursor = MENU_PAGES_LENGTH - 1; // last element if manu_pages
 8002f84:	4b85      	ldr	r3, [pc, #532]	@ (800319c <processKey+0x260>)
 8002f86:	2206      	movs	r2, #6
 8002f88:	701a      	strb	r2, [r3, #0]
}
 8002f8a:	e2dc      	b.n	8003546 <processKey+0x60a>
	else if (key == Right && !setTimeMode)
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d11c      	bne.n	8002fcc <processKey+0x90>
 8002f92:	4b81      	ldr	r3, [pc, #516]	@ (8003198 <processKey+0x25c>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	f083 0301 	eor.w	r3, r3, #1
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d015      	beq.n	8002fcc <processKey+0x90>
		makeBeepSound();
 8002fa0:	f7ff ffb4 	bl	8002f0c <makeBeepSound>
		if (menu_kursor < MENU_PAGES_LENGTH - 1)
 8002fa4:	4b7d      	ldr	r3, [pc, #500]	@ (800319c <processKey+0x260>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b05      	cmp	r3, #5
 8002faa:	d806      	bhi.n	8002fba <processKey+0x7e>
			menu_kursor++;
 8002fac:	4b7b      	ldr	r3, [pc, #492]	@ (800319c <processKey+0x260>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	4b79      	ldr	r3, [pc, #484]	@ (800319c <processKey+0x260>)
 8002fb6:	701a      	strb	r2, [r3, #0]
		if (menu_kursor < MENU_PAGES_LENGTH - 1)
 8002fb8:	e2c4      	b.n	8003544 <processKey+0x608>
		else if (menu_kursor == MENU_PAGES_LENGTH - 1)
 8002fba:	4b78      	ldr	r3, [pc, #480]	@ (800319c <processKey+0x260>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b06      	cmp	r3, #6
 8002fc0:	f040 82c0 	bne.w	8003544 <processKey+0x608>
			menu_kursor = 0;
 8002fc4:	4b75      	ldr	r3, [pc, #468]	@ (800319c <processKey+0x260>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	701a      	strb	r2, [r3, #0]
		if (menu_kursor < MENU_PAGES_LENGTH - 1)
 8002fca:	e2bb      	b.n	8003544 <processKey+0x608>
	else if (key == Up)
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	f040 8100 	bne.w	80031d4 <processKey+0x298>
		if (setTimeMode)
 8002fd4:	4b70      	ldr	r3, [pc, #448]	@ (8003198 <processKey+0x25c>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d07f      	beq.n	80030dc <processKey+0x1a0>
			makeBeepSound();
 8002fdc:	f7ff ff96 	bl	8002f0c <makeBeepSound>
			if (editYearMode)
 8002fe0:	4b6f      	ldr	r3, [pc, #444]	@ (80031a0 <processKey+0x264>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d013      	beq.n	8003010 <processKey+0xd4>
				if (set_date_time.year >= 2000 && set_date_time.year < 2199)
 8002fe8:	4b6e      	ldr	r3, [pc, #440]	@ (80031a4 <processKey+0x268>)
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002ff0:	f0c0 82a9 	bcc.w	8003546 <processKey+0x60a>
 8002ff4:	4b6b      	ldr	r3, [pc, #428]	@ (80031a4 <processKey+0x268>)
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	f640 0296 	movw	r2, #2198	@ 0x896
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	f200 82a2 	bhi.w	8003546 <processKey+0x60a>
					set_date_time.year++;
 8003002:	4b68      	ldr	r3, [pc, #416]	@ (80031a4 <processKey+0x268>)
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	3301      	adds	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	4b66      	ldr	r3, [pc, #408]	@ (80031a4 <processKey+0x268>)
 800300c:	801a      	strh	r2, [r3, #0]
}
 800300e:	e29a      	b.n	8003546 <processKey+0x60a>
			else if (editMonthMode)
 8003010:	4b65      	ldr	r3, [pc, #404]	@ (80031a8 <processKey+0x26c>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d010      	beq.n	800303a <processKey+0xfe>
				if (set_date_time.month >= 1 && set_date_time.month < 12)
 8003018:	4b62      	ldr	r3, [pc, #392]	@ (80031a4 <processKey+0x268>)
 800301a:	789b      	ldrb	r3, [r3, #2]
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 8292 	beq.w	8003546 <processKey+0x60a>
 8003022:	4b60      	ldr	r3, [pc, #384]	@ (80031a4 <processKey+0x268>)
 8003024:	789b      	ldrb	r3, [r3, #2]
 8003026:	2b0b      	cmp	r3, #11
 8003028:	f200 828d 	bhi.w	8003546 <processKey+0x60a>
					set_date_time.month++;
 800302c:	4b5d      	ldr	r3, [pc, #372]	@ (80031a4 <processKey+0x268>)
 800302e:	789b      	ldrb	r3, [r3, #2]
 8003030:	3301      	adds	r3, #1
 8003032:	b2da      	uxtb	r2, r3
 8003034:	4b5b      	ldr	r3, [pc, #364]	@ (80031a4 <processKey+0x268>)
 8003036:	709a      	strb	r2, [r3, #2]
}
 8003038:	e285      	b.n	8003546 <processKey+0x60a>
			else if (editDayMode)
 800303a:	4b5c      	ldr	r3, [pc, #368]	@ (80031ac <processKey+0x270>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d010      	beq.n	8003064 <processKey+0x128>
				if (set_date_time.day >= 1 && set_date_time.day < 31)
 8003042:	4b58      	ldr	r3, [pc, #352]	@ (80031a4 <processKey+0x268>)
 8003044:	78db      	ldrb	r3, [r3, #3]
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 827d 	beq.w	8003546 <processKey+0x60a>
 800304c:	4b55      	ldr	r3, [pc, #340]	@ (80031a4 <processKey+0x268>)
 800304e:	78db      	ldrb	r3, [r3, #3]
 8003050:	2b1e      	cmp	r3, #30
 8003052:	f200 8278 	bhi.w	8003546 <processKey+0x60a>
					set_date_time.day++;
 8003056:	4b53      	ldr	r3, [pc, #332]	@ (80031a4 <processKey+0x268>)
 8003058:	78db      	ldrb	r3, [r3, #3]
 800305a:	3301      	adds	r3, #1
 800305c:	b2da      	uxtb	r2, r3
 800305e:	4b51      	ldr	r3, [pc, #324]	@ (80031a4 <processKey+0x268>)
 8003060:	70da      	strb	r2, [r3, #3]
}
 8003062:	e270      	b.n	8003546 <processKey+0x60a>
			else if (editHourMode)
 8003064:	4b52      	ldr	r3, [pc, #328]	@ (80031b0 <processKey+0x274>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00b      	beq.n	8003084 <processKey+0x148>
				if (set_date_time.hour >= 0 && set_date_time.hour < 23)
 800306c:	4b4d      	ldr	r3, [pc, #308]	@ (80031a4 <processKey+0x268>)
 800306e:	791b      	ldrb	r3, [r3, #4]
 8003070:	2b16      	cmp	r3, #22
 8003072:	f200 8268 	bhi.w	8003546 <processKey+0x60a>
					set_date_time.hour++;
 8003076:	4b4b      	ldr	r3, [pc, #300]	@ (80031a4 <processKey+0x268>)
 8003078:	791b      	ldrb	r3, [r3, #4]
 800307a:	3301      	adds	r3, #1
 800307c:	b2da      	uxtb	r2, r3
 800307e:	4b49      	ldr	r3, [pc, #292]	@ (80031a4 <processKey+0x268>)
 8003080:	711a      	strb	r2, [r3, #4]
}
 8003082:	e260      	b.n	8003546 <processKey+0x60a>
			else if (editMinuteMode)
 8003084:	4b4b      	ldr	r3, [pc, #300]	@ (80031b4 <processKey+0x278>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00b      	beq.n	80030a4 <processKey+0x168>
				if (set_date_time.minute >= 0 && set_date_time.minute < 59)
 800308c:	4b45      	ldr	r3, [pc, #276]	@ (80031a4 <processKey+0x268>)
 800308e:	795b      	ldrb	r3, [r3, #5]
 8003090:	2b3a      	cmp	r3, #58	@ 0x3a
 8003092:	f200 8258 	bhi.w	8003546 <processKey+0x60a>
					set_date_time.minute++;
 8003096:	4b43      	ldr	r3, [pc, #268]	@ (80031a4 <processKey+0x268>)
 8003098:	795b      	ldrb	r3, [r3, #5]
 800309a:	3301      	adds	r3, #1
 800309c:	b2da      	uxtb	r2, r3
 800309e:	4b41      	ldr	r3, [pc, #260]	@ (80031a4 <processKey+0x268>)
 80030a0:	715a      	strb	r2, [r3, #5]
}
 80030a2:	e250      	b.n	8003546 <processKey+0x60a>
			else if (editSecondMode)
 80030a4:	4b44      	ldr	r3, [pc, #272]	@ (80031b8 <processKey+0x27c>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00b      	beq.n	80030c4 <processKey+0x188>
				if (set_date_time.second >= 0 && set_date_time.second < 59)
 80030ac:	4b3d      	ldr	r3, [pc, #244]	@ (80031a4 <processKey+0x268>)
 80030ae:	799b      	ldrb	r3, [r3, #6]
 80030b0:	2b3a      	cmp	r3, #58	@ 0x3a
 80030b2:	f200 8248 	bhi.w	8003546 <processKey+0x60a>
					set_date_time.second++;
 80030b6:	4b3b      	ldr	r3, [pc, #236]	@ (80031a4 <processKey+0x268>)
 80030b8:	799b      	ldrb	r3, [r3, #6]
 80030ba:	3301      	adds	r3, #1
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	4b39      	ldr	r3, [pc, #228]	@ (80031a4 <processKey+0x268>)
 80030c0:	719a      	strb	r2, [r3, #6]
}
 80030c2:	e240      	b.n	8003546 <processKey+0x60a>
				if (set_time_cursor > 0)
 80030c4:	4b3d      	ldr	r3, [pc, #244]	@ (80031bc <processKey+0x280>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 823c 	beq.w	8003546 <processKey+0x60a>
					set_time_cursor--;
 80030ce:	4b3b      	ldr	r3, [pc, #236]	@ (80031bc <processKey+0x280>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	4b39      	ldr	r3, [pc, #228]	@ (80031bc <processKey+0x280>)
 80030d8:	701a      	strb	r2, [r3, #0]
}
 80030da:	e234      	b.n	8003546 <processKey+0x60a>
			if (menu_pages[menu_kursor] == TemperatureMenu)
 80030dc:	4b2f      	ldr	r3, [pc, #188]	@ (800319c <processKey+0x260>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	461a      	mov	r2, r3
 80030e2:	4b37      	ldr	r3, [pc, #220]	@ (80031c0 <processKey+0x284>)
 80030e4:	5c9b      	ldrb	r3, [r3, r2]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d110      	bne.n	800310c <processKey+0x1d0>
				makeBeepSound();
 80030ea:	f7ff ff0f 	bl	8002f0c <makeBeepSound>
				if (temp_menu_kursor == 0)
 80030ee:	4b35      	ldr	r3, [pc, #212]	@ (80031c4 <processKey+0x288>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d103      	bne.n	80030fe <processKey+0x1c2>
					temp_menu_kursor = 1;
 80030f6:	4b33      	ldr	r3, [pc, #204]	@ (80031c4 <processKey+0x288>)
 80030f8:	2201      	movs	r2, #1
 80030fa:	701a      	strb	r2, [r3, #0]
 80030fc:	e006      	b.n	800310c <processKey+0x1d0>
				else if (temp_menu_kursor == 1)
 80030fe:	4b31      	ldr	r3, [pc, #196]	@ (80031c4 <processKey+0x288>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d102      	bne.n	800310c <processKey+0x1d0>
					temp_menu_kursor = 0;
 8003106:	4b2f      	ldr	r3, [pc, #188]	@ (80031c4 <processKey+0x288>)
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
			if (menu_pages[menu_kursor] == PreassureMenu)
 800310c:	4b23      	ldr	r3, [pc, #140]	@ (800319c <processKey+0x260>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	461a      	mov	r2, r3
 8003112:	4b2b      	ldr	r3, [pc, #172]	@ (80031c0 <processKey+0x284>)
 8003114:	5c9b      	ldrb	r3, [r3, r2]
 8003116:	2b04      	cmp	r3, #4
 8003118:	d110      	bne.n	800313c <processKey+0x200>
				makeBeepSound();
 800311a:	f7ff fef7 	bl	8002f0c <makeBeepSound>
				if (press_menu_kursor == 0)
 800311e:	4b2a      	ldr	r3, [pc, #168]	@ (80031c8 <processKey+0x28c>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d103      	bne.n	800312e <processKey+0x1f2>
					press_menu_kursor = 1;
 8003126:	4b28      	ldr	r3, [pc, #160]	@ (80031c8 <processKey+0x28c>)
 8003128:	2201      	movs	r2, #1
 800312a:	701a      	strb	r2, [r3, #0]
 800312c:	e006      	b.n	800313c <processKey+0x200>
				else if (press_menu_kursor == 1)
 800312e:	4b26      	ldr	r3, [pc, #152]	@ (80031c8 <processKey+0x28c>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d102      	bne.n	800313c <processKey+0x200>
					press_menu_kursor = 0;
 8003136:	4b24      	ldr	r3, [pc, #144]	@ (80031c8 <processKey+0x28c>)
 8003138:	2200      	movs	r2, #0
 800313a:	701a      	strb	r2, [r3, #0]
			if (menu_pages[menu_kursor] == BatteryMenu)
 800313c:	4b17      	ldr	r3, [pc, #92]	@ (800319c <processKey+0x260>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	461a      	mov	r2, r3
 8003142:	4b1f      	ldr	r3, [pc, #124]	@ (80031c0 <processKey+0x284>)
 8003144:	5c9b      	ldrb	r3, [r3, r2]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d110      	bne.n	800316c <processKey+0x230>
				makeBeepSound();
 800314a:	f7ff fedf 	bl	8002f0c <makeBeepSound>
				if (batt_menu_kursor == 0)
 800314e:	4b1f      	ldr	r3, [pc, #124]	@ (80031cc <processKey+0x290>)
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d103      	bne.n	800315e <processKey+0x222>
					batt_menu_kursor = 1;
 8003156:	4b1d      	ldr	r3, [pc, #116]	@ (80031cc <processKey+0x290>)
 8003158:	2201      	movs	r2, #1
 800315a:	701a      	strb	r2, [r3, #0]
 800315c:	e006      	b.n	800316c <processKey+0x230>
				else if (batt_menu_kursor == 1)
 800315e:	4b1b      	ldr	r3, [pc, #108]	@ (80031cc <processKey+0x290>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d102      	bne.n	800316c <processKey+0x230>
					batt_menu_kursor = 0;
 8003166:	4b19      	ldr	r3, [pc, #100]	@ (80031cc <processKey+0x290>)
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]
			if (menu_pages[menu_kursor] == SettingsMenu)
 800316c:	4b0b      	ldr	r3, [pc, #44]	@ (800319c <processKey+0x260>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	461a      	mov	r2, r3
 8003172:	4b13      	ldr	r3, [pc, #76]	@ (80031c0 <processKey+0x284>)
 8003174:	5c9b      	ldrb	r3, [r3, r2]
 8003176:	2b06      	cmp	r3, #6
 8003178:	f040 81e5 	bne.w	8003546 <processKey+0x60a>
				makeBeepSound();
 800317c:	f7ff fec6 	bl	8002f0c <makeBeepSound>
				if (settings_menu_cursor > 0)
 8003180:	4b13      	ldr	r3, [pc, #76]	@ (80031d0 <processKey+0x294>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 81de 	beq.w	8003546 <processKey+0x60a>
					settings_menu_cursor--;
 800318a:	4b11      	ldr	r3, [pc, #68]	@ (80031d0 <processKey+0x294>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	3b01      	subs	r3, #1
 8003190:	b2da      	uxtb	r2, r3
 8003192:	4b0f      	ldr	r3, [pc, #60]	@ (80031d0 <processKey+0x294>)
 8003194:	701a      	strb	r2, [r3, #0]
}
 8003196:	e1d6      	b.n	8003546 <processKey+0x60a>
 8003198:	20000304 	.word	0x20000304
 800319c:	200002fe 	.word	0x200002fe
 80031a0:	20000305 	.word	0x20000305
 80031a4:	2000000c 	.word	0x2000000c
 80031a8:	20000306 	.word	0x20000306
 80031ac:	20000307 	.word	0x20000307
 80031b0:	20000308 	.word	0x20000308
 80031b4:	20000309 	.word	0x20000309
 80031b8:	2000030a 	.word	0x2000030a
 80031bc:	20000303 	.word	0x20000303
 80031c0:	20000004 	.word	0x20000004
 80031c4:	200002ff 	.word	0x200002ff
 80031c8:	20000300 	.word	0x20000300
 80031cc:	20000301 	.word	0x20000301
 80031d0:	20000302 	.word	0x20000302
	else if (key == Down)
 80031d4:	79fb      	ldrb	r3, [r7, #7]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	f040 80f2 	bne.w	80033c0 <processKey+0x484>
		if (setTimeMode)
 80031dc:	4b94      	ldr	r3, [pc, #592]	@ (8003430 <processKey+0x4f4>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 808f 	beq.w	8003304 <processKey+0x3c8>
			makeBeepSound();
 80031e6:	f7ff fe91 	bl	8002f0c <makeBeepSound>
			if (editYearMode)
 80031ea:	4b92      	ldr	r3, [pc, #584]	@ (8003434 <processKey+0x4f8>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d013      	beq.n	800321a <processKey+0x2de>
				if (set_date_time.year > 2000 && set_date_time.year <= 2199)
 80031f2:	4b91      	ldr	r3, [pc, #580]	@ (8003438 <processKey+0x4fc>)
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80031fa:	f240 81a4 	bls.w	8003546 <processKey+0x60a>
 80031fe:	4b8e      	ldr	r3, [pc, #568]	@ (8003438 <processKey+0x4fc>)
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	f640 0297 	movw	r2, #2199	@ 0x897
 8003206:	4293      	cmp	r3, r2
 8003208:	f200 819d 	bhi.w	8003546 <processKey+0x60a>
					set_date_time.year--;
 800320c:	4b8a      	ldr	r3, [pc, #552]	@ (8003438 <processKey+0x4fc>)
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	3b01      	subs	r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	4b88      	ldr	r3, [pc, #544]	@ (8003438 <processKey+0x4fc>)
 8003216:	801a      	strh	r2, [r3, #0]
}
 8003218:	e195      	b.n	8003546 <processKey+0x60a>
			else if (editMonthMode)
 800321a:	4b88      	ldr	r3, [pc, #544]	@ (800343c <processKey+0x500>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d010      	beq.n	8003244 <processKey+0x308>
				if (set_date_time.month > 1 && set_date_time.month <= 12)
 8003222:	4b85      	ldr	r3, [pc, #532]	@ (8003438 <processKey+0x4fc>)
 8003224:	789b      	ldrb	r3, [r3, #2]
 8003226:	2b01      	cmp	r3, #1
 8003228:	f240 818d 	bls.w	8003546 <processKey+0x60a>
 800322c:	4b82      	ldr	r3, [pc, #520]	@ (8003438 <processKey+0x4fc>)
 800322e:	789b      	ldrb	r3, [r3, #2]
 8003230:	2b0c      	cmp	r3, #12
 8003232:	f200 8188 	bhi.w	8003546 <processKey+0x60a>
					set_date_time.month--;
 8003236:	4b80      	ldr	r3, [pc, #512]	@ (8003438 <processKey+0x4fc>)
 8003238:	789b      	ldrb	r3, [r3, #2]
 800323a:	3b01      	subs	r3, #1
 800323c:	b2da      	uxtb	r2, r3
 800323e:	4b7e      	ldr	r3, [pc, #504]	@ (8003438 <processKey+0x4fc>)
 8003240:	709a      	strb	r2, [r3, #2]
}
 8003242:	e180      	b.n	8003546 <processKey+0x60a>
			else if (editDayMode)
 8003244:	4b7e      	ldr	r3, [pc, #504]	@ (8003440 <processKey+0x504>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d010      	beq.n	800326e <processKey+0x332>
				if (set_date_time.day > 1 && set_date_time.day <= 31)
 800324c:	4b7a      	ldr	r3, [pc, #488]	@ (8003438 <processKey+0x4fc>)
 800324e:	78db      	ldrb	r3, [r3, #3]
 8003250:	2b01      	cmp	r3, #1
 8003252:	f240 8178 	bls.w	8003546 <processKey+0x60a>
 8003256:	4b78      	ldr	r3, [pc, #480]	@ (8003438 <processKey+0x4fc>)
 8003258:	78db      	ldrb	r3, [r3, #3]
 800325a:	2b1f      	cmp	r3, #31
 800325c:	f200 8173 	bhi.w	8003546 <processKey+0x60a>
					set_date_time.day--;
 8003260:	4b75      	ldr	r3, [pc, #468]	@ (8003438 <processKey+0x4fc>)
 8003262:	78db      	ldrb	r3, [r3, #3]
 8003264:	3b01      	subs	r3, #1
 8003266:	b2da      	uxtb	r2, r3
 8003268:	4b73      	ldr	r3, [pc, #460]	@ (8003438 <processKey+0x4fc>)
 800326a:	70da      	strb	r2, [r3, #3]
}
 800326c:	e16b      	b.n	8003546 <processKey+0x60a>
			else if (editHourMode)
 800326e:	4b75      	ldr	r3, [pc, #468]	@ (8003444 <processKey+0x508>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d010      	beq.n	8003298 <processKey+0x35c>
				if (set_date_time.hour > 0 && set_date_time.hour <= 23)
 8003276:	4b70      	ldr	r3, [pc, #448]	@ (8003438 <processKey+0x4fc>)
 8003278:	791b      	ldrb	r3, [r3, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 8163 	beq.w	8003546 <processKey+0x60a>
 8003280:	4b6d      	ldr	r3, [pc, #436]	@ (8003438 <processKey+0x4fc>)
 8003282:	791b      	ldrb	r3, [r3, #4]
 8003284:	2b17      	cmp	r3, #23
 8003286:	f200 815e 	bhi.w	8003546 <processKey+0x60a>
					set_date_time.hour--;
 800328a:	4b6b      	ldr	r3, [pc, #428]	@ (8003438 <processKey+0x4fc>)
 800328c:	791b      	ldrb	r3, [r3, #4]
 800328e:	3b01      	subs	r3, #1
 8003290:	b2da      	uxtb	r2, r3
 8003292:	4b69      	ldr	r3, [pc, #420]	@ (8003438 <processKey+0x4fc>)
 8003294:	711a      	strb	r2, [r3, #4]
}
 8003296:	e156      	b.n	8003546 <processKey+0x60a>
			else if (editMinuteMode)
 8003298:	4b6b      	ldr	r3, [pc, #428]	@ (8003448 <processKey+0x50c>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d010      	beq.n	80032c2 <processKey+0x386>
				if (set_date_time.minute > 0 && set_date_time.minute <= 59)
 80032a0:	4b65      	ldr	r3, [pc, #404]	@ (8003438 <processKey+0x4fc>)
 80032a2:	795b      	ldrb	r3, [r3, #5]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 814e 	beq.w	8003546 <processKey+0x60a>
 80032aa:	4b63      	ldr	r3, [pc, #396]	@ (8003438 <processKey+0x4fc>)
 80032ac:	795b      	ldrb	r3, [r3, #5]
 80032ae:	2b3b      	cmp	r3, #59	@ 0x3b
 80032b0:	f200 8149 	bhi.w	8003546 <processKey+0x60a>
					set_date_time.minute--;
 80032b4:	4b60      	ldr	r3, [pc, #384]	@ (8003438 <processKey+0x4fc>)
 80032b6:	795b      	ldrb	r3, [r3, #5]
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	4b5e      	ldr	r3, [pc, #376]	@ (8003438 <processKey+0x4fc>)
 80032be:	715a      	strb	r2, [r3, #5]
}
 80032c0:	e141      	b.n	8003546 <processKey+0x60a>
			else if (editSecondMode)
 80032c2:	4b62      	ldr	r3, [pc, #392]	@ (800344c <processKey+0x510>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d010      	beq.n	80032ec <processKey+0x3b0>
				if (set_date_time.second > 0 && set_date_time.second <= 59)
 80032ca:	4b5b      	ldr	r3, [pc, #364]	@ (8003438 <processKey+0x4fc>)
 80032cc:	799b      	ldrb	r3, [r3, #6]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 8139 	beq.w	8003546 <processKey+0x60a>
 80032d4:	4b58      	ldr	r3, [pc, #352]	@ (8003438 <processKey+0x4fc>)
 80032d6:	799b      	ldrb	r3, [r3, #6]
 80032d8:	2b3b      	cmp	r3, #59	@ 0x3b
 80032da:	f200 8134 	bhi.w	8003546 <processKey+0x60a>
					set_date_time.second--;
 80032de:	4b56      	ldr	r3, [pc, #344]	@ (8003438 <processKey+0x4fc>)
 80032e0:	799b      	ldrb	r3, [r3, #6]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	4b54      	ldr	r3, [pc, #336]	@ (8003438 <processKey+0x4fc>)
 80032e8:	719a      	strb	r2, [r3, #6]
}
 80032ea:	e12c      	b.n	8003546 <processKey+0x60a>
				if (set_time_cursor < 5)
 80032ec:	4b58      	ldr	r3, [pc, #352]	@ (8003450 <processKey+0x514>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	f200 8128 	bhi.w	8003546 <processKey+0x60a>
					set_time_cursor++;
 80032f6:	4b56      	ldr	r3, [pc, #344]	@ (8003450 <processKey+0x514>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	3301      	adds	r3, #1
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	4b54      	ldr	r3, [pc, #336]	@ (8003450 <processKey+0x514>)
 8003300:	701a      	strb	r2, [r3, #0]
}
 8003302:	e120      	b.n	8003546 <processKey+0x60a>
			if (menu_pages[menu_kursor] == TemperatureMenu)
 8003304:	4b53      	ldr	r3, [pc, #332]	@ (8003454 <processKey+0x518>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	461a      	mov	r2, r3
 800330a:	4b53      	ldr	r3, [pc, #332]	@ (8003458 <processKey+0x51c>)
 800330c:	5c9b      	ldrb	r3, [r3, r2]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d110      	bne.n	8003334 <processKey+0x3f8>
				makeBeepSound();
 8003312:	f7ff fdfb 	bl	8002f0c <makeBeepSound>
				if (temp_menu_kursor == 0)
 8003316:	4b51      	ldr	r3, [pc, #324]	@ (800345c <processKey+0x520>)
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d103      	bne.n	8003326 <processKey+0x3ea>
					temp_menu_kursor = 1;
 800331e:	4b4f      	ldr	r3, [pc, #316]	@ (800345c <processKey+0x520>)
 8003320:	2201      	movs	r2, #1
 8003322:	701a      	strb	r2, [r3, #0]
 8003324:	e006      	b.n	8003334 <processKey+0x3f8>
				else if (temp_menu_kursor == 1)
 8003326:	4b4d      	ldr	r3, [pc, #308]	@ (800345c <processKey+0x520>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d102      	bne.n	8003334 <processKey+0x3f8>
					temp_menu_kursor = 0;
 800332e:	4b4b      	ldr	r3, [pc, #300]	@ (800345c <processKey+0x520>)
 8003330:	2200      	movs	r2, #0
 8003332:	701a      	strb	r2, [r3, #0]
			if (menu_pages[menu_kursor] == PreassureMenu)
 8003334:	4b47      	ldr	r3, [pc, #284]	@ (8003454 <processKey+0x518>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	461a      	mov	r2, r3
 800333a:	4b47      	ldr	r3, [pc, #284]	@ (8003458 <processKey+0x51c>)
 800333c:	5c9b      	ldrb	r3, [r3, r2]
 800333e:	2b04      	cmp	r3, #4
 8003340:	d110      	bne.n	8003364 <processKey+0x428>
				makeBeepSound();
 8003342:	f7ff fde3 	bl	8002f0c <makeBeepSound>
				if (press_menu_kursor == 0)
 8003346:	4b46      	ldr	r3, [pc, #280]	@ (8003460 <processKey+0x524>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d103      	bne.n	8003356 <processKey+0x41a>
					press_menu_kursor = 1;
 800334e:	4b44      	ldr	r3, [pc, #272]	@ (8003460 <processKey+0x524>)
 8003350:	2201      	movs	r2, #1
 8003352:	701a      	strb	r2, [r3, #0]
 8003354:	e006      	b.n	8003364 <processKey+0x428>
				else if (press_menu_kursor == 1)
 8003356:	4b42      	ldr	r3, [pc, #264]	@ (8003460 <processKey+0x524>)
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d102      	bne.n	8003364 <processKey+0x428>
					press_menu_kursor = 0;
 800335e:	4b40      	ldr	r3, [pc, #256]	@ (8003460 <processKey+0x524>)
 8003360:	2200      	movs	r2, #0
 8003362:	701a      	strb	r2, [r3, #0]
			if (menu_pages[menu_kursor] == BatteryMenu)
 8003364:	4b3b      	ldr	r3, [pc, #236]	@ (8003454 <processKey+0x518>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	461a      	mov	r2, r3
 800336a:	4b3b      	ldr	r3, [pc, #236]	@ (8003458 <processKey+0x51c>)
 800336c:	5c9b      	ldrb	r3, [r3, r2]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d110      	bne.n	8003394 <processKey+0x458>
				makeBeepSound();
 8003372:	f7ff fdcb 	bl	8002f0c <makeBeepSound>
				if (batt_menu_kursor == 0)
 8003376:	4b3b      	ldr	r3, [pc, #236]	@ (8003464 <processKey+0x528>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d103      	bne.n	8003386 <processKey+0x44a>
					batt_menu_kursor = 1;
 800337e:	4b39      	ldr	r3, [pc, #228]	@ (8003464 <processKey+0x528>)
 8003380:	2201      	movs	r2, #1
 8003382:	701a      	strb	r2, [r3, #0]
 8003384:	e006      	b.n	8003394 <processKey+0x458>
				else if (batt_menu_kursor == 1)
 8003386:	4b37      	ldr	r3, [pc, #220]	@ (8003464 <processKey+0x528>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d102      	bne.n	8003394 <processKey+0x458>
					batt_menu_kursor = 0;
 800338e:	4b35      	ldr	r3, [pc, #212]	@ (8003464 <processKey+0x528>)
 8003390:	2200      	movs	r2, #0
 8003392:	701a      	strb	r2, [r3, #0]
			if (menu_pages[menu_kursor] == SettingsMenu)
 8003394:	4b2f      	ldr	r3, [pc, #188]	@ (8003454 <processKey+0x518>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	461a      	mov	r2, r3
 800339a:	4b2f      	ldr	r3, [pc, #188]	@ (8003458 <processKey+0x51c>)
 800339c:	5c9b      	ldrb	r3, [r3, r2]
 800339e:	2b06      	cmp	r3, #6
 80033a0:	f040 80d1 	bne.w	8003546 <processKey+0x60a>
				makeBeepSound();
 80033a4:	f7ff fdb2 	bl	8002f0c <makeBeepSound>
				if (settings_menu_cursor < 1)
 80033a8:	4b2f      	ldr	r3, [pc, #188]	@ (8003468 <processKey+0x52c>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f040 80ca 	bne.w	8003546 <processKey+0x60a>
					settings_menu_cursor++;
 80033b2:	4b2d      	ldr	r3, [pc, #180]	@ (8003468 <processKey+0x52c>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	3301      	adds	r3, #1
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	4b2b      	ldr	r3, [pc, #172]	@ (8003468 <processKey+0x52c>)
 80033bc:	701a      	strb	r2, [r3, #0]
}
 80033be:	e0c2      	b.n	8003546 <processKey+0x60a>
	else if (key == Middle)
 80033c0:	79fb      	ldrb	r3, [r7, #7]
 80033c2:	2b05      	cmp	r3, #5
 80033c4:	f040 80bf 	bne.w	8003546 <processKey+0x60a>
		if (menu_pages[menu_kursor] == SettingsMenu)
 80033c8:	4b22      	ldr	r3, [pc, #136]	@ (8003454 <processKey+0x518>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	4b22      	ldr	r3, [pc, #136]	@ (8003458 <processKey+0x51c>)
 80033d0:	5c9b      	ldrb	r3, [r3, r2]
 80033d2:	2b06      	cmp	r3, #6
 80033d4:	f040 80b7 	bne.w	8003546 <processKey+0x60a>
			makeBeepSound();
 80033d8:	f7ff fd98 	bl	8002f0c <makeBeepSound>
			if (setTimeMode)
 80033dc:	4b14      	ldr	r3, [pc, #80]	@ (8003430 <processKey+0x4f4>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 8093 	beq.w	800350c <processKey+0x5d0>
				switch (set_time_cursor)
 80033e6:	4b1a      	ldr	r3, [pc, #104]	@ (8003450 <processKey+0x514>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b05      	cmp	r3, #5
 80033ec:	f200 80ab 	bhi.w	8003546 <processKey+0x60a>
 80033f0:	a201      	add	r2, pc, #4	@ (adr r2, 80033f8 <processKey+0x4bc>)
 80033f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f6:	bf00      	nop
 80033f8:	08003411 	.word	0x08003411
 80033fc:	0800346d 	.word	0x0800346d
 8003400:	0800348d 	.word	0x0800348d
 8003404:	080034ad 	.word	0x080034ad
 8003408:	080034cd 	.word	0x080034cd
 800340c:	080034ed 	.word	0x080034ed
					editYearMode = !editYearMode;
 8003410:	4b08      	ldr	r3, [pc, #32]	@ (8003434 <processKey+0x4f8>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	bf14      	ite	ne
 8003418:	2301      	movne	r3, #1
 800341a:	2300      	moveq	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	f083 0301 	eor.w	r3, r3, #1
 8003422:	b2db      	uxtb	r3, r3
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	b2da      	uxtb	r2, r3
 800342a:	4b02      	ldr	r3, [pc, #8]	@ (8003434 <processKey+0x4f8>)
 800342c:	701a      	strb	r2, [r3, #0]
					break;
 800342e:	e08a      	b.n	8003546 <processKey+0x60a>
 8003430:	20000304 	.word	0x20000304
 8003434:	20000305 	.word	0x20000305
 8003438:	2000000c 	.word	0x2000000c
 800343c:	20000306 	.word	0x20000306
 8003440:	20000307 	.word	0x20000307
 8003444:	20000308 	.word	0x20000308
 8003448:	20000309 	.word	0x20000309
 800344c:	2000030a 	.word	0x2000030a
 8003450:	20000303 	.word	0x20000303
 8003454:	200002fe 	.word	0x200002fe
 8003458:	20000004 	.word	0x20000004
 800345c:	200002ff 	.word	0x200002ff
 8003460:	20000300 	.word	0x20000300
 8003464:	20000301 	.word	0x20000301
 8003468:	20000302 	.word	0x20000302
					editMonthMode = !editMonthMode;
 800346c:	4b38      	ldr	r3, [pc, #224]	@ (8003550 <processKey+0x614>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	bf14      	ite	ne
 8003474:	2301      	movne	r3, #1
 8003476:	2300      	moveq	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	f083 0301 	eor.w	r3, r3, #1
 800347e:	b2db      	uxtb	r3, r3
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	b2da      	uxtb	r2, r3
 8003486:	4b32      	ldr	r3, [pc, #200]	@ (8003550 <processKey+0x614>)
 8003488:	701a      	strb	r2, [r3, #0]
					break;
 800348a:	e05c      	b.n	8003546 <processKey+0x60a>
					editDayMode = !editDayMode;
 800348c:	4b31      	ldr	r3, [pc, #196]	@ (8003554 <processKey+0x618>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	bf14      	ite	ne
 8003494:	2301      	movne	r3, #1
 8003496:	2300      	moveq	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	f083 0301 	eor.w	r3, r3, #1
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	4b2b      	ldr	r3, [pc, #172]	@ (8003554 <processKey+0x618>)
 80034a8:	701a      	strb	r2, [r3, #0]
					break;
 80034aa:	e04c      	b.n	8003546 <processKey+0x60a>
					editHourMode = !editHourMode;
 80034ac:	4b2a      	ldr	r3, [pc, #168]	@ (8003558 <processKey+0x61c>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	bf14      	ite	ne
 80034b4:	2301      	movne	r3, #1
 80034b6:	2300      	moveq	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	f083 0301 	eor.w	r3, r3, #1
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	4b24      	ldr	r3, [pc, #144]	@ (8003558 <processKey+0x61c>)
 80034c8:	701a      	strb	r2, [r3, #0]
					break;
 80034ca:	e03c      	b.n	8003546 <processKey+0x60a>
					editMinuteMode = !editMinuteMode;
 80034cc:	4b23      	ldr	r3, [pc, #140]	@ (800355c <processKey+0x620>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	bf14      	ite	ne
 80034d4:	2301      	movne	r3, #1
 80034d6:	2300      	moveq	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	f083 0301 	eor.w	r3, r3, #1
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	4b1d      	ldr	r3, [pc, #116]	@ (800355c <processKey+0x620>)
 80034e8:	701a      	strb	r2, [r3, #0]
					break;
 80034ea:	e02c      	b.n	8003546 <processKey+0x60a>
					editSecondMode = !editSecondMode;
 80034ec:	4b1c      	ldr	r3, [pc, #112]	@ (8003560 <processKey+0x624>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	bf14      	ite	ne
 80034f4:	2301      	movne	r3, #1
 80034f6:	2300      	moveq	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	f083 0301 	eor.w	r3, r3, #1
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	b2da      	uxtb	r2, r3
 8003506:	4b16      	ldr	r3, [pc, #88]	@ (8003560 <processKey+0x624>)
 8003508:	701a      	strb	r2, [r3, #0]
					break;
 800350a:	e01c      	b.n	8003546 <processKey+0x60a>
				if (settings_menu_cursor == 0)
 800350c:	4b15      	ldr	r3, [pc, #84]	@ (8003564 <processKey+0x628>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10f      	bne.n	8003534 <processKey+0x5f8>
					soundOn = !soundOn;
 8003514:	4b14      	ldr	r3, [pc, #80]	@ (8003568 <processKey+0x62c>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	bf14      	ite	ne
 800351c:	2301      	movne	r3, #1
 800351e:	2300      	moveq	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	f083 0301 	eor.w	r3, r3, #1
 8003526:	b2db      	uxtb	r3, r3
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	b2da      	uxtb	r2, r3
 800352e:	4b0e      	ldr	r3, [pc, #56]	@ (8003568 <processKey+0x62c>)
 8003530:	701a      	strb	r2, [r3, #0]
}
 8003532:	e008      	b.n	8003546 <processKey+0x60a>
				else if (settings_menu_cursor == 1)
 8003534:	4b0b      	ldr	r3, [pc, #44]	@ (8003564 <processKey+0x628>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d104      	bne.n	8003546 <processKey+0x60a>
					setTimeMode = true;
 800353c:	4b0b      	ldr	r3, [pc, #44]	@ (800356c <processKey+0x630>)
 800353e:	2201      	movs	r2, #1
 8003540:	701a      	strb	r2, [r3, #0]
}
 8003542:	e000      	b.n	8003546 <processKey+0x60a>
		if (menu_kursor < MENU_PAGES_LENGTH - 1)
 8003544:	bf00      	nop
}
 8003546:	bf00      	nop
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000306 	.word	0x20000306
 8003554:	20000307 	.word	0x20000307
 8003558:	20000308 	.word	0x20000308
 800355c:	20000309 	.word	0x20000309
 8003560:	2000030a 	.word	0x2000030a
 8003564:	20000302 	.word	0x20000302
 8003568:	20000000 	.word	0x20000000
 800356c:	20000304 	.word	0x20000304

08003570 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08a      	sub	sp, #40	@ 0x28
 8003574:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003576:	f107 0314 	add.w	r3, r7, #20
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	605a      	str	r2, [r3, #4]
 8003580:	609a      	str	r2, [r3, #8]
 8003582:	60da      	str	r2, [r3, #12]
 8003584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003586:	4b2c      	ldr	r3, [pc, #176]	@ (8003638 <MX_GPIO_Init+0xc8>)
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	4a2b      	ldr	r2, [pc, #172]	@ (8003638 <MX_GPIO_Init+0xc8>)
 800358c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003590:	6153      	str	r3, [r2, #20]
 8003592:	4b29      	ldr	r3, [pc, #164]	@ (8003638 <MX_GPIO_Init+0xc8>)
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800359a:	613b      	str	r3, [r7, #16]
 800359c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800359e:	4b26      	ldr	r3, [pc, #152]	@ (8003638 <MX_GPIO_Init+0xc8>)
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	4a25      	ldr	r2, [pc, #148]	@ (8003638 <MX_GPIO_Init+0xc8>)
 80035a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80035a8:	6153      	str	r3, [r2, #20]
 80035aa:	4b23      	ldr	r3, [pc, #140]	@ (8003638 <MX_GPIO_Init+0xc8>)
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b6:	4b20      	ldr	r3, [pc, #128]	@ (8003638 <MX_GPIO_Init+0xc8>)
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003638 <MX_GPIO_Init+0xc8>)
 80035bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035c0:	6153      	str	r3, [r2, #20]
 80035c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003638 <MX_GPIO_Init+0xc8>)
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ca:	60bb      	str	r3, [r7, #8]
 80035cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003638 <MX_GPIO_Init+0xc8>)
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	4a19      	ldr	r2, [pc, #100]	@ (8003638 <MX_GPIO_Init+0xc8>)
 80035d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035d8:	6153      	str	r3, [r2, #20]
 80035da:	4b17      	ldr	r3, [pc, #92]	@ (8003638 <MX_GPIO_Init+0xc8>)
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035e2:	607b      	str	r3, [r7, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_RESET);
 80035e6:	2200      	movs	r2, #0
 80035e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80035ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035f0:	f002 faf2 	bl	8005bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_RIGHT_Pin|BTN_DOWN_Pin|BTN_LEFT_Pin
 80035f4:	f24e 0306 	movw	r3, #57350	@ 0xe006
 80035f8:	617b      	str	r3, [r7, #20]
                          |BTN_MIDDLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035fa:	2300      	movs	r3, #0
 80035fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80035fe:	2302      	movs	r3, #2
 8003600:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003602:	f107 0314 	add.w	r3, r7, #20
 8003606:	4619      	mov	r1, r3
 8003608:	480c      	ldr	r0, [pc, #48]	@ (800363c <MX_GPIO_Init+0xcc>)
 800360a:	f002 f943 	bl	8005894 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin;
 800360e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003614:	2301      	movs	r3, #1
 8003616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003618:	2300      	movs	r3, #0
 800361a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800361c:	2300      	movs	r3, #0
 800361e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 8003620:	f107 0314 	add.w	r3, r7, #20
 8003624:	4619      	mov	r1, r3
 8003626:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800362a:	f002 f933 	bl	8005894 <HAL_GPIO_Init>

}
 800362e:	bf00      	nop
 8003630:	3728      	adds	r7, #40	@ 0x28
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40021000 	.word	0x40021000
 800363c:	48000400 	.word	0x48000400

08003640 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003644:	4b1b      	ldr	r3, [pc, #108]	@ (80036b4 <MX_I2C1_Init+0x74>)
 8003646:	4a1c      	ldr	r2, [pc, #112]	@ (80036b8 <MX_I2C1_Init+0x78>)
 8003648:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800364a:	4b1a      	ldr	r3, [pc, #104]	@ (80036b4 <MX_I2C1_Init+0x74>)
 800364c:	f240 220b 	movw	r2, #523	@ 0x20b
 8003650:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003652:	4b18      	ldr	r3, [pc, #96]	@ (80036b4 <MX_I2C1_Init+0x74>)
 8003654:	2200      	movs	r2, #0
 8003656:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003658:	4b16      	ldr	r3, [pc, #88]	@ (80036b4 <MX_I2C1_Init+0x74>)
 800365a:	2201      	movs	r2, #1
 800365c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800365e:	4b15      	ldr	r3, [pc, #84]	@ (80036b4 <MX_I2C1_Init+0x74>)
 8003660:	2200      	movs	r2, #0
 8003662:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003664:	4b13      	ldr	r3, [pc, #76]	@ (80036b4 <MX_I2C1_Init+0x74>)
 8003666:	2200      	movs	r2, #0
 8003668:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800366a:	4b12      	ldr	r3, [pc, #72]	@ (80036b4 <MX_I2C1_Init+0x74>)
 800366c:	2200      	movs	r2, #0
 800366e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003670:	4b10      	ldr	r3, [pc, #64]	@ (80036b4 <MX_I2C1_Init+0x74>)
 8003672:	2200      	movs	r2, #0
 8003674:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003676:	4b0f      	ldr	r3, [pc, #60]	@ (80036b4 <MX_I2C1_Init+0x74>)
 8003678:	2200      	movs	r2, #0
 800367a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800367c:	480d      	ldr	r0, [pc, #52]	@ (80036b4 <MX_I2C1_Init+0x74>)
 800367e:	f002 fadd 	bl	8005c3c <HAL_I2C_Init>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003688:	f000 f904 	bl	8003894 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800368c:	2100      	movs	r1, #0
 800368e:	4809      	ldr	r0, [pc, #36]	@ (80036b4 <MX_I2C1_Init+0x74>)
 8003690:	f003 fafa 	bl	8006c88 <HAL_I2CEx_ConfigAnalogFilter>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800369a:	f000 f8fb 	bl	8003894 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800369e:	2100      	movs	r1, #0
 80036a0:	4804      	ldr	r0, [pc, #16]	@ (80036b4 <MX_I2C1_Init+0x74>)
 80036a2:	f003 fb3c 	bl	8006d1e <HAL_I2CEx_ConfigDigitalFilter>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80036ac:	f000 f8f2 	bl	8003894 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80036b0:	bf00      	nop
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	20000350 	.word	0x20000350
 80036b8:	40005400 	.word	0x40005400

080036bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08a      	sub	sp, #40	@ 0x28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c4:	f107 0314 	add.w	r3, r7, #20
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	605a      	str	r2, [r3, #4]
 80036ce:	609a      	str	r2, [r3, #8]
 80036d0:	60da      	str	r2, [r3, #12]
 80036d2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a17      	ldr	r2, [pc, #92]	@ (8003738 <HAL_I2C_MspInit+0x7c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d128      	bne.n	8003730 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036de:	4b17      	ldr	r3, [pc, #92]	@ (800373c <HAL_I2C_MspInit+0x80>)
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	4a16      	ldr	r2, [pc, #88]	@ (800373c <HAL_I2C_MspInit+0x80>)
 80036e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036e8:	6153      	str	r3, [r2, #20]
 80036ea:	4b14      	ldr	r3, [pc, #80]	@ (800373c <HAL_I2C_MspInit+0x80>)
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036f2:	613b      	str	r3, [r7, #16]
 80036f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80036f6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80036fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036fc:	2312      	movs	r3, #18
 80036fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003700:	2300      	movs	r3, #0
 8003702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003704:	2303      	movs	r3, #3
 8003706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003708:	2304      	movs	r3, #4
 800370a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800370c:	f107 0314 	add.w	r3, r7, #20
 8003710:	4619      	mov	r1, r3
 8003712:	480b      	ldr	r0, [pc, #44]	@ (8003740 <HAL_I2C_MspInit+0x84>)
 8003714:	f002 f8be 	bl	8005894 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003718:	4b08      	ldr	r3, [pc, #32]	@ (800373c <HAL_I2C_MspInit+0x80>)
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	4a07      	ldr	r2, [pc, #28]	@ (800373c <HAL_I2C_MspInit+0x80>)
 800371e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003722:	61d3      	str	r3, [r2, #28]
 8003724:	4b05      	ldr	r3, [pc, #20]	@ (800373c <HAL_I2C_MspInit+0x80>)
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003730:	bf00      	nop
 8003732:	3728      	adds	r7, #40	@ 0x28
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	40005400 	.word	0x40005400
 800373c:	40021000 	.word	0x40021000
 8003740:	48000400 	.word	0x48000400

08003744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003748:	f000 fe36 	bl	80043b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800374c:	f000 f828 	bl	80037a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003750:	f7ff ff0e 	bl	8003570 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003754:	f000 fd22 	bl	800419c <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8003758:	f7fe fbca 	bl	8001ef0 <MX_ADC2_Init>
  MX_I2C1_Init();
 800375c:	f7ff ff70 	bl	8003640 <MX_I2C1_Init>
  MX_TIM3_Init();
 8003760:	f000 fc6c 	bl	800403c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8003764:	2100      	movs	r1, #0
 8003766:	480b      	ldr	r0, [pc, #44]	@ (8003794 <main+0x50>)
 8003768:	f001 fad5 	bl	8004d16 <HAL_ADCEx_Calibration_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800376c:	2100      	movs	r1, #0
 800376e:	480a      	ldr	r0, [pc, #40]	@ (8003798 <main+0x54>)
 8003770:	f005 f910 	bl	8008994 <HAL_TIM_PWM_Start>
	ssd1306_Init();
 8003774:	f000 f8ce 	bl	8003914 <ssd1306_Init>
	BME280_Init();
 8003778:	f7fe fb38 	bl	8001dec <BME280_Init>
	DS3231_Init(&hi2c1);
 800377c:	4807      	ldr	r0, [pc, #28]	@ (800379c <main+0x58>)
 800377e:	f7fe fc53 	bl	8002028 <DS3231_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003782:	f006 fd0f 	bl	800a1a4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8003786:	f7fe fdbb 	bl	8002300 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800378a:	f006 fd3f 	bl	800a20c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800378e:	bf00      	nop
 8003790:	e7fd      	b.n	800378e <main+0x4a>
 8003792:	bf00      	nop
 8003794:	20000244 	.word	0x20000244
 8003798:	200005fc 	.word	0x200005fc
 800379c:	20000350 	.word	0x20000350

080037a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b0a6      	sub	sp, #152	@ 0x98
 80037a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037a6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80037aa:	2228      	movs	r2, #40	@ 0x28
 80037ac:	2100      	movs	r1, #0
 80037ae:	4618      	mov	r0, r3
 80037b0:	f00a fa4f 	bl	800dc52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037b4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	605a      	str	r2, [r3, #4]
 80037be:	609a      	str	r2, [r3, #8]
 80037c0:	60da      	str	r2, [r3, #12]
 80037c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037c4:	1d3b      	adds	r3, r7, #4
 80037c6:	2258      	movs	r2, #88	@ 0x58
 80037c8:	2100      	movs	r1, #0
 80037ca:	4618      	mov	r0, r3
 80037cc:	f00a fa41 	bl	800dc52 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80037d0:	2302      	movs	r3, #2
 80037d2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037d4:	2301      	movs	r3, #1
 80037d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80037d8:	2310      	movs	r3, #16
 80037da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037de:	2302      	movs	r3, #2
 80037e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80037e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80037ec:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80037f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80037f4:	2300      	movs	r3, #0
 80037f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037fa:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80037fe:	4618      	mov	r0, r3
 8003800:	f003 fada 	bl	8006db8 <HAL_RCC_OscConfig>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800380a:	f000 f843 	bl	8003894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800380e:	230f      	movs	r3, #15
 8003810:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003812:	2302      	movs	r3, #2
 8003814:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003816:	2300      	movs	r3, #0
 8003818:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800381a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800381e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003820:	2300      	movs	r3, #0
 8003822:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003824:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003828:	2102      	movs	r1, #2
 800382a:	4618      	mov	r0, r3
 800382c:	f004 fb18 	bl	8007e60 <HAL_RCC_ClockConfig>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003836:	f000 f82d 	bl	8003894 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800383a:	4b0c      	ldr	r3, [pc, #48]	@ (800386c <SystemClock_Config+0xcc>)
 800383c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800383e:	2300      	movs	r3, #0
 8003840:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8003842:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003846:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003848:	2300      	movs	r3, #0
 800384a:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 800384c:	2300      	movs	r3, #0
 800384e:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003850:	1d3b      	adds	r3, r7, #4
 8003852:	4618      	mov	r0, r3
 8003854:	f004 fd56 	bl	8008304 <HAL_RCCEx_PeriphCLKConfig>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800385e:	f000 f819 	bl	8003894 <Error_Handler>
  }
}
 8003862:	bf00      	nop
 8003864:	3798      	adds	r7, #152	@ 0x98
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	002000a2 	.word	0x002000a2

08003870 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a04      	ldr	r2, [pc, #16]	@ (8003890 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d101      	bne.n	8003886 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003882:	f000 fdaf 	bl	80043e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003886:	bf00      	nop
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40014800 	.word	0x40014800

08003894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003898:	b672      	cpsid	i
}
 800389a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800389c:	bf00      	nop
 800389e:	e7fd      	b.n	800389c <Error_Handler+0x8>

080038a0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80038a4:	bf00      	nop
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
	...

080038b0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af04      	add	r7, sp, #16
 80038b6:	4603      	mov	r3, r0
 80038b8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80038ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80038be:	9302      	str	r3, [sp, #8]
 80038c0:	2301      	movs	r3, #1
 80038c2:	9301      	str	r3, [sp, #4]
 80038c4:	1dfb      	adds	r3, r7, #7
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	2301      	movs	r3, #1
 80038ca:	2200      	movs	r2, #0
 80038cc:	2178      	movs	r1, #120	@ 0x78
 80038ce:	4803      	ldr	r0, [pc, #12]	@ (80038dc <ssd1306_WriteCommand+0x2c>)
 80038d0:	f002 fc5e 	bl	8006190 <HAL_I2C_Mem_Write>
}
 80038d4:	bf00      	nop
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	20000350 	.word	0x20000350

080038e0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af04      	add	r7, sp, #16
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80038f2:	9202      	str	r2, [sp, #8]
 80038f4:	9301      	str	r3, [sp, #4]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	2301      	movs	r3, #1
 80038fc:	2240      	movs	r2, #64	@ 0x40
 80038fe:	2178      	movs	r1, #120	@ 0x78
 8003900:	4803      	ldr	r0, [pc, #12]	@ (8003910 <ssd1306_WriteData+0x30>)
 8003902:	f002 fc45 	bl	8006190 <HAL_I2C_Mem_Write>
}
 8003906:	bf00      	nop
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20000350 	.word	0x20000350

08003914 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003918:	f7ff ffc2 	bl	80038a0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800391c:	2064      	movs	r0, #100	@ 0x64
 800391e:	f000 fd81 	bl	8004424 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003922:	2000      	movs	r0, #0
 8003924:	f000 f9d6 	bl	8003cd4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003928:	2020      	movs	r0, #32
 800392a:	f7ff ffc1 	bl	80038b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800392e:	2000      	movs	r0, #0
 8003930:	f7ff ffbe 	bl	80038b0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003934:	20b0      	movs	r0, #176	@ 0xb0
 8003936:	f7ff ffbb 	bl	80038b0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800393a:	20c8      	movs	r0, #200	@ 0xc8
 800393c:	f7ff ffb8 	bl	80038b0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003940:	2000      	movs	r0, #0
 8003942:	f7ff ffb5 	bl	80038b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003946:	2010      	movs	r0, #16
 8003948:	f7ff ffb2 	bl	80038b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800394c:	2040      	movs	r0, #64	@ 0x40
 800394e:	f7ff ffaf 	bl	80038b0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003952:	20ff      	movs	r0, #255	@ 0xff
 8003954:	f000 f9aa 	bl	8003cac <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003958:	20a1      	movs	r0, #161	@ 0xa1
 800395a:	f7ff ffa9 	bl	80038b0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800395e:	20a6      	movs	r0, #166	@ 0xa6
 8003960:	f7ff ffa6 	bl	80038b0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003964:	20a8      	movs	r0, #168	@ 0xa8
 8003966:	f7ff ffa3 	bl	80038b0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 800396a:	201f      	movs	r0, #31
 800396c:	f7ff ffa0 	bl	80038b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003970:	20a4      	movs	r0, #164	@ 0xa4
 8003972:	f7ff ff9d 	bl	80038b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003976:	20d3      	movs	r0, #211	@ 0xd3
 8003978:	f7ff ff9a 	bl	80038b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800397c:	2000      	movs	r0, #0
 800397e:	f7ff ff97 	bl	80038b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003982:	20d5      	movs	r0, #213	@ 0xd5
 8003984:	f7ff ff94 	bl	80038b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003988:	20f0      	movs	r0, #240	@ 0xf0
 800398a:	f7ff ff91 	bl	80038b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800398e:	20d9      	movs	r0, #217	@ 0xd9
 8003990:	f7ff ff8e 	bl	80038b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003994:	2022      	movs	r0, #34	@ 0x22
 8003996:	f7ff ff8b 	bl	80038b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800399a:	20da      	movs	r0, #218	@ 0xda
 800399c:	f7ff ff88 	bl	80038b0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 80039a0:	2002      	movs	r0, #2
 80039a2:	f7ff ff85 	bl	80038b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80039a6:	20db      	movs	r0, #219	@ 0xdb
 80039a8:	f7ff ff82 	bl	80038b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80039ac:	2020      	movs	r0, #32
 80039ae:	f7ff ff7f 	bl	80038b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80039b2:	208d      	movs	r0, #141	@ 0x8d
 80039b4:	f7ff ff7c 	bl	80038b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80039b8:	2014      	movs	r0, #20
 80039ba:	f7ff ff79 	bl	80038b0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80039be:	2001      	movs	r0, #1
 80039c0:	f000 f988 	bl	8003cd4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80039c4:	2000      	movs	r0, #0
 80039c6:	f000 f80f 	bl	80039e8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80039ca:	f000 f825 	bl	8003a18 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80039ce:	4b05      	ldr	r3, [pc, #20]	@ (80039e4 <ssd1306_Init+0xd0>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80039d4:	4b03      	ldr	r3, [pc, #12]	@ (80039e4 <ssd1306_Init+0xd0>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80039da:	4b02      	ldr	r3, [pc, #8]	@ (80039e4 <ssd1306_Init+0xd0>)
 80039dc:	2201      	movs	r2, #1
 80039de:	711a      	strb	r2, [r3, #4]
}
 80039e0:	bf00      	nop
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	200005a4 	.word	0x200005a4

080039e8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80039f2:	79fb      	ldrb	r3, [r7, #7]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <ssd1306_Fill+0x14>
 80039f8:	2300      	movs	r3, #0
 80039fa:	e000      	b.n	80039fe <ssd1306_Fill+0x16>
 80039fc:	23ff      	movs	r3, #255	@ 0xff
 80039fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a02:	4619      	mov	r1, r3
 8003a04:	4803      	ldr	r0, [pc, #12]	@ (8003a14 <ssd1306_Fill+0x2c>)
 8003a06:	f00a f924 	bl	800dc52 <memset>
}
 8003a0a:	bf00      	nop
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	200003a4 	.word	0x200003a4

08003a18 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003a1e:	2300      	movs	r3, #0
 8003a20:	71fb      	strb	r3, [r7, #7]
 8003a22:	e016      	b.n	8003a52 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003a24:	79fb      	ldrb	r3, [r7, #7]
 8003a26:	3b50      	subs	r3, #80	@ 0x50
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7ff ff40 	bl	80038b0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003a30:	2000      	movs	r0, #0
 8003a32:	f7ff ff3d 	bl	80038b0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003a36:	2010      	movs	r0, #16
 8003a38:	f7ff ff3a 	bl	80038b0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003a3c:	79fb      	ldrb	r3, [r7, #7]
 8003a3e:	01db      	lsls	r3, r3, #7
 8003a40:	4a08      	ldr	r2, [pc, #32]	@ (8003a64 <ssd1306_UpdateScreen+0x4c>)
 8003a42:	4413      	add	r3, r2
 8003a44:	2180      	movs	r1, #128	@ 0x80
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7ff ff4a 	bl	80038e0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003a4c:	79fb      	ldrb	r3, [r7, #7]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	71fb      	strb	r3, [r7, #7]
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	2b03      	cmp	r3, #3
 8003a56:	d9e5      	bls.n	8003a24 <ssd1306_UpdateScreen+0xc>
    }
}
 8003a58:	bf00      	nop
 8003a5a:	bf00      	nop
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	200003a4 	.word	0x200003a4

08003a68 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	71fb      	strb	r3, [r7, #7]
 8003a72:	460b      	mov	r3, r1
 8003a74:	71bb      	strb	r3, [r7, #6]
 8003a76:	4613      	mov	r3, r2
 8003a78:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	db3d      	blt.n	8003afe <ssd1306_DrawPixel+0x96>
 8003a82:	79bb      	ldrb	r3, [r7, #6]
 8003a84:	2b1f      	cmp	r3, #31
 8003a86:	d83a      	bhi.n	8003afe <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003a88:	797b      	ldrb	r3, [r7, #5]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d11a      	bne.n	8003ac4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003a8e:	79fa      	ldrb	r2, [r7, #7]
 8003a90:	79bb      	ldrb	r3, [r7, #6]
 8003a92:	08db      	lsrs	r3, r3, #3
 8003a94:	b2d8      	uxtb	r0, r3
 8003a96:	4603      	mov	r3, r0
 8003a98:	01db      	lsls	r3, r3, #7
 8003a9a:	4413      	add	r3, r2
 8003a9c:	4a1b      	ldr	r2, [pc, #108]	@ (8003b0c <ssd1306_DrawPixel+0xa4>)
 8003a9e:	5cd3      	ldrb	r3, [r2, r3]
 8003aa0:	b25a      	sxtb	r2, r3
 8003aa2:	79bb      	ldrb	r3, [r7, #6]
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8003aae:	b25b      	sxtb	r3, r3
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	b259      	sxtb	r1, r3
 8003ab4:	79fa      	ldrb	r2, [r7, #7]
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	01db      	lsls	r3, r3, #7
 8003aba:	4413      	add	r3, r2
 8003abc:	b2c9      	uxtb	r1, r1
 8003abe:	4a13      	ldr	r2, [pc, #76]	@ (8003b0c <ssd1306_DrawPixel+0xa4>)
 8003ac0:	54d1      	strb	r1, [r2, r3]
 8003ac2:	e01d      	b.n	8003b00 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003ac4:	79fa      	ldrb	r2, [r7, #7]
 8003ac6:	79bb      	ldrb	r3, [r7, #6]
 8003ac8:	08db      	lsrs	r3, r3, #3
 8003aca:	b2d8      	uxtb	r0, r3
 8003acc:	4603      	mov	r3, r0
 8003ace:	01db      	lsls	r3, r3, #7
 8003ad0:	4413      	add	r3, r2
 8003ad2:	4a0e      	ldr	r2, [pc, #56]	@ (8003b0c <ssd1306_DrawPixel+0xa4>)
 8003ad4:	5cd3      	ldrb	r3, [r2, r3]
 8003ad6:	b25a      	sxtb	r2, r3
 8003ad8:	79bb      	ldrb	r3, [r7, #6]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	2101      	movs	r1, #1
 8003ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae4:	b25b      	sxtb	r3, r3
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	b25b      	sxtb	r3, r3
 8003aea:	4013      	ands	r3, r2
 8003aec:	b259      	sxtb	r1, r3
 8003aee:	79fa      	ldrb	r2, [r7, #7]
 8003af0:	4603      	mov	r3, r0
 8003af2:	01db      	lsls	r3, r3, #7
 8003af4:	4413      	add	r3, r2
 8003af6:	b2c9      	uxtb	r1, r1
 8003af8:	4a04      	ldr	r2, [pc, #16]	@ (8003b0c <ssd1306_DrawPixel+0xa4>)
 8003afa:	54d1      	strb	r1, [r2, r3]
 8003afc:	e000      	b.n	8003b00 <ssd1306_DrawPixel+0x98>
        return;
 8003afe:	bf00      	nop
    }
}
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	200003a4 	.word	0x200003a4

08003b10 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8003b10:	b590      	push	{r4, r7, lr}
 8003b12:	b089      	sub	sp, #36	@ 0x24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4604      	mov	r4, r0
 8003b18:	4638      	mov	r0, r7
 8003b1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003b1e:	4623      	mov	r3, r4
 8003b20:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003b22:	7bfb      	ldrb	r3, [r7, #15]
 8003b24:	2b1f      	cmp	r3, #31
 8003b26:	d902      	bls.n	8003b2e <ssd1306_WriteChar+0x1e>
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
 8003b2a:	2b7e      	cmp	r3, #126	@ 0x7e
 8003b2c:	d901      	bls.n	8003b32 <ssd1306_WriteChar+0x22>
        return 0;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	e077      	b.n	8003c22 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8003b32:	4b3e      	ldr	r3, [pc, #248]	@ (8003c2c <ssd1306_WriteChar+0x11c>)
 8003b34:	881b      	ldrh	r3, [r3, #0]
 8003b36:	461a      	mov	r2, r3
 8003b38:	783b      	ldrb	r3, [r7, #0]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	2b80      	cmp	r3, #128	@ 0x80
 8003b3e:	dc06      	bgt.n	8003b4e <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8003b40:	4b3a      	ldr	r3, [pc, #232]	@ (8003c2c <ssd1306_WriteChar+0x11c>)
 8003b42:	885b      	ldrh	r3, [r3, #2]
 8003b44:	461a      	mov	r2, r3
 8003b46:	787b      	ldrb	r3, [r7, #1]
 8003b48:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8003b4a:	2b20      	cmp	r3, #32
 8003b4c:	dd01      	ble.n	8003b52 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	e067      	b.n	8003c22 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8003b52:	2300      	movs	r3, #0
 8003b54:	61fb      	str	r3, [r7, #28]
 8003b56:	e04e      	b.n	8003bf6 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	3b20      	subs	r3, #32
 8003b5e:	7879      	ldrb	r1, [r7, #1]
 8003b60:	fb01 f303 	mul.w	r3, r1, r3
 8003b64:	4619      	mov	r1, r3
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	440b      	add	r3, r1
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	4413      	add	r3, r2
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8003b72:	2300      	movs	r3, #0
 8003b74:	61bb      	str	r3, [r7, #24]
 8003b76:	e036      	b.n	8003be6 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d013      	beq.n	8003bb0 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003b88:	4b28      	ldr	r3, [pc, #160]	@ (8003c2c <ssd1306_WriteChar+0x11c>)
 8003b8a:	881b      	ldrh	r3, [r3, #0]
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	4413      	add	r3, r2
 8003b94:	b2d8      	uxtb	r0, r3
 8003b96:	4b25      	ldr	r3, [pc, #148]	@ (8003c2c <ssd1306_WriteChar+0x11c>)
 8003b98:	885b      	ldrh	r3, [r3, #2]
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	4413      	add	r3, r2
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003ba8:	4619      	mov	r1, r3
 8003baa:	f7ff ff5d 	bl	8003a68 <ssd1306_DrawPixel>
 8003bae:	e017      	b.n	8003be0 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8003c2c <ssd1306_WriteChar+0x11c>)
 8003bb2:	881b      	ldrh	r3, [r3, #0]
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	4413      	add	r3, r2
 8003bbc:	b2d8      	uxtb	r0, r3
 8003bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8003c2c <ssd1306_WriteChar+0x11c>)
 8003bc0:	885b      	ldrh	r3, [r3, #2]
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	4413      	add	r3, r2
 8003bca:	b2d9      	uxtb	r1, r3
 8003bcc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	bf0c      	ite	eq
 8003bd4:	2301      	moveq	r3, #1
 8003bd6:	2300      	movne	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	461a      	mov	r2, r3
 8003bdc:	f7ff ff44 	bl	8003a68 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	3301      	adds	r3, #1
 8003be4:	61bb      	str	r3, [r7, #24]
 8003be6:	783b      	ldrb	r3, [r7, #0]
 8003be8:	461a      	mov	r2, r3
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d3c3      	bcc.n	8003b78 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	61fb      	str	r3, [r7, #28]
 8003bf6:	787b      	ldrb	r3, [r7, #1]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d3ab      	bcc.n	8003b58 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8003c00:	4b0a      	ldr	r3, [pc, #40]	@ (8003c2c <ssd1306_WriteChar+0x11c>)
 8003c02:	881b      	ldrh	r3, [r3, #0]
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	2a00      	cmp	r2, #0
 8003c08:	d005      	beq.n	8003c16 <ssd1306_WriteChar+0x106>
 8003c0a:	68b9      	ldr	r1, [r7, #8]
 8003c0c:	7bfa      	ldrb	r2, [r7, #15]
 8003c0e:	3a20      	subs	r2, #32
 8003c10:	440a      	add	r2, r1
 8003c12:	7812      	ldrb	r2, [r2, #0]
 8003c14:	e000      	b.n	8003c18 <ssd1306_WriteChar+0x108>
 8003c16:	783a      	ldrb	r2, [r7, #0]
 8003c18:	4413      	add	r3, r2
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	4b03      	ldr	r3, [pc, #12]	@ (8003c2c <ssd1306_WriteChar+0x11c>)
 8003c1e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3724      	adds	r7, #36	@ 0x24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd90      	pop	{r4, r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	200005a4 	.word	0x200005a4

08003c30 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af02      	add	r7, sp, #8
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	4638      	mov	r0, r7
 8003c3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8003c3e:	e013      	b.n	8003c68 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	7818      	ldrb	r0, [r3, #0]
 8003c44:	7e3b      	ldrb	r3, [r7, #24]
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	463b      	mov	r3, r7
 8003c4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c4c:	f7ff ff60 	bl	8003b10 <ssd1306_WriteChar>
 8003c50:	4603      	mov	r3, r0
 8003c52:	461a      	mov	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d002      	beq.n	8003c62 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	e008      	b.n	8003c74 <ssd1306_WriteString+0x44>
        }
        str++;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	3301      	adds	r3, #1
 8003c66:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1e7      	bne.n	8003c40 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	781b      	ldrb	r3, [r3, #0]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	460a      	mov	r2, r1
 8003c86:	71fb      	strb	r3, [r7, #7]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003c8c:	79fb      	ldrb	r3, [r7, #7]
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	4b05      	ldr	r3, [pc, #20]	@ (8003ca8 <ssd1306_SetCursor+0x2c>)
 8003c92:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003c94:	79bb      	ldrb	r3, [r7, #6]
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	4b03      	ldr	r3, [pc, #12]	@ (8003ca8 <ssd1306_SetCursor+0x2c>)
 8003c9a:	805a      	strh	r2, [r3, #2]
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	200005a4 	.word	0x200005a4

08003cac <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003cb6:	2381      	movs	r3, #129	@ 0x81
 8003cb8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff fdf7 	bl	80038b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003cc2:	79fb      	ldrb	r3, [r7, #7]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff fdf3 	bl	80038b0 <ssd1306_WriteCommand>
}
 8003cca:	bf00      	nop
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
	...

08003cd4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003cde:	79fb      	ldrb	r3, [r7, #7]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003ce4:	23af      	movs	r3, #175	@ 0xaf
 8003ce6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003ce8:	4b08      	ldr	r3, [pc, #32]	@ (8003d0c <ssd1306_SetDisplayOn+0x38>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	715a      	strb	r2, [r3, #5]
 8003cee:	e004      	b.n	8003cfa <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003cf0:	23ae      	movs	r3, #174	@ 0xae
 8003cf2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003cf4:	4b05      	ldr	r3, [pc, #20]	@ (8003d0c <ssd1306_SetDisplayOn+0x38>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff fdd7 	bl	80038b0 <ssd1306_WriteCommand>
}
 8003d02:	bf00      	nop
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	200005a4 	.word	0x200005a4

08003d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d16:	4b11      	ldr	r3, [pc, #68]	@ (8003d5c <HAL_MspInit+0x4c>)
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	4a10      	ldr	r2, [pc, #64]	@ (8003d5c <HAL_MspInit+0x4c>)
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	6193      	str	r3, [r2, #24]
 8003d22:	4b0e      	ldr	r3, [pc, #56]	@ (8003d5c <HAL_MspInit+0x4c>)
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	607b      	str	r3, [r7, #4]
 8003d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d5c <HAL_MspInit+0x4c>)
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	4a0a      	ldr	r2, [pc, #40]	@ (8003d5c <HAL_MspInit+0x4c>)
 8003d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d38:	61d3      	str	r3, [r2, #28]
 8003d3a:	4b08      	ldr	r3, [pc, #32]	@ (8003d5c <HAL_MspInit+0x4c>)
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d42:	603b      	str	r3, [r7, #0]
 8003d44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003d46:	2200      	movs	r2, #0
 8003d48:	210f      	movs	r1, #15
 8003d4a:	f06f 0001 	mvn.w	r0, #1
 8003d4e:	f001 fd77 	bl	8005840 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d52:	bf00      	nop
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40021000 	.word	0x40021000

08003d60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08c      	sub	sp, #48	@ 0x30
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8003d70:	4b2e      	ldr	r3, [pc, #184]	@ (8003e2c <HAL_InitTick+0xcc>)
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	4a2d      	ldr	r2, [pc, #180]	@ (8003e2c <HAL_InitTick+0xcc>)
 8003d76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d7a:	6193      	str	r3, [r2, #24]
 8003d7c:	4b2b      	ldr	r3, [pc, #172]	@ (8003e2c <HAL_InitTick+0xcc>)
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d84:	60bb      	str	r3, [r7, #8]
 8003d86:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d88:	f107 020c 	add.w	r2, r7, #12
 8003d8c:	f107 0310 	add.w	r3, r7, #16
 8003d90:	4611      	mov	r1, r2
 8003d92:	4618      	mov	r0, r3
 8003d94:	f004 fa84 	bl	80082a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003d98:	f004 fa60 	bl	800825c <HAL_RCC_GetPCLK2Freq>
 8003d9c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da0:	4a23      	ldr	r2, [pc, #140]	@ (8003e30 <HAL_InitTick+0xd0>)
 8003da2:	fba2 2303 	umull	r2, r3, r2, r3
 8003da6:	0c9b      	lsrs	r3, r3, #18
 8003da8:	3b01      	subs	r3, #1
 8003daa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8003dac:	4b21      	ldr	r3, [pc, #132]	@ (8003e34 <HAL_InitTick+0xd4>)
 8003dae:	4a22      	ldr	r2, [pc, #136]	@ (8003e38 <HAL_InitTick+0xd8>)
 8003db0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8003db2:	4b20      	ldr	r3, [pc, #128]	@ (8003e34 <HAL_InitTick+0xd4>)
 8003db4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003db8:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8003dba:	4a1e      	ldr	r2, [pc, #120]	@ (8003e34 <HAL_InitTick+0xd4>)
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbe:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8003dc0:	4b1c      	ldr	r3, [pc, #112]	@ (8003e34 <HAL_InitTick+0xd4>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8003e34 <HAL_InitTick+0xd4>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dcc:	4b19      	ldr	r3, [pc, #100]	@ (8003e34 <HAL_InitTick+0xd4>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 8003dd2:	4818      	ldr	r0, [pc, #96]	@ (8003e34 <HAL_InitTick+0xd4>)
 8003dd4:	f004 fcb4 	bl	8008740 <HAL_TIM_Base_Init>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003dde:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d11b      	bne.n	8003e1e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8003de6:	4813      	ldr	r0, [pc, #76]	@ (8003e34 <HAL_InitTick+0xd4>)
 8003de8:	f004 fd0c 	bl	8008804 <HAL_TIM_Base_Start_IT>
 8003dec:	4603      	mov	r3, r0
 8003dee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003df2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d111      	bne.n	8003e1e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003dfa:	201a      	movs	r0, #26
 8003dfc:	f001 fd3c 	bl	8005878 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b0f      	cmp	r3, #15
 8003e04:	d808      	bhi.n	8003e18 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 8003e06:	2200      	movs	r2, #0
 8003e08:	6879      	ldr	r1, [r7, #4]
 8003e0a:	201a      	movs	r0, #26
 8003e0c:	f001 fd18 	bl	8005840 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003e10:	4a0a      	ldr	r2, [pc, #40]	@ (8003e3c <HAL_InitTick+0xdc>)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6013      	str	r3, [r2, #0]
 8003e16:	e002      	b.n	8003e1e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003e1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3730      	adds	r7, #48	@ 0x30
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	431bde83 	.word	0x431bde83
 8003e34:	200005ac 	.word	0x200005ac
 8003e38:	40014800 	.word	0x40014800
 8003e3c:	20000018 	.word	0x20000018

08003e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003e44:	bf00      	nop
 8003e46:	e7fd      	b.n	8003e44 <NMI_Handler+0x4>

08003e48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e4c:	bf00      	nop
 8003e4e:	e7fd      	b.n	8003e4c <HardFault_Handler+0x4>

08003e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e54:	bf00      	nop
 8003e56:	e7fd      	b.n	8003e54 <MemManage_Handler+0x4>

08003e58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e5c:	bf00      	nop
 8003e5e:	e7fd      	b.n	8003e5c <BusFault_Handler+0x4>

08003e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e64:	bf00      	nop
 8003e66:	e7fd      	b.n	8003e64 <UsageFault_Handler+0x4>

08003e68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e6c:	bf00      	nop
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
	...

08003e78 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003e7c:	4802      	ldr	r0, [pc, #8]	@ (8003e88 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8003e7e:	f004 fe95 	bl	8008bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8003e82:	bf00      	nop
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	200005ac 	.word	0x200005ac

08003e8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  return 1;
 8003e90:	2301      	movs	r3, #1
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <_kill>:

int _kill(int pid, int sig)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003ea6:	f009 ff7d 	bl	800dda4 <__errno>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2216      	movs	r2, #22
 8003eae:	601a      	str	r2, [r3, #0]
  return -1;
 8003eb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3708      	adds	r7, #8
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <_exit>:

void _exit (int status)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003ec4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7ff ffe7 	bl	8003e9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003ece:	bf00      	nop
 8003ed0:	e7fd      	b.n	8003ece <_exit+0x12>

08003ed2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b086      	sub	sp, #24
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	60f8      	str	r0, [r7, #12]
 8003eda:	60b9      	str	r1, [r7, #8]
 8003edc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ede:	2300      	movs	r3, #0
 8003ee0:	617b      	str	r3, [r7, #20]
 8003ee2:	e00a      	b.n	8003efa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ee4:	f3af 8000 	nop.w
 8003ee8:	4601      	mov	r1, r0
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	60ba      	str	r2, [r7, #8]
 8003ef0:	b2ca      	uxtb	r2, r1
 8003ef2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	dbf0      	blt.n	8003ee4 <_read+0x12>
  }

  return len;
 8003f02:	687b      	ldr	r3, [r7, #4]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3718      	adds	r7, #24
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f18:	2300      	movs	r3, #0
 8003f1a:	617b      	str	r3, [r7, #20]
 8003f1c:	e009      	b.n	8003f32 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	60ba      	str	r2, [r7, #8]
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	617b      	str	r3, [r7, #20]
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	dbf1      	blt.n	8003f1e <_write+0x12>
  }
  return len;
 8003f3a:	687b      	ldr	r3, [r7, #4]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <_close>:

int _close(int file)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003f4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f6c:	605a      	str	r2, [r3, #4]
  return 0;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <_isatty>:

int _isatty(int file)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f84:	2301      	movs	r3, #1
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b085      	sub	sp, #20
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	60f8      	str	r0, [r7, #12]
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fb4:	4a14      	ldr	r2, [pc, #80]	@ (8004008 <_sbrk+0x5c>)
 8003fb6:	4b15      	ldr	r3, [pc, #84]	@ (800400c <_sbrk+0x60>)
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fc0:	4b13      	ldr	r3, [pc, #76]	@ (8004010 <_sbrk+0x64>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d102      	bne.n	8003fce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fc8:	4b11      	ldr	r3, [pc, #68]	@ (8004010 <_sbrk+0x64>)
 8003fca:	4a12      	ldr	r2, [pc, #72]	@ (8004014 <_sbrk+0x68>)
 8003fcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fce:	4b10      	ldr	r3, [pc, #64]	@ (8004010 <_sbrk+0x64>)
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d207      	bcs.n	8003fec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003fdc:	f009 fee2 	bl	800dda4 <__errno>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	220c      	movs	r2, #12
 8003fe4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003fe6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003fea:	e009      	b.n	8004000 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fec:	4b08      	ldr	r3, [pc, #32]	@ (8004010 <_sbrk+0x64>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ff2:	4b07      	ldr	r3, [pc, #28]	@ (8004010 <_sbrk+0x64>)
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	4a05      	ldr	r2, [pc, #20]	@ (8004010 <_sbrk+0x64>)
 8003ffc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	20010000 	.word	0x20010000
 800400c:	00000400 	.word	0x00000400
 8004010:	200005f8 	.word	0x200005f8
 8004014:	20003610 	.word	0x20003610

08004018 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800401c:	4b06      	ldr	r3, [pc, #24]	@ (8004038 <SystemInit+0x20>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004022:	4a05      	ldr	r2, [pc, #20]	@ (8004038 <SystemInit+0x20>)
 8004024:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004028:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800402c:	bf00      	nop
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	e000ed00 	.word	0xe000ed00

0800403c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b08a      	sub	sp, #40	@ 0x28
 8004040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004042:	f107 031c 	add.w	r3, r7, #28
 8004046:	2200      	movs	r2, #0
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	605a      	str	r2, [r3, #4]
 800404c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800404e:	463b      	mov	r3, r7
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	605a      	str	r2, [r3, #4]
 8004056:	609a      	str	r2, [r3, #8]
 8004058:	60da      	str	r2, [r3, #12]
 800405a:	611a      	str	r2, [r3, #16]
 800405c:	615a      	str	r2, [r3, #20]
 800405e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004060:	4b21      	ldr	r3, [pc, #132]	@ (80040e8 <MX_TIM3_Init+0xac>)
 8004062:	4a22      	ldr	r2, [pc, #136]	@ (80040ec <MX_TIM3_Init+0xb0>)
 8004064:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8004066:	4b20      	ldr	r3, [pc, #128]	@ (80040e8 <MX_TIM3_Init+0xac>)
 8004068:	2247      	movs	r2, #71	@ 0x47
 800406a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800406c:	4b1e      	ldr	r3, [pc, #120]	@ (80040e8 <MX_TIM3_Init+0xac>)
 800406e:	2200      	movs	r2, #0
 8004070:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8004072:	4b1d      	ldr	r3, [pc, #116]	@ (80040e8 <MX_TIM3_Init+0xac>)
 8004074:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004078:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800407a:	4b1b      	ldr	r3, [pc, #108]	@ (80040e8 <MX_TIM3_Init+0xac>)
 800407c:	2200      	movs	r2, #0
 800407e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004080:	4b19      	ldr	r3, [pc, #100]	@ (80040e8 <MX_TIM3_Init+0xac>)
 8004082:	2280      	movs	r2, #128	@ 0x80
 8004084:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004086:	4818      	ldr	r0, [pc, #96]	@ (80040e8 <MX_TIM3_Init+0xac>)
 8004088:	f004 fc2c 	bl	80088e4 <HAL_TIM_PWM_Init>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8004092:	f7ff fbff 	bl	8003894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004096:	2300      	movs	r3, #0
 8004098:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800409a:	2300      	movs	r3, #0
 800409c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800409e:	f107 031c 	add.w	r3, r7, #28
 80040a2:	4619      	mov	r1, r3
 80040a4:	4810      	ldr	r0, [pc, #64]	@ (80040e8 <MX_TIM3_Init+0xac>)
 80040a6:	f005 fb95 	bl	80097d4 <HAL_TIMEx_MasterConfigSynchronization>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80040b0:	f7ff fbf0 	bl	8003894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040b4:	2360      	movs	r3, #96	@ 0x60
 80040b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040bc:	2300      	movs	r3, #0
 80040be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040c0:	2300      	movs	r3, #0
 80040c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80040c4:	463b      	mov	r3, r7
 80040c6:	2200      	movs	r2, #0
 80040c8:	4619      	mov	r1, r3
 80040ca:	4807      	ldr	r0, [pc, #28]	@ (80040e8 <MX_TIM3_Init+0xac>)
 80040cc:	f004 fe70 	bl	8008db0 <HAL_TIM_PWM_ConfigChannel>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80040d6:	f7ff fbdd 	bl	8003894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80040da:	4803      	ldr	r0, [pc, #12]	@ (80040e8 <MX_TIM3_Init+0xac>)
 80040dc:	f000 f828 	bl	8004130 <HAL_TIM_MspPostInit>

}
 80040e0:	bf00      	nop
 80040e2:	3728      	adds	r7, #40	@ 0x28
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	200005fc 	.word	0x200005fc
 80040ec:	40000400 	.word	0x40000400

080040f0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a0a      	ldr	r2, [pc, #40]	@ (8004128 <HAL_TIM_PWM_MspInit+0x38>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d10b      	bne.n	800411a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004102:	4b0a      	ldr	r3, [pc, #40]	@ (800412c <HAL_TIM_PWM_MspInit+0x3c>)
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	4a09      	ldr	r2, [pc, #36]	@ (800412c <HAL_TIM_PWM_MspInit+0x3c>)
 8004108:	f043 0302 	orr.w	r3, r3, #2
 800410c:	61d3      	str	r3, [r2, #28]
 800410e:	4b07      	ldr	r3, [pc, #28]	@ (800412c <HAL_TIM_PWM_MspInit+0x3c>)
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800411a:	bf00      	nop
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	40000400 	.word	0x40000400
 800412c:	40021000 	.word	0x40021000

08004130 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b088      	sub	sp, #32
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004138:	f107 030c 	add.w	r3, r7, #12
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	605a      	str	r2, [r3, #4]
 8004142:	609a      	str	r2, [r3, #8]
 8004144:	60da      	str	r2, [r3, #12]
 8004146:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a11      	ldr	r2, [pc, #68]	@ (8004194 <HAL_TIM_MspPostInit+0x64>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d11c      	bne.n	800418c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004152:	4b11      	ldr	r3, [pc, #68]	@ (8004198 <HAL_TIM_MspPostInit+0x68>)
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	4a10      	ldr	r2, [pc, #64]	@ (8004198 <HAL_TIM_MspPostInit+0x68>)
 8004158:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800415c:	6153      	str	r3, [r2, #20]
 800415e:	4b0e      	ldr	r3, [pc, #56]	@ (8004198 <HAL_TIM_MspPostInit+0x68>)
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004166:	60bb      	str	r3, [r7, #8]
 8004168:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800416a:	2340      	movs	r3, #64	@ 0x40
 800416c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800416e:	2302      	movs	r3, #2
 8004170:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004172:	2300      	movs	r3, #0
 8004174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004176:	2300      	movs	r3, #0
 8004178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800417a:	2302      	movs	r3, #2
 800417c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800417e:	f107 030c 	add.w	r3, r7, #12
 8004182:	4619      	mov	r1, r3
 8004184:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004188:	f001 fb84 	bl	8005894 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800418c:	bf00      	nop
 800418e:	3720      	adds	r7, #32
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40000400 	.word	0x40000400
 8004198:	40021000 	.word	0x40021000

0800419c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80041a0:	4b14      	ldr	r3, [pc, #80]	@ (80041f4 <MX_USART2_UART_Init+0x58>)
 80041a2:	4a15      	ldr	r2, [pc, #84]	@ (80041f8 <MX_USART2_UART_Init+0x5c>)
 80041a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80041a6:	4b13      	ldr	r3, [pc, #76]	@ (80041f4 <MX_USART2_UART_Init+0x58>)
 80041a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80041ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80041ae:	4b11      	ldr	r3, [pc, #68]	@ (80041f4 <MX_USART2_UART_Init+0x58>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80041b4:	4b0f      	ldr	r3, [pc, #60]	@ (80041f4 <MX_USART2_UART_Init+0x58>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80041ba:	4b0e      	ldr	r3, [pc, #56]	@ (80041f4 <MX_USART2_UART_Init+0x58>)
 80041bc:	2200      	movs	r2, #0
 80041be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80041c0:	4b0c      	ldr	r3, [pc, #48]	@ (80041f4 <MX_USART2_UART_Init+0x58>)
 80041c2:	220c      	movs	r2, #12
 80041c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041c6:	4b0b      	ldr	r3, [pc, #44]	@ (80041f4 <MX_USART2_UART_Init+0x58>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80041cc:	4b09      	ldr	r3, [pc, #36]	@ (80041f4 <MX_USART2_UART_Init+0x58>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041d2:	4b08      	ldr	r3, [pc, #32]	@ (80041f4 <MX_USART2_UART_Init+0x58>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80041d8:	4b06      	ldr	r3, [pc, #24]	@ (80041f4 <MX_USART2_UART_Init+0x58>)
 80041da:	2200      	movs	r2, #0
 80041dc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80041de:	4805      	ldr	r0, [pc, #20]	@ (80041f4 <MX_USART2_UART_Init+0x58>)
 80041e0:	f005 fba2 	bl	8009928 <HAL_UART_Init>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80041ea:	f7ff fb53 	bl	8003894 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80041ee:	bf00      	nop
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20000648 	.word	0x20000648
 80041f8:	40004400 	.word	0x40004400

080041fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b08a      	sub	sp, #40	@ 0x28
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004204:	f107 0314 	add.w	r3, r7, #20
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	605a      	str	r2, [r3, #4]
 800420e:	609a      	str	r2, [r3, #8]
 8004210:	60da      	str	r2, [r3, #12]
 8004212:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a17      	ldr	r2, [pc, #92]	@ (8004278 <HAL_UART_MspInit+0x7c>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d128      	bne.n	8004270 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800421e:	4b17      	ldr	r3, [pc, #92]	@ (800427c <HAL_UART_MspInit+0x80>)
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	4a16      	ldr	r2, [pc, #88]	@ (800427c <HAL_UART_MspInit+0x80>)
 8004224:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004228:	61d3      	str	r3, [r2, #28]
 800422a:	4b14      	ldr	r3, [pc, #80]	@ (800427c <HAL_UART_MspInit+0x80>)
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004232:	613b      	str	r3, [r7, #16]
 8004234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004236:	4b11      	ldr	r3, [pc, #68]	@ (800427c <HAL_UART_MspInit+0x80>)
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	4a10      	ldr	r2, [pc, #64]	@ (800427c <HAL_UART_MspInit+0x80>)
 800423c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004240:	6153      	str	r3, [r2, #20]
 8004242:	4b0e      	ldr	r3, [pc, #56]	@ (800427c <HAL_UART_MspInit+0x80>)
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800424e:	230c      	movs	r3, #12
 8004250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004252:	2302      	movs	r3, #2
 8004254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004256:	2300      	movs	r3, #0
 8004258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800425a:	2300      	movs	r3, #0
 800425c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800425e:	2307      	movs	r3, #7
 8004260:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004262:	f107 0314 	add.w	r3, r7, #20
 8004266:	4619      	mov	r1, r3
 8004268:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800426c:	f001 fb12 	bl	8005894 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004270:	bf00      	nop
 8004272:	3728      	adds	r7, #40	@ 0x28
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40004400 	.word	0x40004400
 800427c:	40021000 	.word	0x40021000

08004280 <Float_transform>:
 *
 */
/*============================Пример работы с библиотекой===================================*/

/*--------------------------------Разбитие float с округлением------------------------------*/
void Float_transform(float value, uint8_t width, uint8_t *sign_number, int *integer_number, uint32_t *fractional_number) {
 8004280:	b480      	push	{r7}
 8004282:	b08b      	sub	sp, #44	@ 0x2c
 8004284:	af00      	add	r7, sp, #0
 8004286:	ed87 0a05 	vstr	s0, [r7, #20]
 800428a:	60f9      	str	r1, [r7, #12]
 800428c:	60ba      	str	r2, [r7, #8]
 800428e:	607b      	str	r3, [r7, #4]
 8004290:	4603      	mov	r3, r0
 8004292:	74fb      	strb	r3, [r7, #19]
	/// \param float value - число float, которое хотим разбить
	/// \param uint8_t width - сколько знаков после запятой хотим выводить
	/// \param uint8_t *sign_number - знак числа(положительное или отрицательное)
	/// \param int *integer_number - глобальная переменная для вещественной части
	/// \param uint32_t *fractional_number - глобальная переменная для дробной части
	*sign_number = 0;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	701a      	strb	r2, [r3, #0]
	float rounding = 0.5f;
 800429a:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 800429e:	61fb      	str	r3, [r7, #28]
	uint32_t rounding_2 = 1;
 80042a0:	2301      	movs	r3, #1
 80042a2:	627b      	str	r3, [r7, #36]	@ 0x24
	if (*((uint32_t*) &value) & 0x80000000) {
 80042a4:	f107 0314 	add.w	r3, r7, #20
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	da0a      	bge.n	80042c4 <Float_transform+0x44>
		*((uint32_t*) &value) &= 0x7FFFFFFF;
 80042ae:	f107 0314 	add.w	r3, r7, #20
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	f107 0314 	add.w	r3, r7, #20
 80042b8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80042bc:	601a      	str	r2, [r3, #0]
		*sign_number = 1;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2201      	movs	r2, #1
 80042c2:	701a      	strb	r2, [r3, #0]
	}
	for (uint8_t i = 0; i < width; i++) {
 80042c4:	2300      	movs	r3, #0
 80042c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ca:	e00a      	b.n	80042e2 <Float_transform+0x62>
		rounding_2 = rounding_2 * 10;
 80042cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ce:	4613      	mov	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	627b      	str	r3, [r7, #36]	@ 0x24
	for (uint8_t i = 0; i < width; i++) {
 80042d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80042dc:	3301      	adds	r3, #1
 80042de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042e2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80042e6:	7cfb      	ldrb	r3, [r7, #19]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d3ef      	bcc.n	80042cc <Float_transform+0x4c>
	}
	rounding = rounding / rounding_2;
 80042ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ee:	ee07 3a90 	vmov	s15, r3
 80042f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80042fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042fe:	edc7 7a07 	vstr	s15, [r7, #28]
	*integer_number = (int) ((float) value + rounding);
 8004302:	ed97 7a05 	vldr	s14, [r7, #20]
 8004306:	edd7 7a07 	vldr	s15, [r7, #28]
 800430a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800430e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004312:	ee17 2a90 	vmov	r2, s15
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	601a      	str	r2, [r3, #0]
	*fractional_number = (((float) value + rounding) * rounding_2) - (*integer_number * rounding_2);
 800431a:	ed97 7a05 	vldr	s14, [r7, #20]
 800431e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004322:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004328:	ee07 3a90 	vmov	s15, r3
 800432c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004330:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	461a      	mov	r2, r3
 800433a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433c:	fb02 f303 	mul.w	r3, r2, r3
 8004340:	ee07 3a90 	vmov	s15, r3
 8004344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004348:	ee77 7a67 	vsub.f32	s15, s14, s15
 800434c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004350:	ee17 2a90 	vmov	r2, s15
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	601a      	str	r2, [r3, #0]

}
 8004358:	bf00      	nop
 800435a:	372c      	adds	r7, #44	@ 0x2c
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004364:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800439c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004368:	f7ff fe56 	bl	8004018 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800436c:	480c      	ldr	r0, [pc, #48]	@ (80043a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800436e:	490d      	ldr	r1, [pc, #52]	@ (80043a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004370:	4a0d      	ldr	r2, [pc, #52]	@ (80043a8 <LoopForever+0xe>)
  movs r3, #0
 8004372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004374:	e002      	b.n	800437c <LoopCopyDataInit>

08004376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800437a:	3304      	adds	r3, #4

0800437c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800437c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800437e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004380:	d3f9      	bcc.n	8004376 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004382:	4a0a      	ldr	r2, [pc, #40]	@ (80043ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8004384:	4c0a      	ldr	r4, [pc, #40]	@ (80043b0 <LoopForever+0x16>)
  movs r3, #0
 8004386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004388:	e001      	b.n	800438e <LoopFillZerobss>

0800438a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800438a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800438c:	3204      	adds	r2, #4

0800438e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800438e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004390:	d3fb      	bcc.n	800438a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004392:	f009 fd0d 	bl	800ddb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004396:	f7ff f9d5 	bl	8003744 <main>

0800439a <LoopForever>:

LoopForever:
    b LoopForever
 800439a:	e7fe      	b.n	800439a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800439c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80043a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043a4:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80043a8:	08013f70 	.word	0x08013f70
  ldr r2, =_sbss
 80043ac:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80043b0:	2000360c 	.word	0x2000360c

080043b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80043b4:	e7fe      	b.n	80043b4 <ADC1_2_IRQHandler>
	...

080043b8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043bc:	4b08      	ldr	r3, [pc, #32]	@ (80043e0 <HAL_Init+0x28>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a07      	ldr	r2, [pc, #28]	@ (80043e0 <HAL_Init+0x28>)
 80043c2:	f043 0310 	orr.w	r3, r3, #16
 80043c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043c8:	2003      	movs	r0, #3
 80043ca:	f001 fa2e 	bl	800582a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043ce:	200f      	movs	r0, #15
 80043d0:	f7ff fcc6 	bl	8003d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043d4:	f7ff fc9c 	bl	8003d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40022000 	.word	0x40022000

080043e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043e8:	4b06      	ldr	r3, [pc, #24]	@ (8004404 <HAL_IncTick+0x20>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	461a      	mov	r2, r3
 80043ee:	4b06      	ldr	r3, [pc, #24]	@ (8004408 <HAL_IncTick+0x24>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4413      	add	r3, r2
 80043f4:	4a04      	ldr	r2, [pc, #16]	@ (8004408 <HAL_IncTick+0x24>)
 80043f6:	6013      	str	r3, [r2, #0]
}
 80043f8:	bf00      	nop
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	2000001c 	.word	0x2000001c
 8004408:	200006dc 	.word	0x200006dc

0800440c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  return uwTick;  
 8004410:	4b03      	ldr	r3, [pc, #12]	@ (8004420 <HAL_GetTick+0x14>)
 8004412:	681b      	ldr	r3, [r3, #0]
}
 8004414:	4618      	mov	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	200006dc 	.word	0x200006dc

08004424 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800442c:	f7ff ffee 	bl	800440c <HAL_GetTick>
 8004430:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800443c:	d005      	beq.n	800444a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800443e:	4b0a      	ldr	r3, [pc, #40]	@ (8004468 <HAL_Delay+0x44>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	461a      	mov	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4413      	add	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800444a:	bf00      	nop
 800444c:	f7ff ffde 	bl	800440c <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	429a      	cmp	r2, r3
 800445a:	d8f7      	bhi.n	800444c <HAL_Delay+0x28>
  {
  }
}
 800445c:	bf00      	nop
 800445e:	bf00      	nop
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	2000001c 	.word	0x2000001c

0800446c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b09a      	sub	sp, #104	@ 0x68
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800447a:	2300      	movs	r3, #0
 800447c:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 800447e:	2300      	movs	r3, #0
 8004480:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d101      	bne.n	800448c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e1e3      	b.n	8004854 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004496:	f003 0310 	and.w	r3, r3, #16
 800449a:	2b00      	cmp	r3, #0
 800449c:	d176      	bne.n	800458c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d152      	bne.n	800454c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7fd fd73 	bl	8001fac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d13b      	bne.n	800454c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 ffdf 	bl	8005498 <ADC_Disable>
 80044da:	4603      	mov	r3, r0
 80044dc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e4:	f003 0310 	and.w	r3, r3, #16
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d12f      	bne.n	800454c <HAL_ADC_Init+0xe0>
 80044ec:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d12b      	bne.n	800454c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80044fc:	f023 0302 	bic.w	r3, r3, #2
 8004500:	f043 0202 	orr.w	r2, r3, #2
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004516:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004526:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004528:	4b92      	ldr	r3, [pc, #584]	@ (8004774 <HAL_ADC_Init+0x308>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a92      	ldr	r2, [pc, #584]	@ (8004778 <HAL_ADC_Init+0x30c>)
 800452e:	fba2 2303 	umull	r2, r3, r2, r3
 8004532:	0c9a      	lsrs	r2, r3, #18
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800453e:	e002      	b.n	8004546 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	3b01      	subs	r3, #1
 8004544:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1f9      	bne.n	8004540 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d007      	beq.n	800456a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004564:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004568:	d110      	bne.n	800458c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456e:	f023 0312 	bic.w	r3, r3, #18
 8004572:	f043 0210 	orr.w	r2, r3, #16
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800457e:	f043 0201 	orr.w	r2, r3, #1
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004590:	f003 0310 	and.w	r3, r3, #16
 8004594:	2b00      	cmp	r3, #0
 8004596:	f040 8150 	bne.w	800483a <HAL_ADC_Init+0x3ce>
 800459a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f040 814b 	bne.w	800483a <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f040 8143 	bne.w	800483a <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80045bc:	f043 0202 	orr.w	r2, r3, #2
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045cc:	d004      	beq.n	80045d8 <HAL_ADC_Init+0x16c>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a6a      	ldr	r2, [pc, #424]	@ (800477c <HAL_ADC_Init+0x310>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d101      	bne.n	80045dc <HAL_ADC_Init+0x170>
 80045d8:	4b69      	ldr	r3, [pc, #420]	@ (8004780 <HAL_ADC_Init+0x314>)
 80045da:	e000      	b.n	80045de <HAL_ADC_Init+0x172>
 80045dc:	4b69      	ldr	r3, [pc, #420]	@ (8004784 <HAL_ADC_Init+0x318>)
 80045de:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045e8:	d102      	bne.n	80045f0 <HAL_ADC_Init+0x184>
 80045ea:	4b64      	ldr	r3, [pc, #400]	@ (800477c <HAL_ADC_Init+0x310>)
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	e01a      	b.n	8004626 <HAL_ADC_Init+0x1ba>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a61      	ldr	r2, [pc, #388]	@ (800477c <HAL_ADC_Init+0x310>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d103      	bne.n	8004602 <HAL_ADC_Init+0x196>
 80045fa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	e011      	b.n	8004626 <HAL_ADC_Init+0x1ba>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a60      	ldr	r2, [pc, #384]	@ (8004788 <HAL_ADC_Init+0x31c>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d102      	bne.n	8004612 <HAL_ADC_Init+0x1a6>
 800460c:	4b5f      	ldr	r3, [pc, #380]	@ (800478c <HAL_ADC_Init+0x320>)
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	e009      	b.n	8004626 <HAL_ADC_Init+0x1ba>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a5d      	ldr	r2, [pc, #372]	@ (800478c <HAL_ADC_Init+0x320>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d102      	bne.n	8004622 <HAL_ADC_Init+0x1b6>
 800461c:	4b5a      	ldr	r3, [pc, #360]	@ (8004788 <HAL_ADC_Init+0x31c>)
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	e001      	b.n	8004626 <HAL_ADC_Init+0x1ba>
 8004622:	2300      	movs	r3, #0
 8004624:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 0303 	and.w	r3, r3, #3
 8004630:	2b01      	cmp	r3, #1
 8004632:	d108      	bne.n	8004646 <HAL_ADC_Init+0x1da>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <HAL_ADC_Init+0x1da>
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <HAL_ADC_Init+0x1dc>
 8004646:	2300      	movs	r3, #0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d11c      	bne.n	8004686 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800464c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800464e:	2b00      	cmp	r3, #0
 8004650:	d010      	beq.n	8004674 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	2b01      	cmp	r3, #1
 800465c:	d107      	bne.n	800466e <HAL_ADC_Init+0x202>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b01      	cmp	r3, #1
 8004668:	d101      	bne.n	800466e <HAL_ADC_Init+0x202>
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <HAL_ADC_Init+0x204>
 800466e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004670:	2b00      	cmp	r3, #0
 8004672:	d108      	bne.n	8004686 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8004674:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	431a      	orrs	r2, r3
 8004682:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004684:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	7e5b      	ldrb	r3, [r3, #25]
 800468a:	035b      	lsls	r3, r3, #13
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004690:	2a01      	cmp	r2, #1
 8004692:	d002      	beq.n	800469a <HAL_ADC_Init+0x22e>
 8004694:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004698:	e000      	b.n	800469c <HAL_ADC_Init+0x230>
 800469a:	2200      	movs	r2, #0
 800469c:	431a      	orrs	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80046ac:	4313      	orrs	r3, r2
 80046ae:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d11b      	bne.n	80046f2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	7e5b      	ldrb	r3, [r3, #25]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d109      	bne.n	80046d6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c6:	3b01      	subs	r3, #1
 80046c8:	045a      	lsls	r2, r3, #17
 80046ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80046d4:	e00d      	b.n	80046f2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046da:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80046de:	f043 0220 	orr.w	r2, r3, #32
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ea:	f043 0201 	orr.w	r2, r3, #1
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d054      	beq.n	80047a4 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a22      	ldr	r2, [pc, #136]	@ (8004788 <HAL_ADC_Init+0x31c>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d004      	beq.n	800470e <HAL_ADC_Init+0x2a2>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a20      	ldr	r2, [pc, #128]	@ (800478c <HAL_ADC_Init+0x320>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d140      	bne.n	8004790 <HAL_ADC_Init+0x324>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004712:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8004716:	d02a      	beq.n	800476e <HAL_ADC_Init+0x302>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800471c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004720:	d022      	beq.n	8004768 <HAL_ADC_Init+0x2fc>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004726:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 800472a:	d01a      	beq.n	8004762 <HAL_ADC_Init+0x2f6>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004730:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8004734:	d012      	beq.n	800475c <HAL_ADC_Init+0x2f0>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473a:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 800473e:	d00a      	beq.n	8004756 <HAL_ADC_Init+0x2ea>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004744:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8004748:	d002      	beq.n	8004750 <HAL_ADC_Init+0x2e4>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800474e:	e023      	b.n	8004798 <HAL_ADC_Init+0x32c>
 8004750:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8004754:	e020      	b.n	8004798 <HAL_ADC_Init+0x32c>
 8004756:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800475a:	e01d      	b.n	8004798 <HAL_ADC_Init+0x32c>
 800475c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8004760:	e01a      	b.n	8004798 <HAL_ADC_Init+0x32c>
 8004762:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004766:	e017      	b.n	8004798 <HAL_ADC_Init+0x32c>
 8004768:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 800476c:	e014      	b.n	8004798 <HAL_ADC_Init+0x32c>
 800476e:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8004772:	e011      	b.n	8004798 <HAL_ADC_Init+0x32c>
 8004774:	20000014 	.word	0x20000014
 8004778:	431bde83 	.word	0x431bde83
 800477c:	50000100 	.word	0x50000100
 8004780:	50000300 	.word	0x50000300
 8004784:	50000700 	.word	0x50000700
 8004788:	50000400 	.word	0x50000400
 800478c:	50000500 	.word	0x50000500
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004794:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800479c:	4313      	orrs	r3, r2
 800479e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80047a0:	4313      	orrs	r3, r2
 80047a2:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 030c 	and.w	r3, r3, #12
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d114      	bne.n	80047dc <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6812      	ldr	r2, [r2, #0]
 80047bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047c0:	f023 0302 	bic.w	r3, r3, #2
 80047c4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	7e1b      	ldrb	r3, [r3, #24]
 80047ca:	039a      	lsls	r2, r3, #14
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	4313      	orrs	r3, r2
 80047d6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80047d8:	4313      	orrs	r3, r2
 80047da:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	4b1e      	ldr	r3, [pc, #120]	@ (800485c <HAL_ADC_Init+0x3f0>)
 80047e4:	4013      	ands	r3, r2
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6812      	ldr	r2, [r2, #0]
 80047ea:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80047ec:	430b      	orrs	r3, r1
 80047ee:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d10c      	bne.n	8004812 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047fe:	f023 010f 	bic.w	r1, r3, #15
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	1e5a      	subs	r2, r3, #1
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004810:	e007      	b.n	8004822 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 020f 	bic.w	r2, r2, #15
 8004820:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482c:	f023 0303 	bic.w	r3, r3, #3
 8004830:	f043 0201 	orr.w	r2, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	641a      	str	r2, [r3, #64]	@ 0x40
 8004838:	e00a      	b.n	8004850 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483e:	f023 0312 	bic.w	r3, r3, #18
 8004842:	f043 0210 	orr.w	r2, r3, #16
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800484a:	2301      	movs	r3, #1
 800484c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8004850:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8004854:	4618      	mov	r0, r3
 8004856:	3768      	adds	r7, #104	@ 0x68
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	fff0c007 	.word	0xfff0c007

08004860 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004868:	2300      	movs	r3, #0
 800486a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 0304 	and.w	r3, r3, #4
 8004876:	2b00      	cmp	r3, #0
 8004878:	f040 80f9 	bne.w	8004a6e <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004882:	2b01      	cmp	r3, #1
 8004884:	d101      	bne.n	800488a <HAL_ADC_Start+0x2a>
 8004886:	2302      	movs	r3, #2
 8004888:	e0f4      	b.n	8004a74 <HAL_ADC_Start+0x214>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fd9c 	bl	80053d0 <ADC_Enable>
 8004898:	4603      	mov	r3, r0
 800489a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f040 80e0 	bne.w	8004a64 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80048ac:	f023 0301 	bic.w	r3, r3, #1
 80048b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048c0:	d004      	beq.n	80048cc <HAL_ADC_Start+0x6c>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a6d      	ldr	r2, [pc, #436]	@ (8004a7c <HAL_ADC_Start+0x21c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d106      	bne.n	80048da <HAL_ADC_Start+0x7a>
 80048cc:	4b6c      	ldr	r3, [pc, #432]	@ (8004a80 <HAL_ADC_Start+0x220>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 031f 	and.w	r3, r3, #31
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d010      	beq.n	80048fa <HAL_ADC_Start+0x9a>
 80048d8:	e005      	b.n	80048e6 <HAL_ADC_Start+0x86>
 80048da:	4b6a      	ldr	r3, [pc, #424]	@ (8004a84 <HAL_ADC_Start+0x224>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 031f 	and.w	r3, r3, #31
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d009      	beq.n	80048fa <HAL_ADC_Start+0x9a>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048ee:	d004      	beq.n	80048fa <HAL_ADC_Start+0x9a>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a64      	ldr	r2, [pc, #400]	@ (8004a88 <HAL_ADC_Start+0x228>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d115      	bne.n	8004926 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fe:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d036      	beq.n	8004982 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004918:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800491c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004924:	e02d      	b.n	8004982 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800493a:	d004      	beq.n	8004946 <HAL_ADC_Start+0xe6>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a4e      	ldr	r2, [pc, #312]	@ (8004a7c <HAL_ADC_Start+0x21c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d10a      	bne.n	800495c <HAL_ADC_Start+0xfc>
 8004946:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	bf14      	ite	ne
 8004954:	2301      	movne	r3, #1
 8004956:	2300      	moveq	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	e008      	b.n	800496e <HAL_ADC_Start+0x10e>
 800495c:	4b4a      	ldr	r3, [pc, #296]	@ (8004a88 <HAL_ADC_Start+0x228>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	bf14      	ite	ne
 8004968:	2301      	movne	r3, #1
 800496a:	2300      	moveq	r3, #0
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d007      	beq.n	8004982 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004976:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800497a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004986:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800498a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800498e:	d106      	bne.n	800499e <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004994:	f023 0206 	bic.w	r2, r3, #6
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	645a      	str	r2, [r3, #68]	@ 0x44
 800499c:	e002      	b.n	80049a4 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	221c      	movs	r2, #28
 80049b2:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049bc:	d004      	beq.n	80049c8 <HAL_ADC_Start+0x168>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a2e      	ldr	r2, [pc, #184]	@ (8004a7c <HAL_ADC_Start+0x21c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d106      	bne.n	80049d6 <HAL_ADC_Start+0x176>
 80049c8:	4b2d      	ldr	r3, [pc, #180]	@ (8004a80 <HAL_ADC_Start+0x220>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f003 031f 	and.w	r3, r3, #31
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d03e      	beq.n	8004a52 <HAL_ADC_Start+0x1f2>
 80049d4:	e005      	b.n	80049e2 <HAL_ADC_Start+0x182>
 80049d6:	4b2b      	ldr	r3, [pc, #172]	@ (8004a84 <HAL_ADC_Start+0x224>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 031f 	and.w	r3, r3, #31
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d037      	beq.n	8004a52 <HAL_ADC_Start+0x1f2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049ea:	d004      	beq.n	80049f6 <HAL_ADC_Start+0x196>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a22      	ldr	r2, [pc, #136]	@ (8004a7c <HAL_ADC_Start+0x21c>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d106      	bne.n	8004a04 <HAL_ADC_Start+0x1a4>
 80049f6:	4b22      	ldr	r3, [pc, #136]	@ (8004a80 <HAL_ADC_Start+0x220>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f003 031f 	and.w	r3, r3, #31
 80049fe:	2b05      	cmp	r3, #5
 8004a00:	d027      	beq.n	8004a52 <HAL_ADC_Start+0x1f2>
 8004a02:	e005      	b.n	8004a10 <HAL_ADC_Start+0x1b0>
 8004a04:	4b1f      	ldr	r3, [pc, #124]	@ (8004a84 <HAL_ADC_Start+0x224>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f003 031f 	and.w	r3, r3, #31
 8004a0c:	2b05      	cmp	r3, #5
 8004a0e:	d020      	beq.n	8004a52 <HAL_ADC_Start+0x1f2>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a18:	d004      	beq.n	8004a24 <HAL_ADC_Start+0x1c4>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a17      	ldr	r2, [pc, #92]	@ (8004a7c <HAL_ADC_Start+0x21c>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d106      	bne.n	8004a32 <HAL_ADC_Start+0x1d2>
 8004a24:	4b16      	ldr	r3, [pc, #88]	@ (8004a80 <HAL_ADC_Start+0x220>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 031f 	and.w	r3, r3, #31
 8004a2c:	2b09      	cmp	r3, #9
 8004a2e:	d010      	beq.n	8004a52 <HAL_ADC_Start+0x1f2>
 8004a30:	e005      	b.n	8004a3e <HAL_ADC_Start+0x1de>
 8004a32:	4b14      	ldr	r3, [pc, #80]	@ (8004a84 <HAL_ADC_Start+0x224>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 031f 	and.w	r3, r3, #31
 8004a3a:	2b09      	cmp	r3, #9
 8004a3c:	d009      	beq.n	8004a52 <HAL_ADC_Start+0x1f2>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a46:	d004      	beq.n	8004a52 <HAL_ADC_Start+0x1f2>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a0e      	ldr	r2, [pc, #56]	@ (8004a88 <HAL_ADC_Start+0x228>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d10f      	bne.n	8004a72 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f042 0204 	orr.w	r2, r2, #4
 8004a60:	609a      	str	r2, [r3, #8]
 8004a62:	e006      	b.n	8004a72 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004a6c:	e001      	b.n	8004a72 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004a6e:	2302      	movs	r3, #2
 8004a70:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	50000100 	.word	0x50000100
 8004a80:	50000300 	.word	0x50000300
 8004a84:	50000700 	.word	0x50000700
 8004a88:	50000400 	.word	0x50000400

08004a8c <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d101      	bne.n	8004aa6 <HAL_ADC_Stop+0x1a>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e023      	b.n	8004aee <HAL_ADC_Stop+0x62>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004aae:	216c      	movs	r1, #108	@ 0x6c
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 fd57 	bl	8005564 <ADC_ConversionStop>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004aba:	7bfb      	ldrb	r3, [r7, #15]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d111      	bne.n	8004ae4 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 fce9 	bl	8005498 <ADC_Disable>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004aca:	7bfb      	ldrb	r3, [r7, #15]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d109      	bne.n	8004ae4 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004ad8:	f023 0301 	bic.w	r3, r3, #1
 8004adc:	f043 0201 	orr.w	r2, r3, #1
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
	...

08004af8 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	2b08      	cmp	r3, #8
 8004b0c:	d102      	bne.n	8004b14 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8004b0e:	2308      	movs	r3, #8
 8004b10:	617b      	str	r3, [r7, #20]
 8004b12:	e03a      	b.n	8004b8a <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b1c:	d004      	beq.n	8004b28 <HAL_ADC_PollForConversion+0x30>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a72      	ldr	r2, [pc, #456]	@ (8004cec <HAL_ADC_PollForConversion+0x1f4>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d101      	bne.n	8004b2c <HAL_ADC_PollForConversion+0x34>
 8004b28:	4b71      	ldr	r3, [pc, #452]	@ (8004cf0 <HAL_ADC_PollForConversion+0x1f8>)
 8004b2a:	e000      	b.n	8004b2e <HAL_ADC_PollForConversion+0x36>
 8004b2c:	4b71      	ldr	r3, [pc, #452]	@ (8004cf4 <HAL_ADC_PollForConversion+0x1fc>)
 8004b2e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f003 031f 	and.w	r3, r3, #31
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d112      	bne.n	8004b62 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d11d      	bne.n	8004b86 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4e:	f043 0220 	orr.w	r2, r3, #32
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e0bf      	b.n	8004ce2 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00b      	beq.n	8004b86 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b72:	f043 0220 	orr.w	r2, r3, #32
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e0ad      	b.n	8004ce2 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8004b86:	230c      	movs	r3, #12
 8004b88:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b92:	d004      	beq.n	8004b9e <HAL_ADC_PollForConversion+0xa6>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a54      	ldr	r2, [pc, #336]	@ (8004cec <HAL_ADC_PollForConversion+0x1f4>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d106      	bne.n	8004bac <HAL_ADC_PollForConversion+0xb4>
 8004b9e:	4b54      	ldr	r3, [pc, #336]	@ (8004cf0 <HAL_ADC_PollForConversion+0x1f8>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 031f 	and.w	r3, r3, #31
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d010      	beq.n	8004bcc <HAL_ADC_PollForConversion+0xd4>
 8004baa:	e005      	b.n	8004bb8 <HAL_ADC_PollForConversion+0xc0>
 8004bac:	4b51      	ldr	r3, [pc, #324]	@ (8004cf4 <HAL_ADC_PollForConversion+0x1fc>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f003 031f 	and.w	r3, r3, #31
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d009      	beq.n	8004bcc <HAL_ADC_PollForConversion+0xd4>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bc0:	d004      	beq.n	8004bcc <HAL_ADC_PollForConversion+0xd4>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a4c      	ldr	r2, [pc, #304]	@ (8004cf8 <HAL_ADC_PollForConversion+0x200>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d104      	bne.n	8004bd6 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	613b      	str	r3, [r7, #16]
 8004bd4:	e00f      	b.n	8004bf6 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bde:	d004      	beq.n	8004bea <HAL_ADC_PollForConversion+0xf2>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a41      	ldr	r2, [pc, #260]	@ (8004cec <HAL_ADC_PollForConversion+0x1f4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d102      	bne.n	8004bf0 <HAL_ADC_PollForConversion+0xf8>
 8004bea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004bee:	e000      	b.n	8004bf2 <HAL_ADC_PollForConversion+0xfa>
 8004bf0:	4b41      	ldr	r3, [pc, #260]	@ (8004cf8 <HAL_ADC_PollForConversion+0x200>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8004bf6:	f7ff fc09 	bl	800440c <HAL_GetTick>
 8004bfa:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004bfc:	e021      	b.n	8004c42 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c04:	d01d      	beq.n	8004c42 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d007      	beq.n	8004c1c <HAL_ADC_PollForConversion+0x124>
 8004c0c:	f7ff fbfe 	bl	800440c <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d212      	bcs.n	8004c42 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	4013      	ands	r3, r2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10b      	bne.n	8004c42 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2e:	f043 0204 	orr.w	r2, r3, #4
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e04f      	b.n	8004ce2 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d0d6      	beq.n	8004bfe <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c54:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d131      	bne.n	8004cce <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d12c      	bne.n	8004cce <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	2b08      	cmp	r3, #8
 8004c80:	d125      	bne.n	8004cce <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d112      	bne.n	8004cb6 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d112      	bne.n	8004cce <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cac:	f043 0201 	orr.w	r2, r3, #1
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	641a      	str	r2, [r3, #64]	@ 0x40
 8004cb4:	e00b      	b.n	8004cce <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cba:	f043 0220 	orr.w	r2, r3, #32
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cc6:	f043 0201 	orr.w	r2, r3, #1
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d103      	bne.n	8004ce0 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3718      	adds	r7, #24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	50000100 	.word	0x50000100
 8004cf0:	50000300 	.word	0x50000300
 8004cf4:	50000700 	.word	0x50000700
 8004cf8:	50000400 	.word	0x50000400

08004cfc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b084      	sub	sp, #16
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
 8004d1e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d20:	2300      	movs	r3, #0
 8004d22:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d101      	bne.n	8004d32 <HAL_ADCEx_Calibration_Start+0x1c>
 8004d2e:	2302      	movs	r3, #2
 8004d30:	e05f      	b.n	8004df2 <HAL_ADCEx_Calibration_Start+0xdc>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 fbac 	bl	8005498 <ADC_Disable>
 8004d40:	4603      	mov	r3, r0
 8004d42:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d14e      	bne.n	8004de8 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689a      	ldr	r2, [r3, #8]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8004d5e:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d107      	bne.n	8004d76 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004d74:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689a      	ldr	r2, [r3, #8]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004d84:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8004d86:	f7ff fb41 	bl	800440c <HAL_GetTick>
 8004d8a:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004d8c:	e01c      	b.n	8004dc8 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004d8e:	f7ff fb3d 	bl	800440c <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b0a      	cmp	r3, #10
 8004d9a:	d915      	bls.n	8004dc8 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004da6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004daa:	d10d      	bne.n	8004dc8 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db0:	f023 0312 	bic.w	r3, r3, #18
 8004db4:	f043 0210 	orr.w	r2, r3, #16
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e014      	b.n	8004df2 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dd6:	d0da      	beq.n	8004d8e <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ddc:	f023 0303 	bic.w	r3, r3, #3
 8004de0:	f043 0201 	orr.w	r2, r3, #1
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
	...

08004dfc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b09b      	sub	sp, #108	@ 0x6c
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <HAL_ADC_ConfigChannel+0x22>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e2c8      	b.n	80053b0 <HAL_ADC_ConfigChannel+0x5b4>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f003 0304 	and.w	r3, r3, #4
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f040 82ac 	bne.w	800538e <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d81c      	bhi.n	8004e78 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	4413      	add	r3, r2
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	461a      	mov	r2, r3
 8004e52:	231f      	movs	r3, #31
 8004e54:	4093      	lsls	r3, r2
 8004e56:	43db      	mvns	r3, r3
 8004e58:	4019      	ands	r1, r3
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	6818      	ldr	r0, [r3, #0]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	4613      	mov	r3, r2
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	4413      	add	r3, r2
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	fa00 f203 	lsl.w	r2, r0, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e76:	e063      	b.n	8004f40 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	2b09      	cmp	r3, #9
 8004e7e:	d81e      	bhi.n	8004ebe <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	4413      	add	r3, r2
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	3b1e      	subs	r3, #30
 8004e94:	221f      	movs	r2, #31
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	43db      	mvns	r3, r3
 8004e9c:	4019      	ands	r1, r3
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	6818      	ldr	r0, [r3, #0]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	4413      	add	r3, r2
 8004eac:	005b      	lsls	r3, r3, #1
 8004eae:	3b1e      	subs	r3, #30
 8004eb0:	fa00 f203 	lsl.w	r2, r0, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	635a      	str	r2, [r3, #52]	@ 0x34
 8004ebc:	e040      	b.n	8004f40 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2b0e      	cmp	r3, #14
 8004ec4:	d81e      	bhi.n	8004f04 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	4413      	add	r3, r2
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	3b3c      	subs	r3, #60	@ 0x3c
 8004eda:	221f      	movs	r2, #31
 8004edc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	4019      	ands	r1, r3
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	6818      	ldr	r0, [r3, #0]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	4613      	mov	r3, r2
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	4413      	add	r3, r2
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	3b3c      	subs	r3, #60	@ 0x3c
 8004ef6:	fa00 f203 	lsl.w	r2, r0, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	639a      	str	r2, [r3, #56]	@ 0x38
 8004f02:	e01d      	b.n	8004f40 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	4413      	add	r3, r2
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	3b5a      	subs	r3, #90	@ 0x5a
 8004f18:	221f      	movs	r2, #31
 8004f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1e:	43db      	mvns	r3, r3
 8004f20:	4019      	ands	r1, r3
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	6818      	ldr	r0, [r3, #0]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	4413      	add	r3, r2
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	3b5a      	subs	r3, #90	@ 0x5a
 8004f34:	fa00 f203 	lsl.w	r2, r0, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 030c 	and.w	r3, r3, #12
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f040 80e5 	bne.w	800511a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2b09      	cmp	r3, #9
 8004f56:	d91c      	bls.n	8004f92 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6999      	ldr	r1, [r3, #24]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	4613      	mov	r3, r2
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	4413      	add	r3, r2
 8004f68:	3b1e      	subs	r3, #30
 8004f6a:	2207      	movs	r2, #7
 8004f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f70:	43db      	mvns	r3, r3
 8004f72:	4019      	ands	r1, r3
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	6898      	ldr	r0, [r3, #8]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	4413      	add	r3, r2
 8004f82:	3b1e      	subs	r3, #30
 8004f84:	fa00 f203 	lsl.w	r2, r0, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	619a      	str	r2, [r3, #24]
 8004f90:	e019      	b.n	8004fc6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6959      	ldr	r1, [r3, #20]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	4413      	add	r3, r2
 8004fa2:	2207      	movs	r2, #7
 8004fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa8:	43db      	mvns	r3, r3
 8004faa:	4019      	ands	r1, r3
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	6898      	ldr	r0, [r3, #8]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	005b      	lsls	r3, r3, #1
 8004fb8:	4413      	add	r3, r2
 8004fba:	fa00 f203 	lsl.w	r2, r0, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	695a      	ldr	r2, [r3, #20]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	08db      	lsrs	r3, r3, #3
 8004fd2:	f003 0303 	and.w	r3, r3, #3
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fdc:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	2b03      	cmp	r3, #3
 8004fe6:	d84f      	bhi.n	8005088 <HAL_ADC_ConfigChannel+0x28c>
 8004fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ff0 <HAL_ADC_ConfigChannel+0x1f4>)
 8004fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fee:	bf00      	nop
 8004ff0:	08005001 	.word	0x08005001
 8004ff4:	08005023 	.word	0x08005023
 8004ff8:	08005045 	.word	0x08005045
 8004ffc:	08005067 	.word	0x08005067
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005006:	4b99      	ldr	r3, [pc, #612]	@ (800526c <HAL_ADC_ConfigChannel+0x470>)
 8005008:	4013      	ands	r3, r2
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	6812      	ldr	r2, [r2, #0]
 800500e:	0691      	lsls	r1, r2, #26
 8005010:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005012:	430a      	orrs	r2, r1
 8005014:	431a      	orrs	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800501e:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005020:	e07b      	b.n	800511a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005028:	4b90      	ldr	r3, [pc, #576]	@ (800526c <HAL_ADC_ConfigChannel+0x470>)
 800502a:	4013      	ands	r3, r2
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	6812      	ldr	r2, [r2, #0]
 8005030:	0691      	lsls	r1, r2, #26
 8005032:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005034:	430a      	orrs	r2, r1
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005040:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005042:	e06a      	b.n	800511a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800504a:	4b88      	ldr	r3, [pc, #544]	@ (800526c <HAL_ADC_ConfigChannel+0x470>)
 800504c:	4013      	ands	r3, r2
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	6812      	ldr	r2, [r2, #0]
 8005052:	0691      	lsls	r1, r2, #26
 8005054:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005056:	430a      	orrs	r2, r1
 8005058:	431a      	orrs	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005062:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005064:	e059      	b.n	800511a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800506c:	4b7f      	ldr	r3, [pc, #508]	@ (800526c <HAL_ADC_ConfigChannel+0x470>)
 800506e:	4013      	ands	r3, r2
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	6812      	ldr	r2, [r2, #0]
 8005074:	0691      	lsls	r1, r2, #26
 8005076:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005078:	430a      	orrs	r2, r1
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005084:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005086:	e048      	b.n	800511a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800508e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	069b      	lsls	r3, r3, #26
 8005098:	429a      	cmp	r2, r3
 800509a:	d107      	bne.n	80050ac <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80050aa:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	069b      	lsls	r3, r3, #26
 80050bc:	429a      	cmp	r2, r3
 80050be:	d107      	bne.n	80050d0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80050ce:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	069b      	lsls	r3, r3, #26
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d107      	bne.n	80050f4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80050f2:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	069b      	lsls	r3, r3, #26
 8005104:	429a      	cmp	r2, r3
 8005106:	d107      	bne.n	8005118 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005116:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8005118:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f003 0303 	and.w	r3, r3, #3
 8005124:	2b01      	cmp	r3, #1
 8005126:	d108      	bne.n	800513a <HAL_ADC_ConfigChannel+0x33e>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b01      	cmp	r3, #1
 8005134:	d101      	bne.n	800513a <HAL_ADC_ConfigChannel+0x33e>
 8005136:	2301      	movs	r3, #1
 8005138:	e000      	b.n	800513c <HAL_ADC_ConfigChannel+0x340>
 800513a:	2300      	movs	r3, #0
 800513c:	2b00      	cmp	r3, #0
 800513e:	f040 8131 	bne.w	80053a4 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d00f      	beq.n	800516a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2201      	movs	r2, #1
 8005158:	fa02 f303 	lsl.w	r3, r2, r3
 800515c:	43da      	mvns	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	400a      	ands	r2, r1
 8005164:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8005168:	e049      	b.n	80051fe <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2201      	movs	r2, #1
 8005178:	409a      	lsls	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b09      	cmp	r3, #9
 800518a:	d91c      	bls.n	80051c6 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6999      	ldr	r1, [r3, #24]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	4613      	mov	r3, r2
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	4413      	add	r3, r2
 800519c:	3b1b      	subs	r3, #27
 800519e:	2207      	movs	r2, #7
 80051a0:	fa02 f303 	lsl.w	r3, r2, r3
 80051a4:	43db      	mvns	r3, r3
 80051a6:	4019      	ands	r1, r3
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	6898      	ldr	r0, [r3, #8]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	4613      	mov	r3, r2
 80051b2:	005b      	lsls	r3, r3, #1
 80051b4:	4413      	add	r3, r2
 80051b6:	3b1b      	subs	r3, #27
 80051b8:	fa00 f203 	lsl.w	r2, r0, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	430a      	orrs	r2, r1
 80051c2:	619a      	str	r2, [r3, #24]
 80051c4:	e01b      	b.n	80051fe <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6959      	ldr	r1, [r3, #20]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	1c5a      	adds	r2, r3, #1
 80051d2:	4613      	mov	r3, r2
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	4413      	add	r3, r2
 80051d8:	2207      	movs	r2, #7
 80051da:	fa02 f303 	lsl.w	r3, r2, r3
 80051de:	43db      	mvns	r3, r3
 80051e0:	4019      	ands	r1, r3
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	6898      	ldr	r0, [r3, #8]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	4613      	mov	r3, r2
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	4413      	add	r3, r2
 80051f2:	fa00 f203 	lsl.w	r2, r0, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005206:	d004      	beq.n	8005212 <HAL_ADC_ConfigChannel+0x416>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a18      	ldr	r2, [pc, #96]	@ (8005270 <HAL_ADC_ConfigChannel+0x474>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d101      	bne.n	8005216 <HAL_ADC_ConfigChannel+0x41a>
 8005212:	4b18      	ldr	r3, [pc, #96]	@ (8005274 <HAL_ADC_ConfigChannel+0x478>)
 8005214:	e000      	b.n	8005218 <HAL_ADC_ConfigChannel+0x41c>
 8005216:	4b18      	ldr	r3, [pc, #96]	@ (8005278 <HAL_ADC_ConfigChannel+0x47c>)
 8005218:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b10      	cmp	r3, #16
 8005220:	d105      	bne.n	800522e <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005222:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800522a:	2b00      	cmp	r3, #0
 800522c:	d015      	beq.n	800525a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005232:	2b11      	cmp	r3, #17
 8005234:	d105      	bne.n	8005242 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005236:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00b      	beq.n	800525a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005246:	2b12      	cmp	r3, #18
 8005248:	f040 80ac 	bne.w	80053a4 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800524c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005254:	2b00      	cmp	r3, #0
 8005256:	f040 80a5 	bne.w	80053a4 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005262:	d10b      	bne.n	800527c <HAL_ADC_ConfigChannel+0x480>
 8005264:	4b02      	ldr	r3, [pc, #8]	@ (8005270 <HAL_ADC_ConfigChannel+0x474>)
 8005266:	60fb      	str	r3, [r7, #12]
 8005268:	e023      	b.n	80052b2 <HAL_ADC_ConfigChannel+0x4b6>
 800526a:	bf00      	nop
 800526c:	83fff000 	.word	0x83fff000
 8005270:	50000100 	.word	0x50000100
 8005274:	50000300 	.word	0x50000300
 8005278:	50000700 	.word	0x50000700
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a4e      	ldr	r2, [pc, #312]	@ (80053bc <HAL_ADC_ConfigChannel+0x5c0>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d103      	bne.n	800528e <HAL_ADC_ConfigChannel+0x492>
 8005286:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	e011      	b.n	80052b2 <HAL_ADC_ConfigChannel+0x4b6>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a4b      	ldr	r2, [pc, #300]	@ (80053c0 <HAL_ADC_ConfigChannel+0x5c4>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d102      	bne.n	800529e <HAL_ADC_ConfigChannel+0x4a2>
 8005298:	4b4a      	ldr	r3, [pc, #296]	@ (80053c4 <HAL_ADC_ConfigChannel+0x5c8>)
 800529a:	60fb      	str	r3, [r7, #12]
 800529c:	e009      	b.n	80052b2 <HAL_ADC_ConfigChannel+0x4b6>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a48      	ldr	r2, [pc, #288]	@ (80053c4 <HAL_ADC_ConfigChannel+0x5c8>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d102      	bne.n	80052ae <HAL_ADC_ConfigChannel+0x4b2>
 80052a8:	4b45      	ldr	r3, [pc, #276]	@ (80053c0 <HAL_ADC_ConfigChannel+0x5c4>)
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	e001      	b.n	80052b2 <HAL_ADC_ConfigChannel+0x4b6>
 80052ae:	2300      	movs	r3, #0
 80052b0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f003 0303 	and.w	r3, r3, #3
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d108      	bne.n	80052d2 <HAL_ADC_ConfigChannel+0x4d6>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d101      	bne.n	80052d2 <HAL_ADC_ConfigChannel+0x4d6>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e000      	b.n	80052d4 <HAL_ADC_ConfigChannel+0x4d8>
 80052d2:	2300      	movs	r3, #0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d150      	bne.n	800537a <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80052d8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d010      	beq.n	8005300 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d107      	bne.n	80052fa <HAL_ADC_ConfigChannel+0x4fe>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d101      	bne.n	80052fa <HAL_ADC_ConfigChannel+0x4fe>
 80052f6:	2301      	movs	r3, #1
 80052f8:	e000      	b.n	80052fc <HAL_ADC_ConfigChannel+0x500>
 80052fa:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d13c      	bne.n	800537a <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2b10      	cmp	r3, #16
 8005306:	d11d      	bne.n	8005344 <HAL_ADC_ConfigChannel+0x548>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005310:	d118      	bne.n	8005344 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005312:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800531a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800531c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800531e:	4b2a      	ldr	r3, [pc, #168]	@ (80053c8 <HAL_ADC_ConfigChannel+0x5cc>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a2a      	ldr	r2, [pc, #168]	@ (80053cc <HAL_ADC_ConfigChannel+0x5d0>)
 8005324:	fba2 2303 	umull	r2, r3, r2, r3
 8005328:	0c9a      	lsrs	r2, r3, #18
 800532a:	4613      	mov	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4413      	add	r3, r2
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005334:	e002      	b.n	800533c <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	3b01      	subs	r3, #1
 800533a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1f9      	bne.n	8005336 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005342:	e02e      	b.n	80053a2 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b11      	cmp	r3, #17
 800534a:	d10b      	bne.n	8005364 <HAL_ADC_ConfigChannel+0x568>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005354:	d106      	bne.n	8005364 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005356:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800535e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005360:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005362:	e01e      	b.n	80053a2 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b12      	cmp	r3, #18
 800536a:	d11a      	bne.n	80053a2 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800536c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005374:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005376:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005378:	e013      	b.n	80053a2 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537e:	f043 0220 	orr.w	r2, r3, #32
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800538c:	e00a      	b.n	80053a4 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005392:	f043 0220 	orr.w	r2, r3, #32
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80053a0:	e000      	b.n	80053a4 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80053a2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80053ac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	376c      	adds	r7, #108	@ 0x6c
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	50000100 	.word	0x50000100
 80053c0:	50000400 	.word	0x50000400
 80053c4:	50000500 	.word	0x50000500
 80053c8:	20000014 	.word	0x20000014
 80053cc:	431bde83 	.word	0x431bde83

080053d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f003 0303 	and.w	r3, r3, #3
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d108      	bne.n	80053fc <ADC_Enable+0x2c>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d101      	bne.n	80053fc <ADC_Enable+0x2c>
 80053f8:	2301      	movs	r3, #1
 80053fa:	e000      	b.n	80053fe <ADC_Enable+0x2e>
 80053fc:	2300      	movs	r3, #0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d143      	bne.n	800548a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	4b22      	ldr	r3, [pc, #136]	@ (8005494 <ADC_Enable+0xc4>)
 800540a:	4013      	ands	r3, r2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00d      	beq.n	800542c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005414:	f043 0210 	orr.w	r2, r3, #16
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005420:	f043 0201 	orr.w	r2, r3, #1
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e02f      	b.n	800548c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689a      	ldr	r2, [r3, #8]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0201 	orr.w	r2, r2, #1
 800543a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800543c:	f7fe ffe6 	bl	800440c <HAL_GetTick>
 8005440:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005442:	e01b      	b.n	800547c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005444:	f7fe ffe2 	bl	800440c <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b02      	cmp	r3, #2
 8005450:	d914      	bls.n	800547c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b01      	cmp	r3, #1
 800545e:	d00d      	beq.n	800547c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005464:	f043 0210 	orr.w	r2, r3, #16
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005470:	f043 0201 	orr.w	r2, r3, #1
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e007      	b.n	800548c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b01      	cmp	r3, #1
 8005488:	d1dc      	bne.n	8005444 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	8000003f 	.word	0x8000003f

08005498 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054a0:	2300      	movs	r3, #0
 80054a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f003 0303 	and.w	r3, r3, #3
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d108      	bne.n	80054c4 <ADC_Disable+0x2c>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d101      	bne.n	80054c4 <ADC_Disable+0x2c>
 80054c0:	2301      	movs	r3, #1
 80054c2:	e000      	b.n	80054c6 <ADC_Disable+0x2e>
 80054c4:	2300      	movs	r3, #0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d047      	beq.n	800555a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f003 030d 	and.w	r3, r3, #13
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d10f      	bne.n	80054f8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689a      	ldr	r2, [r3, #8]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0202 	orr.w	r2, r2, #2
 80054e6:	609a      	str	r2, [r3, #8]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2203      	movs	r2, #3
 80054ee:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80054f0:	f7fe ff8c 	bl	800440c <HAL_GetTick>
 80054f4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80054f6:	e029      	b.n	800554c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fc:	f043 0210 	orr.w	r2, r3, #16
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005508:	f043 0201 	orr.w	r2, r3, #1
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e023      	b.n	800555c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005514:	f7fe ff7a 	bl	800440c <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d914      	bls.n	800554c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	2b01      	cmp	r3, #1
 800552e:	d10d      	bne.n	800554c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005534:	f043 0210 	orr.w	r2, r3, #16
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005540:	f043 0201 	orr.w	r2, r3, #1
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e007      	b.n	800555c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b01      	cmp	r3, #1
 8005558:	d0dc      	beq.n	8005514 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 800556e:	2300      	movs	r3, #0
 8005570:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8005572:	2300      	movs	r3, #0
 8005574:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8005576:	2300      	movs	r3, #0
 8005578:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f003 030c 	and.w	r3, r3, #12
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 809b 	beq.w	80056c0 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005594:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005598:	d12a      	bne.n	80055f0 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d126      	bne.n	80055f0 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d122      	bne.n	80055f0 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80055aa:	230c      	movs	r3, #12
 80055ac:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80055ae:	e014      	b.n	80055da <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	4a46      	ldr	r2, [pc, #280]	@ (80056cc <ADC_ConversionStop+0x168>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d90d      	bls.n	80055d4 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055bc:	f043 0210 	orr.w	r2, r3, #16
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c8:	f043 0201 	orr.w	r2, r3, #1
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	645a      	str	r2, [r3, #68]	@ 0x44
          
          return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e076      	b.n	80056c2 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	3301      	adds	r3, #1
 80055d8:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055e4:	2b40      	cmp	r3, #64	@ 0x40
 80055e6:	d1e3      	bne.n	80055b0 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2240      	movs	r2, #64	@ 0x40
 80055ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	2b60      	cmp	r3, #96	@ 0x60
 80055f4:	d015      	beq.n	8005622 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b04      	cmp	r3, #4
 8005602:	d10e      	bne.n	8005622 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800560e:	2b00      	cmp	r3, #0
 8005610:	d107      	bne.n	8005622 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689a      	ldr	r2, [r3, #8]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f042 0210 	orr.w	r2, r2, #16
 8005620:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b0c      	cmp	r3, #12
 8005626:	d015      	beq.n	8005654 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f003 0308 	and.w	r3, r3, #8
 8005632:	2b08      	cmp	r3, #8
 8005634:	d10e      	bne.n	8005654 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8005640:	2b00      	cmp	r3, #0
 8005642:	d107      	bne.n	8005654 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	689a      	ldr	r2, [r3, #8]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f042 0220 	orr.w	r2, r2, #32
 8005652:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	2b60      	cmp	r3, #96	@ 0x60
 8005658:	d005      	beq.n	8005666 <ADC_ConversionStop+0x102>
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b6c      	cmp	r3, #108	@ 0x6c
 800565e:	d105      	bne.n	800566c <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005660:	230c      	movs	r3, #12
 8005662:	617b      	str	r3, [r7, #20]
        break;
 8005664:	e005      	b.n	8005672 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005666:	2308      	movs	r3, #8
 8005668:	617b      	str	r3, [r7, #20]
        break;
 800566a:	e002      	b.n	8005672 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800566c:	2304      	movs	r3, #4
 800566e:	617b      	str	r3, [r7, #20]
        break;
 8005670:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005672:	f7fe fecb 	bl	800440c <HAL_GetTick>
 8005676:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8005678:	e01b      	b.n	80056b2 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800567a:	f7fe fec7 	bl	800440c <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	2b0b      	cmp	r3, #11
 8005686:	d914      	bls.n	80056b2 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689a      	ldr	r2, [r3, #8]
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	4013      	ands	r3, r2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00d      	beq.n	80056b2 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800569a:	f043 0210 	orr.w	r2, r3, #16
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056a6:	f043 0201 	orr.w	r2, r3, #1
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	645a      	str	r2, [r3, #68]	@ 0x44
        
        return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e007      	b.n	80056c2 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689a      	ldr	r2, [r3, #8]
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	4013      	ands	r3, r2
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1dc      	bne.n	800567a <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3718      	adds	r7, #24
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	000993ff 	.word	0x000993ff

080056d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f003 0307 	and.w	r3, r3, #7
 80056de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005714 <__NVIC_SetPriorityGrouping+0x44>)
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80056ec:	4013      	ands	r3, r2
 80056ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80056fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005702:	4a04      	ldr	r2, [pc, #16]	@ (8005714 <__NVIC_SetPriorityGrouping+0x44>)
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	60d3      	str	r3, [r2, #12]
}
 8005708:	bf00      	nop
 800570a:	3714      	adds	r7, #20
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	e000ed00 	.word	0xe000ed00

08005718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005718:	b480      	push	{r7}
 800571a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800571c:	4b04      	ldr	r3, [pc, #16]	@ (8005730 <__NVIC_GetPriorityGrouping+0x18>)
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	0a1b      	lsrs	r3, r3, #8
 8005722:	f003 0307 	and.w	r3, r3, #7
}
 8005726:	4618      	mov	r0, r3
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	e000ed00 	.word	0xe000ed00

08005734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	4603      	mov	r3, r0
 800573c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800573e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005742:	2b00      	cmp	r3, #0
 8005744:	db0b      	blt.n	800575e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005746:	79fb      	ldrb	r3, [r7, #7]
 8005748:	f003 021f 	and.w	r2, r3, #31
 800574c:	4907      	ldr	r1, [pc, #28]	@ (800576c <__NVIC_EnableIRQ+0x38>)
 800574e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005752:	095b      	lsrs	r3, r3, #5
 8005754:	2001      	movs	r0, #1
 8005756:	fa00 f202 	lsl.w	r2, r0, r2
 800575a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800575e:	bf00      	nop
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	e000e100 	.word	0xe000e100

08005770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	4603      	mov	r3, r0
 8005778:	6039      	str	r1, [r7, #0]
 800577a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800577c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005780:	2b00      	cmp	r3, #0
 8005782:	db0a      	blt.n	800579a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	b2da      	uxtb	r2, r3
 8005788:	490c      	ldr	r1, [pc, #48]	@ (80057bc <__NVIC_SetPriority+0x4c>)
 800578a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800578e:	0112      	lsls	r2, r2, #4
 8005790:	b2d2      	uxtb	r2, r2
 8005792:	440b      	add	r3, r1
 8005794:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005798:	e00a      	b.n	80057b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	b2da      	uxtb	r2, r3
 800579e:	4908      	ldr	r1, [pc, #32]	@ (80057c0 <__NVIC_SetPriority+0x50>)
 80057a0:	79fb      	ldrb	r3, [r7, #7]
 80057a2:	f003 030f 	and.w	r3, r3, #15
 80057a6:	3b04      	subs	r3, #4
 80057a8:	0112      	lsls	r2, r2, #4
 80057aa:	b2d2      	uxtb	r2, r2
 80057ac:	440b      	add	r3, r1
 80057ae:	761a      	strb	r2, [r3, #24]
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	e000e100 	.word	0xe000e100
 80057c0:	e000ed00 	.word	0xe000ed00

080057c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b089      	sub	sp, #36	@ 0x24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f003 0307 	and.w	r3, r3, #7
 80057d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	f1c3 0307 	rsb	r3, r3, #7
 80057de:	2b04      	cmp	r3, #4
 80057e0:	bf28      	it	cs
 80057e2:	2304      	movcs	r3, #4
 80057e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	3304      	adds	r3, #4
 80057ea:	2b06      	cmp	r3, #6
 80057ec:	d902      	bls.n	80057f4 <NVIC_EncodePriority+0x30>
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	3b03      	subs	r3, #3
 80057f2:	e000      	b.n	80057f6 <NVIC_EncodePriority+0x32>
 80057f4:	2300      	movs	r3, #0
 80057f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005802:	43da      	mvns	r2, r3
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	401a      	ands	r2, r3
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800580c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	fa01 f303 	lsl.w	r3, r1, r3
 8005816:	43d9      	mvns	r1, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800581c:	4313      	orrs	r3, r2
         );
}
 800581e:	4618      	mov	r0, r3
 8005820:	3724      	adds	r7, #36	@ 0x24
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b082      	sub	sp, #8
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7ff ff4c 	bl	80056d0 <__NVIC_SetPriorityGrouping>
}
 8005838:	bf00      	nop
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	4603      	mov	r3, r0
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800584e:	2300      	movs	r3, #0
 8005850:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005852:	f7ff ff61 	bl	8005718 <__NVIC_GetPriorityGrouping>
 8005856:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	68b9      	ldr	r1, [r7, #8]
 800585c:	6978      	ldr	r0, [r7, #20]
 800585e:	f7ff ffb1 	bl	80057c4 <NVIC_EncodePriority>
 8005862:	4602      	mov	r2, r0
 8005864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005868:	4611      	mov	r1, r2
 800586a:	4618      	mov	r0, r3
 800586c:	f7ff ff80 	bl	8005770 <__NVIC_SetPriority>
}
 8005870:	bf00      	nop
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	4603      	mov	r3, r0
 8005880:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005886:	4618      	mov	r0, r3
 8005888:	f7ff ff54 	bl	8005734 <__NVIC_EnableIRQ>
}
 800588c:	bf00      	nop
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800589e:	2300      	movs	r3, #0
 80058a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80058a2:	e160      	b.n	8005b66 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	2101      	movs	r1, #1
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	fa01 f303 	lsl.w	r3, r1, r3
 80058b0:	4013      	ands	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f000 8152 	beq.w	8005b60 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f003 0303 	and.w	r3, r3, #3
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d005      	beq.n	80058d4 <HAL_GPIO_Init+0x40>
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f003 0303 	and.w	r3, r3, #3
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d130      	bne.n	8005936 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	2203      	movs	r2, #3
 80058e0:	fa02 f303 	lsl.w	r3, r2, r3
 80058e4:	43db      	mvns	r3, r3
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	4013      	ands	r3, r2
 80058ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	68da      	ldr	r2, [r3, #12]
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	005b      	lsls	r3, r3, #1
 80058f4:	fa02 f303 	lsl.w	r3, r2, r3
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800590a:	2201      	movs	r2, #1
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	fa02 f303 	lsl.w	r3, r2, r3
 8005912:	43db      	mvns	r3, r3
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	4013      	ands	r3, r2
 8005918:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	091b      	lsrs	r3, r3, #4
 8005920:	f003 0201 	and.w	r2, r3, #1
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	fa02 f303 	lsl.w	r3, r2, r3
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	4313      	orrs	r3, r2
 800592e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f003 0303 	and.w	r3, r3, #3
 800593e:	2b03      	cmp	r3, #3
 8005940:	d017      	beq.n	8005972 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	2203      	movs	r2, #3
 800594e:	fa02 f303 	lsl.w	r3, r2, r3
 8005952:	43db      	mvns	r3, r3
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	4013      	ands	r3, r2
 8005958:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	689a      	ldr	r2, [r3, #8]
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	005b      	lsls	r3, r3, #1
 8005962:	fa02 f303 	lsl.w	r3, r2, r3
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	4313      	orrs	r3, r2
 800596a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f003 0303 	and.w	r3, r3, #3
 800597a:	2b02      	cmp	r3, #2
 800597c:	d123      	bne.n	80059c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	08da      	lsrs	r2, r3, #3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	3208      	adds	r2, #8
 8005986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800598a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f003 0307 	and.w	r3, r3, #7
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	220f      	movs	r2, #15
 8005996:	fa02 f303 	lsl.w	r3, r2, r3
 800599a:	43db      	mvns	r3, r3
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	4013      	ands	r3, r2
 80059a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	691a      	ldr	r2, [r3, #16]
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f003 0307 	and.w	r3, r3, #7
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	fa02 f303 	lsl.w	r3, r2, r3
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	08da      	lsrs	r2, r3, #3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3208      	adds	r2, #8
 80059c0:	6939      	ldr	r1, [r7, #16]
 80059c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	005b      	lsls	r3, r3, #1
 80059d0:	2203      	movs	r2, #3
 80059d2:	fa02 f303 	lsl.w	r3, r2, r3
 80059d6:	43db      	mvns	r3, r3
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	4013      	ands	r3, r2
 80059dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f003 0203 	and.w	r2, r3, #3
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	fa02 f303 	lsl.w	r3, r2, r3
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 80ac 	beq.w	8005b60 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a08:	4b5e      	ldr	r3, [pc, #376]	@ (8005b84 <HAL_GPIO_Init+0x2f0>)
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	4a5d      	ldr	r2, [pc, #372]	@ (8005b84 <HAL_GPIO_Init+0x2f0>)
 8005a0e:	f043 0301 	orr.w	r3, r3, #1
 8005a12:	6193      	str	r3, [r2, #24]
 8005a14:	4b5b      	ldr	r3, [pc, #364]	@ (8005b84 <HAL_GPIO_Init+0x2f0>)
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	60bb      	str	r3, [r7, #8]
 8005a1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005a20:	4a59      	ldr	r2, [pc, #356]	@ (8005b88 <HAL_GPIO_Init+0x2f4>)
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	089b      	lsrs	r3, r3, #2
 8005a26:	3302      	adds	r3, #2
 8005a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f003 0303 	and.w	r3, r3, #3
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	220f      	movs	r2, #15
 8005a38:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3c:	43db      	mvns	r3, r3
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	4013      	ands	r3, r2
 8005a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005a4a:	d025      	beq.n	8005a98 <HAL_GPIO_Init+0x204>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a4f      	ldr	r2, [pc, #316]	@ (8005b8c <HAL_GPIO_Init+0x2f8>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d01f      	beq.n	8005a94 <HAL_GPIO_Init+0x200>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a4e      	ldr	r2, [pc, #312]	@ (8005b90 <HAL_GPIO_Init+0x2fc>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d019      	beq.n	8005a90 <HAL_GPIO_Init+0x1fc>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a4d      	ldr	r2, [pc, #308]	@ (8005b94 <HAL_GPIO_Init+0x300>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d013      	beq.n	8005a8c <HAL_GPIO_Init+0x1f8>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a4c      	ldr	r2, [pc, #304]	@ (8005b98 <HAL_GPIO_Init+0x304>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d00d      	beq.n	8005a88 <HAL_GPIO_Init+0x1f4>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a4b      	ldr	r2, [pc, #300]	@ (8005b9c <HAL_GPIO_Init+0x308>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d007      	beq.n	8005a84 <HAL_GPIO_Init+0x1f0>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a4a      	ldr	r2, [pc, #296]	@ (8005ba0 <HAL_GPIO_Init+0x30c>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d101      	bne.n	8005a80 <HAL_GPIO_Init+0x1ec>
 8005a7c:	2306      	movs	r3, #6
 8005a7e:	e00c      	b.n	8005a9a <HAL_GPIO_Init+0x206>
 8005a80:	2307      	movs	r3, #7
 8005a82:	e00a      	b.n	8005a9a <HAL_GPIO_Init+0x206>
 8005a84:	2305      	movs	r3, #5
 8005a86:	e008      	b.n	8005a9a <HAL_GPIO_Init+0x206>
 8005a88:	2304      	movs	r3, #4
 8005a8a:	e006      	b.n	8005a9a <HAL_GPIO_Init+0x206>
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e004      	b.n	8005a9a <HAL_GPIO_Init+0x206>
 8005a90:	2302      	movs	r3, #2
 8005a92:	e002      	b.n	8005a9a <HAL_GPIO_Init+0x206>
 8005a94:	2301      	movs	r3, #1
 8005a96:	e000      	b.n	8005a9a <HAL_GPIO_Init+0x206>
 8005a98:	2300      	movs	r3, #0
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	f002 0203 	and.w	r2, r2, #3
 8005aa0:	0092      	lsls	r2, r2, #2
 8005aa2:	4093      	lsls	r3, r2
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005aaa:	4937      	ldr	r1, [pc, #220]	@ (8005b88 <HAL_GPIO_Init+0x2f4>)
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	089b      	lsrs	r3, r3, #2
 8005ab0:	3302      	adds	r3, #2
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ab8:	4b3a      	ldr	r3, [pc, #232]	@ (8005ba4 <HAL_GPIO_Init+0x310>)
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	43db      	mvns	r3, r3
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005adc:	4a31      	ldr	r2, [pc, #196]	@ (8005ba4 <HAL_GPIO_Init+0x310>)
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ae2:	4b30      	ldr	r3, [pc, #192]	@ (8005ba4 <HAL_GPIO_Init+0x310>)
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	43db      	mvns	r3, r3
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	4013      	ands	r3, r2
 8005af0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005b06:	4a27      	ldr	r2, [pc, #156]	@ (8005ba4 <HAL_GPIO_Init+0x310>)
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005b0c:	4b25      	ldr	r3, [pc, #148]	@ (8005ba4 <HAL_GPIO_Init+0x310>)
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	43db      	mvns	r3, r3
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005b30:	4a1c      	ldr	r2, [pc, #112]	@ (8005ba4 <HAL_GPIO_Init+0x310>)
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b36:	4b1b      	ldr	r3, [pc, #108]	@ (8005ba4 <HAL_GPIO_Init+0x310>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	43db      	mvns	r3, r3
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	4013      	ands	r3, r2
 8005b44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005b5a:	4a12      	ldr	r2, [pc, #72]	@ (8005ba4 <HAL_GPIO_Init+0x310>)
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	3301      	adds	r3, #1
 8005b64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f47f ae97 	bne.w	80058a4 <HAL_GPIO_Init+0x10>
  }
}
 8005b76:	bf00      	nop
 8005b78:	bf00      	nop
 8005b7a:	371c      	adds	r7, #28
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	40021000 	.word	0x40021000
 8005b88:	40010000 	.word	0x40010000
 8005b8c:	48000400 	.word	0x48000400
 8005b90:	48000800 	.word	0x48000800
 8005b94:	48000c00 	.word	0x48000c00
 8005b98:	48001000 	.word	0x48001000
 8005b9c:	48001400 	.word	0x48001400
 8005ba0:	48001800 	.word	0x48001800
 8005ba4:	40010400 	.word	0x40010400

08005ba8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	691a      	ldr	r2, [r3, #16]
 8005bb8:	887b      	ldrh	r3, [r7, #2]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d002      	beq.n	8005bc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	73fb      	strb	r3, [r7, #15]
 8005bc4:	e001      	b.n	8005bca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3714      	adds	r7, #20
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	460b      	mov	r3, r1
 8005be2:	807b      	strh	r3, [r7, #2]
 8005be4:	4613      	mov	r3, r2
 8005be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005be8:	787b      	ldrb	r3, [r7, #1]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005bee:	887a      	ldrh	r2, [r7, #2]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005bf4:	e002      	b.n	8005bfc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005bf6:	887a      	ldrh	r2, [r7, #2]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	695b      	ldr	r3, [r3, #20]
 8005c18:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005c1a:	887a      	ldrh	r2, [r7, #2]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4013      	ands	r3, r2
 8005c20:	041a      	lsls	r2, r3, #16
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	43d9      	mvns	r1, r3
 8005c26:	887b      	ldrh	r3, [r7, #2]
 8005c28:	400b      	ands	r3, r1
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	619a      	str	r2, [r3, #24]
}
 8005c30:	bf00      	nop
 8005c32:	3714      	adds	r7, #20
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e08d      	b.n	8005d6a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d106      	bne.n	8005c68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7fd fd2a 	bl	80036bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2224      	movs	r2, #36	@ 0x24
 8005c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f022 0201 	bic.w	r2, r2, #1
 8005c7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005c8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d107      	bne.n	8005cb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	689a      	ldr	r2, [r3, #8]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005cb2:	609a      	str	r2, [r3, #8]
 8005cb4:	e006      	b.n	8005cc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	689a      	ldr	r2, [r3, #8]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005cc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d108      	bne.n	8005cde <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cda:	605a      	str	r2, [r3, #4]
 8005cdc:	e007      	b.n	8005cee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005cec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	6812      	ldr	r2, [r2, #0]
 8005cf8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005cfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691a      	ldr	r2, [r3, #16]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	69d9      	ldr	r1, [r3, #28]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a1a      	ldr	r2, [r3, #32]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 0201 	orr.w	r2, r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2220      	movs	r2, #32
 8005d56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
	...

08005d74 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b088      	sub	sp, #32
 8005d78:	af02      	add	r7, sp, #8
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	607a      	str	r2, [r7, #4]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	460b      	mov	r3, r1
 8005d82:	817b      	strh	r3, [r7, #10]
 8005d84:	4613      	mov	r3, r2
 8005d86:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	2b20      	cmp	r3, #32
 8005d92:	f040 80fd 	bne.w	8005f90 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d101      	bne.n	8005da4 <HAL_I2C_Master_Transmit+0x30>
 8005da0:	2302      	movs	r3, #2
 8005da2:	e0f6      	b.n	8005f92 <HAL_I2C_Master_Transmit+0x21e>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005dac:	f7fe fb2e 	bl	800440c <HAL_GetTick>
 8005db0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	2319      	movs	r3, #25
 8005db8:	2201      	movs	r2, #1
 8005dba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f000 fce0 	bl	8006784 <I2C_WaitOnFlagUntilTimeout>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e0e1      	b.n	8005f92 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2221      	movs	r2, #33	@ 0x21
 8005dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2210      	movs	r2, #16
 8005dda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	893a      	ldrh	r2, [r7, #8]
 8005dee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	2bff      	cmp	r3, #255	@ 0xff
 8005dfe:	d906      	bls.n	8005e0e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	22ff      	movs	r2, #255	@ 0xff
 8005e04:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005e06:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	e007      	b.n	8005e1e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005e18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e1c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d024      	beq.n	8005e70 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2a:	781a      	ldrb	r2, [r3, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e36:	1c5a      	adds	r2, r3, #1
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	3b01      	subs	r3, #1
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	b2da      	uxtb	r2, r3
 8005e60:	8979      	ldrh	r1, [r7, #10]
 8005e62:	4b4e      	ldr	r3, [pc, #312]	@ (8005f9c <HAL_I2C_Master_Transmit+0x228>)
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 fedb 	bl	8006c24 <I2C_TransferConfig>
 8005e6e:	e066      	b.n	8005f3e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e74:	b2da      	uxtb	r2, r3
 8005e76:	8979      	ldrh	r1, [r7, #10]
 8005e78:	4b48      	ldr	r3, [pc, #288]	@ (8005f9c <HAL_I2C_Master_Transmit+0x228>)
 8005e7a:	9300      	str	r3, [sp, #0]
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f000 fed0 	bl	8006c24 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005e84:	e05b      	b.n	8005f3e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	6a39      	ldr	r1, [r7, #32]
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f000 fcd3 	bl	8006836 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e07b      	b.n	8005f92 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9e:	781a      	ldrb	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d034      	beq.n	8005f3e <HAL_I2C_Master_Transmit+0x1ca>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d130      	bne.n	8005f3e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	2180      	movs	r1, #128	@ 0x80
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f000 fc4c 	bl	8006784 <I2C_WaitOnFlagUntilTimeout>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e04d      	b.n	8005f92 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	2bff      	cmp	r3, #255	@ 0xff
 8005efe:	d90e      	bls.n	8005f1e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	22ff      	movs	r2, #255	@ 0xff
 8005f04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	8979      	ldrh	r1, [r7, #10]
 8005f0e:	2300      	movs	r3, #0
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f000 fe84 	bl	8006c24 <I2C_TransferConfig>
 8005f1c:	e00f      	b.n	8005f3e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	8979      	ldrh	r1, [r7, #10]
 8005f30:	2300      	movs	r3, #0
 8005f32:	9300      	str	r3, [sp, #0]
 8005f34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f000 fe73 	bl	8006c24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d19e      	bne.n	8005e86 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	6a39      	ldr	r1, [r7, #32]
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f000 fcb9 	bl	80068c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d001      	beq.n	8005f5c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e01a      	b.n	8005f92 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2220      	movs	r2, #32
 8005f62:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6859      	ldr	r1, [r3, #4]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa0 <HAL_I2C_Master_Transmit+0x22c>)
 8005f70:	400b      	ands	r3, r1
 8005f72:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	e000      	b.n	8005f92 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005f90:	2302      	movs	r3, #2
  }
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3718      	adds	r7, #24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	80002000 	.word	0x80002000
 8005fa0:	fe00e800 	.word	0xfe00e800

08005fa4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b088      	sub	sp, #32
 8005fa8:	af02      	add	r7, sp, #8
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	607a      	str	r2, [r7, #4]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	817b      	strh	r3, [r7, #10]
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b20      	cmp	r3, #32
 8005fc2:	f040 80db 	bne.w	800617c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d101      	bne.n	8005fd4 <HAL_I2C_Master_Receive+0x30>
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	e0d4      	b.n	800617e <HAL_I2C_Master_Receive+0x1da>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005fdc:	f7fe fa16 	bl	800440c <HAL_GetTick>
 8005fe0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	2319      	movs	r3, #25
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 fbc8 	bl	8006784 <I2C_WaitOnFlagUntilTimeout>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e0bf      	b.n	800617e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2222      	movs	r2, #34	@ 0x22
 8006002:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2210      	movs	r2, #16
 800600a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	893a      	ldrh	r2, [r7, #8]
 800601e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800602a:	b29b      	uxth	r3, r3
 800602c:	2bff      	cmp	r3, #255	@ 0xff
 800602e:	d90e      	bls.n	800604e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2201      	movs	r2, #1
 8006034:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800603a:	b2da      	uxtb	r2, r3
 800603c:	8979      	ldrh	r1, [r7, #10]
 800603e:	4b52      	ldr	r3, [pc, #328]	@ (8006188 <HAL_I2C_Master_Receive+0x1e4>)
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f000 fdec 	bl	8006c24 <I2C_TransferConfig>
 800604c:	e06d      	b.n	800612a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006052:	b29a      	uxth	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800605c:	b2da      	uxtb	r2, r3
 800605e:	8979      	ldrh	r1, [r7, #10]
 8006060:	4b49      	ldr	r3, [pc, #292]	@ (8006188 <HAL_I2C_Master_Receive+0x1e4>)
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 fddb 	bl	8006c24 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800606e:	e05c      	b.n	800612a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	6a39      	ldr	r1, [r7, #32]
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f000 fc69 	bl	800694c <I2C_WaitOnRXNEFlagUntilTimeout>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d001      	beq.n	8006084 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e07c      	b.n	800617e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800608e:	b2d2      	uxtb	r2, r2
 8006090:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006096:	1c5a      	adds	r2, r3, #1
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060a0:	3b01      	subs	r3, #1
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	3b01      	subs	r3, #1
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d034      	beq.n	800612a <HAL_I2C_Master_Receive+0x186>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d130      	bne.n	800612a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	6a3b      	ldr	r3, [r7, #32]
 80060ce:	2200      	movs	r2, #0
 80060d0:	2180      	movs	r1, #128	@ 0x80
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 fb56 	bl	8006784 <I2C_WaitOnFlagUntilTimeout>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e04d      	b.n	800617e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	2bff      	cmp	r3, #255	@ 0xff
 80060ea:	d90e      	bls.n	800610a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	22ff      	movs	r2, #255	@ 0xff
 80060f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	8979      	ldrh	r1, [r7, #10]
 80060fa:	2300      	movs	r3, #0
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f000 fd8e 	bl	8006c24 <I2C_TransferConfig>
 8006108:	e00f      	b.n	800612a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800610e:	b29a      	uxth	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006118:	b2da      	uxtb	r2, r3
 800611a:	8979      	ldrh	r1, [r7, #10]
 800611c:	2300      	movs	r3, #0
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f000 fd7d 	bl	8006c24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800612e:	b29b      	uxth	r3, r3
 8006130:	2b00      	cmp	r3, #0
 8006132:	d19d      	bne.n	8006070 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	6a39      	ldr	r1, [r7, #32]
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f000 fbc3 	bl	80068c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e01a      	b.n	800617e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2220      	movs	r2, #32
 800614e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6859      	ldr	r1, [r3, #4]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	4b0c      	ldr	r3, [pc, #48]	@ (800618c <HAL_I2C_Master_Receive+0x1e8>)
 800615c:	400b      	ands	r3, r1
 800615e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2220      	movs	r2, #32
 8006164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006178:	2300      	movs	r3, #0
 800617a:	e000      	b.n	800617e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800617c:	2302      	movs	r3, #2
  }
}
 800617e:	4618      	mov	r0, r3
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	80002400 	.word	0x80002400
 800618c:	fe00e800 	.word	0xfe00e800

08006190 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b088      	sub	sp, #32
 8006194:	af02      	add	r7, sp, #8
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	4608      	mov	r0, r1
 800619a:	4611      	mov	r1, r2
 800619c:	461a      	mov	r2, r3
 800619e:	4603      	mov	r3, r0
 80061a0:	817b      	strh	r3, [r7, #10]
 80061a2:	460b      	mov	r3, r1
 80061a4:	813b      	strh	r3, [r7, #8]
 80061a6:	4613      	mov	r3, r2
 80061a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b20      	cmp	r3, #32
 80061b4:	f040 80f9 	bne.w	80063aa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80061b8:	6a3b      	ldr	r3, [r7, #32]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d002      	beq.n	80061c4 <HAL_I2C_Mem_Write+0x34>
 80061be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d105      	bne.n	80061d0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061ca:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e0ed      	b.n	80063ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d101      	bne.n	80061de <HAL_I2C_Mem_Write+0x4e>
 80061da:	2302      	movs	r3, #2
 80061dc:	e0e6      	b.n	80063ac <HAL_I2C_Mem_Write+0x21c>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80061e6:	f7fe f911 	bl	800440c <HAL_GetTick>
 80061ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	2319      	movs	r3, #25
 80061f2:	2201      	movs	r2, #1
 80061f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 fac3 	bl	8006784 <I2C_WaitOnFlagUntilTimeout>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e0d1      	b.n	80063ac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2221      	movs	r2, #33	@ 0x21
 800620c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2240      	movs	r2, #64	@ 0x40
 8006214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6a3a      	ldr	r2, [r7, #32]
 8006222:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006228:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006230:	88f8      	ldrh	r0, [r7, #6]
 8006232:	893a      	ldrh	r2, [r7, #8]
 8006234:	8979      	ldrh	r1, [r7, #10]
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	9301      	str	r3, [sp, #4]
 800623a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	4603      	mov	r3, r0
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f000 f9d3 	bl	80065ec <I2C_RequestMemoryWrite>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d005      	beq.n	8006258 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e0a9      	b.n	80063ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800625c:	b29b      	uxth	r3, r3
 800625e:	2bff      	cmp	r3, #255	@ 0xff
 8006260:	d90e      	bls.n	8006280 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	22ff      	movs	r2, #255	@ 0xff
 8006266:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800626c:	b2da      	uxtb	r2, r3
 800626e:	8979      	ldrh	r1, [r7, #10]
 8006270:	2300      	movs	r3, #0
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f000 fcd3 	bl	8006c24 <I2C_TransferConfig>
 800627e:	e00f      	b.n	80062a0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006284:	b29a      	uxth	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800628e:	b2da      	uxtb	r2, r3
 8006290:	8979      	ldrh	r1, [r7, #10]
 8006292:	2300      	movs	r3, #0
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 fcc2 	bl	8006c24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 fac6 	bl	8006836 <I2C_WaitOnTXISFlagUntilTimeout>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e07b      	b.n	80063ac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b8:	781a      	ldrb	r2, [r3, #0]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c4:	1c5a      	adds	r2, r3, #1
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	3b01      	subs	r3, #1
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062dc:	3b01      	subs	r3, #1
 80062de:	b29a      	uxth	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d034      	beq.n	8006358 <HAL_I2C_Mem_Write+0x1c8>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d130      	bne.n	8006358 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062fc:	2200      	movs	r2, #0
 80062fe:	2180      	movs	r1, #128	@ 0x80
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 fa3f 	bl	8006784 <I2C_WaitOnFlagUntilTimeout>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e04d      	b.n	80063ac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006314:	b29b      	uxth	r3, r3
 8006316:	2bff      	cmp	r3, #255	@ 0xff
 8006318:	d90e      	bls.n	8006338 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	22ff      	movs	r2, #255	@ 0xff
 800631e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006324:	b2da      	uxtb	r2, r3
 8006326:	8979      	ldrh	r1, [r7, #10]
 8006328:	2300      	movs	r3, #0
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f000 fc77 	bl	8006c24 <I2C_TransferConfig>
 8006336:	e00f      	b.n	8006358 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800633c:	b29a      	uxth	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006346:	b2da      	uxtb	r2, r3
 8006348:	8979      	ldrh	r1, [r7, #10]
 800634a:	2300      	movs	r3, #0
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f000 fc66 	bl	8006c24 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800635c:	b29b      	uxth	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d19e      	bne.n	80062a0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f000 faac 	bl	80068c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e01a      	b.n	80063ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2220      	movs	r2, #32
 800637c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6859      	ldr	r1, [r3, #4]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	4b0a      	ldr	r3, [pc, #40]	@ (80063b4 <HAL_I2C_Mem_Write+0x224>)
 800638a:	400b      	ands	r3, r1
 800638c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2220      	movs	r2, #32
 8006392:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80063a6:	2300      	movs	r3, #0
 80063a8:	e000      	b.n	80063ac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80063aa:	2302      	movs	r3, #2
  }
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3718      	adds	r7, #24
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	fe00e800 	.word	0xfe00e800

080063b8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b088      	sub	sp, #32
 80063bc:	af02      	add	r7, sp, #8
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	4608      	mov	r0, r1
 80063c2:	4611      	mov	r1, r2
 80063c4:	461a      	mov	r2, r3
 80063c6:	4603      	mov	r3, r0
 80063c8:	817b      	strh	r3, [r7, #10]
 80063ca:	460b      	mov	r3, r1
 80063cc:	813b      	strh	r3, [r7, #8]
 80063ce:	4613      	mov	r3, r2
 80063d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b20      	cmp	r3, #32
 80063dc:	f040 80fd 	bne.w	80065da <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d002      	beq.n	80063ec <HAL_I2C_Mem_Read+0x34>
 80063e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d105      	bne.n	80063f8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063f2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e0f1      	b.n	80065dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d101      	bne.n	8006406 <HAL_I2C_Mem_Read+0x4e>
 8006402:	2302      	movs	r3, #2
 8006404:	e0ea      	b.n	80065dc <HAL_I2C_Mem_Read+0x224>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800640e:	f7fd fffd 	bl	800440c <HAL_GetTick>
 8006412:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	2319      	movs	r3, #25
 800641a:	2201      	movs	r2, #1
 800641c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f000 f9af 	bl	8006784 <I2C_WaitOnFlagUntilTimeout>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e0d5      	b.n	80065dc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2222      	movs	r2, #34	@ 0x22
 8006434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2240      	movs	r2, #64	@ 0x40
 800643c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6a3a      	ldr	r2, [r7, #32]
 800644a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006450:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006458:	88f8      	ldrh	r0, [r7, #6]
 800645a:	893a      	ldrh	r2, [r7, #8]
 800645c:	8979      	ldrh	r1, [r7, #10]
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	9301      	str	r3, [sp, #4]
 8006462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	4603      	mov	r3, r0
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f000 f913 	bl	8006694 <I2C_RequestMemoryRead>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d005      	beq.n	8006480 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e0ad      	b.n	80065dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006484:	b29b      	uxth	r3, r3
 8006486:	2bff      	cmp	r3, #255	@ 0xff
 8006488:	d90e      	bls.n	80064a8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2201      	movs	r2, #1
 800648e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006494:	b2da      	uxtb	r2, r3
 8006496:	8979      	ldrh	r1, [r7, #10]
 8006498:	4b52      	ldr	r3, [pc, #328]	@ (80065e4 <HAL_I2C_Mem_Read+0x22c>)
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f000 fbbf 	bl	8006c24 <I2C_TransferConfig>
 80064a6:	e00f      	b.n	80064c8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064b6:	b2da      	uxtb	r2, r3
 80064b8:	8979      	ldrh	r1, [r7, #10]
 80064ba:	4b4a      	ldr	r3, [pc, #296]	@ (80065e4 <HAL_I2C_Mem_Read+0x22c>)
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f000 fbae 	bl	8006c24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ce:	2200      	movs	r2, #0
 80064d0:	2104      	movs	r1, #4
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f000 f956 	bl	8006784 <I2C_WaitOnFlagUntilTimeout>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e07c      	b.n	80065dc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ec:	b2d2      	uxtb	r2, r2
 80064ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f4:	1c5a      	adds	r2, r3, #1
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064fe:	3b01      	subs	r3, #1
 8006500:	b29a      	uxth	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800650a:	b29b      	uxth	r3, r3
 800650c:	3b01      	subs	r3, #1
 800650e:	b29a      	uxth	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006518:	b29b      	uxth	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d034      	beq.n	8006588 <HAL_I2C_Mem_Read+0x1d0>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006522:	2b00      	cmp	r3, #0
 8006524:	d130      	bne.n	8006588 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	9300      	str	r3, [sp, #0]
 800652a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800652c:	2200      	movs	r2, #0
 800652e:	2180      	movs	r1, #128	@ 0x80
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f000 f927 	bl	8006784 <I2C_WaitOnFlagUntilTimeout>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d001      	beq.n	8006540 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e04d      	b.n	80065dc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006544:	b29b      	uxth	r3, r3
 8006546:	2bff      	cmp	r3, #255	@ 0xff
 8006548:	d90e      	bls.n	8006568 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2201      	movs	r2, #1
 800654e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006554:	b2da      	uxtb	r2, r3
 8006556:	8979      	ldrh	r1, [r7, #10]
 8006558:	2300      	movs	r3, #0
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f000 fb5f 	bl	8006c24 <I2C_TransferConfig>
 8006566:	e00f      	b.n	8006588 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800656c:	b29a      	uxth	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006576:	b2da      	uxtb	r2, r3
 8006578:	8979      	ldrh	r1, [r7, #10]
 800657a:	2300      	movs	r3, #0
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f000 fb4e 	bl	8006c24 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800658c:	b29b      	uxth	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d19a      	bne.n	80064c8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 f994 	bl	80068c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e01a      	b.n	80065dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2220      	movs	r2, #32
 80065ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6859      	ldr	r1, [r3, #4]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	4b0b      	ldr	r3, [pc, #44]	@ (80065e8 <HAL_I2C_Mem_Read+0x230>)
 80065ba:	400b      	ands	r3, r1
 80065bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2220      	movs	r2, #32
 80065c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	e000      	b.n	80065dc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80065da:	2302      	movs	r3, #2
  }
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	80002400 	.word	0x80002400
 80065e8:	fe00e800 	.word	0xfe00e800

080065ec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af02      	add	r7, sp, #8
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	4608      	mov	r0, r1
 80065f6:	4611      	mov	r1, r2
 80065f8:	461a      	mov	r2, r3
 80065fa:	4603      	mov	r3, r0
 80065fc:	817b      	strh	r3, [r7, #10]
 80065fe:	460b      	mov	r3, r1
 8006600:	813b      	strh	r3, [r7, #8]
 8006602:	4613      	mov	r3, r2
 8006604:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006606:	88fb      	ldrh	r3, [r7, #6]
 8006608:	b2da      	uxtb	r2, r3
 800660a:	8979      	ldrh	r1, [r7, #10]
 800660c:	4b20      	ldr	r3, [pc, #128]	@ (8006690 <I2C_RequestMemoryWrite+0xa4>)
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f000 fb05 	bl	8006c24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800661a:	69fa      	ldr	r2, [r7, #28]
 800661c:	69b9      	ldr	r1, [r7, #24]
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f000 f909 	bl	8006836 <I2C_WaitOnTXISFlagUntilTimeout>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e02c      	b.n	8006688 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800662e:	88fb      	ldrh	r3, [r7, #6]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d105      	bne.n	8006640 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006634:	893b      	ldrh	r3, [r7, #8]
 8006636:	b2da      	uxtb	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	629a      	str	r2, [r3, #40]	@ 0x28
 800663e:	e015      	b.n	800666c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006640:	893b      	ldrh	r3, [r7, #8]
 8006642:	0a1b      	lsrs	r3, r3, #8
 8006644:	b29b      	uxth	r3, r3
 8006646:	b2da      	uxtb	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800664e:	69fa      	ldr	r2, [r7, #28]
 8006650:	69b9      	ldr	r1, [r7, #24]
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 f8ef 	bl	8006836 <I2C_WaitOnTXISFlagUntilTimeout>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e012      	b.n	8006688 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006662:	893b      	ldrh	r3, [r7, #8]
 8006664:	b2da      	uxtb	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	2200      	movs	r2, #0
 8006674:	2180      	movs	r1, #128	@ 0x80
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f000 f884 	bl	8006784 <I2C_WaitOnFlagUntilTimeout>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e000      	b.n	8006688 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	80002000 	.word	0x80002000

08006694 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af02      	add	r7, sp, #8
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	4608      	mov	r0, r1
 800669e:	4611      	mov	r1, r2
 80066a0:	461a      	mov	r2, r3
 80066a2:	4603      	mov	r3, r0
 80066a4:	817b      	strh	r3, [r7, #10]
 80066a6:	460b      	mov	r3, r1
 80066a8:	813b      	strh	r3, [r7, #8]
 80066aa:	4613      	mov	r3, r2
 80066ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80066ae:	88fb      	ldrh	r3, [r7, #6]
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	8979      	ldrh	r1, [r7, #10]
 80066b4:	4b20      	ldr	r3, [pc, #128]	@ (8006738 <I2C_RequestMemoryRead+0xa4>)
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	2300      	movs	r3, #0
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 fab2 	bl	8006c24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066c0:	69fa      	ldr	r2, [r7, #28]
 80066c2:	69b9      	ldr	r1, [r7, #24]
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f000 f8b6 	bl	8006836 <I2C_WaitOnTXISFlagUntilTimeout>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d001      	beq.n	80066d4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e02c      	b.n	800672e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066d4:	88fb      	ldrh	r3, [r7, #6]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d105      	bne.n	80066e6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066da:	893b      	ldrh	r3, [r7, #8]
 80066dc:	b2da      	uxtb	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80066e4:	e015      	b.n	8006712 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80066e6:	893b      	ldrh	r3, [r7, #8]
 80066e8:	0a1b      	lsrs	r3, r3, #8
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	b2da      	uxtb	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066f4:	69fa      	ldr	r2, [r7, #28]
 80066f6:	69b9      	ldr	r1, [r7, #24]
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f000 f89c 	bl	8006836 <I2C_WaitOnTXISFlagUntilTimeout>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d001      	beq.n	8006708 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e012      	b.n	800672e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006708:	893b      	ldrh	r3, [r7, #8]
 800670a:	b2da      	uxtb	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	2200      	movs	r2, #0
 800671a:	2140      	movs	r1, #64	@ 0x40
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f000 f831 	bl	8006784 <I2C_WaitOnFlagUntilTimeout>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d001      	beq.n	800672c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e000      	b.n	800672e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	80002000 	.word	0x80002000

0800673c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	f003 0302 	and.w	r3, r3, #2
 800674e:	2b02      	cmp	r3, #2
 8006750:	d103      	bne.n	800675a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2200      	movs	r2, #0
 8006758:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	2b01      	cmp	r3, #1
 8006766:	d007      	beq.n	8006778 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	699a      	ldr	r2, [r3, #24]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 0201 	orr.w	r2, r2, #1
 8006776:	619a      	str	r2, [r3, #24]
  }
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	603b      	str	r3, [r7, #0]
 8006790:	4613      	mov	r3, r2
 8006792:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006794:	e03b      	b.n	800680e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006796:	69ba      	ldr	r2, [r7, #24]
 8006798:	6839      	ldr	r1, [r7, #0]
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f000 f962 	bl	8006a64 <I2C_IsErrorOccurred>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e041      	b.n	800682e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80067b0:	d02d      	beq.n	800680e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067b2:	f7fd fe2b 	bl	800440c <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	683a      	ldr	r2, [r7, #0]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d302      	bcc.n	80067c8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d122      	bne.n	800680e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699a      	ldr	r2, [r3, #24]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	4013      	ands	r3, r2
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	bf0c      	ite	eq
 80067d8:	2301      	moveq	r3, #1
 80067da:	2300      	movne	r3, #0
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	461a      	mov	r2, r3
 80067e0:	79fb      	ldrb	r3, [r7, #7]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d113      	bne.n	800680e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ea:	f043 0220 	orr.w	r2, r3, #32
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2220      	movs	r2, #32
 80067f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e00f      	b.n	800682e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	699a      	ldr	r2, [r3, #24]
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	4013      	ands	r3, r2
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	429a      	cmp	r2, r3
 800681c:	bf0c      	ite	eq
 800681e:	2301      	moveq	r3, #1
 8006820:	2300      	movne	r3, #0
 8006822:	b2db      	uxtb	r3, r3
 8006824:	461a      	mov	r2, r3
 8006826:	79fb      	ldrb	r3, [r7, #7]
 8006828:	429a      	cmp	r2, r3
 800682a:	d0b4      	beq.n	8006796 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	60f8      	str	r0, [r7, #12]
 800683e:	60b9      	str	r1, [r7, #8]
 8006840:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006842:	e033      	b.n	80068ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	68b9      	ldr	r1, [r7, #8]
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 f90b 	bl	8006a64 <I2C_IsErrorOccurred>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d001      	beq.n	8006858 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e031      	b.n	80068bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800685e:	d025      	beq.n	80068ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006860:	f7fd fdd4 	bl	800440c <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	429a      	cmp	r2, r3
 800686e:	d302      	bcc.n	8006876 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d11a      	bne.n	80068ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b02      	cmp	r3, #2
 8006882:	d013      	beq.n	80068ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006888:	f043 0220 	orr.w	r2, r3, #32
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2220      	movs	r2, #32
 8006894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e007      	b.n	80068bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	f003 0302 	and.w	r3, r3, #2
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d1c4      	bne.n	8006844 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068d0:	e02f      	b.n	8006932 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	68b9      	ldr	r1, [r7, #8]
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f000 f8c4 	bl	8006a64 <I2C_IsErrorOccurred>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e02d      	b.n	8006942 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068e6:	f7fd fd91 	bl	800440c <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d302      	bcc.n	80068fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d11a      	bne.n	8006932 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	f003 0320 	and.w	r3, r3, #32
 8006906:	2b20      	cmp	r3, #32
 8006908:	d013      	beq.n	8006932 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800690e:	f043 0220 	orr.w	r2, r3, #32
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2220      	movs	r2, #32
 800691a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e007      	b.n	8006942 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	f003 0320 	and.w	r3, r3, #32
 800693c:	2b20      	cmp	r3, #32
 800693e:	d1c8      	bne.n	80068d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
	...

0800694c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006958:	2300      	movs	r3, #0
 800695a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800695c:	e071      	b.n	8006a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	68b9      	ldr	r1, [r7, #8]
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f000 f87e 	bl	8006a64 <I2C_IsErrorOccurred>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	f003 0320 	and.w	r3, r3, #32
 800697c:	2b20      	cmp	r3, #32
 800697e:	d13b      	bne.n	80069f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8006980:	7dfb      	ldrb	r3, [r7, #23]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d138      	bne.n	80069f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	f003 0304 	and.w	r3, r3, #4
 8006990:	2b04      	cmp	r3, #4
 8006992:	d105      	bne.n	80069a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006998:	2b00      	cmp	r3, #0
 800699a:	d001      	beq.n	80069a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800699c:	2300      	movs	r3, #0
 800699e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	f003 0310 	and.w	r3, r3, #16
 80069aa:	2b10      	cmp	r3, #16
 80069ac:	d121      	bne.n	80069f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2210      	movs	r2, #16
 80069b4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2204      	movs	r2, #4
 80069ba:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2220      	movs	r2, #32
 80069c2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6859      	ldr	r1, [r3, #4]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	4b24      	ldr	r3, [pc, #144]	@ (8006a60 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80069d0:	400b      	ands	r3, r1
 80069d2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2220      	movs	r2, #32
 80069d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	75fb      	strb	r3, [r7, #23]
 80069f0:	e002      	b.n	80069f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80069f8:	f7fd fd08 	bl	800440c <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d302      	bcc.n	8006a0e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d119      	bne.n	8006a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8006a0e:	7dfb      	ldrb	r3, [r7, #23]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d116      	bne.n	8006a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	f003 0304 	and.w	r3, r3, #4
 8006a1e:	2b04      	cmp	r3, #4
 8006a20:	d00f      	beq.n	8006a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a26:	f043 0220 	orr.w	r2, r3, #32
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2220      	movs	r2, #32
 8006a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	f003 0304 	and.w	r3, r3, #4
 8006a4c:	2b04      	cmp	r3, #4
 8006a4e:	d002      	beq.n	8006a56 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8006a50:	7dfb      	ldrb	r3, [r7, #23]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d083      	beq.n	800695e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8006a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3718      	adds	r7, #24
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	fe00e800 	.word	0xfe00e800

08006a64 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b08a      	sub	sp, #40	@ 0x28
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a70:	2300      	movs	r3, #0
 8006a72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	f003 0310 	and.w	r3, r3, #16
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d068      	beq.n	8006b62 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2210      	movs	r2, #16
 8006a96:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a98:	e049      	b.n	8006b2e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006aa0:	d045      	beq.n	8006b2e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006aa2:	f7fd fcb3 	bl	800440c <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d302      	bcc.n	8006ab8 <I2C_IsErrorOccurred+0x54>
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d13a      	bne.n	8006b2e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ac2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006aca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ad6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ada:	d121      	bne.n	8006b20 <I2C_IsErrorOccurred+0xbc>
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ae2:	d01d      	beq.n	8006b20 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006ae4:	7cfb      	ldrb	r3, [r7, #19]
 8006ae6:	2b20      	cmp	r3, #32
 8006ae8:	d01a      	beq.n	8006b20 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	685a      	ldr	r2, [r3, #4]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006af8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006afa:	f7fd fc87 	bl	800440c <HAL_GetTick>
 8006afe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b00:	e00e      	b.n	8006b20 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006b02:	f7fd fc83 	bl	800440c <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	2b19      	cmp	r3, #25
 8006b0e:	d907      	bls.n	8006b20 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006b10:	6a3b      	ldr	r3, [r7, #32]
 8006b12:	f043 0320 	orr.w	r3, r3, #32
 8006b16:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006b1e:	e006      	b.n	8006b2e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	f003 0320 	and.w	r3, r3, #32
 8006b2a:	2b20      	cmp	r3, #32
 8006b2c:	d1e9      	bne.n	8006b02 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	f003 0320 	and.w	r3, r3, #32
 8006b38:	2b20      	cmp	r3, #32
 8006b3a:	d003      	beq.n	8006b44 <I2C_IsErrorOccurred+0xe0>
 8006b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d0aa      	beq.n	8006a9a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006b44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d103      	bne.n	8006b54 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2220      	movs	r2, #32
 8006b52:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006b54:	6a3b      	ldr	r3, [r7, #32]
 8006b56:	f043 0304 	orr.w	r3, r3, #4
 8006b5a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00b      	beq.n	8006b8c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006b74:	6a3b      	ldr	r3, [r7, #32]
 8006b76:	f043 0301 	orr.w	r3, r3, #1
 8006b7a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b84:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00b      	beq.n	8006bae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	f043 0308 	orr.w	r3, r3, #8
 8006b9c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006ba6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00b      	beq.n	8006bd0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	f043 0302 	orr.w	r3, r3, #2
 8006bbe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bc8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d01c      	beq.n	8006c12 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f7ff fdaf 	bl	800673c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6859      	ldr	r1, [r3, #4]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	4b0d      	ldr	r3, [pc, #52]	@ (8006c20 <I2C_IsErrorOccurred+0x1bc>)
 8006bea:	400b      	ands	r3, r1
 8006bec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bf2:	6a3b      	ldr	r3, [r7, #32]
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2220      	movs	r2, #32
 8006bfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006c12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3728      	adds	r7, #40	@ 0x28
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	fe00e800 	.word	0xfe00e800

08006c24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	607b      	str	r3, [r7, #4]
 8006c2e:	460b      	mov	r3, r1
 8006c30:	817b      	strh	r3, [r7, #10]
 8006c32:	4613      	mov	r3, r2
 8006c34:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c36:	897b      	ldrh	r3, [r7, #10]
 8006c38:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c3c:	7a7b      	ldrb	r3, [r7, #9]
 8006c3e:	041b      	lsls	r3, r3, #16
 8006c40:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c44:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c4a:	6a3b      	ldr	r3, [r7, #32]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c52:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	6a3b      	ldr	r3, [r7, #32]
 8006c5c:	0d5b      	lsrs	r3, r3, #21
 8006c5e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006c62:	4b08      	ldr	r3, [pc, #32]	@ (8006c84 <I2C_TransferConfig+0x60>)
 8006c64:	430b      	orrs	r3, r1
 8006c66:	43db      	mvns	r3, r3
 8006c68:	ea02 0103 	and.w	r1, r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006c76:	bf00      	nop
 8006c78:	371c      	adds	r7, #28
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	03ff63ff 	.word	0x03ff63ff

08006c88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b20      	cmp	r3, #32
 8006c9c:	d138      	bne.n	8006d10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d101      	bne.n	8006cac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006ca8:	2302      	movs	r3, #2
 8006caa:	e032      	b.n	8006d12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2224      	movs	r2, #36	@ 0x24
 8006cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f022 0201 	bic.w	r2, r2, #1
 8006cca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006cda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6819      	ldr	r1, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f042 0201 	orr.w	r2, r2, #1
 8006cfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	e000      	b.n	8006d12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d10:	2302      	movs	r3, #2
  }
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b085      	sub	sp, #20
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
 8006d26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b20      	cmp	r3, #32
 8006d32:	d139      	bne.n	8006da8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d101      	bne.n	8006d42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d3e:	2302      	movs	r3, #2
 8006d40:	e033      	b.n	8006daa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2201      	movs	r2, #1
 8006d46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2224      	movs	r2, #36	@ 0x24
 8006d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f022 0201 	bic.w	r2, r2, #1
 8006d60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006d70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	021b      	lsls	r3, r3, #8
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f042 0201 	orr.w	r2, r2, #1
 8006d92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2220      	movs	r2, #32
 8006d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006da4:	2300      	movs	r3, #0
 8006da6:	e000      	b.n	8006daa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006da8:	2302      	movs	r3, #2
  }
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
	...

08006db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006dc4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006dc8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006dca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006dce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d102      	bne.n	8006dde <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	f001 b83a 	b.w	8007e52 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006dde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006de2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0301 	and.w	r3, r3, #1
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f000 816f 	beq.w	80070d2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006df4:	4bb5      	ldr	r3, [pc, #724]	@ (80070cc <HAL_RCC_OscConfig+0x314>)
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f003 030c 	and.w	r3, r3, #12
 8006dfc:	2b04      	cmp	r3, #4
 8006dfe:	d00c      	beq.n	8006e1a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006e00:	4bb2      	ldr	r3, [pc, #712]	@ (80070cc <HAL_RCC_OscConfig+0x314>)
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f003 030c 	and.w	r3, r3, #12
 8006e08:	2b08      	cmp	r3, #8
 8006e0a:	d15c      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x10e>
 8006e0c:	4baf      	ldr	r3, [pc, #700]	@ (80070cc <HAL_RCC_OscConfig+0x314>)
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8006e14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e18:	d155      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x10e>
 8006e1a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006e1e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e22:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8006e26:	fa93 f3a3 	rbit	r3, r3
 8006e2a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006e2e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e32:	fab3 f383 	clz	r3, r3
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	095b      	lsrs	r3, r3, #5
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	f043 0301 	orr.w	r3, r3, #1
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d102      	bne.n	8006e4c <HAL_RCC_OscConfig+0x94>
 8006e46:	4ba1      	ldr	r3, [pc, #644]	@ (80070cc <HAL_RCC_OscConfig+0x314>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	e015      	b.n	8006e78 <HAL_RCC_OscConfig+0xc0>
 8006e4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006e50:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e54:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8006e58:	fa93 f3a3 	rbit	r3, r3
 8006e5c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8006e60:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006e64:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8006e68:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8006e6c:	fa93 f3a3 	rbit	r3, r3
 8006e70:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8006e74:	4b95      	ldr	r3, [pc, #596]	@ (80070cc <HAL_RCC_OscConfig+0x314>)
 8006e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e78:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006e7c:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8006e80:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8006e84:	fa92 f2a2 	rbit	r2, r2
 8006e88:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8006e8c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8006e90:	fab2 f282 	clz	r2, r2
 8006e94:	b2d2      	uxtb	r2, r2
 8006e96:	f042 0220 	orr.w	r2, r2, #32
 8006e9a:	b2d2      	uxtb	r2, r2
 8006e9c:	f002 021f 	and.w	r2, r2, #31
 8006ea0:	2101      	movs	r1, #1
 8006ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f000 8111 	beq.w	80070d0 <HAL_RCC_OscConfig+0x318>
 8006eae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006eb2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f040 8108 	bne.w	80070d0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	f000 bfc6 	b.w	8007e52 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ec6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006eca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ed6:	d106      	bne.n	8006ee6 <HAL_RCC_OscConfig+0x12e>
 8006ed8:	4b7c      	ldr	r3, [pc, #496]	@ (80070cc <HAL_RCC_OscConfig+0x314>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a7b      	ldr	r2, [pc, #492]	@ (80070cc <HAL_RCC_OscConfig+0x314>)
 8006ede:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ee2:	6013      	str	r3, [r2, #0]
 8006ee4:	e036      	b.n	8006f54 <HAL_RCC_OscConfig+0x19c>
 8006ee6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006eea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10c      	bne.n	8006f10 <HAL_RCC_OscConfig+0x158>
 8006ef6:	4b75      	ldr	r3, [pc, #468]	@ (80070cc <HAL_RCC_OscConfig+0x314>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a74      	ldr	r2, [pc, #464]	@ (80070cc <HAL_RCC_OscConfig+0x314>)
 8006efc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f00:	6013      	str	r3, [r2, #0]
 8006f02:	4b72      	ldr	r3, [pc, #456]	@ (80070cc <HAL_RCC_OscConfig+0x314>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a71      	ldr	r2, [pc, #452]	@ (80070cc <HAL_RCC_OscConfig+0x314>)
 8006f08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f0c:	6013      	str	r3, [r2, #0]
 8006f0e:	e021      	b.n	8006f54 <HAL_RCC_OscConfig+0x19c>
 8006f10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006f14:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f20:	d10c      	bne.n	8006f3c <HAL_RCC_OscConfig+0x184>
 8006f22:	4b6a      	ldr	r3, [pc, #424]	@ (80070cc <HAL_RCC_OscConfig+0x314>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a69      	ldr	r2, [pc, #420]	@ (80070cc <HAL_RCC_OscConfig+0x314>)
 8006f28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f2c:	6013      	str	r3, [r2, #0]
 8006f2e:	4b67      	ldr	r3, [pc, #412]	@ (80070cc <HAL_RCC_OscConfig+0x314>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a66      	ldr	r2, [pc, #408]	@ (80070cc <HAL_RCC_OscConfig+0x314>)
 8006f34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f38:	6013      	str	r3, [r2, #0]
 8006f3a:	e00b      	b.n	8006f54 <HAL_RCC_OscConfig+0x19c>
 8006f3c:	4b63      	ldr	r3, [pc, #396]	@ (80070cc <HAL_RCC_OscConfig+0x314>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a62      	ldr	r2, [pc, #392]	@ (80070cc <HAL_RCC_OscConfig+0x314>)
 8006f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f46:	6013      	str	r3, [r2, #0]
 8006f48:	4b60      	ldr	r3, [pc, #384]	@ (80070cc <HAL_RCC_OscConfig+0x314>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a5f      	ldr	r2, [pc, #380]	@ (80070cc <HAL_RCC_OscConfig+0x314>)
 8006f4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f52:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006f58:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d059      	beq.n	8007018 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f64:	f7fd fa52 	bl	800440c <HAL_GetTick>
 8006f68:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f6c:	e00a      	b.n	8006f84 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f6e:	f7fd fa4d 	bl	800440c <HAL_GetTick>
 8006f72:	4602      	mov	r2, r0
 8006f74:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	2b64      	cmp	r3, #100	@ 0x64
 8006f7c:	d902      	bls.n	8006f84 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	f000 bf67 	b.w	8007e52 <HAL_RCC_OscConfig+0x109a>
 8006f84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006f88:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f8c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8006f90:	fa93 f3a3 	rbit	r3, r3
 8006f94:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8006f98:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f9c:	fab3 f383 	clz	r3, r3
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	095b      	lsrs	r3, r3, #5
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	f043 0301 	orr.w	r3, r3, #1
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d102      	bne.n	8006fb6 <HAL_RCC_OscConfig+0x1fe>
 8006fb0:	4b46      	ldr	r3, [pc, #280]	@ (80070cc <HAL_RCC_OscConfig+0x314>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	e015      	b.n	8006fe2 <HAL_RCC_OscConfig+0x22a>
 8006fb6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006fba:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fbe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006fc2:	fa93 f3a3 	rbit	r3, r3
 8006fc6:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8006fca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006fce:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8006fd2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8006fd6:	fa93 f3a3 	rbit	r3, r3
 8006fda:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8006fde:	4b3b      	ldr	r3, [pc, #236]	@ (80070cc <HAL_RCC_OscConfig+0x314>)
 8006fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006fe6:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8006fea:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8006fee:	fa92 f2a2 	rbit	r2, r2
 8006ff2:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8006ff6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8006ffa:	fab2 f282 	clz	r2, r2
 8006ffe:	b2d2      	uxtb	r2, r2
 8007000:	f042 0220 	orr.w	r2, r2, #32
 8007004:	b2d2      	uxtb	r2, r2
 8007006:	f002 021f 	and.w	r2, r2, #31
 800700a:	2101      	movs	r1, #1
 800700c:	fa01 f202 	lsl.w	r2, r1, r2
 8007010:	4013      	ands	r3, r2
 8007012:	2b00      	cmp	r3, #0
 8007014:	d0ab      	beq.n	8006f6e <HAL_RCC_OscConfig+0x1b6>
 8007016:	e05c      	b.n	80070d2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007018:	f7fd f9f8 	bl	800440c <HAL_GetTick>
 800701c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007020:	e00a      	b.n	8007038 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007022:	f7fd f9f3 	bl	800440c <HAL_GetTick>
 8007026:	4602      	mov	r2, r0
 8007028:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	2b64      	cmp	r3, #100	@ 0x64
 8007030:	d902      	bls.n	8007038 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	f000 bf0d 	b.w	8007e52 <HAL_RCC_OscConfig+0x109a>
 8007038:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800703c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007040:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8007044:	fa93 f3a3 	rbit	r3, r3
 8007048:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 800704c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007050:	fab3 f383 	clz	r3, r3
 8007054:	b2db      	uxtb	r3, r3
 8007056:	095b      	lsrs	r3, r3, #5
 8007058:	b2db      	uxtb	r3, r3
 800705a:	f043 0301 	orr.w	r3, r3, #1
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b01      	cmp	r3, #1
 8007062:	d102      	bne.n	800706a <HAL_RCC_OscConfig+0x2b2>
 8007064:	4b19      	ldr	r3, [pc, #100]	@ (80070cc <HAL_RCC_OscConfig+0x314>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	e015      	b.n	8007096 <HAL_RCC_OscConfig+0x2de>
 800706a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800706e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007072:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8007076:	fa93 f3a3 	rbit	r3, r3
 800707a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800707e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007082:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8007086:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800708a:	fa93 f3a3 	rbit	r3, r3
 800708e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8007092:	4b0e      	ldr	r3, [pc, #56]	@ (80070cc <HAL_RCC_OscConfig+0x314>)
 8007094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007096:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800709a:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800709e:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80070a2:	fa92 f2a2 	rbit	r2, r2
 80070a6:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80070aa:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80070ae:	fab2 f282 	clz	r2, r2
 80070b2:	b2d2      	uxtb	r2, r2
 80070b4:	f042 0220 	orr.w	r2, r2, #32
 80070b8:	b2d2      	uxtb	r2, r2
 80070ba:	f002 021f 	and.w	r2, r2, #31
 80070be:	2101      	movs	r1, #1
 80070c0:	fa01 f202 	lsl.w	r2, r1, r2
 80070c4:	4013      	ands	r3, r2
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1ab      	bne.n	8007022 <HAL_RCC_OscConfig+0x26a>
 80070ca:	e002      	b.n	80070d2 <HAL_RCC_OscConfig+0x31a>
 80070cc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80070d6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0302 	and.w	r3, r3, #2
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f000 817f 	beq.w	80073e6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80070e8:	4ba7      	ldr	r3, [pc, #668]	@ (8007388 <HAL_RCC_OscConfig+0x5d0>)
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f003 030c 	and.w	r3, r3, #12
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00c      	beq.n	800710e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80070f4:	4ba4      	ldr	r3, [pc, #656]	@ (8007388 <HAL_RCC_OscConfig+0x5d0>)
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	f003 030c 	and.w	r3, r3, #12
 80070fc:	2b08      	cmp	r3, #8
 80070fe:	d173      	bne.n	80071e8 <HAL_RCC_OscConfig+0x430>
 8007100:	4ba1      	ldr	r3, [pc, #644]	@ (8007388 <HAL_RCC_OscConfig+0x5d0>)
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8007108:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800710c:	d16c      	bne.n	80071e8 <HAL_RCC_OscConfig+0x430>
 800710e:	2302      	movs	r3, #2
 8007110:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007114:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007118:	fa93 f3a3 	rbit	r3, r3
 800711c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8007120:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007124:	fab3 f383 	clz	r3, r3
 8007128:	b2db      	uxtb	r3, r3
 800712a:	095b      	lsrs	r3, r3, #5
 800712c:	b2db      	uxtb	r3, r3
 800712e:	f043 0301 	orr.w	r3, r3, #1
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b01      	cmp	r3, #1
 8007136:	d102      	bne.n	800713e <HAL_RCC_OscConfig+0x386>
 8007138:	4b93      	ldr	r3, [pc, #588]	@ (8007388 <HAL_RCC_OscConfig+0x5d0>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	e013      	b.n	8007166 <HAL_RCC_OscConfig+0x3ae>
 800713e:	2302      	movs	r3, #2
 8007140:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007144:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8007148:	fa93 f3a3 	rbit	r3, r3
 800714c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8007150:	2302      	movs	r3, #2
 8007152:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8007156:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800715a:	fa93 f3a3 	rbit	r3, r3
 800715e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8007162:	4b89      	ldr	r3, [pc, #548]	@ (8007388 <HAL_RCC_OscConfig+0x5d0>)
 8007164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007166:	2202      	movs	r2, #2
 8007168:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800716c:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8007170:	fa92 f2a2 	rbit	r2, r2
 8007174:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8007178:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800717c:	fab2 f282 	clz	r2, r2
 8007180:	b2d2      	uxtb	r2, r2
 8007182:	f042 0220 	orr.w	r2, r2, #32
 8007186:	b2d2      	uxtb	r2, r2
 8007188:	f002 021f 	and.w	r2, r2, #31
 800718c:	2101      	movs	r1, #1
 800718e:	fa01 f202 	lsl.w	r2, r1, r2
 8007192:	4013      	ands	r3, r2
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00a      	beq.n	80071ae <HAL_RCC_OscConfig+0x3f6>
 8007198:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800719c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d002      	beq.n	80071ae <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	f000 be52 	b.w	8007e52 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071ae:	4b76      	ldr	r3, [pc, #472]	@ (8007388 <HAL_RCC_OscConfig+0x5d0>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80071b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80071ba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	21f8      	movs	r1, #248	@ 0xf8
 80071c4:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071c8:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80071cc:	fa91 f1a1 	rbit	r1, r1
 80071d0:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80071d4:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80071d8:	fab1 f181 	clz	r1, r1
 80071dc:	b2c9      	uxtb	r1, r1
 80071de:	408b      	lsls	r3, r1
 80071e0:	4969      	ldr	r1, [pc, #420]	@ (8007388 <HAL_RCC_OscConfig+0x5d0>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071e6:	e0fe      	b.n	80073e6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80071e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80071ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f000 8088 	beq.w	800730a <HAL_RCC_OscConfig+0x552>
 80071fa:	2301      	movs	r3, #1
 80071fc:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007200:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8007204:	fa93 f3a3 	rbit	r3, r3
 8007208:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 800720c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007210:	fab3 f383 	clz	r3, r3
 8007214:	b2db      	uxtb	r3, r3
 8007216:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800721a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	461a      	mov	r2, r3
 8007222:	2301      	movs	r3, #1
 8007224:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007226:	f7fd f8f1 	bl	800440c <HAL_GetTick>
 800722a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800722e:	e00a      	b.n	8007246 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007230:	f7fd f8ec 	bl	800440c <HAL_GetTick>
 8007234:	4602      	mov	r2, r0
 8007236:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	2b02      	cmp	r3, #2
 800723e:	d902      	bls.n	8007246 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	f000 be06 	b.w	8007e52 <HAL_RCC_OscConfig+0x109a>
 8007246:	2302      	movs	r3, #2
 8007248:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800724c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8007250:	fa93 f3a3 	rbit	r3, r3
 8007254:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8007258:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800725c:	fab3 f383 	clz	r3, r3
 8007260:	b2db      	uxtb	r3, r3
 8007262:	095b      	lsrs	r3, r3, #5
 8007264:	b2db      	uxtb	r3, r3
 8007266:	f043 0301 	orr.w	r3, r3, #1
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b01      	cmp	r3, #1
 800726e:	d102      	bne.n	8007276 <HAL_RCC_OscConfig+0x4be>
 8007270:	4b45      	ldr	r3, [pc, #276]	@ (8007388 <HAL_RCC_OscConfig+0x5d0>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	e013      	b.n	800729e <HAL_RCC_OscConfig+0x4e6>
 8007276:	2302      	movs	r3, #2
 8007278:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800727c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8007280:	fa93 f3a3 	rbit	r3, r3
 8007284:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8007288:	2302      	movs	r3, #2
 800728a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800728e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8007292:	fa93 f3a3 	rbit	r3, r3
 8007296:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800729a:	4b3b      	ldr	r3, [pc, #236]	@ (8007388 <HAL_RCC_OscConfig+0x5d0>)
 800729c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800729e:	2202      	movs	r2, #2
 80072a0:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80072a4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80072a8:	fa92 f2a2 	rbit	r2, r2
 80072ac:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80072b0:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80072b4:	fab2 f282 	clz	r2, r2
 80072b8:	b2d2      	uxtb	r2, r2
 80072ba:	f042 0220 	orr.w	r2, r2, #32
 80072be:	b2d2      	uxtb	r2, r2
 80072c0:	f002 021f 	and.w	r2, r2, #31
 80072c4:	2101      	movs	r1, #1
 80072c6:	fa01 f202 	lsl.w	r2, r1, r2
 80072ca:	4013      	ands	r3, r2
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d0af      	beq.n	8007230 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072d0:	4b2d      	ldr	r3, [pc, #180]	@ (8007388 <HAL_RCC_OscConfig+0x5d0>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80072d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80072dc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	21f8      	movs	r1, #248	@ 0xf8
 80072e6:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072ea:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80072ee:	fa91 f1a1 	rbit	r1, r1
 80072f2:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80072f6:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80072fa:	fab1 f181 	clz	r1, r1
 80072fe:	b2c9      	uxtb	r1, r1
 8007300:	408b      	lsls	r3, r1
 8007302:	4921      	ldr	r1, [pc, #132]	@ (8007388 <HAL_RCC_OscConfig+0x5d0>)
 8007304:	4313      	orrs	r3, r2
 8007306:	600b      	str	r3, [r1, #0]
 8007308:	e06d      	b.n	80073e6 <HAL_RCC_OscConfig+0x62e>
 800730a:	2301      	movs	r3, #1
 800730c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007310:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8007314:	fa93 f3a3 	rbit	r3, r3
 8007318:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 800731c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007320:	fab3 f383 	clz	r3, r3
 8007324:	b2db      	uxtb	r3, r3
 8007326:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800732a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	461a      	mov	r2, r3
 8007332:	2300      	movs	r3, #0
 8007334:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007336:	f7fd f869 	bl	800440c <HAL_GetTick>
 800733a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800733e:	e00a      	b.n	8007356 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007340:	f7fd f864 	bl	800440c <HAL_GetTick>
 8007344:	4602      	mov	r2, r0
 8007346:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800734a:	1ad3      	subs	r3, r2, r3
 800734c:	2b02      	cmp	r3, #2
 800734e:	d902      	bls.n	8007356 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	f000 bd7e 	b.w	8007e52 <HAL_RCC_OscConfig+0x109a>
 8007356:	2302      	movs	r3, #2
 8007358:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800735c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007360:	fa93 f3a3 	rbit	r3, r3
 8007364:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8007368:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800736c:	fab3 f383 	clz	r3, r3
 8007370:	b2db      	uxtb	r3, r3
 8007372:	095b      	lsrs	r3, r3, #5
 8007374:	b2db      	uxtb	r3, r3
 8007376:	f043 0301 	orr.w	r3, r3, #1
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b01      	cmp	r3, #1
 800737e:	d105      	bne.n	800738c <HAL_RCC_OscConfig+0x5d4>
 8007380:	4b01      	ldr	r3, [pc, #4]	@ (8007388 <HAL_RCC_OscConfig+0x5d0>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	e016      	b.n	80073b4 <HAL_RCC_OscConfig+0x5fc>
 8007386:	bf00      	nop
 8007388:	40021000 	.word	0x40021000
 800738c:	2302      	movs	r3, #2
 800738e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007392:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007396:	fa93 f3a3 	rbit	r3, r3
 800739a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800739e:	2302      	movs	r3, #2
 80073a0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80073a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80073a8:	fa93 f3a3 	rbit	r3, r3
 80073ac:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80073b0:	4bbf      	ldr	r3, [pc, #764]	@ (80076b0 <HAL_RCC_OscConfig+0x8f8>)
 80073b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b4:	2202      	movs	r2, #2
 80073b6:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80073ba:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80073be:	fa92 f2a2 	rbit	r2, r2
 80073c2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80073c6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80073ca:	fab2 f282 	clz	r2, r2
 80073ce:	b2d2      	uxtb	r2, r2
 80073d0:	f042 0220 	orr.w	r2, r2, #32
 80073d4:	b2d2      	uxtb	r2, r2
 80073d6:	f002 021f 	and.w	r2, r2, #31
 80073da:	2101      	movs	r1, #1
 80073dc:	fa01 f202 	lsl.w	r2, r1, r2
 80073e0:	4013      	ands	r3, r2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1ac      	bne.n	8007340 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80073ea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 0308 	and.w	r3, r3, #8
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f000 8113 	beq.w	8007622 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80073fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007400:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	695b      	ldr	r3, [r3, #20]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d07c      	beq.n	8007506 <HAL_RCC_OscConfig+0x74e>
 800740c:	2301      	movs	r3, #1
 800740e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007416:	fa93 f3a3 	rbit	r3, r3
 800741a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 800741e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007422:	fab3 f383 	clz	r3, r3
 8007426:	b2db      	uxtb	r3, r3
 8007428:	461a      	mov	r2, r3
 800742a:	4ba2      	ldr	r3, [pc, #648]	@ (80076b4 <HAL_RCC_OscConfig+0x8fc>)
 800742c:	4413      	add	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	461a      	mov	r2, r3
 8007432:	2301      	movs	r3, #1
 8007434:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007436:	f7fc ffe9 	bl	800440c <HAL_GetTick>
 800743a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800743e:	e00a      	b.n	8007456 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007440:	f7fc ffe4 	bl	800440c <HAL_GetTick>
 8007444:	4602      	mov	r2, r0
 8007446:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	2b02      	cmp	r3, #2
 800744e:	d902      	bls.n	8007456 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8007450:	2303      	movs	r3, #3
 8007452:	f000 bcfe 	b.w	8007e52 <HAL_RCC_OscConfig+0x109a>
 8007456:	2302      	movs	r3, #2
 8007458:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800745c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007460:	fa93 f2a3 	rbit	r2, r3
 8007464:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007468:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800746c:	601a      	str	r2, [r3, #0]
 800746e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007472:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007476:	2202      	movs	r2, #2
 8007478:	601a      	str	r2, [r3, #0]
 800747a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800747e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	fa93 f2a3 	rbit	r2, r3
 8007488:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800748c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007490:	601a      	str	r2, [r3, #0]
 8007492:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007496:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800749a:	2202      	movs	r2, #2
 800749c:	601a      	str	r2, [r3, #0]
 800749e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80074a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	fa93 f2a3 	rbit	r2, r3
 80074ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80074b0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80074b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074b6:	4b7e      	ldr	r3, [pc, #504]	@ (80076b0 <HAL_RCC_OscConfig+0x8f8>)
 80074b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80074ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80074be:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80074c2:	2102      	movs	r1, #2
 80074c4:	6019      	str	r1, [r3, #0]
 80074c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80074ca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	fa93 f1a3 	rbit	r1, r3
 80074d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80074d8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80074dc:	6019      	str	r1, [r3, #0]
  return result;
 80074de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80074e2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	fab3 f383 	clz	r3, r3
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	f003 031f 	and.w	r3, r3, #31
 80074f8:	2101      	movs	r1, #1
 80074fa:	fa01 f303 	lsl.w	r3, r1, r3
 80074fe:	4013      	ands	r3, r2
 8007500:	2b00      	cmp	r3, #0
 8007502:	d09d      	beq.n	8007440 <HAL_RCC_OscConfig+0x688>
 8007504:	e08d      	b.n	8007622 <HAL_RCC_OscConfig+0x86a>
 8007506:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800750a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800750e:	2201      	movs	r2, #1
 8007510:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007512:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007516:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	fa93 f2a3 	rbit	r2, r3
 8007520:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007524:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8007528:	601a      	str	r2, [r3, #0]
  return result;
 800752a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800752e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8007532:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007534:	fab3 f383 	clz	r3, r3
 8007538:	b2db      	uxtb	r3, r3
 800753a:	461a      	mov	r2, r3
 800753c:	4b5d      	ldr	r3, [pc, #372]	@ (80076b4 <HAL_RCC_OscConfig+0x8fc>)
 800753e:	4413      	add	r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	461a      	mov	r2, r3
 8007544:	2300      	movs	r3, #0
 8007546:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007548:	f7fc ff60 	bl	800440c <HAL_GetTick>
 800754c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007550:	e00a      	b.n	8007568 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007552:	f7fc ff5b 	bl	800440c <HAL_GetTick>
 8007556:	4602      	mov	r2, r0
 8007558:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	2b02      	cmp	r3, #2
 8007560:	d902      	bls.n	8007568 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	f000 bc75 	b.w	8007e52 <HAL_RCC_OscConfig+0x109a>
 8007568:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800756c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8007570:	2202      	movs	r2, #2
 8007572:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007574:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007578:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	fa93 f2a3 	rbit	r2, r3
 8007582:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007586:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800758a:	601a      	str	r2, [r3, #0]
 800758c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007590:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007594:	2202      	movs	r2, #2
 8007596:	601a      	str	r2, [r3, #0]
 8007598:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800759c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	fa93 f2a3 	rbit	r2, r3
 80075a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80075aa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80075ae:	601a      	str	r2, [r3, #0]
 80075b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80075b4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80075b8:	2202      	movs	r2, #2
 80075ba:	601a      	str	r2, [r3, #0]
 80075bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80075c0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	fa93 f2a3 	rbit	r2, r3
 80075ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80075ce:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80075d2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075d4:	4b36      	ldr	r3, [pc, #216]	@ (80076b0 <HAL_RCC_OscConfig+0x8f8>)
 80075d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80075d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80075dc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80075e0:	2102      	movs	r1, #2
 80075e2:	6019      	str	r1, [r3, #0]
 80075e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80075e8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	fa93 f1a3 	rbit	r1, r3
 80075f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80075f6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80075fa:	6019      	str	r1, [r3, #0]
  return result;
 80075fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007600:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	fab3 f383 	clz	r3, r3
 800760a:	b2db      	uxtb	r3, r3
 800760c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007610:	b2db      	uxtb	r3, r3
 8007612:	f003 031f 	and.w	r3, r3, #31
 8007616:	2101      	movs	r1, #1
 8007618:	fa01 f303 	lsl.w	r3, r1, r3
 800761c:	4013      	ands	r3, r2
 800761e:	2b00      	cmp	r3, #0
 8007620:	d197      	bne.n	8007552 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007622:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007626:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0304 	and.w	r3, r3, #4
 8007632:	2b00      	cmp	r3, #0
 8007634:	f000 81a5 	beq.w	8007982 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007638:	2300      	movs	r3, #0
 800763a:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800763e:	4b1c      	ldr	r3, [pc, #112]	@ (80076b0 <HAL_RCC_OscConfig+0x8f8>)
 8007640:	69db      	ldr	r3, [r3, #28]
 8007642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d116      	bne.n	8007678 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800764a:	4b19      	ldr	r3, [pc, #100]	@ (80076b0 <HAL_RCC_OscConfig+0x8f8>)
 800764c:	69db      	ldr	r3, [r3, #28]
 800764e:	4a18      	ldr	r2, [pc, #96]	@ (80076b0 <HAL_RCC_OscConfig+0x8f8>)
 8007650:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007654:	61d3      	str	r3, [r2, #28]
 8007656:	4b16      	ldr	r3, [pc, #88]	@ (80076b0 <HAL_RCC_OscConfig+0x8f8>)
 8007658:	69db      	ldr	r3, [r3, #28]
 800765a:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800765e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007662:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8007666:	601a      	str	r2, [r3, #0]
 8007668:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800766c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8007670:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8007672:	2301      	movs	r3, #1
 8007674:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007678:	4b0f      	ldr	r3, [pc, #60]	@ (80076b8 <HAL_RCC_OscConfig+0x900>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007680:	2b00      	cmp	r3, #0
 8007682:	d121      	bne.n	80076c8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007684:	4b0c      	ldr	r3, [pc, #48]	@ (80076b8 <HAL_RCC_OscConfig+0x900>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a0b      	ldr	r2, [pc, #44]	@ (80076b8 <HAL_RCC_OscConfig+0x900>)
 800768a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800768e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007690:	f7fc febc 	bl	800440c <HAL_GetTick>
 8007694:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007698:	e010      	b.n	80076bc <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800769a:	f7fc feb7 	bl	800440c <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	2b64      	cmp	r3, #100	@ 0x64
 80076a8:	d908      	bls.n	80076bc <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e3d1      	b.n	8007e52 <HAL_RCC_OscConfig+0x109a>
 80076ae:	bf00      	nop
 80076b0:	40021000 	.word	0x40021000
 80076b4:	10908120 	.word	0x10908120
 80076b8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076bc:	4b8d      	ldr	r3, [pc, #564]	@ (80078f4 <HAL_RCC_OscConfig+0xb3c>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d0e8      	beq.n	800769a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80076cc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d106      	bne.n	80076e6 <HAL_RCC_OscConfig+0x92e>
 80076d8:	4b87      	ldr	r3, [pc, #540]	@ (80078f8 <HAL_RCC_OscConfig+0xb40>)
 80076da:	6a1b      	ldr	r3, [r3, #32]
 80076dc:	4a86      	ldr	r2, [pc, #536]	@ (80078f8 <HAL_RCC_OscConfig+0xb40>)
 80076de:	f043 0301 	orr.w	r3, r3, #1
 80076e2:	6213      	str	r3, [r2, #32]
 80076e4:	e035      	b.n	8007752 <HAL_RCC_OscConfig+0x99a>
 80076e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80076ea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d10c      	bne.n	8007710 <HAL_RCC_OscConfig+0x958>
 80076f6:	4b80      	ldr	r3, [pc, #512]	@ (80078f8 <HAL_RCC_OscConfig+0xb40>)
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	4a7f      	ldr	r2, [pc, #508]	@ (80078f8 <HAL_RCC_OscConfig+0xb40>)
 80076fc:	f023 0301 	bic.w	r3, r3, #1
 8007700:	6213      	str	r3, [r2, #32]
 8007702:	4b7d      	ldr	r3, [pc, #500]	@ (80078f8 <HAL_RCC_OscConfig+0xb40>)
 8007704:	6a1b      	ldr	r3, [r3, #32]
 8007706:	4a7c      	ldr	r2, [pc, #496]	@ (80078f8 <HAL_RCC_OscConfig+0xb40>)
 8007708:	f023 0304 	bic.w	r3, r3, #4
 800770c:	6213      	str	r3, [r2, #32]
 800770e:	e020      	b.n	8007752 <HAL_RCC_OscConfig+0x99a>
 8007710:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007714:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	2b05      	cmp	r3, #5
 800771e:	d10c      	bne.n	800773a <HAL_RCC_OscConfig+0x982>
 8007720:	4b75      	ldr	r3, [pc, #468]	@ (80078f8 <HAL_RCC_OscConfig+0xb40>)
 8007722:	6a1b      	ldr	r3, [r3, #32]
 8007724:	4a74      	ldr	r2, [pc, #464]	@ (80078f8 <HAL_RCC_OscConfig+0xb40>)
 8007726:	f043 0304 	orr.w	r3, r3, #4
 800772a:	6213      	str	r3, [r2, #32]
 800772c:	4b72      	ldr	r3, [pc, #456]	@ (80078f8 <HAL_RCC_OscConfig+0xb40>)
 800772e:	6a1b      	ldr	r3, [r3, #32]
 8007730:	4a71      	ldr	r2, [pc, #452]	@ (80078f8 <HAL_RCC_OscConfig+0xb40>)
 8007732:	f043 0301 	orr.w	r3, r3, #1
 8007736:	6213      	str	r3, [r2, #32]
 8007738:	e00b      	b.n	8007752 <HAL_RCC_OscConfig+0x99a>
 800773a:	4b6f      	ldr	r3, [pc, #444]	@ (80078f8 <HAL_RCC_OscConfig+0xb40>)
 800773c:	6a1b      	ldr	r3, [r3, #32]
 800773e:	4a6e      	ldr	r2, [pc, #440]	@ (80078f8 <HAL_RCC_OscConfig+0xb40>)
 8007740:	f023 0301 	bic.w	r3, r3, #1
 8007744:	6213      	str	r3, [r2, #32]
 8007746:	4b6c      	ldr	r3, [pc, #432]	@ (80078f8 <HAL_RCC_OscConfig+0xb40>)
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	4a6b      	ldr	r2, [pc, #428]	@ (80078f8 <HAL_RCC_OscConfig+0xb40>)
 800774c:	f023 0304 	bic.w	r3, r3, #4
 8007750:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007752:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007756:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	2b00      	cmp	r3, #0
 8007760:	f000 8081 	beq.w	8007866 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007764:	f7fc fe52 	bl	800440c <HAL_GetTick>
 8007768:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800776c:	e00b      	b.n	8007786 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800776e:	f7fc fe4d 	bl	800440c <HAL_GetTick>
 8007772:	4602      	mov	r2, r0
 8007774:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800777e:	4293      	cmp	r3, r2
 8007780:	d901      	bls.n	8007786 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	e365      	b.n	8007e52 <HAL_RCC_OscConfig+0x109a>
 8007786:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800778a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800778e:	2202      	movs	r2, #2
 8007790:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007792:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007796:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	fa93 f2a3 	rbit	r2, r3
 80077a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80077a4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80077a8:	601a      	str	r2, [r3, #0]
 80077aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80077ae:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80077b2:	2202      	movs	r2, #2
 80077b4:	601a      	str	r2, [r3, #0]
 80077b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80077ba:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	fa93 f2a3 	rbit	r2, r3
 80077c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80077c8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80077cc:	601a      	str	r2, [r3, #0]
  return result;
 80077ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80077d2:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80077d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077d8:	fab3 f383 	clz	r3, r3
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	095b      	lsrs	r3, r3, #5
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	f043 0302 	orr.w	r3, r3, #2
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d102      	bne.n	80077f2 <HAL_RCC_OscConfig+0xa3a>
 80077ec:	4b42      	ldr	r3, [pc, #264]	@ (80078f8 <HAL_RCC_OscConfig+0xb40>)
 80077ee:	6a1b      	ldr	r3, [r3, #32]
 80077f0:	e013      	b.n	800781a <HAL_RCC_OscConfig+0xa62>
 80077f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80077f6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80077fa:	2202      	movs	r2, #2
 80077fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007802:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	fa93 f2a3 	rbit	r2, r3
 800780c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007810:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8007814:	601a      	str	r2, [r3, #0]
 8007816:	4b38      	ldr	r3, [pc, #224]	@ (80078f8 <HAL_RCC_OscConfig+0xb40>)
 8007818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800781a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800781e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8007822:	2102      	movs	r1, #2
 8007824:	6011      	str	r1, [r2, #0]
 8007826:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800782a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800782e:	6812      	ldr	r2, [r2, #0]
 8007830:	fa92 f1a2 	rbit	r1, r2
 8007834:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007838:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800783c:	6011      	str	r1, [r2, #0]
  return result;
 800783e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007842:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8007846:	6812      	ldr	r2, [r2, #0]
 8007848:	fab2 f282 	clz	r2, r2
 800784c:	b2d2      	uxtb	r2, r2
 800784e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007852:	b2d2      	uxtb	r2, r2
 8007854:	f002 021f 	and.w	r2, r2, #31
 8007858:	2101      	movs	r1, #1
 800785a:	fa01 f202 	lsl.w	r2, r1, r2
 800785e:	4013      	ands	r3, r2
 8007860:	2b00      	cmp	r3, #0
 8007862:	d084      	beq.n	800776e <HAL_RCC_OscConfig+0x9b6>
 8007864:	e083      	b.n	800796e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007866:	f7fc fdd1 	bl	800440c <HAL_GetTick>
 800786a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800786e:	e00b      	b.n	8007888 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007870:	f7fc fdcc 	bl	800440c <HAL_GetTick>
 8007874:	4602      	mov	r2, r0
 8007876:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007880:	4293      	cmp	r3, r2
 8007882:	d901      	bls.n	8007888 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8007884:	2303      	movs	r3, #3
 8007886:	e2e4      	b.n	8007e52 <HAL_RCC_OscConfig+0x109a>
 8007888:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800788c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8007890:	2202      	movs	r2, #2
 8007892:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007894:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007898:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	fa93 f2a3 	rbit	r2, r3
 80078a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80078a6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80078aa:	601a      	str	r2, [r3, #0]
 80078ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80078b0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80078b4:	2202      	movs	r2, #2
 80078b6:	601a      	str	r2, [r3, #0]
 80078b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80078bc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	fa93 f2a3 	rbit	r2, r3
 80078c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80078ca:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80078ce:	601a      	str	r2, [r3, #0]
  return result;
 80078d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80078d4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80078d8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078da:	fab3 f383 	clz	r3, r3
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	095b      	lsrs	r3, r3, #5
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	f043 0302 	orr.w	r3, r3, #2
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d106      	bne.n	80078fc <HAL_RCC_OscConfig+0xb44>
 80078ee:	4b02      	ldr	r3, [pc, #8]	@ (80078f8 <HAL_RCC_OscConfig+0xb40>)
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	e017      	b.n	8007924 <HAL_RCC_OscConfig+0xb6c>
 80078f4:	40007000 	.word	0x40007000
 80078f8:	40021000 	.word	0x40021000
 80078fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007900:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8007904:	2202      	movs	r2, #2
 8007906:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007908:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800790c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	fa93 f2a3 	rbit	r2, r3
 8007916:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800791a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800791e:	601a      	str	r2, [r3, #0]
 8007920:	4bb3      	ldr	r3, [pc, #716]	@ (8007bf0 <HAL_RCC_OscConfig+0xe38>)
 8007922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007924:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007928:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800792c:	2102      	movs	r1, #2
 800792e:	6011      	str	r1, [r2, #0]
 8007930:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007934:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8007938:	6812      	ldr	r2, [r2, #0]
 800793a:	fa92 f1a2 	rbit	r1, r2
 800793e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007942:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8007946:	6011      	str	r1, [r2, #0]
  return result;
 8007948:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800794c:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8007950:	6812      	ldr	r2, [r2, #0]
 8007952:	fab2 f282 	clz	r2, r2
 8007956:	b2d2      	uxtb	r2, r2
 8007958:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800795c:	b2d2      	uxtb	r2, r2
 800795e:	f002 021f 	and.w	r2, r2, #31
 8007962:	2101      	movs	r1, #1
 8007964:	fa01 f202 	lsl.w	r2, r1, r2
 8007968:	4013      	ands	r3, r2
 800796a:	2b00      	cmp	r3, #0
 800796c:	d180      	bne.n	8007870 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800796e:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8007972:	2b01      	cmp	r3, #1
 8007974:	d105      	bne.n	8007982 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007976:	4b9e      	ldr	r3, [pc, #632]	@ (8007bf0 <HAL_RCC_OscConfig+0xe38>)
 8007978:	69db      	ldr	r3, [r3, #28]
 800797a:	4a9d      	ldr	r2, [pc, #628]	@ (8007bf0 <HAL_RCC_OscConfig+0xe38>)
 800797c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007980:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007982:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007986:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	2b00      	cmp	r3, #0
 8007990:	f000 825e 	beq.w	8007e50 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007994:	4b96      	ldr	r3, [pc, #600]	@ (8007bf0 <HAL_RCC_OscConfig+0xe38>)
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	f003 030c 	and.w	r3, r3, #12
 800799c:	2b08      	cmp	r3, #8
 800799e:	f000 821f 	beq.w	8007de0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80079a6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	f040 8170 	bne.w	8007c94 <HAL_RCC_OscConfig+0xedc>
 80079b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80079b8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80079bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80079c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80079c6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	fa93 f2a3 	rbit	r2, r3
 80079d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80079d4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80079d8:	601a      	str	r2, [r3, #0]
  return result;
 80079da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80079de:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80079e2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079e4:	fab3 f383 	clz	r3, r3
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80079ee:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	461a      	mov	r2, r3
 80079f6:	2300      	movs	r3, #0
 80079f8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079fa:	f7fc fd07 	bl	800440c <HAL_GetTick>
 80079fe:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a02:	e009      	b.n	8007a18 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a04:	f7fc fd02 	bl	800440c <HAL_GetTick>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d901      	bls.n	8007a18 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8007a14:	2303      	movs	r3, #3
 8007a16:	e21c      	b.n	8007e52 <HAL_RCC_OscConfig+0x109a>
 8007a18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007a1c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8007a20:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007a24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007a2a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	fa93 f2a3 	rbit	r2, r3
 8007a34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007a38:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8007a3c:	601a      	str	r2, [r3, #0]
  return result;
 8007a3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007a42:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8007a46:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a48:	fab3 f383 	clz	r3, r3
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	095b      	lsrs	r3, r3, #5
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	f043 0301 	orr.w	r3, r3, #1
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d102      	bne.n	8007a62 <HAL_RCC_OscConfig+0xcaa>
 8007a5c:	4b64      	ldr	r3, [pc, #400]	@ (8007bf0 <HAL_RCC_OscConfig+0xe38>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	e027      	b.n	8007ab2 <HAL_RCC_OscConfig+0xcfa>
 8007a62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007a66:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8007a6a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007a6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007a74:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	fa93 f2a3 	rbit	r2, r3
 8007a7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007a82:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8007a86:	601a      	str	r2, [r3, #0]
 8007a88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007a8c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007a90:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007a94:	601a      	str	r2, [r3, #0]
 8007a96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007a9a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	fa93 f2a3 	rbit	r2, r3
 8007aa4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007aa8:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8007aac:	601a      	str	r2, [r3, #0]
 8007aae:	4b50      	ldr	r3, [pc, #320]	@ (8007bf0 <HAL_RCC_OscConfig+0xe38>)
 8007ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ab2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007ab6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8007aba:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8007abe:	6011      	str	r1, [r2, #0]
 8007ac0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007ac4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8007ac8:	6812      	ldr	r2, [r2, #0]
 8007aca:	fa92 f1a2 	rbit	r1, r2
 8007ace:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007ad2:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8007ad6:	6011      	str	r1, [r2, #0]
  return result;
 8007ad8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007adc:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8007ae0:	6812      	ldr	r2, [r2, #0]
 8007ae2:	fab2 f282 	clz	r2, r2
 8007ae6:	b2d2      	uxtb	r2, r2
 8007ae8:	f042 0220 	orr.w	r2, r2, #32
 8007aec:	b2d2      	uxtb	r2, r2
 8007aee:	f002 021f 	and.w	r2, r2, #31
 8007af2:	2101      	movs	r1, #1
 8007af4:	fa01 f202 	lsl.w	r2, r1, r2
 8007af8:	4013      	ands	r3, r2
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d182      	bne.n	8007a04 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007afe:	4b3c      	ldr	r3, [pc, #240]	@ (8007bf0 <HAL_RCC_OscConfig+0xe38>)
 8007b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b02:	f023 020f 	bic.w	r2, r3, #15
 8007b06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007b0a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b12:	4937      	ldr	r1, [pc, #220]	@ (8007bf0 <HAL_RCC_OscConfig+0xe38>)
 8007b14:	4313      	orrs	r3, r2
 8007b16:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007b18:	4b35      	ldr	r3, [pc, #212]	@ (8007bf0 <HAL_RCC_OscConfig+0xe38>)
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8007b20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007b24:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	6a19      	ldr	r1, [r3, #32]
 8007b2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007b30:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	69db      	ldr	r3, [r3, #28]
 8007b38:	430b      	orrs	r3, r1
 8007b3a:	492d      	ldr	r1, [pc, #180]	@ (8007bf0 <HAL_RCC_OscConfig+0xe38>)
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	604b      	str	r3, [r1, #4]
 8007b40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007b44:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8007b48:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007b4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007b52:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	fa93 f2a3 	rbit	r2, r3
 8007b5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007b60:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8007b64:	601a      	str	r2, [r3, #0]
  return result;
 8007b66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007b6a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8007b6e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b70:	fab3 f383 	clz	r3, r3
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8007b7a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	461a      	mov	r2, r3
 8007b82:	2301      	movs	r3, #1
 8007b84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b86:	f7fc fc41 	bl	800440c <HAL_GetTick>
 8007b8a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007b8e:	e009      	b.n	8007ba4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b90:	f7fc fc3c 	bl	800440c <HAL_GetTick>
 8007b94:	4602      	mov	r2, r0
 8007b96:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d901      	bls.n	8007ba4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e156      	b.n	8007e52 <HAL_RCC_OscConfig+0x109a>
 8007ba4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007ba8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8007bac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007bb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007bb6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	fa93 f2a3 	rbit	r2, r3
 8007bc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007bc4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8007bc8:	601a      	str	r2, [r3, #0]
  return result;
 8007bca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007bce:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8007bd2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007bd4:	fab3 f383 	clz	r3, r3
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	095b      	lsrs	r3, r3, #5
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	f043 0301 	orr.w	r3, r3, #1
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d105      	bne.n	8007bf4 <HAL_RCC_OscConfig+0xe3c>
 8007be8:	4b01      	ldr	r3, [pc, #4]	@ (8007bf0 <HAL_RCC_OscConfig+0xe38>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	e02a      	b.n	8007c44 <HAL_RCC_OscConfig+0xe8c>
 8007bee:	bf00      	nop
 8007bf0:	40021000 	.word	0x40021000
 8007bf4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007bf8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8007bfc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007c00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007c06:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	fa93 f2a3 	rbit	r2, r3
 8007c10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007c14:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8007c18:	601a      	str	r2, [r3, #0]
 8007c1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007c1e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007c22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007c26:	601a      	str	r2, [r3, #0]
 8007c28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007c2c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	fa93 f2a3 	rbit	r2, r3
 8007c36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007c3a:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8007c3e:	601a      	str	r2, [r3, #0]
 8007c40:	4b86      	ldr	r3, [pc, #536]	@ (8007e5c <HAL_RCC_OscConfig+0x10a4>)
 8007c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c44:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007c48:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8007c4c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8007c50:	6011      	str	r1, [r2, #0]
 8007c52:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007c56:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8007c5a:	6812      	ldr	r2, [r2, #0]
 8007c5c:	fa92 f1a2 	rbit	r1, r2
 8007c60:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007c64:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8007c68:	6011      	str	r1, [r2, #0]
  return result;
 8007c6a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007c6e:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8007c72:	6812      	ldr	r2, [r2, #0]
 8007c74:	fab2 f282 	clz	r2, r2
 8007c78:	b2d2      	uxtb	r2, r2
 8007c7a:	f042 0220 	orr.w	r2, r2, #32
 8007c7e:	b2d2      	uxtb	r2, r2
 8007c80:	f002 021f 	and.w	r2, r2, #31
 8007c84:	2101      	movs	r1, #1
 8007c86:	fa01 f202 	lsl.w	r2, r1, r2
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f43f af7f 	beq.w	8007b90 <HAL_RCC_OscConfig+0xdd8>
 8007c92:	e0dd      	b.n	8007e50 <HAL_RCC_OscConfig+0x1098>
 8007c94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007c98:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8007c9c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007ca0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ca2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007ca6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	fa93 f2a3 	rbit	r2, r3
 8007cb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007cb4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8007cb8:	601a      	str	r2, [r3, #0]
  return result;
 8007cba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007cbe:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8007cc2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cc4:	fab3 f383 	clz	r3, r3
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8007cce:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cda:	f7fc fb97 	bl	800440c <HAL_GetTick>
 8007cde:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007ce2:	e009      	b.n	8007cf8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ce4:	f7fc fb92 	bl	800440c <HAL_GetTick>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	2b02      	cmp	r3, #2
 8007cf2:	d901      	bls.n	8007cf8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	e0ac      	b.n	8007e52 <HAL_RCC_OscConfig+0x109a>
 8007cf8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007cfc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8007d00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007d04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007d0a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	fa93 f2a3 	rbit	r2, r3
 8007d14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007d18:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8007d1c:	601a      	str	r2, [r3, #0]
  return result;
 8007d1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007d22:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8007d26:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007d28:	fab3 f383 	clz	r3, r3
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	095b      	lsrs	r3, r3, #5
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	f043 0301 	orr.w	r3, r3, #1
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d102      	bne.n	8007d42 <HAL_RCC_OscConfig+0xf8a>
 8007d3c:	4b47      	ldr	r3, [pc, #284]	@ (8007e5c <HAL_RCC_OscConfig+0x10a4>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	e027      	b.n	8007d92 <HAL_RCC_OscConfig+0xfda>
 8007d42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007d46:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8007d4a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007d4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007d54:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	fa93 f2a3 	rbit	r2, r3
 8007d5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007d62:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8007d66:	601a      	str	r2, [r3, #0]
 8007d68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007d6c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8007d70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007d74:	601a      	str	r2, [r3, #0]
 8007d76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007d7a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	fa93 f2a3 	rbit	r2, r3
 8007d84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007d88:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8007d8c:	601a      	str	r2, [r3, #0]
 8007d8e:	4b33      	ldr	r3, [pc, #204]	@ (8007e5c <HAL_RCC_OscConfig+0x10a4>)
 8007d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d92:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007d96:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8007d9a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8007d9e:	6011      	str	r1, [r2, #0]
 8007da0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007da4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8007da8:	6812      	ldr	r2, [r2, #0]
 8007daa:	fa92 f1a2 	rbit	r1, r2
 8007dae:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007db2:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8007db6:	6011      	str	r1, [r2, #0]
  return result;
 8007db8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007dbc:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8007dc0:	6812      	ldr	r2, [r2, #0]
 8007dc2:	fab2 f282 	clz	r2, r2
 8007dc6:	b2d2      	uxtb	r2, r2
 8007dc8:	f042 0220 	orr.w	r2, r2, #32
 8007dcc:	b2d2      	uxtb	r2, r2
 8007dce:	f002 021f 	and.w	r2, r2, #31
 8007dd2:	2101      	movs	r1, #1
 8007dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8007dd8:	4013      	ands	r3, r2
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d182      	bne.n	8007ce4 <HAL_RCC_OscConfig+0xf2c>
 8007dde:	e037      	b.n	8007e50 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007de0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007de4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	699b      	ldr	r3, [r3, #24]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d101      	bne.n	8007df4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	e02e      	b.n	8007e52 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007df4:	4b19      	ldr	r3, [pc, #100]	@ (8007e5c <HAL_RCC_OscConfig+0x10a4>)
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8007dfc:	4b17      	ldr	r3, [pc, #92]	@ (8007e5c <HAL_RCC_OscConfig+0x10a4>)
 8007dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e00:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007e04:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8007e08:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8007e0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007e10:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	69db      	ldr	r3, [r3, #28]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d117      	bne.n	8007e4c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8007e1c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8007e20:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007e24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007e28:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d10b      	bne.n	8007e4c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8007e34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8007e38:	f003 020f 	and.w	r2, r3, #15
 8007e3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007e40:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d001      	beq.n	8007e50 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e000      	b.n	8007e52 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	40021000 	.word	0x40021000

08007e60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b09e      	sub	sp, #120	@ 0x78
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d101      	bne.n	8007e78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e162      	b.n	800813e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007e78:	4b90      	ldr	r3, [pc, #576]	@ (80080bc <HAL_RCC_ClockConfig+0x25c>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 0307 	and.w	r3, r3, #7
 8007e80:	683a      	ldr	r2, [r7, #0]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d910      	bls.n	8007ea8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e86:	4b8d      	ldr	r3, [pc, #564]	@ (80080bc <HAL_RCC_ClockConfig+0x25c>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f023 0207 	bic.w	r2, r3, #7
 8007e8e:	498b      	ldr	r1, [pc, #556]	@ (80080bc <HAL_RCC_ClockConfig+0x25c>)
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e96:	4b89      	ldr	r3, [pc, #548]	@ (80080bc <HAL_RCC_ClockConfig+0x25c>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 0307 	and.w	r3, r3, #7
 8007e9e:	683a      	ldr	r2, [r7, #0]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d001      	beq.n	8007ea8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e14a      	b.n	800813e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 0302 	and.w	r3, r3, #2
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d008      	beq.n	8007ec6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007eb4:	4b82      	ldr	r3, [pc, #520]	@ (80080c0 <HAL_RCC_ClockConfig+0x260>)
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	497f      	ldr	r1, [pc, #508]	@ (80080c0 <HAL_RCC_ClockConfig+0x260>)
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 0301 	and.w	r3, r3, #1
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f000 80dc 	beq.w	800808c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d13c      	bne.n	8007f56 <HAL_RCC_ClockConfig+0xf6>
 8007edc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007ee0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ee2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ee4:	fa93 f3a3 	rbit	r3, r3
 8007ee8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8007eea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007eec:	fab3 f383 	clz	r3, r3
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	095b      	lsrs	r3, r3, #5
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	f043 0301 	orr.w	r3, r3, #1
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d102      	bne.n	8007f06 <HAL_RCC_ClockConfig+0xa6>
 8007f00:	4b6f      	ldr	r3, [pc, #444]	@ (80080c0 <HAL_RCC_ClockConfig+0x260>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	e00f      	b.n	8007f26 <HAL_RCC_ClockConfig+0xc6>
 8007f06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007f0a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f0e:	fa93 f3a3 	rbit	r3, r3
 8007f12:	667b      	str	r3, [r7, #100]	@ 0x64
 8007f14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007f18:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f1c:	fa93 f3a3 	rbit	r3, r3
 8007f20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f22:	4b67      	ldr	r3, [pc, #412]	@ (80080c0 <HAL_RCC_ClockConfig+0x260>)
 8007f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f26:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007f2a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007f2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f2e:	fa92 f2a2 	rbit	r2, r2
 8007f32:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8007f34:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007f36:	fab2 f282 	clz	r2, r2
 8007f3a:	b2d2      	uxtb	r2, r2
 8007f3c:	f042 0220 	orr.w	r2, r2, #32
 8007f40:	b2d2      	uxtb	r2, r2
 8007f42:	f002 021f 	and.w	r2, r2, #31
 8007f46:	2101      	movs	r1, #1
 8007f48:	fa01 f202 	lsl.w	r2, r1, r2
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d17b      	bne.n	800804a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e0f3      	b.n	800813e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d13c      	bne.n	8007fd8 <HAL_RCC_ClockConfig+0x178>
 8007f5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007f62:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f66:	fa93 f3a3 	rbit	r3, r3
 8007f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8007f6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f6e:	fab3 f383 	clz	r3, r3
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	095b      	lsrs	r3, r3, #5
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	f043 0301 	orr.w	r3, r3, #1
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d102      	bne.n	8007f88 <HAL_RCC_ClockConfig+0x128>
 8007f82:	4b4f      	ldr	r3, [pc, #316]	@ (80080c0 <HAL_RCC_ClockConfig+0x260>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	e00f      	b.n	8007fa8 <HAL_RCC_ClockConfig+0x148>
 8007f88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007f8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f90:	fa93 f3a3 	rbit	r3, r3
 8007f94:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007f9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f9e:	fa93 f3a3 	rbit	r3, r3
 8007fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fa4:	4b46      	ldr	r3, [pc, #280]	@ (80080c0 <HAL_RCC_ClockConfig+0x260>)
 8007fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fa8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007fac:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007fae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007fb0:	fa92 f2a2 	rbit	r2, r2
 8007fb4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8007fb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007fb8:	fab2 f282 	clz	r2, r2
 8007fbc:	b2d2      	uxtb	r2, r2
 8007fbe:	f042 0220 	orr.w	r2, r2, #32
 8007fc2:	b2d2      	uxtb	r2, r2
 8007fc4:	f002 021f 	and.w	r2, r2, #31
 8007fc8:	2101      	movs	r1, #1
 8007fca:	fa01 f202 	lsl.w	r2, r1, r2
 8007fce:	4013      	ands	r3, r2
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d13a      	bne.n	800804a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e0b2      	b.n	800813e <HAL_RCC_ClockConfig+0x2de>
 8007fd8:	2302      	movs	r3, #2
 8007fda:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fde:	fa93 f3a3 	rbit	r3, r3
 8007fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8007fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fe6:	fab3 f383 	clz	r3, r3
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	095b      	lsrs	r3, r3, #5
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	f043 0301 	orr.w	r3, r3, #1
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d102      	bne.n	8008000 <HAL_RCC_ClockConfig+0x1a0>
 8007ffa:	4b31      	ldr	r3, [pc, #196]	@ (80080c0 <HAL_RCC_ClockConfig+0x260>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	e00d      	b.n	800801c <HAL_RCC_ClockConfig+0x1bc>
 8008000:	2302      	movs	r3, #2
 8008002:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008006:	fa93 f3a3 	rbit	r3, r3
 800800a:	627b      	str	r3, [r7, #36]	@ 0x24
 800800c:	2302      	movs	r3, #2
 800800e:	623b      	str	r3, [r7, #32]
 8008010:	6a3b      	ldr	r3, [r7, #32]
 8008012:	fa93 f3a3 	rbit	r3, r3
 8008016:	61fb      	str	r3, [r7, #28]
 8008018:	4b29      	ldr	r3, [pc, #164]	@ (80080c0 <HAL_RCC_ClockConfig+0x260>)
 800801a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800801c:	2202      	movs	r2, #2
 800801e:	61ba      	str	r2, [r7, #24]
 8008020:	69ba      	ldr	r2, [r7, #24]
 8008022:	fa92 f2a2 	rbit	r2, r2
 8008026:	617a      	str	r2, [r7, #20]
  return result;
 8008028:	697a      	ldr	r2, [r7, #20]
 800802a:	fab2 f282 	clz	r2, r2
 800802e:	b2d2      	uxtb	r2, r2
 8008030:	f042 0220 	orr.w	r2, r2, #32
 8008034:	b2d2      	uxtb	r2, r2
 8008036:	f002 021f 	and.w	r2, r2, #31
 800803a:	2101      	movs	r1, #1
 800803c:	fa01 f202 	lsl.w	r2, r1, r2
 8008040:	4013      	ands	r3, r2
 8008042:	2b00      	cmp	r3, #0
 8008044:	d101      	bne.n	800804a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e079      	b.n	800813e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800804a:	4b1d      	ldr	r3, [pc, #116]	@ (80080c0 <HAL_RCC_ClockConfig+0x260>)
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	f023 0203 	bic.w	r2, r3, #3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	491a      	ldr	r1, [pc, #104]	@ (80080c0 <HAL_RCC_ClockConfig+0x260>)
 8008058:	4313      	orrs	r3, r2
 800805a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800805c:	f7fc f9d6 	bl	800440c <HAL_GetTick>
 8008060:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008062:	e00a      	b.n	800807a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008064:	f7fc f9d2 	bl	800440c <HAL_GetTick>
 8008068:	4602      	mov	r2, r0
 800806a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008072:	4293      	cmp	r3, r2
 8008074:	d901      	bls.n	800807a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	e061      	b.n	800813e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800807a:	4b11      	ldr	r3, [pc, #68]	@ (80080c0 <HAL_RCC_ClockConfig+0x260>)
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	f003 020c 	and.w	r2, r3, #12
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	429a      	cmp	r2, r3
 800808a:	d1eb      	bne.n	8008064 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800808c:	4b0b      	ldr	r3, [pc, #44]	@ (80080bc <HAL_RCC_ClockConfig+0x25c>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 0307 	and.w	r3, r3, #7
 8008094:	683a      	ldr	r2, [r7, #0]
 8008096:	429a      	cmp	r2, r3
 8008098:	d214      	bcs.n	80080c4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800809a:	4b08      	ldr	r3, [pc, #32]	@ (80080bc <HAL_RCC_ClockConfig+0x25c>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f023 0207 	bic.w	r2, r3, #7
 80080a2:	4906      	ldr	r1, [pc, #24]	@ (80080bc <HAL_RCC_ClockConfig+0x25c>)
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80080aa:	4b04      	ldr	r3, [pc, #16]	@ (80080bc <HAL_RCC_ClockConfig+0x25c>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 0307 	and.w	r3, r3, #7
 80080b2:	683a      	ldr	r2, [r7, #0]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d005      	beq.n	80080c4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e040      	b.n	800813e <HAL_RCC_ClockConfig+0x2de>
 80080bc:	40022000 	.word	0x40022000
 80080c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 0304 	and.w	r3, r3, #4
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d008      	beq.n	80080e2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80080d0:	4b1d      	ldr	r3, [pc, #116]	@ (8008148 <HAL_RCC_ClockConfig+0x2e8>)
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	491a      	ldr	r1, [pc, #104]	@ (8008148 <HAL_RCC_ClockConfig+0x2e8>)
 80080de:	4313      	orrs	r3, r2
 80080e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 0308 	and.w	r3, r3, #8
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d009      	beq.n	8008102 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80080ee:	4b16      	ldr	r3, [pc, #88]	@ (8008148 <HAL_RCC_ClockConfig+0x2e8>)
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	00db      	lsls	r3, r3, #3
 80080fc:	4912      	ldr	r1, [pc, #72]	@ (8008148 <HAL_RCC_ClockConfig+0x2e8>)
 80080fe:	4313      	orrs	r3, r2
 8008100:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008102:	f000 f829 	bl	8008158 <HAL_RCC_GetSysClockFreq>
 8008106:	4601      	mov	r1, r0
 8008108:	4b0f      	ldr	r3, [pc, #60]	@ (8008148 <HAL_RCC_ClockConfig+0x2e8>)
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008110:	22f0      	movs	r2, #240	@ 0xf0
 8008112:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	fa92 f2a2 	rbit	r2, r2
 800811a:	60fa      	str	r2, [r7, #12]
  return result;
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	fab2 f282 	clz	r2, r2
 8008122:	b2d2      	uxtb	r2, r2
 8008124:	40d3      	lsrs	r3, r2
 8008126:	4a09      	ldr	r2, [pc, #36]	@ (800814c <HAL_RCC_ClockConfig+0x2ec>)
 8008128:	5cd3      	ldrb	r3, [r2, r3]
 800812a:	fa21 f303 	lsr.w	r3, r1, r3
 800812e:	4a08      	ldr	r2, [pc, #32]	@ (8008150 <HAL_RCC_ClockConfig+0x2f0>)
 8008130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8008132:	4b08      	ldr	r3, [pc, #32]	@ (8008154 <HAL_RCC_ClockConfig+0x2f4>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4618      	mov	r0, r3
 8008138:	f7fb fe12 	bl	8003d60 <HAL_InitTick>
  
  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3778      	adds	r7, #120	@ 0x78
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	40021000 	.word	0x40021000
 800814c:	08013acc 	.word	0x08013acc
 8008150:	20000014 	.word	0x20000014
 8008154:	20000018 	.word	0x20000018

08008158 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008158:	b480      	push	{r7}
 800815a:	b087      	sub	sp, #28
 800815c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800815e:	2300      	movs	r3, #0
 8008160:	60fb      	str	r3, [r7, #12]
 8008162:	2300      	movs	r3, #0
 8008164:	60bb      	str	r3, [r7, #8]
 8008166:	2300      	movs	r3, #0
 8008168:	617b      	str	r3, [r7, #20]
 800816a:	2300      	movs	r3, #0
 800816c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800816e:	2300      	movs	r3, #0
 8008170:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8008172:	4b1f      	ldr	r3, [pc, #124]	@ (80081f0 <HAL_RCC_GetSysClockFreq+0x98>)
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f003 030c 	and.w	r3, r3, #12
 800817e:	2b04      	cmp	r3, #4
 8008180:	d002      	beq.n	8008188 <HAL_RCC_GetSysClockFreq+0x30>
 8008182:	2b08      	cmp	r3, #8
 8008184:	d003      	beq.n	800818e <HAL_RCC_GetSysClockFreq+0x36>
 8008186:	e029      	b.n	80081dc <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008188:	4b1a      	ldr	r3, [pc, #104]	@ (80081f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800818a:	613b      	str	r3, [r7, #16]
      break;
 800818c:	e029      	b.n	80081e2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	0c9b      	lsrs	r3, r3, #18
 8008192:	f003 030f 	and.w	r3, r3, #15
 8008196:	4a18      	ldr	r2, [pc, #96]	@ (80081f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8008198:	5cd3      	ldrb	r3, [r2, r3]
 800819a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800819c:	4b14      	ldr	r3, [pc, #80]	@ (80081f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800819e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081a0:	f003 030f 	and.w	r3, r3, #15
 80081a4:	4a15      	ldr	r2, [pc, #84]	@ (80081fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80081a6:	5cd3      	ldrb	r3, [r2, r3]
 80081a8:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d008      	beq.n	80081c6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80081b4:	4a0f      	ldr	r2, [pc, #60]	@ (80081f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	fb02 f303 	mul.w	r3, r2, r3
 80081c2:	617b      	str	r3, [r7, #20]
 80081c4:	e007      	b.n	80081d6 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80081c6:	4a0b      	ldr	r2, [pc, #44]	@ (80081f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	fb02 f303 	mul.w	r3, r2, r3
 80081d4:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	613b      	str	r3, [r7, #16]
      break;
 80081da:	e002      	b.n	80081e2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80081dc:	4b05      	ldr	r3, [pc, #20]	@ (80081f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 80081de:	613b      	str	r3, [r7, #16]
      break;
 80081e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80081e2:	693b      	ldr	r3, [r7, #16]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	371c      	adds	r7, #28
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr
 80081f0:	40021000 	.word	0x40021000
 80081f4:	007a1200 	.word	0x007a1200
 80081f8:	08013ae4 	.word	0x08013ae4
 80081fc:	08013af4 	.word	0x08013af4

08008200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008200:	b480      	push	{r7}
 8008202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008204:	4b03      	ldr	r3, [pc, #12]	@ (8008214 <HAL_RCC_GetHCLKFreq+0x14>)
 8008206:	681b      	ldr	r3, [r3, #0]
}
 8008208:	4618      	mov	r0, r3
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	20000014 	.word	0x20000014

08008218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800821e:	f7ff ffef 	bl	8008200 <HAL_RCC_GetHCLKFreq>
 8008222:	4601      	mov	r1, r0
 8008224:	4b0b      	ldr	r3, [pc, #44]	@ (8008254 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800822c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8008230:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	fa92 f2a2 	rbit	r2, r2
 8008238:	603a      	str	r2, [r7, #0]
  return result;
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	fab2 f282 	clz	r2, r2
 8008240:	b2d2      	uxtb	r2, r2
 8008242:	40d3      	lsrs	r3, r2
 8008244:	4a04      	ldr	r2, [pc, #16]	@ (8008258 <HAL_RCC_GetPCLK1Freq+0x40>)
 8008246:	5cd3      	ldrb	r3, [r2, r3]
 8008248:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800824c:	4618      	mov	r0, r3
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	40021000 	.word	0x40021000
 8008258:	08013adc 	.word	0x08013adc

0800825c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8008262:	f7ff ffcd 	bl	8008200 <HAL_RCC_GetHCLKFreq>
 8008266:	4601      	mov	r1, r0
 8008268:	4b0b      	ldr	r3, [pc, #44]	@ (8008298 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8008270:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8008274:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	fa92 f2a2 	rbit	r2, r2
 800827c:	603a      	str	r2, [r7, #0]
  return result;
 800827e:	683a      	ldr	r2, [r7, #0]
 8008280:	fab2 f282 	clz	r2, r2
 8008284:	b2d2      	uxtb	r2, r2
 8008286:	40d3      	lsrs	r3, r2
 8008288:	4a04      	ldr	r2, [pc, #16]	@ (800829c <HAL_RCC_GetPCLK2Freq+0x40>)
 800828a:	5cd3      	ldrb	r3, [r2, r3]
 800828c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8008290:	4618      	mov	r0, r3
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	40021000 	.word	0x40021000
 800829c:	08013adc 	.word	0x08013adc

080082a0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	220f      	movs	r2, #15
 80082ae:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80082b0:	4b12      	ldr	r3, [pc, #72]	@ (80082fc <HAL_RCC_GetClockConfig+0x5c>)
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	f003 0203 	and.w	r2, r3, #3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80082bc:	4b0f      	ldr	r3, [pc, #60]	@ (80082fc <HAL_RCC_GetClockConfig+0x5c>)
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80082c8:	4b0c      	ldr	r3, [pc, #48]	@ (80082fc <HAL_RCC_GetClockConfig+0x5c>)
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80082d4:	4b09      	ldr	r3, [pc, #36]	@ (80082fc <HAL_RCC_GetClockConfig+0x5c>)
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	08db      	lsrs	r3, r3, #3
 80082da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80082e2:	4b07      	ldr	r3, [pc, #28]	@ (8008300 <HAL_RCC_GetClockConfig+0x60>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 0207 	and.w	r2, r3, #7
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	601a      	str	r2, [r3, #0]
}
 80082ee:	bf00      	nop
 80082f0:	370c      	adds	r7, #12
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	40021000 	.word	0x40021000
 8008300:	40022000 	.word	0x40022000

08008304 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b092      	sub	sp, #72	@ 0x48
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800830c:	2300      	movs	r3, #0
 800830e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8008310:	2300      	movs	r3, #0
 8008312:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8008314:	2300      	movs	r3, #0
 8008316:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008322:	2b00      	cmp	r3, #0
 8008324:	f000 80d4 	beq.w	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008328:	4b4e      	ldr	r3, [pc, #312]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800832a:	69db      	ldr	r3, [r3, #28]
 800832c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d10e      	bne.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008334:	4b4b      	ldr	r3, [pc, #300]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008336:	69db      	ldr	r3, [r3, #28]
 8008338:	4a4a      	ldr	r2, [pc, #296]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800833a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800833e:	61d3      	str	r3, [r2, #28]
 8008340:	4b48      	ldr	r3, [pc, #288]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008342:	69db      	ldr	r3, [r3, #28]
 8008344:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008348:	60bb      	str	r3, [r7, #8]
 800834a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800834c:	2301      	movs	r3, #1
 800834e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008352:	4b45      	ldr	r3, [pc, #276]	@ (8008468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800835a:	2b00      	cmp	r3, #0
 800835c:	d118      	bne.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800835e:	4b42      	ldr	r3, [pc, #264]	@ (8008468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a41      	ldr	r2, [pc, #260]	@ (8008468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008364:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008368:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800836a:	f7fc f84f 	bl	800440c <HAL_GetTick>
 800836e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008370:	e008      	b.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008372:	f7fc f84b 	bl	800440c <HAL_GetTick>
 8008376:	4602      	mov	r2, r0
 8008378:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	2b64      	cmp	r3, #100	@ 0x64
 800837e:	d901      	bls.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008380:	2303      	movs	r3, #3
 8008382:	e1d6      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008384:	4b38      	ldr	r3, [pc, #224]	@ (8008468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800838c:	2b00      	cmp	r3, #0
 800838e:	d0f0      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008390:	4b34      	ldr	r3, [pc, #208]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008392:	6a1b      	ldr	r3, [r3, #32]
 8008394:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008398:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800839a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800839c:	2b00      	cmp	r3, #0
 800839e:	f000 8084 	beq.w	80084aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d07c      	beq.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083b0:	4b2c      	ldr	r3, [pc, #176]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083b2:	6a1b      	ldr	r3, [r3, #32]
 80083b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80083be:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c2:	fa93 f3a3 	rbit	r3, r3
 80083c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80083c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80083ca:	fab3 f383 	clz	r3, r3
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	461a      	mov	r2, r3
 80083d2:	4b26      	ldr	r3, [pc, #152]	@ (800846c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80083d4:	4413      	add	r3, r2
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	461a      	mov	r2, r3
 80083da:	2301      	movs	r3, #1
 80083dc:	6013      	str	r3, [r2, #0]
 80083de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80083e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083e6:	fa93 f3a3 	rbit	r3, r3
 80083ea:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80083ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80083ee:	fab3 f383 	clz	r3, r3
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	461a      	mov	r2, r3
 80083f6:	4b1d      	ldr	r3, [pc, #116]	@ (800846c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80083f8:	4413      	add	r3, r2
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	461a      	mov	r2, r3
 80083fe:	2300      	movs	r3, #0
 8008400:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008402:	4a18      	ldr	r2, [pc, #96]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008406:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800840a:	f003 0301 	and.w	r3, r3, #1
 800840e:	2b00      	cmp	r3, #0
 8008410:	d04b      	beq.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008412:	f7fb fffb 	bl	800440c <HAL_GetTick>
 8008416:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008418:	e00a      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800841a:	f7fb fff7 	bl	800440c <HAL_GetTick>
 800841e:	4602      	mov	r2, r0
 8008420:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008422:	1ad3      	subs	r3, r2, r3
 8008424:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008428:	4293      	cmp	r3, r2
 800842a:	d901      	bls.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800842c:	2303      	movs	r3, #3
 800842e:	e180      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008430:	2302      	movs	r3, #2
 8008432:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008436:	fa93 f3a3 	rbit	r3, r3
 800843a:	627b      	str	r3, [r7, #36]	@ 0x24
 800843c:	2302      	movs	r3, #2
 800843e:	623b      	str	r3, [r7, #32]
 8008440:	6a3b      	ldr	r3, [r7, #32]
 8008442:	fa93 f3a3 	rbit	r3, r3
 8008446:	61fb      	str	r3, [r7, #28]
  return result;
 8008448:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800844a:	fab3 f383 	clz	r3, r3
 800844e:	b2db      	uxtb	r3, r3
 8008450:	095b      	lsrs	r3, r3, #5
 8008452:	b2db      	uxtb	r3, r3
 8008454:	f043 0302 	orr.w	r3, r3, #2
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b02      	cmp	r3, #2
 800845c:	d108      	bne.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800845e:	4b01      	ldr	r3, [pc, #4]	@ (8008464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008460:	6a1b      	ldr	r3, [r3, #32]
 8008462:	e00d      	b.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8008464:	40021000 	.word	0x40021000
 8008468:	40007000 	.word	0x40007000
 800846c:	10908100 	.word	0x10908100
 8008470:	2302      	movs	r3, #2
 8008472:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	fa93 f3a3 	rbit	r3, r3
 800847a:	617b      	str	r3, [r7, #20]
 800847c:	4b9a      	ldr	r3, [pc, #616]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800847e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008480:	2202      	movs	r2, #2
 8008482:	613a      	str	r2, [r7, #16]
 8008484:	693a      	ldr	r2, [r7, #16]
 8008486:	fa92 f2a2 	rbit	r2, r2
 800848a:	60fa      	str	r2, [r7, #12]
  return result;
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	fab2 f282 	clz	r2, r2
 8008492:	b2d2      	uxtb	r2, r2
 8008494:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008498:	b2d2      	uxtb	r2, r2
 800849a:	f002 021f 	and.w	r2, r2, #31
 800849e:	2101      	movs	r1, #1
 80084a0:	fa01 f202 	lsl.w	r2, r1, r2
 80084a4:	4013      	ands	r3, r2
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d0b7      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80084aa:	4b8f      	ldr	r3, [pc, #572]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80084ac:	6a1b      	ldr	r3, [r3, #32]
 80084ae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	498c      	ldr	r1, [pc, #560]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80084b8:	4313      	orrs	r3, r2
 80084ba:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80084bc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d105      	bne.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084c4:	4b88      	ldr	r3, [pc, #544]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80084c6:	69db      	ldr	r3, [r3, #28]
 80084c8:	4a87      	ldr	r2, [pc, #540]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80084ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 0301 	and.w	r3, r3, #1
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d008      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80084dc:	4b82      	ldr	r3, [pc, #520]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80084de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084e0:	f023 0203 	bic.w	r2, r3, #3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	497f      	ldr	r1, [pc, #508]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80084ea:	4313      	orrs	r3, r2
 80084ec:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 0302 	and.w	r3, r3, #2
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d008      	beq.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80084fa:	4b7b      	ldr	r3, [pc, #492]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80084fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084fe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	4978      	ldr	r1, [pc, #480]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008508:	4313      	orrs	r3, r2
 800850a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f003 0304 	and.w	r3, r3, #4
 8008514:	2b00      	cmp	r3, #0
 8008516:	d008      	beq.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008518:	4b73      	ldr	r3, [pc, #460]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800851a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800851c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	4970      	ldr	r1, [pc, #448]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008526:	4313      	orrs	r3, r2
 8008528:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f003 0320 	and.w	r3, r3, #32
 8008532:	2b00      	cmp	r3, #0
 8008534:	d008      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008536:	4b6c      	ldr	r3, [pc, #432]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800853a:	f023 0210 	bic.w	r2, r3, #16
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	69db      	ldr	r3, [r3, #28]
 8008542:	4969      	ldr	r1, [pc, #420]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008544:	4313      	orrs	r3, r2
 8008546:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d008      	beq.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8008554:	4b64      	ldr	r3, [pc, #400]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008560:	4961      	ldr	r1, [pc, #388]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008562:	4313      	orrs	r3, r2
 8008564:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800856e:	2b00      	cmp	r3, #0
 8008570:	d008      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008572:	4b5d      	ldr	r3, [pc, #372]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008576:	f023 0220 	bic.w	r2, r3, #32
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a1b      	ldr	r3, [r3, #32]
 800857e:	495a      	ldr	r1, [pc, #360]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008580:	4313      	orrs	r3, r2
 8008582:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800858c:	2b00      	cmp	r3, #0
 800858e:	d008      	beq.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008590:	4b55      	ldr	r3, [pc, #340]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008594:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800859c:	4952      	ldr	r1, [pc, #328]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 0308 	and.w	r3, r3, #8
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d008      	beq.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80085ae:	4b4e      	ldr	r3, [pc, #312]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80085b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	494b      	ldr	r1, [pc, #300]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80085bc:	4313      	orrs	r3, r2
 80085be:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 0310 	and.w	r3, r3, #16
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d008      	beq.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80085cc:	4b46      	ldr	r3, [pc, #280]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80085ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085d0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	4943      	ldr	r1, [pc, #268]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80085da:	4313      	orrs	r3, r2
 80085dc:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d008      	beq.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80085ea:	4b3f      	ldr	r3, [pc, #252]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085f6:	493c      	ldr	r1, [pc, #240]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80085f8:	4313      	orrs	r3, r2
 80085fa:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008604:	2b00      	cmp	r3, #0
 8008606:	d008      	beq.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008608:	4b37      	ldr	r3, [pc, #220]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800860a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800860c:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008614:	4934      	ldr	r1, [pc, #208]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008616:	4313      	orrs	r3, r2
 8008618:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008622:	2b00      	cmp	r3, #0
 8008624:	d008      	beq.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8008626:	4b30      	ldr	r3, [pc, #192]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800862a:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008632:	492d      	ldr	r1, [pc, #180]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008634:	4313      	orrs	r3, r2
 8008636:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008640:	2b00      	cmp	r3, #0
 8008642:	d008      	beq.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008644:	4b28      	ldr	r3, [pc, #160]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008648:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008650:	4925      	ldr	r1, [pc, #148]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008652:	4313      	orrs	r3, r2
 8008654:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800865e:	2b00      	cmp	r3, #0
 8008660:	d008      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8008662:	4b21      	ldr	r3, [pc, #132]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008666:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800866e:	491e      	ldr	r1, [pc, #120]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008670:	4313      	orrs	r3, r2
 8008672:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800867c:	2b00      	cmp	r3, #0
 800867e:	d008      	beq.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8008680:	4b19      	ldr	r3, [pc, #100]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008684:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800868c:	4916      	ldr	r1, [pc, #88]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800868e:	4313      	orrs	r3, r2
 8008690:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800869a:	2b00      	cmp	r3, #0
 800869c:	d008      	beq.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800869e:	4b12      	ldr	r3, [pc, #72]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80086a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086a2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086aa:	490f      	ldr	r1, [pc, #60]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80086ac:	4313      	orrs	r3, r2
 80086ae:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d008      	beq.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80086bc:	4b0a      	ldr	r3, [pc, #40]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80086be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086c0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086c8:	4907      	ldr	r1, [pc, #28]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80086ca:	4313      	orrs	r3, r2
 80086cc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00c      	beq.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80086da:	4b03      	ldr	r3, [pc, #12]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80086dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086de:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	e002      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80086e6:	bf00      	nop
 80086e8:	40021000 	.word	0x40021000
 80086ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086ee:	4913      	ldr	r1, [pc, #76]	@ (800873c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80086f0:	4313      	orrs	r3, r2
 80086f2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d008      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8008700:	4b0e      	ldr	r3, [pc, #56]	@ (800873c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008704:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800870c:	490b      	ldr	r1, [pc, #44]	@ (800873c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800870e:	4313      	orrs	r3, r2
 8008710:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800871a:	2b00      	cmp	r3, #0
 800871c:	d008      	beq.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800871e:	4b07      	ldr	r3, [pc, #28]	@ (800873c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008722:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800872a:	4904      	ldr	r1, [pc, #16]	@ (800873c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800872c:	4313      	orrs	r3, r2
 800872e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3748      	adds	r7, #72	@ 0x48
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	40021000 	.word	0x40021000

08008740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d101      	bne.n	8008752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e049      	b.n	80087e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008758:	b2db      	uxtb	r3, r3
 800875a:	2b00      	cmp	r3, #0
 800875c:	d106      	bne.n	800876c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f841 	bl	80087ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2202      	movs	r2, #2
 8008770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	3304      	adds	r3, #4
 800877c:	4619      	mov	r1, r3
 800877e:	4610      	mov	r0, r2
 8008780:	f000 fc52 	bl	8009028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80087ee:	b480      	push	{r7}
 80087f0:	b083      	sub	sp, #12
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80087f6:	bf00      	nop
 80087f8:	370c      	adds	r7, #12
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
	...

08008804 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008804:	b480      	push	{r7}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b01      	cmp	r3, #1
 8008816:	d001      	beq.n	800881c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	e04f      	b.n	80088bc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2202      	movs	r2, #2
 8008820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	68da      	ldr	r2, [r3, #12]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f042 0201 	orr.w	r2, r2, #1
 8008832:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a23      	ldr	r2, [pc, #140]	@ (80088c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d01d      	beq.n	800887a <HAL_TIM_Base_Start_IT+0x76>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008846:	d018      	beq.n	800887a <HAL_TIM_Base_Start_IT+0x76>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a1f      	ldr	r2, [pc, #124]	@ (80088cc <HAL_TIM_Base_Start_IT+0xc8>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d013      	beq.n	800887a <HAL_TIM_Base_Start_IT+0x76>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a1e      	ldr	r2, [pc, #120]	@ (80088d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d00e      	beq.n	800887a <HAL_TIM_Base_Start_IT+0x76>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a1c      	ldr	r2, [pc, #112]	@ (80088d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d009      	beq.n	800887a <HAL_TIM_Base_Start_IT+0x76>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a1b      	ldr	r2, [pc, #108]	@ (80088d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d004      	beq.n	800887a <HAL_TIM_Base_Start_IT+0x76>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a19      	ldr	r2, [pc, #100]	@ (80088dc <HAL_TIM_Base_Start_IT+0xd8>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d115      	bne.n	80088a6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	689a      	ldr	r2, [r3, #8]
 8008880:	4b17      	ldr	r3, [pc, #92]	@ (80088e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008882:	4013      	ands	r3, r2
 8008884:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2b06      	cmp	r3, #6
 800888a:	d015      	beq.n	80088b8 <HAL_TIM_Base_Start_IT+0xb4>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008892:	d011      	beq.n	80088b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f042 0201 	orr.w	r2, r2, #1
 80088a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088a4:	e008      	b.n	80088b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f042 0201 	orr.w	r2, r2, #1
 80088b4:	601a      	str	r2, [r3, #0]
 80088b6:	e000      	b.n	80088ba <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3714      	adds	r7, #20
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr
 80088c8:	40012c00 	.word	0x40012c00
 80088cc:	40000400 	.word	0x40000400
 80088d0:	40000800 	.word	0x40000800
 80088d4:	40013400 	.word	0x40013400
 80088d8:	40014000 	.word	0x40014000
 80088dc:	40015000 	.word	0x40015000
 80088e0:	00010007 	.word	0x00010007

080088e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d101      	bne.n	80088f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e049      	b.n	800898a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d106      	bne.n	8008910 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f7fb fbf0 	bl	80040f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2202      	movs	r2, #2
 8008914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	3304      	adds	r3, #4
 8008920:	4619      	mov	r1, r3
 8008922:	4610      	mov	r0, r2
 8008924:	f000 fb80 	bl	8009028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2201      	movs	r2, #1
 800892c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2201      	movs	r2, #1
 8008944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2201      	movs	r2, #1
 8008954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2201      	movs	r2, #1
 800895c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2201      	movs	r2, #1
 8008974:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2201      	movs	r2, #1
 800897c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008988:	2300      	movs	r3, #0
}
 800898a:	4618      	mov	r0, r3
 800898c:	3708      	adds	r7, #8
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
	...

08008994 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d109      	bne.n	80089b8 <HAL_TIM_PWM_Start+0x24>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	bf14      	ite	ne
 80089b0:	2301      	movne	r3, #1
 80089b2:	2300      	moveq	r3, #0
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	e03c      	b.n	8008a32 <HAL_TIM_PWM_Start+0x9e>
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	2b04      	cmp	r3, #4
 80089bc:	d109      	bne.n	80089d2 <HAL_TIM_PWM_Start+0x3e>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	bf14      	ite	ne
 80089ca:	2301      	movne	r3, #1
 80089cc:	2300      	moveq	r3, #0
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	e02f      	b.n	8008a32 <HAL_TIM_PWM_Start+0x9e>
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	2b08      	cmp	r3, #8
 80089d6:	d109      	bne.n	80089ec <HAL_TIM_PWM_Start+0x58>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	bf14      	ite	ne
 80089e4:	2301      	movne	r3, #1
 80089e6:	2300      	moveq	r3, #0
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	e022      	b.n	8008a32 <HAL_TIM_PWM_Start+0x9e>
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	2b0c      	cmp	r3, #12
 80089f0:	d109      	bne.n	8008a06 <HAL_TIM_PWM_Start+0x72>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	bf14      	ite	ne
 80089fe:	2301      	movne	r3, #1
 8008a00:	2300      	moveq	r3, #0
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	e015      	b.n	8008a32 <HAL_TIM_PWM_Start+0x9e>
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	2b10      	cmp	r3, #16
 8008a0a:	d109      	bne.n	8008a20 <HAL_TIM_PWM_Start+0x8c>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	bf14      	ite	ne
 8008a18:	2301      	movne	r3, #1
 8008a1a:	2300      	moveq	r3, #0
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	e008      	b.n	8008a32 <HAL_TIM_PWM_Start+0x9e>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	bf14      	ite	ne
 8008a2c:	2301      	movne	r3, #1
 8008a2e:	2300      	moveq	r3, #0
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d001      	beq.n	8008a3a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	e0a1      	b.n	8008b7e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d104      	bne.n	8008a4a <HAL_TIM_PWM_Start+0xb6>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2202      	movs	r2, #2
 8008a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a48:	e023      	b.n	8008a92 <HAL_TIM_PWM_Start+0xfe>
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	2b04      	cmp	r3, #4
 8008a4e:	d104      	bne.n	8008a5a <HAL_TIM_PWM_Start+0xc6>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2202      	movs	r2, #2
 8008a54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a58:	e01b      	b.n	8008a92 <HAL_TIM_PWM_Start+0xfe>
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	2b08      	cmp	r3, #8
 8008a5e:	d104      	bne.n	8008a6a <HAL_TIM_PWM_Start+0xd6>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2202      	movs	r2, #2
 8008a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a68:	e013      	b.n	8008a92 <HAL_TIM_PWM_Start+0xfe>
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	2b0c      	cmp	r3, #12
 8008a6e:	d104      	bne.n	8008a7a <HAL_TIM_PWM_Start+0xe6>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2202      	movs	r2, #2
 8008a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008a78:	e00b      	b.n	8008a92 <HAL_TIM_PWM_Start+0xfe>
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	2b10      	cmp	r3, #16
 8008a7e:	d104      	bne.n	8008a8a <HAL_TIM_PWM_Start+0xf6>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2202      	movs	r2, #2
 8008a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a88:	e003      	b.n	8008a92 <HAL_TIM_PWM_Start+0xfe>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2202      	movs	r2, #2
 8008a8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2201      	movs	r2, #1
 8008a98:	6839      	ldr	r1, [r7, #0]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 fe74 	bl	8009788 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a38      	ldr	r2, [pc, #224]	@ (8008b88 <HAL_TIM_PWM_Start+0x1f4>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d018      	beq.n	8008adc <HAL_TIM_PWM_Start+0x148>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a37      	ldr	r2, [pc, #220]	@ (8008b8c <HAL_TIM_PWM_Start+0x1f8>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d013      	beq.n	8008adc <HAL_TIM_PWM_Start+0x148>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a35      	ldr	r2, [pc, #212]	@ (8008b90 <HAL_TIM_PWM_Start+0x1fc>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d00e      	beq.n	8008adc <HAL_TIM_PWM_Start+0x148>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a34      	ldr	r2, [pc, #208]	@ (8008b94 <HAL_TIM_PWM_Start+0x200>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d009      	beq.n	8008adc <HAL_TIM_PWM_Start+0x148>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a32      	ldr	r2, [pc, #200]	@ (8008b98 <HAL_TIM_PWM_Start+0x204>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d004      	beq.n	8008adc <HAL_TIM_PWM_Start+0x148>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a31      	ldr	r2, [pc, #196]	@ (8008b9c <HAL_TIM_PWM_Start+0x208>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d101      	bne.n	8008ae0 <HAL_TIM_PWM_Start+0x14c>
 8008adc:	2301      	movs	r3, #1
 8008ade:	e000      	b.n	8008ae2 <HAL_TIM_PWM_Start+0x14e>
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d007      	beq.n	8008af6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008af4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a23      	ldr	r2, [pc, #140]	@ (8008b88 <HAL_TIM_PWM_Start+0x1f4>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d01d      	beq.n	8008b3c <HAL_TIM_PWM_Start+0x1a8>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b08:	d018      	beq.n	8008b3c <HAL_TIM_PWM_Start+0x1a8>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a24      	ldr	r2, [pc, #144]	@ (8008ba0 <HAL_TIM_PWM_Start+0x20c>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d013      	beq.n	8008b3c <HAL_TIM_PWM_Start+0x1a8>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a22      	ldr	r2, [pc, #136]	@ (8008ba4 <HAL_TIM_PWM_Start+0x210>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d00e      	beq.n	8008b3c <HAL_TIM_PWM_Start+0x1a8>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a1a      	ldr	r2, [pc, #104]	@ (8008b8c <HAL_TIM_PWM_Start+0x1f8>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d009      	beq.n	8008b3c <HAL_TIM_PWM_Start+0x1a8>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a18      	ldr	r2, [pc, #96]	@ (8008b90 <HAL_TIM_PWM_Start+0x1fc>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d004      	beq.n	8008b3c <HAL_TIM_PWM_Start+0x1a8>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a19      	ldr	r2, [pc, #100]	@ (8008b9c <HAL_TIM_PWM_Start+0x208>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d115      	bne.n	8008b68 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	689a      	ldr	r2, [r3, #8]
 8008b42:	4b19      	ldr	r3, [pc, #100]	@ (8008ba8 <HAL_TIM_PWM_Start+0x214>)
 8008b44:	4013      	ands	r3, r2
 8008b46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2b06      	cmp	r3, #6
 8008b4c:	d015      	beq.n	8008b7a <HAL_TIM_PWM_Start+0x1e6>
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b54:	d011      	beq.n	8008b7a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f042 0201 	orr.w	r2, r2, #1
 8008b64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b66:	e008      	b.n	8008b7a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f042 0201 	orr.w	r2, r2, #1
 8008b76:	601a      	str	r2, [r3, #0]
 8008b78:	e000      	b.n	8008b7c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	40012c00 	.word	0x40012c00
 8008b8c:	40013400 	.word	0x40013400
 8008b90:	40014000 	.word	0x40014000
 8008b94:	40014400 	.word	0x40014400
 8008b98:	40014800 	.word	0x40014800
 8008b9c:	40015000 	.word	0x40015000
 8008ba0:	40000400 	.word	0x40000400
 8008ba4:	40000800 	.word	0x40000800
 8008ba8:	00010007 	.word	0x00010007

08008bac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	f003 0302 	and.w	r3, r3, #2
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d020      	beq.n	8008c10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f003 0302 	and.w	r3, r3, #2
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d01b      	beq.n	8008c10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f06f 0202 	mvn.w	r2, #2
 8008be0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2201      	movs	r2, #1
 8008be6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	699b      	ldr	r3, [r3, #24]
 8008bee:	f003 0303 	and.w	r3, r3, #3
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d003      	beq.n	8008bfe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f9f8 	bl	8008fec <HAL_TIM_IC_CaptureCallback>
 8008bfc:	e005      	b.n	8008c0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 f9ea 	bl	8008fd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 f9fb 	bl	8009000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	f003 0304 	and.w	r3, r3, #4
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d020      	beq.n	8008c5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f003 0304 	and.w	r3, r3, #4
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d01b      	beq.n	8008c5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f06f 0204 	mvn.w	r2, #4
 8008c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2202      	movs	r2, #2
 8008c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d003      	beq.n	8008c4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f9d2 	bl	8008fec <HAL_TIM_IC_CaptureCallback>
 8008c48:	e005      	b.n	8008c56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f9c4 	bl	8008fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 f9d5 	bl	8009000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	f003 0308 	and.w	r3, r3, #8
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d020      	beq.n	8008ca8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f003 0308 	and.w	r3, r3, #8
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d01b      	beq.n	8008ca8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f06f 0208 	mvn.w	r2, #8
 8008c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2204      	movs	r2, #4
 8008c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	69db      	ldr	r3, [r3, #28]
 8008c86:	f003 0303 	and.w	r3, r3, #3
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d003      	beq.n	8008c96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f9ac 	bl	8008fec <HAL_TIM_IC_CaptureCallback>
 8008c94:	e005      	b.n	8008ca2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f99e 	bl	8008fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 f9af 	bl	8009000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	f003 0310 	and.w	r3, r3, #16
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d020      	beq.n	8008cf4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f003 0310 	and.w	r3, r3, #16
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d01b      	beq.n	8008cf4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f06f 0210 	mvn.w	r2, #16
 8008cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2208      	movs	r2, #8
 8008cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	69db      	ldr	r3, [r3, #28]
 8008cd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d003      	beq.n	8008ce2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f986 	bl	8008fec <HAL_TIM_IC_CaptureCallback>
 8008ce0:	e005      	b.n	8008cee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 f978 	bl	8008fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 f989 	bl	8009000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	f003 0301 	and.w	r3, r3, #1
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00c      	beq.n	8008d18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f003 0301 	and.w	r3, r3, #1
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d007      	beq.n	8008d18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f06f 0201 	mvn.w	r2, #1
 8008d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f7fa fdac 	bl	8003870 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d00c      	beq.n	8008d3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d007      	beq.n	8008d3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fde2 	bl	8009900 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00c      	beq.n	8008d60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d007      	beq.n	8008d60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 fdda 	bl	8009914 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00c      	beq.n	8008d84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d007      	beq.n	8008d84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f948 	bl	8009014 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	f003 0320 	and.w	r3, r3, #32
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00c      	beq.n	8008da8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f003 0320 	and.w	r3, r3, #32
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d007      	beq.n	8008da8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f06f 0220 	mvn.w	r2, #32
 8008da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 fda2 	bl	80098ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008da8:	bf00      	nop
 8008daa:	3710      	adds	r7, #16
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b086      	sub	sp, #24
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d101      	bne.n	8008dce <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008dca:	2302      	movs	r3, #2
 8008dcc:	e0ff      	b.n	8008fce <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2b14      	cmp	r3, #20
 8008dda:	f200 80f0 	bhi.w	8008fbe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008dde:	a201      	add	r2, pc, #4	@ (adr r2, 8008de4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de4:	08008e39 	.word	0x08008e39
 8008de8:	08008fbf 	.word	0x08008fbf
 8008dec:	08008fbf 	.word	0x08008fbf
 8008df0:	08008fbf 	.word	0x08008fbf
 8008df4:	08008e79 	.word	0x08008e79
 8008df8:	08008fbf 	.word	0x08008fbf
 8008dfc:	08008fbf 	.word	0x08008fbf
 8008e00:	08008fbf 	.word	0x08008fbf
 8008e04:	08008ebb 	.word	0x08008ebb
 8008e08:	08008fbf 	.word	0x08008fbf
 8008e0c:	08008fbf 	.word	0x08008fbf
 8008e10:	08008fbf 	.word	0x08008fbf
 8008e14:	08008efb 	.word	0x08008efb
 8008e18:	08008fbf 	.word	0x08008fbf
 8008e1c:	08008fbf 	.word	0x08008fbf
 8008e20:	08008fbf 	.word	0x08008fbf
 8008e24:	08008f3d 	.word	0x08008f3d
 8008e28:	08008fbf 	.word	0x08008fbf
 8008e2c:	08008fbf 	.word	0x08008fbf
 8008e30:	08008fbf 	.word	0x08008fbf
 8008e34:	08008f7d 	.word	0x08008f7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68b9      	ldr	r1, [r7, #8]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f000 f99c 	bl	800917c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	699a      	ldr	r2, [r3, #24]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f042 0208 	orr.w	r2, r2, #8
 8008e52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	699a      	ldr	r2, [r3, #24]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f022 0204 	bic.w	r2, r2, #4
 8008e62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	6999      	ldr	r1, [r3, #24]
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	691a      	ldr	r2, [r3, #16]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	430a      	orrs	r2, r1
 8008e74:	619a      	str	r2, [r3, #24]
      break;
 8008e76:	e0a5      	b.n	8008fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	68b9      	ldr	r1, [r7, #8]
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f000 fa16 	bl	80092b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	699a      	ldr	r2, [r3, #24]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	699a      	ldr	r2, [r3, #24]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	6999      	ldr	r1, [r3, #24]
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	021a      	lsls	r2, r3, #8
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	430a      	orrs	r2, r1
 8008eb6:	619a      	str	r2, [r3, #24]
      break;
 8008eb8:	e084      	b.n	8008fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	68b9      	ldr	r1, [r7, #8]
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f000 fa89 	bl	80093d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	69da      	ldr	r2, [r3, #28]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f042 0208 	orr.w	r2, r2, #8
 8008ed4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	69da      	ldr	r2, [r3, #28]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f022 0204 	bic.w	r2, r2, #4
 8008ee4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	69d9      	ldr	r1, [r3, #28]
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	691a      	ldr	r2, [r3, #16]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	430a      	orrs	r2, r1
 8008ef6:	61da      	str	r2, [r3, #28]
      break;
 8008ef8:	e064      	b.n	8008fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68b9      	ldr	r1, [r7, #8]
 8008f00:	4618      	mov	r0, r3
 8008f02:	f000 fafb 	bl	80094fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	69da      	ldr	r2, [r3, #28]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	69da      	ldr	r2, [r3, #28]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	69d9      	ldr	r1, [r3, #28]
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	691b      	ldr	r3, [r3, #16]
 8008f30:	021a      	lsls	r2, r3, #8
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	430a      	orrs	r2, r1
 8008f38:	61da      	str	r2, [r3, #28]
      break;
 8008f3a:	e043      	b.n	8008fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68b9      	ldr	r1, [r7, #8]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 fb4a 	bl	80095dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f042 0208 	orr.w	r2, r2, #8
 8008f56:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f022 0204 	bic.w	r2, r2, #4
 8008f66:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	691a      	ldr	r2, [r3, #16]
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	430a      	orrs	r2, r1
 8008f78:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008f7a:	e023      	b.n	8008fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68b9      	ldr	r1, [r7, #8]
 8008f82:	4618      	mov	r0, r3
 8008f84:	f000 fb94 	bl	80096b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f96:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008fa6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	021a      	lsls	r2, r3, #8
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	430a      	orrs	r2, r1
 8008fba:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008fbc:	e002      	b.n	8008fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	75fb      	strb	r3, [r7, #23]
      break;
 8008fc2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3718      	adds	r7, #24
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop

08008fd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008fe0:	bf00      	nop
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr

08008fec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ff4:	bf00      	nop
 8008ff6:	370c      	adds	r7, #12
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009008:	bf00      	nop
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800901c:	bf00      	nop
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009028:	b480      	push	{r7}
 800902a:	b085      	sub	sp, #20
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4a48      	ldr	r2, [pc, #288]	@ (800915c <TIM_Base_SetConfig+0x134>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d013      	beq.n	8009068 <TIM_Base_SetConfig+0x40>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009046:	d00f      	beq.n	8009068 <TIM_Base_SetConfig+0x40>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4a45      	ldr	r2, [pc, #276]	@ (8009160 <TIM_Base_SetConfig+0x138>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d00b      	beq.n	8009068 <TIM_Base_SetConfig+0x40>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4a44      	ldr	r2, [pc, #272]	@ (8009164 <TIM_Base_SetConfig+0x13c>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d007      	beq.n	8009068 <TIM_Base_SetConfig+0x40>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4a43      	ldr	r2, [pc, #268]	@ (8009168 <TIM_Base_SetConfig+0x140>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d003      	beq.n	8009068 <TIM_Base_SetConfig+0x40>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4a42      	ldr	r2, [pc, #264]	@ (800916c <TIM_Base_SetConfig+0x144>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d108      	bne.n	800907a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800906e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	68fa      	ldr	r2, [r7, #12]
 8009076:	4313      	orrs	r3, r2
 8009078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4a37      	ldr	r2, [pc, #220]	@ (800915c <TIM_Base_SetConfig+0x134>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d01f      	beq.n	80090c2 <TIM_Base_SetConfig+0x9a>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009088:	d01b      	beq.n	80090c2 <TIM_Base_SetConfig+0x9a>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4a34      	ldr	r2, [pc, #208]	@ (8009160 <TIM_Base_SetConfig+0x138>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d017      	beq.n	80090c2 <TIM_Base_SetConfig+0x9a>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a33      	ldr	r2, [pc, #204]	@ (8009164 <TIM_Base_SetConfig+0x13c>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d013      	beq.n	80090c2 <TIM_Base_SetConfig+0x9a>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a32      	ldr	r2, [pc, #200]	@ (8009168 <TIM_Base_SetConfig+0x140>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d00f      	beq.n	80090c2 <TIM_Base_SetConfig+0x9a>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a32      	ldr	r2, [pc, #200]	@ (8009170 <TIM_Base_SetConfig+0x148>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d00b      	beq.n	80090c2 <TIM_Base_SetConfig+0x9a>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a31      	ldr	r2, [pc, #196]	@ (8009174 <TIM_Base_SetConfig+0x14c>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d007      	beq.n	80090c2 <TIM_Base_SetConfig+0x9a>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a30      	ldr	r2, [pc, #192]	@ (8009178 <TIM_Base_SetConfig+0x150>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d003      	beq.n	80090c2 <TIM_Base_SetConfig+0x9a>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a2b      	ldr	r2, [pc, #172]	@ (800916c <TIM_Base_SetConfig+0x144>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d108      	bne.n	80090d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	68fa      	ldr	r2, [r7, #12]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	695b      	ldr	r3, [r3, #20]
 80090de:	4313      	orrs	r3, r2
 80090e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	68fa      	ldr	r2, [r7, #12]
 80090e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	689a      	ldr	r2, [r3, #8]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4a18      	ldr	r2, [pc, #96]	@ (800915c <TIM_Base_SetConfig+0x134>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d013      	beq.n	8009128 <TIM_Base_SetConfig+0x100>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4a19      	ldr	r2, [pc, #100]	@ (8009168 <TIM_Base_SetConfig+0x140>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d00f      	beq.n	8009128 <TIM_Base_SetConfig+0x100>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4a19      	ldr	r2, [pc, #100]	@ (8009170 <TIM_Base_SetConfig+0x148>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d00b      	beq.n	8009128 <TIM_Base_SetConfig+0x100>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a18      	ldr	r2, [pc, #96]	@ (8009174 <TIM_Base_SetConfig+0x14c>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d007      	beq.n	8009128 <TIM_Base_SetConfig+0x100>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a17      	ldr	r2, [pc, #92]	@ (8009178 <TIM_Base_SetConfig+0x150>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d003      	beq.n	8009128 <TIM_Base_SetConfig+0x100>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a12      	ldr	r2, [pc, #72]	@ (800916c <TIM_Base_SetConfig+0x144>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d103      	bne.n	8009130 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	691a      	ldr	r2, [r3, #16]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2201      	movs	r2, #1
 8009134:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	691b      	ldr	r3, [r3, #16]
 800913a:	f003 0301 	and.w	r3, r3, #1
 800913e:	2b01      	cmp	r3, #1
 8009140:	d105      	bne.n	800914e <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	f023 0201 	bic.w	r2, r3, #1
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	611a      	str	r2, [r3, #16]
  }
}
 800914e:	bf00      	nop
 8009150:	3714      	adds	r7, #20
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	40012c00 	.word	0x40012c00
 8009160:	40000400 	.word	0x40000400
 8009164:	40000800 	.word	0x40000800
 8009168:	40013400 	.word	0x40013400
 800916c:	40015000 	.word	0x40015000
 8009170:	40014000 	.word	0x40014000
 8009174:	40014400 	.word	0x40014400
 8009178:	40014800 	.word	0x40014800

0800917c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800917c:	b480      	push	{r7}
 800917e:	b087      	sub	sp, #28
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a1b      	ldr	r3, [r3, #32]
 800918a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6a1b      	ldr	r3, [r3, #32]
 8009190:	f023 0201 	bic.w	r2, r3, #1
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	699b      	ldr	r3, [r3, #24]
 80091a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80091aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f023 0303 	bic.w	r3, r3, #3
 80091b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	4313      	orrs	r3, r2
 80091c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	f023 0302 	bic.w	r3, r3, #2
 80091c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	697a      	ldr	r2, [r7, #20]
 80091d0:	4313      	orrs	r3, r2
 80091d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a30      	ldr	r2, [pc, #192]	@ (8009298 <TIM_OC1_SetConfig+0x11c>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d013      	beq.n	8009204 <TIM_OC1_SetConfig+0x88>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4a2f      	ldr	r2, [pc, #188]	@ (800929c <TIM_OC1_SetConfig+0x120>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d00f      	beq.n	8009204 <TIM_OC1_SetConfig+0x88>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	4a2e      	ldr	r2, [pc, #184]	@ (80092a0 <TIM_OC1_SetConfig+0x124>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d00b      	beq.n	8009204 <TIM_OC1_SetConfig+0x88>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4a2d      	ldr	r2, [pc, #180]	@ (80092a4 <TIM_OC1_SetConfig+0x128>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d007      	beq.n	8009204 <TIM_OC1_SetConfig+0x88>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4a2c      	ldr	r2, [pc, #176]	@ (80092a8 <TIM_OC1_SetConfig+0x12c>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d003      	beq.n	8009204 <TIM_OC1_SetConfig+0x88>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	4a2b      	ldr	r2, [pc, #172]	@ (80092ac <TIM_OC1_SetConfig+0x130>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d10c      	bne.n	800921e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	f023 0308 	bic.w	r3, r3, #8
 800920a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	697a      	ldr	r2, [r7, #20]
 8009212:	4313      	orrs	r3, r2
 8009214:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	f023 0304 	bic.w	r3, r3, #4
 800921c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4a1d      	ldr	r2, [pc, #116]	@ (8009298 <TIM_OC1_SetConfig+0x11c>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d013      	beq.n	800924e <TIM_OC1_SetConfig+0xd2>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4a1c      	ldr	r2, [pc, #112]	@ (800929c <TIM_OC1_SetConfig+0x120>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d00f      	beq.n	800924e <TIM_OC1_SetConfig+0xd2>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4a1b      	ldr	r2, [pc, #108]	@ (80092a0 <TIM_OC1_SetConfig+0x124>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d00b      	beq.n	800924e <TIM_OC1_SetConfig+0xd2>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	4a1a      	ldr	r2, [pc, #104]	@ (80092a4 <TIM_OC1_SetConfig+0x128>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d007      	beq.n	800924e <TIM_OC1_SetConfig+0xd2>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	4a19      	ldr	r2, [pc, #100]	@ (80092a8 <TIM_OC1_SetConfig+0x12c>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d003      	beq.n	800924e <TIM_OC1_SetConfig+0xd2>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4a18      	ldr	r2, [pc, #96]	@ (80092ac <TIM_OC1_SetConfig+0x130>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d111      	bne.n	8009272 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800925c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	695b      	ldr	r3, [r3, #20]
 8009262:	693a      	ldr	r2, [r7, #16]
 8009264:	4313      	orrs	r3, r2
 8009266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	699b      	ldr	r3, [r3, #24]
 800926c:	693a      	ldr	r2, [r7, #16]
 800926e:	4313      	orrs	r3, r2
 8009270:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	693a      	ldr	r2, [r7, #16]
 8009276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	68fa      	ldr	r2, [r7, #12]
 800927c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	685a      	ldr	r2, [r3, #4]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	697a      	ldr	r2, [r7, #20]
 800928a:	621a      	str	r2, [r3, #32]
}
 800928c:	bf00      	nop
 800928e:	371c      	adds	r7, #28
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr
 8009298:	40012c00 	.word	0x40012c00
 800929c:	40013400 	.word	0x40013400
 80092a0:	40014000 	.word	0x40014000
 80092a4:	40014400 	.word	0x40014400
 80092a8:	40014800 	.word	0x40014800
 80092ac:	40015000 	.word	0x40015000

080092b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b087      	sub	sp, #28
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a1b      	ldr	r3, [r3, #32]
 80092be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6a1b      	ldr	r3, [r3, #32]
 80092c4:	f023 0210 	bic.w	r2, r3, #16
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	699b      	ldr	r3, [r3, #24]
 80092d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80092de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	021b      	lsls	r3, r3, #8
 80092f2:	68fa      	ldr	r2, [r7, #12]
 80092f4:	4313      	orrs	r3, r2
 80092f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	f023 0320 	bic.w	r3, r3, #32
 80092fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	011b      	lsls	r3, r3, #4
 8009306:	697a      	ldr	r2, [r7, #20]
 8009308:	4313      	orrs	r3, r2
 800930a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4a2c      	ldr	r2, [pc, #176]	@ (80093c0 <TIM_OC2_SetConfig+0x110>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d007      	beq.n	8009324 <TIM_OC2_SetConfig+0x74>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	4a2b      	ldr	r2, [pc, #172]	@ (80093c4 <TIM_OC2_SetConfig+0x114>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d003      	beq.n	8009324 <TIM_OC2_SetConfig+0x74>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	4a2a      	ldr	r2, [pc, #168]	@ (80093c8 <TIM_OC2_SetConfig+0x118>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d10d      	bne.n	8009340 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800932a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	011b      	lsls	r3, r3, #4
 8009332:	697a      	ldr	r2, [r7, #20]
 8009334:	4313      	orrs	r3, r2
 8009336:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800933e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4a1f      	ldr	r2, [pc, #124]	@ (80093c0 <TIM_OC2_SetConfig+0x110>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d013      	beq.n	8009370 <TIM_OC2_SetConfig+0xc0>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4a1e      	ldr	r2, [pc, #120]	@ (80093c4 <TIM_OC2_SetConfig+0x114>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d00f      	beq.n	8009370 <TIM_OC2_SetConfig+0xc0>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a1e      	ldr	r2, [pc, #120]	@ (80093cc <TIM_OC2_SetConfig+0x11c>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d00b      	beq.n	8009370 <TIM_OC2_SetConfig+0xc0>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4a1d      	ldr	r2, [pc, #116]	@ (80093d0 <TIM_OC2_SetConfig+0x120>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d007      	beq.n	8009370 <TIM_OC2_SetConfig+0xc0>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4a1c      	ldr	r2, [pc, #112]	@ (80093d4 <TIM_OC2_SetConfig+0x124>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d003      	beq.n	8009370 <TIM_OC2_SetConfig+0xc0>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4a17      	ldr	r2, [pc, #92]	@ (80093c8 <TIM_OC2_SetConfig+0x118>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d113      	bne.n	8009398 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009376:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800937e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	695b      	ldr	r3, [r3, #20]
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	693a      	ldr	r2, [r7, #16]
 8009388:	4313      	orrs	r3, r2
 800938a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	699b      	ldr	r3, [r3, #24]
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	693a      	ldr	r2, [r7, #16]
 8009394:	4313      	orrs	r3, r2
 8009396:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	693a      	ldr	r2, [r7, #16]
 800939c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	685a      	ldr	r2, [r3, #4]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	697a      	ldr	r2, [r7, #20]
 80093b0:	621a      	str	r2, [r3, #32]
}
 80093b2:	bf00      	nop
 80093b4:	371c      	adds	r7, #28
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr
 80093be:	bf00      	nop
 80093c0:	40012c00 	.word	0x40012c00
 80093c4:	40013400 	.word	0x40013400
 80093c8:	40015000 	.word	0x40015000
 80093cc:	40014000 	.word	0x40014000
 80093d0:	40014400 	.word	0x40014400
 80093d4:	40014800 	.word	0x40014800

080093d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093d8:	b480      	push	{r7}
 80093da:	b087      	sub	sp, #28
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6a1b      	ldr	r3, [r3, #32]
 80093e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6a1b      	ldr	r3, [r3, #32]
 80093ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	69db      	ldr	r3, [r3, #28]
 80093fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800940a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f023 0303 	bic.w	r3, r3, #3
 8009412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	4313      	orrs	r3, r2
 800941c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009424:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	021b      	lsls	r3, r3, #8
 800942c:	697a      	ldr	r2, [r7, #20]
 800942e:	4313      	orrs	r3, r2
 8009430:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a2b      	ldr	r2, [pc, #172]	@ (80094e4 <TIM_OC3_SetConfig+0x10c>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d007      	beq.n	800944a <TIM_OC3_SetConfig+0x72>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a2a      	ldr	r2, [pc, #168]	@ (80094e8 <TIM_OC3_SetConfig+0x110>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d003      	beq.n	800944a <TIM_OC3_SetConfig+0x72>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a29      	ldr	r2, [pc, #164]	@ (80094ec <TIM_OC3_SetConfig+0x114>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d10d      	bne.n	8009466 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009450:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	021b      	lsls	r3, r3, #8
 8009458:	697a      	ldr	r2, [r7, #20]
 800945a:	4313      	orrs	r3, r2
 800945c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009464:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4a1e      	ldr	r2, [pc, #120]	@ (80094e4 <TIM_OC3_SetConfig+0x10c>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d013      	beq.n	8009496 <TIM_OC3_SetConfig+0xbe>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	4a1d      	ldr	r2, [pc, #116]	@ (80094e8 <TIM_OC3_SetConfig+0x110>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d00f      	beq.n	8009496 <TIM_OC3_SetConfig+0xbe>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4a1d      	ldr	r2, [pc, #116]	@ (80094f0 <TIM_OC3_SetConfig+0x118>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d00b      	beq.n	8009496 <TIM_OC3_SetConfig+0xbe>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4a1c      	ldr	r2, [pc, #112]	@ (80094f4 <TIM_OC3_SetConfig+0x11c>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d007      	beq.n	8009496 <TIM_OC3_SetConfig+0xbe>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4a1b      	ldr	r2, [pc, #108]	@ (80094f8 <TIM_OC3_SetConfig+0x120>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d003      	beq.n	8009496 <TIM_OC3_SetConfig+0xbe>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	4a16      	ldr	r2, [pc, #88]	@ (80094ec <TIM_OC3_SetConfig+0x114>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d113      	bne.n	80094be <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800949c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80094a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	695b      	ldr	r3, [r3, #20]
 80094aa:	011b      	lsls	r3, r3, #4
 80094ac:	693a      	ldr	r2, [r7, #16]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	699b      	ldr	r3, [r3, #24]
 80094b6:	011b      	lsls	r3, r3, #4
 80094b8:	693a      	ldr	r2, [r7, #16]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	693a      	ldr	r2, [r7, #16]
 80094c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	685a      	ldr	r2, [r3, #4]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	697a      	ldr	r2, [r7, #20]
 80094d6:	621a      	str	r2, [r3, #32]
}
 80094d8:	bf00      	nop
 80094da:	371c      	adds	r7, #28
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr
 80094e4:	40012c00 	.word	0x40012c00
 80094e8:	40013400 	.word	0x40013400
 80094ec:	40015000 	.word	0x40015000
 80094f0:	40014000 	.word	0x40014000
 80094f4:	40014400 	.word	0x40014400
 80094f8:	40014800 	.word	0x40014800

080094fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b087      	sub	sp, #28
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6a1b      	ldr	r3, [r3, #32]
 800950a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6a1b      	ldr	r3, [r3, #32]
 8009510:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	69db      	ldr	r3, [r3, #28]
 8009522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800952a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800952e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009536:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	021b      	lsls	r3, r3, #8
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	4313      	orrs	r3, r2
 8009542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800954a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	031b      	lsls	r3, r3, #12
 8009552:	693a      	ldr	r2, [r7, #16]
 8009554:	4313      	orrs	r3, r2
 8009556:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	4a1a      	ldr	r2, [pc, #104]	@ (80095c4 <TIM_OC4_SetConfig+0xc8>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d013      	beq.n	8009588 <TIM_OC4_SetConfig+0x8c>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4a19      	ldr	r2, [pc, #100]	@ (80095c8 <TIM_OC4_SetConfig+0xcc>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d00f      	beq.n	8009588 <TIM_OC4_SetConfig+0x8c>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4a18      	ldr	r2, [pc, #96]	@ (80095cc <TIM_OC4_SetConfig+0xd0>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d00b      	beq.n	8009588 <TIM_OC4_SetConfig+0x8c>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a17      	ldr	r2, [pc, #92]	@ (80095d0 <TIM_OC4_SetConfig+0xd4>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d007      	beq.n	8009588 <TIM_OC4_SetConfig+0x8c>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4a16      	ldr	r2, [pc, #88]	@ (80095d4 <TIM_OC4_SetConfig+0xd8>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d003      	beq.n	8009588 <TIM_OC4_SetConfig+0x8c>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4a15      	ldr	r2, [pc, #84]	@ (80095d8 <TIM_OC4_SetConfig+0xdc>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d109      	bne.n	800959c <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800958e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	695b      	ldr	r3, [r3, #20]
 8009594:	019b      	lsls	r3, r3, #6
 8009596:	697a      	ldr	r2, [r7, #20]
 8009598:	4313      	orrs	r3, r2
 800959a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	697a      	ldr	r2, [r7, #20]
 80095a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	685a      	ldr	r2, [r3, #4]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	693a      	ldr	r2, [r7, #16]
 80095b4:	621a      	str	r2, [r3, #32]
}
 80095b6:	bf00      	nop
 80095b8:	371c      	adds	r7, #28
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr
 80095c2:	bf00      	nop
 80095c4:	40012c00 	.word	0x40012c00
 80095c8:	40013400 	.word	0x40013400
 80095cc:	40014000 	.word	0x40014000
 80095d0:	40014400 	.word	0x40014400
 80095d4:	40014800 	.word	0x40014800
 80095d8:	40015000 	.word	0x40015000

080095dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80095dc:	b480      	push	{r7}
 80095de:	b087      	sub	sp, #28
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6a1b      	ldr	r3, [r3, #32]
 80095ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6a1b      	ldr	r3, [r3, #32]
 80095f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800960a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800960e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	4313      	orrs	r3, r2
 8009618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009620:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	041b      	lsls	r3, r3, #16
 8009628:	693a      	ldr	r2, [r7, #16]
 800962a:	4313      	orrs	r3, r2
 800962c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a19      	ldr	r2, [pc, #100]	@ (8009698 <TIM_OC5_SetConfig+0xbc>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d013      	beq.n	800965e <TIM_OC5_SetConfig+0x82>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4a18      	ldr	r2, [pc, #96]	@ (800969c <TIM_OC5_SetConfig+0xc0>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d00f      	beq.n	800965e <TIM_OC5_SetConfig+0x82>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	4a17      	ldr	r2, [pc, #92]	@ (80096a0 <TIM_OC5_SetConfig+0xc4>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d00b      	beq.n	800965e <TIM_OC5_SetConfig+0x82>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4a16      	ldr	r2, [pc, #88]	@ (80096a4 <TIM_OC5_SetConfig+0xc8>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d007      	beq.n	800965e <TIM_OC5_SetConfig+0x82>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4a15      	ldr	r2, [pc, #84]	@ (80096a8 <TIM_OC5_SetConfig+0xcc>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d003      	beq.n	800965e <TIM_OC5_SetConfig+0x82>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4a14      	ldr	r2, [pc, #80]	@ (80096ac <TIM_OC5_SetConfig+0xd0>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d109      	bne.n	8009672 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009664:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	695b      	ldr	r3, [r3, #20]
 800966a:	021b      	lsls	r3, r3, #8
 800966c:	697a      	ldr	r2, [r7, #20]
 800966e:	4313      	orrs	r3, r2
 8009670:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	697a      	ldr	r2, [r7, #20]
 8009676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	685a      	ldr	r2, [r3, #4]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	693a      	ldr	r2, [r7, #16]
 800968a:	621a      	str	r2, [r3, #32]
}
 800968c:	bf00      	nop
 800968e:	371c      	adds	r7, #28
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr
 8009698:	40012c00 	.word	0x40012c00
 800969c:	40013400 	.word	0x40013400
 80096a0:	40014000 	.word	0x40014000
 80096a4:	40014400 	.word	0x40014400
 80096a8:	40014800 	.word	0x40014800
 80096ac:	40015000 	.word	0x40015000

080096b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b087      	sub	sp, #28
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6a1b      	ldr	r3, [r3, #32]
 80096be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6a1b      	ldr	r3, [r3, #32]
 80096c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80096de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	021b      	lsls	r3, r3, #8
 80096ea:	68fa      	ldr	r2, [r7, #12]
 80096ec:	4313      	orrs	r3, r2
 80096ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80096f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	051b      	lsls	r3, r3, #20
 80096fe:	693a      	ldr	r2, [r7, #16]
 8009700:	4313      	orrs	r3, r2
 8009702:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4a1a      	ldr	r2, [pc, #104]	@ (8009770 <TIM_OC6_SetConfig+0xc0>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d013      	beq.n	8009734 <TIM_OC6_SetConfig+0x84>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	4a19      	ldr	r2, [pc, #100]	@ (8009774 <TIM_OC6_SetConfig+0xc4>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d00f      	beq.n	8009734 <TIM_OC6_SetConfig+0x84>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4a18      	ldr	r2, [pc, #96]	@ (8009778 <TIM_OC6_SetConfig+0xc8>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d00b      	beq.n	8009734 <TIM_OC6_SetConfig+0x84>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	4a17      	ldr	r2, [pc, #92]	@ (800977c <TIM_OC6_SetConfig+0xcc>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d007      	beq.n	8009734 <TIM_OC6_SetConfig+0x84>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	4a16      	ldr	r2, [pc, #88]	@ (8009780 <TIM_OC6_SetConfig+0xd0>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d003      	beq.n	8009734 <TIM_OC6_SetConfig+0x84>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	4a15      	ldr	r2, [pc, #84]	@ (8009784 <TIM_OC6_SetConfig+0xd4>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d109      	bne.n	8009748 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800973a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	695b      	ldr	r3, [r3, #20]
 8009740:	029b      	lsls	r3, r3, #10
 8009742:	697a      	ldr	r2, [r7, #20]
 8009744:	4313      	orrs	r3, r2
 8009746:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	697a      	ldr	r2, [r7, #20]
 800974c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	685a      	ldr	r2, [r3, #4]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	693a      	ldr	r2, [r7, #16]
 8009760:	621a      	str	r2, [r3, #32]
}
 8009762:	bf00      	nop
 8009764:	371c      	adds	r7, #28
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr
 800976e:	bf00      	nop
 8009770:	40012c00 	.word	0x40012c00
 8009774:	40013400 	.word	0x40013400
 8009778:	40014000 	.word	0x40014000
 800977c:	40014400 	.word	0x40014400
 8009780:	40014800 	.word	0x40014800
 8009784:	40015000 	.word	0x40015000

08009788 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009788:	b480      	push	{r7}
 800978a:	b087      	sub	sp, #28
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	f003 031f 	and.w	r3, r3, #31
 800979a:	2201      	movs	r2, #1
 800979c:	fa02 f303 	lsl.w	r3, r2, r3
 80097a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	6a1a      	ldr	r2, [r3, #32]
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	43db      	mvns	r3, r3
 80097aa:	401a      	ands	r2, r3
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	6a1a      	ldr	r2, [r3, #32]
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	f003 031f 	and.w	r3, r3, #31
 80097ba:	6879      	ldr	r1, [r7, #4]
 80097bc:	fa01 f303 	lsl.w	r3, r1, r3
 80097c0:	431a      	orrs	r2, r3
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	621a      	str	r2, [r3, #32]
}
 80097c6:	bf00      	nop
 80097c8:	371c      	adds	r7, #28
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr
	...

080097d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b085      	sub	sp, #20
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d101      	bne.n	80097ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80097e8:	2302      	movs	r3, #2
 80097ea:	e06d      	b.n	80098c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2201      	movs	r2, #1
 80097f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2202      	movs	r2, #2
 80097f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a30      	ldr	r2, [pc, #192]	@ (80098d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d009      	beq.n	800982a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a2f      	ldr	r2, [pc, #188]	@ (80098d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d004      	beq.n	800982a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a2d      	ldr	r2, [pc, #180]	@ (80098dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d108      	bne.n	800983c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009830:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	68fa      	ldr	r2, [r7, #12]
 8009838:	4313      	orrs	r3, r2
 800983a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009842:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	68fa      	ldr	r2, [r7, #12]
 800984a:	4313      	orrs	r3, r2
 800984c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	68fa      	ldr	r2, [r7, #12]
 8009854:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a1e      	ldr	r2, [pc, #120]	@ (80098d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d01d      	beq.n	800989c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009868:	d018      	beq.n	800989c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a1c      	ldr	r2, [pc, #112]	@ (80098e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d013      	beq.n	800989c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a1a      	ldr	r2, [pc, #104]	@ (80098e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d00e      	beq.n	800989c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a15      	ldr	r2, [pc, #84]	@ (80098d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d009      	beq.n	800989c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a16      	ldr	r2, [pc, #88]	@ (80098e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d004      	beq.n	800989c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a11      	ldr	r2, [pc, #68]	@ (80098dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d10c      	bne.n	80098b6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	689b      	ldr	r3, [r3, #8]
 80098a8:	68ba      	ldr	r2, [r7, #8]
 80098aa:	4313      	orrs	r3, r2
 80098ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	68ba      	ldr	r2, [r7, #8]
 80098b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3714      	adds	r7, #20
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr
 80098d4:	40012c00 	.word	0x40012c00
 80098d8:	40013400 	.word	0x40013400
 80098dc:	40015000 	.word	0x40015000
 80098e0:	40000400 	.word	0x40000400
 80098e4:	40000800 	.word	0x40000800
 80098e8:	40014000 	.word	0x40014000

080098ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80098f4:	bf00      	nop
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009900:	b480      	push	{r7}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009908:	bf00      	nop
 800990a:	370c      	adds	r7, #12
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800991c:	bf00      	nop
 800991e:	370c      	adds	r7, #12
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d101      	bne.n	800993a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009936:	2301      	movs	r3, #1
 8009938:	e040      	b.n	80099bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800993e:	2b00      	cmp	r3, #0
 8009940:	d106      	bne.n	8009950 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f7fa fc56 	bl	80041fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2224      	movs	r2, #36	@ 0x24
 8009954:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f022 0201 	bic.w	r2, r2, #1
 8009964:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800996a:	2b00      	cmp	r3, #0
 800996c:	d002      	beq.n	8009974 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 f9fc 	bl	8009d6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 f825 	bl	80099c4 <UART_SetConfig>
 800997a:	4603      	mov	r3, r0
 800997c:	2b01      	cmp	r3, #1
 800997e:	d101      	bne.n	8009984 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	e01b      	b.n	80099bc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	685a      	ldr	r2, [r3, #4]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009992:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	689a      	ldr	r2, [r3, #8]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80099a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f042 0201 	orr.w	r2, r2, #1
 80099b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 fa7b 	bl	8009eb0 <UART_CheckIdleState>
 80099ba:	4603      	mov	r3, r0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b088      	sub	sp, #32
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80099cc:	2300      	movs	r3, #0
 80099ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	689a      	ldr	r2, [r3, #8]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	431a      	orrs	r2, r3
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	695b      	ldr	r3, [r3, #20]
 80099de:	431a      	orrs	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	69db      	ldr	r3, [r3, #28]
 80099e4:	4313      	orrs	r3, r2
 80099e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	4b92      	ldr	r3, [pc, #584]	@ (8009c38 <UART_SetConfig+0x274>)
 80099f0:	4013      	ands	r3, r2
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	6812      	ldr	r2, [r2, #0]
 80099f6:	6979      	ldr	r1, [r7, #20]
 80099f8:	430b      	orrs	r3, r1
 80099fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	68da      	ldr	r2, [r3, #12]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	430a      	orrs	r2, r1
 8009a10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	699b      	ldr	r3, [r3, #24]
 8009a16:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a1b      	ldr	r3, [r3, #32]
 8009a1c:	697a      	ldr	r2, [r7, #20]
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	697a      	ldr	r2, [r7, #20]
 8009a32:	430a      	orrs	r2, r1
 8009a34:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a80      	ldr	r2, [pc, #512]	@ (8009c3c <UART_SetConfig+0x278>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d120      	bne.n	8009a82 <UART_SetConfig+0xbe>
 8009a40:	4b7f      	ldr	r3, [pc, #508]	@ (8009c40 <UART_SetConfig+0x27c>)
 8009a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a44:	f003 0303 	and.w	r3, r3, #3
 8009a48:	2b03      	cmp	r3, #3
 8009a4a:	d817      	bhi.n	8009a7c <UART_SetConfig+0xb8>
 8009a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8009a54 <UART_SetConfig+0x90>)
 8009a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a52:	bf00      	nop
 8009a54:	08009a65 	.word	0x08009a65
 8009a58:	08009a71 	.word	0x08009a71
 8009a5c:	08009a77 	.word	0x08009a77
 8009a60:	08009a6b 	.word	0x08009a6b
 8009a64:	2301      	movs	r3, #1
 8009a66:	77fb      	strb	r3, [r7, #31]
 8009a68:	e0b5      	b.n	8009bd6 <UART_SetConfig+0x212>
 8009a6a:	2302      	movs	r3, #2
 8009a6c:	77fb      	strb	r3, [r7, #31]
 8009a6e:	e0b2      	b.n	8009bd6 <UART_SetConfig+0x212>
 8009a70:	2304      	movs	r3, #4
 8009a72:	77fb      	strb	r3, [r7, #31]
 8009a74:	e0af      	b.n	8009bd6 <UART_SetConfig+0x212>
 8009a76:	2308      	movs	r3, #8
 8009a78:	77fb      	strb	r3, [r7, #31]
 8009a7a:	e0ac      	b.n	8009bd6 <UART_SetConfig+0x212>
 8009a7c:	2310      	movs	r3, #16
 8009a7e:	77fb      	strb	r3, [r7, #31]
 8009a80:	e0a9      	b.n	8009bd6 <UART_SetConfig+0x212>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a6f      	ldr	r2, [pc, #444]	@ (8009c44 <UART_SetConfig+0x280>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d124      	bne.n	8009ad6 <UART_SetConfig+0x112>
 8009a8c:	4b6c      	ldr	r3, [pc, #432]	@ (8009c40 <UART_SetConfig+0x27c>)
 8009a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009a94:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009a98:	d011      	beq.n	8009abe <UART_SetConfig+0xfa>
 8009a9a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009a9e:	d817      	bhi.n	8009ad0 <UART_SetConfig+0x10c>
 8009aa0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009aa4:	d011      	beq.n	8009aca <UART_SetConfig+0x106>
 8009aa6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009aaa:	d811      	bhi.n	8009ad0 <UART_SetConfig+0x10c>
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d003      	beq.n	8009ab8 <UART_SetConfig+0xf4>
 8009ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ab4:	d006      	beq.n	8009ac4 <UART_SetConfig+0x100>
 8009ab6:	e00b      	b.n	8009ad0 <UART_SetConfig+0x10c>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	77fb      	strb	r3, [r7, #31]
 8009abc:	e08b      	b.n	8009bd6 <UART_SetConfig+0x212>
 8009abe:	2302      	movs	r3, #2
 8009ac0:	77fb      	strb	r3, [r7, #31]
 8009ac2:	e088      	b.n	8009bd6 <UART_SetConfig+0x212>
 8009ac4:	2304      	movs	r3, #4
 8009ac6:	77fb      	strb	r3, [r7, #31]
 8009ac8:	e085      	b.n	8009bd6 <UART_SetConfig+0x212>
 8009aca:	2308      	movs	r3, #8
 8009acc:	77fb      	strb	r3, [r7, #31]
 8009ace:	e082      	b.n	8009bd6 <UART_SetConfig+0x212>
 8009ad0:	2310      	movs	r3, #16
 8009ad2:	77fb      	strb	r3, [r7, #31]
 8009ad4:	e07f      	b.n	8009bd6 <UART_SetConfig+0x212>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a5b      	ldr	r2, [pc, #364]	@ (8009c48 <UART_SetConfig+0x284>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d124      	bne.n	8009b2a <UART_SetConfig+0x166>
 8009ae0:	4b57      	ldr	r3, [pc, #348]	@ (8009c40 <UART_SetConfig+0x27c>)
 8009ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ae4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8009ae8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009aec:	d011      	beq.n	8009b12 <UART_SetConfig+0x14e>
 8009aee:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009af2:	d817      	bhi.n	8009b24 <UART_SetConfig+0x160>
 8009af4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009af8:	d011      	beq.n	8009b1e <UART_SetConfig+0x15a>
 8009afa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009afe:	d811      	bhi.n	8009b24 <UART_SetConfig+0x160>
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d003      	beq.n	8009b0c <UART_SetConfig+0x148>
 8009b04:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009b08:	d006      	beq.n	8009b18 <UART_SetConfig+0x154>
 8009b0a:	e00b      	b.n	8009b24 <UART_SetConfig+0x160>
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	77fb      	strb	r3, [r7, #31]
 8009b10:	e061      	b.n	8009bd6 <UART_SetConfig+0x212>
 8009b12:	2302      	movs	r3, #2
 8009b14:	77fb      	strb	r3, [r7, #31]
 8009b16:	e05e      	b.n	8009bd6 <UART_SetConfig+0x212>
 8009b18:	2304      	movs	r3, #4
 8009b1a:	77fb      	strb	r3, [r7, #31]
 8009b1c:	e05b      	b.n	8009bd6 <UART_SetConfig+0x212>
 8009b1e:	2308      	movs	r3, #8
 8009b20:	77fb      	strb	r3, [r7, #31]
 8009b22:	e058      	b.n	8009bd6 <UART_SetConfig+0x212>
 8009b24:	2310      	movs	r3, #16
 8009b26:	77fb      	strb	r3, [r7, #31]
 8009b28:	e055      	b.n	8009bd6 <UART_SetConfig+0x212>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a47      	ldr	r2, [pc, #284]	@ (8009c4c <UART_SetConfig+0x288>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d124      	bne.n	8009b7e <UART_SetConfig+0x1ba>
 8009b34:	4b42      	ldr	r3, [pc, #264]	@ (8009c40 <UART_SetConfig+0x27c>)
 8009b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b38:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009b3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009b40:	d011      	beq.n	8009b66 <UART_SetConfig+0x1a2>
 8009b42:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009b46:	d817      	bhi.n	8009b78 <UART_SetConfig+0x1b4>
 8009b48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009b4c:	d011      	beq.n	8009b72 <UART_SetConfig+0x1ae>
 8009b4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009b52:	d811      	bhi.n	8009b78 <UART_SetConfig+0x1b4>
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d003      	beq.n	8009b60 <UART_SetConfig+0x19c>
 8009b58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b5c:	d006      	beq.n	8009b6c <UART_SetConfig+0x1a8>
 8009b5e:	e00b      	b.n	8009b78 <UART_SetConfig+0x1b4>
 8009b60:	2300      	movs	r3, #0
 8009b62:	77fb      	strb	r3, [r7, #31]
 8009b64:	e037      	b.n	8009bd6 <UART_SetConfig+0x212>
 8009b66:	2302      	movs	r3, #2
 8009b68:	77fb      	strb	r3, [r7, #31]
 8009b6a:	e034      	b.n	8009bd6 <UART_SetConfig+0x212>
 8009b6c:	2304      	movs	r3, #4
 8009b6e:	77fb      	strb	r3, [r7, #31]
 8009b70:	e031      	b.n	8009bd6 <UART_SetConfig+0x212>
 8009b72:	2308      	movs	r3, #8
 8009b74:	77fb      	strb	r3, [r7, #31]
 8009b76:	e02e      	b.n	8009bd6 <UART_SetConfig+0x212>
 8009b78:	2310      	movs	r3, #16
 8009b7a:	77fb      	strb	r3, [r7, #31]
 8009b7c:	e02b      	b.n	8009bd6 <UART_SetConfig+0x212>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a33      	ldr	r2, [pc, #204]	@ (8009c50 <UART_SetConfig+0x28c>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d124      	bne.n	8009bd2 <UART_SetConfig+0x20e>
 8009b88:	4b2d      	ldr	r3, [pc, #180]	@ (8009c40 <UART_SetConfig+0x27c>)
 8009b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b8c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8009b90:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009b94:	d011      	beq.n	8009bba <UART_SetConfig+0x1f6>
 8009b96:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009b9a:	d817      	bhi.n	8009bcc <UART_SetConfig+0x208>
 8009b9c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009ba0:	d011      	beq.n	8009bc6 <UART_SetConfig+0x202>
 8009ba2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009ba6:	d811      	bhi.n	8009bcc <UART_SetConfig+0x208>
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d003      	beq.n	8009bb4 <UART_SetConfig+0x1f0>
 8009bac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009bb0:	d006      	beq.n	8009bc0 <UART_SetConfig+0x1fc>
 8009bb2:	e00b      	b.n	8009bcc <UART_SetConfig+0x208>
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	77fb      	strb	r3, [r7, #31]
 8009bb8:	e00d      	b.n	8009bd6 <UART_SetConfig+0x212>
 8009bba:	2302      	movs	r3, #2
 8009bbc:	77fb      	strb	r3, [r7, #31]
 8009bbe:	e00a      	b.n	8009bd6 <UART_SetConfig+0x212>
 8009bc0:	2304      	movs	r3, #4
 8009bc2:	77fb      	strb	r3, [r7, #31]
 8009bc4:	e007      	b.n	8009bd6 <UART_SetConfig+0x212>
 8009bc6:	2308      	movs	r3, #8
 8009bc8:	77fb      	strb	r3, [r7, #31]
 8009bca:	e004      	b.n	8009bd6 <UART_SetConfig+0x212>
 8009bcc:	2310      	movs	r3, #16
 8009bce:	77fb      	strb	r3, [r7, #31]
 8009bd0:	e001      	b.n	8009bd6 <UART_SetConfig+0x212>
 8009bd2:	2310      	movs	r3, #16
 8009bd4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	69db      	ldr	r3, [r3, #28]
 8009bda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bde:	d16b      	bne.n	8009cb8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8009be0:	7ffb      	ldrb	r3, [r7, #31]
 8009be2:	2b08      	cmp	r3, #8
 8009be4:	d838      	bhi.n	8009c58 <UART_SetConfig+0x294>
 8009be6:	a201      	add	r2, pc, #4	@ (adr r2, 8009bec <UART_SetConfig+0x228>)
 8009be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bec:	08009c11 	.word	0x08009c11
 8009bf0:	08009c19 	.word	0x08009c19
 8009bf4:	08009c21 	.word	0x08009c21
 8009bf8:	08009c59 	.word	0x08009c59
 8009bfc:	08009c27 	.word	0x08009c27
 8009c00:	08009c59 	.word	0x08009c59
 8009c04:	08009c59 	.word	0x08009c59
 8009c08:	08009c59 	.word	0x08009c59
 8009c0c:	08009c2f 	.word	0x08009c2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c10:	f7fe fb02 	bl	8008218 <HAL_RCC_GetPCLK1Freq>
 8009c14:	61b8      	str	r0, [r7, #24]
        break;
 8009c16:	e024      	b.n	8009c62 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c18:	f7fe fb20 	bl	800825c <HAL_RCC_GetPCLK2Freq>
 8009c1c:	61b8      	str	r0, [r7, #24]
        break;
 8009c1e:	e020      	b.n	8009c62 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c20:	4b0c      	ldr	r3, [pc, #48]	@ (8009c54 <UART_SetConfig+0x290>)
 8009c22:	61bb      	str	r3, [r7, #24]
        break;
 8009c24:	e01d      	b.n	8009c62 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c26:	f7fe fa97 	bl	8008158 <HAL_RCC_GetSysClockFreq>
 8009c2a:	61b8      	str	r0, [r7, #24]
        break;
 8009c2c:	e019      	b.n	8009c62 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c32:	61bb      	str	r3, [r7, #24]
        break;
 8009c34:	e015      	b.n	8009c62 <UART_SetConfig+0x29e>
 8009c36:	bf00      	nop
 8009c38:	efff69f3 	.word	0xefff69f3
 8009c3c:	40013800 	.word	0x40013800
 8009c40:	40021000 	.word	0x40021000
 8009c44:	40004400 	.word	0x40004400
 8009c48:	40004800 	.word	0x40004800
 8009c4c:	40004c00 	.word	0x40004c00
 8009c50:	40005000 	.word	0x40005000
 8009c54:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	77bb      	strb	r3, [r7, #30]
        break;
 8009c60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c62:	69bb      	ldr	r3, [r7, #24]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d073      	beq.n	8009d50 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	005a      	lsls	r2, r3, #1
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	085b      	lsrs	r3, r3, #1
 8009c72:	441a      	add	r2, r3
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	2b0f      	cmp	r3, #15
 8009c82:	d916      	bls.n	8009cb2 <UART_SetConfig+0x2ee>
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c8a:	d212      	bcs.n	8009cb2 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	f023 030f 	bic.w	r3, r3, #15
 8009c94:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	085b      	lsrs	r3, r3, #1
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	f003 0307 	and.w	r3, r3, #7
 8009ca0:	b29a      	uxth	r2, r3
 8009ca2:	89fb      	ldrh	r3, [r7, #14]
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	89fa      	ldrh	r2, [r7, #14]
 8009cae:	60da      	str	r2, [r3, #12]
 8009cb0:	e04e      	b.n	8009d50 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	77bb      	strb	r3, [r7, #30]
 8009cb6:	e04b      	b.n	8009d50 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009cb8:	7ffb      	ldrb	r3, [r7, #31]
 8009cba:	2b08      	cmp	r3, #8
 8009cbc:	d827      	bhi.n	8009d0e <UART_SetConfig+0x34a>
 8009cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8009cc4 <UART_SetConfig+0x300>)
 8009cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc4:	08009ce9 	.word	0x08009ce9
 8009cc8:	08009cf1 	.word	0x08009cf1
 8009ccc:	08009cf9 	.word	0x08009cf9
 8009cd0:	08009d0f 	.word	0x08009d0f
 8009cd4:	08009cff 	.word	0x08009cff
 8009cd8:	08009d0f 	.word	0x08009d0f
 8009cdc:	08009d0f 	.word	0x08009d0f
 8009ce0:	08009d0f 	.word	0x08009d0f
 8009ce4:	08009d07 	.word	0x08009d07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ce8:	f7fe fa96 	bl	8008218 <HAL_RCC_GetPCLK1Freq>
 8009cec:	61b8      	str	r0, [r7, #24]
        break;
 8009cee:	e013      	b.n	8009d18 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cf0:	f7fe fab4 	bl	800825c <HAL_RCC_GetPCLK2Freq>
 8009cf4:	61b8      	str	r0, [r7, #24]
        break;
 8009cf6:	e00f      	b.n	8009d18 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8009d68 <UART_SetConfig+0x3a4>)
 8009cfa:	61bb      	str	r3, [r7, #24]
        break;
 8009cfc:	e00c      	b.n	8009d18 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009cfe:	f7fe fa2b 	bl	8008158 <HAL_RCC_GetSysClockFreq>
 8009d02:	61b8      	str	r0, [r7, #24]
        break;
 8009d04:	e008      	b.n	8009d18 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d0a:	61bb      	str	r3, [r7, #24]
        break;
 8009d0c:	e004      	b.n	8009d18 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009d12:	2301      	movs	r3, #1
 8009d14:	77bb      	strb	r3, [r7, #30]
        break;
 8009d16:	bf00      	nop
    }

    if (pclk != 0U)
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d018      	beq.n	8009d50 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	085a      	lsrs	r2, r3, #1
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	441a      	add	r2, r3
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	2b0f      	cmp	r3, #15
 8009d36:	d909      	bls.n	8009d4c <UART_SetConfig+0x388>
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d3e:	d205      	bcs.n	8009d4c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	60da      	str	r2, [r3, #12]
 8009d4a:	e001      	b.n	8009d50 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009d5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3720      	adds	r7, #32
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	007a1200 	.word	0x007a1200

08009d6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d78:	f003 0308 	and.w	r3, r3, #8
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00a      	beq.n	8009d96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	430a      	orrs	r2, r1
 8009d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d9a:	f003 0301 	and.w	r3, r3, #1
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00a      	beq.n	8009db8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	430a      	orrs	r2, r1
 8009db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dbc:	f003 0302 	and.w	r3, r3, #2
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00a      	beq.n	8009dda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	430a      	orrs	r2, r1
 8009dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dde:	f003 0304 	and.w	r3, r3, #4
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d00a      	beq.n	8009dfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	430a      	orrs	r2, r1
 8009dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e00:	f003 0310 	and.w	r3, r3, #16
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d00a      	beq.n	8009e1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	430a      	orrs	r2, r1
 8009e1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e22:	f003 0320 	and.w	r3, r3, #32
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00a      	beq.n	8009e40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	689b      	ldr	r3, [r3, #8]
 8009e30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	430a      	orrs	r2, r1
 8009e3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d01a      	beq.n	8009e82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	430a      	orrs	r2, r1
 8009e60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e6a:	d10a      	bne.n	8009e82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	430a      	orrs	r2, r1
 8009e80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00a      	beq.n	8009ea4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	430a      	orrs	r2, r1
 8009ea2:	605a      	str	r2, [r3, #4]
  }
}
 8009ea4:	bf00      	nop
 8009ea6:	370c      	adds	r7, #12
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b098      	sub	sp, #96	@ 0x60
 8009eb4:	af02      	add	r7, sp, #8
 8009eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ec0:	f7fa faa4 	bl	800440c <HAL_GetTick>
 8009ec4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f003 0308 	and.w	r3, r3, #8
 8009ed0:	2b08      	cmp	r3, #8
 8009ed2:	d12e      	bne.n	8009f32 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ed4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ed8:	9300      	str	r3, [sp, #0]
 8009eda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009edc:	2200      	movs	r2, #0
 8009ede:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 f88c 	bl	800a000 <UART_WaitOnFlagUntilTimeout>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d021      	beq.n	8009f32 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ef6:	e853 3f00 	ldrex	r3, [r3]
 8009efa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009efe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f02:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	461a      	mov	r2, r3
 8009f0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f0e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f14:	e841 2300 	strex	r3, r2, [r1]
 8009f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d1e6      	bne.n	8009eee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2220      	movs	r2, #32
 8009f24:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f2e:	2303      	movs	r3, #3
 8009f30:	e062      	b.n	8009ff8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f003 0304 	and.w	r3, r3, #4
 8009f3c:	2b04      	cmp	r3, #4
 8009f3e:	d149      	bne.n	8009fd4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f44:	9300      	str	r3, [sp, #0]
 8009f46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 f856 	bl	800a000 <UART_WaitOnFlagUntilTimeout>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d03c      	beq.n	8009fd4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f62:	e853 3f00 	ldrex	r3, [r3]
 8009f66:	623b      	str	r3, [r7, #32]
   return(result);
 8009f68:	6a3b      	ldr	r3, [r7, #32]
 8009f6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	461a      	mov	r2, r3
 8009f76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f78:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f80:	e841 2300 	strex	r3, r2, [r1]
 8009f84:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d1e6      	bne.n	8009f5a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	3308      	adds	r3, #8
 8009f92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	e853 3f00 	ldrex	r3, [r3]
 8009f9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f023 0301 	bic.w	r3, r3, #1
 8009fa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	3308      	adds	r3, #8
 8009faa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fac:	61fa      	str	r2, [r7, #28]
 8009fae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb0:	69b9      	ldr	r1, [r7, #24]
 8009fb2:	69fa      	ldr	r2, [r7, #28]
 8009fb4:	e841 2300 	strex	r3, r2, [r1]
 8009fb8:	617b      	str	r3, [r7, #20]
   return(result);
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d1e5      	bne.n	8009f8c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2220      	movs	r2, #32
 8009fc4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fd0:	2303      	movs	r3, #3
 8009fd2:	e011      	b.n	8009ff8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2220      	movs	r2, #32
 8009fd8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2220      	movs	r2, #32
 8009fde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009ff6:	2300      	movs	r3, #0
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3758      	adds	r7, #88	@ 0x58
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	603b      	str	r3, [r7, #0]
 800a00c:	4613      	mov	r3, r2
 800a00e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a010:	e04f      	b.n	800a0b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a018:	d04b      	beq.n	800a0b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a01a:	f7fa f9f7 	bl	800440c <HAL_GetTick>
 800a01e:	4602      	mov	r2, r0
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	1ad3      	subs	r3, r2, r3
 800a024:	69ba      	ldr	r2, [r7, #24]
 800a026:	429a      	cmp	r2, r3
 800a028:	d302      	bcc.n	800a030 <UART_WaitOnFlagUntilTimeout+0x30>
 800a02a:	69bb      	ldr	r3, [r7, #24]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d101      	bne.n	800a034 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a030:	2303      	movs	r3, #3
 800a032:	e04e      	b.n	800a0d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f003 0304 	and.w	r3, r3, #4
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d037      	beq.n	800a0b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	2b80      	cmp	r3, #128	@ 0x80
 800a046:	d034      	beq.n	800a0b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	2b40      	cmp	r3, #64	@ 0x40
 800a04c:	d031      	beq.n	800a0b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	69db      	ldr	r3, [r3, #28]
 800a054:	f003 0308 	and.w	r3, r3, #8
 800a058:	2b08      	cmp	r3, #8
 800a05a:	d110      	bne.n	800a07e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2208      	movs	r2, #8
 800a062:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	f000 f838 	bl	800a0da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2208      	movs	r2, #8
 800a06e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2200      	movs	r2, #0
 800a076:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a07a:	2301      	movs	r3, #1
 800a07c:	e029      	b.n	800a0d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	69db      	ldr	r3, [r3, #28]
 800a084:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a088:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a08c:	d111      	bne.n	800a0b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a096:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a098:	68f8      	ldr	r0, [r7, #12]
 800a09a:	f000 f81e 	bl	800a0da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2220      	movs	r2, #32
 800a0a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a0ae:	2303      	movs	r3, #3
 800a0b0:	e00f      	b.n	800a0d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	69da      	ldr	r2, [r3, #28]
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	4013      	ands	r3, r2
 800a0bc:	68ba      	ldr	r2, [r7, #8]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	bf0c      	ite	eq
 800a0c2:	2301      	moveq	r3, #1
 800a0c4:	2300      	movne	r3, #0
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	79fb      	ldrb	r3, [r7, #7]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d0a0      	beq.n	800a012 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a0da:	b480      	push	{r7}
 800a0dc:	b095      	sub	sp, #84	@ 0x54
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0ea:	e853 3f00 	ldrex	r3, [r3]
 800a0ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a0f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a100:	643b      	str	r3, [r7, #64]	@ 0x40
 800a102:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a104:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a106:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a108:	e841 2300 	strex	r3, r2, [r1]
 800a10c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a10e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a110:	2b00      	cmp	r3, #0
 800a112:	d1e6      	bne.n	800a0e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	3308      	adds	r3, #8
 800a11a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a11c:	6a3b      	ldr	r3, [r7, #32]
 800a11e:	e853 3f00 	ldrex	r3, [r3]
 800a122:	61fb      	str	r3, [r7, #28]
   return(result);
 800a124:	69fb      	ldr	r3, [r7, #28]
 800a126:	f023 0301 	bic.w	r3, r3, #1
 800a12a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	3308      	adds	r3, #8
 800a132:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a134:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a136:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a138:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a13a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a13c:	e841 2300 	strex	r3, r2, [r1]
 800a140:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a144:	2b00      	cmp	r3, #0
 800a146:	d1e5      	bne.n	800a114 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d118      	bne.n	800a182 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	e853 3f00 	ldrex	r3, [r3]
 800a15c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	f023 0310 	bic.w	r3, r3, #16
 800a164:	647b      	str	r3, [r7, #68]	@ 0x44
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	461a      	mov	r2, r3
 800a16c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a16e:	61bb      	str	r3, [r7, #24]
 800a170:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a172:	6979      	ldr	r1, [r7, #20]
 800a174:	69ba      	ldr	r2, [r7, #24]
 800a176:	e841 2300 	strex	r3, r2, [r1]
 800a17a:	613b      	str	r3, [r7, #16]
   return(result);
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1e6      	bne.n	800a150 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2220      	movs	r2, #32
 800a186:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2200      	movs	r2, #0
 800a18e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a196:	bf00      	nop
 800a198:	3754      	adds	r7, #84	@ 0x54
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr
	...

0800a1a4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a1a4:	b480      	push	{r7}
 800a1a6:	b085      	sub	sp, #20
 800a1a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1aa:	f3ef 8305 	mrs	r3, IPSR
 800a1ae:	60bb      	str	r3, [r7, #8]
  return(result);
 800a1b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d10f      	bne.n	800a1d6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1b6:	f3ef 8310 	mrs	r3, PRIMASK
 800a1ba:	607b      	str	r3, [r7, #4]
  return(result);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d109      	bne.n	800a1d6 <osKernelInitialize+0x32>
 800a1c2:	4b11      	ldr	r3, [pc, #68]	@ (800a208 <osKernelInitialize+0x64>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	2b02      	cmp	r3, #2
 800a1c8:	d109      	bne.n	800a1de <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a1ca:	f3ef 8311 	mrs	r3, BASEPRI
 800a1ce:	603b      	str	r3, [r7, #0]
  return(result);
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d003      	beq.n	800a1de <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a1d6:	f06f 0305 	mvn.w	r3, #5
 800a1da:	60fb      	str	r3, [r7, #12]
 800a1dc:	e00c      	b.n	800a1f8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a1de:	4b0a      	ldr	r3, [pc, #40]	@ (800a208 <osKernelInitialize+0x64>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d105      	bne.n	800a1f2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800a1e6:	4b08      	ldr	r3, [pc, #32]	@ (800a208 <osKernelInitialize+0x64>)
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	60fb      	str	r3, [r7, #12]
 800a1f0:	e002      	b.n	800a1f8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a1f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a1f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3714      	adds	r7, #20
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop
 800a208:	200006e0 	.word	0x200006e0

0800a20c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b084      	sub	sp, #16
 800a210:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a212:	f3ef 8305 	mrs	r3, IPSR
 800a216:	60bb      	str	r3, [r7, #8]
  return(result);
 800a218:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d10f      	bne.n	800a23e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a21e:	f3ef 8310 	mrs	r3, PRIMASK
 800a222:	607b      	str	r3, [r7, #4]
  return(result);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d109      	bne.n	800a23e <osKernelStart+0x32>
 800a22a:	4b11      	ldr	r3, [pc, #68]	@ (800a270 <osKernelStart+0x64>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	2b02      	cmp	r3, #2
 800a230:	d109      	bne.n	800a246 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a232:	f3ef 8311 	mrs	r3, BASEPRI
 800a236:	603b      	str	r3, [r7, #0]
  return(result);
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d003      	beq.n	800a246 <osKernelStart+0x3a>
    stat = osErrorISR;
 800a23e:	f06f 0305 	mvn.w	r3, #5
 800a242:	60fb      	str	r3, [r7, #12]
 800a244:	e00e      	b.n	800a264 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800a246:	4b0a      	ldr	r3, [pc, #40]	@ (800a270 <osKernelStart+0x64>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d107      	bne.n	800a25e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800a24e:	4b08      	ldr	r3, [pc, #32]	@ (800a270 <osKernelStart+0x64>)
 800a250:	2202      	movs	r2, #2
 800a252:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800a254:	f001 f8b0 	bl	800b3b8 <vTaskStartScheduler>
      stat = osOK;
 800a258:	2300      	movs	r3, #0
 800a25a:	60fb      	str	r3, [r7, #12]
 800a25c:	e002      	b.n	800a264 <osKernelStart+0x58>
    } else {
      stat = osError;
 800a25e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a262:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a264:	68fb      	ldr	r3, [r7, #12]
}
 800a266:	4618      	mov	r0, r3
 800a268:	3710      	adds	r7, #16
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	200006e0 	.word	0x200006e0

0800a274 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a274:	b580      	push	{r7, lr}
 800a276:	b092      	sub	sp, #72	@ 0x48
 800a278:	af04      	add	r7, sp, #16
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a280:	2300      	movs	r3, #0
 800a282:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a284:	f3ef 8305 	mrs	r3, IPSR
 800a288:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800a28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	f040 8094 	bne.w	800a3ba <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a292:	f3ef 8310 	mrs	r3, PRIMASK
 800a296:	623b      	str	r3, [r7, #32]
  return(result);
 800a298:	6a3b      	ldr	r3, [r7, #32]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	f040 808d 	bne.w	800a3ba <osThreadNew+0x146>
 800a2a0:	4b48      	ldr	r3, [pc, #288]	@ (800a3c4 <osThreadNew+0x150>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	2b02      	cmp	r3, #2
 800a2a6:	d106      	bne.n	800a2b6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a2a8:	f3ef 8311 	mrs	r3, BASEPRI
 800a2ac:	61fb      	str	r3, [r7, #28]
  return(result);
 800a2ae:	69fb      	ldr	r3, [r7, #28]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	f040 8082 	bne.w	800a3ba <osThreadNew+0x146>
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d07e      	beq.n	800a3ba <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800a2bc:	2380      	movs	r3, #128	@ 0x80
 800a2be:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800a2c0:	2318      	movs	r3, #24
 800a2c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800a2c8:	f107 031b 	add.w	r3, r7, #27
 800a2cc:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 800a2ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a2d2:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d045      	beq.n	800a366 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d002      	beq.n	800a2e8 <osThreadNew+0x74>
        name = attr->name;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	699b      	ldr	r3, [r3, #24]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d002      	beq.n	800a2f6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	699b      	ldr	r3, [r3, #24]
 800a2f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a2f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d008      	beq.n	800a30e <osThreadNew+0x9a>
 800a2fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2fe:	2b38      	cmp	r3, #56	@ 0x38
 800a300:	d805      	bhi.n	800a30e <osThreadNew+0x9a>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	f003 0301 	and.w	r3, r3, #1
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d001      	beq.n	800a312 <osThreadNew+0x9e>
        return (NULL);
 800a30e:	2300      	movs	r3, #0
 800a310:	e054      	b.n	800a3bc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	695b      	ldr	r3, [r3, #20]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d003      	beq.n	800a322 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	695b      	ldr	r3, [r3, #20]
 800a31e:	089b      	lsrs	r3, r3, #2
 800a320:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d00e      	beq.n	800a348 <osThreadNew+0xd4>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	68db      	ldr	r3, [r3, #12]
 800a32e:	2ba7      	cmp	r3, #167	@ 0xa7
 800a330:	d90a      	bls.n	800a348 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a336:	2b00      	cmp	r3, #0
 800a338:	d006      	beq.n	800a348 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	695b      	ldr	r3, [r3, #20]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d002      	beq.n	800a348 <osThreadNew+0xd4>
        mem = 1;
 800a342:	2301      	movs	r3, #1
 800a344:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a346:	e010      	b.n	800a36a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d10c      	bne.n	800a36a <osThreadNew+0xf6>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	68db      	ldr	r3, [r3, #12]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d108      	bne.n	800a36a <osThreadNew+0xf6>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	691b      	ldr	r3, [r3, #16]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d104      	bne.n	800a36a <osThreadNew+0xf6>
          mem = 0;
 800a360:	2300      	movs	r3, #0
 800a362:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a364:	e001      	b.n	800a36a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800a366:	2300      	movs	r3, #0
 800a368:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 800a36a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d110      	bne.n	800a392 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a378:	9202      	str	r2, [sp, #8]
 800a37a:	9301      	str	r3, [sp, #4]
 800a37c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a37e:	9300      	str	r3, [sp, #0]
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a384:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a386:	68f8      	ldr	r0, [r7, #12]
 800a388:	f000 fe2c 	bl	800afe4 <xTaskCreateStatic>
 800a38c:	4603      	mov	r3, r0
 800a38e:	617b      	str	r3, [r7, #20]
 800a390:	e013      	b.n	800a3ba <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800a392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a394:	2b00      	cmp	r3, #0
 800a396:	d110      	bne.n	800a3ba <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a39a:	b29a      	uxth	r2, r3
 800a39c:	f107 0314 	add.w	r3, r7, #20
 800a3a0:	9301      	str	r3, [sp, #4]
 800a3a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3a4:	9300      	str	r3, [sp, #0]
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f000 fe79 	bl	800b0a2 <xTaskCreate>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d001      	beq.n	800a3ba <osThreadNew+0x146>
          hTask = NULL;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a3ba:	697b      	ldr	r3, [r7, #20]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3738      	adds	r7, #56	@ 0x38
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	200006e0 	.word	0x200006e0

0800a3c8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b086      	sub	sp, #24
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3d0:	f3ef 8305 	mrs	r3, IPSR
 800a3d4:	613b      	str	r3, [r7, #16]
  return(result);
 800a3d6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d10f      	bne.n	800a3fc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3dc:	f3ef 8310 	mrs	r3, PRIMASK
 800a3e0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d109      	bne.n	800a3fc <osDelay+0x34>
 800a3e8:	4b0d      	ldr	r3, [pc, #52]	@ (800a420 <osDelay+0x58>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	2b02      	cmp	r3, #2
 800a3ee:	d109      	bne.n	800a404 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a3f0:	f3ef 8311 	mrs	r3, BASEPRI
 800a3f4:	60bb      	str	r3, [r7, #8]
  return(result);
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d003      	beq.n	800a404 <osDelay+0x3c>
    stat = osErrorISR;
 800a3fc:	f06f 0305 	mvn.w	r3, #5
 800a400:	617b      	str	r3, [r7, #20]
 800a402:	e007      	b.n	800a414 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a404:	2300      	movs	r3, #0
 800a406:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d002      	beq.n	800a414 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 ff9c 	bl	800b34c <vTaskDelay>
    }
  }

  return (stat);
 800a414:	697b      	ldr	r3, [r7, #20]
}
 800a416:	4618      	mov	r0, r3
 800a418:	3718      	adds	r7, #24
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	200006e0 	.word	0x200006e0

0800a424 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a424:	b480      	push	{r7}
 800a426:	b085      	sub	sp, #20
 800a428:	af00      	add	r7, sp, #0
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	60b9      	str	r1, [r7, #8]
 800a42e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	4a07      	ldr	r2, [pc, #28]	@ (800a450 <vApplicationGetIdleTaskMemory+0x2c>)
 800a434:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	4a06      	ldr	r2, [pc, #24]	@ (800a454 <vApplicationGetIdleTaskMemory+0x30>)
 800a43a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2280      	movs	r2, #128	@ 0x80
 800a440:	601a      	str	r2, [r3, #0]
}
 800a442:	bf00      	nop
 800a444:	3714      	adds	r7, #20
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr
 800a44e:	bf00      	nop
 800a450:	200006e4 	.word	0x200006e4
 800a454:	2000078c 	.word	0x2000078c

0800a458 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a458:	b480      	push	{r7}
 800a45a:	b085      	sub	sp, #20
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	60b9      	str	r1, [r7, #8]
 800a462:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	4a07      	ldr	r2, [pc, #28]	@ (800a484 <vApplicationGetTimerTaskMemory+0x2c>)
 800a468:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	4a06      	ldr	r2, [pc, #24]	@ (800a488 <vApplicationGetTimerTaskMemory+0x30>)
 800a46e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a476:	601a      	str	r2, [r3, #0]
}
 800a478:	bf00      	nop
 800a47a:	3714      	adds	r7, #20
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr
 800a484:	2000098c 	.word	0x2000098c
 800a488:	20000a34 	.word	0x20000a34

0800a48c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f103 0208 	add.w	r2, r3, #8
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a4a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f103 0208 	add.w	r2, r3, #8
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f103 0208 	add.w	r2, r3, #8
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a4c0:	bf00      	nop
 800a4c2:	370c      	adds	r7, #12
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr

0800a4cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a4da:	bf00      	nop
 800a4dc:	370c      	adds	r7, #12
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr

0800a4e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4e6:	b480      	push	{r7}
 800a4e8:	b085      	sub	sp, #20
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
 800a4ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	68fa      	ldr	r2, [r7, #12]
 800a4fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	689a      	ldr	r2, [r3, #8]
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	683a      	ldr	r2, [r7, #0]
 800a50a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	683a      	ldr	r2, [r7, #0]
 800a510:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	1c5a      	adds	r2, r3, #1
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	601a      	str	r2, [r3, #0]
}
 800a522:	bf00      	nop
 800a524:	3714      	adds	r7, #20
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr

0800a52e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a52e:	b480      	push	{r7}
 800a530:	b085      	sub	sp, #20
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
 800a536:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a544:	d103      	bne.n	800a54e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	691b      	ldr	r3, [r3, #16]
 800a54a:	60fb      	str	r3, [r7, #12]
 800a54c:	e00c      	b.n	800a568 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	3308      	adds	r3, #8
 800a552:	60fb      	str	r3, [r7, #12]
 800a554:	e002      	b.n	800a55c <vListInsert+0x2e>
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	60fb      	str	r3, [r7, #12]
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	68ba      	ldr	r2, [r7, #8]
 800a564:	429a      	cmp	r2, r3
 800a566:	d2f6      	bcs.n	800a556 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	685a      	ldr	r2, [r3, #4]
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	683a      	ldr	r2, [r7, #0]
 800a576:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	68fa      	ldr	r2, [r7, #12]
 800a57c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	683a      	ldr	r2, [r7, #0]
 800a582:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	1c5a      	adds	r2, r3, #1
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	601a      	str	r2, [r3, #0]
}
 800a594:	bf00      	nop
 800a596:	3714      	adds	r7, #20
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b085      	sub	sp, #20
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	691b      	ldr	r3, [r3, #16]
 800a5ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	6892      	ldr	r2, [r2, #8]
 800a5b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	689b      	ldr	r3, [r3, #8]
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	6852      	ldr	r2, [r2, #4]
 800a5c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d103      	bne.n	800a5d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	689a      	ldr	r2, [r3, #8]
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	1e5a      	subs	r2, r3, #1
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3714      	adds	r7, #20
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr

0800a5f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d10b      	bne.n	800a620 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a60c:	f383 8811 	msr	BASEPRI, r3
 800a610:	f3bf 8f6f 	isb	sy
 800a614:	f3bf 8f4f 	dsb	sy
 800a618:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a61a:	bf00      	nop
 800a61c:	bf00      	nop
 800a61e:	e7fd      	b.n	800a61c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a620:	f002 f86a 	bl	800c6f8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a62c:	68f9      	ldr	r1, [r7, #12]
 800a62e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a630:	fb01 f303 	mul.w	r3, r1, r3
 800a634:	441a      	add	r2, r3
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2200      	movs	r2, #0
 800a63e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a650:	3b01      	subs	r3, #1
 800a652:	68f9      	ldr	r1, [r7, #12]
 800a654:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a656:	fb01 f303 	mul.w	r3, r1, r3
 800a65a:	441a      	add	r2, r3
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	22ff      	movs	r2, #255	@ 0xff
 800a664:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	22ff      	movs	r2, #255	@ 0xff
 800a66c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d114      	bne.n	800a6a0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	691b      	ldr	r3, [r3, #16]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d01a      	beq.n	800a6b4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	3310      	adds	r3, #16
 800a682:	4618      	mov	r0, r3
 800a684:	f001 f93c 	bl	800b900 <xTaskRemoveFromEventList>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d012      	beq.n	800a6b4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a68e:	4b0d      	ldr	r3, [pc, #52]	@ (800a6c4 <xQueueGenericReset+0xd0>)
 800a690:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a694:	601a      	str	r2, [r3, #0]
 800a696:	f3bf 8f4f 	dsb	sy
 800a69a:	f3bf 8f6f 	isb	sy
 800a69e:	e009      	b.n	800a6b4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	3310      	adds	r3, #16
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7ff fef1 	bl	800a48c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	3324      	adds	r3, #36	@ 0x24
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7ff feec 	bl	800a48c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a6b4:	f002 f852 	bl	800c75c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a6b8:	2301      	movs	r3, #1
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	e000ed04 	.word	0xe000ed04

0800a6c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b08e      	sub	sp, #56	@ 0x38
 800a6cc:	af02      	add	r7, sp, #8
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	607a      	str	r2, [r7, #4]
 800a6d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d10b      	bne.n	800a6f4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a6dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6e0:	f383 8811 	msr	BASEPRI, r3
 800a6e4:	f3bf 8f6f 	isb	sy
 800a6e8:	f3bf 8f4f 	dsb	sy
 800a6ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a6ee:	bf00      	nop
 800a6f0:	bf00      	nop
 800a6f2:	e7fd      	b.n	800a6f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d10b      	bne.n	800a712 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a6fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6fe:	f383 8811 	msr	BASEPRI, r3
 800a702:	f3bf 8f6f 	isb	sy
 800a706:	f3bf 8f4f 	dsb	sy
 800a70a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a70c:	bf00      	nop
 800a70e:	bf00      	nop
 800a710:	e7fd      	b.n	800a70e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d002      	beq.n	800a71e <xQueueGenericCreateStatic+0x56>
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d001      	beq.n	800a722 <xQueueGenericCreateStatic+0x5a>
 800a71e:	2301      	movs	r3, #1
 800a720:	e000      	b.n	800a724 <xQueueGenericCreateStatic+0x5c>
 800a722:	2300      	movs	r3, #0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10b      	bne.n	800a740 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a72c:	f383 8811 	msr	BASEPRI, r3
 800a730:	f3bf 8f6f 	isb	sy
 800a734:	f3bf 8f4f 	dsb	sy
 800a738:	623b      	str	r3, [r7, #32]
}
 800a73a:	bf00      	nop
 800a73c:	bf00      	nop
 800a73e:	e7fd      	b.n	800a73c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d102      	bne.n	800a74c <xQueueGenericCreateStatic+0x84>
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d101      	bne.n	800a750 <xQueueGenericCreateStatic+0x88>
 800a74c:	2301      	movs	r3, #1
 800a74e:	e000      	b.n	800a752 <xQueueGenericCreateStatic+0x8a>
 800a750:	2300      	movs	r3, #0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d10b      	bne.n	800a76e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a75a:	f383 8811 	msr	BASEPRI, r3
 800a75e:	f3bf 8f6f 	isb	sy
 800a762:	f3bf 8f4f 	dsb	sy
 800a766:	61fb      	str	r3, [r7, #28]
}
 800a768:	bf00      	nop
 800a76a:	bf00      	nop
 800a76c:	e7fd      	b.n	800a76a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a76e:	2350      	movs	r3, #80	@ 0x50
 800a770:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	2b50      	cmp	r3, #80	@ 0x50
 800a776:	d00b      	beq.n	800a790 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a77c:	f383 8811 	msr	BASEPRI, r3
 800a780:	f3bf 8f6f 	isb	sy
 800a784:	f3bf 8f4f 	dsb	sy
 800a788:	61bb      	str	r3, [r7, #24]
}
 800a78a:	bf00      	nop
 800a78c:	bf00      	nop
 800a78e:	e7fd      	b.n	800a78c <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a796:	2b00      	cmp	r3, #0
 800a798:	d00d      	beq.n	800a7b6 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a79a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a79c:	2201      	movs	r2, #1
 800a79e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a7a2:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a7a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7a8:	9300      	str	r3, [sp, #0]
 800a7aa:	4613      	mov	r3, r2
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	68b9      	ldr	r1, [r7, #8]
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f000 f805 	bl	800a7c0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a7b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3730      	adds	r7, #48	@ 0x30
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	60b9      	str	r1, [r7, #8]
 800a7ca:	607a      	str	r2, [r7, #4]
 800a7cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d103      	bne.n	800a7dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a7d4:	69bb      	ldr	r3, [r7, #24]
 800a7d6:	69ba      	ldr	r2, [r7, #24]
 800a7d8:	601a      	str	r2, [r3, #0]
 800a7da:	e002      	b.n	800a7e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a7dc:	69bb      	ldr	r3, [r7, #24]
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a7e2:	69bb      	ldr	r3, [r7, #24]
 800a7e4:	68fa      	ldr	r2, [r7, #12]
 800a7e6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	68ba      	ldr	r2, [r7, #8]
 800a7ec:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a7ee:	2101      	movs	r1, #1
 800a7f0:	69b8      	ldr	r0, [r7, #24]
 800a7f2:	f7ff feff 	bl	800a5f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a7f6:	69bb      	ldr	r3, [r7, #24]
 800a7f8:	78fa      	ldrb	r2, [r7, #3]
 800a7fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a7fe:	bf00      	nop
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
	...

0800a808 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b08e      	sub	sp, #56	@ 0x38
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	60b9      	str	r1, [r7, #8]
 800a812:	607a      	str	r2, [r7, #4]
 800a814:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a816:	2300      	movs	r3, #0
 800a818:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a820:	2b00      	cmp	r3, #0
 800a822:	d10b      	bne.n	800a83c <xQueueGenericSend+0x34>
	__asm volatile
 800a824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a828:	f383 8811 	msr	BASEPRI, r3
 800a82c:	f3bf 8f6f 	isb	sy
 800a830:	f3bf 8f4f 	dsb	sy
 800a834:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a836:	bf00      	nop
 800a838:	bf00      	nop
 800a83a:	e7fd      	b.n	800a838 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d103      	bne.n	800a84a <xQueueGenericSend+0x42>
 800a842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a846:	2b00      	cmp	r3, #0
 800a848:	d101      	bne.n	800a84e <xQueueGenericSend+0x46>
 800a84a:	2301      	movs	r3, #1
 800a84c:	e000      	b.n	800a850 <xQueueGenericSend+0x48>
 800a84e:	2300      	movs	r3, #0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d10b      	bne.n	800a86c <xQueueGenericSend+0x64>
	__asm volatile
 800a854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a858:	f383 8811 	msr	BASEPRI, r3
 800a85c:	f3bf 8f6f 	isb	sy
 800a860:	f3bf 8f4f 	dsb	sy
 800a864:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a866:	bf00      	nop
 800a868:	bf00      	nop
 800a86a:	e7fd      	b.n	800a868 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	2b02      	cmp	r3, #2
 800a870:	d103      	bne.n	800a87a <xQueueGenericSend+0x72>
 800a872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a876:	2b01      	cmp	r3, #1
 800a878:	d101      	bne.n	800a87e <xQueueGenericSend+0x76>
 800a87a:	2301      	movs	r3, #1
 800a87c:	e000      	b.n	800a880 <xQueueGenericSend+0x78>
 800a87e:	2300      	movs	r3, #0
 800a880:	2b00      	cmp	r3, #0
 800a882:	d10b      	bne.n	800a89c <xQueueGenericSend+0x94>
	__asm volatile
 800a884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a888:	f383 8811 	msr	BASEPRI, r3
 800a88c:	f3bf 8f6f 	isb	sy
 800a890:	f3bf 8f4f 	dsb	sy
 800a894:	623b      	str	r3, [r7, #32]
}
 800a896:	bf00      	nop
 800a898:	bf00      	nop
 800a89a:	e7fd      	b.n	800a898 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a89c:	f001 f9fc 	bl	800bc98 <xTaskGetSchedulerState>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d102      	bne.n	800a8ac <xQueueGenericSend+0xa4>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d101      	bne.n	800a8b0 <xQueueGenericSend+0xa8>
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	e000      	b.n	800a8b2 <xQueueGenericSend+0xaa>
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d10b      	bne.n	800a8ce <xQueueGenericSend+0xc6>
	__asm volatile
 800a8b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ba:	f383 8811 	msr	BASEPRI, r3
 800a8be:	f3bf 8f6f 	isb	sy
 800a8c2:	f3bf 8f4f 	dsb	sy
 800a8c6:	61fb      	str	r3, [r7, #28]
}
 800a8c8:	bf00      	nop
 800a8ca:	bf00      	nop
 800a8cc:	e7fd      	b.n	800a8ca <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a8ce:	f001 ff13 	bl	800c6f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a8d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d302      	bcc.n	800a8e4 <xQueueGenericSend+0xdc>
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	2b02      	cmp	r3, #2
 800a8e2:	d129      	bne.n	800a938 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a8e4:	683a      	ldr	r2, [r7, #0]
 800a8e6:	68b9      	ldr	r1, [r7, #8]
 800a8e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a8ea:	f000 fa0d 	bl	800ad08 <prvCopyDataToQueue>
 800a8ee:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d010      	beq.n	800a91a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8fa:	3324      	adds	r3, #36	@ 0x24
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f000 ffff 	bl	800b900 <xTaskRemoveFromEventList>
 800a902:	4603      	mov	r3, r0
 800a904:	2b00      	cmp	r3, #0
 800a906:	d013      	beq.n	800a930 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a908:	4b3f      	ldr	r3, [pc, #252]	@ (800aa08 <xQueueGenericSend+0x200>)
 800a90a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a90e:	601a      	str	r2, [r3, #0]
 800a910:	f3bf 8f4f 	dsb	sy
 800a914:	f3bf 8f6f 	isb	sy
 800a918:	e00a      	b.n	800a930 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a91a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d007      	beq.n	800a930 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a920:	4b39      	ldr	r3, [pc, #228]	@ (800aa08 <xQueueGenericSend+0x200>)
 800a922:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a926:	601a      	str	r2, [r3, #0]
 800a928:	f3bf 8f4f 	dsb	sy
 800a92c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a930:	f001 ff14 	bl	800c75c <vPortExitCritical>
				return pdPASS;
 800a934:	2301      	movs	r3, #1
 800a936:	e063      	b.n	800aa00 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d103      	bne.n	800a946 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a93e:	f001 ff0d 	bl	800c75c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a942:	2300      	movs	r3, #0
 800a944:	e05c      	b.n	800aa00 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d106      	bne.n	800a95a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a94c:	f107 0314 	add.w	r3, r7, #20
 800a950:	4618      	mov	r0, r3
 800a952:	f001 f839 	bl	800b9c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a956:	2301      	movs	r3, #1
 800a958:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a95a:	f001 feff 	bl	800c75c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a95e:	f000 fd9b 	bl	800b498 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a962:	f001 fec9 	bl	800c6f8 <vPortEnterCritical>
 800a966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a968:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a96c:	b25b      	sxtb	r3, r3
 800a96e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a972:	d103      	bne.n	800a97c <xQueueGenericSend+0x174>
 800a974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a976:	2200      	movs	r2, #0
 800a978:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a97c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a97e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a982:	b25b      	sxtb	r3, r3
 800a984:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a988:	d103      	bne.n	800a992 <xQueueGenericSend+0x18a>
 800a98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a98c:	2200      	movs	r2, #0
 800a98e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a992:	f001 fee3 	bl	800c75c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a996:	1d3a      	adds	r2, r7, #4
 800a998:	f107 0314 	add.w	r3, r7, #20
 800a99c:	4611      	mov	r1, r2
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f001 f828 	bl	800b9f4 <xTaskCheckForTimeOut>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d124      	bne.n	800a9f4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a9aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a9ac:	f000 faa4 	bl	800aef8 <prvIsQueueFull>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d018      	beq.n	800a9e8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9b8:	3310      	adds	r3, #16
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	4611      	mov	r1, r2
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f000 ff4c 	bl	800b85c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a9c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a9c6:	f000 fa2f 	bl	800ae28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a9ca:	f000 fd73 	bl	800b4b4 <xTaskResumeAll>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	f47f af7c 	bne.w	800a8ce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a9d6:	4b0c      	ldr	r3, [pc, #48]	@ (800aa08 <xQueueGenericSend+0x200>)
 800a9d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9dc:	601a      	str	r2, [r3, #0]
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	f3bf 8f6f 	isb	sy
 800a9e6:	e772      	b.n	800a8ce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a9e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a9ea:	f000 fa1d 	bl	800ae28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a9ee:	f000 fd61 	bl	800b4b4 <xTaskResumeAll>
 800a9f2:	e76c      	b.n	800a8ce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a9f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a9f6:	f000 fa17 	bl	800ae28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a9fa:	f000 fd5b 	bl	800b4b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a9fe:	2300      	movs	r3, #0
		}
	}
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3738      	adds	r7, #56	@ 0x38
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	e000ed04 	.word	0xe000ed04

0800aa0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b08e      	sub	sp, #56	@ 0x38
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	60b9      	str	r1, [r7, #8]
 800aa16:	607a      	str	r2, [r7, #4]
 800aa18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800aa1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d10b      	bne.n	800aa3c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800aa24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa28:	f383 8811 	msr	BASEPRI, r3
 800aa2c:	f3bf 8f6f 	isb	sy
 800aa30:	f3bf 8f4f 	dsb	sy
 800aa34:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800aa36:	bf00      	nop
 800aa38:	bf00      	nop
 800aa3a:	e7fd      	b.n	800aa38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d103      	bne.n	800aa4a <xQueueGenericSendFromISR+0x3e>
 800aa42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d101      	bne.n	800aa4e <xQueueGenericSendFromISR+0x42>
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	e000      	b.n	800aa50 <xQueueGenericSendFromISR+0x44>
 800aa4e:	2300      	movs	r3, #0
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d10b      	bne.n	800aa6c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800aa54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa58:	f383 8811 	msr	BASEPRI, r3
 800aa5c:	f3bf 8f6f 	isb	sy
 800aa60:	f3bf 8f4f 	dsb	sy
 800aa64:	623b      	str	r3, [r7, #32]
}
 800aa66:	bf00      	nop
 800aa68:	bf00      	nop
 800aa6a:	e7fd      	b.n	800aa68 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	2b02      	cmp	r3, #2
 800aa70:	d103      	bne.n	800aa7a <xQueueGenericSendFromISR+0x6e>
 800aa72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	d101      	bne.n	800aa7e <xQueueGenericSendFromISR+0x72>
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	e000      	b.n	800aa80 <xQueueGenericSendFromISR+0x74>
 800aa7e:	2300      	movs	r3, #0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d10b      	bne.n	800aa9c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800aa84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa88:	f383 8811 	msr	BASEPRI, r3
 800aa8c:	f3bf 8f6f 	isb	sy
 800aa90:	f3bf 8f4f 	dsb	sy
 800aa94:	61fb      	str	r3, [r7, #28]
}
 800aa96:	bf00      	nop
 800aa98:	bf00      	nop
 800aa9a:	e7fd      	b.n	800aa98 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa9c:	f001 ff0c 	bl	800c8b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aaa0:	f3ef 8211 	mrs	r2, BASEPRI
 800aaa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaa8:	f383 8811 	msr	BASEPRI, r3
 800aaac:	f3bf 8f6f 	isb	sy
 800aab0:	f3bf 8f4f 	dsb	sy
 800aab4:	61ba      	str	r2, [r7, #24]
 800aab6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aab8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aaba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aabc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aabe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d302      	bcc.n	800aace <xQueueGenericSendFromISR+0xc2>
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	2b02      	cmp	r3, #2
 800aacc:	d12c      	bne.n	800ab28 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aad4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aad8:	683a      	ldr	r2, [r7, #0]
 800aada:	68b9      	ldr	r1, [r7, #8]
 800aadc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aade:	f000 f913 	bl	800ad08 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aae2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800aae6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aaea:	d112      	bne.n	800ab12 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aaec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d016      	beq.n	800ab22 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aaf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf6:	3324      	adds	r3, #36	@ 0x24
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f000 ff01 	bl	800b900 <xTaskRemoveFromEventList>
 800aafe:	4603      	mov	r3, r0
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d00e      	beq.n	800ab22 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d00b      	beq.n	800ab22 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	601a      	str	r2, [r3, #0]
 800ab10:	e007      	b.n	800ab22 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ab12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ab16:	3301      	adds	r3, #1
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	b25a      	sxtb	r2, r3
 800ab1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ab22:	2301      	movs	r3, #1
 800ab24:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800ab26:	e001      	b.n	800ab2c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab2e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ab36:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3738      	adds	r7, #56	@ 0x38
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
	...

0800ab44 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b08c      	sub	sp, #48	@ 0x30
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ab50:	2300      	movs	r3, #0
 800ab52:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ab58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d10b      	bne.n	800ab76 <xQueueReceive+0x32>
	__asm volatile
 800ab5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab62:	f383 8811 	msr	BASEPRI, r3
 800ab66:	f3bf 8f6f 	isb	sy
 800ab6a:	f3bf 8f4f 	dsb	sy
 800ab6e:	623b      	str	r3, [r7, #32]
}
 800ab70:	bf00      	nop
 800ab72:	bf00      	nop
 800ab74:	e7fd      	b.n	800ab72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d103      	bne.n	800ab84 <xQueueReceive+0x40>
 800ab7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d101      	bne.n	800ab88 <xQueueReceive+0x44>
 800ab84:	2301      	movs	r3, #1
 800ab86:	e000      	b.n	800ab8a <xQueueReceive+0x46>
 800ab88:	2300      	movs	r3, #0
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d10b      	bne.n	800aba6 <xQueueReceive+0x62>
	__asm volatile
 800ab8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab92:	f383 8811 	msr	BASEPRI, r3
 800ab96:	f3bf 8f6f 	isb	sy
 800ab9a:	f3bf 8f4f 	dsb	sy
 800ab9e:	61fb      	str	r3, [r7, #28]
}
 800aba0:	bf00      	nop
 800aba2:	bf00      	nop
 800aba4:	e7fd      	b.n	800aba2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aba6:	f001 f877 	bl	800bc98 <xTaskGetSchedulerState>
 800abaa:	4603      	mov	r3, r0
 800abac:	2b00      	cmp	r3, #0
 800abae:	d102      	bne.n	800abb6 <xQueueReceive+0x72>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d101      	bne.n	800abba <xQueueReceive+0x76>
 800abb6:	2301      	movs	r3, #1
 800abb8:	e000      	b.n	800abbc <xQueueReceive+0x78>
 800abba:	2300      	movs	r3, #0
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d10b      	bne.n	800abd8 <xQueueReceive+0x94>
	__asm volatile
 800abc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abc4:	f383 8811 	msr	BASEPRI, r3
 800abc8:	f3bf 8f6f 	isb	sy
 800abcc:	f3bf 8f4f 	dsb	sy
 800abd0:	61bb      	str	r3, [r7, #24]
}
 800abd2:	bf00      	nop
 800abd4:	bf00      	nop
 800abd6:	e7fd      	b.n	800abd4 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800abd8:	f001 fd8e 	bl	800c6f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abe0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800abe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d01f      	beq.n	800ac28 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800abe8:	68b9      	ldr	r1, [r7, #8]
 800abea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abec:	f000 f8f6 	bl	800addc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800abf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf2:	1e5a      	subs	r2, r3, #1
 800abf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abf6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abfa:	691b      	ldr	r3, [r3, #16]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00f      	beq.n	800ac20 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac02:	3310      	adds	r3, #16
 800ac04:	4618      	mov	r0, r3
 800ac06:	f000 fe7b 	bl	800b900 <xTaskRemoveFromEventList>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d007      	beq.n	800ac20 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac10:	4b3c      	ldr	r3, [pc, #240]	@ (800ad04 <xQueueReceive+0x1c0>)
 800ac12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac16:	601a      	str	r2, [r3, #0]
 800ac18:	f3bf 8f4f 	dsb	sy
 800ac1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac20:	f001 fd9c 	bl	800c75c <vPortExitCritical>
				return pdPASS;
 800ac24:	2301      	movs	r3, #1
 800ac26:	e069      	b.n	800acfc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d103      	bne.n	800ac36 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac2e:	f001 fd95 	bl	800c75c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac32:	2300      	movs	r3, #0
 800ac34:	e062      	b.n	800acfc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d106      	bne.n	800ac4a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac3c:	f107 0310 	add.w	r3, r7, #16
 800ac40:	4618      	mov	r0, r3
 800ac42:	f000 fec1 	bl	800b9c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac46:	2301      	movs	r3, #1
 800ac48:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac4a:	f001 fd87 	bl	800c75c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac4e:	f000 fc23 	bl	800b498 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac52:	f001 fd51 	bl	800c6f8 <vPortEnterCritical>
 800ac56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac5c:	b25b      	sxtb	r3, r3
 800ac5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac62:	d103      	bne.n	800ac6c <xQueueReceive+0x128>
 800ac64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac66:	2200      	movs	r2, #0
 800ac68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac72:	b25b      	sxtb	r3, r3
 800ac74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac78:	d103      	bne.n	800ac82 <xQueueReceive+0x13e>
 800ac7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ac82:	f001 fd6b 	bl	800c75c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac86:	1d3a      	adds	r2, r7, #4
 800ac88:	f107 0310 	add.w	r3, r7, #16
 800ac8c:	4611      	mov	r1, r2
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f000 feb0 	bl	800b9f4 <xTaskCheckForTimeOut>
 800ac94:	4603      	mov	r3, r0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d123      	bne.n	800ace2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac9c:	f000 f916 	bl	800aecc <prvIsQueueEmpty>
 800aca0:	4603      	mov	r3, r0
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d017      	beq.n	800acd6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aca8:	3324      	adds	r3, #36	@ 0x24
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	4611      	mov	r1, r2
 800acae:	4618      	mov	r0, r3
 800acb0:	f000 fdd4 	bl	800b85c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800acb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800acb6:	f000 f8b7 	bl	800ae28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800acba:	f000 fbfb 	bl	800b4b4 <xTaskResumeAll>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d189      	bne.n	800abd8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800acc4:	4b0f      	ldr	r3, [pc, #60]	@ (800ad04 <xQueueReceive+0x1c0>)
 800acc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acca:	601a      	str	r2, [r3, #0]
 800accc:	f3bf 8f4f 	dsb	sy
 800acd0:	f3bf 8f6f 	isb	sy
 800acd4:	e780      	b.n	800abd8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800acd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800acd8:	f000 f8a6 	bl	800ae28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800acdc:	f000 fbea 	bl	800b4b4 <xTaskResumeAll>
 800ace0:	e77a      	b.n	800abd8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ace2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ace4:	f000 f8a0 	bl	800ae28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ace8:	f000 fbe4 	bl	800b4b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800acec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800acee:	f000 f8ed 	bl	800aecc <prvIsQueueEmpty>
 800acf2:	4603      	mov	r3, r0
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	f43f af6f 	beq.w	800abd8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800acfa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3730      	adds	r7, #48	@ 0x30
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}
 800ad04:	e000ed04 	.word	0xe000ed04

0800ad08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b086      	sub	sp, #24
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	60f8      	str	r0, [r7, #12]
 800ad10:	60b9      	str	r1, [r7, #8]
 800ad12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ad14:	2300      	movs	r3, #0
 800ad16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d10d      	bne.n	800ad42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d14d      	bne.n	800adca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	4618      	mov	r0, r3
 800ad34:	f000 ffce 	bl	800bcd4 <xTaskPriorityDisinherit>
 800ad38:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	605a      	str	r2, [r3, #4]
 800ad40:	e043      	b.n	800adca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d119      	bne.n	800ad7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	6898      	ldr	r0, [r3, #8]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad50:	461a      	mov	r2, r3
 800ad52:	68b9      	ldr	r1, [r7, #8]
 800ad54:	f003 f853 	bl	800ddfe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	689a      	ldr	r2, [r3, #8]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad60:	441a      	add	r2, r3
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	689a      	ldr	r2, [r3, #8]
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d32b      	bcc.n	800adca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	609a      	str	r2, [r3, #8]
 800ad7a:	e026      	b.n	800adca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	68d8      	ldr	r0, [r3, #12]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad84:	461a      	mov	r2, r3
 800ad86:	68b9      	ldr	r1, [r7, #8]
 800ad88:	f003 f839 	bl	800ddfe <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	68da      	ldr	r2, [r3, #12]
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad94:	425b      	negs	r3, r3
 800ad96:	441a      	add	r2, r3
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	68da      	ldr	r2, [r3, #12]
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d207      	bcs.n	800adb8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	685a      	ldr	r2, [r3, #4]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adb0:	425b      	negs	r3, r3
 800adb2:	441a      	add	r2, r3
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2b02      	cmp	r3, #2
 800adbc:	d105      	bne.n	800adca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d002      	beq.n	800adca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	3b01      	subs	r3, #1
 800adc8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	1c5a      	adds	r2, r3, #1
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800add2:	697b      	ldr	r3, [r7, #20]
}
 800add4:	4618      	mov	r0, r3
 800add6:	3718      	adds	r7, #24
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adea:	2b00      	cmp	r3, #0
 800adec:	d018      	beq.n	800ae20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	68da      	ldr	r2, [r3, #12]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adf6:	441a      	add	r2, r3
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	68da      	ldr	r2, [r3, #12]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d303      	bcc.n	800ae10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681a      	ldr	r2, [r3, #0]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	68d9      	ldr	r1, [r3, #12]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae18:	461a      	mov	r2, r3
 800ae1a:	6838      	ldr	r0, [r7, #0]
 800ae1c:	f002 ffef 	bl	800ddfe <memcpy>
	}
}
 800ae20:	bf00      	nop
 800ae22:	3708      	adds	r7, #8
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ae30:	f001 fc62 	bl	800c6f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ae3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae3c:	e011      	b.n	800ae62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d012      	beq.n	800ae6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	3324      	adds	r3, #36	@ 0x24
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f000 fd58 	bl	800b900 <xTaskRemoveFromEventList>
 800ae50:	4603      	mov	r3, r0
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d001      	beq.n	800ae5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ae56:	f000 fe31 	bl	800babc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ae5a:	7bfb      	ldrb	r3, [r7, #15]
 800ae5c:	3b01      	subs	r3, #1
 800ae5e:	b2db      	uxtb	r3, r3
 800ae60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	dce9      	bgt.n	800ae3e <prvUnlockQueue+0x16>
 800ae6a:	e000      	b.n	800ae6e <prvUnlockQueue+0x46>
					break;
 800ae6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	22ff      	movs	r2, #255	@ 0xff
 800ae72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ae76:	f001 fc71 	bl	800c75c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ae7a:	f001 fc3d 	bl	800c6f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ae84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae86:	e011      	b.n	800aeac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	691b      	ldr	r3, [r3, #16]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d012      	beq.n	800aeb6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	3310      	adds	r3, #16
 800ae94:	4618      	mov	r0, r3
 800ae96:	f000 fd33 	bl	800b900 <xTaskRemoveFromEventList>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d001      	beq.n	800aea4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aea0:	f000 fe0c 	bl	800babc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aea4:	7bbb      	ldrb	r3, [r7, #14]
 800aea6:	3b01      	subs	r3, #1
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aeac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	dce9      	bgt.n	800ae88 <prvUnlockQueue+0x60>
 800aeb4:	e000      	b.n	800aeb8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aeb6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	22ff      	movs	r2, #255	@ 0xff
 800aebc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800aec0:	f001 fc4c 	bl	800c75c <vPortExitCritical>
}
 800aec4:	bf00      	nop
 800aec6:	3710      	adds	r7, #16
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aed4:	f001 fc10 	bl	800c6f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d102      	bne.n	800aee6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aee0:	2301      	movs	r3, #1
 800aee2:	60fb      	str	r3, [r7, #12]
 800aee4:	e001      	b.n	800aeea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aee6:	2300      	movs	r3, #0
 800aee8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aeea:	f001 fc37 	bl	800c75c <vPortExitCritical>

	return xReturn;
 800aeee:	68fb      	ldr	r3, [r7, #12]
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3710      	adds	r7, #16
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af00:	f001 fbfa 	bl	800c6f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d102      	bne.n	800af16 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800af10:	2301      	movs	r3, #1
 800af12:	60fb      	str	r3, [r7, #12]
 800af14:	e001      	b.n	800af1a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800af16:	2300      	movs	r3, #0
 800af18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af1a:	f001 fc1f 	bl	800c75c <vPortExitCritical>

	return xReturn;
 800af1e:	68fb      	ldr	r3, [r7, #12]
}
 800af20:	4618      	mov	r0, r3
 800af22:	3710      	adds	r7, #16
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800af28:	b480      	push	{r7}
 800af2a:	b085      	sub	sp, #20
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af32:	2300      	movs	r3, #0
 800af34:	60fb      	str	r3, [r7, #12]
 800af36:	e014      	b.n	800af62 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800af38:	4a0f      	ldr	r2, [pc, #60]	@ (800af78 <vQueueAddToRegistry+0x50>)
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d10b      	bne.n	800af5c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800af44:	490c      	ldr	r1, [pc, #48]	@ (800af78 <vQueueAddToRegistry+0x50>)
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	683a      	ldr	r2, [r7, #0]
 800af4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800af4e:	4a0a      	ldr	r2, [pc, #40]	@ (800af78 <vQueueAddToRegistry+0x50>)
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	00db      	lsls	r3, r3, #3
 800af54:	4413      	add	r3, r2
 800af56:	687a      	ldr	r2, [r7, #4]
 800af58:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800af5a:	e006      	b.n	800af6a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	3301      	adds	r3, #1
 800af60:	60fb      	str	r3, [r7, #12]
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2b07      	cmp	r3, #7
 800af66:	d9e7      	bls.n	800af38 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800af68:	bf00      	nop
 800af6a:	bf00      	nop
 800af6c:	3714      	adds	r7, #20
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr
 800af76:	bf00      	nop
 800af78:	20000e34 	.word	0x20000e34

0800af7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b086      	sub	sp, #24
 800af80:	af00      	add	r7, sp, #0
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800af8c:	f001 fbb4 	bl	800c6f8 <vPortEnterCritical>
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800af96:	b25b      	sxtb	r3, r3
 800af98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af9c:	d103      	bne.n	800afa6 <vQueueWaitForMessageRestricted+0x2a>
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	2200      	movs	r2, #0
 800afa2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800afac:	b25b      	sxtb	r3, r3
 800afae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800afb2:	d103      	bne.n	800afbc <vQueueWaitForMessageRestricted+0x40>
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800afbc:	f001 fbce 	bl	800c75c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d106      	bne.n	800afd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	3324      	adds	r3, #36	@ 0x24
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	68b9      	ldr	r1, [r7, #8]
 800afd0:	4618      	mov	r0, r3
 800afd2:	f000 fc69 	bl	800b8a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800afd6:	6978      	ldr	r0, [r7, #20]
 800afd8:	f7ff ff26 	bl	800ae28 <prvUnlockQueue>
	}
 800afdc:	bf00      	nop
 800afde:	3718      	adds	r7, #24
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b08e      	sub	sp, #56	@ 0x38
 800afe8:	af04      	add	r7, sp, #16
 800afea:	60f8      	str	r0, [r7, #12]
 800afec:	60b9      	str	r1, [r7, #8]
 800afee:	607a      	str	r2, [r7, #4]
 800aff0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d10b      	bne.n	800b010 <xTaskCreateStatic+0x2c>
	__asm volatile
 800aff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800affc:	f383 8811 	msr	BASEPRI, r3
 800b000:	f3bf 8f6f 	isb	sy
 800b004:	f3bf 8f4f 	dsb	sy
 800b008:	623b      	str	r3, [r7, #32]
}
 800b00a:	bf00      	nop
 800b00c:	bf00      	nop
 800b00e:	e7fd      	b.n	800b00c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b012:	2b00      	cmp	r3, #0
 800b014:	d10b      	bne.n	800b02e <xTaskCreateStatic+0x4a>
	__asm volatile
 800b016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b01a:	f383 8811 	msr	BASEPRI, r3
 800b01e:	f3bf 8f6f 	isb	sy
 800b022:	f3bf 8f4f 	dsb	sy
 800b026:	61fb      	str	r3, [r7, #28]
}
 800b028:	bf00      	nop
 800b02a:	bf00      	nop
 800b02c:	e7fd      	b.n	800b02a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b02e:	23a8      	movs	r3, #168	@ 0xa8
 800b030:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	2ba8      	cmp	r3, #168	@ 0xa8
 800b036:	d00b      	beq.n	800b050 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b03c:	f383 8811 	msr	BASEPRI, r3
 800b040:	f3bf 8f6f 	isb	sy
 800b044:	f3bf 8f4f 	dsb	sy
 800b048:	61bb      	str	r3, [r7, #24]
}
 800b04a:	bf00      	nop
 800b04c:	bf00      	nop
 800b04e:	e7fd      	b.n	800b04c <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b052:	2b00      	cmp	r3, #0
 800b054:	d01e      	beq.n	800b094 <xTaskCreateStatic+0xb0>
 800b056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d01b      	beq.n	800b094 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b05c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b05e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b062:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b064:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b068:	2202      	movs	r2, #2
 800b06a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b06e:	2300      	movs	r3, #0
 800b070:	9303      	str	r3, [sp, #12]
 800b072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b074:	9302      	str	r3, [sp, #8]
 800b076:	f107 0314 	add.w	r3, r7, #20
 800b07a:	9301      	str	r3, [sp, #4]
 800b07c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b07e:	9300      	str	r3, [sp, #0]
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	687a      	ldr	r2, [r7, #4]
 800b084:	68b9      	ldr	r1, [r7, #8]
 800b086:	68f8      	ldr	r0, [r7, #12]
 800b088:	f000 f850 	bl	800b12c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b08c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b08e:	f000 f8ed 	bl	800b26c <prvAddNewTaskToReadyList>
 800b092:	e001      	b.n	800b098 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800b094:	2300      	movs	r3, #0
 800b096:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b098:	697b      	ldr	r3, [r7, #20]
	}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3728      	adds	r7, #40	@ 0x28
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}

0800b0a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b08c      	sub	sp, #48	@ 0x30
 800b0a6:	af04      	add	r7, sp, #16
 800b0a8:	60f8      	str	r0, [r7, #12]
 800b0aa:	60b9      	str	r1, [r7, #8]
 800b0ac:	603b      	str	r3, [r7, #0]
 800b0ae:	4613      	mov	r3, r2
 800b0b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0b2:	88fb      	ldrh	r3, [r7, #6]
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f001 fc40 	bl	800c93c <pvPortMalloc>
 800b0bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d00e      	beq.n	800b0e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b0c4:	20a8      	movs	r0, #168	@ 0xa8
 800b0c6:	f001 fc39 	bl	800c93c <pvPortMalloc>
 800b0ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d003      	beq.n	800b0da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b0d2:	69fb      	ldr	r3, [r7, #28]
 800b0d4:	697a      	ldr	r2, [r7, #20]
 800b0d6:	631a      	str	r2, [r3, #48]	@ 0x30
 800b0d8:	e005      	b.n	800b0e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b0da:	6978      	ldr	r0, [r7, #20]
 800b0dc:	f001 fcf6 	bl	800cacc <vPortFree>
 800b0e0:	e001      	b.n	800b0e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b0e6:	69fb      	ldr	r3, [r7, #28]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d017      	beq.n	800b11c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b0ec:	69fb      	ldr	r3, [r7, #28]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b0f4:	88fa      	ldrh	r2, [r7, #6]
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	9303      	str	r3, [sp, #12]
 800b0fa:	69fb      	ldr	r3, [r7, #28]
 800b0fc:	9302      	str	r3, [sp, #8]
 800b0fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b100:	9301      	str	r3, [sp, #4]
 800b102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b104:	9300      	str	r3, [sp, #0]
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	68b9      	ldr	r1, [r7, #8]
 800b10a:	68f8      	ldr	r0, [r7, #12]
 800b10c:	f000 f80e 	bl	800b12c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b110:	69f8      	ldr	r0, [r7, #28]
 800b112:	f000 f8ab 	bl	800b26c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b116:	2301      	movs	r3, #1
 800b118:	61bb      	str	r3, [r7, #24]
 800b11a:	e002      	b.n	800b122 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b11c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b120:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b122:	69bb      	ldr	r3, [r7, #24]
	}
 800b124:	4618      	mov	r0, r3
 800b126:	3720      	adds	r7, #32
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b088      	sub	sp, #32
 800b130:	af00      	add	r7, sp, #0
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	607a      	str	r2, [r7, #4]
 800b138:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b13c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	009b      	lsls	r3, r3, #2
 800b142:	461a      	mov	r2, r3
 800b144:	21a5      	movs	r1, #165	@ 0xa5
 800b146:	f002 fd84 	bl	800dc52 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b14c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b154:	3b01      	subs	r3, #1
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	4413      	add	r3, r2
 800b15a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b15c:	69bb      	ldr	r3, [r7, #24]
 800b15e:	f023 0307 	bic.w	r3, r3, #7
 800b162:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b164:	69bb      	ldr	r3, [r7, #24]
 800b166:	f003 0307 	and.w	r3, r3, #7
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d00b      	beq.n	800b186 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b16e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b172:	f383 8811 	msr	BASEPRI, r3
 800b176:	f3bf 8f6f 	isb	sy
 800b17a:	f3bf 8f4f 	dsb	sy
 800b17e:	617b      	str	r3, [r7, #20]
}
 800b180:	bf00      	nop
 800b182:	bf00      	nop
 800b184:	e7fd      	b.n	800b182 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b186:	2300      	movs	r3, #0
 800b188:	61fb      	str	r3, [r7, #28]
 800b18a:	e012      	b.n	800b1b2 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b18c:	68ba      	ldr	r2, [r7, #8]
 800b18e:	69fb      	ldr	r3, [r7, #28]
 800b190:	4413      	add	r3, r2
 800b192:	7819      	ldrb	r1, [r3, #0]
 800b194:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b196:	69fb      	ldr	r3, [r7, #28]
 800b198:	4413      	add	r3, r2
 800b19a:	3334      	adds	r3, #52	@ 0x34
 800b19c:	460a      	mov	r2, r1
 800b19e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b1a0:	68ba      	ldr	r2, [r7, #8]
 800b1a2:	69fb      	ldr	r3, [r7, #28]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d006      	beq.n	800b1ba <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b1ac:	69fb      	ldr	r3, [r7, #28]
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	61fb      	str	r3, [r7, #28]
 800b1b2:	69fb      	ldr	r3, [r7, #28]
 800b1b4:	2b0f      	cmp	r3, #15
 800b1b6:	d9e9      	bls.n	800b18c <prvInitialiseNewTask+0x60>
 800b1b8:	e000      	b.n	800b1bc <prvInitialiseNewTask+0x90>
		{
			break;
 800b1ba:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b1c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1c6:	2b37      	cmp	r3, #55	@ 0x37
 800b1c8:	d901      	bls.n	800b1ce <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b1ca:	2337      	movs	r3, #55	@ 0x37
 800b1cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1d2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b1d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1d8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1dc:	2200      	movs	r2, #0
 800b1de:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1e2:	3304      	adds	r3, #4
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7ff f971 	bl	800a4cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ec:	3318      	adds	r3, #24
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f7ff f96c 	bl	800a4cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b1f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1fc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b202:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b206:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b208:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b20a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b20c:	2200      	movs	r2, #0
 800b20e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b214:	2200      	movs	r2, #0
 800b216:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b21c:	3354      	adds	r3, #84	@ 0x54
 800b21e:	224c      	movs	r2, #76	@ 0x4c
 800b220:	2100      	movs	r1, #0
 800b222:	4618      	mov	r0, r3
 800b224:	f002 fd15 	bl	800dc52 <memset>
 800b228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b22a:	4a0d      	ldr	r2, [pc, #52]	@ (800b260 <prvInitialiseNewTask+0x134>)
 800b22c:	659a      	str	r2, [r3, #88]	@ 0x58
 800b22e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b230:	4a0c      	ldr	r2, [pc, #48]	@ (800b264 <prvInitialiseNewTask+0x138>)
 800b232:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b236:	4a0c      	ldr	r2, [pc, #48]	@ (800b268 <prvInitialiseNewTask+0x13c>)
 800b238:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b23a:	683a      	ldr	r2, [r7, #0]
 800b23c:	68f9      	ldr	r1, [r7, #12]
 800b23e:	69b8      	ldr	r0, [r7, #24]
 800b240:	f001 f92c 	bl	800c49c <pxPortInitialiseStack>
 800b244:	4602      	mov	r2, r0
 800b246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b248:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b24a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d002      	beq.n	800b256 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b252:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b254:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b256:	bf00      	nop
 800b258:	3720      	adds	r7, #32
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}
 800b25e:	bf00      	nop
 800b260:	200034c0 	.word	0x200034c0
 800b264:	20003528 	.word	0x20003528
 800b268:	20003590 	.word	0x20003590

0800b26c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b274:	f001 fa40 	bl	800c6f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b278:	4b2d      	ldr	r3, [pc, #180]	@ (800b330 <prvAddNewTaskToReadyList+0xc4>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	3301      	adds	r3, #1
 800b27e:	4a2c      	ldr	r2, [pc, #176]	@ (800b330 <prvAddNewTaskToReadyList+0xc4>)
 800b280:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b282:	4b2c      	ldr	r3, [pc, #176]	@ (800b334 <prvAddNewTaskToReadyList+0xc8>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d109      	bne.n	800b29e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b28a:	4a2a      	ldr	r2, [pc, #168]	@ (800b334 <prvAddNewTaskToReadyList+0xc8>)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b290:	4b27      	ldr	r3, [pc, #156]	@ (800b330 <prvAddNewTaskToReadyList+0xc4>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	2b01      	cmp	r3, #1
 800b296:	d110      	bne.n	800b2ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b298:	f000 fc34 	bl	800bb04 <prvInitialiseTaskLists>
 800b29c:	e00d      	b.n	800b2ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b29e:	4b26      	ldr	r3, [pc, #152]	@ (800b338 <prvAddNewTaskToReadyList+0xcc>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d109      	bne.n	800b2ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b2a6:	4b23      	ldr	r3, [pc, #140]	@ (800b334 <prvAddNewTaskToReadyList+0xc8>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d802      	bhi.n	800b2ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b2b4:	4a1f      	ldr	r2, [pc, #124]	@ (800b334 <prvAddNewTaskToReadyList+0xc8>)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b2ba:	4b20      	ldr	r3, [pc, #128]	@ (800b33c <prvAddNewTaskToReadyList+0xd0>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	3301      	adds	r3, #1
 800b2c0:	4a1e      	ldr	r2, [pc, #120]	@ (800b33c <prvAddNewTaskToReadyList+0xd0>)
 800b2c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b2c4:	4b1d      	ldr	r3, [pc, #116]	@ (800b33c <prvAddNewTaskToReadyList+0xd0>)
 800b2c6:	681a      	ldr	r2, [r3, #0]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2d0:	4b1b      	ldr	r3, [pc, #108]	@ (800b340 <prvAddNewTaskToReadyList+0xd4>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d903      	bls.n	800b2e0 <prvAddNewTaskToReadyList+0x74>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2dc:	4a18      	ldr	r2, [pc, #96]	@ (800b340 <prvAddNewTaskToReadyList+0xd4>)
 800b2de:	6013      	str	r3, [r2, #0]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2e4:	4613      	mov	r3, r2
 800b2e6:	009b      	lsls	r3, r3, #2
 800b2e8:	4413      	add	r3, r2
 800b2ea:	009b      	lsls	r3, r3, #2
 800b2ec:	4a15      	ldr	r2, [pc, #84]	@ (800b344 <prvAddNewTaskToReadyList+0xd8>)
 800b2ee:	441a      	add	r2, r3
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	3304      	adds	r3, #4
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	4610      	mov	r0, r2
 800b2f8:	f7ff f8f5 	bl	800a4e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b2fc:	f001 fa2e 	bl	800c75c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b300:	4b0d      	ldr	r3, [pc, #52]	@ (800b338 <prvAddNewTaskToReadyList+0xcc>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d00e      	beq.n	800b326 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b308:	4b0a      	ldr	r3, [pc, #40]	@ (800b334 <prvAddNewTaskToReadyList+0xc8>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b312:	429a      	cmp	r2, r3
 800b314:	d207      	bcs.n	800b326 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b316:	4b0c      	ldr	r3, [pc, #48]	@ (800b348 <prvAddNewTaskToReadyList+0xdc>)
 800b318:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b31c:	601a      	str	r2, [r3, #0]
 800b31e:	f3bf 8f4f 	dsb	sy
 800b322:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b326:	bf00      	nop
 800b328:	3708      	adds	r7, #8
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	bf00      	nop
 800b330:	20001348 	.word	0x20001348
 800b334:	20000e74 	.word	0x20000e74
 800b338:	20001354 	.word	0x20001354
 800b33c:	20001364 	.word	0x20001364
 800b340:	20001350 	.word	0x20001350
 800b344:	20000e78 	.word	0x20000e78
 800b348:	e000ed04 	.word	0xe000ed04

0800b34c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b354:	2300      	movs	r3, #0
 800b356:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d018      	beq.n	800b390 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b35e:	4b14      	ldr	r3, [pc, #80]	@ (800b3b0 <vTaskDelay+0x64>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d00b      	beq.n	800b37e <vTaskDelay+0x32>
	__asm volatile
 800b366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b36a:	f383 8811 	msr	BASEPRI, r3
 800b36e:	f3bf 8f6f 	isb	sy
 800b372:	f3bf 8f4f 	dsb	sy
 800b376:	60bb      	str	r3, [r7, #8]
}
 800b378:	bf00      	nop
 800b37a:	bf00      	nop
 800b37c:	e7fd      	b.n	800b37a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b37e:	f000 f88b 	bl	800b498 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b382:	2100      	movs	r1, #0
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f000 fd15 	bl	800bdb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b38a:	f000 f893 	bl	800b4b4 <xTaskResumeAll>
 800b38e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d107      	bne.n	800b3a6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b396:	4b07      	ldr	r3, [pc, #28]	@ (800b3b4 <vTaskDelay+0x68>)
 800b398:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b39c:	601a      	str	r2, [r3, #0]
 800b39e:	f3bf 8f4f 	dsb	sy
 800b3a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b3a6:	bf00      	nop
 800b3a8:	3710      	adds	r7, #16
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	20001370 	.word	0x20001370
 800b3b4:	e000ed04 	.word	0xe000ed04

0800b3b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b08a      	sub	sp, #40	@ 0x28
 800b3bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b3c6:	463a      	mov	r2, r7
 800b3c8:	1d39      	adds	r1, r7, #4
 800b3ca:	f107 0308 	add.w	r3, r7, #8
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7ff f828 	bl	800a424 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b3d4:	6839      	ldr	r1, [r7, #0]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	68ba      	ldr	r2, [r7, #8]
 800b3da:	9202      	str	r2, [sp, #8]
 800b3dc:	9301      	str	r3, [sp, #4]
 800b3de:	2300      	movs	r3, #0
 800b3e0:	9300      	str	r3, [sp, #0]
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	460a      	mov	r2, r1
 800b3e6:	4924      	ldr	r1, [pc, #144]	@ (800b478 <vTaskStartScheduler+0xc0>)
 800b3e8:	4824      	ldr	r0, [pc, #144]	@ (800b47c <vTaskStartScheduler+0xc4>)
 800b3ea:	f7ff fdfb 	bl	800afe4 <xTaskCreateStatic>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	4a23      	ldr	r2, [pc, #140]	@ (800b480 <vTaskStartScheduler+0xc8>)
 800b3f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b3f4:	4b22      	ldr	r3, [pc, #136]	@ (800b480 <vTaskStartScheduler+0xc8>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d002      	beq.n	800b402 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	617b      	str	r3, [r7, #20]
 800b400:	e001      	b.n	800b406 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b402:	2300      	movs	r3, #0
 800b404:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d102      	bne.n	800b412 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b40c:	f000 fd26 	bl	800be5c <xTimerCreateTimerTask>
 800b410:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	2b01      	cmp	r3, #1
 800b416:	d11b      	bne.n	800b450 <vTaskStartScheduler+0x98>
	__asm volatile
 800b418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b41c:	f383 8811 	msr	BASEPRI, r3
 800b420:	f3bf 8f6f 	isb	sy
 800b424:	f3bf 8f4f 	dsb	sy
 800b428:	613b      	str	r3, [r7, #16]
}
 800b42a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b42c:	4b15      	ldr	r3, [pc, #84]	@ (800b484 <vTaskStartScheduler+0xcc>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	3354      	adds	r3, #84	@ 0x54
 800b432:	4a15      	ldr	r2, [pc, #84]	@ (800b488 <vTaskStartScheduler+0xd0>)
 800b434:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b436:	4b15      	ldr	r3, [pc, #84]	@ (800b48c <vTaskStartScheduler+0xd4>)
 800b438:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b43c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b43e:	4b14      	ldr	r3, [pc, #80]	@ (800b490 <vTaskStartScheduler+0xd8>)
 800b440:	2201      	movs	r2, #1
 800b442:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b444:	4b13      	ldr	r3, [pc, #76]	@ (800b494 <vTaskStartScheduler+0xdc>)
 800b446:	2200      	movs	r2, #0
 800b448:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b44a:	f001 f8b1 	bl	800c5b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b44e:	e00f      	b.n	800b470 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b456:	d10b      	bne.n	800b470 <vTaskStartScheduler+0xb8>
	__asm volatile
 800b458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b45c:	f383 8811 	msr	BASEPRI, r3
 800b460:	f3bf 8f6f 	isb	sy
 800b464:	f3bf 8f4f 	dsb	sy
 800b468:	60fb      	str	r3, [r7, #12]
}
 800b46a:	bf00      	nop
 800b46c:	bf00      	nop
 800b46e:	e7fd      	b.n	800b46c <vTaskStartScheduler+0xb4>
}
 800b470:	bf00      	nop
 800b472:	3718      	adds	r7, #24
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}
 800b478:	080124fc 	.word	0x080124fc
 800b47c:	0800bad5 	.word	0x0800bad5
 800b480:	2000136c 	.word	0x2000136c
 800b484:	20000e74 	.word	0x20000e74
 800b488:	20000030 	.word	0x20000030
 800b48c:	20001368 	.word	0x20001368
 800b490:	20001354 	.word	0x20001354
 800b494:	2000134c 	.word	0x2000134c

0800b498 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b498:	b480      	push	{r7}
 800b49a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b49c:	4b04      	ldr	r3, [pc, #16]	@ (800b4b0 <vTaskSuspendAll+0x18>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	3301      	adds	r3, #1
 800b4a2:	4a03      	ldr	r2, [pc, #12]	@ (800b4b0 <vTaskSuspendAll+0x18>)
 800b4a4:	6013      	str	r3, [r2, #0]
}
 800b4a6:	bf00      	nop
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr
 800b4b0:	20001370 	.word	0x20001370

0800b4b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b4c2:	4b42      	ldr	r3, [pc, #264]	@ (800b5cc <xTaskResumeAll+0x118>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d10b      	bne.n	800b4e2 <xTaskResumeAll+0x2e>
	__asm volatile
 800b4ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ce:	f383 8811 	msr	BASEPRI, r3
 800b4d2:	f3bf 8f6f 	isb	sy
 800b4d6:	f3bf 8f4f 	dsb	sy
 800b4da:	603b      	str	r3, [r7, #0]
}
 800b4dc:	bf00      	nop
 800b4de:	bf00      	nop
 800b4e0:	e7fd      	b.n	800b4de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b4e2:	f001 f909 	bl	800c6f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b4e6:	4b39      	ldr	r3, [pc, #228]	@ (800b5cc <xTaskResumeAll+0x118>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	3b01      	subs	r3, #1
 800b4ec:	4a37      	ldr	r2, [pc, #220]	@ (800b5cc <xTaskResumeAll+0x118>)
 800b4ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4f0:	4b36      	ldr	r3, [pc, #216]	@ (800b5cc <xTaskResumeAll+0x118>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d162      	bne.n	800b5be <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b4f8:	4b35      	ldr	r3, [pc, #212]	@ (800b5d0 <xTaskResumeAll+0x11c>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d05e      	beq.n	800b5be <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b500:	e02f      	b.n	800b562 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b502:	4b34      	ldr	r3, [pc, #208]	@ (800b5d4 <xTaskResumeAll+0x120>)
 800b504:	68db      	ldr	r3, [r3, #12]
 800b506:	68db      	ldr	r3, [r3, #12]
 800b508:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	3318      	adds	r3, #24
 800b50e:	4618      	mov	r0, r3
 800b510:	f7ff f846 	bl	800a5a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	3304      	adds	r3, #4
 800b518:	4618      	mov	r0, r3
 800b51a:	f7ff f841 	bl	800a5a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b522:	4b2d      	ldr	r3, [pc, #180]	@ (800b5d8 <xTaskResumeAll+0x124>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	429a      	cmp	r2, r3
 800b528:	d903      	bls.n	800b532 <xTaskResumeAll+0x7e>
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b52e:	4a2a      	ldr	r2, [pc, #168]	@ (800b5d8 <xTaskResumeAll+0x124>)
 800b530:	6013      	str	r3, [r2, #0]
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b536:	4613      	mov	r3, r2
 800b538:	009b      	lsls	r3, r3, #2
 800b53a:	4413      	add	r3, r2
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	4a27      	ldr	r2, [pc, #156]	@ (800b5dc <xTaskResumeAll+0x128>)
 800b540:	441a      	add	r2, r3
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	3304      	adds	r3, #4
 800b546:	4619      	mov	r1, r3
 800b548:	4610      	mov	r0, r2
 800b54a:	f7fe ffcc 	bl	800a4e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b552:	4b23      	ldr	r3, [pc, #140]	@ (800b5e0 <xTaskResumeAll+0x12c>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b558:	429a      	cmp	r2, r3
 800b55a:	d302      	bcc.n	800b562 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b55c:	4b21      	ldr	r3, [pc, #132]	@ (800b5e4 <xTaskResumeAll+0x130>)
 800b55e:	2201      	movs	r2, #1
 800b560:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b562:	4b1c      	ldr	r3, [pc, #112]	@ (800b5d4 <xTaskResumeAll+0x120>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d1cb      	bne.n	800b502 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d001      	beq.n	800b574 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b570:	f000 fb6c 	bl	800bc4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b574:	4b1c      	ldr	r3, [pc, #112]	@ (800b5e8 <xTaskResumeAll+0x134>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d010      	beq.n	800b5a2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b580:	f000 f846 	bl	800b610 <xTaskIncrementTick>
 800b584:	4603      	mov	r3, r0
 800b586:	2b00      	cmp	r3, #0
 800b588:	d002      	beq.n	800b590 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b58a:	4b16      	ldr	r3, [pc, #88]	@ (800b5e4 <xTaskResumeAll+0x130>)
 800b58c:	2201      	movs	r2, #1
 800b58e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	3b01      	subs	r3, #1
 800b594:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d1f1      	bne.n	800b580 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800b59c:	4b12      	ldr	r3, [pc, #72]	@ (800b5e8 <xTaskResumeAll+0x134>)
 800b59e:	2200      	movs	r2, #0
 800b5a0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b5a2:	4b10      	ldr	r3, [pc, #64]	@ (800b5e4 <xTaskResumeAll+0x130>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d009      	beq.n	800b5be <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b5ae:	4b0f      	ldr	r3, [pc, #60]	@ (800b5ec <xTaskResumeAll+0x138>)
 800b5b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5b4:	601a      	str	r2, [r3, #0]
 800b5b6:	f3bf 8f4f 	dsb	sy
 800b5ba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b5be:	f001 f8cd 	bl	800c75c <vPortExitCritical>

	return xAlreadyYielded;
 800b5c2:	68bb      	ldr	r3, [r7, #8]
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3710      	adds	r7, #16
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}
 800b5cc:	20001370 	.word	0x20001370
 800b5d0:	20001348 	.word	0x20001348
 800b5d4:	20001308 	.word	0x20001308
 800b5d8:	20001350 	.word	0x20001350
 800b5dc:	20000e78 	.word	0x20000e78
 800b5e0:	20000e74 	.word	0x20000e74
 800b5e4:	2000135c 	.word	0x2000135c
 800b5e8:	20001358 	.word	0x20001358
 800b5ec:	e000ed04 	.word	0xe000ed04

0800b5f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b083      	sub	sp, #12
 800b5f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b5f6:	4b05      	ldr	r3, [pc, #20]	@ (800b60c <xTaskGetTickCount+0x1c>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b5fc:	687b      	ldr	r3, [r7, #4]
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	370c      	adds	r7, #12
 800b602:	46bd      	mov	sp, r7
 800b604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b608:	4770      	bx	lr
 800b60a:	bf00      	nop
 800b60c:	2000134c 	.word	0x2000134c

0800b610 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b086      	sub	sp, #24
 800b614:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b616:	2300      	movs	r3, #0
 800b618:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b61a:	4b52      	ldr	r3, [pc, #328]	@ (800b764 <xTaskIncrementTick+0x154>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	f040 808f 	bne.w	800b742 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b624:	4b50      	ldr	r3, [pc, #320]	@ (800b768 <xTaskIncrementTick+0x158>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	3301      	adds	r3, #1
 800b62a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b62c:	4a4e      	ldr	r2, [pc, #312]	@ (800b768 <xTaskIncrementTick+0x158>)
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d121      	bne.n	800b67c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b638:	4b4c      	ldr	r3, [pc, #304]	@ (800b76c <xTaskIncrementTick+0x15c>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d00b      	beq.n	800b65a <xTaskIncrementTick+0x4a>
	__asm volatile
 800b642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b646:	f383 8811 	msr	BASEPRI, r3
 800b64a:	f3bf 8f6f 	isb	sy
 800b64e:	f3bf 8f4f 	dsb	sy
 800b652:	603b      	str	r3, [r7, #0]
}
 800b654:	bf00      	nop
 800b656:	bf00      	nop
 800b658:	e7fd      	b.n	800b656 <xTaskIncrementTick+0x46>
 800b65a:	4b44      	ldr	r3, [pc, #272]	@ (800b76c <xTaskIncrementTick+0x15c>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	60fb      	str	r3, [r7, #12]
 800b660:	4b43      	ldr	r3, [pc, #268]	@ (800b770 <xTaskIncrementTick+0x160>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4a41      	ldr	r2, [pc, #260]	@ (800b76c <xTaskIncrementTick+0x15c>)
 800b666:	6013      	str	r3, [r2, #0]
 800b668:	4a41      	ldr	r2, [pc, #260]	@ (800b770 <xTaskIncrementTick+0x160>)
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	6013      	str	r3, [r2, #0]
 800b66e:	4b41      	ldr	r3, [pc, #260]	@ (800b774 <xTaskIncrementTick+0x164>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	3301      	adds	r3, #1
 800b674:	4a3f      	ldr	r2, [pc, #252]	@ (800b774 <xTaskIncrementTick+0x164>)
 800b676:	6013      	str	r3, [r2, #0]
 800b678:	f000 fae8 	bl	800bc4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b67c:	4b3e      	ldr	r3, [pc, #248]	@ (800b778 <xTaskIncrementTick+0x168>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	693a      	ldr	r2, [r7, #16]
 800b682:	429a      	cmp	r2, r3
 800b684:	d34e      	bcc.n	800b724 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b686:	4b39      	ldr	r3, [pc, #228]	@ (800b76c <xTaskIncrementTick+0x15c>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d101      	bne.n	800b694 <xTaskIncrementTick+0x84>
 800b690:	2301      	movs	r3, #1
 800b692:	e000      	b.n	800b696 <xTaskIncrementTick+0x86>
 800b694:	2300      	movs	r3, #0
 800b696:	2b00      	cmp	r3, #0
 800b698:	d004      	beq.n	800b6a4 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b69a:	4b37      	ldr	r3, [pc, #220]	@ (800b778 <xTaskIncrementTick+0x168>)
 800b69c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b6a0:	601a      	str	r2, [r3, #0]
					break;
 800b6a2:	e03f      	b.n	800b724 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b6a4:	4b31      	ldr	r3, [pc, #196]	@ (800b76c <xTaskIncrementTick+0x15c>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	68db      	ldr	r3, [r3, #12]
 800b6ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b6b4:	693a      	ldr	r2, [r7, #16]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d203      	bcs.n	800b6c4 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b6bc:	4a2e      	ldr	r2, [pc, #184]	@ (800b778 <xTaskIncrementTick+0x168>)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6013      	str	r3, [r2, #0]
						break;
 800b6c2:	e02f      	b.n	800b724 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	3304      	adds	r3, #4
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f7fe ff69 	bl	800a5a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d004      	beq.n	800b6e0 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	3318      	adds	r3, #24
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7fe ff60 	bl	800a5a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6e4:	4b25      	ldr	r3, [pc, #148]	@ (800b77c <xTaskIncrementTick+0x16c>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d903      	bls.n	800b6f4 <xTaskIncrementTick+0xe4>
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6f0:	4a22      	ldr	r2, [pc, #136]	@ (800b77c <xTaskIncrementTick+0x16c>)
 800b6f2:	6013      	str	r3, [r2, #0]
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6f8:	4613      	mov	r3, r2
 800b6fa:	009b      	lsls	r3, r3, #2
 800b6fc:	4413      	add	r3, r2
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	4a1f      	ldr	r2, [pc, #124]	@ (800b780 <xTaskIncrementTick+0x170>)
 800b702:	441a      	add	r2, r3
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	3304      	adds	r3, #4
 800b708:	4619      	mov	r1, r3
 800b70a:	4610      	mov	r0, r2
 800b70c:	f7fe feeb 	bl	800a4e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b714:	4b1b      	ldr	r3, [pc, #108]	@ (800b784 <xTaskIncrementTick+0x174>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d3b3      	bcc.n	800b686 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b71e:	2301      	movs	r3, #1
 800b720:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b722:	e7b0      	b.n	800b686 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b724:	4b17      	ldr	r3, [pc, #92]	@ (800b784 <xTaskIncrementTick+0x174>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b72a:	4915      	ldr	r1, [pc, #84]	@ (800b780 <xTaskIncrementTick+0x170>)
 800b72c:	4613      	mov	r3, r2
 800b72e:	009b      	lsls	r3, r3, #2
 800b730:	4413      	add	r3, r2
 800b732:	009b      	lsls	r3, r3, #2
 800b734:	440b      	add	r3, r1
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2b01      	cmp	r3, #1
 800b73a:	d907      	bls.n	800b74c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b73c:	2301      	movs	r3, #1
 800b73e:	617b      	str	r3, [r7, #20]
 800b740:	e004      	b.n	800b74c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b742:	4b11      	ldr	r3, [pc, #68]	@ (800b788 <xTaskIncrementTick+0x178>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	3301      	adds	r3, #1
 800b748:	4a0f      	ldr	r2, [pc, #60]	@ (800b788 <xTaskIncrementTick+0x178>)
 800b74a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b74c:	4b0f      	ldr	r3, [pc, #60]	@ (800b78c <xTaskIncrementTick+0x17c>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d001      	beq.n	800b758 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 800b754:	2301      	movs	r3, #1
 800b756:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b758:	697b      	ldr	r3, [r7, #20]
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3718      	adds	r7, #24
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
 800b762:	bf00      	nop
 800b764:	20001370 	.word	0x20001370
 800b768:	2000134c 	.word	0x2000134c
 800b76c:	20001300 	.word	0x20001300
 800b770:	20001304 	.word	0x20001304
 800b774:	20001360 	.word	0x20001360
 800b778:	20001368 	.word	0x20001368
 800b77c:	20001350 	.word	0x20001350
 800b780:	20000e78 	.word	0x20000e78
 800b784:	20000e74 	.word	0x20000e74
 800b788:	20001358 	.word	0x20001358
 800b78c:	2000135c 	.word	0x2000135c

0800b790 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b790:	b480      	push	{r7}
 800b792:	b085      	sub	sp, #20
 800b794:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b796:	4b2b      	ldr	r3, [pc, #172]	@ (800b844 <vTaskSwitchContext+0xb4>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d003      	beq.n	800b7a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b79e:	4b2a      	ldr	r3, [pc, #168]	@ (800b848 <vTaskSwitchContext+0xb8>)
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b7a4:	e047      	b.n	800b836 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b7a6:	4b28      	ldr	r3, [pc, #160]	@ (800b848 <vTaskSwitchContext+0xb8>)
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b7ac:	4b27      	ldr	r3, [pc, #156]	@ (800b84c <vTaskSwitchContext+0xbc>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	60fb      	str	r3, [r7, #12]
 800b7b2:	e011      	b.n	800b7d8 <vTaskSwitchContext+0x48>
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d10b      	bne.n	800b7d2 <vTaskSwitchContext+0x42>
	__asm volatile
 800b7ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7be:	f383 8811 	msr	BASEPRI, r3
 800b7c2:	f3bf 8f6f 	isb	sy
 800b7c6:	f3bf 8f4f 	dsb	sy
 800b7ca:	607b      	str	r3, [r7, #4]
}
 800b7cc:	bf00      	nop
 800b7ce:	bf00      	nop
 800b7d0:	e7fd      	b.n	800b7ce <vTaskSwitchContext+0x3e>
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	3b01      	subs	r3, #1
 800b7d6:	60fb      	str	r3, [r7, #12]
 800b7d8:	491d      	ldr	r1, [pc, #116]	@ (800b850 <vTaskSwitchContext+0xc0>)
 800b7da:	68fa      	ldr	r2, [r7, #12]
 800b7dc:	4613      	mov	r3, r2
 800b7de:	009b      	lsls	r3, r3, #2
 800b7e0:	4413      	add	r3, r2
 800b7e2:	009b      	lsls	r3, r3, #2
 800b7e4:	440b      	add	r3, r1
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d0e3      	beq.n	800b7b4 <vTaskSwitchContext+0x24>
 800b7ec:	68fa      	ldr	r2, [r7, #12]
 800b7ee:	4613      	mov	r3, r2
 800b7f0:	009b      	lsls	r3, r3, #2
 800b7f2:	4413      	add	r3, r2
 800b7f4:	009b      	lsls	r3, r3, #2
 800b7f6:	4a16      	ldr	r2, [pc, #88]	@ (800b850 <vTaskSwitchContext+0xc0>)
 800b7f8:	4413      	add	r3, r2
 800b7fa:	60bb      	str	r3, [r7, #8]
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	685a      	ldr	r2, [r3, #4]
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	605a      	str	r2, [r3, #4]
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	685a      	ldr	r2, [r3, #4]
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	3308      	adds	r3, #8
 800b80e:	429a      	cmp	r2, r3
 800b810:	d104      	bne.n	800b81c <vTaskSwitchContext+0x8c>
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	685b      	ldr	r3, [r3, #4]
 800b816:	685a      	ldr	r2, [r3, #4]
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	605a      	str	r2, [r3, #4]
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	685b      	ldr	r3, [r3, #4]
 800b820:	68db      	ldr	r3, [r3, #12]
 800b822:	4a0c      	ldr	r2, [pc, #48]	@ (800b854 <vTaskSwitchContext+0xc4>)
 800b824:	6013      	str	r3, [r2, #0]
 800b826:	4a09      	ldr	r2, [pc, #36]	@ (800b84c <vTaskSwitchContext+0xbc>)
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b82c:	4b09      	ldr	r3, [pc, #36]	@ (800b854 <vTaskSwitchContext+0xc4>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	3354      	adds	r3, #84	@ 0x54
 800b832:	4a09      	ldr	r2, [pc, #36]	@ (800b858 <vTaskSwitchContext+0xc8>)
 800b834:	6013      	str	r3, [r2, #0]
}
 800b836:	bf00      	nop
 800b838:	3714      	adds	r7, #20
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr
 800b842:	bf00      	nop
 800b844:	20001370 	.word	0x20001370
 800b848:	2000135c 	.word	0x2000135c
 800b84c:	20001350 	.word	0x20001350
 800b850:	20000e78 	.word	0x20000e78
 800b854:	20000e74 	.word	0x20000e74
 800b858:	20000030 	.word	0x20000030

0800b85c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b084      	sub	sp, #16
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d10b      	bne.n	800b884 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b86c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b870:	f383 8811 	msr	BASEPRI, r3
 800b874:	f3bf 8f6f 	isb	sy
 800b878:	f3bf 8f4f 	dsb	sy
 800b87c:	60fb      	str	r3, [r7, #12]
}
 800b87e:	bf00      	nop
 800b880:	bf00      	nop
 800b882:	e7fd      	b.n	800b880 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b884:	4b07      	ldr	r3, [pc, #28]	@ (800b8a4 <vTaskPlaceOnEventList+0x48>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	3318      	adds	r3, #24
 800b88a:	4619      	mov	r1, r3
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f7fe fe4e 	bl	800a52e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b892:	2101      	movs	r1, #1
 800b894:	6838      	ldr	r0, [r7, #0]
 800b896:	f000 fa8d 	bl	800bdb4 <prvAddCurrentTaskToDelayedList>
}
 800b89a:	bf00      	nop
 800b89c:	3710      	adds	r7, #16
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	20000e74 	.word	0x20000e74

0800b8a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b086      	sub	sp, #24
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	60b9      	str	r1, [r7, #8]
 800b8b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d10b      	bne.n	800b8d2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b8ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8be:	f383 8811 	msr	BASEPRI, r3
 800b8c2:	f3bf 8f6f 	isb	sy
 800b8c6:	f3bf 8f4f 	dsb	sy
 800b8ca:	617b      	str	r3, [r7, #20]
}
 800b8cc:	bf00      	nop
 800b8ce:	bf00      	nop
 800b8d0:	e7fd      	b.n	800b8ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b8d2:	4b0a      	ldr	r3, [pc, #40]	@ (800b8fc <vTaskPlaceOnEventListRestricted+0x54>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	3318      	adds	r3, #24
 800b8d8:	4619      	mov	r1, r3
 800b8da:	68f8      	ldr	r0, [r7, #12]
 800b8dc:	f7fe fe03 	bl	800a4e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d002      	beq.n	800b8ec <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b8e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b8ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b8ec:	6879      	ldr	r1, [r7, #4]
 800b8ee:	68b8      	ldr	r0, [r7, #8]
 800b8f0:	f000 fa60 	bl	800bdb4 <prvAddCurrentTaskToDelayedList>
	}
 800b8f4:	bf00      	nop
 800b8f6:	3718      	adds	r7, #24
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	20000e74 	.word	0x20000e74

0800b900 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b086      	sub	sp, #24
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	68db      	ldr	r3, [r3, #12]
 800b90c:	68db      	ldr	r3, [r3, #12]
 800b90e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d10b      	bne.n	800b92e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b91a:	f383 8811 	msr	BASEPRI, r3
 800b91e:	f3bf 8f6f 	isb	sy
 800b922:	f3bf 8f4f 	dsb	sy
 800b926:	60fb      	str	r3, [r7, #12]
}
 800b928:	bf00      	nop
 800b92a:	bf00      	nop
 800b92c:	e7fd      	b.n	800b92a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	3318      	adds	r3, #24
 800b932:	4618      	mov	r0, r3
 800b934:	f7fe fe34 	bl	800a5a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b938:	4b1d      	ldr	r3, [pc, #116]	@ (800b9b0 <xTaskRemoveFromEventList+0xb0>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d11d      	bne.n	800b97c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	3304      	adds	r3, #4
 800b944:	4618      	mov	r0, r3
 800b946:	f7fe fe2b 	bl	800a5a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b94e:	4b19      	ldr	r3, [pc, #100]	@ (800b9b4 <xTaskRemoveFromEventList+0xb4>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	429a      	cmp	r2, r3
 800b954:	d903      	bls.n	800b95e <xTaskRemoveFromEventList+0x5e>
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b95a:	4a16      	ldr	r2, [pc, #88]	@ (800b9b4 <xTaskRemoveFromEventList+0xb4>)
 800b95c:	6013      	str	r3, [r2, #0]
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b962:	4613      	mov	r3, r2
 800b964:	009b      	lsls	r3, r3, #2
 800b966:	4413      	add	r3, r2
 800b968:	009b      	lsls	r3, r3, #2
 800b96a:	4a13      	ldr	r2, [pc, #76]	@ (800b9b8 <xTaskRemoveFromEventList+0xb8>)
 800b96c:	441a      	add	r2, r3
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	3304      	adds	r3, #4
 800b972:	4619      	mov	r1, r3
 800b974:	4610      	mov	r0, r2
 800b976:	f7fe fdb6 	bl	800a4e6 <vListInsertEnd>
 800b97a:	e005      	b.n	800b988 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	3318      	adds	r3, #24
 800b980:	4619      	mov	r1, r3
 800b982:	480e      	ldr	r0, [pc, #56]	@ (800b9bc <xTaskRemoveFromEventList+0xbc>)
 800b984:	f7fe fdaf 	bl	800a4e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b98c:	4b0c      	ldr	r3, [pc, #48]	@ (800b9c0 <xTaskRemoveFromEventList+0xc0>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b992:	429a      	cmp	r2, r3
 800b994:	d905      	bls.n	800b9a2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b996:	2301      	movs	r3, #1
 800b998:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b99a:	4b0a      	ldr	r3, [pc, #40]	@ (800b9c4 <xTaskRemoveFromEventList+0xc4>)
 800b99c:	2201      	movs	r2, #1
 800b99e:	601a      	str	r2, [r3, #0]
 800b9a0:	e001      	b.n	800b9a6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b9a6:	697b      	ldr	r3, [r7, #20]
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3718      	adds	r7, #24
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}
 800b9b0:	20001370 	.word	0x20001370
 800b9b4:	20001350 	.word	0x20001350
 800b9b8:	20000e78 	.word	0x20000e78
 800b9bc:	20001308 	.word	0x20001308
 800b9c0:	20000e74 	.word	0x20000e74
 800b9c4:	2000135c 	.word	0x2000135c

0800b9c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b083      	sub	sp, #12
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b9d0:	4b06      	ldr	r3, [pc, #24]	@ (800b9ec <vTaskInternalSetTimeOutState+0x24>)
 800b9d2:	681a      	ldr	r2, [r3, #0]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b9d8:	4b05      	ldr	r3, [pc, #20]	@ (800b9f0 <vTaskInternalSetTimeOutState+0x28>)
 800b9da:	681a      	ldr	r2, [r3, #0]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	605a      	str	r2, [r3, #4]
}
 800b9e0:	bf00      	nop
 800b9e2:	370c      	adds	r7, #12
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ea:	4770      	bx	lr
 800b9ec:	20001360 	.word	0x20001360
 800b9f0:	2000134c 	.word	0x2000134c

0800b9f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b088      	sub	sp, #32
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d10b      	bne.n	800ba1c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ba04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba08:	f383 8811 	msr	BASEPRI, r3
 800ba0c:	f3bf 8f6f 	isb	sy
 800ba10:	f3bf 8f4f 	dsb	sy
 800ba14:	613b      	str	r3, [r7, #16]
}
 800ba16:	bf00      	nop
 800ba18:	bf00      	nop
 800ba1a:	e7fd      	b.n	800ba18 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d10b      	bne.n	800ba3a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ba22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba26:	f383 8811 	msr	BASEPRI, r3
 800ba2a:	f3bf 8f6f 	isb	sy
 800ba2e:	f3bf 8f4f 	dsb	sy
 800ba32:	60fb      	str	r3, [r7, #12]
}
 800ba34:	bf00      	nop
 800ba36:	bf00      	nop
 800ba38:	e7fd      	b.n	800ba36 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ba3a:	f000 fe5d 	bl	800c6f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ba3e:	4b1d      	ldr	r3, [pc, #116]	@ (800bab4 <xTaskCheckForTimeOut+0xc0>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	69ba      	ldr	r2, [r7, #24]
 800ba4a:	1ad3      	subs	r3, r2, r3
 800ba4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ba56:	d102      	bne.n	800ba5e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	61fb      	str	r3, [r7, #28]
 800ba5c:	e023      	b.n	800baa6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681a      	ldr	r2, [r3, #0]
 800ba62:	4b15      	ldr	r3, [pc, #84]	@ (800bab8 <xTaskCheckForTimeOut+0xc4>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d007      	beq.n	800ba7a <xTaskCheckForTimeOut+0x86>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	685b      	ldr	r3, [r3, #4]
 800ba6e:	69ba      	ldr	r2, [r7, #24]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d302      	bcc.n	800ba7a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ba74:	2301      	movs	r3, #1
 800ba76:	61fb      	str	r3, [r7, #28]
 800ba78:	e015      	b.n	800baa6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	697a      	ldr	r2, [r7, #20]
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d20b      	bcs.n	800ba9c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	681a      	ldr	r2, [r3, #0]
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	1ad2      	subs	r2, r2, r3
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f7ff ff99 	bl	800b9c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ba96:	2300      	movs	r3, #0
 800ba98:	61fb      	str	r3, [r7, #28]
 800ba9a:	e004      	b.n	800baa6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800baa2:	2301      	movs	r3, #1
 800baa4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800baa6:	f000 fe59 	bl	800c75c <vPortExitCritical>

	return xReturn;
 800baaa:	69fb      	ldr	r3, [r7, #28]
}
 800baac:	4618      	mov	r0, r3
 800baae:	3720      	adds	r7, #32
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}
 800bab4:	2000134c 	.word	0x2000134c
 800bab8:	20001360 	.word	0x20001360

0800babc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800babc:	b480      	push	{r7}
 800babe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bac0:	4b03      	ldr	r3, [pc, #12]	@ (800bad0 <vTaskMissedYield+0x14>)
 800bac2:	2201      	movs	r2, #1
 800bac4:	601a      	str	r2, [r3, #0]
}
 800bac6:	bf00      	nop
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr
 800bad0:	2000135c 	.word	0x2000135c

0800bad4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800badc:	f000 f852 	bl	800bb84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bae0:	4b06      	ldr	r3, [pc, #24]	@ (800bafc <prvIdleTask+0x28>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	2b01      	cmp	r3, #1
 800bae6:	d9f9      	bls.n	800badc <prvIdleTask+0x8>
			{
				taskYIELD();
 800bae8:	4b05      	ldr	r3, [pc, #20]	@ (800bb00 <prvIdleTask+0x2c>)
 800baea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800baee:	601a      	str	r2, [r3, #0]
 800baf0:	f3bf 8f4f 	dsb	sy
 800baf4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800baf8:	e7f0      	b.n	800badc <prvIdleTask+0x8>
 800bafa:	bf00      	nop
 800bafc:	20000e78 	.word	0x20000e78
 800bb00:	e000ed04 	.word	0xe000ed04

0800bb04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b082      	sub	sp, #8
 800bb08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	607b      	str	r3, [r7, #4]
 800bb0e:	e00c      	b.n	800bb2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bb10:	687a      	ldr	r2, [r7, #4]
 800bb12:	4613      	mov	r3, r2
 800bb14:	009b      	lsls	r3, r3, #2
 800bb16:	4413      	add	r3, r2
 800bb18:	009b      	lsls	r3, r3, #2
 800bb1a:	4a12      	ldr	r2, [pc, #72]	@ (800bb64 <prvInitialiseTaskLists+0x60>)
 800bb1c:	4413      	add	r3, r2
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7fe fcb4 	bl	800a48c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	3301      	adds	r3, #1
 800bb28:	607b      	str	r3, [r7, #4]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2b37      	cmp	r3, #55	@ 0x37
 800bb2e:	d9ef      	bls.n	800bb10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bb30:	480d      	ldr	r0, [pc, #52]	@ (800bb68 <prvInitialiseTaskLists+0x64>)
 800bb32:	f7fe fcab 	bl	800a48c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bb36:	480d      	ldr	r0, [pc, #52]	@ (800bb6c <prvInitialiseTaskLists+0x68>)
 800bb38:	f7fe fca8 	bl	800a48c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bb3c:	480c      	ldr	r0, [pc, #48]	@ (800bb70 <prvInitialiseTaskLists+0x6c>)
 800bb3e:	f7fe fca5 	bl	800a48c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bb42:	480c      	ldr	r0, [pc, #48]	@ (800bb74 <prvInitialiseTaskLists+0x70>)
 800bb44:	f7fe fca2 	bl	800a48c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bb48:	480b      	ldr	r0, [pc, #44]	@ (800bb78 <prvInitialiseTaskLists+0x74>)
 800bb4a:	f7fe fc9f 	bl	800a48c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bb4e:	4b0b      	ldr	r3, [pc, #44]	@ (800bb7c <prvInitialiseTaskLists+0x78>)
 800bb50:	4a05      	ldr	r2, [pc, #20]	@ (800bb68 <prvInitialiseTaskLists+0x64>)
 800bb52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bb54:	4b0a      	ldr	r3, [pc, #40]	@ (800bb80 <prvInitialiseTaskLists+0x7c>)
 800bb56:	4a05      	ldr	r2, [pc, #20]	@ (800bb6c <prvInitialiseTaskLists+0x68>)
 800bb58:	601a      	str	r2, [r3, #0]
}
 800bb5a:	bf00      	nop
 800bb5c:	3708      	adds	r7, #8
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}
 800bb62:	bf00      	nop
 800bb64:	20000e78 	.word	0x20000e78
 800bb68:	200012d8 	.word	0x200012d8
 800bb6c:	200012ec 	.word	0x200012ec
 800bb70:	20001308 	.word	0x20001308
 800bb74:	2000131c 	.word	0x2000131c
 800bb78:	20001334 	.word	0x20001334
 800bb7c:	20001300 	.word	0x20001300
 800bb80:	20001304 	.word	0x20001304

0800bb84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b082      	sub	sp, #8
 800bb88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb8a:	e019      	b.n	800bbc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bb8c:	f000 fdb4 	bl	800c6f8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800bb90:	4b10      	ldr	r3, [pc, #64]	@ (800bbd4 <prvCheckTasksWaitingTermination+0x50>)
 800bb92:	68db      	ldr	r3, [r3, #12]
 800bb94:	68db      	ldr	r3, [r3, #12]
 800bb96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	3304      	adds	r3, #4
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f7fe fcff 	bl	800a5a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bba2:	4b0d      	ldr	r3, [pc, #52]	@ (800bbd8 <prvCheckTasksWaitingTermination+0x54>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	3b01      	subs	r3, #1
 800bba8:	4a0b      	ldr	r2, [pc, #44]	@ (800bbd8 <prvCheckTasksWaitingTermination+0x54>)
 800bbaa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bbac:	4b0b      	ldr	r3, [pc, #44]	@ (800bbdc <prvCheckTasksWaitingTermination+0x58>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	3b01      	subs	r3, #1
 800bbb2:	4a0a      	ldr	r2, [pc, #40]	@ (800bbdc <prvCheckTasksWaitingTermination+0x58>)
 800bbb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bbb6:	f000 fdd1 	bl	800c75c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 f810 	bl	800bbe0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bbc0:	4b06      	ldr	r3, [pc, #24]	@ (800bbdc <prvCheckTasksWaitingTermination+0x58>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d1e1      	bne.n	800bb8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bbc8:	bf00      	nop
 800bbca:	bf00      	nop
 800bbcc:	3708      	adds	r7, #8
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
 800bbd2:	bf00      	nop
 800bbd4:	2000131c 	.word	0x2000131c
 800bbd8:	20001348 	.word	0x20001348
 800bbdc:	20001330 	.word	0x20001330

0800bbe0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b084      	sub	sp, #16
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	3354      	adds	r3, #84	@ 0x54
 800bbec:	4618      	mov	r0, r3
 800bbee:	f002 f84d 	bl	800dc8c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d108      	bne.n	800bc0e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc00:	4618      	mov	r0, r3
 800bc02:	f000 ff63 	bl	800cacc <vPortFree>
				vPortFree( pxTCB );
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 ff60 	bl	800cacc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bc0c:	e019      	b.n	800bc42 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d103      	bne.n	800bc20 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f000 ff57 	bl	800cacc <vPortFree>
	}
 800bc1e:	e010      	b.n	800bc42 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bc26:	2b02      	cmp	r3, #2
 800bc28:	d00b      	beq.n	800bc42 <prvDeleteTCB+0x62>
	__asm volatile
 800bc2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc2e:	f383 8811 	msr	BASEPRI, r3
 800bc32:	f3bf 8f6f 	isb	sy
 800bc36:	f3bf 8f4f 	dsb	sy
 800bc3a:	60fb      	str	r3, [r7, #12]
}
 800bc3c:	bf00      	nop
 800bc3e:	bf00      	nop
 800bc40:	e7fd      	b.n	800bc3e <prvDeleteTCB+0x5e>
	}
 800bc42:	bf00      	nop
 800bc44:	3710      	adds	r7, #16
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
	...

0800bc4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b083      	sub	sp, #12
 800bc50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc52:	4b0f      	ldr	r3, [pc, #60]	@ (800bc90 <prvResetNextTaskUnblockTime+0x44>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d101      	bne.n	800bc60 <prvResetNextTaskUnblockTime+0x14>
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	e000      	b.n	800bc62 <prvResetNextTaskUnblockTime+0x16>
 800bc60:	2300      	movs	r3, #0
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d004      	beq.n	800bc70 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc66:	4b0b      	ldr	r3, [pc, #44]	@ (800bc94 <prvResetNextTaskUnblockTime+0x48>)
 800bc68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bc6c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bc6e:	e008      	b.n	800bc82 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bc70:	4b07      	ldr	r3, [pc, #28]	@ (800bc90 <prvResetNextTaskUnblockTime+0x44>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	68db      	ldr	r3, [r3, #12]
 800bc76:	68db      	ldr	r3, [r3, #12]
 800bc78:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	4a05      	ldr	r2, [pc, #20]	@ (800bc94 <prvResetNextTaskUnblockTime+0x48>)
 800bc80:	6013      	str	r3, [r2, #0]
}
 800bc82:	bf00      	nop
 800bc84:	370c      	adds	r7, #12
 800bc86:	46bd      	mov	sp, r7
 800bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8c:	4770      	bx	lr
 800bc8e:	bf00      	nop
 800bc90:	20001300 	.word	0x20001300
 800bc94:	20001368 	.word	0x20001368

0800bc98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bc98:	b480      	push	{r7}
 800bc9a:	b083      	sub	sp, #12
 800bc9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bc9e:	4b0b      	ldr	r3, [pc, #44]	@ (800bccc <xTaskGetSchedulerState+0x34>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d102      	bne.n	800bcac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bca6:	2301      	movs	r3, #1
 800bca8:	607b      	str	r3, [r7, #4]
 800bcaa:	e008      	b.n	800bcbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcac:	4b08      	ldr	r3, [pc, #32]	@ (800bcd0 <xTaskGetSchedulerState+0x38>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d102      	bne.n	800bcba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bcb4:	2302      	movs	r3, #2
 800bcb6:	607b      	str	r3, [r7, #4]
 800bcb8:	e001      	b.n	800bcbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bcbe:	687b      	ldr	r3, [r7, #4]
	}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	370c      	adds	r7, #12
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr
 800bccc:	20001354 	.word	0x20001354
 800bcd0:	20001370 	.word	0x20001370

0800bcd4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b086      	sub	sp, #24
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bce0:	2300      	movs	r3, #0
 800bce2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d058      	beq.n	800bd9c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bcea:	4b2f      	ldr	r3, [pc, #188]	@ (800bda8 <xTaskPriorityDisinherit+0xd4>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	693a      	ldr	r2, [r7, #16]
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d00b      	beq.n	800bd0c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bcf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcf8:	f383 8811 	msr	BASEPRI, r3
 800bcfc:	f3bf 8f6f 	isb	sy
 800bd00:	f3bf 8f4f 	dsb	sy
 800bd04:	60fb      	str	r3, [r7, #12]
}
 800bd06:	bf00      	nop
 800bd08:	bf00      	nop
 800bd0a:	e7fd      	b.n	800bd08 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d10b      	bne.n	800bd2c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bd14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd18:	f383 8811 	msr	BASEPRI, r3
 800bd1c:	f3bf 8f6f 	isb	sy
 800bd20:	f3bf 8f4f 	dsb	sy
 800bd24:	60bb      	str	r3, [r7, #8]
}
 800bd26:	bf00      	nop
 800bd28:	bf00      	nop
 800bd2a:	e7fd      	b.n	800bd28 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bd2c:	693b      	ldr	r3, [r7, #16]
 800bd2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd30:	1e5a      	subs	r2, r3, #1
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d02c      	beq.n	800bd9c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d128      	bne.n	800bd9c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	3304      	adds	r3, #4
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f7fe fc26 	bl	800a5a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd60:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd6c:	4b0f      	ldr	r3, [pc, #60]	@ (800bdac <xTaskPriorityDisinherit+0xd8>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d903      	bls.n	800bd7c <xTaskPriorityDisinherit+0xa8>
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd78:	4a0c      	ldr	r2, [pc, #48]	@ (800bdac <xTaskPriorityDisinherit+0xd8>)
 800bd7a:	6013      	str	r3, [r2, #0]
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd80:	4613      	mov	r3, r2
 800bd82:	009b      	lsls	r3, r3, #2
 800bd84:	4413      	add	r3, r2
 800bd86:	009b      	lsls	r3, r3, #2
 800bd88:	4a09      	ldr	r2, [pc, #36]	@ (800bdb0 <xTaskPriorityDisinherit+0xdc>)
 800bd8a:	441a      	add	r2, r3
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	3304      	adds	r3, #4
 800bd90:	4619      	mov	r1, r3
 800bd92:	4610      	mov	r0, r2
 800bd94:	f7fe fba7 	bl	800a4e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bd98:	2301      	movs	r3, #1
 800bd9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd9c:	697b      	ldr	r3, [r7, #20]
	}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3718      	adds	r7, #24
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
 800bda6:	bf00      	nop
 800bda8:	20000e74 	.word	0x20000e74
 800bdac:	20001350 	.word	0x20001350
 800bdb0:	20000e78 	.word	0x20000e78

0800bdb4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b084      	sub	sp, #16
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bdbe:	4b21      	ldr	r3, [pc, #132]	@ (800be44 <prvAddCurrentTaskToDelayedList+0x90>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdc4:	4b20      	ldr	r3, [pc, #128]	@ (800be48 <prvAddCurrentTaskToDelayedList+0x94>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	3304      	adds	r3, #4
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fe fbe8 	bl	800a5a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bdd6:	d10a      	bne.n	800bdee <prvAddCurrentTaskToDelayedList+0x3a>
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d007      	beq.n	800bdee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdde:	4b1a      	ldr	r3, [pc, #104]	@ (800be48 <prvAddCurrentTaskToDelayedList+0x94>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	3304      	adds	r3, #4
 800bde4:	4619      	mov	r1, r3
 800bde6:	4819      	ldr	r0, [pc, #100]	@ (800be4c <prvAddCurrentTaskToDelayedList+0x98>)
 800bde8:	f7fe fb7d 	bl	800a4e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bdec:	e026      	b.n	800be3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bdee:	68fa      	ldr	r2, [r7, #12]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	4413      	add	r3, r2
 800bdf4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bdf6:	4b14      	ldr	r3, [pc, #80]	@ (800be48 <prvAddCurrentTaskToDelayedList+0x94>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	68ba      	ldr	r2, [r7, #8]
 800bdfc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bdfe:	68ba      	ldr	r2, [r7, #8]
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	429a      	cmp	r2, r3
 800be04:	d209      	bcs.n	800be1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be06:	4b12      	ldr	r3, [pc, #72]	@ (800be50 <prvAddCurrentTaskToDelayedList+0x9c>)
 800be08:	681a      	ldr	r2, [r3, #0]
 800be0a:	4b0f      	ldr	r3, [pc, #60]	@ (800be48 <prvAddCurrentTaskToDelayedList+0x94>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	3304      	adds	r3, #4
 800be10:	4619      	mov	r1, r3
 800be12:	4610      	mov	r0, r2
 800be14:	f7fe fb8b 	bl	800a52e <vListInsert>
}
 800be18:	e010      	b.n	800be3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be1a:	4b0e      	ldr	r3, [pc, #56]	@ (800be54 <prvAddCurrentTaskToDelayedList+0xa0>)
 800be1c:	681a      	ldr	r2, [r3, #0]
 800be1e:	4b0a      	ldr	r3, [pc, #40]	@ (800be48 <prvAddCurrentTaskToDelayedList+0x94>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	3304      	adds	r3, #4
 800be24:	4619      	mov	r1, r3
 800be26:	4610      	mov	r0, r2
 800be28:	f7fe fb81 	bl	800a52e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800be2c:	4b0a      	ldr	r3, [pc, #40]	@ (800be58 <prvAddCurrentTaskToDelayedList+0xa4>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	68ba      	ldr	r2, [r7, #8]
 800be32:	429a      	cmp	r2, r3
 800be34:	d202      	bcs.n	800be3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800be36:	4a08      	ldr	r2, [pc, #32]	@ (800be58 <prvAddCurrentTaskToDelayedList+0xa4>)
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	6013      	str	r3, [r2, #0]
}
 800be3c:	bf00      	nop
 800be3e:	3710      	adds	r7, #16
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}
 800be44:	2000134c 	.word	0x2000134c
 800be48:	20000e74 	.word	0x20000e74
 800be4c:	20001334 	.word	0x20001334
 800be50:	20001304 	.word	0x20001304
 800be54:	20001300 	.word	0x20001300
 800be58:	20001368 	.word	0x20001368

0800be5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b08a      	sub	sp, #40	@ 0x28
 800be60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800be62:	2300      	movs	r3, #0
 800be64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800be66:	f000 fad9 	bl	800c41c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800be6a:	4b1d      	ldr	r3, [pc, #116]	@ (800bee0 <xTimerCreateTimerTask+0x84>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d021      	beq.n	800beb6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800be72:	2300      	movs	r3, #0
 800be74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800be76:	2300      	movs	r3, #0
 800be78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800be7a:	1d3a      	adds	r2, r7, #4
 800be7c:	f107 0108 	add.w	r1, r7, #8
 800be80:	f107 030c 	add.w	r3, r7, #12
 800be84:	4618      	mov	r0, r3
 800be86:	f7fe fae7 	bl	800a458 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800be8a:	6879      	ldr	r1, [r7, #4]
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	68fa      	ldr	r2, [r7, #12]
 800be90:	9202      	str	r2, [sp, #8]
 800be92:	9301      	str	r3, [sp, #4]
 800be94:	2302      	movs	r3, #2
 800be96:	9300      	str	r3, [sp, #0]
 800be98:	2300      	movs	r3, #0
 800be9a:	460a      	mov	r2, r1
 800be9c:	4911      	ldr	r1, [pc, #68]	@ (800bee4 <xTimerCreateTimerTask+0x88>)
 800be9e:	4812      	ldr	r0, [pc, #72]	@ (800bee8 <xTimerCreateTimerTask+0x8c>)
 800bea0:	f7ff f8a0 	bl	800afe4 <xTaskCreateStatic>
 800bea4:	4603      	mov	r3, r0
 800bea6:	4a11      	ldr	r2, [pc, #68]	@ (800beec <xTimerCreateTimerTask+0x90>)
 800bea8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800beaa:	4b10      	ldr	r3, [pc, #64]	@ (800beec <xTimerCreateTimerTask+0x90>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d001      	beq.n	800beb6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800beb2:	2301      	movs	r3, #1
 800beb4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d10b      	bne.n	800bed4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bec0:	f383 8811 	msr	BASEPRI, r3
 800bec4:	f3bf 8f6f 	isb	sy
 800bec8:	f3bf 8f4f 	dsb	sy
 800becc:	613b      	str	r3, [r7, #16]
}
 800bece:	bf00      	nop
 800bed0:	bf00      	nop
 800bed2:	e7fd      	b.n	800bed0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bed4:	697b      	ldr	r3, [r7, #20]
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3718      	adds	r7, #24
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop
 800bee0:	200013a4 	.word	0x200013a4
 800bee4:	08012504 	.word	0x08012504
 800bee8:	0800c011 	.word	0x0800c011
 800beec:	200013a8 	.word	0x200013a8

0800bef0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b08a      	sub	sp, #40	@ 0x28
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	60f8      	str	r0, [r7, #12]
 800bef8:	60b9      	str	r1, [r7, #8]
 800befa:	607a      	str	r2, [r7, #4]
 800befc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800befe:	2300      	movs	r3, #0
 800bf00:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d10b      	bne.n	800bf20 <xTimerGenericCommand+0x30>
	__asm volatile
 800bf08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf0c:	f383 8811 	msr	BASEPRI, r3
 800bf10:	f3bf 8f6f 	isb	sy
 800bf14:	f3bf 8f4f 	dsb	sy
 800bf18:	623b      	str	r3, [r7, #32]
}
 800bf1a:	bf00      	nop
 800bf1c:	bf00      	nop
 800bf1e:	e7fd      	b.n	800bf1c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bf20:	4b19      	ldr	r3, [pc, #100]	@ (800bf88 <xTimerGenericCommand+0x98>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d02a      	beq.n	800bf7e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	2b05      	cmp	r3, #5
 800bf38:	dc18      	bgt.n	800bf6c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bf3a:	f7ff fead 	bl	800bc98 <xTaskGetSchedulerState>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	2b02      	cmp	r3, #2
 800bf42:	d109      	bne.n	800bf58 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bf44:	4b10      	ldr	r3, [pc, #64]	@ (800bf88 <xTimerGenericCommand+0x98>)
 800bf46:	6818      	ldr	r0, [r3, #0]
 800bf48:	f107 0110 	add.w	r1, r7, #16
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf50:	f7fe fc5a 	bl	800a808 <xQueueGenericSend>
 800bf54:	6278      	str	r0, [r7, #36]	@ 0x24
 800bf56:	e012      	b.n	800bf7e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bf58:	4b0b      	ldr	r3, [pc, #44]	@ (800bf88 <xTimerGenericCommand+0x98>)
 800bf5a:	6818      	ldr	r0, [r3, #0]
 800bf5c:	f107 0110 	add.w	r1, r7, #16
 800bf60:	2300      	movs	r3, #0
 800bf62:	2200      	movs	r2, #0
 800bf64:	f7fe fc50 	bl	800a808 <xQueueGenericSend>
 800bf68:	6278      	str	r0, [r7, #36]	@ 0x24
 800bf6a:	e008      	b.n	800bf7e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bf6c:	4b06      	ldr	r3, [pc, #24]	@ (800bf88 <xTimerGenericCommand+0x98>)
 800bf6e:	6818      	ldr	r0, [r3, #0]
 800bf70:	f107 0110 	add.w	r1, r7, #16
 800bf74:	2300      	movs	r3, #0
 800bf76:	683a      	ldr	r2, [r7, #0]
 800bf78:	f7fe fd48 	bl	800aa0c <xQueueGenericSendFromISR>
 800bf7c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bf7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3728      	adds	r7, #40	@ 0x28
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}
 800bf88:	200013a4 	.word	0x200013a4

0800bf8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b088      	sub	sp, #32
 800bf90:	af02      	add	r7, sp, #8
 800bf92:	6078      	str	r0, [r7, #4]
 800bf94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf96:	4b1d      	ldr	r3, [pc, #116]	@ (800c00c <prvProcessExpiredTimer+0x80>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	68db      	ldr	r3, [r3, #12]
 800bf9c:	68db      	ldr	r3, [r3, #12]
 800bf9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	3304      	adds	r3, #4
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7fe fafb 	bl	800a5a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	69db      	ldr	r3, [r3, #28]
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d123      	bne.n	800bffa <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	699a      	ldr	r2, [r3, #24]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	18d1      	adds	r1, r2, r3
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	683a      	ldr	r2, [r7, #0]
 800bfbe:	6978      	ldr	r0, [r7, #20]
 800bfc0:	f000 f8cc 	bl	800c15c <prvInsertTimerInActiveList>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d017      	beq.n	800bffa <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bfca:	2300      	movs	r3, #0
 800bfcc:	9300      	str	r3, [sp, #0]
 800bfce:	2300      	movs	r3, #0
 800bfd0:	687a      	ldr	r2, [r7, #4]
 800bfd2:	2100      	movs	r1, #0
 800bfd4:	6978      	ldr	r0, [r7, #20]
 800bfd6:	f7ff ff8b 	bl	800bef0 <xTimerGenericCommand>
 800bfda:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d10b      	bne.n	800bffa <prvProcessExpiredTimer+0x6e>
	__asm volatile
 800bfe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfe6:	f383 8811 	msr	BASEPRI, r3
 800bfea:	f3bf 8f6f 	isb	sy
 800bfee:	f3bf 8f4f 	dsb	sy
 800bff2:	60fb      	str	r3, [r7, #12]
}
 800bff4:	bf00      	nop
 800bff6:	bf00      	nop
 800bff8:	e7fd      	b.n	800bff6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bffe:	6978      	ldr	r0, [r7, #20]
 800c000:	4798      	blx	r3
}
 800c002:	bf00      	nop
 800c004:	3718      	adds	r7, #24
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
 800c00a:	bf00      	nop
 800c00c:	2000139c 	.word	0x2000139c

0800c010 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c018:	f107 0308 	add.w	r3, r7, #8
 800c01c:	4618      	mov	r0, r3
 800c01e:	f000 f859 	bl	800c0d4 <prvGetNextExpireTime>
 800c022:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	4619      	mov	r1, r3
 800c028:	68f8      	ldr	r0, [r7, #12]
 800c02a:	f000 f805 	bl	800c038 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c02e:	f000 f8d7 	bl	800c1e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c032:	bf00      	nop
 800c034:	e7f0      	b.n	800c018 <prvTimerTask+0x8>
	...

0800c038 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c042:	f7ff fa29 	bl	800b498 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c046:	f107 0308 	add.w	r3, r7, #8
 800c04a:	4618      	mov	r0, r3
 800c04c:	f000 f866 	bl	800c11c <prvSampleTimeNow>
 800c050:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d130      	bne.n	800c0ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d10a      	bne.n	800c074 <prvProcessTimerOrBlockTask+0x3c>
 800c05e:	687a      	ldr	r2, [r7, #4]
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	429a      	cmp	r2, r3
 800c064:	d806      	bhi.n	800c074 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c066:	f7ff fa25 	bl	800b4b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c06a:	68f9      	ldr	r1, [r7, #12]
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f7ff ff8d 	bl	800bf8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c072:	e024      	b.n	800c0be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d008      	beq.n	800c08c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c07a:	4b13      	ldr	r3, [pc, #76]	@ (800c0c8 <prvProcessTimerOrBlockTask+0x90>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	2b00      	cmp	r3, #0
 800c082:	bf0c      	ite	eq
 800c084:	2301      	moveq	r3, #1
 800c086:	2300      	movne	r3, #0
 800c088:	b2db      	uxtb	r3, r3
 800c08a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c08c:	4b0f      	ldr	r3, [pc, #60]	@ (800c0cc <prvProcessTimerOrBlockTask+0x94>)
 800c08e:	6818      	ldr	r0, [r3, #0]
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	1ad3      	subs	r3, r2, r3
 800c096:	683a      	ldr	r2, [r7, #0]
 800c098:	4619      	mov	r1, r3
 800c09a:	f7fe ff6f 	bl	800af7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c09e:	f7ff fa09 	bl	800b4b4 <xTaskResumeAll>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d10a      	bne.n	800c0be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c0a8:	4b09      	ldr	r3, [pc, #36]	@ (800c0d0 <prvProcessTimerOrBlockTask+0x98>)
 800c0aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0ae:	601a      	str	r2, [r3, #0]
 800c0b0:	f3bf 8f4f 	dsb	sy
 800c0b4:	f3bf 8f6f 	isb	sy
}
 800c0b8:	e001      	b.n	800c0be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c0ba:	f7ff f9fb 	bl	800b4b4 <xTaskResumeAll>
}
 800c0be:	bf00      	nop
 800c0c0:	3710      	adds	r7, #16
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}
 800c0c6:	bf00      	nop
 800c0c8:	200013a0 	.word	0x200013a0
 800c0cc:	200013a4 	.word	0x200013a4
 800c0d0:	e000ed04 	.word	0xe000ed04

0800c0d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b085      	sub	sp, #20
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c0dc:	4b0e      	ldr	r3, [pc, #56]	@ (800c118 <prvGetNextExpireTime+0x44>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	bf0c      	ite	eq
 800c0e6:	2301      	moveq	r3, #1
 800c0e8:	2300      	movne	r3, #0
 800c0ea:	b2db      	uxtb	r3, r3
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d105      	bne.n	800c106 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c0fa:	4b07      	ldr	r3, [pc, #28]	@ (800c118 <prvGetNextExpireTime+0x44>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	68db      	ldr	r3, [r3, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	60fb      	str	r3, [r7, #12]
 800c104:	e001      	b.n	800c10a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c106:	2300      	movs	r3, #0
 800c108:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c10a:	68fb      	ldr	r3, [r7, #12]
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3714      	adds	r7, #20
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr
 800c118:	2000139c 	.word	0x2000139c

0800c11c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c124:	f7ff fa64 	bl	800b5f0 <xTaskGetTickCount>
 800c128:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c12a:	4b0b      	ldr	r3, [pc, #44]	@ (800c158 <prvSampleTimeNow+0x3c>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	68fa      	ldr	r2, [r7, #12]
 800c130:	429a      	cmp	r2, r3
 800c132:	d205      	bcs.n	800c140 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c134:	f000 f910 	bl	800c358 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2201      	movs	r2, #1
 800c13c:	601a      	str	r2, [r3, #0]
 800c13e:	e002      	b.n	800c146 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2200      	movs	r2, #0
 800c144:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c146:	4a04      	ldr	r2, [pc, #16]	@ (800c158 <prvSampleTimeNow+0x3c>)
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c14c:	68fb      	ldr	r3, [r7, #12]
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3710      	adds	r7, #16
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop
 800c158:	200013ac 	.word	0x200013ac

0800c15c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b086      	sub	sp, #24
 800c160:	af00      	add	r7, sp, #0
 800c162:	60f8      	str	r0, [r7, #12]
 800c164:	60b9      	str	r1, [r7, #8]
 800c166:	607a      	str	r2, [r7, #4]
 800c168:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c16a:	2300      	movs	r3, #0
 800c16c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	68ba      	ldr	r2, [r7, #8]
 800c172:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	68fa      	ldr	r2, [r7, #12]
 800c178:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c17a:	68ba      	ldr	r2, [r7, #8]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	429a      	cmp	r2, r3
 800c180:	d812      	bhi.n	800c1a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	1ad2      	subs	r2, r2, r3
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	699b      	ldr	r3, [r3, #24]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d302      	bcc.n	800c196 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c190:	2301      	movs	r3, #1
 800c192:	617b      	str	r3, [r7, #20]
 800c194:	e01b      	b.n	800c1ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c196:	4b10      	ldr	r3, [pc, #64]	@ (800c1d8 <prvInsertTimerInActiveList+0x7c>)
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	3304      	adds	r3, #4
 800c19e:	4619      	mov	r1, r3
 800c1a0:	4610      	mov	r0, r2
 800c1a2:	f7fe f9c4 	bl	800a52e <vListInsert>
 800c1a6:	e012      	b.n	800c1ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c1a8:	687a      	ldr	r2, [r7, #4]
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d206      	bcs.n	800c1be <prvInsertTimerInActiveList+0x62>
 800c1b0:	68ba      	ldr	r2, [r7, #8]
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d302      	bcc.n	800c1be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	617b      	str	r3, [r7, #20]
 800c1bc:	e007      	b.n	800c1ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c1be:	4b07      	ldr	r3, [pc, #28]	@ (800c1dc <prvInsertTimerInActiveList+0x80>)
 800c1c0:	681a      	ldr	r2, [r3, #0]
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	3304      	adds	r3, #4
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	4610      	mov	r0, r2
 800c1ca:	f7fe f9b0 	bl	800a52e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c1ce:	697b      	ldr	r3, [r7, #20]
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3718      	adds	r7, #24
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}
 800c1d8:	200013a0 	.word	0x200013a0
 800c1dc:	2000139c 	.word	0x2000139c

0800c1e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b08e      	sub	sp, #56	@ 0x38
 800c1e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c1e6:	e0a5      	b.n	800c334 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	da19      	bge.n	800c222 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c1ee:	1d3b      	adds	r3, r7, #4
 800c1f0:	3304      	adds	r3, #4
 800c1f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c1f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d10b      	bne.n	800c212 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c1fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1fe:	f383 8811 	msr	BASEPRI, r3
 800c202:	f3bf 8f6f 	isb	sy
 800c206:	f3bf 8f4f 	dsb	sy
 800c20a:	61fb      	str	r3, [r7, #28]
}
 800c20c:	bf00      	nop
 800c20e:	bf00      	nop
 800c210:	e7fd      	b.n	800c20e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c218:	6850      	ldr	r0, [r2, #4]
 800c21a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c21c:	6892      	ldr	r2, [r2, #8]
 800c21e:	4611      	mov	r1, r2
 800c220:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2b00      	cmp	r3, #0
 800c226:	f2c0 8085 	blt.w	800c334 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c22e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c230:	695b      	ldr	r3, [r3, #20]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d004      	beq.n	800c240 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c238:	3304      	adds	r3, #4
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7fe f9b0 	bl	800a5a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c240:	463b      	mov	r3, r7
 800c242:	4618      	mov	r0, r3
 800c244:	f7ff ff6a 	bl	800c11c <prvSampleTimeNow>
 800c248:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2b09      	cmp	r3, #9
 800c24e:	d86c      	bhi.n	800c32a <prvProcessReceivedCommands+0x14a>
 800c250:	a201      	add	r2, pc, #4	@ (adr r2, 800c258 <prvProcessReceivedCommands+0x78>)
 800c252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c256:	bf00      	nop
 800c258:	0800c281 	.word	0x0800c281
 800c25c:	0800c281 	.word	0x0800c281
 800c260:	0800c281 	.word	0x0800c281
 800c264:	0800c32b 	.word	0x0800c32b
 800c268:	0800c2df 	.word	0x0800c2df
 800c26c:	0800c319 	.word	0x0800c319
 800c270:	0800c281 	.word	0x0800c281
 800c274:	0800c281 	.word	0x0800c281
 800c278:	0800c32b 	.word	0x0800c32b
 800c27c:	0800c2df 	.word	0x0800c2df
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c280:	68ba      	ldr	r2, [r7, #8]
 800c282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c284:	699b      	ldr	r3, [r3, #24]
 800c286:	18d1      	adds	r1, r2, r3
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c28c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c28e:	f7ff ff65 	bl	800c15c <prvInsertTimerInActiveList>
 800c292:	4603      	mov	r3, r0
 800c294:	2b00      	cmp	r3, #0
 800c296:	d04a      	beq.n	800c32e <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c29a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c29c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c29e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2a2:	69db      	ldr	r3, [r3, #28]
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	d142      	bne.n	800c32e <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c2a8:	68ba      	ldr	r2, [r7, #8]
 800c2aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2ac:	699b      	ldr	r3, [r3, #24]
 800c2ae:	441a      	add	r2, r3
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	9300      	str	r3, [sp, #0]
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	2100      	movs	r1, #0
 800c2b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c2ba:	f7ff fe19 	bl	800bef0 <xTimerGenericCommand>
 800c2be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c2c0:	6a3b      	ldr	r3, [r7, #32]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d133      	bne.n	800c32e <prvProcessReceivedCommands+0x14e>
	__asm volatile
 800c2c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2ca:	f383 8811 	msr	BASEPRI, r3
 800c2ce:	f3bf 8f6f 	isb	sy
 800c2d2:	f3bf 8f4f 	dsb	sy
 800c2d6:	61bb      	str	r3, [r7, #24]
}
 800c2d8:	bf00      	nop
 800c2da:	bf00      	nop
 800c2dc:	e7fd      	b.n	800c2da <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c2de:	68ba      	ldr	r2, [r7, #8]
 800c2e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2e6:	699b      	ldr	r3, [r3, #24]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d10b      	bne.n	800c304 <prvProcessReceivedCommands+0x124>
	__asm volatile
 800c2ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2f0:	f383 8811 	msr	BASEPRI, r3
 800c2f4:	f3bf 8f6f 	isb	sy
 800c2f8:	f3bf 8f4f 	dsb	sy
 800c2fc:	617b      	str	r3, [r7, #20]
}
 800c2fe:	bf00      	nop
 800c300:	bf00      	nop
 800c302:	e7fd      	b.n	800c300 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c306:	699a      	ldr	r2, [r3, #24]
 800c308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c30a:	18d1      	adds	r1, r2, r3
 800c30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c30e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c310:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c312:	f7ff ff23 	bl	800c15c <prvInsertTimerInActiveList>
					break;
 800c316:	e00d      	b.n	800c334 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c31a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d107      	bne.n	800c332 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 800c322:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c324:	f000 fbd2 	bl	800cacc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c328:	e003      	b.n	800c332 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 800c32a:	bf00      	nop
 800c32c:	e002      	b.n	800c334 <prvProcessReceivedCommands+0x154>
					break;
 800c32e:	bf00      	nop
 800c330:	e000      	b.n	800c334 <prvProcessReceivedCommands+0x154>
					break;
 800c332:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c334:	4b07      	ldr	r3, [pc, #28]	@ (800c354 <prvProcessReceivedCommands+0x174>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	1d39      	adds	r1, r7, #4
 800c33a:	2200      	movs	r2, #0
 800c33c:	4618      	mov	r0, r3
 800c33e:	f7fe fc01 	bl	800ab44 <xQueueReceive>
 800c342:	4603      	mov	r3, r0
 800c344:	2b00      	cmp	r3, #0
 800c346:	f47f af4f 	bne.w	800c1e8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c34a:	bf00      	nop
 800c34c:	bf00      	nop
 800c34e:	3730      	adds	r7, #48	@ 0x30
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}
 800c354:	200013a4 	.word	0x200013a4

0800c358 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b088      	sub	sp, #32
 800c35c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c35e:	e046      	b.n	800c3ee <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c360:	4b2c      	ldr	r3, [pc, #176]	@ (800c414 <prvSwitchTimerLists+0xbc>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	68db      	ldr	r3, [r3, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c36a:	4b2a      	ldr	r3, [pc, #168]	@ (800c414 <prvSwitchTimerLists+0xbc>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	68db      	ldr	r3, [r3, #12]
 800c370:	68db      	ldr	r3, [r3, #12]
 800c372:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	3304      	adds	r3, #4
 800c378:	4618      	mov	r0, r3
 800c37a:	f7fe f911 	bl	800a5a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c382:	68f8      	ldr	r0, [r7, #12]
 800c384:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	69db      	ldr	r3, [r3, #28]
 800c38a:	2b01      	cmp	r3, #1
 800c38c:	d12f      	bne.n	800c3ee <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	699b      	ldr	r3, [r3, #24]
 800c392:	693a      	ldr	r2, [r7, #16]
 800c394:	4413      	add	r3, r2
 800c396:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c398:	68ba      	ldr	r2, [r7, #8]
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d90e      	bls.n	800c3be <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	68ba      	ldr	r2, [r7, #8]
 800c3a4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	68fa      	ldr	r2, [r7, #12]
 800c3aa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c3ac:	4b19      	ldr	r3, [pc, #100]	@ (800c414 <prvSwitchTimerLists+0xbc>)
 800c3ae:	681a      	ldr	r2, [r3, #0]
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	3304      	adds	r3, #4
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	4610      	mov	r0, r2
 800c3b8:	f7fe f8b9 	bl	800a52e <vListInsert>
 800c3bc:	e017      	b.n	800c3ee <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c3be:	2300      	movs	r3, #0
 800c3c0:	9300      	str	r3, [sp, #0]
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	693a      	ldr	r2, [r7, #16]
 800c3c6:	2100      	movs	r1, #0
 800c3c8:	68f8      	ldr	r0, [r7, #12]
 800c3ca:	f7ff fd91 	bl	800bef0 <xTimerGenericCommand>
 800c3ce:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d10b      	bne.n	800c3ee <prvSwitchTimerLists+0x96>
	__asm volatile
 800c3d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3da:	f383 8811 	msr	BASEPRI, r3
 800c3de:	f3bf 8f6f 	isb	sy
 800c3e2:	f3bf 8f4f 	dsb	sy
 800c3e6:	603b      	str	r3, [r7, #0]
}
 800c3e8:	bf00      	nop
 800c3ea:	bf00      	nop
 800c3ec:	e7fd      	b.n	800c3ea <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c3ee:	4b09      	ldr	r3, [pc, #36]	@ (800c414 <prvSwitchTimerLists+0xbc>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d1b3      	bne.n	800c360 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c3f8:	4b06      	ldr	r3, [pc, #24]	@ (800c414 <prvSwitchTimerLists+0xbc>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c3fe:	4b06      	ldr	r3, [pc, #24]	@ (800c418 <prvSwitchTimerLists+0xc0>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	4a04      	ldr	r2, [pc, #16]	@ (800c414 <prvSwitchTimerLists+0xbc>)
 800c404:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c406:	4a04      	ldr	r2, [pc, #16]	@ (800c418 <prvSwitchTimerLists+0xc0>)
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	6013      	str	r3, [r2, #0]
}
 800c40c:	bf00      	nop
 800c40e:	3718      	adds	r7, #24
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}
 800c414:	2000139c 	.word	0x2000139c
 800c418:	200013a0 	.word	0x200013a0

0800c41c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b082      	sub	sp, #8
 800c420:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c422:	f000 f969 	bl	800c6f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c426:	4b15      	ldr	r3, [pc, #84]	@ (800c47c <prvCheckForValidListAndQueue+0x60>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d120      	bne.n	800c470 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c42e:	4814      	ldr	r0, [pc, #80]	@ (800c480 <prvCheckForValidListAndQueue+0x64>)
 800c430:	f7fe f82c 	bl	800a48c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c434:	4813      	ldr	r0, [pc, #76]	@ (800c484 <prvCheckForValidListAndQueue+0x68>)
 800c436:	f7fe f829 	bl	800a48c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c43a:	4b13      	ldr	r3, [pc, #76]	@ (800c488 <prvCheckForValidListAndQueue+0x6c>)
 800c43c:	4a10      	ldr	r2, [pc, #64]	@ (800c480 <prvCheckForValidListAndQueue+0x64>)
 800c43e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c440:	4b12      	ldr	r3, [pc, #72]	@ (800c48c <prvCheckForValidListAndQueue+0x70>)
 800c442:	4a10      	ldr	r2, [pc, #64]	@ (800c484 <prvCheckForValidListAndQueue+0x68>)
 800c444:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c446:	2300      	movs	r3, #0
 800c448:	9300      	str	r3, [sp, #0]
 800c44a:	4b11      	ldr	r3, [pc, #68]	@ (800c490 <prvCheckForValidListAndQueue+0x74>)
 800c44c:	4a11      	ldr	r2, [pc, #68]	@ (800c494 <prvCheckForValidListAndQueue+0x78>)
 800c44e:	2110      	movs	r1, #16
 800c450:	200a      	movs	r0, #10
 800c452:	f7fe f939 	bl	800a6c8 <xQueueGenericCreateStatic>
 800c456:	4603      	mov	r3, r0
 800c458:	4a08      	ldr	r2, [pc, #32]	@ (800c47c <prvCheckForValidListAndQueue+0x60>)
 800c45a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c45c:	4b07      	ldr	r3, [pc, #28]	@ (800c47c <prvCheckForValidListAndQueue+0x60>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d005      	beq.n	800c470 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c464:	4b05      	ldr	r3, [pc, #20]	@ (800c47c <prvCheckForValidListAndQueue+0x60>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	490b      	ldr	r1, [pc, #44]	@ (800c498 <prvCheckForValidListAndQueue+0x7c>)
 800c46a:	4618      	mov	r0, r3
 800c46c:	f7fe fd5c 	bl	800af28 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c470:	f000 f974 	bl	800c75c <vPortExitCritical>
}
 800c474:	bf00      	nop
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	bf00      	nop
 800c47c:	200013a4 	.word	0x200013a4
 800c480:	20001374 	.word	0x20001374
 800c484:	20001388 	.word	0x20001388
 800c488:	2000139c 	.word	0x2000139c
 800c48c:	200013a0 	.word	0x200013a0
 800c490:	20001450 	.word	0x20001450
 800c494:	200013b0 	.word	0x200013b0
 800c498:	0801250c 	.word	0x0801250c

0800c49c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c49c:	b480      	push	{r7}
 800c49e:	b085      	sub	sp, #20
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	60f8      	str	r0, [r7, #12]
 800c4a4:	60b9      	str	r1, [r7, #8]
 800c4a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	3b04      	subs	r3, #4
 800c4ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c4b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	3b04      	subs	r3, #4
 800c4ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	f023 0201 	bic.w	r2, r3, #1
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	3b04      	subs	r3, #4
 800c4ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c4cc:	4a0c      	ldr	r2, [pc, #48]	@ (800c500 <pxPortInitialiseStack+0x64>)
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	3b14      	subs	r3, #20
 800c4d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c4d8:	687a      	ldr	r2, [r7, #4]
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	3b04      	subs	r3, #4
 800c4e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f06f 0202 	mvn.w	r2, #2
 800c4ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	3b20      	subs	r3, #32
 800c4f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3714      	adds	r7, #20
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr
 800c500:	0800c505 	.word	0x0800c505

0800c504 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c504:	b480      	push	{r7}
 800c506:	b085      	sub	sp, #20
 800c508:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c50a:	2300      	movs	r3, #0
 800c50c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c50e:	4b13      	ldr	r3, [pc, #76]	@ (800c55c <prvTaskExitError+0x58>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c516:	d00b      	beq.n	800c530 <prvTaskExitError+0x2c>
	__asm volatile
 800c518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c51c:	f383 8811 	msr	BASEPRI, r3
 800c520:	f3bf 8f6f 	isb	sy
 800c524:	f3bf 8f4f 	dsb	sy
 800c528:	60fb      	str	r3, [r7, #12]
}
 800c52a:	bf00      	nop
 800c52c:	bf00      	nop
 800c52e:	e7fd      	b.n	800c52c <prvTaskExitError+0x28>
	__asm volatile
 800c530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c534:	f383 8811 	msr	BASEPRI, r3
 800c538:	f3bf 8f6f 	isb	sy
 800c53c:	f3bf 8f4f 	dsb	sy
 800c540:	60bb      	str	r3, [r7, #8]
}
 800c542:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c544:	bf00      	nop
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d0fc      	beq.n	800c546 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c54c:	bf00      	nop
 800c54e:	bf00      	nop
 800c550:	3714      	adds	r7, #20
 800c552:	46bd      	mov	sp, r7
 800c554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c558:	4770      	bx	lr
 800c55a:	bf00      	nop
 800c55c:	20000020 	.word	0x20000020

0800c560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c560:	4b07      	ldr	r3, [pc, #28]	@ (800c580 <pxCurrentTCBConst2>)
 800c562:	6819      	ldr	r1, [r3, #0]
 800c564:	6808      	ldr	r0, [r1, #0]
 800c566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c56a:	f380 8809 	msr	PSP, r0
 800c56e:	f3bf 8f6f 	isb	sy
 800c572:	f04f 0000 	mov.w	r0, #0
 800c576:	f380 8811 	msr	BASEPRI, r0
 800c57a:	4770      	bx	lr
 800c57c:	f3af 8000 	nop.w

0800c580 <pxCurrentTCBConst2>:
 800c580:	20000e74 	.word	0x20000e74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c584:	bf00      	nop
 800c586:	bf00      	nop

0800c588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c588:	4808      	ldr	r0, [pc, #32]	@ (800c5ac <prvPortStartFirstTask+0x24>)
 800c58a:	6800      	ldr	r0, [r0, #0]
 800c58c:	6800      	ldr	r0, [r0, #0]
 800c58e:	f380 8808 	msr	MSP, r0
 800c592:	f04f 0000 	mov.w	r0, #0
 800c596:	f380 8814 	msr	CONTROL, r0
 800c59a:	b662      	cpsie	i
 800c59c:	b661      	cpsie	f
 800c59e:	f3bf 8f4f 	dsb	sy
 800c5a2:	f3bf 8f6f 	isb	sy
 800c5a6:	df00      	svc	0
 800c5a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c5aa:	bf00      	nop
 800c5ac:	e000ed08 	.word	0xe000ed08

0800c5b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b086      	sub	sp, #24
 800c5b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c5b6:	4b47      	ldr	r3, [pc, #284]	@ (800c6d4 <xPortStartScheduler+0x124>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4a47      	ldr	r2, [pc, #284]	@ (800c6d8 <xPortStartScheduler+0x128>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d10b      	bne.n	800c5d8 <xPortStartScheduler+0x28>
	__asm volatile
 800c5c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5c4:	f383 8811 	msr	BASEPRI, r3
 800c5c8:	f3bf 8f6f 	isb	sy
 800c5cc:	f3bf 8f4f 	dsb	sy
 800c5d0:	613b      	str	r3, [r7, #16]
}
 800c5d2:	bf00      	nop
 800c5d4:	bf00      	nop
 800c5d6:	e7fd      	b.n	800c5d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c5d8:	4b3e      	ldr	r3, [pc, #248]	@ (800c6d4 <xPortStartScheduler+0x124>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	4a3f      	ldr	r2, [pc, #252]	@ (800c6dc <xPortStartScheduler+0x12c>)
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d10b      	bne.n	800c5fa <xPortStartScheduler+0x4a>
	__asm volatile
 800c5e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5e6:	f383 8811 	msr	BASEPRI, r3
 800c5ea:	f3bf 8f6f 	isb	sy
 800c5ee:	f3bf 8f4f 	dsb	sy
 800c5f2:	60fb      	str	r3, [r7, #12]
}
 800c5f4:	bf00      	nop
 800c5f6:	bf00      	nop
 800c5f8:	e7fd      	b.n	800c5f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c5fa:	4b39      	ldr	r3, [pc, #228]	@ (800c6e0 <xPortStartScheduler+0x130>)
 800c5fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	b2db      	uxtb	r3, r3
 800c604:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	22ff      	movs	r2, #255	@ 0xff
 800c60a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	b2db      	uxtb	r3, r3
 800c612:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c614:	78fb      	ldrb	r3, [r7, #3]
 800c616:	b2db      	uxtb	r3, r3
 800c618:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c61c:	b2da      	uxtb	r2, r3
 800c61e:	4b31      	ldr	r3, [pc, #196]	@ (800c6e4 <xPortStartScheduler+0x134>)
 800c620:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c622:	4b31      	ldr	r3, [pc, #196]	@ (800c6e8 <xPortStartScheduler+0x138>)
 800c624:	2207      	movs	r2, #7
 800c626:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c628:	e009      	b.n	800c63e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c62a:	4b2f      	ldr	r3, [pc, #188]	@ (800c6e8 <xPortStartScheduler+0x138>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	3b01      	subs	r3, #1
 800c630:	4a2d      	ldr	r2, [pc, #180]	@ (800c6e8 <xPortStartScheduler+0x138>)
 800c632:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c634:	78fb      	ldrb	r3, [r7, #3]
 800c636:	b2db      	uxtb	r3, r3
 800c638:	005b      	lsls	r3, r3, #1
 800c63a:	b2db      	uxtb	r3, r3
 800c63c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c63e:	78fb      	ldrb	r3, [r7, #3]
 800c640:	b2db      	uxtb	r3, r3
 800c642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c646:	2b80      	cmp	r3, #128	@ 0x80
 800c648:	d0ef      	beq.n	800c62a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c64a:	4b27      	ldr	r3, [pc, #156]	@ (800c6e8 <xPortStartScheduler+0x138>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f1c3 0307 	rsb	r3, r3, #7
 800c652:	2b04      	cmp	r3, #4
 800c654:	d00b      	beq.n	800c66e <xPortStartScheduler+0xbe>
	__asm volatile
 800c656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c65a:	f383 8811 	msr	BASEPRI, r3
 800c65e:	f3bf 8f6f 	isb	sy
 800c662:	f3bf 8f4f 	dsb	sy
 800c666:	60bb      	str	r3, [r7, #8]
}
 800c668:	bf00      	nop
 800c66a:	bf00      	nop
 800c66c:	e7fd      	b.n	800c66a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c66e:	4b1e      	ldr	r3, [pc, #120]	@ (800c6e8 <xPortStartScheduler+0x138>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	021b      	lsls	r3, r3, #8
 800c674:	4a1c      	ldr	r2, [pc, #112]	@ (800c6e8 <xPortStartScheduler+0x138>)
 800c676:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c678:	4b1b      	ldr	r3, [pc, #108]	@ (800c6e8 <xPortStartScheduler+0x138>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c680:	4a19      	ldr	r2, [pc, #100]	@ (800c6e8 <xPortStartScheduler+0x138>)
 800c682:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	b2da      	uxtb	r2, r3
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c68c:	4b17      	ldr	r3, [pc, #92]	@ (800c6ec <xPortStartScheduler+0x13c>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4a16      	ldr	r2, [pc, #88]	@ (800c6ec <xPortStartScheduler+0x13c>)
 800c692:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c696:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c698:	4b14      	ldr	r3, [pc, #80]	@ (800c6ec <xPortStartScheduler+0x13c>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	4a13      	ldr	r2, [pc, #76]	@ (800c6ec <xPortStartScheduler+0x13c>)
 800c69e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c6a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c6a4:	f000 f8da 	bl	800c85c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c6a8:	4b11      	ldr	r3, [pc, #68]	@ (800c6f0 <xPortStartScheduler+0x140>)
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c6ae:	f000 f8f9 	bl	800c8a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c6b2:	4b10      	ldr	r3, [pc, #64]	@ (800c6f4 <xPortStartScheduler+0x144>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	4a0f      	ldr	r2, [pc, #60]	@ (800c6f4 <xPortStartScheduler+0x144>)
 800c6b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c6bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c6be:	f7ff ff63 	bl	800c588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c6c2:	f7ff f865 	bl	800b790 <vTaskSwitchContext>
	prvTaskExitError();
 800c6c6:	f7ff ff1d 	bl	800c504 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c6ca:	2300      	movs	r3, #0
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3718      	adds	r7, #24
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	e000ed00 	.word	0xe000ed00
 800c6d8:	410fc271 	.word	0x410fc271
 800c6dc:	410fc270 	.word	0x410fc270
 800c6e0:	e000e400 	.word	0xe000e400
 800c6e4:	200014a0 	.word	0x200014a0
 800c6e8:	200014a4 	.word	0x200014a4
 800c6ec:	e000ed20 	.word	0xe000ed20
 800c6f0:	20000020 	.word	0x20000020
 800c6f4:	e000ef34 	.word	0xe000ef34

0800c6f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b083      	sub	sp, #12
 800c6fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c702:	f383 8811 	msr	BASEPRI, r3
 800c706:	f3bf 8f6f 	isb	sy
 800c70a:	f3bf 8f4f 	dsb	sy
 800c70e:	607b      	str	r3, [r7, #4]
}
 800c710:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c712:	4b10      	ldr	r3, [pc, #64]	@ (800c754 <vPortEnterCritical+0x5c>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	3301      	adds	r3, #1
 800c718:	4a0e      	ldr	r2, [pc, #56]	@ (800c754 <vPortEnterCritical+0x5c>)
 800c71a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c71c:	4b0d      	ldr	r3, [pc, #52]	@ (800c754 <vPortEnterCritical+0x5c>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	2b01      	cmp	r3, #1
 800c722:	d110      	bne.n	800c746 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c724:	4b0c      	ldr	r3, [pc, #48]	@ (800c758 <vPortEnterCritical+0x60>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	b2db      	uxtb	r3, r3
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d00b      	beq.n	800c746 <vPortEnterCritical+0x4e>
	__asm volatile
 800c72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c732:	f383 8811 	msr	BASEPRI, r3
 800c736:	f3bf 8f6f 	isb	sy
 800c73a:	f3bf 8f4f 	dsb	sy
 800c73e:	603b      	str	r3, [r7, #0]
}
 800c740:	bf00      	nop
 800c742:	bf00      	nop
 800c744:	e7fd      	b.n	800c742 <vPortEnterCritical+0x4a>
	}
}
 800c746:	bf00      	nop
 800c748:	370c      	adds	r7, #12
 800c74a:	46bd      	mov	sp, r7
 800c74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c750:	4770      	bx	lr
 800c752:	bf00      	nop
 800c754:	20000020 	.word	0x20000020
 800c758:	e000ed04 	.word	0xe000ed04

0800c75c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c75c:	b480      	push	{r7}
 800c75e:	b083      	sub	sp, #12
 800c760:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c762:	4b12      	ldr	r3, [pc, #72]	@ (800c7ac <vPortExitCritical+0x50>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d10b      	bne.n	800c782 <vPortExitCritical+0x26>
	__asm volatile
 800c76a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c76e:	f383 8811 	msr	BASEPRI, r3
 800c772:	f3bf 8f6f 	isb	sy
 800c776:	f3bf 8f4f 	dsb	sy
 800c77a:	607b      	str	r3, [r7, #4]
}
 800c77c:	bf00      	nop
 800c77e:	bf00      	nop
 800c780:	e7fd      	b.n	800c77e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c782:	4b0a      	ldr	r3, [pc, #40]	@ (800c7ac <vPortExitCritical+0x50>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	3b01      	subs	r3, #1
 800c788:	4a08      	ldr	r2, [pc, #32]	@ (800c7ac <vPortExitCritical+0x50>)
 800c78a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c78c:	4b07      	ldr	r3, [pc, #28]	@ (800c7ac <vPortExitCritical+0x50>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d105      	bne.n	800c7a0 <vPortExitCritical+0x44>
 800c794:	2300      	movs	r3, #0
 800c796:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	f383 8811 	msr	BASEPRI, r3
}
 800c79e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c7a0:	bf00      	nop
 800c7a2:	370c      	adds	r7, #12
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7aa:	4770      	bx	lr
 800c7ac:	20000020 	.word	0x20000020

0800c7b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c7b0:	f3ef 8009 	mrs	r0, PSP
 800c7b4:	f3bf 8f6f 	isb	sy
 800c7b8:	4b15      	ldr	r3, [pc, #84]	@ (800c810 <pxCurrentTCBConst>)
 800c7ba:	681a      	ldr	r2, [r3, #0]
 800c7bc:	f01e 0f10 	tst.w	lr, #16
 800c7c0:	bf08      	it	eq
 800c7c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c7c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ca:	6010      	str	r0, [r2, #0]
 800c7cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c7d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c7d4:	f380 8811 	msr	BASEPRI, r0
 800c7d8:	f3bf 8f4f 	dsb	sy
 800c7dc:	f3bf 8f6f 	isb	sy
 800c7e0:	f7fe ffd6 	bl	800b790 <vTaskSwitchContext>
 800c7e4:	f04f 0000 	mov.w	r0, #0
 800c7e8:	f380 8811 	msr	BASEPRI, r0
 800c7ec:	bc09      	pop	{r0, r3}
 800c7ee:	6819      	ldr	r1, [r3, #0]
 800c7f0:	6808      	ldr	r0, [r1, #0]
 800c7f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7f6:	f01e 0f10 	tst.w	lr, #16
 800c7fa:	bf08      	it	eq
 800c7fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c800:	f380 8809 	msr	PSP, r0
 800c804:	f3bf 8f6f 	isb	sy
 800c808:	4770      	bx	lr
 800c80a:	bf00      	nop
 800c80c:	f3af 8000 	nop.w

0800c810 <pxCurrentTCBConst>:
 800c810:	20000e74 	.word	0x20000e74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c814:	bf00      	nop
 800c816:	bf00      	nop

0800c818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
	__asm volatile
 800c81e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c822:	f383 8811 	msr	BASEPRI, r3
 800c826:	f3bf 8f6f 	isb	sy
 800c82a:	f3bf 8f4f 	dsb	sy
 800c82e:	607b      	str	r3, [r7, #4]
}
 800c830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c832:	f7fe feed 	bl	800b610 <xTaskIncrementTick>
 800c836:	4603      	mov	r3, r0
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d003      	beq.n	800c844 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c83c:	4b06      	ldr	r3, [pc, #24]	@ (800c858 <SysTick_Handler+0x40>)
 800c83e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c842:	601a      	str	r2, [r3, #0]
 800c844:	2300      	movs	r3, #0
 800c846:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	f383 8811 	msr	BASEPRI, r3
}
 800c84e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c850:	bf00      	nop
 800c852:	3708      	adds	r7, #8
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}
 800c858:	e000ed04 	.word	0xe000ed04

0800c85c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c85c:	b480      	push	{r7}
 800c85e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c860:	4b0b      	ldr	r3, [pc, #44]	@ (800c890 <vPortSetupTimerInterrupt+0x34>)
 800c862:	2200      	movs	r2, #0
 800c864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c866:	4b0b      	ldr	r3, [pc, #44]	@ (800c894 <vPortSetupTimerInterrupt+0x38>)
 800c868:	2200      	movs	r2, #0
 800c86a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c86c:	4b0a      	ldr	r3, [pc, #40]	@ (800c898 <vPortSetupTimerInterrupt+0x3c>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	4a0a      	ldr	r2, [pc, #40]	@ (800c89c <vPortSetupTimerInterrupt+0x40>)
 800c872:	fba2 2303 	umull	r2, r3, r2, r3
 800c876:	099b      	lsrs	r3, r3, #6
 800c878:	4a09      	ldr	r2, [pc, #36]	@ (800c8a0 <vPortSetupTimerInterrupt+0x44>)
 800c87a:	3b01      	subs	r3, #1
 800c87c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c87e:	4b04      	ldr	r3, [pc, #16]	@ (800c890 <vPortSetupTimerInterrupt+0x34>)
 800c880:	2207      	movs	r2, #7
 800c882:	601a      	str	r2, [r3, #0]
}
 800c884:	bf00      	nop
 800c886:	46bd      	mov	sp, r7
 800c888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88c:	4770      	bx	lr
 800c88e:	bf00      	nop
 800c890:	e000e010 	.word	0xe000e010
 800c894:	e000e018 	.word	0xe000e018
 800c898:	20000014 	.word	0x20000014
 800c89c:	10624dd3 	.word	0x10624dd3
 800c8a0:	e000e014 	.word	0xe000e014

0800c8a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c8a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c8b4 <vPortEnableVFP+0x10>
 800c8a8:	6801      	ldr	r1, [r0, #0]
 800c8aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c8ae:	6001      	str	r1, [r0, #0]
 800c8b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c8b2:	bf00      	nop
 800c8b4:	e000ed88 	.word	0xe000ed88

0800c8b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b085      	sub	sp, #20
 800c8bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c8be:	f3ef 8305 	mrs	r3, IPSR
 800c8c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	2b0f      	cmp	r3, #15
 800c8c8:	d915      	bls.n	800c8f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c8ca:	4a18      	ldr	r2, [pc, #96]	@ (800c92c <vPortValidateInterruptPriority+0x74>)
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	4413      	add	r3, r2
 800c8d0:	781b      	ldrb	r3, [r3, #0]
 800c8d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c8d4:	4b16      	ldr	r3, [pc, #88]	@ (800c930 <vPortValidateInterruptPriority+0x78>)
 800c8d6:	781b      	ldrb	r3, [r3, #0]
 800c8d8:	7afa      	ldrb	r2, [r7, #11]
 800c8da:	429a      	cmp	r2, r3
 800c8dc:	d20b      	bcs.n	800c8f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8e2:	f383 8811 	msr	BASEPRI, r3
 800c8e6:	f3bf 8f6f 	isb	sy
 800c8ea:	f3bf 8f4f 	dsb	sy
 800c8ee:	607b      	str	r3, [r7, #4]
}
 800c8f0:	bf00      	nop
 800c8f2:	bf00      	nop
 800c8f4:	e7fd      	b.n	800c8f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c8f6:	4b0f      	ldr	r3, [pc, #60]	@ (800c934 <vPortValidateInterruptPriority+0x7c>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c8fe:	4b0e      	ldr	r3, [pc, #56]	@ (800c938 <vPortValidateInterruptPriority+0x80>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	429a      	cmp	r2, r3
 800c904:	d90b      	bls.n	800c91e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c90a:	f383 8811 	msr	BASEPRI, r3
 800c90e:	f3bf 8f6f 	isb	sy
 800c912:	f3bf 8f4f 	dsb	sy
 800c916:	603b      	str	r3, [r7, #0]
}
 800c918:	bf00      	nop
 800c91a:	bf00      	nop
 800c91c:	e7fd      	b.n	800c91a <vPortValidateInterruptPriority+0x62>
	}
 800c91e:	bf00      	nop
 800c920:	3714      	adds	r7, #20
 800c922:	46bd      	mov	sp, r7
 800c924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c928:	4770      	bx	lr
 800c92a:	bf00      	nop
 800c92c:	e000e3f0 	.word	0xe000e3f0
 800c930:	200014a0 	.word	0x200014a0
 800c934:	e000ed0c 	.word	0xe000ed0c
 800c938:	200014a4 	.word	0x200014a4

0800c93c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b08a      	sub	sp, #40	@ 0x28
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c944:	2300      	movs	r3, #0
 800c946:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c948:	f7fe fda6 	bl	800b498 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c94c:	4b5a      	ldr	r3, [pc, #360]	@ (800cab8 <pvPortMalloc+0x17c>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d101      	bne.n	800c958 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c954:	f000 f916 	bl	800cb84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c958:	4b58      	ldr	r3, [pc, #352]	@ (800cabc <pvPortMalloc+0x180>)
 800c95a:	681a      	ldr	r2, [r3, #0]
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	4013      	ands	r3, r2
 800c960:	2b00      	cmp	r3, #0
 800c962:	f040 8090 	bne.w	800ca86 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d01e      	beq.n	800c9aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c96c:	2208      	movs	r2, #8
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	4413      	add	r3, r2
 800c972:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f003 0307 	and.w	r3, r3, #7
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d015      	beq.n	800c9aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f023 0307 	bic.w	r3, r3, #7
 800c984:	3308      	adds	r3, #8
 800c986:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f003 0307 	and.w	r3, r3, #7
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d00b      	beq.n	800c9aa <pvPortMalloc+0x6e>
	__asm volatile
 800c992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c996:	f383 8811 	msr	BASEPRI, r3
 800c99a:	f3bf 8f6f 	isb	sy
 800c99e:	f3bf 8f4f 	dsb	sy
 800c9a2:	617b      	str	r3, [r7, #20]
}
 800c9a4:	bf00      	nop
 800c9a6:	bf00      	nop
 800c9a8:	e7fd      	b.n	800c9a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d06a      	beq.n	800ca86 <pvPortMalloc+0x14a>
 800c9b0:	4b43      	ldr	r3, [pc, #268]	@ (800cac0 <pvPortMalloc+0x184>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	687a      	ldr	r2, [r7, #4]
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	d865      	bhi.n	800ca86 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c9ba:	4b42      	ldr	r3, [pc, #264]	@ (800cac4 <pvPortMalloc+0x188>)
 800c9bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c9be:	4b41      	ldr	r3, [pc, #260]	@ (800cac4 <pvPortMalloc+0x188>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c9c4:	e004      	b.n	800c9d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c9c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9d2:	685b      	ldr	r3, [r3, #4]
 800c9d4:	687a      	ldr	r2, [r7, #4]
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d903      	bls.n	800c9e2 <pvPortMalloc+0xa6>
 800c9da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d1f1      	bne.n	800c9c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c9e2:	4b35      	ldr	r3, [pc, #212]	@ (800cab8 <pvPortMalloc+0x17c>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d04c      	beq.n	800ca86 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c9ec:	6a3b      	ldr	r3, [r7, #32]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	2208      	movs	r2, #8
 800c9f2:	4413      	add	r3, r2
 800c9f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9f8:	681a      	ldr	r2, [r3, #0]
 800c9fa:	6a3b      	ldr	r3, [r7, #32]
 800c9fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c9fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca00:	685a      	ldr	r2, [r3, #4]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	1ad2      	subs	r2, r2, r3
 800ca06:	2308      	movs	r3, #8
 800ca08:	005b      	lsls	r3, r3, #1
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	d920      	bls.n	800ca50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ca0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	4413      	add	r3, r2
 800ca14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca16:	69bb      	ldr	r3, [r7, #24]
 800ca18:	f003 0307 	and.w	r3, r3, #7
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d00b      	beq.n	800ca38 <pvPortMalloc+0xfc>
	__asm volatile
 800ca20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca24:	f383 8811 	msr	BASEPRI, r3
 800ca28:	f3bf 8f6f 	isb	sy
 800ca2c:	f3bf 8f4f 	dsb	sy
 800ca30:	613b      	str	r3, [r7, #16]
}
 800ca32:	bf00      	nop
 800ca34:	bf00      	nop
 800ca36:	e7fd      	b.n	800ca34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ca38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca3a:	685a      	ldr	r2, [r3, #4]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	1ad2      	subs	r2, r2, r3
 800ca40:	69bb      	ldr	r3, [r7, #24]
 800ca42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ca44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca46:	687a      	ldr	r2, [r7, #4]
 800ca48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ca4a:	69b8      	ldr	r0, [r7, #24]
 800ca4c:	f000 f8fc 	bl	800cc48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ca50:	4b1b      	ldr	r3, [pc, #108]	@ (800cac0 <pvPortMalloc+0x184>)
 800ca52:	681a      	ldr	r2, [r3, #0]
 800ca54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	1ad3      	subs	r3, r2, r3
 800ca5a:	4a19      	ldr	r2, [pc, #100]	@ (800cac0 <pvPortMalloc+0x184>)
 800ca5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ca5e:	4b18      	ldr	r3, [pc, #96]	@ (800cac0 <pvPortMalloc+0x184>)
 800ca60:	681a      	ldr	r2, [r3, #0]
 800ca62:	4b19      	ldr	r3, [pc, #100]	@ (800cac8 <pvPortMalloc+0x18c>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	429a      	cmp	r2, r3
 800ca68:	d203      	bcs.n	800ca72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ca6a:	4b15      	ldr	r3, [pc, #84]	@ (800cac0 <pvPortMalloc+0x184>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4a16      	ldr	r2, [pc, #88]	@ (800cac8 <pvPortMalloc+0x18c>)
 800ca70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ca72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca74:	685a      	ldr	r2, [r3, #4]
 800ca76:	4b11      	ldr	r3, [pc, #68]	@ (800cabc <pvPortMalloc+0x180>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	431a      	orrs	r2, r3
 800ca7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ca80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca82:	2200      	movs	r2, #0
 800ca84:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ca86:	f7fe fd15 	bl	800b4b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca8a:	69fb      	ldr	r3, [r7, #28]
 800ca8c:	f003 0307 	and.w	r3, r3, #7
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d00b      	beq.n	800caac <pvPortMalloc+0x170>
	__asm volatile
 800ca94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca98:	f383 8811 	msr	BASEPRI, r3
 800ca9c:	f3bf 8f6f 	isb	sy
 800caa0:	f3bf 8f4f 	dsb	sy
 800caa4:	60fb      	str	r3, [r7, #12]
}
 800caa6:	bf00      	nop
 800caa8:	bf00      	nop
 800caaa:	e7fd      	b.n	800caa8 <pvPortMalloc+0x16c>
	return pvReturn;
 800caac:	69fb      	ldr	r3, [r7, #28]
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3728      	adds	r7, #40	@ 0x28
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}
 800cab6:	bf00      	nop
 800cab8:	200034b0 	.word	0x200034b0
 800cabc:	200034bc 	.word	0x200034bc
 800cac0:	200034b4 	.word	0x200034b4
 800cac4:	200034a8 	.word	0x200034a8
 800cac8:	200034b8 	.word	0x200034b8

0800cacc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b086      	sub	sp, #24
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d04a      	beq.n	800cb74 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cade:	2308      	movs	r3, #8
 800cae0:	425b      	negs	r3, r3
 800cae2:	697a      	ldr	r2, [r7, #20]
 800cae4:	4413      	add	r3, r2
 800cae6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cae8:	697b      	ldr	r3, [r7, #20]
 800caea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	685a      	ldr	r2, [r3, #4]
 800caf0:	4b22      	ldr	r3, [pc, #136]	@ (800cb7c <vPortFree+0xb0>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	4013      	ands	r3, r2
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d10b      	bne.n	800cb12 <vPortFree+0x46>
	__asm volatile
 800cafa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cafe:	f383 8811 	msr	BASEPRI, r3
 800cb02:	f3bf 8f6f 	isb	sy
 800cb06:	f3bf 8f4f 	dsb	sy
 800cb0a:	60fb      	str	r3, [r7, #12]
}
 800cb0c:	bf00      	nop
 800cb0e:	bf00      	nop
 800cb10:	e7fd      	b.n	800cb0e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d00b      	beq.n	800cb32 <vPortFree+0x66>
	__asm volatile
 800cb1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb1e:	f383 8811 	msr	BASEPRI, r3
 800cb22:	f3bf 8f6f 	isb	sy
 800cb26:	f3bf 8f4f 	dsb	sy
 800cb2a:	60bb      	str	r3, [r7, #8]
}
 800cb2c:	bf00      	nop
 800cb2e:	bf00      	nop
 800cb30:	e7fd      	b.n	800cb2e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	685a      	ldr	r2, [r3, #4]
 800cb36:	4b11      	ldr	r3, [pc, #68]	@ (800cb7c <vPortFree+0xb0>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	4013      	ands	r3, r2
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d019      	beq.n	800cb74 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cb40:	693b      	ldr	r3, [r7, #16]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d115      	bne.n	800cb74 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	685a      	ldr	r2, [r3, #4]
 800cb4c:	4b0b      	ldr	r3, [pc, #44]	@ (800cb7c <vPortFree+0xb0>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	43db      	mvns	r3, r3
 800cb52:	401a      	ands	r2, r3
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cb58:	f7fe fc9e 	bl	800b498 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cb5c:	693b      	ldr	r3, [r7, #16]
 800cb5e:	685a      	ldr	r2, [r3, #4]
 800cb60:	4b07      	ldr	r3, [pc, #28]	@ (800cb80 <vPortFree+0xb4>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	4413      	add	r3, r2
 800cb66:	4a06      	ldr	r2, [pc, #24]	@ (800cb80 <vPortFree+0xb4>)
 800cb68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cb6a:	6938      	ldr	r0, [r7, #16]
 800cb6c:	f000 f86c 	bl	800cc48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cb70:	f7fe fca0 	bl	800b4b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cb74:	bf00      	nop
 800cb76:	3718      	adds	r7, #24
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}
 800cb7c:	200034bc 	.word	0x200034bc
 800cb80:	200034b4 	.word	0x200034b4

0800cb84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cb84:	b480      	push	{r7}
 800cb86:	b085      	sub	sp, #20
 800cb88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cb8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cb8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cb90:	4b27      	ldr	r3, [pc, #156]	@ (800cc30 <prvHeapInit+0xac>)
 800cb92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	f003 0307 	and.w	r3, r3, #7
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d00c      	beq.n	800cbb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	3307      	adds	r3, #7
 800cba2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f023 0307 	bic.w	r3, r3, #7
 800cbaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cbac:	68ba      	ldr	r2, [r7, #8]
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	1ad3      	subs	r3, r2, r3
 800cbb2:	4a1f      	ldr	r2, [pc, #124]	@ (800cc30 <prvHeapInit+0xac>)
 800cbb4:	4413      	add	r3, r2
 800cbb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cbbc:	4a1d      	ldr	r2, [pc, #116]	@ (800cc34 <prvHeapInit+0xb0>)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cbc2:	4b1c      	ldr	r3, [pc, #112]	@ (800cc34 <prvHeapInit+0xb0>)
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	68ba      	ldr	r2, [r7, #8]
 800cbcc:	4413      	add	r3, r2
 800cbce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cbd0:	2208      	movs	r2, #8
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	1a9b      	subs	r3, r3, r2
 800cbd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f023 0307 	bic.w	r3, r3, #7
 800cbde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	4a15      	ldr	r2, [pc, #84]	@ (800cc38 <prvHeapInit+0xb4>)
 800cbe4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cbe6:	4b14      	ldr	r3, [pc, #80]	@ (800cc38 <prvHeapInit+0xb4>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	2200      	movs	r2, #0
 800cbec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cbee:	4b12      	ldr	r3, [pc, #72]	@ (800cc38 <prvHeapInit+0xb4>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	68fa      	ldr	r2, [r7, #12]
 800cbfe:	1ad2      	subs	r2, r2, r3
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cc04:	4b0c      	ldr	r3, [pc, #48]	@ (800cc38 <prvHeapInit+0xb4>)
 800cc06:	681a      	ldr	r2, [r3, #0]
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	685b      	ldr	r3, [r3, #4]
 800cc10:	4a0a      	ldr	r2, [pc, #40]	@ (800cc3c <prvHeapInit+0xb8>)
 800cc12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	685b      	ldr	r3, [r3, #4]
 800cc18:	4a09      	ldr	r2, [pc, #36]	@ (800cc40 <prvHeapInit+0xbc>)
 800cc1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cc1c:	4b09      	ldr	r3, [pc, #36]	@ (800cc44 <prvHeapInit+0xc0>)
 800cc1e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cc22:	601a      	str	r2, [r3, #0]
}
 800cc24:	bf00      	nop
 800cc26:	3714      	adds	r7, #20
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2e:	4770      	bx	lr
 800cc30:	200014a8 	.word	0x200014a8
 800cc34:	200034a8 	.word	0x200034a8
 800cc38:	200034b0 	.word	0x200034b0
 800cc3c:	200034b8 	.word	0x200034b8
 800cc40:	200034b4 	.word	0x200034b4
 800cc44:	200034bc 	.word	0x200034bc

0800cc48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b085      	sub	sp, #20
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cc50:	4b28      	ldr	r3, [pc, #160]	@ (800ccf4 <prvInsertBlockIntoFreeList+0xac>)
 800cc52:	60fb      	str	r3, [r7, #12]
 800cc54:	e002      	b.n	800cc5c <prvInsertBlockIntoFreeList+0x14>
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	60fb      	str	r3, [r7, #12]
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	687a      	ldr	r2, [r7, #4]
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d8f7      	bhi.n	800cc56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	685b      	ldr	r3, [r3, #4]
 800cc6e:	68ba      	ldr	r2, [r7, #8]
 800cc70:	4413      	add	r3, r2
 800cc72:	687a      	ldr	r2, [r7, #4]
 800cc74:	429a      	cmp	r2, r3
 800cc76:	d108      	bne.n	800cc8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	685a      	ldr	r2, [r3, #4]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	685b      	ldr	r3, [r3, #4]
 800cc80:	441a      	add	r2, r3
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	685b      	ldr	r3, [r3, #4]
 800cc92:	68ba      	ldr	r2, [r7, #8]
 800cc94:	441a      	add	r2, r3
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d118      	bne.n	800ccd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	681a      	ldr	r2, [r3, #0]
 800cca2:	4b15      	ldr	r3, [pc, #84]	@ (800ccf8 <prvInsertBlockIntoFreeList+0xb0>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d00d      	beq.n	800ccc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	685a      	ldr	r2, [r3, #4]
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	685b      	ldr	r3, [r3, #4]
 800ccb4:	441a      	add	r2, r3
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	681a      	ldr	r2, [r3, #0]
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	601a      	str	r2, [r3, #0]
 800ccc4:	e008      	b.n	800ccd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ccc6:	4b0c      	ldr	r3, [pc, #48]	@ (800ccf8 <prvInsertBlockIntoFreeList+0xb0>)
 800ccc8:	681a      	ldr	r2, [r3, #0]
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	601a      	str	r2, [r3, #0]
 800ccce:	e003      	b.n	800ccd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681a      	ldr	r2, [r3, #0]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ccd8:	68fa      	ldr	r2, [r7, #12]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d002      	beq.n	800cce6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	687a      	ldr	r2, [r7, #4]
 800cce4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cce6:	bf00      	nop
 800cce8:	3714      	adds	r7, #20
 800ccea:	46bd      	mov	sp, r7
 800ccec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf0:	4770      	bx	lr
 800ccf2:	bf00      	nop
 800ccf4:	200034a8 	.word	0x200034a8
 800ccf8:	200034b0 	.word	0x200034b0

0800ccfc <__cvt>:
 800ccfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd00:	ec57 6b10 	vmov	r6, r7, d0
 800cd04:	2f00      	cmp	r7, #0
 800cd06:	460c      	mov	r4, r1
 800cd08:	4619      	mov	r1, r3
 800cd0a:	463b      	mov	r3, r7
 800cd0c:	bfbb      	ittet	lt
 800cd0e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cd12:	461f      	movlt	r7, r3
 800cd14:	2300      	movge	r3, #0
 800cd16:	232d      	movlt	r3, #45	@ 0x2d
 800cd18:	700b      	strb	r3, [r1, #0]
 800cd1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cd1c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cd20:	4691      	mov	r9, r2
 800cd22:	f023 0820 	bic.w	r8, r3, #32
 800cd26:	bfbc      	itt	lt
 800cd28:	4632      	movlt	r2, r6
 800cd2a:	4616      	movlt	r6, r2
 800cd2c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cd30:	d005      	beq.n	800cd3e <__cvt+0x42>
 800cd32:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cd36:	d100      	bne.n	800cd3a <__cvt+0x3e>
 800cd38:	3401      	adds	r4, #1
 800cd3a:	2102      	movs	r1, #2
 800cd3c:	e000      	b.n	800cd40 <__cvt+0x44>
 800cd3e:	2103      	movs	r1, #3
 800cd40:	ab03      	add	r3, sp, #12
 800cd42:	9301      	str	r3, [sp, #4]
 800cd44:	ab02      	add	r3, sp, #8
 800cd46:	9300      	str	r3, [sp, #0]
 800cd48:	ec47 6b10 	vmov	d0, r6, r7
 800cd4c:	4653      	mov	r3, sl
 800cd4e:	4622      	mov	r2, r4
 800cd50:	f001 f8f2 	bl	800df38 <_dtoa_r>
 800cd54:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cd58:	4605      	mov	r5, r0
 800cd5a:	d119      	bne.n	800cd90 <__cvt+0x94>
 800cd5c:	f019 0f01 	tst.w	r9, #1
 800cd60:	d00e      	beq.n	800cd80 <__cvt+0x84>
 800cd62:	eb00 0904 	add.w	r9, r0, r4
 800cd66:	2200      	movs	r2, #0
 800cd68:	2300      	movs	r3, #0
 800cd6a:	4630      	mov	r0, r6
 800cd6c:	4639      	mov	r1, r7
 800cd6e:	f7f3 feb3 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd72:	b108      	cbz	r0, 800cd78 <__cvt+0x7c>
 800cd74:	f8cd 900c 	str.w	r9, [sp, #12]
 800cd78:	2230      	movs	r2, #48	@ 0x30
 800cd7a:	9b03      	ldr	r3, [sp, #12]
 800cd7c:	454b      	cmp	r3, r9
 800cd7e:	d31e      	bcc.n	800cdbe <__cvt+0xc2>
 800cd80:	9b03      	ldr	r3, [sp, #12]
 800cd82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd84:	1b5b      	subs	r3, r3, r5
 800cd86:	4628      	mov	r0, r5
 800cd88:	6013      	str	r3, [r2, #0]
 800cd8a:	b004      	add	sp, #16
 800cd8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd90:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cd94:	eb00 0904 	add.w	r9, r0, r4
 800cd98:	d1e5      	bne.n	800cd66 <__cvt+0x6a>
 800cd9a:	7803      	ldrb	r3, [r0, #0]
 800cd9c:	2b30      	cmp	r3, #48	@ 0x30
 800cd9e:	d10a      	bne.n	800cdb6 <__cvt+0xba>
 800cda0:	2200      	movs	r2, #0
 800cda2:	2300      	movs	r3, #0
 800cda4:	4630      	mov	r0, r6
 800cda6:	4639      	mov	r1, r7
 800cda8:	f7f3 fe96 	bl	8000ad8 <__aeabi_dcmpeq>
 800cdac:	b918      	cbnz	r0, 800cdb6 <__cvt+0xba>
 800cdae:	f1c4 0401 	rsb	r4, r4, #1
 800cdb2:	f8ca 4000 	str.w	r4, [sl]
 800cdb6:	f8da 3000 	ldr.w	r3, [sl]
 800cdba:	4499      	add	r9, r3
 800cdbc:	e7d3      	b.n	800cd66 <__cvt+0x6a>
 800cdbe:	1c59      	adds	r1, r3, #1
 800cdc0:	9103      	str	r1, [sp, #12]
 800cdc2:	701a      	strb	r2, [r3, #0]
 800cdc4:	e7d9      	b.n	800cd7a <__cvt+0x7e>

0800cdc6 <__exponent>:
 800cdc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdc8:	2900      	cmp	r1, #0
 800cdca:	bfba      	itte	lt
 800cdcc:	4249      	neglt	r1, r1
 800cdce:	232d      	movlt	r3, #45	@ 0x2d
 800cdd0:	232b      	movge	r3, #43	@ 0x2b
 800cdd2:	2909      	cmp	r1, #9
 800cdd4:	7002      	strb	r2, [r0, #0]
 800cdd6:	7043      	strb	r3, [r0, #1]
 800cdd8:	dd29      	ble.n	800ce2e <__exponent+0x68>
 800cdda:	f10d 0307 	add.w	r3, sp, #7
 800cdde:	461d      	mov	r5, r3
 800cde0:	270a      	movs	r7, #10
 800cde2:	461a      	mov	r2, r3
 800cde4:	fbb1 f6f7 	udiv	r6, r1, r7
 800cde8:	fb07 1416 	mls	r4, r7, r6, r1
 800cdec:	3430      	adds	r4, #48	@ 0x30
 800cdee:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cdf2:	460c      	mov	r4, r1
 800cdf4:	2c63      	cmp	r4, #99	@ 0x63
 800cdf6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800cdfa:	4631      	mov	r1, r6
 800cdfc:	dcf1      	bgt.n	800cde2 <__exponent+0x1c>
 800cdfe:	3130      	adds	r1, #48	@ 0x30
 800ce00:	1e94      	subs	r4, r2, #2
 800ce02:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ce06:	1c41      	adds	r1, r0, #1
 800ce08:	4623      	mov	r3, r4
 800ce0a:	42ab      	cmp	r3, r5
 800ce0c:	d30a      	bcc.n	800ce24 <__exponent+0x5e>
 800ce0e:	f10d 0309 	add.w	r3, sp, #9
 800ce12:	1a9b      	subs	r3, r3, r2
 800ce14:	42ac      	cmp	r4, r5
 800ce16:	bf88      	it	hi
 800ce18:	2300      	movhi	r3, #0
 800ce1a:	3302      	adds	r3, #2
 800ce1c:	4403      	add	r3, r0
 800ce1e:	1a18      	subs	r0, r3, r0
 800ce20:	b003      	add	sp, #12
 800ce22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce24:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ce28:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ce2c:	e7ed      	b.n	800ce0a <__exponent+0x44>
 800ce2e:	2330      	movs	r3, #48	@ 0x30
 800ce30:	3130      	adds	r1, #48	@ 0x30
 800ce32:	7083      	strb	r3, [r0, #2]
 800ce34:	70c1      	strb	r1, [r0, #3]
 800ce36:	1d03      	adds	r3, r0, #4
 800ce38:	e7f1      	b.n	800ce1e <__exponent+0x58>
	...

0800ce3c <_printf_float>:
 800ce3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce40:	b08d      	sub	sp, #52	@ 0x34
 800ce42:	460c      	mov	r4, r1
 800ce44:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ce48:	4616      	mov	r6, r2
 800ce4a:	461f      	mov	r7, r3
 800ce4c:	4605      	mov	r5, r0
 800ce4e:	f000 ff09 	bl	800dc64 <_localeconv_r>
 800ce52:	6803      	ldr	r3, [r0, #0]
 800ce54:	9304      	str	r3, [sp, #16]
 800ce56:	4618      	mov	r0, r3
 800ce58:	f7f3 fa12 	bl	8000280 <strlen>
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce60:	f8d8 3000 	ldr.w	r3, [r8]
 800ce64:	9005      	str	r0, [sp, #20]
 800ce66:	3307      	adds	r3, #7
 800ce68:	f023 0307 	bic.w	r3, r3, #7
 800ce6c:	f103 0208 	add.w	r2, r3, #8
 800ce70:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ce74:	f8d4 b000 	ldr.w	fp, [r4]
 800ce78:	f8c8 2000 	str.w	r2, [r8]
 800ce7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ce80:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ce84:	9307      	str	r3, [sp, #28]
 800ce86:	f8cd 8018 	str.w	r8, [sp, #24]
 800ce8a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ce8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce92:	4b9c      	ldr	r3, [pc, #624]	@ (800d104 <_printf_float+0x2c8>)
 800ce94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ce98:	f7f3 fe50 	bl	8000b3c <__aeabi_dcmpun>
 800ce9c:	bb70      	cbnz	r0, 800cefc <_printf_float+0xc0>
 800ce9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cea2:	4b98      	ldr	r3, [pc, #608]	@ (800d104 <_printf_float+0x2c8>)
 800cea4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cea8:	f7f3 fe2a 	bl	8000b00 <__aeabi_dcmple>
 800ceac:	bb30      	cbnz	r0, 800cefc <_printf_float+0xc0>
 800ceae:	2200      	movs	r2, #0
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	4640      	mov	r0, r8
 800ceb4:	4649      	mov	r1, r9
 800ceb6:	f7f3 fe19 	bl	8000aec <__aeabi_dcmplt>
 800ceba:	b110      	cbz	r0, 800cec2 <_printf_float+0x86>
 800cebc:	232d      	movs	r3, #45	@ 0x2d
 800cebe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cec2:	4a91      	ldr	r2, [pc, #580]	@ (800d108 <_printf_float+0x2cc>)
 800cec4:	4b91      	ldr	r3, [pc, #580]	@ (800d10c <_printf_float+0x2d0>)
 800cec6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ceca:	bf94      	ite	ls
 800cecc:	4690      	movls	r8, r2
 800cece:	4698      	movhi	r8, r3
 800ced0:	2303      	movs	r3, #3
 800ced2:	6123      	str	r3, [r4, #16]
 800ced4:	f02b 0304 	bic.w	r3, fp, #4
 800ced8:	6023      	str	r3, [r4, #0]
 800ceda:	f04f 0900 	mov.w	r9, #0
 800cede:	9700      	str	r7, [sp, #0]
 800cee0:	4633      	mov	r3, r6
 800cee2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cee4:	4621      	mov	r1, r4
 800cee6:	4628      	mov	r0, r5
 800cee8:	f000 f9d2 	bl	800d290 <_printf_common>
 800ceec:	3001      	adds	r0, #1
 800ceee:	f040 808d 	bne.w	800d00c <_printf_float+0x1d0>
 800cef2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cef6:	b00d      	add	sp, #52	@ 0x34
 800cef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cefc:	4642      	mov	r2, r8
 800cefe:	464b      	mov	r3, r9
 800cf00:	4640      	mov	r0, r8
 800cf02:	4649      	mov	r1, r9
 800cf04:	f7f3 fe1a 	bl	8000b3c <__aeabi_dcmpun>
 800cf08:	b140      	cbz	r0, 800cf1c <_printf_float+0xe0>
 800cf0a:	464b      	mov	r3, r9
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	bfbc      	itt	lt
 800cf10:	232d      	movlt	r3, #45	@ 0x2d
 800cf12:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cf16:	4a7e      	ldr	r2, [pc, #504]	@ (800d110 <_printf_float+0x2d4>)
 800cf18:	4b7e      	ldr	r3, [pc, #504]	@ (800d114 <_printf_float+0x2d8>)
 800cf1a:	e7d4      	b.n	800cec6 <_printf_float+0x8a>
 800cf1c:	6863      	ldr	r3, [r4, #4]
 800cf1e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cf22:	9206      	str	r2, [sp, #24]
 800cf24:	1c5a      	adds	r2, r3, #1
 800cf26:	d13b      	bne.n	800cfa0 <_printf_float+0x164>
 800cf28:	2306      	movs	r3, #6
 800cf2a:	6063      	str	r3, [r4, #4]
 800cf2c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800cf30:	2300      	movs	r3, #0
 800cf32:	6022      	str	r2, [r4, #0]
 800cf34:	9303      	str	r3, [sp, #12]
 800cf36:	ab0a      	add	r3, sp, #40	@ 0x28
 800cf38:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cf3c:	ab09      	add	r3, sp, #36	@ 0x24
 800cf3e:	9300      	str	r3, [sp, #0]
 800cf40:	6861      	ldr	r1, [r4, #4]
 800cf42:	ec49 8b10 	vmov	d0, r8, r9
 800cf46:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cf4a:	4628      	mov	r0, r5
 800cf4c:	f7ff fed6 	bl	800ccfc <__cvt>
 800cf50:	9b06      	ldr	r3, [sp, #24]
 800cf52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cf54:	2b47      	cmp	r3, #71	@ 0x47
 800cf56:	4680      	mov	r8, r0
 800cf58:	d129      	bne.n	800cfae <_printf_float+0x172>
 800cf5a:	1cc8      	adds	r0, r1, #3
 800cf5c:	db02      	blt.n	800cf64 <_printf_float+0x128>
 800cf5e:	6863      	ldr	r3, [r4, #4]
 800cf60:	4299      	cmp	r1, r3
 800cf62:	dd41      	ble.n	800cfe8 <_printf_float+0x1ac>
 800cf64:	f1aa 0a02 	sub.w	sl, sl, #2
 800cf68:	fa5f fa8a 	uxtb.w	sl, sl
 800cf6c:	3901      	subs	r1, #1
 800cf6e:	4652      	mov	r2, sl
 800cf70:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cf74:	9109      	str	r1, [sp, #36]	@ 0x24
 800cf76:	f7ff ff26 	bl	800cdc6 <__exponent>
 800cf7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cf7c:	1813      	adds	r3, r2, r0
 800cf7e:	2a01      	cmp	r2, #1
 800cf80:	4681      	mov	r9, r0
 800cf82:	6123      	str	r3, [r4, #16]
 800cf84:	dc02      	bgt.n	800cf8c <_printf_float+0x150>
 800cf86:	6822      	ldr	r2, [r4, #0]
 800cf88:	07d2      	lsls	r2, r2, #31
 800cf8a:	d501      	bpl.n	800cf90 <_printf_float+0x154>
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	6123      	str	r3, [r4, #16]
 800cf90:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d0a2      	beq.n	800cede <_printf_float+0xa2>
 800cf98:	232d      	movs	r3, #45	@ 0x2d
 800cf9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cf9e:	e79e      	b.n	800cede <_printf_float+0xa2>
 800cfa0:	9a06      	ldr	r2, [sp, #24]
 800cfa2:	2a47      	cmp	r2, #71	@ 0x47
 800cfa4:	d1c2      	bne.n	800cf2c <_printf_float+0xf0>
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d1c0      	bne.n	800cf2c <_printf_float+0xf0>
 800cfaa:	2301      	movs	r3, #1
 800cfac:	e7bd      	b.n	800cf2a <_printf_float+0xee>
 800cfae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cfb2:	d9db      	bls.n	800cf6c <_printf_float+0x130>
 800cfb4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cfb8:	d118      	bne.n	800cfec <_printf_float+0x1b0>
 800cfba:	2900      	cmp	r1, #0
 800cfbc:	6863      	ldr	r3, [r4, #4]
 800cfbe:	dd0b      	ble.n	800cfd8 <_printf_float+0x19c>
 800cfc0:	6121      	str	r1, [r4, #16]
 800cfc2:	b913      	cbnz	r3, 800cfca <_printf_float+0x18e>
 800cfc4:	6822      	ldr	r2, [r4, #0]
 800cfc6:	07d0      	lsls	r0, r2, #31
 800cfc8:	d502      	bpl.n	800cfd0 <_printf_float+0x194>
 800cfca:	3301      	adds	r3, #1
 800cfcc:	440b      	add	r3, r1
 800cfce:	6123      	str	r3, [r4, #16]
 800cfd0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cfd2:	f04f 0900 	mov.w	r9, #0
 800cfd6:	e7db      	b.n	800cf90 <_printf_float+0x154>
 800cfd8:	b913      	cbnz	r3, 800cfe0 <_printf_float+0x1a4>
 800cfda:	6822      	ldr	r2, [r4, #0]
 800cfdc:	07d2      	lsls	r2, r2, #31
 800cfde:	d501      	bpl.n	800cfe4 <_printf_float+0x1a8>
 800cfe0:	3302      	adds	r3, #2
 800cfe2:	e7f4      	b.n	800cfce <_printf_float+0x192>
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	e7f2      	b.n	800cfce <_printf_float+0x192>
 800cfe8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cfec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cfee:	4299      	cmp	r1, r3
 800cff0:	db05      	blt.n	800cffe <_printf_float+0x1c2>
 800cff2:	6823      	ldr	r3, [r4, #0]
 800cff4:	6121      	str	r1, [r4, #16]
 800cff6:	07d8      	lsls	r0, r3, #31
 800cff8:	d5ea      	bpl.n	800cfd0 <_printf_float+0x194>
 800cffa:	1c4b      	adds	r3, r1, #1
 800cffc:	e7e7      	b.n	800cfce <_printf_float+0x192>
 800cffe:	2900      	cmp	r1, #0
 800d000:	bfd4      	ite	le
 800d002:	f1c1 0202 	rsble	r2, r1, #2
 800d006:	2201      	movgt	r2, #1
 800d008:	4413      	add	r3, r2
 800d00a:	e7e0      	b.n	800cfce <_printf_float+0x192>
 800d00c:	6823      	ldr	r3, [r4, #0]
 800d00e:	055a      	lsls	r2, r3, #21
 800d010:	d407      	bmi.n	800d022 <_printf_float+0x1e6>
 800d012:	6923      	ldr	r3, [r4, #16]
 800d014:	4642      	mov	r2, r8
 800d016:	4631      	mov	r1, r6
 800d018:	4628      	mov	r0, r5
 800d01a:	47b8      	blx	r7
 800d01c:	3001      	adds	r0, #1
 800d01e:	d12b      	bne.n	800d078 <_printf_float+0x23c>
 800d020:	e767      	b.n	800cef2 <_printf_float+0xb6>
 800d022:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d026:	f240 80dd 	bls.w	800d1e4 <_printf_float+0x3a8>
 800d02a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d02e:	2200      	movs	r2, #0
 800d030:	2300      	movs	r3, #0
 800d032:	f7f3 fd51 	bl	8000ad8 <__aeabi_dcmpeq>
 800d036:	2800      	cmp	r0, #0
 800d038:	d033      	beq.n	800d0a2 <_printf_float+0x266>
 800d03a:	4a37      	ldr	r2, [pc, #220]	@ (800d118 <_printf_float+0x2dc>)
 800d03c:	2301      	movs	r3, #1
 800d03e:	4631      	mov	r1, r6
 800d040:	4628      	mov	r0, r5
 800d042:	47b8      	blx	r7
 800d044:	3001      	adds	r0, #1
 800d046:	f43f af54 	beq.w	800cef2 <_printf_float+0xb6>
 800d04a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d04e:	4543      	cmp	r3, r8
 800d050:	db02      	blt.n	800d058 <_printf_float+0x21c>
 800d052:	6823      	ldr	r3, [r4, #0]
 800d054:	07d8      	lsls	r0, r3, #31
 800d056:	d50f      	bpl.n	800d078 <_printf_float+0x23c>
 800d058:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d05c:	4631      	mov	r1, r6
 800d05e:	4628      	mov	r0, r5
 800d060:	47b8      	blx	r7
 800d062:	3001      	adds	r0, #1
 800d064:	f43f af45 	beq.w	800cef2 <_printf_float+0xb6>
 800d068:	f04f 0900 	mov.w	r9, #0
 800d06c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800d070:	f104 0a1a 	add.w	sl, r4, #26
 800d074:	45c8      	cmp	r8, r9
 800d076:	dc09      	bgt.n	800d08c <_printf_float+0x250>
 800d078:	6823      	ldr	r3, [r4, #0]
 800d07a:	079b      	lsls	r3, r3, #30
 800d07c:	f100 8103 	bmi.w	800d286 <_printf_float+0x44a>
 800d080:	68e0      	ldr	r0, [r4, #12]
 800d082:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d084:	4298      	cmp	r0, r3
 800d086:	bfb8      	it	lt
 800d088:	4618      	movlt	r0, r3
 800d08a:	e734      	b.n	800cef6 <_printf_float+0xba>
 800d08c:	2301      	movs	r3, #1
 800d08e:	4652      	mov	r2, sl
 800d090:	4631      	mov	r1, r6
 800d092:	4628      	mov	r0, r5
 800d094:	47b8      	blx	r7
 800d096:	3001      	adds	r0, #1
 800d098:	f43f af2b 	beq.w	800cef2 <_printf_float+0xb6>
 800d09c:	f109 0901 	add.w	r9, r9, #1
 800d0a0:	e7e8      	b.n	800d074 <_printf_float+0x238>
 800d0a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	dc39      	bgt.n	800d11c <_printf_float+0x2e0>
 800d0a8:	4a1b      	ldr	r2, [pc, #108]	@ (800d118 <_printf_float+0x2dc>)
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	4631      	mov	r1, r6
 800d0ae:	4628      	mov	r0, r5
 800d0b0:	47b8      	blx	r7
 800d0b2:	3001      	adds	r0, #1
 800d0b4:	f43f af1d 	beq.w	800cef2 <_printf_float+0xb6>
 800d0b8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d0bc:	ea59 0303 	orrs.w	r3, r9, r3
 800d0c0:	d102      	bne.n	800d0c8 <_printf_float+0x28c>
 800d0c2:	6823      	ldr	r3, [r4, #0]
 800d0c4:	07d9      	lsls	r1, r3, #31
 800d0c6:	d5d7      	bpl.n	800d078 <_printf_float+0x23c>
 800d0c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d0cc:	4631      	mov	r1, r6
 800d0ce:	4628      	mov	r0, r5
 800d0d0:	47b8      	blx	r7
 800d0d2:	3001      	adds	r0, #1
 800d0d4:	f43f af0d 	beq.w	800cef2 <_printf_float+0xb6>
 800d0d8:	f04f 0a00 	mov.w	sl, #0
 800d0dc:	f104 0b1a 	add.w	fp, r4, #26
 800d0e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0e2:	425b      	negs	r3, r3
 800d0e4:	4553      	cmp	r3, sl
 800d0e6:	dc01      	bgt.n	800d0ec <_printf_float+0x2b0>
 800d0e8:	464b      	mov	r3, r9
 800d0ea:	e793      	b.n	800d014 <_printf_float+0x1d8>
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	465a      	mov	r2, fp
 800d0f0:	4631      	mov	r1, r6
 800d0f2:	4628      	mov	r0, r5
 800d0f4:	47b8      	blx	r7
 800d0f6:	3001      	adds	r0, #1
 800d0f8:	f43f aefb 	beq.w	800cef2 <_printf_float+0xb6>
 800d0fc:	f10a 0a01 	add.w	sl, sl, #1
 800d100:	e7ee      	b.n	800d0e0 <_printf_float+0x2a4>
 800d102:	bf00      	nop
 800d104:	7fefffff 	.word	0x7fefffff
 800d108:	08013b04 	.word	0x08013b04
 800d10c:	08013b08 	.word	0x08013b08
 800d110:	08013b0c 	.word	0x08013b0c
 800d114:	08013b10 	.word	0x08013b10
 800d118:	08013b14 	.word	0x08013b14
 800d11c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d11e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d122:	4553      	cmp	r3, sl
 800d124:	bfa8      	it	ge
 800d126:	4653      	movge	r3, sl
 800d128:	2b00      	cmp	r3, #0
 800d12a:	4699      	mov	r9, r3
 800d12c:	dc36      	bgt.n	800d19c <_printf_float+0x360>
 800d12e:	f04f 0b00 	mov.w	fp, #0
 800d132:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d136:	f104 021a 	add.w	r2, r4, #26
 800d13a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d13c:	9306      	str	r3, [sp, #24]
 800d13e:	eba3 0309 	sub.w	r3, r3, r9
 800d142:	455b      	cmp	r3, fp
 800d144:	dc31      	bgt.n	800d1aa <_printf_float+0x36e>
 800d146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d148:	459a      	cmp	sl, r3
 800d14a:	dc3a      	bgt.n	800d1c2 <_printf_float+0x386>
 800d14c:	6823      	ldr	r3, [r4, #0]
 800d14e:	07da      	lsls	r2, r3, #31
 800d150:	d437      	bmi.n	800d1c2 <_printf_float+0x386>
 800d152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d154:	ebaa 0903 	sub.w	r9, sl, r3
 800d158:	9b06      	ldr	r3, [sp, #24]
 800d15a:	ebaa 0303 	sub.w	r3, sl, r3
 800d15e:	4599      	cmp	r9, r3
 800d160:	bfa8      	it	ge
 800d162:	4699      	movge	r9, r3
 800d164:	f1b9 0f00 	cmp.w	r9, #0
 800d168:	dc33      	bgt.n	800d1d2 <_printf_float+0x396>
 800d16a:	f04f 0800 	mov.w	r8, #0
 800d16e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d172:	f104 0b1a 	add.w	fp, r4, #26
 800d176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d178:	ebaa 0303 	sub.w	r3, sl, r3
 800d17c:	eba3 0309 	sub.w	r3, r3, r9
 800d180:	4543      	cmp	r3, r8
 800d182:	f77f af79 	ble.w	800d078 <_printf_float+0x23c>
 800d186:	2301      	movs	r3, #1
 800d188:	465a      	mov	r2, fp
 800d18a:	4631      	mov	r1, r6
 800d18c:	4628      	mov	r0, r5
 800d18e:	47b8      	blx	r7
 800d190:	3001      	adds	r0, #1
 800d192:	f43f aeae 	beq.w	800cef2 <_printf_float+0xb6>
 800d196:	f108 0801 	add.w	r8, r8, #1
 800d19a:	e7ec      	b.n	800d176 <_printf_float+0x33a>
 800d19c:	4642      	mov	r2, r8
 800d19e:	4631      	mov	r1, r6
 800d1a0:	4628      	mov	r0, r5
 800d1a2:	47b8      	blx	r7
 800d1a4:	3001      	adds	r0, #1
 800d1a6:	d1c2      	bne.n	800d12e <_printf_float+0x2f2>
 800d1a8:	e6a3      	b.n	800cef2 <_printf_float+0xb6>
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	4631      	mov	r1, r6
 800d1ae:	4628      	mov	r0, r5
 800d1b0:	9206      	str	r2, [sp, #24]
 800d1b2:	47b8      	blx	r7
 800d1b4:	3001      	adds	r0, #1
 800d1b6:	f43f ae9c 	beq.w	800cef2 <_printf_float+0xb6>
 800d1ba:	9a06      	ldr	r2, [sp, #24]
 800d1bc:	f10b 0b01 	add.w	fp, fp, #1
 800d1c0:	e7bb      	b.n	800d13a <_printf_float+0x2fe>
 800d1c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d1c6:	4631      	mov	r1, r6
 800d1c8:	4628      	mov	r0, r5
 800d1ca:	47b8      	blx	r7
 800d1cc:	3001      	adds	r0, #1
 800d1ce:	d1c0      	bne.n	800d152 <_printf_float+0x316>
 800d1d0:	e68f      	b.n	800cef2 <_printf_float+0xb6>
 800d1d2:	9a06      	ldr	r2, [sp, #24]
 800d1d4:	464b      	mov	r3, r9
 800d1d6:	4442      	add	r2, r8
 800d1d8:	4631      	mov	r1, r6
 800d1da:	4628      	mov	r0, r5
 800d1dc:	47b8      	blx	r7
 800d1de:	3001      	adds	r0, #1
 800d1e0:	d1c3      	bne.n	800d16a <_printf_float+0x32e>
 800d1e2:	e686      	b.n	800cef2 <_printf_float+0xb6>
 800d1e4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d1e8:	f1ba 0f01 	cmp.w	sl, #1
 800d1ec:	dc01      	bgt.n	800d1f2 <_printf_float+0x3b6>
 800d1ee:	07db      	lsls	r3, r3, #31
 800d1f0:	d536      	bpl.n	800d260 <_printf_float+0x424>
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	4642      	mov	r2, r8
 800d1f6:	4631      	mov	r1, r6
 800d1f8:	4628      	mov	r0, r5
 800d1fa:	47b8      	blx	r7
 800d1fc:	3001      	adds	r0, #1
 800d1fe:	f43f ae78 	beq.w	800cef2 <_printf_float+0xb6>
 800d202:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d206:	4631      	mov	r1, r6
 800d208:	4628      	mov	r0, r5
 800d20a:	47b8      	blx	r7
 800d20c:	3001      	adds	r0, #1
 800d20e:	f43f ae70 	beq.w	800cef2 <_printf_float+0xb6>
 800d212:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d216:	2200      	movs	r2, #0
 800d218:	2300      	movs	r3, #0
 800d21a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800d21e:	f7f3 fc5b 	bl	8000ad8 <__aeabi_dcmpeq>
 800d222:	b9c0      	cbnz	r0, 800d256 <_printf_float+0x41a>
 800d224:	4653      	mov	r3, sl
 800d226:	f108 0201 	add.w	r2, r8, #1
 800d22a:	4631      	mov	r1, r6
 800d22c:	4628      	mov	r0, r5
 800d22e:	47b8      	blx	r7
 800d230:	3001      	adds	r0, #1
 800d232:	d10c      	bne.n	800d24e <_printf_float+0x412>
 800d234:	e65d      	b.n	800cef2 <_printf_float+0xb6>
 800d236:	2301      	movs	r3, #1
 800d238:	465a      	mov	r2, fp
 800d23a:	4631      	mov	r1, r6
 800d23c:	4628      	mov	r0, r5
 800d23e:	47b8      	blx	r7
 800d240:	3001      	adds	r0, #1
 800d242:	f43f ae56 	beq.w	800cef2 <_printf_float+0xb6>
 800d246:	f108 0801 	add.w	r8, r8, #1
 800d24a:	45d0      	cmp	r8, sl
 800d24c:	dbf3      	blt.n	800d236 <_printf_float+0x3fa>
 800d24e:	464b      	mov	r3, r9
 800d250:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d254:	e6df      	b.n	800d016 <_printf_float+0x1da>
 800d256:	f04f 0800 	mov.w	r8, #0
 800d25a:	f104 0b1a 	add.w	fp, r4, #26
 800d25e:	e7f4      	b.n	800d24a <_printf_float+0x40e>
 800d260:	2301      	movs	r3, #1
 800d262:	4642      	mov	r2, r8
 800d264:	e7e1      	b.n	800d22a <_printf_float+0x3ee>
 800d266:	2301      	movs	r3, #1
 800d268:	464a      	mov	r2, r9
 800d26a:	4631      	mov	r1, r6
 800d26c:	4628      	mov	r0, r5
 800d26e:	47b8      	blx	r7
 800d270:	3001      	adds	r0, #1
 800d272:	f43f ae3e 	beq.w	800cef2 <_printf_float+0xb6>
 800d276:	f108 0801 	add.w	r8, r8, #1
 800d27a:	68e3      	ldr	r3, [r4, #12]
 800d27c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d27e:	1a5b      	subs	r3, r3, r1
 800d280:	4543      	cmp	r3, r8
 800d282:	dcf0      	bgt.n	800d266 <_printf_float+0x42a>
 800d284:	e6fc      	b.n	800d080 <_printf_float+0x244>
 800d286:	f04f 0800 	mov.w	r8, #0
 800d28a:	f104 0919 	add.w	r9, r4, #25
 800d28e:	e7f4      	b.n	800d27a <_printf_float+0x43e>

0800d290 <_printf_common>:
 800d290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d294:	4616      	mov	r6, r2
 800d296:	4698      	mov	r8, r3
 800d298:	688a      	ldr	r2, [r1, #8]
 800d29a:	690b      	ldr	r3, [r1, #16]
 800d29c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	bfb8      	it	lt
 800d2a4:	4613      	movlt	r3, r2
 800d2a6:	6033      	str	r3, [r6, #0]
 800d2a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d2ac:	4607      	mov	r7, r0
 800d2ae:	460c      	mov	r4, r1
 800d2b0:	b10a      	cbz	r2, 800d2b6 <_printf_common+0x26>
 800d2b2:	3301      	adds	r3, #1
 800d2b4:	6033      	str	r3, [r6, #0]
 800d2b6:	6823      	ldr	r3, [r4, #0]
 800d2b8:	0699      	lsls	r1, r3, #26
 800d2ba:	bf42      	ittt	mi
 800d2bc:	6833      	ldrmi	r3, [r6, #0]
 800d2be:	3302      	addmi	r3, #2
 800d2c0:	6033      	strmi	r3, [r6, #0]
 800d2c2:	6825      	ldr	r5, [r4, #0]
 800d2c4:	f015 0506 	ands.w	r5, r5, #6
 800d2c8:	d106      	bne.n	800d2d8 <_printf_common+0x48>
 800d2ca:	f104 0a19 	add.w	sl, r4, #25
 800d2ce:	68e3      	ldr	r3, [r4, #12]
 800d2d0:	6832      	ldr	r2, [r6, #0]
 800d2d2:	1a9b      	subs	r3, r3, r2
 800d2d4:	42ab      	cmp	r3, r5
 800d2d6:	dc26      	bgt.n	800d326 <_printf_common+0x96>
 800d2d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d2dc:	6822      	ldr	r2, [r4, #0]
 800d2de:	3b00      	subs	r3, #0
 800d2e0:	bf18      	it	ne
 800d2e2:	2301      	movne	r3, #1
 800d2e4:	0692      	lsls	r2, r2, #26
 800d2e6:	d42b      	bmi.n	800d340 <_printf_common+0xb0>
 800d2e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d2ec:	4641      	mov	r1, r8
 800d2ee:	4638      	mov	r0, r7
 800d2f0:	47c8      	blx	r9
 800d2f2:	3001      	adds	r0, #1
 800d2f4:	d01e      	beq.n	800d334 <_printf_common+0xa4>
 800d2f6:	6823      	ldr	r3, [r4, #0]
 800d2f8:	6922      	ldr	r2, [r4, #16]
 800d2fa:	f003 0306 	and.w	r3, r3, #6
 800d2fe:	2b04      	cmp	r3, #4
 800d300:	bf02      	ittt	eq
 800d302:	68e5      	ldreq	r5, [r4, #12]
 800d304:	6833      	ldreq	r3, [r6, #0]
 800d306:	1aed      	subeq	r5, r5, r3
 800d308:	68a3      	ldr	r3, [r4, #8]
 800d30a:	bf0c      	ite	eq
 800d30c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d310:	2500      	movne	r5, #0
 800d312:	4293      	cmp	r3, r2
 800d314:	bfc4      	itt	gt
 800d316:	1a9b      	subgt	r3, r3, r2
 800d318:	18ed      	addgt	r5, r5, r3
 800d31a:	2600      	movs	r6, #0
 800d31c:	341a      	adds	r4, #26
 800d31e:	42b5      	cmp	r5, r6
 800d320:	d11a      	bne.n	800d358 <_printf_common+0xc8>
 800d322:	2000      	movs	r0, #0
 800d324:	e008      	b.n	800d338 <_printf_common+0xa8>
 800d326:	2301      	movs	r3, #1
 800d328:	4652      	mov	r2, sl
 800d32a:	4641      	mov	r1, r8
 800d32c:	4638      	mov	r0, r7
 800d32e:	47c8      	blx	r9
 800d330:	3001      	adds	r0, #1
 800d332:	d103      	bne.n	800d33c <_printf_common+0xac>
 800d334:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d33c:	3501      	adds	r5, #1
 800d33e:	e7c6      	b.n	800d2ce <_printf_common+0x3e>
 800d340:	18e1      	adds	r1, r4, r3
 800d342:	1c5a      	adds	r2, r3, #1
 800d344:	2030      	movs	r0, #48	@ 0x30
 800d346:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d34a:	4422      	add	r2, r4
 800d34c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d350:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d354:	3302      	adds	r3, #2
 800d356:	e7c7      	b.n	800d2e8 <_printf_common+0x58>
 800d358:	2301      	movs	r3, #1
 800d35a:	4622      	mov	r2, r4
 800d35c:	4641      	mov	r1, r8
 800d35e:	4638      	mov	r0, r7
 800d360:	47c8      	blx	r9
 800d362:	3001      	adds	r0, #1
 800d364:	d0e6      	beq.n	800d334 <_printf_common+0xa4>
 800d366:	3601      	adds	r6, #1
 800d368:	e7d9      	b.n	800d31e <_printf_common+0x8e>
	...

0800d36c <_printf_i>:
 800d36c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d370:	7e0f      	ldrb	r7, [r1, #24]
 800d372:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d374:	2f78      	cmp	r7, #120	@ 0x78
 800d376:	4691      	mov	r9, r2
 800d378:	4680      	mov	r8, r0
 800d37a:	460c      	mov	r4, r1
 800d37c:	469a      	mov	sl, r3
 800d37e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d382:	d807      	bhi.n	800d394 <_printf_i+0x28>
 800d384:	2f62      	cmp	r7, #98	@ 0x62
 800d386:	d80a      	bhi.n	800d39e <_printf_i+0x32>
 800d388:	2f00      	cmp	r7, #0
 800d38a:	f000 80d2 	beq.w	800d532 <_printf_i+0x1c6>
 800d38e:	2f58      	cmp	r7, #88	@ 0x58
 800d390:	f000 80b9 	beq.w	800d506 <_printf_i+0x19a>
 800d394:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d398:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d39c:	e03a      	b.n	800d414 <_printf_i+0xa8>
 800d39e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d3a2:	2b15      	cmp	r3, #21
 800d3a4:	d8f6      	bhi.n	800d394 <_printf_i+0x28>
 800d3a6:	a101      	add	r1, pc, #4	@ (adr r1, 800d3ac <_printf_i+0x40>)
 800d3a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d3ac:	0800d405 	.word	0x0800d405
 800d3b0:	0800d419 	.word	0x0800d419
 800d3b4:	0800d395 	.word	0x0800d395
 800d3b8:	0800d395 	.word	0x0800d395
 800d3bc:	0800d395 	.word	0x0800d395
 800d3c0:	0800d395 	.word	0x0800d395
 800d3c4:	0800d419 	.word	0x0800d419
 800d3c8:	0800d395 	.word	0x0800d395
 800d3cc:	0800d395 	.word	0x0800d395
 800d3d0:	0800d395 	.word	0x0800d395
 800d3d4:	0800d395 	.word	0x0800d395
 800d3d8:	0800d519 	.word	0x0800d519
 800d3dc:	0800d443 	.word	0x0800d443
 800d3e0:	0800d4d3 	.word	0x0800d4d3
 800d3e4:	0800d395 	.word	0x0800d395
 800d3e8:	0800d395 	.word	0x0800d395
 800d3ec:	0800d53b 	.word	0x0800d53b
 800d3f0:	0800d395 	.word	0x0800d395
 800d3f4:	0800d443 	.word	0x0800d443
 800d3f8:	0800d395 	.word	0x0800d395
 800d3fc:	0800d395 	.word	0x0800d395
 800d400:	0800d4db 	.word	0x0800d4db
 800d404:	6833      	ldr	r3, [r6, #0]
 800d406:	1d1a      	adds	r2, r3, #4
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	6032      	str	r2, [r6, #0]
 800d40c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d410:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d414:	2301      	movs	r3, #1
 800d416:	e09d      	b.n	800d554 <_printf_i+0x1e8>
 800d418:	6833      	ldr	r3, [r6, #0]
 800d41a:	6820      	ldr	r0, [r4, #0]
 800d41c:	1d19      	adds	r1, r3, #4
 800d41e:	6031      	str	r1, [r6, #0]
 800d420:	0606      	lsls	r6, r0, #24
 800d422:	d501      	bpl.n	800d428 <_printf_i+0xbc>
 800d424:	681d      	ldr	r5, [r3, #0]
 800d426:	e003      	b.n	800d430 <_printf_i+0xc4>
 800d428:	0645      	lsls	r5, r0, #25
 800d42a:	d5fb      	bpl.n	800d424 <_printf_i+0xb8>
 800d42c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d430:	2d00      	cmp	r5, #0
 800d432:	da03      	bge.n	800d43c <_printf_i+0xd0>
 800d434:	232d      	movs	r3, #45	@ 0x2d
 800d436:	426d      	negs	r5, r5
 800d438:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d43c:	4859      	ldr	r0, [pc, #356]	@ (800d5a4 <_printf_i+0x238>)
 800d43e:	230a      	movs	r3, #10
 800d440:	e011      	b.n	800d466 <_printf_i+0xfa>
 800d442:	6821      	ldr	r1, [r4, #0]
 800d444:	6833      	ldr	r3, [r6, #0]
 800d446:	0608      	lsls	r0, r1, #24
 800d448:	f853 5b04 	ldr.w	r5, [r3], #4
 800d44c:	d402      	bmi.n	800d454 <_printf_i+0xe8>
 800d44e:	0649      	lsls	r1, r1, #25
 800d450:	bf48      	it	mi
 800d452:	b2ad      	uxthmi	r5, r5
 800d454:	2f6f      	cmp	r7, #111	@ 0x6f
 800d456:	4853      	ldr	r0, [pc, #332]	@ (800d5a4 <_printf_i+0x238>)
 800d458:	6033      	str	r3, [r6, #0]
 800d45a:	bf14      	ite	ne
 800d45c:	230a      	movne	r3, #10
 800d45e:	2308      	moveq	r3, #8
 800d460:	2100      	movs	r1, #0
 800d462:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d466:	6866      	ldr	r6, [r4, #4]
 800d468:	60a6      	str	r6, [r4, #8]
 800d46a:	2e00      	cmp	r6, #0
 800d46c:	bfa2      	ittt	ge
 800d46e:	6821      	ldrge	r1, [r4, #0]
 800d470:	f021 0104 	bicge.w	r1, r1, #4
 800d474:	6021      	strge	r1, [r4, #0]
 800d476:	b90d      	cbnz	r5, 800d47c <_printf_i+0x110>
 800d478:	2e00      	cmp	r6, #0
 800d47a:	d04b      	beq.n	800d514 <_printf_i+0x1a8>
 800d47c:	4616      	mov	r6, r2
 800d47e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d482:	fb03 5711 	mls	r7, r3, r1, r5
 800d486:	5dc7      	ldrb	r7, [r0, r7]
 800d488:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d48c:	462f      	mov	r7, r5
 800d48e:	42bb      	cmp	r3, r7
 800d490:	460d      	mov	r5, r1
 800d492:	d9f4      	bls.n	800d47e <_printf_i+0x112>
 800d494:	2b08      	cmp	r3, #8
 800d496:	d10b      	bne.n	800d4b0 <_printf_i+0x144>
 800d498:	6823      	ldr	r3, [r4, #0]
 800d49a:	07df      	lsls	r7, r3, #31
 800d49c:	d508      	bpl.n	800d4b0 <_printf_i+0x144>
 800d49e:	6923      	ldr	r3, [r4, #16]
 800d4a0:	6861      	ldr	r1, [r4, #4]
 800d4a2:	4299      	cmp	r1, r3
 800d4a4:	bfde      	ittt	le
 800d4a6:	2330      	movle	r3, #48	@ 0x30
 800d4a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d4ac:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d4b0:	1b92      	subs	r2, r2, r6
 800d4b2:	6122      	str	r2, [r4, #16]
 800d4b4:	f8cd a000 	str.w	sl, [sp]
 800d4b8:	464b      	mov	r3, r9
 800d4ba:	aa03      	add	r2, sp, #12
 800d4bc:	4621      	mov	r1, r4
 800d4be:	4640      	mov	r0, r8
 800d4c0:	f7ff fee6 	bl	800d290 <_printf_common>
 800d4c4:	3001      	adds	r0, #1
 800d4c6:	d14a      	bne.n	800d55e <_printf_i+0x1f2>
 800d4c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d4cc:	b004      	add	sp, #16
 800d4ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4d2:	6823      	ldr	r3, [r4, #0]
 800d4d4:	f043 0320 	orr.w	r3, r3, #32
 800d4d8:	6023      	str	r3, [r4, #0]
 800d4da:	4833      	ldr	r0, [pc, #204]	@ (800d5a8 <_printf_i+0x23c>)
 800d4dc:	2778      	movs	r7, #120	@ 0x78
 800d4de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d4e2:	6823      	ldr	r3, [r4, #0]
 800d4e4:	6831      	ldr	r1, [r6, #0]
 800d4e6:	061f      	lsls	r7, r3, #24
 800d4e8:	f851 5b04 	ldr.w	r5, [r1], #4
 800d4ec:	d402      	bmi.n	800d4f4 <_printf_i+0x188>
 800d4ee:	065f      	lsls	r7, r3, #25
 800d4f0:	bf48      	it	mi
 800d4f2:	b2ad      	uxthmi	r5, r5
 800d4f4:	6031      	str	r1, [r6, #0]
 800d4f6:	07d9      	lsls	r1, r3, #31
 800d4f8:	bf44      	itt	mi
 800d4fa:	f043 0320 	orrmi.w	r3, r3, #32
 800d4fe:	6023      	strmi	r3, [r4, #0]
 800d500:	b11d      	cbz	r5, 800d50a <_printf_i+0x19e>
 800d502:	2310      	movs	r3, #16
 800d504:	e7ac      	b.n	800d460 <_printf_i+0xf4>
 800d506:	4827      	ldr	r0, [pc, #156]	@ (800d5a4 <_printf_i+0x238>)
 800d508:	e7e9      	b.n	800d4de <_printf_i+0x172>
 800d50a:	6823      	ldr	r3, [r4, #0]
 800d50c:	f023 0320 	bic.w	r3, r3, #32
 800d510:	6023      	str	r3, [r4, #0]
 800d512:	e7f6      	b.n	800d502 <_printf_i+0x196>
 800d514:	4616      	mov	r6, r2
 800d516:	e7bd      	b.n	800d494 <_printf_i+0x128>
 800d518:	6833      	ldr	r3, [r6, #0]
 800d51a:	6825      	ldr	r5, [r4, #0]
 800d51c:	6961      	ldr	r1, [r4, #20]
 800d51e:	1d18      	adds	r0, r3, #4
 800d520:	6030      	str	r0, [r6, #0]
 800d522:	062e      	lsls	r6, r5, #24
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	d501      	bpl.n	800d52c <_printf_i+0x1c0>
 800d528:	6019      	str	r1, [r3, #0]
 800d52a:	e002      	b.n	800d532 <_printf_i+0x1c6>
 800d52c:	0668      	lsls	r0, r5, #25
 800d52e:	d5fb      	bpl.n	800d528 <_printf_i+0x1bc>
 800d530:	8019      	strh	r1, [r3, #0]
 800d532:	2300      	movs	r3, #0
 800d534:	6123      	str	r3, [r4, #16]
 800d536:	4616      	mov	r6, r2
 800d538:	e7bc      	b.n	800d4b4 <_printf_i+0x148>
 800d53a:	6833      	ldr	r3, [r6, #0]
 800d53c:	1d1a      	adds	r2, r3, #4
 800d53e:	6032      	str	r2, [r6, #0]
 800d540:	681e      	ldr	r6, [r3, #0]
 800d542:	6862      	ldr	r2, [r4, #4]
 800d544:	2100      	movs	r1, #0
 800d546:	4630      	mov	r0, r6
 800d548:	f7f2 fe4a 	bl	80001e0 <memchr>
 800d54c:	b108      	cbz	r0, 800d552 <_printf_i+0x1e6>
 800d54e:	1b80      	subs	r0, r0, r6
 800d550:	6060      	str	r0, [r4, #4]
 800d552:	6863      	ldr	r3, [r4, #4]
 800d554:	6123      	str	r3, [r4, #16]
 800d556:	2300      	movs	r3, #0
 800d558:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d55c:	e7aa      	b.n	800d4b4 <_printf_i+0x148>
 800d55e:	6923      	ldr	r3, [r4, #16]
 800d560:	4632      	mov	r2, r6
 800d562:	4649      	mov	r1, r9
 800d564:	4640      	mov	r0, r8
 800d566:	47d0      	blx	sl
 800d568:	3001      	adds	r0, #1
 800d56a:	d0ad      	beq.n	800d4c8 <_printf_i+0x15c>
 800d56c:	6823      	ldr	r3, [r4, #0]
 800d56e:	079b      	lsls	r3, r3, #30
 800d570:	d413      	bmi.n	800d59a <_printf_i+0x22e>
 800d572:	68e0      	ldr	r0, [r4, #12]
 800d574:	9b03      	ldr	r3, [sp, #12]
 800d576:	4298      	cmp	r0, r3
 800d578:	bfb8      	it	lt
 800d57a:	4618      	movlt	r0, r3
 800d57c:	e7a6      	b.n	800d4cc <_printf_i+0x160>
 800d57e:	2301      	movs	r3, #1
 800d580:	4632      	mov	r2, r6
 800d582:	4649      	mov	r1, r9
 800d584:	4640      	mov	r0, r8
 800d586:	47d0      	blx	sl
 800d588:	3001      	adds	r0, #1
 800d58a:	d09d      	beq.n	800d4c8 <_printf_i+0x15c>
 800d58c:	3501      	adds	r5, #1
 800d58e:	68e3      	ldr	r3, [r4, #12]
 800d590:	9903      	ldr	r1, [sp, #12]
 800d592:	1a5b      	subs	r3, r3, r1
 800d594:	42ab      	cmp	r3, r5
 800d596:	dcf2      	bgt.n	800d57e <_printf_i+0x212>
 800d598:	e7eb      	b.n	800d572 <_printf_i+0x206>
 800d59a:	2500      	movs	r5, #0
 800d59c:	f104 0619 	add.w	r6, r4, #25
 800d5a0:	e7f5      	b.n	800d58e <_printf_i+0x222>
 800d5a2:	bf00      	nop
 800d5a4:	08013b16 	.word	0x08013b16
 800d5a8:	08013b27 	.word	0x08013b27

0800d5ac <_scanf_float>:
 800d5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5b0:	b087      	sub	sp, #28
 800d5b2:	4617      	mov	r7, r2
 800d5b4:	9303      	str	r3, [sp, #12]
 800d5b6:	688b      	ldr	r3, [r1, #8]
 800d5b8:	1e5a      	subs	r2, r3, #1
 800d5ba:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d5be:	bf81      	itttt	hi
 800d5c0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d5c4:	eb03 0b05 	addhi.w	fp, r3, r5
 800d5c8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d5cc:	608b      	strhi	r3, [r1, #8]
 800d5ce:	680b      	ldr	r3, [r1, #0]
 800d5d0:	460a      	mov	r2, r1
 800d5d2:	f04f 0500 	mov.w	r5, #0
 800d5d6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d5da:	f842 3b1c 	str.w	r3, [r2], #28
 800d5de:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d5e2:	4680      	mov	r8, r0
 800d5e4:	460c      	mov	r4, r1
 800d5e6:	bf98      	it	ls
 800d5e8:	f04f 0b00 	movls.w	fp, #0
 800d5ec:	9201      	str	r2, [sp, #4]
 800d5ee:	4616      	mov	r6, r2
 800d5f0:	46aa      	mov	sl, r5
 800d5f2:	46a9      	mov	r9, r5
 800d5f4:	9502      	str	r5, [sp, #8]
 800d5f6:	68a2      	ldr	r2, [r4, #8]
 800d5f8:	b152      	cbz	r2, 800d610 <_scanf_float+0x64>
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	781b      	ldrb	r3, [r3, #0]
 800d5fe:	2b4e      	cmp	r3, #78	@ 0x4e
 800d600:	d864      	bhi.n	800d6cc <_scanf_float+0x120>
 800d602:	2b40      	cmp	r3, #64	@ 0x40
 800d604:	d83c      	bhi.n	800d680 <_scanf_float+0xd4>
 800d606:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d60a:	b2c8      	uxtb	r0, r1
 800d60c:	280e      	cmp	r0, #14
 800d60e:	d93a      	bls.n	800d686 <_scanf_float+0xda>
 800d610:	f1b9 0f00 	cmp.w	r9, #0
 800d614:	d003      	beq.n	800d61e <_scanf_float+0x72>
 800d616:	6823      	ldr	r3, [r4, #0]
 800d618:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d61c:	6023      	str	r3, [r4, #0]
 800d61e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800d622:	f1ba 0f01 	cmp.w	sl, #1
 800d626:	f200 8117 	bhi.w	800d858 <_scanf_float+0x2ac>
 800d62a:	9b01      	ldr	r3, [sp, #4]
 800d62c:	429e      	cmp	r6, r3
 800d62e:	f200 8108 	bhi.w	800d842 <_scanf_float+0x296>
 800d632:	2001      	movs	r0, #1
 800d634:	b007      	add	sp, #28
 800d636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d63a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d63e:	2a0d      	cmp	r2, #13
 800d640:	d8e6      	bhi.n	800d610 <_scanf_float+0x64>
 800d642:	a101      	add	r1, pc, #4	@ (adr r1, 800d648 <_scanf_float+0x9c>)
 800d644:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d648:	0800d78f 	.word	0x0800d78f
 800d64c:	0800d611 	.word	0x0800d611
 800d650:	0800d611 	.word	0x0800d611
 800d654:	0800d611 	.word	0x0800d611
 800d658:	0800d7ef 	.word	0x0800d7ef
 800d65c:	0800d7c7 	.word	0x0800d7c7
 800d660:	0800d611 	.word	0x0800d611
 800d664:	0800d611 	.word	0x0800d611
 800d668:	0800d79d 	.word	0x0800d79d
 800d66c:	0800d611 	.word	0x0800d611
 800d670:	0800d611 	.word	0x0800d611
 800d674:	0800d611 	.word	0x0800d611
 800d678:	0800d611 	.word	0x0800d611
 800d67c:	0800d755 	.word	0x0800d755
 800d680:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d684:	e7db      	b.n	800d63e <_scanf_float+0x92>
 800d686:	290e      	cmp	r1, #14
 800d688:	d8c2      	bhi.n	800d610 <_scanf_float+0x64>
 800d68a:	a001      	add	r0, pc, #4	@ (adr r0, 800d690 <_scanf_float+0xe4>)
 800d68c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d690:	0800d745 	.word	0x0800d745
 800d694:	0800d611 	.word	0x0800d611
 800d698:	0800d745 	.word	0x0800d745
 800d69c:	0800d7db 	.word	0x0800d7db
 800d6a0:	0800d611 	.word	0x0800d611
 800d6a4:	0800d6ed 	.word	0x0800d6ed
 800d6a8:	0800d72b 	.word	0x0800d72b
 800d6ac:	0800d72b 	.word	0x0800d72b
 800d6b0:	0800d72b 	.word	0x0800d72b
 800d6b4:	0800d72b 	.word	0x0800d72b
 800d6b8:	0800d72b 	.word	0x0800d72b
 800d6bc:	0800d72b 	.word	0x0800d72b
 800d6c0:	0800d72b 	.word	0x0800d72b
 800d6c4:	0800d72b 	.word	0x0800d72b
 800d6c8:	0800d72b 	.word	0x0800d72b
 800d6cc:	2b6e      	cmp	r3, #110	@ 0x6e
 800d6ce:	d809      	bhi.n	800d6e4 <_scanf_float+0x138>
 800d6d0:	2b60      	cmp	r3, #96	@ 0x60
 800d6d2:	d8b2      	bhi.n	800d63a <_scanf_float+0x8e>
 800d6d4:	2b54      	cmp	r3, #84	@ 0x54
 800d6d6:	d07b      	beq.n	800d7d0 <_scanf_float+0x224>
 800d6d8:	2b59      	cmp	r3, #89	@ 0x59
 800d6da:	d199      	bne.n	800d610 <_scanf_float+0x64>
 800d6dc:	2d07      	cmp	r5, #7
 800d6de:	d197      	bne.n	800d610 <_scanf_float+0x64>
 800d6e0:	2508      	movs	r5, #8
 800d6e2:	e02c      	b.n	800d73e <_scanf_float+0x192>
 800d6e4:	2b74      	cmp	r3, #116	@ 0x74
 800d6e6:	d073      	beq.n	800d7d0 <_scanf_float+0x224>
 800d6e8:	2b79      	cmp	r3, #121	@ 0x79
 800d6ea:	e7f6      	b.n	800d6da <_scanf_float+0x12e>
 800d6ec:	6821      	ldr	r1, [r4, #0]
 800d6ee:	05c8      	lsls	r0, r1, #23
 800d6f0:	d51b      	bpl.n	800d72a <_scanf_float+0x17e>
 800d6f2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d6f6:	6021      	str	r1, [r4, #0]
 800d6f8:	f109 0901 	add.w	r9, r9, #1
 800d6fc:	f1bb 0f00 	cmp.w	fp, #0
 800d700:	d003      	beq.n	800d70a <_scanf_float+0x15e>
 800d702:	3201      	adds	r2, #1
 800d704:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800d708:	60a2      	str	r2, [r4, #8]
 800d70a:	68a3      	ldr	r3, [r4, #8]
 800d70c:	3b01      	subs	r3, #1
 800d70e:	60a3      	str	r3, [r4, #8]
 800d710:	6923      	ldr	r3, [r4, #16]
 800d712:	3301      	adds	r3, #1
 800d714:	6123      	str	r3, [r4, #16]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	3b01      	subs	r3, #1
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	607b      	str	r3, [r7, #4]
 800d71e:	f340 8087 	ble.w	800d830 <_scanf_float+0x284>
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	3301      	adds	r3, #1
 800d726:	603b      	str	r3, [r7, #0]
 800d728:	e765      	b.n	800d5f6 <_scanf_float+0x4a>
 800d72a:	eb1a 0105 	adds.w	r1, sl, r5
 800d72e:	f47f af6f 	bne.w	800d610 <_scanf_float+0x64>
 800d732:	6822      	ldr	r2, [r4, #0]
 800d734:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d738:	6022      	str	r2, [r4, #0]
 800d73a:	460d      	mov	r5, r1
 800d73c:	468a      	mov	sl, r1
 800d73e:	f806 3b01 	strb.w	r3, [r6], #1
 800d742:	e7e2      	b.n	800d70a <_scanf_float+0x15e>
 800d744:	6822      	ldr	r2, [r4, #0]
 800d746:	0610      	lsls	r0, r2, #24
 800d748:	f57f af62 	bpl.w	800d610 <_scanf_float+0x64>
 800d74c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d750:	6022      	str	r2, [r4, #0]
 800d752:	e7f4      	b.n	800d73e <_scanf_float+0x192>
 800d754:	f1ba 0f00 	cmp.w	sl, #0
 800d758:	d10e      	bne.n	800d778 <_scanf_float+0x1cc>
 800d75a:	f1b9 0f00 	cmp.w	r9, #0
 800d75e:	d10e      	bne.n	800d77e <_scanf_float+0x1d2>
 800d760:	6822      	ldr	r2, [r4, #0]
 800d762:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d766:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d76a:	d108      	bne.n	800d77e <_scanf_float+0x1d2>
 800d76c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d770:	6022      	str	r2, [r4, #0]
 800d772:	f04f 0a01 	mov.w	sl, #1
 800d776:	e7e2      	b.n	800d73e <_scanf_float+0x192>
 800d778:	f1ba 0f02 	cmp.w	sl, #2
 800d77c:	d055      	beq.n	800d82a <_scanf_float+0x27e>
 800d77e:	2d01      	cmp	r5, #1
 800d780:	d002      	beq.n	800d788 <_scanf_float+0x1dc>
 800d782:	2d04      	cmp	r5, #4
 800d784:	f47f af44 	bne.w	800d610 <_scanf_float+0x64>
 800d788:	3501      	adds	r5, #1
 800d78a:	b2ed      	uxtb	r5, r5
 800d78c:	e7d7      	b.n	800d73e <_scanf_float+0x192>
 800d78e:	f1ba 0f01 	cmp.w	sl, #1
 800d792:	f47f af3d 	bne.w	800d610 <_scanf_float+0x64>
 800d796:	f04f 0a02 	mov.w	sl, #2
 800d79a:	e7d0      	b.n	800d73e <_scanf_float+0x192>
 800d79c:	b97d      	cbnz	r5, 800d7be <_scanf_float+0x212>
 800d79e:	f1b9 0f00 	cmp.w	r9, #0
 800d7a2:	f47f af38 	bne.w	800d616 <_scanf_float+0x6a>
 800d7a6:	6822      	ldr	r2, [r4, #0]
 800d7a8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d7ac:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d7b0:	f040 8108 	bne.w	800d9c4 <_scanf_float+0x418>
 800d7b4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d7b8:	6022      	str	r2, [r4, #0]
 800d7ba:	2501      	movs	r5, #1
 800d7bc:	e7bf      	b.n	800d73e <_scanf_float+0x192>
 800d7be:	2d03      	cmp	r5, #3
 800d7c0:	d0e2      	beq.n	800d788 <_scanf_float+0x1dc>
 800d7c2:	2d05      	cmp	r5, #5
 800d7c4:	e7de      	b.n	800d784 <_scanf_float+0x1d8>
 800d7c6:	2d02      	cmp	r5, #2
 800d7c8:	f47f af22 	bne.w	800d610 <_scanf_float+0x64>
 800d7cc:	2503      	movs	r5, #3
 800d7ce:	e7b6      	b.n	800d73e <_scanf_float+0x192>
 800d7d0:	2d06      	cmp	r5, #6
 800d7d2:	f47f af1d 	bne.w	800d610 <_scanf_float+0x64>
 800d7d6:	2507      	movs	r5, #7
 800d7d8:	e7b1      	b.n	800d73e <_scanf_float+0x192>
 800d7da:	6822      	ldr	r2, [r4, #0]
 800d7dc:	0591      	lsls	r1, r2, #22
 800d7de:	f57f af17 	bpl.w	800d610 <_scanf_float+0x64>
 800d7e2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d7e6:	6022      	str	r2, [r4, #0]
 800d7e8:	f8cd 9008 	str.w	r9, [sp, #8]
 800d7ec:	e7a7      	b.n	800d73e <_scanf_float+0x192>
 800d7ee:	6822      	ldr	r2, [r4, #0]
 800d7f0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d7f4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d7f8:	d006      	beq.n	800d808 <_scanf_float+0x25c>
 800d7fa:	0550      	lsls	r0, r2, #21
 800d7fc:	f57f af08 	bpl.w	800d610 <_scanf_float+0x64>
 800d800:	f1b9 0f00 	cmp.w	r9, #0
 800d804:	f000 80de 	beq.w	800d9c4 <_scanf_float+0x418>
 800d808:	0591      	lsls	r1, r2, #22
 800d80a:	bf58      	it	pl
 800d80c:	9902      	ldrpl	r1, [sp, #8]
 800d80e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d812:	bf58      	it	pl
 800d814:	eba9 0101 	subpl.w	r1, r9, r1
 800d818:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d81c:	bf58      	it	pl
 800d81e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d822:	6022      	str	r2, [r4, #0]
 800d824:	f04f 0900 	mov.w	r9, #0
 800d828:	e789      	b.n	800d73e <_scanf_float+0x192>
 800d82a:	f04f 0a03 	mov.w	sl, #3
 800d82e:	e786      	b.n	800d73e <_scanf_float+0x192>
 800d830:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d834:	4639      	mov	r1, r7
 800d836:	4640      	mov	r0, r8
 800d838:	4798      	blx	r3
 800d83a:	2800      	cmp	r0, #0
 800d83c:	f43f aedb 	beq.w	800d5f6 <_scanf_float+0x4a>
 800d840:	e6e6      	b.n	800d610 <_scanf_float+0x64>
 800d842:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d846:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d84a:	463a      	mov	r2, r7
 800d84c:	4640      	mov	r0, r8
 800d84e:	4798      	blx	r3
 800d850:	6923      	ldr	r3, [r4, #16]
 800d852:	3b01      	subs	r3, #1
 800d854:	6123      	str	r3, [r4, #16]
 800d856:	e6e8      	b.n	800d62a <_scanf_float+0x7e>
 800d858:	1e6b      	subs	r3, r5, #1
 800d85a:	2b06      	cmp	r3, #6
 800d85c:	d824      	bhi.n	800d8a8 <_scanf_float+0x2fc>
 800d85e:	2d02      	cmp	r5, #2
 800d860:	d836      	bhi.n	800d8d0 <_scanf_float+0x324>
 800d862:	9b01      	ldr	r3, [sp, #4]
 800d864:	429e      	cmp	r6, r3
 800d866:	f67f aee4 	bls.w	800d632 <_scanf_float+0x86>
 800d86a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d86e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d872:	463a      	mov	r2, r7
 800d874:	4640      	mov	r0, r8
 800d876:	4798      	blx	r3
 800d878:	6923      	ldr	r3, [r4, #16]
 800d87a:	3b01      	subs	r3, #1
 800d87c:	6123      	str	r3, [r4, #16]
 800d87e:	e7f0      	b.n	800d862 <_scanf_float+0x2b6>
 800d880:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d884:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800d888:	463a      	mov	r2, r7
 800d88a:	4640      	mov	r0, r8
 800d88c:	4798      	blx	r3
 800d88e:	6923      	ldr	r3, [r4, #16]
 800d890:	3b01      	subs	r3, #1
 800d892:	6123      	str	r3, [r4, #16]
 800d894:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800d898:	fa5f fa8a 	uxtb.w	sl, sl
 800d89c:	f1ba 0f02 	cmp.w	sl, #2
 800d8a0:	d1ee      	bne.n	800d880 <_scanf_float+0x2d4>
 800d8a2:	3d03      	subs	r5, #3
 800d8a4:	b2ed      	uxtb	r5, r5
 800d8a6:	1b76      	subs	r6, r6, r5
 800d8a8:	6823      	ldr	r3, [r4, #0]
 800d8aa:	05da      	lsls	r2, r3, #23
 800d8ac:	d530      	bpl.n	800d910 <_scanf_float+0x364>
 800d8ae:	055b      	lsls	r3, r3, #21
 800d8b0:	d511      	bpl.n	800d8d6 <_scanf_float+0x32a>
 800d8b2:	9b01      	ldr	r3, [sp, #4]
 800d8b4:	429e      	cmp	r6, r3
 800d8b6:	f67f aebc 	bls.w	800d632 <_scanf_float+0x86>
 800d8ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d8be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d8c2:	463a      	mov	r2, r7
 800d8c4:	4640      	mov	r0, r8
 800d8c6:	4798      	blx	r3
 800d8c8:	6923      	ldr	r3, [r4, #16]
 800d8ca:	3b01      	subs	r3, #1
 800d8cc:	6123      	str	r3, [r4, #16]
 800d8ce:	e7f0      	b.n	800d8b2 <_scanf_float+0x306>
 800d8d0:	46aa      	mov	sl, r5
 800d8d2:	46b3      	mov	fp, r6
 800d8d4:	e7de      	b.n	800d894 <_scanf_float+0x2e8>
 800d8d6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d8da:	6923      	ldr	r3, [r4, #16]
 800d8dc:	2965      	cmp	r1, #101	@ 0x65
 800d8de:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800d8e2:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800d8e6:	6123      	str	r3, [r4, #16]
 800d8e8:	d00c      	beq.n	800d904 <_scanf_float+0x358>
 800d8ea:	2945      	cmp	r1, #69	@ 0x45
 800d8ec:	d00a      	beq.n	800d904 <_scanf_float+0x358>
 800d8ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d8f2:	463a      	mov	r2, r7
 800d8f4:	4640      	mov	r0, r8
 800d8f6:	4798      	blx	r3
 800d8f8:	6923      	ldr	r3, [r4, #16]
 800d8fa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d8fe:	3b01      	subs	r3, #1
 800d900:	1eb5      	subs	r5, r6, #2
 800d902:	6123      	str	r3, [r4, #16]
 800d904:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d908:	463a      	mov	r2, r7
 800d90a:	4640      	mov	r0, r8
 800d90c:	4798      	blx	r3
 800d90e:	462e      	mov	r6, r5
 800d910:	6822      	ldr	r2, [r4, #0]
 800d912:	f012 0210 	ands.w	r2, r2, #16
 800d916:	d001      	beq.n	800d91c <_scanf_float+0x370>
 800d918:	2000      	movs	r0, #0
 800d91a:	e68b      	b.n	800d634 <_scanf_float+0x88>
 800d91c:	7032      	strb	r2, [r6, #0]
 800d91e:	6823      	ldr	r3, [r4, #0]
 800d920:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d924:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d928:	d11c      	bne.n	800d964 <_scanf_float+0x3b8>
 800d92a:	9b02      	ldr	r3, [sp, #8]
 800d92c:	454b      	cmp	r3, r9
 800d92e:	eba3 0209 	sub.w	r2, r3, r9
 800d932:	d123      	bne.n	800d97c <_scanf_float+0x3d0>
 800d934:	9901      	ldr	r1, [sp, #4]
 800d936:	2200      	movs	r2, #0
 800d938:	4640      	mov	r0, r8
 800d93a:	f002 fc75 	bl	8010228 <_strtod_r>
 800d93e:	9b03      	ldr	r3, [sp, #12]
 800d940:	6821      	ldr	r1, [r4, #0]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	f011 0f02 	tst.w	r1, #2
 800d948:	ec57 6b10 	vmov	r6, r7, d0
 800d94c:	f103 0204 	add.w	r2, r3, #4
 800d950:	d01f      	beq.n	800d992 <_scanf_float+0x3e6>
 800d952:	9903      	ldr	r1, [sp, #12]
 800d954:	600a      	str	r2, [r1, #0]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	e9c3 6700 	strd	r6, r7, [r3]
 800d95c:	68e3      	ldr	r3, [r4, #12]
 800d95e:	3301      	adds	r3, #1
 800d960:	60e3      	str	r3, [r4, #12]
 800d962:	e7d9      	b.n	800d918 <_scanf_float+0x36c>
 800d964:	9b04      	ldr	r3, [sp, #16]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d0e4      	beq.n	800d934 <_scanf_float+0x388>
 800d96a:	9905      	ldr	r1, [sp, #20]
 800d96c:	230a      	movs	r3, #10
 800d96e:	3101      	adds	r1, #1
 800d970:	4640      	mov	r0, r8
 800d972:	f002 fcd9 	bl	8010328 <_strtol_r>
 800d976:	9b04      	ldr	r3, [sp, #16]
 800d978:	9e05      	ldr	r6, [sp, #20]
 800d97a:	1ac2      	subs	r2, r0, r3
 800d97c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800d980:	429e      	cmp	r6, r3
 800d982:	bf28      	it	cs
 800d984:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800d988:	4910      	ldr	r1, [pc, #64]	@ (800d9cc <_scanf_float+0x420>)
 800d98a:	4630      	mov	r0, r6
 800d98c:	f000 f8e4 	bl	800db58 <siprintf>
 800d990:	e7d0      	b.n	800d934 <_scanf_float+0x388>
 800d992:	f011 0f04 	tst.w	r1, #4
 800d996:	9903      	ldr	r1, [sp, #12]
 800d998:	600a      	str	r2, [r1, #0]
 800d99a:	d1dc      	bne.n	800d956 <_scanf_float+0x3aa>
 800d99c:	681d      	ldr	r5, [r3, #0]
 800d99e:	4632      	mov	r2, r6
 800d9a0:	463b      	mov	r3, r7
 800d9a2:	4630      	mov	r0, r6
 800d9a4:	4639      	mov	r1, r7
 800d9a6:	f7f3 f8c9 	bl	8000b3c <__aeabi_dcmpun>
 800d9aa:	b128      	cbz	r0, 800d9b8 <_scanf_float+0x40c>
 800d9ac:	4808      	ldr	r0, [pc, #32]	@ (800d9d0 <_scanf_float+0x424>)
 800d9ae:	f000 fa35 	bl	800de1c <nanf>
 800d9b2:	ed85 0a00 	vstr	s0, [r5]
 800d9b6:	e7d1      	b.n	800d95c <_scanf_float+0x3b0>
 800d9b8:	4630      	mov	r0, r6
 800d9ba:	4639      	mov	r1, r7
 800d9bc:	f7f3 f91c 	bl	8000bf8 <__aeabi_d2f>
 800d9c0:	6028      	str	r0, [r5, #0]
 800d9c2:	e7cb      	b.n	800d95c <_scanf_float+0x3b0>
 800d9c4:	f04f 0900 	mov.w	r9, #0
 800d9c8:	e629      	b.n	800d61e <_scanf_float+0x72>
 800d9ca:	bf00      	nop
 800d9cc:	08013b38 	.word	0x08013b38
 800d9d0:	08013ecd 	.word	0x08013ecd

0800d9d4 <std>:
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	b510      	push	{r4, lr}
 800d9d8:	4604      	mov	r4, r0
 800d9da:	e9c0 3300 	strd	r3, r3, [r0]
 800d9de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d9e2:	6083      	str	r3, [r0, #8]
 800d9e4:	8181      	strh	r1, [r0, #12]
 800d9e6:	6643      	str	r3, [r0, #100]	@ 0x64
 800d9e8:	81c2      	strh	r2, [r0, #14]
 800d9ea:	6183      	str	r3, [r0, #24]
 800d9ec:	4619      	mov	r1, r3
 800d9ee:	2208      	movs	r2, #8
 800d9f0:	305c      	adds	r0, #92	@ 0x5c
 800d9f2:	f000 f92e 	bl	800dc52 <memset>
 800d9f6:	4b0d      	ldr	r3, [pc, #52]	@ (800da2c <std+0x58>)
 800d9f8:	6263      	str	r3, [r4, #36]	@ 0x24
 800d9fa:	4b0d      	ldr	r3, [pc, #52]	@ (800da30 <std+0x5c>)
 800d9fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d9fe:	4b0d      	ldr	r3, [pc, #52]	@ (800da34 <std+0x60>)
 800da00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800da02:	4b0d      	ldr	r3, [pc, #52]	@ (800da38 <std+0x64>)
 800da04:	6323      	str	r3, [r4, #48]	@ 0x30
 800da06:	4b0d      	ldr	r3, [pc, #52]	@ (800da3c <std+0x68>)
 800da08:	6224      	str	r4, [r4, #32]
 800da0a:	429c      	cmp	r4, r3
 800da0c:	d006      	beq.n	800da1c <std+0x48>
 800da0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800da12:	4294      	cmp	r4, r2
 800da14:	d002      	beq.n	800da1c <std+0x48>
 800da16:	33d0      	adds	r3, #208	@ 0xd0
 800da18:	429c      	cmp	r4, r3
 800da1a:	d105      	bne.n	800da28 <std+0x54>
 800da1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800da20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da24:	f000 b9e8 	b.w	800ddf8 <__retarget_lock_init_recursive>
 800da28:	bd10      	pop	{r4, pc}
 800da2a:	bf00      	nop
 800da2c:	0800db99 	.word	0x0800db99
 800da30:	0800dbbb 	.word	0x0800dbbb
 800da34:	0800dbf3 	.word	0x0800dbf3
 800da38:	0800dc17 	.word	0x0800dc17
 800da3c:	200034c0 	.word	0x200034c0

0800da40 <stdio_exit_handler>:
 800da40:	4a02      	ldr	r2, [pc, #8]	@ (800da4c <stdio_exit_handler+0xc>)
 800da42:	4903      	ldr	r1, [pc, #12]	@ (800da50 <stdio_exit_handler+0x10>)
 800da44:	4803      	ldr	r0, [pc, #12]	@ (800da54 <stdio_exit_handler+0x14>)
 800da46:	f000 b869 	b.w	800db1c <_fwalk_sglue>
 800da4a:	bf00      	nop
 800da4c:	20000024 	.word	0x20000024
 800da50:	080106e5 	.word	0x080106e5
 800da54:	20000034 	.word	0x20000034

0800da58 <cleanup_stdio>:
 800da58:	6841      	ldr	r1, [r0, #4]
 800da5a:	4b0c      	ldr	r3, [pc, #48]	@ (800da8c <cleanup_stdio+0x34>)
 800da5c:	4299      	cmp	r1, r3
 800da5e:	b510      	push	{r4, lr}
 800da60:	4604      	mov	r4, r0
 800da62:	d001      	beq.n	800da68 <cleanup_stdio+0x10>
 800da64:	f002 fe3e 	bl	80106e4 <_fflush_r>
 800da68:	68a1      	ldr	r1, [r4, #8]
 800da6a:	4b09      	ldr	r3, [pc, #36]	@ (800da90 <cleanup_stdio+0x38>)
 800da6c:	4299      	cmp	r1, r3
 800da6e:	d002      	beq.n	800da76 <cleanup_stdio+0x1e>
 800da70:	4620      	mov	r0, r4
 800da72:	f002 fe37 	bl	80106e4 <_fflush_r>
 800da76:	68e1      	ldr	r1, [r4, #12]
 800da78:	4b06      	ldr	r3, [pc, #24]	@ (800da94 <cleanup_stdio+0x3c>)
 800da7a:	4299      	cmp	r1, r3
 800da7c:	d004      	beq.n	800da88 <cleanup_stdio+0x30>
 800da7e:	4620      	mov	r0, r4
 800da80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da84:	f002 be2e 	b.w	80106e4 <_fflush_r>
 800da88:	bd10      	pop	{r4, pc}
 800da8a:	bf00      	nop
 800da8c:	200034c0 	.word	0x200034c0
 800da90:	20003528 	.word	0x20003528
 800da94:	20003590 	.word	0x20003590

0800da98 <global_stdio_init.part.0>:
 800da98:	b510      	push	{r4, lr}
 800da9a:	4b0b      	ldr	r3, [pc, #44]	@ (800dac8 <global_stdio_init.part.0+0x30>)
 800da9c:	4c0b      	ldr	r4, [pc, #44]	@ (800dacc <global_stdio_init.part.0+0x34>)
 800da9e:	4a0c      	ldr	r2, [pc, #48]	@ (800dad0 <global_stdio_init.part.0+0x38>)
 800daa0:	601a      	str	r2, [r3, #0]
 800daa2:	4620      	mov	r0, r4
 800daa4:	2200      	movs	r2, #0
 800daa6:	2104      	movs	r1, #4
 800daa8:	f7ff ff94 	bl	800d9d4 <std>
 800daac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dab0:	2201      	movs	r2, #1
 800dab2:	2109      	movs	r1, #9
 800dab4:	f7ff ff8e 	bl	800d9d4 <std>
 800dab8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dabc:	2202      	movs	r2, #2
 800dabe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dac2:	2112      	movs	r1, #18
 800dac4:	f7ff bf86 	b.w	800d9d4 <std>
 800dac8:	200035f8 	.word	0x200035f8
 800dacc:	200034c0 	.word	0x200034c0
 800dad0:	0800da41 	.word	0x0800da41

0800dad4 <__sfp_lock_acquire>:
 800dad4:	4801      	ldr	r0, [pc, #4]	@ (800dadc <__sfp_lock_acquire+0x8>)
 800dad6:	f000 b990 	b.w	800ddfa <__retarget_lock_acquire_recursive>
 800dada:	bf00      	nop
 800dadc:	20003601 	.word	0x20003601

0800dae0 <__sfp_lock_release>:
 800dae0:	4801      	ldr	r0, [pc, #4]	@ (800dae8 <__sfp_lock_release+0x8>)
 800dae2:	f000 b98b 	b.w	800ddfc <__retarget_lock_release_recursive>
 800dae6:	bf00      	nop
 800dae8:	20003601 	.word	0x20003601

0800daec <__sinit>:
 800daec:	b510      	push	{r4, lr}
 800daee:	4604      	mov	r4, r0
 800daf0:	f7ff fff0 	bl	800dad4 <__sfp_lock_acquire>
 800daf4:	6a23      	ldr	r3, [r4, #32]
 800daf6:	b11b      	cbz	r3, 800db00 <__sinit+0x14>
 800daf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dafc:	f7ff bff0 	b.w	800dae0 <__sfp_lock_release>
 800db00:	4b04      	ldr	r3, [pc, #16]	@ (800db14 <__sinit+0x28>)
 800db02:	6223      	str	r3, [r4, #32]
 800db04:	4b04      	ldr	r3, [pc, #16]	@ (800db18 <__sinit+0x2c>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d1f5      	bne.n	800daf8 <__sinit+0xc>
 800db0c:	f7ff ffc4 	bl	800da98 <global_stdio_init.part.0>
 800db10:	e7f2      	b.n	800daf8 <__sinit+0xc>
 800db12:	bf00      	nop
 800db14:	0800da59 	.word	0x0800da59
 800db18:	200035f8 	.word	0x200035f8

0800db1c <_fwalk_sglue>:
 800db1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db20:	4607      	mov	r7, r0
 800db22:	4688      	mov	r8, r1
 800db24:	4614      	mov	r4, r2
 800db26:	2600      	movs	r6, #0
 800db28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800db2c:	f1b9 0901 	subs.w	r9, r9, #1
 800db30:	d505      	bpl.n	800db3e <_fwalk_sglue+0x22>
 800db32:	6824      	ldr	r4, [r4, #0]
 800db34:	2c00      	cmp	r4, #0
 800db36:	d1f7      	bne.n	800db28 <_fwalk_sglue+0xc>
 800db38:	4630      	mov	r0, r6
 800db3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db3e:	89ab      	ldrh	r3, [r5, #12]
 800db40:	2b01      	cmp	r3, #1
 800db42:	d907      	bls.n	800db54 <_fwalk_sglue+0x38>
 800db44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800db48:	3301      	adds	r3, #1
 800db4a:	d003      	beq.n	800db54 <_fwalk_sglue+0x38>
 800db4c:	4629      	mov	r1, r5
 800db4e:	4638      	mov	r0, r7
 800db50:	47c0      	blx	r8
 800db52:	4306      	orrs	r6, r0
 800db54:	3568      	adds	r5, #104	@ 0x68
 800db56:	e7e9      	b.n	800db2c <_fwalk_sglue+0x10>

0800db58 <siprintf>:
 800db58:	b40e      	push	{r1, r2, r3}
 800db5a:	b500      	push	{lr}
 800db5c:	b09c      	sub	sp, #112	@ 0x70
 800db5e:	ab1d      	add	r3, sp, #116	@ 0x74
 800db60:	9002      	str	r0, [sp, #8]
 800db62:	9006      	str	r0, [sp, #24]
 800db64:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800db68:	4809      	ldr	r0, [pc, #36]	@ (800db90 <siprintf+0x38>)
 800db6a:	9107      	str	r1, [sp, #28]
 800db6c:	9104      	str	r1, [sp, #16]
 800db6e:	4909      	ldr	r1, [pc, #36]	@ (800db94 <siprintf+0x3c>)
 800db70:	f853 2b04 	ldr.w	r2, [r3], #4
 800db74:	9105      	str	r1, [sp, #20]
 800db76:	6800      	ldr	r0, [r0, #0]
 800db78:	9301      	str	r3, [sp, #4]
 800db7a:	a902      	add	r1, sp, #8
 800db7c:	f002 fc32 	bl	80103e4 <_svfiprintf_r>
 800db80:	9b02      	ldr	r3, [sp, #8]
 800db82:	2200      	movs	r2, #0
 800db84:	701a      	strb	r2, [r3, #0]
 800db86:	b01c      	add	sp, #112	@ 0x70
 800db88:	f85d eb04 	ldr.w	lr, [sp], #4
 800db8c:	b003      	add	sp, #12
 800db8e:	4770      	bx	lr
 800db90:	20000030 	.word	0x20000030
 800db94:	ffff0208 	.word	0xffff0208

0800db98 <__sread>:
 800db98:	b510      	push	{r4, lr}
 800db9a:	460c      	mov	r4, r1
 800db9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dba0:	f000 f8dc 	bl	800dd5c <_read_r>
 800dba4:	2800      	cmp	r0, #0
 800dba6:	bfab      	itete	ge
 800dba8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dbaa:	89a3      	ldrhlt	r3, [r4, #12]
 800dbac:	181b      	addge	r3, r3, r0
 800dbae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dbb2:	bfac      	ite	ge
 800dbb4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dbb6:	81a3      	strhlt	r3, [r4, #12]
 800dbb8:	bd10      	pop	{r4, pc}

0800dbba <__swrite>:
 800dbba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbbe:	461f      	mov	r7, r3
 800dbc0:	898b      	ldrh	r3, [r1, #12]
 800dbc2:	05db      	lsls	r3, r3, #23
 800dbc4:	4605      	mov	r5, r0
 800dbc6:	460c      	mov	r4, r1
 800dbc8:	4616      	mov	r6, r2
 800dbca:	d505      	bpl.n	800dbd8 <__swrite+0x1e>
 800dbcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbd0:	2302      	movs	r3, #2
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	f000 f8b0 	bl	800dd38 <_lseek_r>
 800dbd8:	89a3      	ldrh	r3, [r4, #12]
 800dbda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dbe2:	81a3      	strh	r3, [r4, #12]
 800dbe4:	4632      	mov	r2, r6
 800dbe6:	463b      	mov	r3, r7
 800dbe8:	4628      	mov	r0, r5
 800dbea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbee:	f000 b8c7 	b.w	800dd80 <_write_r>

0800dbf2 <__sseek>:
 800dbf2:	b510      	push	{r4, lr}
 800dbf4:	460c      	mov	r4, r1
 800dbf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbfa:	f000 f89d 	bl	800dd38 <_lseek_r>
 800dbfe:	1c43      	adds	r3, r0, #1
 800dc00:	89a3      	ldrh	r3, [r4, #12]
 800dc02:	bf15      	itete	ne
 800dc04:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dc06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dc0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dc0e:	81a3      	strheq	r3, [r4, #12]
 800dc10:	bf18      	it	ne
 800dc12:	81a3      	strhne	r3, [r4, #12]
 800dc14:	bd10      	pop	{r4, pc}

0800dc16 <__sclose>:
 800dc16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc1a:	f000 b827 	b.w	800dc6c <_close_r>

0800dc1e <memmove>:
 800dc1e:	4288      	cmp	r0, r1
 800dc20:	b510      	push	{r4, lr}
 800dc22:	eb01 0402 	add.w	r4, r1, r2
 800dc26:	d902      	bls.n	800dc2e <memmove+0x10>
 800dc28:	4284      	cmp	r4, r0
 800dc2a:	4623      	mov	r3, r4
 800dc2c:	d807      	bhi.n	800dc3e <memmove+0x20>
 800dc2e:	1e43      	subs	r3, r0, #1
 800dc30:	42a1      	cmp	r1, r4
 800dc32:	d008      	beq.n	800dc46 <memmove+0x28>
 800dc34:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc38:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc3c:	e7f8      	b.n	800dc30 <memmove+0x12>
 800dc3e:	4402      	add	r2, r0
 800dc40:	4601      	mov	r1, r0
 800dc42:	428a      	cmp	r2, r1
 800dc44:	d100      	bne.n	800dc48 <memmove+0x2a>
 800dc46:	bd10      	pop	{r4, pc}
 800dc48:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc4c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dc50:	e7f7      	b.n	800dc42 <memmove+0x24>

0800dc52 <memset>:
 800dc52:	4402      	add	r2, r0
 800dc54:	4603      	mov	r3, r0
 800dc56:	4293      	cmp	r3, r2
 800dc58:	d100      	bne.n	800dc5c <memset+0xa>
 800dc5a:	4770      	bx	lr
 800dc5c:	f803 1b01 	strb.w	r1, [r3], #1
 800dc60:	e7f9      	b.n	800dc56 <memset+0x4>
	...

0800dc64 <_localeconv_r>:
 800dc64:	4800      	ldr	r0, [pc, #0]	@ (800dc68 <_localeconv_r+0x4>)
 800dc66:	4770      	bx	lr
 800dc68:	20000170 	.word	0x20000170

0800dc6c <_close_r>:
 800dc6c:	b538      	push	{r3, r4, r5, lr}
 800dc6e:	4d06      	ldr	r5, [pc, #24]	@ (800dc88 <_close_r+0x1c>)
 800dc70:	2300      	movs	r3, #0
 800dc72:	4604      	mov	r4, r0
 800dc74:	4608      	mov	r0, r1
 800dc76:	602b      	str	r3, [r5, #0]
 800dc78:	f7f6 f964 	bl	8003f44 <_close>
 800dc7c:	1c43      	adds	r3, r0, #1
 800dc7e:	d102      	bne.n	800dc86 <_close_r+0x1a>
 800dc80:	682b      	ldr	r3, [r5, #0]
 800dc82:	b103      	cbz	r3, 800dc86 <_close_r+0x1a>
 800dc84:	6023      	str	r3, [r4, #0]
 800dc86:	bd38      	pop	{r3, r4, r5, pc}
 800dc88:	200035fc 	.word	0x200035fc

0800dc8c <_reclaim_reent>:
 800dc8c:	4b29      	ldr	r3, [pc, #164]	@ (800dd34 <_reclaim_reent+0xa8>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	4283      	cmp	r3, r0
 800dc92:	b570      	push	{r4, r5, r6, lr}
 800dc94:	4604      	mov	r4, r0
 800dc96:	d04b      	beq.n	800dd30 <_reclaim_reent+0xa4>
 800dc98:	69c3      	ldr	r3, [r0, #28]
 800dc9a:	b1ab      	cbz	r3, 800dcc8 <_reclaim_reent+0x3c>
 800dc9c:	68db      	ldr	r3, [r3, #12]
 800dc9e:	b16b      	cbz	r3, 800dcbc <_reclaim_reent+0x30>
 800dca0:	2500      	movs	r5, #0
 800dca2:	69e3      	ldr	r3, [r4, #28]
 800dca4:	68db      	ldr	r3, [r3, #12]
 800dca6:	5959      	ldr	r1, [r3, r5]
 800dca8:	2900      	cmp	r1, #0
 800dcaa:	d13b      	bne.n	800dd24 <_reclaim_reent+0x98>
 800dcac:	3504      	adds	r5, #4
 800dcae:	2d80      	cmp	r5, #128	@ 0x80
 800dcb0:	d1f7      	bne.n	800dca2 <_reclaim_reent+0x16>
 800dcb2:	69e3      	ldr	r3, [r4, #28]
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	68d9      	ldr	r1, [r3, #12]
 800dcb8:	f000 ff02 	bl	800eac0 <_free_r>
 800dcbc:	69e3      	ldr	r3, [r4, #28]
 800dcbe:	6819      	ldr	r1, [r3, #0]
 800dcc0:	b111      	cbz	r1, 800dcc8 <_reclaim_reent+0x3c>
 800dcc2:	4620      	mov	r0, r4
 800dcc4:	f000 fefc 	bl	800eac0 <_free_r>
 800dcc8:	6961      	ldr	r1, [r4, #20]
 800dcca:	b111      	cbz	r1, 800dcd2 <_reclaim_reent+0x46>
 800dccc:	4620      	mov	r0, r4
 800dcce:	f000 fef7 	bl	800eac0 <_free_r>
 800dcd2:	69e1      	ldr	r1, [r4, #28]
 800dcd4:	b111      	cbz	r1, 800dcdc <_reclaim_reent+0x50>
 800dcd6:	4620      	mov	r0, r4
 800dcd8:	f000 fef2 	bl	800eac0 <_free_r>
 800dcdc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800dcde:	b111      	cbz	r1, 800dce6 <_reclaim_reent+0x5a>
 800dce0:	4620      	mov	r0, r4
 800dce2:	f000 feed 	bl	800eac0 <_free_r>
 800dce6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dce8:	b111      	cbz	r1, 800dcf0 <_reclaim_reent+0x64>
 800dcea:	4620      	mov	r0, r4
 800dcec:	f000 fee8 	bl	800eac0 <_free_r>
 800dcf0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800dcf2:	b111      	cbz	r1, 800dcfa <_reclaim_reent+0x6e>
 800dcf4:	4620      	mov	r0, r4
 800dcf6:	f000 fee3 	bl	800eac0 <_free_r>
 800dcfa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800dcfc:	b111      	cbz	r1, 800dd04 <_reclaim_reent+0x78>
 800dcfe:	4620      	mov	r0, r4
 800dd00:	f000 fede 	bl	800eac0 <_free_r>
 800dd04:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800dd06:	b111      	cbz	r1, 800dd0e <_reclaim_reent+0x82>
 800dd08:	4620      	mov	r0, r4
 800dd0a:	f000 fed9 	bl	800eac0 <_free_r>
 800dd0e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800dd10:	b111      	cbz	r1, 800dd18 <_reclaim_reent+0x8c>
 800dd12:	4620      	mov	r0, r4
 800dd14:	f000 fed4 	bl	800eac0 <_free_r>
 800dd18:	6a23      	ldr	r3, [r4, #32]
 800dd1a:	b14b      	cbz	r3, 800dd30 <_reclaim_reent+0xa4>
 800dd1c:	4620      	mov	r0, r4
 800dd1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dd22:	4718      	bx	r3
 800dd24:	680e      	ldr	r6, [r1, #0]
 800dd26:	4620      	mov	r0, r4
 800dd28:	f000 feca 	bl	800eac0 <_free_r>
 800dd2c:	4631      	mov	r1, r6
 800dd2e:	e7bb      	b.n	800dca8 <_reclaim_reent+0x1c>
 800dd30:	bd70      	pop	{r4, r5, r6, pc}
 800dd32:	bf00      	nop
 800dd34:	20000030 	.word	0x20000030

0800dd38 <_lseek_r>:
 800dd38:	b538      	push	{r3, r4, r5, lr}
 800dd3a:	4d07      	ldr	r5, [pc, #28]	@ (800dd58 <_lseek_r+0x20>)
 800dd3c:	4604      	mov	r4, r0
 800dd3e:	4608      	mov	r0, r1
 800dd40:	4611      	mov	r1, r2
 800dd42:	2200      	movs	r2, #0
 800dd44:	602a      	str	r2, [r5, #0]
 800dd46:	461a      	mov	r2, r3
 800dd48:	f7f6 f923 	bl	8003f92 <_lseek>
 800dd4c:	1c43      	adds	r3, r0, #1
 800dd4e:	d102      	bne.n	800dd56 <_lseek_r+0x1e>
 800dd50:	682b      	ldr	r3, [r5, #0]
 800dd52:	b103      	cbz	r3, 800dd56 <_lseek_r+0x1e>
 800dd54:	6023      	str	r3, [r4, #0]
 800dd56:	bd38      	pop	{r3, r4, r5, pc}
 800dd58:	200035fc 	.word	0x200035fc

0800dd5c <_read_r>:
 800dd5c:	b538      	push	{r3, r4, r5, lr}
 800dd5e:	4d07      	ldr	r5, [pc, #28]	@ (800dd7c <_read_r+0x20>)
 800dd60:	4604      	mov	r4, r0
 800dd62:	4608      	mov	r0, r1
 800dd64:	4611      	mov	r1, r2
 800dd66:	2200      	movs	r2, #0
 800dd68:	602a      	str	r2, [r5, #0]
 800dd6a:	461a      	mov	r2, r3
 800dd6c:	f7f6 f8b1 	bl	8003ed2 <_read>
 800dd70:	1c43      	adds	r3, r0, #1
 800dd72:	d102      	bne.n	800dd7a <_read_r+0x1e>
 800dd74:	682b      	ldr	r3, [r5, #0]
 800dd76:	b103      	cbz	r3, 800dd7a <_read_r+0x1e>
 800dd78:	6023      	str	r3, [r4, #0]
 800dd7a:	bd38      	pop	{r3, r4, r5, pc}
 800dd7c:	200035fc 	.word	0x200035fc

0800dd80 <_write_r>:
 800dd80:	b538      	push	{r3, r4, r5, lr}
 800dd82:	4d07      	ldr	r5, [pc, #28]	@ (800dda0 <_write_r+0x20>)
 800dd84:	4604      	mov	r4, r0
 800dd86:	4608      	mov	r0, r1
 800dd88:	4611      	mov	r1, r2
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	602a      	str	r2, [r5, #0]
 800dd8e:	461a      	mov	r2, r3
 800dd90:	f7f6 f8bc 	bl	8003f0c <_write>
 800dd94:	1c43      	adds	r3, r0, #1
 800dd96:	d102      	bne.n	800dd9e <_write_r+0x1e>
 800dd98:	682b      	ldr	r3, [r5, #0]
 800dd9a:	b103      	cbz	r3, 800dd9e <_write_r+0x1e>
 800dd9c:	6023      	str	r3, [r4, #0]
 800dd9e:	bd38      	pop	{r3, r4, r5, pc}
 800dda0:	200035fc 	.word	0x200035fc

0800dda4 <__errno>:
 800dda4:	4b01      	ldr	r3, [pc, #4]	@ (800ddac <__errno+0x8>)
 800dda6:	6818      	ldr	r0, [r3, #0]
 800dda8:	4770      	bx	lr
 800ddaa:	bf00      	nop
 800ddac:	20000030 	.word	0x20000030

0800ddb0 <__libc_init_array>:
 800ddb0:	b570      	push	{r4, r5, r6, lr}
 800ddb2:	4d0d      	ldr	r5, [pc, #52]	@ (800dde8 <__libc_init_array+0x38>)
 800ddb4:	4c0d      	ldr	r4, [pc, #52]	@ (800ddec <__libc_init_array+0x3c>)
 800ddb6:	1b64      	subs	r4, r4, r5
 800ddb8:	10a4      	asrs	r4, r4, #2
 800ddba:	2600      	movs	r6, #0
 800ddbc:	42a6      	cmp	r6, r4
 800ddbe:	d109      	bne.n	800ddd4 <__libc_init_array+0x24>
 800ddc0:	4d0b      	ldr	r5, [pc, #44]	@ (800ddf0 <__libc_init_array+0x40>)
 800ddc2:	4c0c      	ldr	r4, [pc, #48]	@ (800ddf4 <__libc_init_array+0x44>)
 800ddc4:	f004 fab6 	bl	8012334 <_init>
 800ddc8:	1b64      	subs	r4, r4, r5
 800ddca:	10a4      	asrs	r4, r4, #2
 800ddcc:	2600      	movs	r6, #0
 800ddce:	42a6      	cmp	r6, r4
 800ddd0:	d105      	bne.n	800ddde <__libc_init_array+0x2e>
 800ddd2:	bd70      	pop	{r4, r5, r6, pc}
 800ddd4:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddd8:	4798      	blx	r3
 800ddda:	3601      	adds	r6, #1
 800dddc:	e7ee      	b.n	800ddbc <__libc_init_array+0xc>
 800ddde:	f855 3b04 	ldr.w	r3, [r5], #4
 800dde2:	4798      	blx	r3
 800dde4:	3601      	adds	r6, #1
 800dde6:	e7f2      	b.n	800ddce <__libc_init_array+0x1e>
 800dde8:	08013f68 	.word	0x08013f68
 800ddec:	08013f68 	.word	0x08013f68
 800ddf0:	08013f68 	.word	0x08013f68
 800ddf4:	08013f6c 	.word	0x08013f6c

0800ddf8 <__retarget_lock_init_recursive>:
 800ddf8:	4770      	bx	lr

0800ddfa <__retarget_lock_acquire_recursive>:
 800ddfa:	4770      	bx	lr

0800ddfc <__retarget_lock_release_recursive>:
 800ddfc:	4770      	bx	lr

0800ddfe <memcpy>:
 800ddfe:	440a      	add	r2, r1
 800de00:	4291      	cmp	r1, r2
 800de02:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800de06:	d100      	bne.n	800de0a <memcpy+0xc>
 800de08:	4770      	bx	lr
 800de0a:	b510      	push	{r4, lr}
 800de0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de10:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de14:	4291      	cmp	r1, r2
 800de16:	d1f9      	bne.n	800de0c <memcpy+0xe>
 800de18:	bd10      	pop	{r4, pc}
	...

0800de1c <nanf>:
 800de1c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800de24 <nanf+0x8>
 800de20:	4770      	bx	lr
 800de22:	bf00      	nop
 800de24:	7fc00000 	.word	0x7fc00000

0800de28 <quorem>:
 800de28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de2c:	6903      	ldr	r3, [r0, #16]
 800de2e:	690c      	ldr	r4, [r1, #16]
 800de30:	42a3      	cmp	r3, r4
 800de32:	4607      	mov	r7, r0
 800de34:	db7e      	blt.n	800df34 <quorem+0x10c>
 800de36:	3c01      	subs	r4, #1
 800de38:	f101 0814 	add.w	r8, r1, #20
 800de3c:	00a3      	lsls	r3, r4, #2
 800de3e:	f100 0514 	add.w	r5, r0, #20
 800de42:	9300      	str	r3, [sp, #0]
 800de44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de48:	9301      	str	r3, [sp, #4]
 800de4a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800de4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de52:	3301      	adds	r3, #1
 800de54:	429a      	cmp	r2, r3
 800de56:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800de5a:	fbb2 f6f3 	udiv	r6, r2, r3
 800de5e:	d32e      	bcc.n	800debe <quorem+0x96>
 800de60:	f04f 0a00 	mov.w	sl, #0
 800de64:	46c4      	mov	ip, r8
 800de66:	46ae      	mov	lr, r5
 800de68:	46d3      	mov	fp, sl
 800de6a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800de6e:	b298      	uxth	r0, r3
 800de70:	fb06 a000 	mla	r0, r6, r0, sl
 800de74:	0c02      	lsrs	r2, r0, #16
 800de76:	0c1b      	lsrs	r3, r3, #16
 800de78:	fb06 2303 	mla	r3, r6, r3, r2
 800de7c:	f8de 2000 	ldr.w	r2, [lr]
 800de80:	b280      	uxth	r0, r0
 800de82:	b292      	uxth	r2, r2
 800de84:	1a12      	subs	r2, r2, r0
 800de86:	445a      	add	r2, fp
 800de88:	f8de 0000 	ldr.w	r0, [lr]
 800de8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de90:	b29b      	uxth	r3, r3
 800de92:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800de96:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800de9a:	b292      	uxth	r2, r2
 800de9c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dea0:	45e1      	cmp	r9, ip
 800dea2:	f84e 2b04 	str.w	r2, [lr], #4
 800dea6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800deaa:	d2de      	bcs.n	800de6a <quorem+0x42>
 800deac:	9b00      	ldr	r3, [sp, #0]
 800deae:	58eb      	ldr	r3, [r5, r3]
 800deb0:	b92b      	cbnz	r3, 800debe <quorem+0x96>
 800deb2:	9b01      	ldr	r3, [sp, #4]
 800deb4:	3b04      	subs	r3, #4
 800deb6:	429d      	cmp	r5, r3
 800deb8:	461a      	mov	r2, r3
 800deba:	d32f      	bcc.n	800df1c <quorem+0xf4>
 800debc:	613c      	str	r4, [r7, #16]
 800debe:	4638      	mov	r0, r7
 800dec0:	f001 f9c2 	bl	800f248 <__mcmp>
 800dec4:	2800      	cmp	r0, #0
 800dec6:	db25      	blt.n	800df14 <quorem+0xec>
 800dec8:	4629      	mov	r1, r5
 800deca:	2000      	movs	r0, #0
 800decc:	f858 2b04 	ldr.w	r2, [r8], #4
 800ded0:	f8d1 c000 	ldr.w	ip, [r1]
 800ded4:	fa1f fe82 	uxth.w	lr, r2
 800ded8:	fa1f f38c 	uxth.w	r3, ip
 800dedc:	eba3 030e 	sub.w	r3, r3, lr
 800dee0:	4403      	add	r3, r0
 800dee2:	0c12      	lsrs	r2, r2, #16
 800dee4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dee8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800deec:	b29b      	uxth	r3, r3
 800deee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800def2:	45c1      	cmp	r9, r8
 800def4:	f841 3b04 	str.w	r3, [r1], #4
 800def8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800defc:	d2e6      	bcs.n	800decc <quorem+0xa4>
 800defe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800df02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800df06:	b922      	cbnz	r2, 800df12 <quorem+0xea>
 800df08:	3b04      	subs	r3, #4
 800df0a:	429d      	cmp	r5, r3
 800df0c:	461a      	mov	r2, r3
 800df0e:	d30b      	bcc.n	800df28 <quorem+0x100>
 800df10:	613c      	str	r4, [r7, #16]
 800df12:	3601      	adds	r6, #1
 800df14:	4630      	mov	r0, r6
 800df16:	b003      	add	sp, #12
 800df18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df1c:	6812      	ldr	r2, [r2, #0]
 800df1e:	3b04      	subs	r3, #4
 800df20:	2a00      	cmp	r2, #0
 800df22:	d1cb      	bne.n	800debc <quorem+0x94>
 800df24:	3c01      	subs	r4, #1
 800df26:	e7c6      	b.n	800deb6 <quorem+0x8e>
 800df28:	6812      	ldr	r2, [r2, #0]
 800df2a:	3b04      	subs	r3, #4
 800df2c:	2a00      	cmp	r2, #0
 800df2e:	d1ef      	bne.n	800df10 <quorem+0xe8>
 800df30:	3c01      	subs	r4, #1
 800df32:	e7ea      	b.n	800df0a <quorem+0xe2>
 800df34:	2000      	movs	r0, #0
 800df36:	e7ee      	b.n	800df16 <quorem+0xee>

0800df38 <_dtoa_r>:
 800df38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df3c:	69c7      	ldr	r7, [r0, #28]
 800df3e:	b099      	sub	sp, #100	@ 0x64
 800df40:	ed8d 0b02 	vstr	d0, [sp, #8]
 800df44:	ec55 4b10 	vmov	r4, r5, d0
 800df48:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800df4a:	9109      	str	r1, [sp, #36]	@ 0x24
 800df4c:	4683      	mov	fp, r0
 800df4e:	920e      	str	r2, [sp, #56]	@ 0x38
 800df50:	9313      	str	r3, [sp, #76]	@ 0x4c
 800df52:	b97f      	cbnz	r7, 800df74 <_dtoa_r+0x3c>
 800df54:	2010      	movs	r0, #16
 800df56:	f000 fdfd 	bl	800eb54 <malloc>
 800df5a:	4602      	mov	r2, r0
 800df5c:	f8cb 001c 	str.w	r0, [fp, #28]
 800df60:	b920      	cbnz	r0, 800df6c <_dtoa_r+0x34>
 800df62:	4ba7      	ldr	r3, [pc, #668]	@ (800e200 <_dtoa_r+0x2c8>)
 800df64:	21ef      	movs	r1, #239	@ 0xef
 800df66:	48a7      	ldr	r0, [pc, #668]	@ (800e204 <_dtoa_r+0x2cc>)
 800df68:	f002 fc0e 	bl	8010788 <__assert_func>
 800df6c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800df70:	6007      	str	r7, [r0, #0]
 800df72:	60c7      	str	r7, [r0, #12]
 800df74:	f8db 301c 	ldr.w	r3, [fp, #28]
 800df78:	6819      	ldr	r1, [r3, #0]
 800df7a:	b159      	cbz	r1, 800df94 <_dtoa_r+0x5c>
 800df7c:	685a      	ldr	r2, [r3, #4]
 800df7e:	604a      	str	r2, [r1, #4]
 800df80:	2301      	movs	r3, #1
 800df82:	4093      	lsls	r3, r2
 800df84:	608b      	str	r3, [r1, #8]
 800df86:	4658      	mov	r0, fp
 800df88:	f000 feda 	bl	800ed40 <_Bfree>
 800df8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800df90:	2200      	movs	r2, #0
 800df92:	601a      	str	r2, [r3, #0]
 800df94:	1e2b      	subs	r3, r5, #0
 800df96:	bfb9      	ittee	lt
 800df98:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800df9c:	9303      	strlt	r3, [sp, #12]
 800df9e:	2300      	movge	r3, #0
 800dfa0:	6033      	strge	r3, [r6, #0]
 800dfa2:	9f03      	ldr	r7, [sp, #12]
 800dfa4:	4b98      	ldr	r3, [pc, #608]	@ (800e208 <_dtoa_r+0x2d0>)
 800dfa6:	bfbc      	itt	lt
 800dfa8:	2201      	movlt	r2, #1
 800dfaa:	6032      	strlt	r2, [r6, #0]
 800dfac:	43bb      	bics	r3, r7
 800dfae:	d112      	bne.n	800dfd6 <_dtoa_r+0x9e>
 800dfb0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dfb2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dfb6:	6013      	str	r3, [r2, #0]
 800dfb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dfbc:	4323      	orrs	r3, r4
 800dfbe:	f000 854d 	beq.w	800ea5c <_dtoa_r+0xb24>
 800dfc2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dfc4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e21c <_dtoa_r+0x2e4>
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	f000 854f 	beq.w	800ea6c <_dtoa_r+0xb34>
 800dfce:	f10a 0303 	add.w	r3, sl, #3
 800dfd2:	f000 bd49 	b.w	800ea68 <_dtoa_r+0xb30>
 800dfd6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dfda:	2200      	movs	r2, #0
 800dfdc:	ec51 0b17 	vmov	r0, r1, d7
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800dfe6:	f7f2 fd77 	bl	8000ad8 <__aeabi_dcmpeq>
 800dfea:	4680      	mov	r8, r0
 800dfec:	b158      	cbz	r0, 800e006 <_dtoa_r+0xce>
 800dfee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dff0:	2301      	movs	r3, #1
 800dff2:	6013      	str	r3, [r2, #0]
 800dff4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dff6:	b113      	cbz	r3, 800dffe <_dtoa_r+0xc6>
 800dff8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dffa:	4b84      	ldr	r3, [pc, #528]	@ (800e20c <_dtoa_r+0x2d4>)
 800dffc:	6013      	str	r3, [r2, #0]
 800dffe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e220 <_dtoa_r+0x2e8>
 800e002:	f000 bd33 	b.w	800ea6c <_dtoa_r+0xb34>
 800e006:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e00a:	aa16      	add	r2, sp, #88	@ 0x58
 800e00c:	a917      	add	r1, sp, #92	@ 0x5c
 800e00e:	4658      	mov	r0, fp
 800e010:	f001 fa3a 	bl	800f488 <__d2b>
 800e014:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e018:	4681      	mov	r9, r0
 800e01a:	2e00      	cmp	r6, #0
 800e01c:	d077      	beq.n	800e10e <_dtoa_r+0x1d6>
 800e01e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e020:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e024:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e028:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e02c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e030:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e034:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e038:	4619      	mov	r1, r3
 800e03a:	2200      	movs	r2, #0
 800e03c:	4b74      	ldr	r3, [pc, #464]	@ (800e210 <_dtoa_r+0x2d8>)
 800e03e:	f7f2 f92b 	bl	8000298 <__aeabi_dsub>
 800e042:	a369      	add	r3, pc, #420	@ (adr r3, 800e1e8 <_dtoa_r+0x2b0>)
 800e044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e048:	f7f2 fade 	bl	8000608 <__aeabi_dmul>
 800e04c:	a368      	add	r3, pc, #416	@ (adr r3, 800e1f0 <_dtoa_r+0x2b8>)
 800e04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e052:	f7f2 f923 	bl	800029c <__adddf3>
 800e056:	4604      	mov	r4, r0
 800e058:	4630      	mov	r0, r6
 800e05a:	460d      	mov	r5, r1
 800e05c:	f7f2 fa6a 	bl	8000534 <__aeabi_i2d>
 800e060:	a365      	add	r3, pc, #404	@ (adr r3, 800e1f8 <_dtoa_r+0x2c0>)
 800e062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e066:	f7f2 facf 	bl	8000608 <__aeabi_dmul>
 800e06a:	4602      	mov	r2, r0
 800e06c:	460b      	mov	r3, r1
 800e06e:	4620      	mov	r0, r4
 800e070:	4629      	mov	r1, r5
 800e072:	f7f2 f913 	bl	800029c <__adddf3>
 800e076:	4604      	mov	r4, r0
 800e078:	460d      	mov	r5, r1
 800e07a:	f7f2 fd75 	bl	8000b68 <__aeabi_d2iz>
 800e07e:	2200      	movs	r2, #0
 800e080:	4607      	mov	r7, r0
 800e082:	2300      	movs	r3, #0
 800e084:	4620      	mov	r0, r4
 800e086:	4629      	mov	r1, r5
 800e088:	f7f2 fd30 	bl	8000aec <__aeabi_dcmplt>
 800e08c:	b140      	cbz	r0, 800e0a0 <_dtoa_r+0x168>
 800e08e:	4638      	mov	r0, r7
 800e090:	f7f2 fa50 	bl	8000534 <__aeabi_i2d>
 800e094:	4622      	mov	r2, r4
 800e096:	462b      	mov	r3, r5
 800e098:	f7f2 fd1e 	bl	8000ad8 <__aeabi_dcmpeq>
 800e09c:	b900      	cbnz	r0, 800e0a0 <_dtoa_r+0x168>
 800e09e:	3f01      	subs	r7, #1
 800e0a0:	2f16      	cmp	r7, #22
 800e0a2:	d851      	bhi.n	800e148 <_dtoa_r+0x210>
 800e0a4:	4b5b      	ldr	r3, [pc, #364]	@ (800e214 <_dtoa_r+0x2dc>)
 800e0a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e0b2:	f7f2 fd1b 	bl	8000aec <__aeabi_dcmplt>
 800e0b6:	2800      	cmp	r0, #0
 800e0b8:	d048      	beq.n	800e14c <_dtoa_r+0x214>
 800e0ba:	3f01      	subs	r7, #1
 800e0bc:	2300      	movs	r3, #0
 800e0be:	9312      	str	r3, [sp, #72]	@ 0x48
 800e0c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e0c2:	1b9b      	subs	r3, r3, r6
 800e0c4:	1e5a      	subs	r2, r3, #1
 800e0c6:	bf44      	itt	mi
 800e0c8:	f1c3 0801 	rsbmi	r8, r3, #1
 800e0cc:	2300      	movmi	r3, #0
 800e0ce:	9208      	str	r2, [sp, #32]
 800e0d0:	bf54      	ite	pl
 800e0d2:	f04f 0800 	movpl.w	r8, #0
 800e0d6:	9308      	strmi	r3, [sp, #32]
 800e0d8:	2f00      	cmp	r7, #0
 800e0da:	db39      	blt.n	800e150 <_dtoa_r+0x218>
 800e0dc:	9b08      	ldr	r3, [sp, #32]
 800e0de:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e0e0:	443b      	add	r3, r7
 800e0e2:	9308      	str	r3, [sp, #32]
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e0e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0ea:	2b09      	cmp	r3, #9
 800e0ec:	d864      	bhi.n	800e1b8 <_dtoa_r+0x280>
 800e0ee:	2b05      	cmp	r3, #5
 800e0f0:	bfc4      	itt	gt
 800e0f2:	3b04      	subgt	r3, #4
 800e0f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e0f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0f8:	f1a3 0302 	sub.w	r3, r3, #2
 800e0fc:	bfcc      	ite	gt
 800e0fe:	2400      	movgt	r4, #0
 800e100:	2401      	movle	r4, #1
 800e102:	2b03      	cmp	r3, #3
 800e104:	d863      	bhi.n	800e1ce <_dtoa_r+0x296>
 800e106:	e8df f003 	tbb	[pc, r3]
 800e10a:	372a      	.short	0x372a
 800e10c:	5535      	.short	0x5535
 800e10e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e112:	441e      	add	r6, r3
 800e114:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e118:	2b20      	cmp	r3, #32
 800e11a:	bfc1      	itttt	gt
 800e11c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e120:	409f      	lslgt	r7, r3
 800e122:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e126:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e12a:	bfd6      	itet	le
 800e12c:	f1c3 0320 	rsble	r3, r3, #32
 800e130:	ea47 0003 	orrgt.w	r0, r7, r3
 800e134:	fa04 f003 	lslle.w	r0, r4, r3
 800e138:	f7f2 f9ec 	bl	8000514 <__aeabi_ui2d>
 800e13c:	2201      	movs	r2, #1
 800e13e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e142:	3e01      	subs	r6, #1
 800e144:	9214      	str	r2, [sp, #80]	@ 0x50
 800e146:	e777      	b.n	800e038 <_dtoa_r+0x100>
 800e148:	2301      	movs	r3, #1
 800e14a:	e7b8      	b.n	800e0be <_dtoa_r+0x186>
 800e14c:	9012      	str	r0, [sp, #72]	@ 0x48
 800e14e:	e7b7      	b.n	800e0c0 <_dtoa_r+0x188>
 800e150:	427b      	negs	r3, r7
 800e152:	930a      	str	r3, [sp, #40]	@ 0x28
 800e154:	2300      	movs	r3, #0
 800e156:	eba8 0807 	sub.w	r8, r8, r7
 800e15a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e15c:	e7c4      	b.n	800e0e8 <_dtoa_r+0x1b0>
 800e15e:	2300      	movs	r3, #0
 800e160:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e162:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e164:	2b00      	cmp	r3, #0
 800e166:	dc35      	bgt.n	800e1d4 <_dtoa_r+0x29c>
 800e168:	2301      	movs	r3, #1
 800e16a:	9300      	str	r3, [sp, #0]
 800e16c:	9307      	str	r3, [sp, #28]
 800e16e:	461a      	mov	r2, r3
 800e170:	920e      	str	r2, [sp, #56]	@ 0x38
 800e172:	e00b      	b.n	800e18c <_dtoa_r+0x254>
 800e174:	2301      	movs	r3, #1
 800e176:	e7f3      	b.n	800e160 <_dtoa_r+0x228>
 800e178:	2300      	movs	r3, #0
 800e17a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e17c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e17e:	18fb      	adds	r3, r7, r3
 800e180:	9300      	str	r3, [sp, #0]
 800e182:	3301      	adds	r3, #1
 800e184:	2b01      	cmp	r3, #1
 800e186:	9307      	str	r3, [sp, #28]
 800e188:	bfb8      	it	lt
 800e18a:	2301      	movlt	r3, #1
 800e18c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e190:	2100      	movs	r1, #0
 800e192:	2204      	movs	r2, #4
 800e194:	f102 0514 	add.w	r5, r2, #20
 800e198:	429d      	cmp	r5, r3
 800e19a:	d91f      	bls.n	800e1dc <_dtoa_r+0x2a4>
 800e19c:	6041      	str	r1, [r0, #4]
 800e19e:	4658      	mov	r0, fp
 800e1a0:	f000 fd8e 	bl	800ecc0 <_Balloc>
 800e1a4:	4682      	mov	sl, r0
 800e1a6:	2800      	cmp	r0, #0
 800e1a8:	d13c      	bne.n	800e224 <_dtoa_r+0x2ec>
 800e1aa:	4b1b      	ldr	r3, [pc, #108]	@ (800e218 <_dtoa_r+0x2e0>)
 800e1ac:	4602      	mov	r2, r0
 800e1ae:	f240 11af 	movw	r1, #431	@ 0x1af
 800e1b2:	e6d8      	b.n	800df66 <_dtoa_r+0x2e>
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	e7e0      	b.n	800e17a <_dtoa_r+0x242>
 800e1b8:	2401      	movs	r4, #1
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1be:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e1c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e1c4:	9300      	str	r3, [sp, #0]
 800e1c6:	9307      	str	r3, [sp, #28]
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	2312      	movs	r3, #18
 800e1cc:	e7d0      	b.n	800e170 <_dtoa_r+0x238>
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e1d2:	e7f5      	b.n	800e1c0 <_dtoa_r+0x288>
 800e1d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1d6:	9300      	str	r3, [sp, #0]
 800e1d8:	9307      	str	r3, [sp, #28]
 800e1da:	e7d7      	b.n	800e18c <_dtoa_r+0x254>
 800e1dc:	3101      	adds	r1, #1
 800e1de:	0052      	lsls	r2, r2, #1
 800e1e0:	e7d8      	b.n	800e194 <_dtoa_r+0x25c>
 800e1e2:	bf00      	nop
 800e1e4:	f3af 8000 	nop.w
 800e1e8:	636f4361 	.word	0x636f4361
 800e1ec:	3fd287a7 	.word	0x3fd287a7
 800e1f0:	8b60c8b3 	.word	0x8b60c8b3
 800e1f4:	3fc68a28 	.word	0x3fc68a28
 800e1f8:	509f79fb 	.word	0x509f79fb
 800e1fc:	3fd34413 	.word	0x3fd34413
 800e200:	08013b4a 	.word	0x08013b4a
 800e204:	08013b61 	.word	0x08013b61
 800e208:	7ff00000 	.word	0x7ff00000
 800e20c:	08013b15 	.word	0x08013b15
 800e210:	3ff80000 	.word	0x3ff80000
 800e214:	08013c58 	.word	0x08013c58
 800e218:	08013bb9 	.word	0x08013bb9
 800e21c:	08013b46 	.word	0x08013b46
 800e220:	08013b14 	.word	0x08013b14
 800e224:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e228:	6018      	str	r0, [r3, #0]
 800e22a:	9b07      	ldr	r3, [sp, #28]
 800e22c:	2b0e      	cmp	r3, #14
 800e22e:	f200 80a4 	bhi.w	800e37a <_dtoa_r+0x442>
 800e232:	2c00      	cmp	r4, #0
 800e234:	f000 80a1 	beq.w	800e37a <_dtoa_r+0x442>
 800e238:	2f00      	cmp	r7, #0
 800e23a:	dd33      	ble.n	800e2a4 <_dtoa_r+0x36c>
 800e23c:	4bad      	ldr	r3, [pc, #692]	@ (800e4f4 <_dtoa_r+0x5bc>)
 800e23e:	f007 020f 	and.w	r2, r7, #15
 800e242:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e246:	ed93 7b00 	vldr	d7, [r3]
 800e24a:	05f8      	lsls	r0, r7, #23
 800e24c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e250:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e254:	d516      	bpl.n	800e284 <_dtoa_r+0x34c>
 800e256:	4ba8      	ldr	r3, [pc, #672]	@ (800e4f8 <_dtoa_r+0x5c0>)
 800e258:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e25c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e260:	f7f2 fafc 	bl	800085c <__aeabi_ddiv>
 800e264:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e268:	f004 040f 	and.w	r4, r4, #15
 800e26c:	2603      	movs	r6, #3
 800e26e:	4da2      	ldr	r5, [pc, #648]	@ (800e4f8 <_dtoa_r+0x5c0>)
 800e270:	b954      	cbnz	r4, 800e288 <_dtoa_r+0x350>
 800e272:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e27a:	f7f2 faef 	bl	800085c <__aeabi_ddiv>
 800e27e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e282:	e028      	b.n	800e2d6 <_dtoa_r+0x39e>
 800e284:	2602      	movs	r6, #2
 800e286:	e7f2      	b.n	800e26e <_dtoa_r+0x336>
 800e288:	07e1      	lsls	r1, r4, #31
 800e28a:	d508      	bpl.n	800e29e <_dtoa_r+0x366>
 800e28c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e290:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e294:	f7f2 f9b8 	bl	8000608 <__aeabi_dmul>
 800e298:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e29c:	3601      	adds	r6, #1
 800e29e:	1064      	asrs	r4, r4, #1
 800e2a0:	3508      	adds	r5, #8
 800e2a2:	e7e5      	b.n	800e270 <_dtoa_r+0x338>
 800e2a4:	f000 80d2 	beq.w	800e44c <_dtoa_r+0x514>
 800e2a8:	427c      	negs	r4, r7
 800e2aa:	4b92      	ldr	r3, [pc, #584]	@ (800e4f4 <_dtoa_r+0x5bc>)
 800e2ac:	4d92      	ldr	r5, [pc, #584]	@ (800e4f8 <_dtoa_r+0x5c0>)
 800e2ae:	f004 020f 	and.w	r2, r4, #15
 800e2b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e2be:	f7f2 f9a3 	bl	8000608 <__aeabi_dmul>
 800e2c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2c6:	1124      	asrs	r4, r4, #4
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	2602      	movs	r6, #2
 800e2cc:	2c00      	cmp	r4, #0
 800e2ce:	f040 80b2 	bne.w	800e436 <_dtoa_r+0x4fe>
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d1d3      	bne.n	800e27e <_dtoa_r+0x346>
 800e2d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e2d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	f000 80b7 	beq.w	800e450 <_dtoa_r+0x518>
 800e2e2:	4b86      	ldr	r3, [pc, #536]	@ (800e4fc <_dtoa_r+0x5c4>)
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	4620      	mov	r0, r4
 800e2e8:	4629      	mov	r1, r5
 800e2ea:	f7f2 fbff 	bl	8000aec <__aeabi_dcmplt>
 800e2ee:	2800      	cmp	r0, #0
 800e2f0:	f000 80ae 	beq.w	800e450 <_dtoa_r+0x518>
 800e2f4:	9b07      	ldr	r3, [sp, #28]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	f000 80aa 	beq.w	800e450 <_dtoa_r+0x518>
 800e2fc:	9b00      	ldr	r3, [sp, #0]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	dd37      	ble.n	800e372 <_dtoa_r+0x43a>
 800e302:	1e7b      	subs	r3, r7, #1
 800e304:	9304      	str	r3, [sp, #16]
 800e306:	4620      	mov	r0, r4
 800e308:	4b7d      	ldr	r3, [pc, #500]	@ (800e500 <_dtoa_r+0x5c8>)
 800e30a:	2200      	movs	r2, #0
 800e30c:	4629      	mov	r1, r5
 800e30e:	f7f2 f97b 	bl	8000608 <__aeabi_dmul>
 800e312:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e316:	9c00      	ldr	r4, [sp, #0]
 800e318:	3601      	adds	r6, #1
 800e31a:	4630      	mov	r0, r6
 800e31c:	f7f2 f90a 	bl	8000534 <__aeabi_i2d>
 800e320:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e324:	f7f2 f970 	bl	8000608 <__aeabi_dmul>
 800e328:	4b76      	ldr	r3, [pc, #472]	@ (800e504 <_dtoa_r+0x5cc>)
 800e32a:	2200      	movs	r2, #0
 800e32c:	f7f1 ffb6 	bl	800029c <__adddf3>
 800e330:	4605      	mov	r5, r0
 800e332:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e336:	2c00      	cmp	r4, #0
 800e338:	f040 808d 	bne.w	800e456 <_dtoa_r+0x51e>
 800e33c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e340:	4b71      	ldr	r3, [pc, #452]	@ (800e508 <_dtoa_r+0x5d0>)
 800e342:	2200      	movs	r2, #0
 800e344:	f7f1 ffa8 	bl	8000298 <__aeabi_dsub>
 800e348:	4602      	mov	r2, r0
 800e34a:	460b      	mov	r3, r1
 800e34c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e350:	462a      	mov	r2, r5
 800e352:	4633      	mov	r3, r6
 800e354:	f7f2 fbe8 	bl	8000b28 <__aeabi_dcmpgt>
 800e358:	2800      	cmp	r0, #0
 800e35a:	f040 828b 	bne.w	800e874 <_dtoa_r+0x93c>
 800e35e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e362:	462a      	mov	r2, r5
 800e364:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e368:	f7f2 fbc0 	bl	8000aec <__aeabi_dcmplt>
 800e36c:	2800      	cmp	r0, #0
 800e36e:	f040 8128 	bne.w	800e5c2 <_dtoa_r+0x68a>
 800e372:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e376:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e37a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	f2c0 815a 	blt.w	800e636 <_dtoa_r+0x6fe>
 800e382:	2f0e      	cmp	r7, #14
 800e384:	f300 8157 	bgt.w	800e636 <_dtoa_r+0x6fe>
 800e388:	4b5a      	ldr	r3, [pc, #360]	@ (800e4f4 <_dtoa_r+0x5bc>)
 800e38a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e38e:	ed93 7b00 	vldr	d7, [r3]
 800e392:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e394:	2b00      	cmp	r3, #0
 800e396:	ed8d 7b00 	vstr	d7, [sp]
 800e39a:	da03      	bge.n	800e3a4 <_dtoa_r+0x46c>
 800e39c:	9b07      	ldr	r3, [sp, #28]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	f340 8101 	ble.w	800e5a6 <_dtoa_r+0x66e>
 800e3a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e3a8:	4656      	mov	r6, sl
 800e3aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3ae:	4620      	mov	r0, r4
 800e3b0:	4629      	mov	r1, r5
 800e3b2:	f7f2 fa53 	bl	800085c <__aeabi_ddiv>
 800e3b6:	f7f2 fbd7 	bl	8000b68 <__aeabi_d2iz>
 800e3ba:	4680      	mov	r8, r0
 800e3bc:	f7f2 f8ba 	bl	8000534 <__aeabi_i2d>
 800e3c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3c4:	f7f2 f920 	bl	8000608 <__aeabi_dmul>
 800e3c8:	4602      	mov	r2, r0
 800e3ca:	460b      	mov	r3, r1
 800e3cc:	4620      	mov	r0, r4
 800e3ce:	4629      	mov	r1, r5
 800e3d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e3d4:	f7f1 ff60 	bl	8000298 <__aeabi_dsub>
 800e3d8:	f806 4b01 	strb.w	r4, [r6], #1
 800e3dc:	9d07      	ldr	r5, [sp, #28]
 800e3de:	eba6 040a 	sub.w	r4, r6, sl
 800e3e2:	42a5      	cmp	r5, r4
 800e3e4:	4602      	mov	r2, r0
 800e3e6:	460b      	mov	r3, r1
 800e3e8:	f040 8117 	bne.w	800e61a <_dtoa_r+0x6e2>
 800e3ec:	f7f1 ff56 	bl	800029c <__adddf3>
 800e3f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3f4:	4604      	mov	r4, r0
 800e3f6:	460d      	mov	r5, r1
 800e3f8:	f7f2 fb96 	bl	8000b28 <__aeabi_dcmpgt>
 800e3fc:	2800      	cmp	r0, #0
 800e3fe:	f040 80f9 	bne.w	800e5f4 <_dtoa_r+0x6bc>
 800e402:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e406:	4620      	mov	r0, r4
 800e408:	4629      	mov	r1, r5
 800e40a:	f7f2 fb65 	bl	8000ad8 <__aeabi_dcmpeq>
 800e40e:	b118      	cbz	r0, 800e418 <_dtoa_r+0x4e0>
 800e410:	f018 0f01 	tst.w	r8, #1
 800e414:	f040 80ee 	bne.w	800e5f4 <_dtoa_r+0x6bc>
 800e418:	4649      	mov	r1, r9
 800e41a:	4658      	mov	r0, fp
 800e41c:	f000 fc90 	bl	800ed40 <_Bfree>
 800e420:	2300      	movs	r3, #0
 800e422:	7033      	strb	r3, [r6, #0]
 800e424:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e426:	3701      	adds	r7, #1
 800e428:	601f      	str	r7, [r3, #0]
 800e42a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	f000 831d 	beq.w	800ea6c <_dtoa_r+0xb34>
 800e432:	601e      	str	r6, [r3, #0]
 800e434:	e31a      	b.n	800ea6c <_dtoa_r+0xb34>
 800e436:	07e2      	lsls	r2, r4, #31
 800e438:	d505      	bpl.n	800e446 <_dtoa_r+0x50e>
 800e43a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e43e:	f7f2 f8e3 	bl	8000608 <__aeabi_dmul>
 800e442:	3601      	adds	r6, #1
 800e444:	2301      	movs	r3, #1
 800e446:	1064      	asrs	r4, r4, #1
 800e448:	3508      	adds	r5, #8
 800e44a:	e73f      	b.n	800e2cc <_dtoa_r+0x394>
 800e44c:	2602      	movs	r6, #2
 800e44e:	e742      	b.n	800e2d6 <_dtoa_r+0x39e>
 800e450:	9c07      	ldr	r4, [sp, #28]
 800e452:	9704      	str	r7, [sp, #16]
 800e454:	e761      	b.n	800e31a <_dtoa_r+0x3e2>
 800e456:	4b27      	ldr	r3, [pc, #156]	@ (800e4f4 <_dtoa_r+0x5bc>)
 800e458:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e45a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e45e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e462:	4454      	add	r4, sl
 800e464:	2900      	cmp	r1, #0
 800e466:	d053      	beq.n	800e510 <_dtoa_r+0x5d8>
 800e468:	4928      	ldr	r1, [pc, #160]	@ (800e50c <_dtoa_r+0x5d4>)
 800e46a:	2000      	movs	r0, #0
 800e46c:	f7f2 f9f6 	bl	800085c <__aeabi_ddiv>
 800e470:	4633      	mov	r3, r6
 800e472:	462a      	mov	r2, r5
 800e474:	f7f1 ff10 	bl	8000298 <__aeabi_dsub>
 800e478:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e47c:	4656      	mov	r6, sl
 800e47e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e482:	f7f2 fb71 	bl	8000b68 <__aeabi_d2iz>
 800e486:	4605      	mov	r5, r0
 800e488:	f7f2 f854 	bl	8000534 <__aeabi_i2d>
 800e48c:	4602      	mov	r2, r0
 800e48e:	460b      	mov	r3, r1
 800e490:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e494:	f7f1 ff00 	bl	8000298 <__aeabi_dsub>
 800e498:	3530      	adds	r5, #48	@ 0x30
 800e49a:	4602      	mov	r2, r0
 800e49c:	460b      	mov	r3, r1
 800e49e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e4a2:	f806 5b01 	strb.w	r5, [r6], #1
 800e4a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e4aa:	f7f2 fb1f 	bl	8000aec <__aeabi_dcmplt>
 800e4ae:	2800      	cmp	r0, #0
 800e4b0:	d171      	bne.n	800e596 <_dtoa_r+0x65e>
 800e4b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e4b6:	4911      	ldr	r1, [pc, #68]	@ (800e4fc <_dtoa_r+0x5c4>)
 800e4b8:	2000      	movs	r0, #0
 800e4ba:	f7f1 feed 	bl	8000298 <__aeabi_dsub>
 800e4be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e4c2:	f7f2 fb13 	bl	8000aec <__aeabi_dcmplt>
 800e4c6:	2800      	cmp	r0, #0
 800e4c8:	f040 8095 	bne.w	800e5f6 <_dtoa_r+0x6be>
 800e4cc:	42a6      	cmp	r6, r4
 800e4ce:	f43f af50 	beq.w	800e372 <_dtoa_r+0x43a>
 800e4d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e4d6:	4b0a      	ldr	r3, [pc, #40]	@ (800e500 <_dtoa_r+0x5c8>)
 800e4d8:	2200      	movs	r2, #0
 800e4da:	f7f2 f895 	bl	8000608 <__aeabi_dmul>
 800e4de:	4b08      	ldr	r3, [pc, #32]	@ (800e500 <_dtoa_r+0x5c8>)
 800e4e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4ea:	f7f2 f88d 	bl	8000608 <__aeabi_dmul>
 800e4ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4f2:	e7c4      	b.n	800e47e <_dtoa_r+0x546>
 800e4f4:	08013c58 	.word	0x08013c58
 800e4f8:	08013c30 	.word	0x08013c30
 800e4fc:	3ff00000 	.word	0x3ff00000
 800e500:	40240000 	.word	0x40240000
 800e504:	401c0000 	.word	0x401c0000
 800e508:	40140000 	.word	0x40140000
 800e50c:	3fe00000 	.word	0x3fe00000
 800e510:	4631      	mov	r1, r6
 800e512:	4628      	mov	r0, r5
 800e514:	f7f2 f878 	bl	8000608 <__aeabi_dmul>
 800e518:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e51c:	9415      	str	r4, [sp, #84]	@ 0x54
 800e51e:	4656      	mov	r6, sl
 800e520:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e524:	f7f2 fb20 	bl	8000b68 <__aeabi_d2iz>
 800e528:	4605      	mov	r5, r0
 800e52a:	f7f2 f803 	bl	8000534 <__aeabi_i2d>
 800e52e:	4602      	mov	r2, r0
 800e530:	460b      	mov	r3, r1
 800e532:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e536:	f7f1 feaf 	bl	8000298 <__aeabi_dsub>
 800e53a:	3530      	adds	r5, #48	@ 0x30
 800e53c:	f806 5b01 	strb.w	r5, [r6], #1
 800e540:	4602      	mov	r2, r0
 800e542:	460b      	mov	r3, r1
 800e544:	42a6      	cmp	r6, r4
 800e546:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e54a:	f04f 0200 	mov.w	r2, #0
 800e54e:	d124      	bne.n	800e59a <_dtoa_r+0x662>
 800e550:	4bac      	ldr	r3, [pc, #688]	@ (800e804 <_dtoa_r+0x8cc>)
 800e552:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e556:	f7f1 fea1 	bl	800029c <__adddf3>
 800e55a:	4602      	mov	r2, r0
 800e55c:	460b      	mov	r3, r1
 800e55e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e562:	f7f2 fae1 	bl	8000b28 <__aeabi_dcmpgt>
 800e566:	2800      	cmp	r0, #0
 800e568:	d145      	bne.n	800e5f6 <_dtoa_r+0x6be>
 800e56a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e56e:	49a5      	ldr	r1, [pc, #660]	@ (800e804 <_dtoa_r+0x8cc>)
 800e570:	2000      	movs	r0, #0
 800e572:	f7f1 fe91 	bl	8000298 <__aeabi_dsub>
 800e576:	4602      	mov	r2, r0
 800e578:	460b      	mov	r3, r1
 800e57a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e57e:	f7f2 fab5 	bl	8000aec <__aeabi_dcmplt>
 800e582:	2800      	cmp	r0, #0
 800e584:	f43f aef5 	beq.w	800e372 <_dtoa_r+0x43a>
 800e588:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e58a:	1e73      	subs	r3, r6, #1
 800e58c:	9315      	str	r3, [sp, #84]	@ 0x54
 800e58e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e592:	2b30      	cmp	r3, #48	@ 0x30
 800e594:	d0f8      	beq.n	800e588 <_dtoa_r+0x650>
 800e596:	9f04      	ldr	r7, [sp, #16]
 800e598:	e73e      	b.n	800e418 <_dtoa_r+0x4e0>
 800e59a:	4b9b      	ldr	r3, [pc, #620]	@ (800e808 <_dtoa_r+0x8d0>)
 800e59c:	f7f2 f834 	bl	8000608 <__aeabi_dmul>
 800e5a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e5a4:	e7bc      	b.n	800e520 <_dtoa_r+0x5e8>
 800e5a6:	d10c      	bne.n	800e5c2 <_dtoa_r+0x68a>
 800e5a8:	4b98      	ldr	r3, [pc, #608]	@ (800e80c <_dtoa_r+0x8d4>)
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e5b0:	f7f2 f82a 	bl	8000608 <__aeabi_dmul>
 800e5b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e5b8:	f7f2 faac 	bl	8000b14 <__aeabi_dcmpge>
 800e5bc:	2800      	cmp	r0, #0
 800e5be:	f000 8157 	beq.w	800e870 <_dtoa_r+0x938>
 800e5c2:	2400      	movs	r4, #0
 800e5c4:	4625      	mov	r5, r4
 800e5c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e5c8:	43db      	mvns	r3, r3
 800e5ca:	9304      	str	r3, [sp, #16]
 800e5cc:	4656      	mov	r6, sl
 800e5ce:	2700      	movs	r7, #0
 800e5d0:	4621      	mov	r1, r4
 800e5d2:	4658      	mov	r0, fp
 800e5d4:	f000 fbb4 	bl	800ed40 <_Bfree>
 800e5d8:	2d00      	cmp	r5, #0
 800e5da:	d0dc      	beq.n	800e596 <_dtoa_r+0x65e>
 800e5dc:	b12f      	cbz	r7, 800e5ea <_dtoa_r+0x6b2>
 800e5de:	42af      	cmp	r7, r5
 800e5e0:	d003      	beq.n	800e5ea <_dtoa_r+0x6b2>
 800e5e2:	4639      	mov	r1, r7
 800e5e4:	4658      	mov	r0, fp
 800e5e6:	f000 fbab 	bl	800ed40 <_Bfree>
 800e5ea:	4629      	mov	r1, r5
 800e5ec:	4658      	mov	r0, fp
 800e5ee:	f000 fba7 	bl	800ed40 <_Bfree>
 800e5f2:	e7d0      	b.n	800e596 <_dtoa_r+0x65e>
 800e5f4:	9704      	str	r7, [sp, #16]
 800e5f6:	4633      	mov	r3, r6
 800e5f8:	461e      	mov	r6, r3
 800e5fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e5fe:	2a39      	cmp	r2, #57	@ 0x39
 800e600:	d107      	bne.n	800e612 <_dtoa_r+0x6da>
 800e602:	459a      	cmp	sl, r3
 800e604:	d1f8      	bne.n	800e5f8 <_dtoa_r+0x6c0>
 800e606:	9a04      	ldr	r2, [sp, #16]
 800e608:	3201      	adds	r2, #1
 800e60a:	9204      	str	r2, [sp, #16]
 800e60c:	2230      	movs	r2, #48	@ 0x30
 800e60e:	f88a 2000 	strb.w	r2, [sl]
 800e612:	781a      	ldrb	r2, [r3, #0]
 800e614:	3201      	adds	r2, #1
 800e616:	701a      	strb	r2, [r3, #0]
 800e618:	e7bd      	b.n	800e596 <_dtoa_r+0x65e>
 800e61a:	4b7b      	ldr	r3, [pc, #492]	@ (800e808 <_dtoa_r+0x8d0>)
 800e61c:	2200      	movs	r2, #0
 800e61e:	f7f1 fff3 	bl	8000608 <__aeabi_dmul>
 800e622:	2200      	movs	r2, #0
 800e624:	2300      	movs	r3, #0
 800e626:	4604      	mov	r4, r0
 800e628:	460d      	mov	r5, r1
 800e62a:	f7f2 fa55 	bl	8000ad8 <__aeabi_dcmpeq>
 800e62e:	2800      	cmp	r0, #0
 800e630:	f43f aebb 	beq.w	800e3aa <_dtoa_r+0x472>
 800e634:	e6f0      	b.n	800e418 <_dtoa_r+0x4e0>
 800e636:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e638:	2a00      	cmp	r2, #0
 800e63a:	f000 80db 	beq.w	800e7f4 <_dtoa_r+0x8bc>
 800e63e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e640:	2a01      	cmp	r2, #1
 800e642:	f300 80bf 	bgt.w	800e7c4 <_dtoa_r+0x88c>
 800e646:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e648:	2a00      	cmp	r2, #0
 800e64a:	f000 80b7 	beq.w	800e7bc <_dtoa_r+0x884>
 800e64e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e652:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e654:	4646      	mov	r6, r8
 800e656:	9a08      	ldr	r2, [sp, #32]
 800e658:	2101      	movs	r1, #1
 800e65a:	441a      	add	r2, r3
 800e65c:	4658      	mov	r0, fp
 800e65e:	4498      	add	r8, r3
 800e660:	9208      	str	r2, [sp, #32]
 800e662:	f000 fc6b 	bl	800ef3c <__i2b>
 800e666:	4605      	mov	r5, r0
 800e668:	b15e      	cbz	r6, 800e682 <_dtoa_r+0x74a>
 800e66a:	9b08      	ldr	r3, [sp, #32]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	dd08      	ble.n	800e682 <_dtoa_r+0x74a>
 800e670:	42b3      	cmp	r3, r6
 800e672:	9a08      	ldr	r2, [sp, #32]
 800e674:	bfa8      	it	ge
 800e676:	4633      	movge	r3, r6
 800e678:	eba8 0803 	sub.w	r8, r8, r3
 800e67c:	1af6      	subs	r6, r6, r3
 800e67e:	1ad3      	subs	r3, r2, r3
 800e680:	9308      	str	r3, [sp, #32]
 800e682:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e684:	b1f3      	cbz	r3, 800e6c4 <_dtoa_r+0x78c>
 800e686:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e688:	2b00      	cmp	r3, #0
 800e68a:	f000 80b7 	beq.w	800e7fc <_dtoa_r+0x8c4>
 800e68e:	b18c      	cbz	r4, 800e6b4 <_dtoa_r+0x77c>
 800e690:	4629      	mov	r1, r5
 800e692:	4622      	mov	r2, r4
 800e694:	4658      	mov	r0, fp
 800e696:	f000 fd11 	bl	800f0bc <__pow5mult>
 800e69a:	464a      	mov	r2, r9
 800e69c:	4601      	mov	r1, r0
 800e69e:	4605      	mov	r5, r0
 800e6a0:	4658      	mov	r0, fp
 800e6a2:	f000 fc61 	bl	800ef68 <__multiply>
 800e6a6:	4649      	mov	r1, r9
 800e6a8:	9004      	str	r0, [sp, #16]
 800e6aa:	4658      	mov	r0, fp
 800e6ac:	f000 fb48 	bl	800ed40 <_Bfree>
 800e6b0:	9b04      	ldr	r3, [sp, #16]
 800e6b2:	4699      	mov	r9, r3
 800e6b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6b6:	1b1a      	subs	r2, r3, r4
 800e6b8:	d004      	beq.n	800e6c4 <_dtoa_r+0x78c>
 800e6ba:	4649      	mov	r1, r9
 800e6bc:	4658      	mov	r0, fp
 800e6be:	f000 fcfd 	bl	800f0bc <__pow5mult>
 800e6c2:	4681      	mov	r9, r0
 800e6c4:	2101      	movs	r1, #1
 800e6c6:	4658      	mov	r0, fp
 800e6c8:	f000 fc38 	bl	800ef3c <__i2b>
 800e6cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e6ce:	4604      	mov	r4, r0
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	f000 81cf 	beq.w	800ea74 <_dtoa_r+0xb3c>
 800e6d6:	461a      	mov	r2, r3
 800e6d8:	4601      	mov	r1, r0
 800e6da:	4658      	mov	r0, fp
 800e6dc:	f000 fcee 	bl	800f0bc <__pow5mult>
 800e6e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6e2:	2b01      	cmp	r3, #1
 800e6e4:	4604      	mov	r4, r0
 800e6e6:	f300 8095 	bgt.w	800e814 <_dtoa_r+0x8dc>
 800e6ea:	9b02      	ldr	r3, [sp, #8]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	f040 8087 	bne.w	800e800 <_dtoa_r+0x8c8>
 800e6f2:	9b03      	ldr	r3, [sp, #12]
 800e6f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	f040 8089 	bne.w	800e810 <_dtoa_r+0x8d8>
 800e6fe:	9b03      	ldr	r3, [sp, #12]
 800e700:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e704:	0d1b      	lsrs	r3, r3, #20
 800e706:	051b      	lsls	r3, r3, #20
 800e708:	b12b      	cbz	r3, 800e716 <_dtoa_r+0x7de>
 800e70a:	9b08      	ldr	r3, [sp, #32]
 800e70c:	3301      	adds	r3, #1
 800e70e:	9308      	str	r3, [sp, #32]
 800e710:	f108 0801 	add.w	r8, r8, #1
 800e714:	2301      	movs	r3, #1
 800e716:	930a      	str	r3, [sp, #40]	@ 0x28
 800e718:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	f000 81b0 	beq.w	800ea80 <_dtoa_r+0xb48>
 800e720:	6923      	ldr	r3, [r4, #16]
 800e722:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e726:	6918      	ldr	r0, [r3, #16]
 800e728:	f000 fbbc 	bl	800eea4 <__hi0bits>
 800e72c:	f1c0 0020 	rsb	r0, r0, #32
 800e730:	9b08      	ldr	r3, [sp, #32]
 800e732:	4418      	add	r0, r3
 800e734:	f010 001f 	ands.w	r0, r0, #31
 800e738:	d077      	beq.n	800e82a <_dtoa_r+0x8f2>
 800e73a:	f1c0 0320 	rsb	r3, r0, #32
 800e73e:	2b04      	cmp	r3, #4
 800e740:	dd6b      	ble.n	800e81a <_dtoa_r+0x8e2>
 800e742:	9b08      	ldr	r3, [sp, #32]
 800e744:	f1c0 001c 	rsb	r0, r0, #28
 800e748:	4403      	add	r3, r0
 800e74a:	4480      	add	r8, r0
 800e74c:	4406      	add	r6, r0
 800e74e:	9308      	str	r3, [sp, #32]
 800e750:	f1b8 0f00 	cmp.w	r8, #0
 800e754:	dd05      	ble.n	800e762 <_dtoa_r+0x82a>
 800e756:	4649      	mov	r1, r9
 800e758:	4642      	mov	r2, r8
 800e75a:	4658      	mov	r0, fp
 800e75c:	f000 fd08 	bl	800f170 <__lshift>
 800e760:	4681      	mov	r9, r0
 800e762:	9b08      	ldr	r3, [sp, #32]
 800e764:	2b00      	cmp	r3, #0
 800e766:	dd05      	ble.n	800e774 <_dtoa_r+0x83c>
 800e768:	4621      	mov	r1, r4
 800e76a:	461a      	mov	r2, r3
 800e76c:	4658      	mov	r0, fp
 800e76e:	f000 fcff 	bl	800f170 <__lshift>
 800e772:	4604      	mov	r4, r0
 800e774:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e776:	2b00      	cmp	r3, #0
 800e778:	d059      	beq.n	800e82e <_dtoa_r+0x8f6>
 800e77a:	4621      	mov	r1, r4
 800e77c:	4648      	mov	r0, r9
 800e77e:	f000 fd63 	bl	800f248 <__mcmp>
 800e782:	2800      	cmp	r0, #0
 800e784:	da53      	bge.n	800e82e <_dtoa_r+0x8f6>
 800e786:	1e7b      	subs	r3, r7, #1
 800e788:	9304      	str	r3, [sp, #16]
 800e78a:	4649      	mov	r1, r9
 800e78c:	2300      	movs	r3, #0
 800e78e:	220a      	movs	r2, #10
 800e790:	4658      	mov	r0, fp
 800e792:	f000 faf7 	bl	800ed84 <__multadd>
 800e796:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e798:	4681      	mov	r9, r0
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	f000 8172 	beq.w	800ea84 <_dtoa_r+0xb4c>
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	4629      	mov	r1, r5
 800e7a4:	220a      	movs	r2, #10
 800e7a6:	4658      	mov	r0, fp
 800e7a8:	f000 faec 	bl	800ed84 <__multadd>
 800e7ac:	9b00      	ldr	r3, [sp, #0]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	4605      	mov	r5, r0
 800e7b2:	dc67      	bgt.n	800e884 <_dtoa_r+0x94c>
 800e7b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7b6:	2b02      	cmp	r3, #2
 800e7b8:	dc41      	bgt.n	800e83e <_dtoa_r+0x906>
 800e7ba:	e063      	b.n	800e884 <_dtoa_r+0x94c>
 800e7bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e7be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e7c2:	e746      	b.n	800e652 <_dtoa_r+0x71a>
 800e7c4:	9b07      	ldr	r3, [sp, #28]
 800e7c6:	1e5c      	subs	r4, r3, #1
 800e7c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7ca:	42a3      	cmp	r3, r4
 800e7cc:	bfbf      	itttt	lt
 800e7ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e7d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e7d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e7d4:	1ae3      	sublt	r3, r4, r3
 800e7d6:	bfb4      	ite	lt
 800e7d8:	18d2      	addlt	r2, r2, r3
 800e7da:	1b1c      	subge	r4, r3, r4
 800e7dc:	9b07      	ldr	r3, [sp, #28]
 800e7de:	bfbc      	itt	lt
 800e7e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e7e2:	2400      	movlt	r4, #0
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	bfb5      	itete	lt
 800e7e8:	eba8 0603 	sublt.w	r6, r8, r3
 800e7ec:	9b07      	ldrge	r3, [sp, #28]
 800e7ee:	2300      	movlt	r3, #0
 800e7f0:	4646      	movge	r6, r8
 800e7f2:	e730      	b.n	800e656 <_dtoa_r+0x71e>
 800e7f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e7f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e7f8:	4646      	mov	r6, r8
 800e7fa:	e735      	b.n	800e668 <_dtoa_r+0x730>
 800e7fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e7fe:	e75c      	b.n	800e6ba <_dtoa_r+0x782>
 800e800:	2300      	movs	r3, #0
 800e802:	e788      	b.n	800e716 <_dtoa_r+0x7de>
 800e804:	3fe00000 	.word	0x3fe00000
 800e808:	40240000 	.word	0x40240000
 800e80c:	40140000 	.word	0x40140000
 800e810:	9b02      	ldr	r3, [sp, #8]
 800e812:	e780      	b.n	800e716 <_dtoa_r+0x7de>
 800e814:	2300      	movs	r3, #0
 800e816:	930a      	str	r3, [sp, #40]	@ 0x28
 800e818:	e782      	b.n	800e720 <_dtoa_r+0x7e8>
 800e81a:	d099      	beq.n	800e750 <_dtoa_r+0x818>
 800e81c:	9a08      	ldr	r2, [sp, #32]
 800e81e:	331c      	adds	r3, #28
 800e820:	441a      	add	r2, r3
 800e822:	4498      	add	r8, r3
 800e824:	441e      	add	r6, r3
 800e826:	9208      	str	r2, [sp, #32]
 800e828:	e792      	b.n	800e750 <_dtoa_r+0x818>
 800e82a:	4603      	mov	r3, r0
 800e82c:	e7f6      	b.n	800e81c <_dtoa_r+0x8e4>
 800e82e:	9b07      	ldr	r3, [sp, #28]
 800e830:	9704      	str	r7, [sp, #16]
 800e832:	2b00      	cmp	r3, #0
 800e834:	dc20      	bgt.n	800e878 <_dtoa_r+0x940>
 800e836:	9300      	str	r3, [sp, #0]
 800e838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e83a:	2b02      	cmp	r3, #2
 800e83c:	dd1e      	ble.n	800e87c <_dtoa_r+0x944>
 800e83e:	9b00      	ldr	r3, [sp, #0]
 800e840:	2b00      	cmp	r3, #0
 800e842:	f47f aec0 	bne.w	800e5c6 <_dtoa_r+0x68e>
 800e846:	4621      	mov	r1, r4
 800e848:	2205      	movs	r2, #5
 800e84a:	4658      	mov	r0, fp
 800e84c:	f000 fa9a 	bl	800ed84 <__multadd>
 800e850:	4601      	mov	r1, r0
 800e852:	4604      	mov	r4, r0
 800e854:	4648      	mov	r0, r9
 800e856:	f000 fcf7 	bl	800f248 <__mcmp>
 800e85a:	2800      	cmp	r0, #0
 800e85c:	f77f aeb3 	ble.w	800e5c6 <_dtoa_r+0x68e>
 800e860:	4656      	mov	r6, sl
 800e862:	2331      	movs	r3, #49	@ 0x31
 800e864:	f806 3b01 	strb.w	r3, [r6], #1
 800e868:	9b04      	ldr	r3, [sp, #16]
 800e86a:	3301      	adds	r3, #1
 800e86c:	9304      	str	r3, [sp, #16]
 800e86e:	e6ae      	b.n	800e5ce <_dtoa_r+0x696>
 800e870:	9c07      	ldr	r4, [sp, #28]
 800e872:	9704      	str	r7, [sp, #16]
 800e874:	4625      	mov	r5, r4
 800e876:	e7f3      	b.n	800e860 <_dtoa_r+0x928>
 800e878:	9b07      	ldr	r3, [sp, #28]
 800e87a:	9300      	str	r3, [sp, #0]
 800e87c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e87e:	2b00      	cmp	r3, #0
 800e880:	f000 8104 	beq.w	800ea8c <_dtoa_r+0xb54>
 800e884:	2e00      	cmp	r6, #0
 800e886:	dd05      	ble.n	800e894 <_dtoa_r+0x95c>
 800e888:	4629      	mov	r1, r5
 800e88a:	4632      	mov	r2, r6
 800e88c:	4658      	mov	r0, fp
 800e88e:	f000 fc6f 	bl	800f170 <__lshift>
 800e892:	4605      	mov	r5, r0
 800e894:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e896:	2b00      	cmp	r3, #0
 800e898:	d05a      	beq.n	800e950 <_dtoa_r+0xa18>
 800e89a:	6869      	ldr	r1, [r5, #4]
 800e89c:	4658      	mov	r0, fp
 800e89e:	f000 fa0f 	bl	800ecc0 <_Balloc>
 800e8a2:	4606      	mov	r6, r0
 800e8a4:	b928      	cbnz	r0, 800e8b2 <_dtoa_r+0x97a>
 800e8a6:	4b84      	ldr	r3, [pc, #528]	@ (800eab8 <_dtoa_r+0xb80>)
 800e8a8:	4602      	mov	r2, r0
 800e8aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e8ae:	f7ff bb5a 	b.w	800df66 <_dtoa_r+0x2e>
 800e8b2:	692a      	ldr	r2, [r5, #16]
 800e8b4:	3202      	adds	r2, #2
 800e8b6:	0092      	lsls	r2, r2, #2
 800e8b8:	f105 010c 	add.w	r1, r5, #12
 800e8bc:	300c      	adds	r0, #12
 800e8be:	f7ff fa9e 	bl	800ddfe <memcpy>
 800e8c2:	2201      	movs	r2, #1
 800e8c4:	4631      	mov	r1, r6
 800e8c6:	4658      	mov	r0, fp
 800e8c8:	f000 fc52 	bl	800f170 <__lshift>
 800e8cc:	f10a 0301 	add.w	r3, sl, #1
 800e8d0:	9307      	str	r3, [sp, #28]
 800e8d2:	9b00      	ldr	r3, [sp, #0]
 800e8d4:	4453      	add	r3, sl
 800e8d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e8d8:	9b02      	ldr	r3, [sp, #8]
 800e8da:	f003 0301 	and.w	r3, r3, #1
 800e8de:	462f      	mov	r7, r5
 800e8e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800e8e2:	4605      	mov	r5, r0
 800e8e4:	9b07      	ldr	r3, [sp, #28]
 800e8e6:	4621      	mov	r1, r4
 800e8e8:	3b01      	subs	r3, #1
 800e8ea:	4648      	mov	r0, r9
 800e8ec:	9300      	str	r3, [sp, #0]
 800e8ee:	f7ff fa9b 	bl	800de28 <quorem>
 800e8f2:	4639      	mov	r1, r7
 800e8f4:	9002      	str	r0, [sp, #8]
 800e8f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e8fa:	4648      	mov	r0, r9
 800e8fc:	f000 fca4 	bl	800f248 <__mcmp>
 800e900:	462a      	mov	r2, r5
 800e902:	9008      	str	r0, [sp, #32]
 800e904:	4621      	mov	r1, r4
 800e906:	4658      	mov	r0, fp
 800e908:	f000 fcba 	bl	800f280 <__mdiff>
 800e90c:	68c2      	ldr	r2, [r0, #12]
 800e90e:	4606      	mov	r6, r0
 800e910:	bb02      	cbnz	r2, 800e954 <_dtoa_r+0xa1c>
 800e912:	4601      	mov	r1, r0
 800e914:	4648      	mov	r0, r9
 800e916:	f000 fc97 	bl	800f248 <__mcmp>
 800e91a:	4602      	mov	r2, r0
 800e91c:	4631      	mov	r1, r6
 800e91e:	4658      	mov	r0, fp
 800e920:	920e      	str	r2, [sp, #56]	@ 0x38
 800e922:	f000 fa0d 	bl	800ed40 <_Bfree>
 800e926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e928:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e92a:	9e07      	ldr	r6, [sp, #28]
 800e92c:	ea43 0102 	orr.w	r1, r3, r2
 800e930:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e932:	4319      	orrs	r1, r3
 800e934:	d110      	bne.n	800e958 <_dtoa_r+0xa20>
 800e936:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e93a:	d029      	beq.n	800e990 <_dtoa_r+0xa58>
 800e93c:	9b08      	ldr	r3, [sp, #32]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	dd02      	ble.n	800e948 <_dtoa_r+0xa10>
 800e942:	9b02      	ldr	r3, [sp, #8]
 800e944:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e948:	9b00      	ldr	r3, [sp, #0]
 800e94a:	f883 8000 	strb.w	r8, [r3]
 800e94e:	e63f      	b.n	800e5d0 <_dtoa_r+0x698>
 800e950:	4628      	mov	r0, r5
 800e952:	e7bb      	b.n	800e8cc <_dtoa_r+0x994>
 800e954:	2201      	movs	r2, #1
 800e956:	e7e1      	b.n	800e91c <_dtoa_r+0x9e4>
 800e958:	9b08      	ldr	r3, [sp, #32]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	db04      	blt.n	800e968 <_dtoa_r+0xa30>
 800e95e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e960:	430b      	orrs	r3, r1
 800e962:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e964:	430b      	orrs	r3, r1
 800e966:	d120      	bne.n	800e9aa <_dtoa_r+0xa72>
 800e968:	2a00      	cmp	r2, #0
 800e96a:	dded      	ble.n	800e948 <_dtoa_r+0xa10>
 800e96c:	4649      	mov	r1, r9
 800e96e:	2201      	movs	r2, #1
 800e970:	4658      	mov	r0, fp
 800e972:	f000 fbfd 	bl	800f170 <__lshift>
 800e976:	4621      	mov	r1, r4
 800e978:	4681      	mov	r9, r0
 800e97a:	f000 fc65 	bl	800f248 <__mcmp>
 800e97e:	2800      	cmp	r0, #0
 800e980:	dc03      	bgt.n	800e98a <_dtoa_r+0xa52>
 800e982:	d1e1      	bne.n	800e948 <_dtoa_r+0xa10>
 800e984:	f018 0f01 	tst.w	r8, #1
 800e988:	d0de      	beq.n	800e948 <_dtoa_r+0xa10>
 800e98a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e98e:	d1d8      	bne.n	800e942 <_dtoa_r+0xa0a>
 800e990:	9a00      	ldr	r2, [sp, #0]
 800e992:	2339      	movs	r3, #57	@ 0x39
 800e994:	7013      	strb	r3, [r2, #0]
 800e996:	4633      	mov	r3, r6
 800e998:	461e      	mov	r6, r3
 800e99a:	3b01      	subs	r3, #1
 800e99c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e9a0:	2a39      	cmp	r2, #57	@ 0x39
 800e9a2:	d052      	beq.n	800ea4a <_dtoa_r+0xb12>
 800e9a4:	3201      	adds	r2, #1
 800e9a6:	701a      	strb	r2, [r3, #0]
 800e9a8:	e612      	b.n	800e5d0 <_dtoa_r+0x698>
 800e9aa:	2a00      	cmp	r2, #0
 800e9ac:	dd07      	ble.n	800e9be <_dtoa_r+0xa86>
 800e9ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e9b2:	d0ed      	beq.n	800e990 <_dtoa_r+0xa58>
 800e9b4:	9a00      	ldr	r2, [sp, #0]
 800e9b6:	f108 0301 	add.w	r3, r8, #1
 800e9ba:	7013      	strb	r3, [r2, #0]
 800e9bc:	e608      	b.n	800e5d0 <_dtoa_r+0x698>
 800e9be:	9b07      	ldr	r3, [sp, #28]
 800e9c0:	9a07      	ldr	r2, [sp, #28]
 800e9c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e9c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e9c8:	4293      	cmp	r3, r2
 800e9ca:	d028      	beq.n	800ea1e <_dtoa_r+0xae6>
 800e9cc:	4649      	mov	r1, r9
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	220a      	movs	r2, #10
 800e9d2:	4658      	mov	r0, fp
 800e9d4:	f000 f9d6 	bl	800ed84 <__multadd>
 800e9d8:	42af      	cmp	r7, r5
 800e9da:	4681      	mov	r9, r0
 800e9dc:	f04f 0300 	mov.w	r3, #0
 800e9e0:	f04f 020a 	mov.w	r2, #10
 800e9e4:	4639      	mov	r1, r7
 800e9e6:	4658      	mov	r0, fp
 800e9e8:	d107      	bne.n	800e9fa <_dtoa_r+0xac2>
 800e9ea:	f000 f9cb 	bl	800ed84 <__multadd>
 800e9ee:	4607      	mov	r7, r0
 800e9f0:	4605      	mov	r5, r0
 800e9f2:	9b07      	ldr	r3, [sp, #28]
 800e9f4:	3301      	adds	r3, #1
 800e9f6:	9307      	str	r3, [sp, #28]
 800e9f8:	e774      	b.n	800e8e4 <_dtoa_r+0x9ac>
 800e9fa:	f000 f9c3 	bl	800ed84 <__multadd>
 800e9fe:	4629      	mov	r1, r5
 800ea00:	4607      	mov	r7, r0
 800ea02:	2300      	movs	r3, #0
 800ea04:	220a      	movs	r2, #10
 800ea06:	4658      	mov	r0, fp
 800ea08:	f000 f9bc 	bl	800ed84 <__multadd>
 800ea0c:	4605      	mov	r5, r0
 800ea0e:	e7f0      	b.n	800e9f2 <_dtoa_r+0xaba>
 800ea10:	9b00      	ldr	r3, [sp, #0]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	bfcc      	ite	gt
 800ea16:	461e      	movgt	r6, r3
 800ea18:	2601      	movle	r6, #1
 800ea1a:	4456      	add	r6, sl
 800ea1c:	2700      	movs	r7, #0
 800ea1e:	4649      	mov	r1, r9
 800ea20:	2201      	movs	r2, #1
 800ea22:	4658      	mov	r0, fp
 800ea24:	f000 fba4 	bl	800f170 <__lshift>
 800ea28:	4621      	mov	r1, r4
 800ea2a:	4681      	mov	r9, r0
 800ea2c:	f000 fc0c 	bl	800f248 <__mcmp>
 800ea30:	2800      	cmp	r0, #0
 800ea32:	dcb0      	bgt.n	800e996 <_dtoa_r+0xa5e>
 800ea34:	d102      	bne.n	800ea3c <_dtoa_r+0xb04>
 800ea36:	f018 0f01 	tst.w	r8, #1
 800ea3a:	d1ac      	bne.n	800e996 <_dtoa_r+0xa5e>
 800ea3c:	4633      	mov	r3, r6
 800ea3e:	461e      	mov	r6, r3
 800ea40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ea44:	2a30      	cmp	r2, #48	@ 0x30
 800ea46:	d0fa      	beq.n	800ea3e <_dtoa_r+0xb06>
 800ea48:	e5c2      	b.n	800e5d0 <_dtoa_r+0x698>
 800ea4a:	459a      	cmp	sl, r3
 800ea4c:	d1a4      	bne.n	800e998 <_dtoa_r+0xa60>
 800ea4e:	9b04      	ldr	r3, [sp, #16]
 800ea50:	3301      	adds	r3, #1
 800ea52:	9304      	str	r3, [sp, #16]
 800ea54:	2331      	movs	r3, #49	@ 0x31
 800ea56:	f88a 3000 	strb.w	r3, [sl]
 800ea5a:	e5b9      	b.n	800e5d0 <_dtoa_r+0x698>
 800ea5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ea5e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800eabc <_dtoa_r+0xb84>
 800ea62:	b11b      	cbz	r3, 800ea6c <_dtoa_r+0xb34>
 800ea64:	f10a 0308 	add.w	r3, sl, #8
 800ea68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ea6a:	6013      	str	r3, [r2, #0]
 800ea6c:	4650      	mov	r0, sl
 800ea6e:	b019      	add	sp, #100	@ 0x64
 800ea70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea76:	2b01      	cmp	r3, #1
 800ea78:	f77f ae37 	ble.w	800e6ea <_dtoa_r+0x7b2>
 800ea7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea80:	2001      	movs	r0, #1
 800ea82:	e655      	b.n	800e730 <_dtoa_r+0x7f8>
 800ea84:	9b00      	ldr	r3, [sp, #0]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	f77f aed6 	ble.w	800e838 <_dtoa_r+0x900>
 800ea8c:	4656      	mov	r6, sl
 800ea8e:	4621      	mov	r1, r4
 800ea90:	4648      	mov	r0, r9
 800ea92:	f7ff f9c9 	bl	800de28 <quorem>
 800ea96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ea9a:	f806 8b01 	strb.w	r8, [r6], #1
 800ea9e:	9b00      	ldr	r3, [sp, #0]
 800eaa0:	eba6 020a 	sub.w	r2, r6, sl
 800eaa4:	4293      	cmp	r3, r2
 800eaa6:	ddb3      	ble.n	800ea10 <_dtoa_r+0xad8>
 800eaa8:	4649      	mov	r1, r9
 800eaaa:	2300      	movs	r3, #0
 800eaac:	220a      	movs	r2, #10
 800eaae:	4658      	mov	r0, fp
 800eab0:	f000 f968 	bl	800ed84 <__multadd>
 800eab4:	4681      	mov	r9, r0
 800eab6:	e7ea      	b.n	800ea8e <_dtoa_r+0xb56>
 800eab8:	08013bb9 	.word	0x08013bb9
 800eabc:	08013b3d 	.word	0x08013b3d

0800eac0 <_free_r>:
 800eac0:	b538      	push	{r3, r4, r5, lr}
 800eac2:	4605      	mov	r5, r0
 800eac4:	2900      	cmp	r1, #0
 800eac6:	d041      	beq.n	800eb4c <_free_r+0x8c>
 800eac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eacc:	1f0c      	subs	r4, r1, #4
 800eace:	2b00      	cmp	r3, #0
 800ead0:	bfb8      	it	lt
 800ead2:	18e4      	addlt	r4, r4, r3
 800ead4:	f000 f8e8 	bl	800eca8 <__malloc_lock>
 800ead8:	4a1d      	ldr	r2, [pc, #116]	@ (800eb50 <_free_r+0x90>)
 800eada:	6813      	ldr	r3, [r2, #0]
 800eadc:	b933      	cbnz	r3, 800eaec <_free_r+0x2c>
 800eade:	6063      	str	r3, [r4, #4]
 800eae0:	6014      	str	r4, [r2, #0]
 800eae2:	4628      	mov	r0, r5
 800eae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eae8:	f000 b8e4 	b.w	800ecb4 <__malloc_unlock>
 800eaec:	42a3      	cmp	r3, r4
 800eaee:	d908      	bls.n	800eb02 <_free_r+0x42>
 800eaf0:	6820      	ldr	r0, [r4, #0]
 800eaf2:	1821      	adds	r1, r4, r0
 800eaf4:	428b      	cmp	r3, r1
 800eaf6:	bf01      	itttt	eq
 800eaf8:	6819      	ldreq	r1, [r3, #0]
 800eafa:	685b      	ldreq	r3, [r3, #4]
 800eafc:	1809      	addeq	r1, r1, r0
 800eafe:	6021      	streq	r1, [r4, #0]
 800eb00:	e7ed      	b.n	800eade <_free_r+0x1e>
 800eb02:	461a      	mov	r2, r3
 800eb04:	685b      	ldr	r3, [r3, #4]
 800eb06:	b10b      	cbz	r3, 800eb0c <_free_r+0x4c>
 800eb08:	42a3      	cmp	r3, r4
 800eb0a:	d9fa      	bls.n	800eb02 <_free_r+0x42>
 800eb0c:	6811      	ldr	r1, [r2, #0]
 800eb0e:	1850      	adds	r0, r2, r1
 800eb10:	42a0      	cmp	r0, r4
 800eb12:	d10b      	bne.n	800eb2c <_free_r+0x6c>
 800eb14:	6820      	ldr	r0, [r4, #0]
 800eb16:	4401      	add	r1, r0
 800eb18:	1850      	adds	r0, r2, r1
 800eb1a:	4283      	cmp	r3, r0
 800eb1c:	6011      	str	r1, [r2, #0]
 800eb1e:	d1e0      	bne.n	800eae2 <_free_r+0x22>
 800eb20:	6818      	ldr	r0, [r3, #0]
 800eb22:	685b      	ldr	r3, [r3, #4]
 800eb24:	6053      	str	r3, [r2, #4]
 800eb26:	4408      	add	r0, r1
 800eb28:	6010      	str	r0, [r2, #0]
 800eb2a:	e7da      	b.n	800eae2 <_free_r+0x22>
 800eb2c:	d902      	bls.n	800eb34 <_free_r+0x74>
 800eb2e:	230c      	movs	r3, #12
 800eb30:	602b      	str	r3, [r5, #0]
 800eb32:	e7d6      	b.n	800eae2 <_free_r+0x22>
 800eb34:	6820      	ldr	r0, [r4, #0]
 800eb36:	1821      	adds	r1, r4, r0
 800eb38:	428b      	cmp	r3, r1
 800eb3a:	bf04      	itt	eq
 800eb3c:	6819      	ldreq	r1, [r3, #0]
 800eb3e:	685b      	ldreq	r3, [r3, #4]
 800eb40:	6063      	str	r3, [r4, #4]
 800eb42:	bf04      	itt	eq
 800eb44:	1809      	addeq	r1, r1, r0
 800eb46:	6021      	streq	r1, [r4, #0]
 800eb48:	6054      	str	r4, [r2, #4]
 800eb4a:	e7ca      	b.n	800eae2 <_free_r+0x22>
 800eb4c:	bd38      	pop	{r3, r4, r5, pc}
 800eb4e:	bf00      	nop
 800eb50:	20003608 	.word	0x20003608

0800eb54 <malloc>:
 800eb54:	4b02      	ldr	r3, [pc, #8]	@ (800eb60 <malloc+0xc>)
 800eb56:	4601      	mov	r1, r0
 800eb58:	6818      	ldr	r0, [r3, #0]
 800eb5a:	f000 b825 	b.w	800eba8 <_malloc_r>
 800eb5e:	bf00      	nop
 800eb60:	20000030 	.word	0x20000030

0800eb64 <sbrk_aligned>:
 800eb64:	b570      	push	{r4, r5, r6, lr}
 800eb66:	4e0f      	ldr	r6, [pc, #60]	@ (800eba4 <sbrk_aligned+0x40>)
 800eb68:	460c      	mov	r4, r1
 800eb6a:	6831      	ldr	r1, [r6, #0]
 800eb6c:	4605      	mov	r5, r0
 800eb6e:	b911      	cbnz	r1, 800eb76 <sbrk_aligned+0x12>
 800eb70:	f001 fdf2 	bl	8010758 <_sbrk_r>
 800eb74:	6030      	str	r0, [r6, #0]
 800eb76:	4621      	mov	r1, r4
 800eb78:	4628      	mov	r0, r5
 800eb7a:	f001 fded 	bl	8010758 <_sbrk_r>
 800eb7e:	1c43      	adds	r3, r0, #1
 800eb80:	d103      	bne.n	800eb8a <sbrk_aligned+0x26>
 800eb82:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800eb86:	4620      	mov	r0, r4
 800eb88:	bd70      	pop	{r4, r5, r6, pc}
 800eb8a:	1cc4      	adds	r4, r0, #3
 800eb8c:	f024 0403 	bic.w	r4, r4, #3
 800eb90:	42a0      	cmp	r0, r4
 800eb92:	d0f8      	beq.n	800eb86 <sbrk_aligned+0x22>
 800eb94:	1a21      	subs	r1, r4, r0
 800eb96:	4628      	mov	r0, r5
 800eb98:	f001 fdde 	bl	8010758 <_sbrk_r>
 800eb9c:	3001      	adds	r0, #1
 800eb9e:	d1f2      	bne.n	800eb86 <sbrk_aligned+0x22>
 800eba0:	e7ef      	b.n	800eb82 <sbrk_aligned+0x1e>
 800eba2:	bf00      	nop
 800eba4:	20003604 	.word	0x20003604

0800eba8 <_malloc_r>:
 800eba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebac:	1ccd      	adds	r5, r1, #3
 800ebae:	f025 0503 	bic.w	r5, r5, #3
 800ebb2:	3508      	adds	r5, #8
 800ebb4:	2d0c      	cmp	r5, #12
 800ebb6:	bf38      	it	cc
 800ebb8:	250c      	movcc	r5, #12
 800ebba:	2d00      	cmp	r5, #0
 800ebbc:	4606      	mov	r6, r0
 800ebbe:	db01      	blt.n	800ebc4 <_malloc_r+0x1c>
 800ebc0:	42a9      	cmp	r1, r5
 800ebc2:	d904      	bls.n	800ebce <_malloc_r+0x26>
 800ebc4:	230c      	movs	r3, #12
 800ebc6:	6033      	str	r3, [r6, #0]
 800ebc8:	2000      	movs	r0, #0
 800ebca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800eca4 <_malloc_r+0xfc>
 800ebd2:	f000 f869 	bl	800eca8 <__malloc_lock>
 800ebd6:	f8d8 3000 	ldr.w	r3, [r8]
 800ebda:	461c      	mov	r4, r3
 800ebdc:	bb44      	cbnz	r4, 800ec30 <_malloc_r+0x88>
 800ebde:	4629      	mov	r1, r5
 800ebe0:	4630      	mov	r0, r6
 800ebe2:	f7ff ffbf 	bl	800eb64 <sbrk_aligned>
 800ebe6:	1c43      	adds	r3, r0, #1
 800ebe8:	4604      	mov	r4, r0
 800ebea:	d158      	bne.n	800ec9e <_malloc_r+0xf6>
 800ebec:	f8d8 4000 	ldr.w	r4, [r8]
 800ebf0:	4627      	mov	r7, r4
 800ebf2:	2f00      	cmp	r7, #0
 800ebf4:	d143      	bne.n	800ec7e <_malloc_r+0xd6>
 800ebf6:	2c00      	cmp	r4, #0
 800ebf8:	d04b      	beq.n	800ec92 <_malloc_r+0xea>
 800ebfa:	6823      	ldr	r3, [r4, #0]
 800ebfc:	4639      	mov	r1, r7
 800ebfe:	4630      	mov	r0, r6
 800ec00:	eb04 0903 	add.w	r9, r4, r3
 800ec04:	f001 fda8 	bl	8010758 <_sbrk_r>
 800ec08:	4581      	cmp	r9, r0
 800ec0a:	d142      	bne.n	800ec92 <_malloc_r+0xea>
 800ec0c:	6821      	ldr	r1, [r4, #0]
 800ec0e:	1a6d      	subs	r5, r5, r1
 800ec10:	4629      	mov	r1, r5
 800ec12:	4630      	mov	r0, r6
 800ec14:	f7ff ffa6 	bl	800eb64 <sbrk_aligned>
 800ec18:	3001      	adds	r0, #1
 800ec1a:	d03a      	beq.n	800ec92 <_malloc_r+0xea>
 800ec1c:	6823      	ldr	r3, [r4, #0]
 800ec1e:	442b      	add	r3, r5
 800ec20:	6023      	str	r3, [r4, #0]
 800ec22:	f8d8 3000 	ldr.w	r3, [r8]
 800ec26:	685a      	ldr	r2, [r3, #4]
 800ec28:	bb62      	cbnz	r2, 800ec84 <_malloc_r+0xdc>
 800ec2a:	f8c8 7000 	str.w	r7, [r8]
 800ec2e:	e00f      	b.n	800ec50 <_malloc_r+0xa8>
 800ec30:	6822      	ldr	r2, [r4, #0]
 800ec32:	1b52      	subs	r2, r2, r5
 800ec34:	d420      	bmi.n	800ec78 <_malloc_r+0xd0>
 800ec36:	2a0b      	cmp	r2, #11
 800ec38:	d917      	bls.n	800ec6a <_malloc_r+0xc2>
 800ec3a:	1961      	adds	r1, r4, r5
 800ec3c:	42a3      	cmp	r3, r4
 800ec3e:	6025      	str	r5, [r4, #0]
 800ec40:	bf18      	it	ne
 800ec42:	6059      	strne	r1, [r3, #4]
 800ec44:	6863      	ldr	r3, [r4, #4]
 800ec46:	bf08      	it	eq
 800ec48:	f8c8 1000 	streq.w	r1, [r8]
 800ec4c:	5162      	str	r2, [r4, r5]
 800ec4e:	604b      	str	r3, [r1, #4]
 800ec50:	4630      	mov	r0, r6
 800ec52:	f000 f82f 	bl	800ecb4 <__malloc_unlock>
 800ec56:	f104 000b 	add.w	r0, r4, #11
 800ec5a:	1d23      	adds	r3, r4, #4
 800ec5c:	f020 0007 	bic.w	r0, r0, #7
 800ec60:	1ac2      	subs	r2, r0, r3
 800ec62:	bf1c      	itt	ne
 800ec64:	1a1b      	subne	r3, r3, r0
 800ec66:	50a3      	strne	r3, [r4, r2]
 800ec68:	e7af      	b.n	800ebca <_malloc_r+0x22>
 800ec6a:	6862      	ldr	r2, [r4, #4]
 800ec6c:	42a3      	cmp	r3, r4
 800ec6e:	bf0c      	ite	eq
 800ec70:	f8c8 2000 	streq.w	r2, [r8]
 800ec74:	605a      	strne	r2, [r3, #4]
 800ec76:	e7eb      	b.n	800ec50 <_malloc_r+0xa8>
 800ec78:	4623      	mov	r3, r4
 800ec7a:	6864      	ldr	r4, [r4, #4]
 800ec7c:	e7ae      	b.n	800ebdc <_malloc_r+0x34>
 800ec7e:	463c      	mov	r4, r7
 800ec80:	687f      	ldr	r7, [r7, #4]
 800ec82:	e7b6      	b.n	800ebf2 <_malloc_r+0x4a>
 800ec84:	461a      	mov	r2, r3
 800ec86:	685b      	ldr	r3, [r3, #4]
 800ec88:	42a3      	cmp	r3, r4
 800ec8a:	d1fb      	bne.n	800ec84 <_malloc_r+0xdc>
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	6053      	str	r3, [r2, #4]
 800ec90:	e7de      	b.n	800ec50 <_malloc_r+0xa8>
 800ec92:	230c      	movs	r3, #12
 800ec94:	6033      	str	r3, [r6, #0]
 800ec96:	4630      	mov	r0, r6
 800ec98:	f000 f80c 	bl	800ecb4 <__malloc_unlock>
 800ec9c:	e794      	b.n	800ebc8 <_malloc_r+0x20>
 800ec9e:	6005      	str	r5, [r0, #0]
 800eca0:	e7d6      	b.n	800ec50 <_malloc_r+0xa8>
 800eca2:	bf00      	nop
 800eca4:	20003608 	.word	0x20003608

0800eca8 <__malloc_lock>:
 800eca8:	4801      	ldr	r0, [pc, #4]	@ (800ecb0 <__malloc_lock+0x8>)
 800ecaa:	f7ff b8a6 	b.w	800ddfa <__retarget_lock_acquire_recursive>
 800ecae:	bf00      	nop
 800ecb0:	20003600 	.word	0x20003600

0800ecb4 <__malloc_unlock>:
 800ecb4:	4801      	ldr	r0, [pc, #4]	@ (800ecbc <__malloc_unlock+0x8>)
 800ecb6:	f7ff b8a1 	b.w	800ddfc <__retarget_lock_release_recursive>
 800ecba:	bf00      	nop
 800ecbc:	20003600 	.word	0x20003600

0800ecc0 <_Balloc>:
 800ecc0:	b570      	push	{r4, r5, r6, lr}
 800ecc2:	69c6      	ldr	r6, [r0, #28]
 800ecc4:	4604      	mov	r4, r0
 800ecc6:	460d      	mov	r5, r1
 800ecc8:	b976      	cbnz	r6, 800ece8 <_Balloc+0x28>
 800ecca:	2010      	movs	r0, #16
 800eccc:	f7ff ff42 	bl	800eb54 <malloc>
 800ecd0:	4602      	mov	r2, r0
 800ecd2:	61e0      	str	r0, [r4, #28]
 800ecd4:	b920      	cbnz	r0, 800ece0 <_Balloc+0x20>
 800ecd6:	4b18      	ldr	r3, [pc, #96]	@ (800ed38 <_Balloc+0x78>)
 800ecd8:	4818      	ldr	r0, [pc, #96]	@ (800ed3c <_Balloc+0x7c>)
 800ecda:	216b      	movs	r1, #107	@ 0x6b
 800ecdc:	f001 fd54 	bl	8010788 <__assert_func>
 800ece0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ece4:	6006      	str	r6, [r0, #0]
 800ece6:	60c6      	str	r6, [r0, #12]
 800ece8:	69e6      	ldr	r6, [r4, #28]
 800ecea:	68f3      	ldr	r3, [r6, #12]
 800ecec:	b183      	cbz	r3, 800ed10 <_Balloc+0x50>
 800ecee:	69e3      	ldr	r3, [r4, #28]
 800ecf0:	68db      	ldr	r3, [r3, #12]
 800ecf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ecf6:	b9b8      	cbnz	r0, 800ed28 <_Balloc+0x68>
 800ecf8:	2101      	movs	r1, #1
 800ecfa:	fa01 f605 	lsl.w	r6, r1, r5
 800ecfe:	1d72      	adds	r2, r6, #5
 800ed00:	0092      	lsls	r2, r2, #2
 800ed02:	4620      	mov	r0, r4
 800ed04:	f001 fd5e 	bl	80107c4 <_calloc_r>
 800ed08:	b160      	cbz	r0, 800ed24 <_Balloc+0x64>
 800ed0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ed0e:	e00e      	b.n	800ed2e <_Balloc+0x6e>
 800ed10:	2221      	movs	r2, #33	@ 0x21
 800ed12:	2104      	movs	r1, #4
 800ed14:	4620      	mov	r0, r4
 800ed16:	f001 fd55 	bl	80107c4 <_calloc_r>
 800ed1a:	69e3      	ldr	r3, [r4, #28]
 800ed1c:	60f0      	str	r0, [r6, #12]
 800ed1e:	68db      	ldr	r3, [r3, #12]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d1e4      	bne.n	800ecee <_Balloc+0x2e>
 800ed24:	2000      	movs	r0, #0
 800ed26:	bd70      	pop	{r4, r5, r6, pc}
 800ed28:	6802      	ldr	r2, [r0, #0]
 800ed2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ed2e:	2300      	movs	r3, #0
 800ed30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ed34:	e7f7      	b.n	800ed26 <_Balloc+0x66>
 800ed36:	bf00      	nop
 800ed38:	08013b4a 	.word	0x08013b4a
 800ed3c:	08013bca 	.word	0x08013bca

0800ed40 <_Bfree>:
 800ed40:	b570      	push	{r4, r5, r6, lr}
 800ed42:	69c6      	ldr	r6, [r0, #28]
 800ed44:	4605      	mov	r5, r0
 800ed46:	460c      	mov	r4, r1
 800ed48:	b976      	cbnz	r6, 800ed68 <_Bfree+0x28>
 800ed4a:	2010      	movs	r0, #16
 800ed4c:	f7ff ff02 	bl	800eb54 <malloc>
 800ed50:	4602      	mov	r2, r0
 800ed52:	61e8      	str	r0, [r5, #28]
 800ed54:	b920      	cbnz	r0, 800ed60 <_Bfree+0x20>
 800ed56:	4b09      	ldr	r3, [pc, #36]	@ (800ed7c <_Bfree+0x3c>)
 800ed58:	4809      	ldr	r0, [pc, #36]	@ (800ed80 <_Bfree+0x40>)
 800ed5a:	218f      	movs	r1, #143	@ 0x8f
 800ed5c:	f001 fd14 	bl	8010788 <__assert_func>
 800ed60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ed64:	6006      	str	r6, [r0, #0]
 800ed66:	60c6      	str	r6, [r0, #12]
 800ed68:	b13c      	cbz	r4, 800ed7a <_Bfree+0x3a>
 800ed6a:	69eb      	ldr	r3, [r5, #28]
 800ed6c:	6862      	ldr	r2, [r4, #4]
 800ed6e:	68db      	ldr	r3, [r3, #12]
 800ed70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ed74:	6021      	str	r1, [r4, #0]
 800ed76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ed7a:	bd70      	pop	{r4, r5, r6, pc}
 800ed7c:	08013b4a 	.word	0x08013b4a
 800ed80:	08013bca 	.word	0x08013bca

0800ed84 <__multadd>:
 800ed84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed88:	690d      	ldr	r5, [r1, #16]
 800ed8a:	4607      	mov	r7, r0
 800ed8c:	460c      	mov	r4, r1
 800ed8e:	461e      	mov	r6, r3
 800ed90:	f101 0c14 	add.w	ip, r1, #20
 800ed94:	2000      	movs	r0, #0
 800ed96:	f8dc 3000 	ldr.w	r3, [ip]
 800ed9a:	b299      	uxth	r1, r3
 800ed9c:	fb02 6101 	mla	r1, r2, r1, r6
 800eda0:	0c1e      	lsrs	r6, r3, #16
 800eda2:	0c0b      	lsrs	r3, r1, #16
 800eda4:	fb02 3306 	mla	r3, r2, r6, r3
 800eda8:	b289      	uxth	r1, r1
 800edaa:	3001      	adds	r0, #1
 800edac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800edb0:	4285      	cmp	r5, r0
 800edb2:	f84c 1b04 	str.w	r1, [ip], #4
 800edb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800edba:	dcec      	bgt.n	800ed96 <__multadd+0x12>
 800edbc:	b30e      	cbz	r6, 800ee02 <__multadd+0x7e>
 800edbe:	68a3      	ldr	r3, [r4, #8]
 800edc0:	42ab      	cmp	r3, r5
 800edc2:	dc19      	bgt.n	800edf8 <__multadd+0x74>
 800edc4:	6861      	ldr	r1, [r4, #4]
 800edc6:	4638      	mov	r0, r7
 800edc8:	3101      	adds	r1, #1
 800edca:	f7ff ff79 	bl	800ecc0 <_Balloc>
 800edce:	4680      	mov	r8, r0
 800edd0:	b928      	cbnz	r0, 800edde <__multadd+0x5a>
 800edd2:	4602      	mov	r2, r0
 800edd4:	4b0c      	ldr	r3, [pc, #48]	@ (800ee08 <__multadd+0x84>)
 800edd6:	480d      	ldr	r0, [pc, #52]	@ (800ee0c <__multadd+0x88>)
 800edd8:	21ba      	movs	r1, #186	@ 0xba
 800edda:	f001 fcd5 	bl	8010788 <__assert_func>
 800edde:	6922      	ldr	r2, [r4, #16]
 800ede0:	3202      	adds	r2, #2
 800ede2:	f104 010c 	add.w	r1, r4, #12
 800ede6:	0092      	lsls	r2, r2, #2
 800ede8:	300c      	adds	r0, #12
 800edea:	f7ff f808 	bl	800ddfe <memcpy>
 800edee:	4621      	mov	r1, r4
 800edf0:	4638      	mov	r0, r7
 800edf2:	f7ff ffa5 	bl	800ed40 <_Bfree>
 800edf6:	4644      	mov	r4, r8
 800edf8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800edfc:	3501      	adds	r5, #1
 800edfe:	615e      	str	r6, [r3, #20]
 800ee00:	6125      	str	r5, [r4, #16]
 800ee02:	4620      	mov	r0, r4
 800ee04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee08:	08013bb9 	.word	0x08013bb9
 800ee0c:	08013bca 	.word	0x08013bca

0800ee10 <__s2b>:
 800ee10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee14:	460c      	mov	r4, r1
 800ee16:	4615      	mov	r5, r2
 800ee18:	461f      	mov	r7, r3
 800ee1a:	2209      	movs	r2, #9
 800ee1c:	3308      	adds	r3, #8
 800ee1e:	4606      	mov	r6, r0
 800ee20:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee24:	2100      	movs	r1, #0
 800ee26:	2201      	movs	r2, #1
 800ee28:	429a      	cmp	r2, r3
 800ee2a:	db09      	blt.n	800ee40 <__s2b+0x30>
 800ee2c:	4630      	mov	r0, r6
 800ee2e:	f7ff ff47 	bl	800ecc0 <_Balloc>
 800ee32:	b940      	cbnz	r0, 800ee46 <__s2b+0x36>
 800ee34:	4602      	mov	r2, r0
 800ee36:	4b19      	ldr	r3, [pc, #100]	@ (800ee9c <__s2b+0x8c>)
 800ee38:	4819      	ldr	r0, [pc, #100]	@ (800eea0 <__s2b+0x90>)
 800ee3a:	21d3      	movs	r1, #211	@ 0xd3
 800ee3c:	f001 fca4 	bl	8010788 <__assert_func>
 800ee40:	0052      	lsls	r2, r2, #1
 800ee42:	3101      	adds	r1, #1
 800ee44:	e7f0      	b.n	800ee28 <__s2b+0x18>
 800ee46:	9b08      	ldr	r3, [sp, #32]
 800ee48:	6143      	str	r3, [r0, #20]
 800ee4a:	2d09      	cmp	r5, #9
 800ee4c:	f04f 0301 	mov.w	r3, #1
 800ee50:	6103      	str	r3, [r0, #16]
 800ee52:	dd16      	ble.n	800ee82 <__s2b+0x72>
 800ee54:	f104 0909 	add.w	r9, r4, #9
 800ee58:	46c8      	mov	r8, r9
 800ee5a:	442c      	add	r4, r5
 800ee5c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ee60:	4601      	mov	r1, r0
 800ee62:	3b30      	subs	r3, #48	@ 0x30
 800ee64:	220a      	movs	r2, #10
 800ee66:	4630      	mov	r0, r6
 800ee68:	f7ff ff8c 	bl	800ed84 <__multadd>
 800ee6c:	45a0      	cmp	r8, r4
 800ee6e:	d1f5      	bne.n	800ee5c <__s2b+0x4c>
 800ee70:	f1a5 0408 	sub.w	r4, r5, #8
 800ee74:	444c      	add	r4, r9
 800ee76:	1b2d      	subs	r5, r5, r4
 800ee78:	1963      	adds	r3, r4, r5
 800ee7a:	42bb      	cmp	r3, r7
 800ee7c:	db04      	blt.n	800ee88 <__s2b+0x78>
 800ee7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee82:	340a      	adds	r4, #10
 800ee84:	2509      	movs	r5, #9
 800ee86:	e7f6      	b.n	800ee76 <__s2b+0x66>
 800ee88:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ee8c:	4601      	mov	r1, r0
 800ee8e:	3b30      	subs	r3, #48	@ 0x30
 800ee90:	220a      	movs	r2, #10
 800ee92:	4630      	mov	r0, r6
 800ee94:	f7ff ff76 	bl	800ed84 <__multadd>
 800ee98:	e7ee      	b.n	800ee78 <__s2b+0x68>
 800ee9a:	bf00      	nop
 800ee9c:	08013bb9 	.word	0x08013bb9
 800eea0:	08013bca 	.word	0x08013bca

0800eea4 <__hi0bits>:
 800eea4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800eea8:	4603      	mov	r3, r0
 800eeaa:	bf36      	itet	cc
 800eeac:	0403      	lslcc	r3, r0, #16
 800eeae:	2000      	movcs	r0, #0
 800eeb0:	2010      	movcc	r0, #16
 800eeb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800eeb6:	bf3c      	itt	cc
 800eeb8:	021b      	lslcc	r3, r3, #8
 800eeba:	3008      	addcc	r0, #8
 800eebc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eec0:	bf3c      	itt	cc
 800eec2:	011b      	lslcc	r3, r3, #4
 800eec4:	3004      	addcc	r0, #4
 800eec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eeca:	bf3c      	itt	cc
 800eecc:	009b      	lslcc	r3, r3, #2
 800eece:	3002      	addcc	r0, #2
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	db05      	blt.n	800eee0 <__hi0bits+0x3c>
 800eed4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800eed8:	f100 0001 	add.w	r0, r0, #1
 800eedc:	bf08      	it	eq
 800eede:	2020      	moveq	r0, #32
 800eee0:	4770      	bx	lr

0800eee2 <__lo0bits>:
 800eee2:	6803      	ldr	r3, [r0, #0]
 800eee4:	4602      	mov	r2, r0
 800eee6:	f013 0007 	ands.w	r0, r3, #7
 800eeea:	d00b      	beq.n	800ef04 <__lo0bits+0x22>
 800eeec:	07d9      	lsls	r1, r3, #31
 800eeee:	d421      	bmi.n	800ef34 <__lo0bits+0x52>
 800eef0:	0798      	lsls	r0, r3, #30
 800eef2:	bf49      	itett	mi
 800eef4:	085b      	lsrmi	r3, r3, #1
 800eef6:	089b      	lsrpl	r3, r3, #2
 800eef8:	2001      	movmi	r0, #1
 800eefa:	6013      	strmi	r3, [r2, #0]
 800eefc:	bf5c      	itt	pl
 800eefe:	6013      	strpl	r3, [r2, #0]
 800ef00:	2002      	movpl	r0, #2
 800ef02:	4770      	bx	lr
 800ef04:	b299      	uxth	r1, r3
 800ef06:	b909      	cbnz	r1, 800ef0c <__lo0bits+0x2a>
 800ef08:	0c1b      	lsrs	r3, r3, #16
 800ef0a:	2010      	movs	r0, #16
 800ef0c:	b2d9      	uxtb	r1, r3
 800ef0e:	b909      	cbnz	r1, 800ef14 <__lo0bits+0x32>
 800ef10:	3008      	adds	r0, #8
 800ef12:	0a1b      	lsrs	r3, r3, #8
 800ef14:	0719      	lsls	r1, r3, #28
 800ef16:	bf04      	itt	eq
 800ef18:	091b      	lsreq	r3, r3, #4
 800ef1a:	3004      	addeq	r0, #4
 800ef1c:	0799      	lsls	r1, r3, #30
 800ef1e:	bf04      	itt	eq
 800ef20:	089b      	lsreq	r3, r3, #2
 800ef22:	3002      	addeq	r0, #2
 800ef24:	07d9      	lsls	r1, r3, #31
 800ef26:	d403      	bmi.n	800ef30 <__lo0bits+0x4e>
 800ef28:	085b      	lsrs	r3, r3, #1
 800ef2a:	f100 0001 	add.w	r0, r0, #1
 800ef2e:	d003      	beq.n	800ef38 <__lo0bits+0x56>
 800ef30:	6013      	str	r3, [r2, #0]
 800ef32:	4770      	bx	lr
 800ef34:	2000      	movs	r0, #0
 800ef36:	4770      	bx	lr
 800ef38:	2020      	movs	r0, #32
 800ef3a:	4770      	bx	lr

0800ef3c <__i2b>:
 800ef3c:	b510      	push	{r4, lr}
 800ef3e:	460c      	mov	r4, r1
 800ef40:	2101      	movs	r1, #1
 800ef42:	f7ff febd 	bl	800ecc0 <_Balloc>
 800ef46:	4602      	mov	r2, r0
 800ef48:	b928      	cbnz	r0, 800ef56 <__i2b+0x1a>
 800ef4a:	4b05      	ldr	r3, [pc, #20]	@ (800ef60 <__i2b+0x24>)
 800ef4c:	4805      	ldr	r0, [pc, #20]	@ (800ef64 <__i2b+0x28>)
 800ef4e:	f240 1145 	movw	r1, #325	@ 0x145
 800ef52:	f001 fc19 	bl	8010788 <__assert_func>
 800ef56:	2301      	movs	r3, #1
 800ef58:	6144      	str	r4, [r0, #20]
 800ef5a:	6103      	str	r3, [r0, #16]
 800ef5c:	bd10      	pop	{r4, pc}
 800ef5e:	bf00      	nop
 800ef60:	08013bb9 	.word	0x08013bb9
 800ef64:	08013bca 	.word	0x08013bca

0800ef68 <__multiply>:
 800ef68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef6c:	4614      	mov	r4, r2
 800ef6e:	690a      	ldr	r2, [r1, #16]
 800ef70:	6923      	ldr	r3, [r4, #16]
 800ef72:	429a      	cmp	r2, r3
 800ef74:	bfa8      	it	ge
 800ef76:	4623      	movge	r3, r4
 800ef78:	460f      	mov	r7, r1
 800ef7a:	bfa4      	itt	ge
 800ef7c:	460c      	movge	r4, r1
 800ef7e:	461f      	movge	r7, r3
 800ef80:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ef84:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ef88:	68a3      	ldr	r3, [r4, #8]
 800ef8a:	6861      	ldr	r1, [r4, #4]
 800ef8c:	eb0a 0609 	add.w	r6, sl, r9
 800ef90:	42b3      	cmp	r3, r6
 800ef92:	b085      	sub	sp, #20
 800ef94:	bfb8      	it	lt
 800ef96:	3101      	addlt	r1, #1
 800ef98:	f7ff fe92 	bl	800ecc0 <_Balloc>
 800ef9c:	b930      	cbnz	r0, 800efac <__multiply+0x44>
 800ef9e:	4602      	mov	r2, r0
 800efa0:	4b44      	ldr	r3, [pc, #272]	@ (800f0b4 <__multiply+0x14c>)
 800efa2:	4845      	ldr	r0, [pc, #276]	@ (800f0b8 <__multiply+0x150>)
 800efa4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800efa8:	f001 fbee 	bl	8010788 <__assert_func>
 800efac:	f100 0514 	add.w	r5, r0, #20
 800efb0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800efb4:	462b      	mov	r3, r5
 800efb6:	2200      	movs	r2, #0
 800efb8:	4543      	cmp	r3, r8
 800efba:	d321      	bcc.n	800f000 <__multiply+0x98>
 800efbc:	f107 0114 	add.w	r1, r7, #20
 800efc0:	f104 0214 	add.w	r2, r4, #20
 800efc4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800efc8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800efcc:	9302      	str	r3, [sp, #8]
 800efce:	1b13      	subs	r3, r2, r4
 800efd0:	3b15      	subs	r3, #21
 800efd2:	f023 0303 	bic.w	r3, r3, #3
 800efd6:	3304      	adds	r3, #4
 800efd8:	f104 0715 	add.w	r7, r4, #21
 800efdc:	42ba      	cmp	r2, r7
 800efde:	bf38      	it	cc
 800efe0:	2304      	movcc	r3, #4
 800efe2:	9301      	str	r3, [sp, #4]
 800efe4:	9b02      	ldr	r3, [sp, #8]
 800efe6:	9103      	str	r1, [sp, #12]
 800efe8:	428b      	cmp	r3, r1
 800efea:	d80c      	bhi.n	800f006 <__multiply+0x9e>
 800efec:	2e00      	cmp	r6, #0
 800efee:	dd03      	ble.n	800eff8 <__multiply+0x90>
 800eff0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d05b      	beq.n	800f0b0 <__multiply+0x148>
 800eff8:	6106      	str	r6, [r0, #16]
 800effa:	b005      	add	sp, #20
 800effc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f000:	f843 2b04 	str.w	r2, [r3], #4
 800f004:	e7d8      	b.n	800efb8 <__multiply+0x50>
 800f006:	f8b1 a000 	ldrh.w	sl, [r1]
 800f00a:	f1ba 0f00 	cmp.w	sl, #0
 800f00e:	d024      	beq.n	800f05a <__multiply+0xf2>
 800f010:	f104 0e14 	add.w	lr, r4, #20
 800f014:	46a9      	mov	r9, r5
 800f016:	f04f 0c00 	mov.w	ip, #0
 800f01a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f01e:	f8d9 3000 	ldr.w	r3, [r9]
 800f022:	fa1f fb87 	uxth.w	fp, r7
 800f026:	b29b      	uxth	r3, r3
 800f028:	fb0a 330b 	mla	r3, sl, fp, r3
 800f02c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f030:	f8d9 7000 	ldr.w	r7, [r9]
 800f034:	4463      	add	r3, ip
 800f036:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f03a:	fb0a c70b 	mla	r7, sl, fp, ip
 800f03e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f042:	b29b      	uxth	r3, r3
 800f044:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f048:	4572      	cmp	r2, lr
 800f04a:	f849 3b04 	str.w	r3, [r9], #4
 800f04e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f052:	d8e2      	bhi.n	800f01a <__multiply+0xb2>
 800f054:	9b01      	ldr	r3, [sp, #4]
 800f056:	f845 c003 	str.w	ip, [r5, r3]
 800f05a:	9b03      	ldr	r3, [sp, #12]
 800f05c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f060:	3104      	adds	r1, #4
 800f062:	f1b9 0f00 	cmp.w	r9, #0
 800f066:	d021      	beq.n	800f0ac <__multiply+0x144>
 800f068:	682b      	ldr	r3, [r5, #0]
 800f06a:	f104 0c14 	add.w	ip, r4, #20
 800f06e:	46ae      	mov	lr, r5
 800f070:	f04f 0a00 	mov.w	sl, #0
 800f074:	f8bc b000 	ldrh.w	fp, [ip]
 800f078:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f07c:	fb09 770b 	mla	r7, r9, fp, r7
 800f080:	4457      	add	r7, sl
 800f082:	b29b      	uxth	r3, r3
 800f084:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f088:	f84e 3b04 	str.w	r3, [lr], #4
 800f08c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f090:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f094:	f8be 3000 	ldrh.w	r3, [lr]
 800f098:	fb09 330a 	mla	r3, r9, sl, r3
 800f09c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f0a0:	4562      	cmp	r2, ip
 800f0a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f0a6:	d8e5      	bhi.n	800f074 <__multiply+0x10c>
 800f0a8:	9f01      	ldr	r7, [sp, #4]
 800f0aa:	51eb      	str	r3, [r5, r7]
 800f0ac:	3504      	adds	r5, #4
 800f0ae:	e799      	b.n	800efe4 <__multiply+0x7c>
 800f0b0:	3e01      	subs	r6, #1
 800f0b2:	e79b      	b.n	800efec <__multiply+0x84>
 800f0b4:	08013bb9 	.word	0x08013bb9
 800f0b8:	08013bca 	.word	0x08013bca

0800f0bc <__pow5mult>:
 800f0bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0c0:	4615      	mov	r5, r2
 800f0c2:	f012 0203 	ands.w	r2, r2, #3
 800f0c6:	4607      	mov	r7, r0
 800f0c8:	460e      	mov	r6, r1
 800f0ca:	d007      	beq.n	800f0dc <__pow5mult+0x20>
 800f0cc:	4c25      	ldr	r4, [pc, #148]	@ (800f164 <__pow5mult+0xa8>)
 800f0ce:	3a01      	subs	r2, #1
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f0d6:	f7ff fe55 	bl	800ed84 <__multadd>
 800f0da:	4606      	mov	r6, r0
 800f0dc:	10ad      	asrs	r5, r5, #2
 800f0de:	d03d      	beq.n	800f15c <__pow5mult+0xa0>
 800f0e0:	69fc      	ldr	r4, [r7, #28]
 800f0e2:	b97c      	cbnz	r4, 800f104 <__pow5mult+0x48>
 800f0e4:	2010      	movs	r0, #16
 800f0e6:	f7ff fd35 	bl	800eb54 <malloc>
 800f0ea:	4602      	mov	r2, r0
 800f0ec:	61f8      	str	r0, [r7, #28]
 800f0ee:	b928      	cbnz	r0, 800f0fc <__pow5mult+0x40>
 800f0f0:	4b1d      	ldr	r3, [pc, #116]	@ (800f168 <__pow5mult+0xac>)
 800f0f2:	481e      	ldr	r0, [pc, #120]	@ (800f16c <__pow5mult+0xb0>)
 800f0f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f0f8:	f001 fb46 	bl	8010788 <__assert_func>
 800f0fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f100:	6004      	str	r4, [r0, #0]
 800f102:	60c4      	str	r4, [r0, #12]
 800f104:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f108:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f10c:	b94c      	cbnz	r4, 800f122 <__pow5mult+0x66>
 800f10e:	f240 2171 	movw	r1, #625	@ 0x271
 800f112:	4638      	mov	r0, r7
 800f114:	f7ff ff12 	bl	800ef3c <__i2b>
 800f118:	2300      	movs	r3, #0
 800f11a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f11e:	4604      	mov	r4, r0
 800f120:	6003      	str	r3, [r0, #0]
 800f122:	f04f 0900 	mov.w	r9, #0
 800f126:	07eb      	lsls	r3, r5, #31
 800f128:	d50a      	bpl.n	800f140 <__pow5mult+0x84>
 800f12a:	4631      	mov	r1, r6
 800f12c:	4622      	mov	r2, r4
 800f12e:	4638      	mov	r0, r7
 800f130:	f7ff ff1a 	bl	800ef68 <__multiply>
 800f134:	4631      	mov	r1, r6
 800f136:	4680      	mov	r8, r0
 800f138:	4638      	mov	r0, r7
 800f13a:	f7ff fe01 	bl	800ed40 <_Bfree>
 800f13e:	4646      	mov	r6, r8
 800f140:	106d      	asrs	r5, r5, #1
 800f142:	d00b      	beq.n	800f15c <__pow5mult+0xa0>
 800f144:	6820      	ldr	r0, [r4, #0]
 800f146:	b938      	cbnz	r0, 800f158 <__pow5mult+0x9c>
 800f148:	4622      	mov	r2, r4
 800f14a:	4621      	mov	r1, r4
 800f14c:	4638      	mov	r0, r7
 800f14e:	f7ff ff0b 	bl	800ef68 <__multiply>
 800f152:	6020      	str	r0, [r4, #0]
 800f154:	f8c0 9000 	str.w	r9, [r0]
 800f158:	4604      	mov	r4, r0
 800f15a:	e7e4      	b.n	800f126 <__pow5mult+0x6a>
 800f15c:	4630      	mov	r0, r6
 800f15e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f162:	bf00      	nop
 800f164:	08013c24 	.word	0x08013c24
 800f168:	08013b4a 	.word	0x08013b4a
 800f16c:	08013bca 	.word	0x08013bca

0800f170 <__lshift>:
 800f170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f174:	460c      	mov	r4, r1
 800f176:	6849      	ldr	r1, [r1, #4]
 800f178:	6923      	ldr	r3, [r4, #16]
 800f17a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f17e:	68a3      	ldr	r3, [r4, #8]
 800f180:	4607      	mov	r7, r0
 800f182:	4691      	mov	r9, r2
 800f184:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f188:	f108 0601 	add.w	r6, r8, #1
 800f18c:	42b3      	cmp	r3, r6
 800f18e:	db0b      	blt.n	800f1a8 <__lshift+0x38>
 800f190:	4638      	mov	r0, r7
 800f192:	f7ff fd95 	bl	800ecc0 <_Balloc>
 800f196:	4605      	mov	r5, r0
 800f198:	b948      	cbnz	r0, 800f1ae <__lshift+0x3e>
 800f19a:	4602      	mov	r2, r0
 800f19c:	4b28      	ldr	r3, [pc, #160]	@ (800f240 <__lshift+0xd0>)
 800f19e:	4829      	ldr	r0, [pc, #164]	@ (800f244 <__lshift+0xd4>)
 800f1a0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f1a4:	f001 faf0 	bl	8010788 <__assert_func>
 800f1a8:	3101      	adds	r1, #1
 800f1aa:	005b      	lsls	r3, r3, #1
 800f1ac:	e7ee      	b.n	800f18c <__lshift+0x1c>
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	f100 0114 	add.w	r1, r0, #20
 800f1b4:	f100 0210 	add.w	r2, r0, #16
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	4553      	cmp	r3, sl
 800f1bc:	db33      	blt.n	800f226 <__lshift+0xb6>
 800f1be:	6920      	ldr	r0, [r4, #16]
 800f1c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f1c4:	f104 0314 	add.w	r3, r4, #20
 800f1c8:	f019 091f 	ands.w	r9, r9, #31
 800f1cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f1d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f1d4:	d02b      	beq.n	800f22e <__lshift+0xbe>
 800f1d6:	f1c9 0e20 	rsb	lr, r9, #32
 800f1da:	468a      	mov	sl, r1
 800f1dc:	2200      	movs	r2, #0
 800f1de:	6818      	ldr	r0, [r3, #0]
 800f1e0:	fa00 f009 	lsl.w	r0, r0, r9
 800f1e4:	4310      	orrs	r0, r2
 800f1e6:	f84a 0b04 	str.w	r0, [sl], #4
 800f1ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1ee:	459c      	cmp	ip, r3
 800f1f0:	fa22 f20e 	lsr.w	r2, r2, lr
 800f1f4:	d8f3      	bhi.n	800f1de <__lshift+0x6e>
 800f1f6:	ebac 0304 	sub.w	r3, ip, r4
 800f1fa:	3b15      	subs	r3, #21
 800f1fc:	f023 0303 	bic.w	r3, r3, #3
 800f200:	3304      	adds	r3, #4
 800f202:	f104 0015 	add.w	r0, r4, #21
 800f206:	4584      	cmp	ip, r0
 800f208:	bf38      	it	cc
 800f20a:	2304      	movcc	r3, #4
 800f20c:	50ca      	str	r2, [r1, r3]
 800f20e:	b10a      	cbz	r2, 800f214 <__lshift+0xa4>
 800f210:	f108 0602 	add.w	r6, r8, #2
 800f214:	3e01      	subs	r6, #1
 800f216:	4638      	mov	r0, r7
 800f218:	612e      	str	r6, [r5, #16]
 800f21a:	4621      	mov	r1, r4
 800f21c:	f7ff fd90 	bl	800ed40 <_Bfree>
 800f220:	4628      	mov	r0, r5
 800f222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f226:	f842 0f04 	str.w	r0, [r2, #4]!
 800f22a:	3301      	adds	r3, #1
 800f22c:	e7c5      	b.n	800f1ba <__lshift+0x4a>
 800f22e:	3904      	subs	r1, #4
 800f230:	f853 2b04 	ldr.w	r2, [r3], #4
 800f234:	f841 2f04 	str.w	r2, [r1, #4]!
 800f238:	459c      	cmp	ip, r3
 800f23a:	d8f9      	bhi.n	800f230 <__lshift+0xc0>
 800f23c:	e7ea      	b.n	800f214 <__lshift+0xa4>
 800f23e:	bf00      	nop
 800f240:	08013bb9 	.word	0x08013bb9
 800f244:	08013bca 	.word	0x08013bca

0800f248 <__mcmp>:
 800f248:	690a      	ldr	r2, [r1, #16]
 800f24a:	4603      	mov	r3, r0
 800f24c:	6900      	ldr	r0, [r0, #16]
 800f24e:	1a80      	subs	r0, r0, r2
 800f250:	b530      	push	{r4, r5, lr}
 800f252:	d10e      	bne.n	800f272 <__mcmp+0x2a>
 800f254:	3314      	adds	r3, #20
 800f256:	3114      	adds	r1, #20
 800f258:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f25c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f260:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f264:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f268:	4295      	cmp	r5, r2
 800f26a:	d003      	beq.n	800f274 <__mcmp+0x2c>
 800f26c:	d205      	bcs.n	800f27a <__mcmp+0x32>
 800f26e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f272:	bd30      	pop	{r4, r5, pc}
 800f274:	42a3      	cmp	r3, r4
 800f276:	d3f3      	bcc.n	800f260 <__mcmp+0x18>
 800f278:	e7fb      	b.n	800f272 <__mcmp+0x2a>
 800f27a:	2001      	movs	r0, #1
 800f27c:	e7f9      	b.n	800f272 <__mcmp+0x2a>
	...

0800f280 <__mdiff>:
 800f280:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f284:	4689      	mov	r9, r1
 800f286:	4606      	mov	r6, r0
 800f288:	4611      	mov	r1, r2
 800f28a:	4648      	mov	r0, r9
 800f28c:	4614      	mov	r4, r2
 800f28e:	f7ff ffdb 	bl	800f248 <__mcmp>
 800f292:	1e05      	subs	r5, r0, #0
 800f294:	d112      	bne.n	800f2bc <__mdiff+0x3c>
 800f296:	4629      	mov	r1, r5
 800f298:	4630      	mov	r0, r6
 800f29a:	f7ff fd11 	bl	800ecc0 <_Balloc>
 800f29e:	4602      	mov	r2, r0
 800f2a0:	b928      	cbnz	r0, 800f2ae <__mdiff+0x2e>
 800f2a2:	4b3f      	ldr	r3, [pc, #252]	@ (800f3a0 <__mdiff+0x120>)
 800f2a4:	f240 2137 	movw	r1, #567	@ 0x237
 800f2a8:	483e      	ldr	r0, [pc, #248]	@ (800f3a4 <__mdiff+0x124>)
 800f2aa:	f001 fa6d 	bl	8010788 <__assert_func>
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f2b4:	4610      	mov	r0, r2
 800f2b6:	b003      	add	sp, #12
 800f2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2bc:	bfbc      	itt	lt
 800f2be:	464b      	movlt	r3, r9
 800f2c0:	46a1      	movlt	r9, r4
 800f2c2:	4630      	mov	r0, r6
 800f2c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f2c8:	bfba      	itte	lt
 800f2ca:	461c      	movlt	r4, r3
 800f2cc:	2501      	movlt	r5, #1
 800f2ce:	2500      	movge	r5, #0
 800f2d0:	f7ff fcf6 	bl	800ecc0 <_Balloc>
 800f2d4:	4602      	mov	r2, r0
 800f2d6:	b918      	cbnz	r0, 800f2e0 <__mdiff+0x60>
 800f2d8:	4b31      	ldr	r3, [pc, #196]	@ (800f3a0 <__mdiff+0x120>)
 800f2da:	f240 2145 	movw	r1, #581	@ 0x245
 800f2de:	e7e3      	b.n	800f2a8 <__mdiff+0x28>
 800f2e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f2e4:	6926      	ldr	r6, [r4, #16]
 800f2e6:	60c5      	str	r5, [r0, #12]
 800f2e8:	f109 0310 	add.w	r3, r9, #16
 800f2ec:	f109 0514 	add.w	r5, r9, #20
 800f2f0:	f104 0e14 	add.w	lr, r4, #20
 800f2f4:	f100 0b14 	add.w	fp, r0, #20
 800f2f8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f2fc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f300:	9301      	str	r3, [sp, #4]
 800f302:	46d9      	mov	r9, fp
 800f304:	f04f 0c00 	mov.w	ip, #0
 800f308:	9b01      	ldr	r3, [sp, #4]
 800f30a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f30e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f312:	9301      	str	r3, [sp, #4]
 800f314:	fa1f f38a 	uxth.w	r3, sl
 800f318:	4619      	mov	r1, r3
 800f31a:	b283      	uxth	r3, r0
 800f31c:	1acb      	subs	r3, r1, r3
 800f31e:	0c00      	lsrs	r0, r0, #16
 800f320:	4463      	add	r3, ip
 800f322:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f326:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f32a:	b29b      	uxth	r3, r3
 800f32c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f330:	4576      	cmp	r6, lr
 800f332:	f849 3b04 	str.w	r3, [r9], #4
 800f336:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f33a:	d8e5      	bhi.n	800f308 <__mdiff+0x88>
 800f33c:	1b33      	subs	r3, r6, r4
 800f33e:	3b15      	subs	r3, #21
 800f340:	f023 0303 	bic.w	r3, r3, #3
 800f344:	3415      	adds	r4, #21
 800f346:	3304      	adds	r3, #4
 800f348:	42a6      	cmp	r6, r4
 800f34a:	bf38      	it	cc
 800f34c:	2304      	movcc	r3, #4
 800f34e:	441d      	add	r5, r3
 800f350:	445b      	add	r3, fp
 800f352:	461e      	mov	r6, r3
 800f354:	462c      	mov	r4, r5
 800f356:	4544      	cmp	r4, r8
 800f358:	d30e      	bcc.n	800f378 <__mdiff+0xf8>
 800f35a:	f108 0103 	add.w	r1, r8, #3
 800f35e:	1b49      	subs	r1, r1, r5
 800f360:	f021 0103 	bic.w	r1, r1, #3
 800f364:	3d03      	subs	r5, #3
 800f366:	45a8      	cmp	r8, r5
 800f368:	bf38      	it	cc
 800f36a:	2100      	movcc	r1, #0
 800f36c:	440b      	add	r3, r1
 800f36e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f372:	b191      	cbz	r1, 800f39a <__mdiff+0x11a>
 800f374:	6117      	str	r7, [r2, #16]
 800f376:	e79d      	b.n	800f2b4 <__mdiff+0x34>
 800f378:	f854 1b04 	ldr.w	r1, [r4], #4
 800f37c:	46e6      	mov	lr, ip
 800f37e:	0c08      	lsrs	r0, r1, #16
 800f380:	fa1c fc81 	uxtah	ip, ip, r1
 800f384:	4471      	add	r1, lr
 800f386:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f38a:	b289      	uxth	r1, r1
 800f38c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f390:	f846 1b04 	str.w	r1, [r6], #4
 800f394:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f398:	e7dd      	b.n	800f356 <__mdiff+0xd6>
 800f39a:	3f01      	subs	r7, #1
 800f39c:	e7e7      	b.n	800f36e <__mdiff+0xee>
 800f39e:	bf00      	nop
 800f3a0:	08013bb9 	.word	0x08013bb9
 800f3a4:	08013bca 	.word	0x08013bca

0800f3a8 <__ulp>:
 800f3a8:	b082      	sub	sp, #8
 800f3aa:	ed8d 0b00 	vstr	d0, [sp]
 800f3ae:	9a01      	ldr	r2, [sp, #4]
 800f3b0:	4b0f      	ldr	r3, [pc, #60]	@ (800f3f0 <__ulp+0x48>)
 800f3b2:	4013      	ands	r3, r2
 800f3b4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	dc08      	bgt.n	800f3ce <__ulp+0x26>
 800f3bc:	425b      	negs	r3, r3
 800f3be:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f3c2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f3c6:	da04      	bge.n	800f3d2 <__ulp+0x2a>
 800f3c8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f3cc:	4113      	asrs	r3, r2
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	e008      	b.n	800f3e4 <__ulp+0x3c>
 800f3d2:	f1a2 0314 	sub.w	r3, r2, #20
 800f3d6:	2b1e      	cmp	r3, #30
 800f3d8:	bfda      	itte	le
 800f3da:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f3de:	40da      	lsrle	r2, r3
 800f3e0:	2201      	movgt	r2, #1
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	4619      	mov	r1, r3
 800f3e6:	4610      	mov	r0, r2
 800f3e8:	ec41 0b10 	vmov	d0, r0, r1
 800f3ec:	b002      	add	sp, #8
 800f3ee:	4770      	bx	lr
 800f3f0:	7ff00000 	.word	0x7ff00000

0800f3f4 <__b2d>:
 800f3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3f8:	6906      	ldr	r6, [r0, #16]
 800f3fa:	f100 0814 	add.w	r8, r0, #20
 800f3fe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f402:	1f37      	subs	r7, r6, #4
 800f404:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f408:	4610      	mov	r0, r2
 800f40a:	f7ff fd4b 	bl	800eea4 <__hi0bits>
 800f40e:	f1c0 0320 	rsb	r3, r0, #32
 800f412:	280a      	cmp	r0, #10
 800f414:	600b      	str	r3, [r1, #0]
 800f416:	491b      	ldr	r1, [pc, #108]	@ (800f484 <__b2d+0x90>)
 800f418:	dc15      	bgt.n	800f446 <__b2d+0x52>
 800f41a:	f1c0 0c0b 	rsb	ip, r0, #11
 800f41e:	fa22 f30c 	lsr.w	r3, r2, ip
 800f422:	45b8      	cmp	r8, r7
 800f424:	ea43 0501 	orr.w	r5, r3, r1
 800f428:	bf34      	ite	cc
 800f42a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f42e:	2300      	movcs	r3, #0
 800f430:	3015      	adds	r0, #21
 800f432:	fa02 f000 	lsl.w	r0, r2, r0
 800f436:	fa23 f30c 	lsr.w	r3, r3, ip
 800f43a:	4303      	orrs	r3, r0
 800f43c:	461c      	mov	r4, r3
 800f43e:	ec45 4b10 	vmov	d0, r4, r5
 800f442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f446:	45b8      	cmp	r8, r7
 800f448:	bf3a      	itte	cc
 800f44a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f44e:	f1a6 0708 	subcc.w	r7, r6, #8
 800f452:	2300      	movcs	r3, #0
 800f454:	380b      	subs	r0, #11
 800f456:	d012      	beq.n	800f47e <__b2d+0x8a>
 800f458:	f1c0 0120 	rsb	r1, r0, #32
 800f45c:	fa23 f401 	lsr.w	r4, r3, r1
 800f460:	4082      	lsls	r2, r0
 800f462:	4322      	orrs	r2, r4
 800f464:	4547      	cmp	r7, r8
 800f466:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800f46a:	bf8c      	ite	hi
 800f46c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f470:	2200      	movls	r2, #0
 800f472:	4083      	lsls	r3, r0
 800f474:	40ca      	lsrs	r2, r1
 800f476:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f47a:	4313      	orrs	r3, r2
 800f47c:	e7de      	b.n	800f43c <__b2d+0x48>
 800f47e:	ea42 0501 	orr.w	r5, r2, r1
 800f482:	e7db      	b.n	800f43c <__b2d+0x48>
 800f484:	3ff00000 	.word	0x3ff00000

0800f488 <__d2b>:
 800f488:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f48c:	460f      	mov	r7, r1
 800f48e:	2101      	movs	r1, #1
 800f490:	ec59 8b10 	vmov	r8, r9, d0
 800f494:	4616      	mov	r6, r2
 800f496:	f7ff fc13 	bl	800ecc0 <_Balloc>
 800f49a:	4604      	mov	r4, r0
 800f49c:	b930      	cbnz	r0, 800f4ac <__d2b+0x24>
 800f49e:	4602      	mov	r2, r0
 800f4a0:	4b23      	ldr	r3, [pc, #140]	@ (800f530 <__d2b+0xa8>)
 800f4a2:	4824      	ldr	r0, [pc, #144]	@ (800f534 <__d2b+0xac>)
 800f4a4:	f240 310f 	movw	r1, #783	@ 0x30f
 800f4a8:	f001 f96e 	bl	8010788 <__assert_func>
 800f4ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f4b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f4b4:	b10d      	cbz	r5, 800f4ba <__d2b+0x32>
 800f4b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f4ba:	9301      	str	r3, [sp, #4]
 800f4bc:	f1b8 0300 	subs.w	r3, r8, #0
 800f4c0:	d023      	beq.n	800f50a <__d2b+0x82>
 800f4c2:	4668      	mov	r0, sp
 800f4c4:	9300      	str	r3, [sp, #0]
 800f4c6:	f7ff fd0c 	bl	800eee2 <__lo0bits>
 800f4ca:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f4ce:	b1d0      	cbz	r0, 800f506 <__d2b+0x7e>
 800f4d0:	f1c0 0320 	rsb	r3, r0, #32
 800f4d4:	fa02 f303 	lsl.w	r3, r2, r3
 800f4d8:	430b      	orrs	r3, r1
 800f4da:	40c2      	lsrs	r2, r0
 800f4dc:	6163      	str	r3, [r4, #20]
 800f4de:	9201      	str	r2, [sp, #4]
 800f4e0:	9b01      	ldr	r3, [sp, #4]
 800f4e2:	61a3      	str	r3, [r4, #24]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	bf0c      	ite	eq
 800f4e8:	2201      	moveq	r2, #1
 800f4ea:	2202      	movne	r2, #2
 800f4ec:	6122      	str	r2, [r4, #16]
 800f4ee:	b1a5      	cbz	r5, 800f51a <__d2b+0x92>
 800f4f0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f4f4:	4405      	add	r5, r0
 800f4f6:	603d      	str	r5, [r7, #0]
 800f4f8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f4fc:	6030      	str	r0, [r6, #0]
 800f4fe:	4620      	mov	r0, r4
 800f500:	b003      	add	sp, #12
 800f502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f506:	6161      	str	r1, [r4, #20]
 800f508:	e7ea      	b.n	800f4e0 <__d2b+0x58>
 800f50a:	a801      	add	r0, sp, #4
 800f50c:	f7ff fce9 	bl	800eee2 <__lo0bits>
 800f510:	9b01      	ldr	r3, [sp, #4]
 800f512:	6163      	str	r3, [r4, #20]
 800f514:	3020      	adds	r0, #32
 800f516:	2201      	movs	r2, #1
 800f518:	e7e8      	b.n	800f4ec <__d2b+0x64>
 800f51a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f51e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f522:	6038      	str	r0, [r7, #0]
 800f524:	6918      	ldr	r0, [r3, #16]
 800f526:	f7ff fcbd 	bl	800eea4 <__hi0bits>
 800f52a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f52e:	e7e5      	b.n	800f4fc <__d2b+0x74>
 800f530:	08013bb9 	.word	0x08013bb9
 800f534:	08013bca 	.word	0x08013bca

0800f538 <__ratio>:
 800f538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f53c:	b085      	sub	sp, #20
 800f53e:	e9cd 1000 	strd	r1, r0, [sp]
 800f542:	a902      	add	r1, sp, #8
 800f544:	f7ff ff56 	bl	800f3f4 <__b2d>
 800f548:	9800      	ldr	r0, [sp, #0]
 800f54a:	a903      	add	r1, sp, #12
 800f54c:	ec55 4b10 	vmov	r4, r5, d0
 800f550:	f7ff ff50 	bl	800f3f4 <__b2d>
 800f554:	9b01      	ldr	r3, [sp, #4]
 800f556:	6919      	ldr	r1, [r3, #16]
 800f558:	9b00      	ldr	r3, [sp, #0]
 800f55a:	691b      	ldr	r3, [r3, #16]
 800f55c:	1ac9      	subs	r1, r1, r3
 800f55e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f562:	1a9b      	subs	r3, r3, r2
 800f564:	ec5b ab10 	vmov	sl, fp, d0
 800f568:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	bfce      	itee	gt
 800f570:	462a      	movgt	r2, r5
 800f572:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f576:	465a      	movle	r2, fp
 800f578:	462f      	mov	r7, r5
 800f57a:	46d9      	mov	r9, fp
 800f57c:	bfcc      	ite	gt
 800f57e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f582:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f586:	464b      	mov	r3, r9
 800f588:	4652      	mov	r2, sl
 800f58a:	4620      	mov	r0, r4
 800f58c:	4639      	mov	r1, r7
 800f58e:	f7f1 f965 	bl	800085c <__aeabi_ddiv>
 800f592:	ec41 0b10 	vmov	d0, r0, r1
 800f596:	b005      	add	sp, #20
 800f598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f59c <__copybits>:
 800f59c:	3901      	subs	r1, #1
 800f59e:	b570      	push	{r4, r5, r6, lr}
 800f5a0:	1149      	asrs	r1, r1, #5
 800f5a2:	6914      	ldr	r4, [r2, #16]
 800f5a4:	3101      	adds	r1, #1
 800f5a6:	f102 0314 	add.w	r3, r2, #20
 800f5aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f5ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f5b2:	1f05      	subs	r5, r0, #4
 800f5b4:	42a3      	cmp	r3, r4
 800f5b6:	d30c      	bcc.n	800f5d2 <__copybits+0x36>
 800f5b8:	1aa3      	subs	r3, r4, r2
 800f5ba:	3b11      	subs	r3, #17
 800f5bc:	f023 0303 	bic.w	r3, r3, #3
 800f5c0:	3211      	adds	r2, #17
 800f5c2:	42a2      	cmp	r2, r4
 800f5c4:	bf88      	it	hi
 800f5c6:	2300      	movhi	r3, #0
 800f5c8:	4418      	add	r0, r3
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	4288      	cmp	r0, r1
 800f5ce:	d305      	bcc.n	800f5dc <__copybits+0x40>
 800f5d0:	bd70      	pop	{r4, r5, r6, pc}
 800f5d2:	f853 6b04 	ldr.w	r6, [r3], #4
 800f5d6:	f845 6f04 	str.w	r6, [r5, #4]!
 800f5da:	e7eb      	b.n	800f5b4 <__copybits+0x18>
 800f5dc:	f840 3b04 	str.w	r3, [r0], #4
 800f5e0:	e7f4      	b.n	800f5cc <__copybits+0x30>

0800f5e2 <__any_on>:
 800f5e2:	f100 0214 	add.w	r2, r0, #20
 800f5e6:	6900      	ldr	r0, [r0, #16]
 800f5e8:	114b      	asrs	r3, r1, #5
 800f5ea:	4298      	cmp	r0, r3
 800f5ec:	b510      	push	{r4, lr}
 800f5ee:	db11      	blt.n	800f614 <__any_on+0x32>
 800f5f0:	dd0a      	ble.n	800f608 <__any_on+0x26>
 800f5f2:	f011 011f 	ands.w	r1, r1, #31
 800f5f6:	d007      	beq.n	800f608 <__any_on+0x26>
 800f5f8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f5fc:	fa24 f001 	lsr.w	r0, r4, r1
 800f600:	fa00 f101 	lsl.w	r1, r0, r1
 800f604:	428c      	cmp	r4, r1
 800f606:	d10b      	bne.n	800f620 <__any_on+0x3e>
 800f608:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f60c:	4293      	cmp	r3, r2
 800f60e:	d803      	bhi.n	800f618 <__any_on+0x36>
 800f610:	2000      	movs	r0, #0
 800f612:	bd10      	pop	{r4, pc}
 800f614:	4603      	mov	r3, r0
 800f616:	e7f7      	b.n	800f608 <__any_on+0x26>
 800f618:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f61c:	2900      	cmp	r1, #0
 800f61e:	d0f5      	beq.n	800f60c <__any_on+0x2a>
 800f620:	2001      	movs	r0, #1
 800f622:	e7f6      	b.n	800f612 <__any_on+0x30>

0800f624 <sulp>:
 800f624:	b570      	push	{r4, r5, r6, lr}
 800f626:	4604      	mov	r4, r0
 800f628:	460d      	mov	r5, r1
 800f62a:	ec45 4b10 	vmov	d0, r4, r5
 800f62e:	4616      	mov	r6, r2
 800f630:	f7ff feba 	bl	800f3a8 <__ulp>
 800f634:	ec51 0b10 	vmov	r0, r1, d0
 800f638:	b17e      	cbz	r6, 800f65a <sulp+0x36>
 800f63a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f63e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f642:	2b00      	cmp	r3, #0
 800f644:	dd09      	ble.n	800f65a <sulp+0x36>
 800f646:	051b      	lsls	r3, r3, #20
 800f648:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800f64c:	2400      	movs	r4, #0
 800f64e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800f652:	4622      	mov	r2, r4
 800f654:	462b      	mov	r3, r5
 800f656:	f7f0 ffd7 	bl	8000608 <__aeabi_dmul>
 800f65a:	ec41 0b10 	vmov	d0, r0, r1
 800f65e:	bd70      	pop	{r4, r5, r6, pc}

0800f660 <_strtod_l>:
 800f660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f664:	b09f      	sub	sp, #124	@ 0x7c
 800f666:	460c      	mov	r4, r1
 800f668:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f66a:	2200      	movs	r2, #0
 800f66c:	921a      	str	r2, [sp, #104]	@ 0x68
 800f66e:	9005      	str	r0, [sp, #20]
 800f670:	f04f 0a00 	mov.w	sl, #0
 800f674:	f04f 0b00 	mov.w	fp, #0
 800f678:	460a      	mov	r2, r1
 800f67a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f67c:	7811      	ldrb	r1, [r2, #0]
 800f67e:	292b      	cmp	r1, #43	@ 0x2b
 800f680:	d04a      	beq.n	800f718 <_strtod_l+0xb8>
 800f682:	d838      	bhi.n	800f6f6 <_strtod_l+0x96>
 800f684:	290d      	cmp	r1, #13
 800f686:	d832      	bhi.n	800f6ee <_strtod_l+0x8e>
 800f688:	2908      	cmp	r1, #8
 800f68a:	d832      	bhi.n	800f6f2 <_strtod_l+0x92>
 800f68c:	2900      	cmp	r1, #0
 800f68e:	d03b      	beq.n	800f708 <_strtod_l+0xa8>
 800f690:	2200      	movs	r2, #0
 800f692:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f694:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f696:	782a      	ldrb	r2, [r5, #0]
 800f698:	2a30      	cmp	r2, #48	@ 0x30
 800f69a:	f040 80b3 	bne.w	800f804 <_strtod_l+0x1a4>
 800f69e:	786a      	ldrb	r2, [r5, #1]
 800f6a0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f6a4:	2a58      	cmp	r2, #88	@ 0x58
 800f6a6:	d16e      	bne.n	800f786 <_strtod_l+0x126>
 800f6a8:	9302      	str	r3, [sp, #8]
 800f6aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f6ac:	9301      	str	r3, [sp, #4]
 800f6ae:	ab1a      	add	r3, sp, #104	@ 0x68
 800f6b0:	9300      	str	r3, [sp, #0]
 800f6b2:	4a8e      	ldr	r2, [pc, #568]	@ (800f8ec <_strtod_l+0x28c>)
 800f6b4:	9805      	ldr	r0, [sp, #20]
 800f6b6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f6b8:	a919      	add	r1, sp, #100	@ 0x64
 800f6ba:	f001 f8ff 	bl	80108bc <__gethex>
 800f6be:	f010 060f 	ands.w	r6, r0, #15
 800f6c2:	4604      	mov	r4, r0
 800f6c4:	d005      	beq.n	800f6d2 <_strtod_l+0x72>
 800f6c6:	2e06      	cmp	r6, #6
 800f6c8:	d128      	bne.n	800f71c <_strtod_l+0xbc>
 800f6ca:	3501      	adds	r5, #1
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	9519      	str	r5, [sp, #100]	@ 0x64
 800f6d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f6d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	f040 858e 	bne.w	80101f6 <_strtod_l+0xb96>
 800f6da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f6dc:	b1cb      	cbz	r3, 800f712 <_strtod_l+0xb2>
 800f6de:	4652      	mov	r2, sl
 800f6e0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800f6e4:	ec43 2b10 	vmov	d0, r2, r3
 800f6e8:	b01f      	add	sp, #124	@ 0x7c
 800f6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ee:	2920      	cmp	r1, #32
 800f6f0:	d1ce      	bne.n	800f690 <_strtod_l+0x30>
 800f6f2:	3201      	adds	r2, #1
 800f6f4:	e7c1      	b.n	800f67a <_strtod_l+0x1a>
 800f6f6:	292d      	cmp	r1, #45	@ 0x2d
 800f6f8:	d1ca      	bne.n	800f690 <_strtod_l+0x30>
 800f6fa:	2101      	movs	r1, #1
 800f6fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f6fe:	1c51      	adds	r1, r2, #1
 800f700:	9119      	str	r1, [sp, #100]	@ 0x64
 800f702:	7852      	ldrb	r2, [r2, #1]
 800f704:	2a00      	cmp	r2, #0
 800f706:	d1c5      	bne.n	800f694 <_strtod_l+0x34>
 800f708:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f70a:	9419      	str	r4, [sp, #100]	@ 0x64
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	f040 8570 	bne.w	80101f2 <_strtod_l+0xb92>
 800f712:	4652      	mov	r2, sl
 800f714:	465b      	mov	r3, fp
 800f716:	e7e5      	b.n	800f6e4 <_strtod_l+0x84>
 800f718:	2100      	movs	r1, #0
 800f71a:	e7ef      	b.n	800f6fc <_strtod_l+0x9c>
 800f71c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f71e:	b13a      	cbz	r2, 800f730 <_strtod_l+0xd0>
 800f720:	2135      	movs	r1, #53	@ 0x35
 800f722:	a81c      	add	r0, sp, #112	@ 0x70
 800f724:	f7ff ff3a 	bl	800f59c <__copybits>
 800f728:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f72a:	9805      	ldr	r0, [sp, #20]
 800f72c:	f7ff fb08 	bl	800ed40 <_Bfree>
 800f730:	3e01      	subs	r6, #1
 800f732:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f734:	2e04      	cmp	r6, #4
 800f736:	d806      	bhi.n	800f746 <_strtod_l+0xe6>
 800f738:	e8df f006 	tbb	[pc, r6]
 800f73c:	201d0314 	.word	0x201d0314
 800f740:	14          	.byte	0x14
 800f741:	00          	.byte	0x00
 800f742:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800f746:	05e1      	lsls	r1, r4, #23
 800f748:	bf48      	it	mi
 800f74a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800f74e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f752:	0d1b      	lsrs	r3, r3, #20
 800f754:	051b      	lsls	r3, r3, #20
 800f756:	2b00      	cmp	r3, #0
 800f758:	d1bb      	bne.n	800f6d2 <_strtod_l+0x72>
 800f75a:	f7fe fb23 	bl	800dda4 <__errno>
 800f75e:	2322      	movs	r3, #34	@ 0x22
 800f760:	6003      	str	r3, [r0, #0]
 800f762:	e7b6      	b.n	800f6d2 <_strtod_l+0x72>
 800f764:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800f768:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f76c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f770:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f774:	e7e7      	b.n	800f746 <_strtod_l+0xe6>
 800f776:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800f8f4 <_strtod_l+0x294>
 800f77a:	e7e4      	b.n	800f746 <_strtod_l+0xe6>
 800f77c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f780:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800f784:	e7df      	b.n	800f746 <_strtod_l+0xe6>
 800f786:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f788:	1c5a      	adds	r2, r3, #1
 800f78a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f78c:	785b      	ldrb	r3, [r3, #1]
 800f78e:	2b30      	cmp	r3, #48	@ 0x30
 800f790:	d0f9      	beq.n	800f786 <_strtod_l+0x126>
 800f792:	2b00      	cmp	r3, #0
 800f794:	d09d      	beq.n	800f6d2 <_strtod_l+0x72>
 800f796:	2301      	movs	r3, #1
 800f798:	9309      	str	r3, [sp, #36]	@ 0x24
 800f79a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f79c:	930c      	str	r3, [sp, #48]	@ 0x30
 800f79e:	2300      	movs	r3, #0
 800f7a0:	9308      	str	r3, [sp, #32]
 800f7a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800f7a4:	461f      	mov	r7, r3
 800f7a6:	220a      	movs	r2, #10
 800f7a8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800f7aa:	7805      	ldrb	r5, [r0, #0]
 800f7ac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800f7b0:	b2d9      	uxtb	r1, r3
 800f7b2:	2909      	cmp	r1, #9
 800f7b4:	d928      	bls.n	800f808 <_strtod_l+0x1a8>
 800f7b6:	494e      	ldr	r1, [pc, #312]	@ (800f8f0 <_strtod_l+0x290>)
 800f7b8:	2201      	movs	r2, #1
 800f7ba:	f000 ffbb 	bl	8010734 <strncmp>
 800f7be:	2800      	cmp	r0, #0
 800f7c0:	d032      	beq.n	800f828 <_strtod_l+0x1c8>
 800f7c2:	2000      	movs	r0, #0
 800f7c4:	462a      	mov	r2, r5
 800f7c6:	4681      	mov	r9, r0
 800f7c8:	463d      	mov	r5, r7
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	2a65      	cmp	r2, #101	@ 0x65
 800f7ce:	d001      	beq.n	800f7d4 <_strtod_l+0x174>
 800f7d0:	2a45      	cmp	r2, #69	@ 0x45
 800f7d2:	d114      	bne.n	800f7fe <_strtod_l+0x19e>
 800f7d4:	b91d      	cbnz	r5, 800f7de <_strtod_l+0x17e>
 800f7d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f7d8:	4302      	orrs	r2, r0
 800f7da:	d095      	beq.n	800f708 <_strtod_l+0xa8>
 800f7dc:	2500      	movs	r5, #0
 800f7de:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800f7e0:	1c62      	adds	r2, r4, #1
 800f7e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800f7e4:	7862      	ldrb	r2, [r4, #1]
 800f7e6:	2a2b      	cmp	r2, #43	@ 0x2b
 800f7e8:	d077      	beq.n	800f8da <_strtod_l+0x27a>
 800f7ea:	2a2d      	cmp	r2, #45	@ 0x2d
 800f7ec:	d07b      	beq.n	800f8e6 <_strtod_l+0x286>
 800f7ee:	f04f 0c00 	mov.w	ip, #0
 800f7f2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f7f6:	2909      	cmp	r1, #9
 800f7f8:	f240 8082 	bls.w	800f900 <_strtod_l+0x2a0>
 800f7fc:	9419      	str	r4, [sp, #100]	@ 0x64
 800f7fe:	f04f 0800 	mov.w	r8, #0
 800f802:	e0a2      	b.n	800f94a <_strtod_l+0x2ea>
 800f804:	2300      	movs	r3, #0
 800f806:	e7c7      	b.n	800f798 <_strtod_l+0x138>
 800f808:	2f08      	cmp	r7, #8
 800f80a:	bfd5      	itete	le
 800f80c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800f80e:	9908      	ldrgt	r1, [sp, #32]
 800f810:	fb02 3301 	mlale	r3, r2, r1, r3
 800f814:	fb02 3301 	mlagt	r3, r2, r1, r3
 800f818:	f100 0001 	add.w	r0, r0, #1
 800f81c:	bfd4      	ite	le
 800f81e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800f820:	9308      	strgt	r3, [sp, #32]
 800f822:	3701      	adds	r7, #1
 800f824:	9019      	str	r0, [sp, #100]	@ 0x64
 800f826:	e7bf      	b.n	800f7a8 <_strtod_l+0x148>
 800f828:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f82a:	1c5a      	adds	r2, r3, #1
 800f82c:	9219      	str	r2, [sp, #100]	@ 0x64
 800f82e:	785a      	ldrb	r2, [r3, #1]
 800f830:	b37f      	cbz	r7, 800f892 <_strtod_l+0x232>
 800f832:	4681      	mov	r9, r0
 800f834:	463d      	mov	r5, r7
 800f836:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f83a:	2b09      	cmp	r3, #9
 800f83c:	d912      	bls.n	800f864 <_strtod_l+0x204>
 800f83e:	2301      	movs	r3, #1
 800f840:	e7c4      	b.n	800f7cc <_strtod_l+0x16c>
 800f842:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f844:	1c5a      	adds	r2, r3, #1
 800f846:	9219      	str	r2, [sp, #100]	@ 0x64
 800f848:	785a      	ldrb	r2, [r3, #1]
 800f84a:	3001      	adds	r0, #1
 800f84c:	2a30      	cmp	r2, #48	@ 0x30
 800f84e:	d0f8      	beq.n	800f842 <_strtod_l+0x1e2>
 800f850:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f854:	2b08      	cmp	r3, #8
 800f856:	f200 84d3 	bhi.w	8010200 <_strtod_l+0xba0>
 800f85a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f85c:	930c      	str	r3, [sp, #48]	@ 0x30
 800f85e:	4681      	mov	r9, r0
 800f860:	2000      	movs	r0, #0
 800f862:	4605      	mov	r5, r0
 800f864:	3a30      	subs	r2, #48	@ 0x30
 800f866:	f100 0301 	add.w	r3, r0, #1
 800f86a:	d02a      	beq.n	800f8c2 <_strtod_l+0x262>
 800f86c:	4499      	add	r9, r3
 800f86e:	eb00 0c05 	add.w	ip, r0, r5
 800f872:	462b      	mov	r3, r5
 800f874:	210a      	movs	r1, #10
 800f876:	4563      	cmp	r3, ip
 800f878:	d10d      	bne.n	800f896 <_strtod_l+0x236>
 800f87a:	1c69      	adds	r1, r5, #1
 800f87c:	4401      	add	r1, r0
 800f87e:	4428      	add	r0, r5
 800f880:	2808      	cmp	r0, #8
 800f882:	dc16      	bgt.n	800f8b2 <_strtod_l+0x252>
 800f884:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f886:	230a      	movs	r3, #10
 800f888:	fb03 2300 	mla	r3, r3, r0, r2
 800f88c:	930a      	str	r3, [sp, #40]	@ 0x28
 800f88e:	2300      	movs	r3, #0
 800f890:	e018      	b.n	800f8c4 <_strtod_l+0x264>
 800f892:	4638      	mov	r0, r7
 800f894:	e7da      	b.n	800f84c <_strtod_l+0x1ec>
 800f896:	2b08      	cmp	r3, #8
 800f898:	f103 0301 	add.w	r3, r3, #1
 800f89c:	dc03      	bgt.n	800f8a6 <_strtod_l+0x246>
 800f89e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800f8a0:	434e      	muls	r6, r1
 800f8a2:	960a      	str	r6, [sp, #40]	@ 0x28
 800f8a4:	e7e7      	b.n	800f876 <_strtod_l+0x216>
 800f8a6:	2b10      	cmp	r3, #16
 800f8a8:	bfde      	ittt	le
 800f8aa:	9e08      	ldrle	r6, [sp, #32]
 800f8ac:	434e      	mulle	r6, r1
 800f8ae:	9608      	strle	r6, [sp, #32]
 800f8b0:	e7e1      	b.n	800f876 <_strtod_l+0x216>
 800f8b2:	280f      	cmp	r0, #15
 800f8b4:	dceb      	bgt.n	800f88e <_strtod_l+0x22e>
 800f8b6:	9808      	ldr	r0, [sp, #32]
 800f8b8:	230a      	movs	r3, #10
 800f8ba:	fb03 2300 	mla	r3, r3, r0, r2
 800f8be:	9308      	str	r3, [sp, #32]
 800f8c0:	e7e5      	b.n	800f88e <_strtod_l+0x22e>
 800f8c2:	4629      	mov	r1, r5
 800f8c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f8c6:	1c50      	adds	r0, r2, #1
 800f8c8:	9019      	str	r0, [sp, #100]	@ 0x64
 800f8ca:	7852      	ldrb	r2, [r2, #1]
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	460d      	mov	r5, r1
 800f8d0:	e7b1      	b.n	800f836 <_strtod_l+0x1d6>
 800f8d2:	f04f 0900 	mov.w	r9, #0
 800f8d6:	2301      	movs	r3, #1
 800f8d8:	e77d      	b.n	800f7d6 <_strtod_l+0x176>
 800f8da:	f04f 0c00 	mov.w	ip, #0
 800f8de:	1ca2      	adds	r2, r4, #2
 800f8e0:	9219      	str	r2, [sp, #100]	@ 0x64
 800f8e2:	78a2      	ldrb	r2, [r4, #2]
 800f8e4:	e785      	b.n	800f7f2 <_strtod_l+0x192>
 800f8e6:	f04f 0c01 	mov.w	ip, #1
 800f8ea:	e7f8      	b.n	800f8de <_strtod_l+0x27e>
 800f8ec:	08013d38 	.word	0x08013d38
 800f8f0:	08013d20 	.word	0x08013d20
 800f8f4:	7ff00000 	.word	0x7ff00000
 800f8f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f8fa:	1c51      	adds	r1, r2, #1
 800f8fc:	9119      	str	r1, [sp, #100]	@ 0x64
 800f8fe:	7852      	ldrb	r2, [r2, #1]
 800f900:	2a30      	cmp	r2, #48	@ 0x30
 800f902:	d0f9      	beq.n	800f8f8 <_strtod_l+0x298>
 800f904:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800f908:	2908      	cmp	r1, #8
 800f90a:	f63f af78 	bhi.w	800f7fe <_strtod_l+0x19e>
 800f90e:	3a30      	subs	r2, #48	@ 0x30
 800f910:	920e      	str	r2, [sp, #56]	@ 0x38
 800f912:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f914:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f916:	f04f 080a 	mov.w	r8, #10
 800f91a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f91c:	1c56      	adds	r6, r2, #1
 800f91e:	9619      	str	r6, [sp, #100]	@ 0x64
 800f920:	7852      	ldrb	r2, [r2, #1]
 800f922:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f926:	f1be 0f09 	cmp.w	lr, #9
 800f92a:	d939      	bls.n	800f9a0 <_strtod_l+0x340>
 800f92c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f92e:	1a76      	subs	r6, r6, r1
 800f930:	2e08      	cmp	r6, #8
 800f932:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800f936:	dc03      	bgt.n	800f940 <_strtod_l+0x2e0>
 800f938:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f93a:	4588      	cmp	r8, r1
 800f93c:	bfa8      	it	ge
 800f93e:	4688      	movge	r8, r1
 800f940:	f1bc 0f00 	cmp.w	ip, #0
 800f944:	d001      	beq.n	800f94a <_strtod_l+0x2ea>
 800f946:	f1c8 0800 	rsb	r8, r8, #0
 800f94a:	2d00      	cmp	r5, #0
 800f94c:	d14e      	bne.n	800f9ec <_strtod_l+0x38c>
 800f94e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f950:	4308      	orrs	r0, r1
 800f952:	f47f aebe 	bne.w	800f6d2 <_strtod_l+0x72>
 800f956:	2b00      	cmp	r3, #0
 800f958:	f47f aed6 	bne.w	800f708 <_strtod_l+0xa8>
 800f95c:	2a69      	cmp	r2, #105	@ 0x69
 800f95e:	d028      	beq.n	800f9b2 <_strtod_l+0x352>
 800f960:	dc25      	bgt.n	800f9ae <_strtod_l+0x34e>
 800f962:	2a49      	cmp	r2, #73	@ 0x49
 800f964:	d025      	beq.n	800f9b2 <_strtod_l+0x352>
 800f966:	2a4e      	cmp	r2, #78	@ 0x4e
 800f968:	f47f aece 	bne.w	800f708 <_strtod_l+0xa8>
 800f96c:	499b      	ldr	r1, [pc, #620]	@ (800fbdc <_strtod_l+0x57c>)
 800f96e:	a819      	add	r0, sp, #100	@ 0x64
 800f970:	f001 f9c6 	bl	8010d00 <__match>
 800f974:	2800      	cmp	r0, #0
 800f976:	f43f aec7 	beq.w	800f708 <_strtod_l+0xa8>
 800f97a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f97c:	781b      	ldrb	r3, [r3, #0]
 800f97e:	2b28      	cmp	r3, #40	@ 0x28
 800f980:	d12e      	bne.n	800f9e0 <_strtod_l+0x380>
 800f982:	4997      	ldr	r1, [pc, #604]	@ (800fbe0 <_strtod_l+0x580>)
 800f984:	aa1c      	add	r2, sp, #112	@ 0x70
 800f986:	a819      	add	r0, sp, #100	@ 0x64
 800f988:	f001 f9ce 	bl	8010d28 <__hexnan>
 800f98c:	2805      	cmp	r0, #5
 800f98e:	d127      	bne.n	800f9e0 <_strtod_l+0x380>
 800f990:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f992:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f996:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f99a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f99e:	e698      	b.n	800f6d2 <_strtod_l+0x72>
 800f9a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f9a2:	fb08 2101 	mla	r1, r8, r1, r2
 800f9a6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f9aa:	920e      	str	r2, [sp, #56]	@ 0x38
 800f9ac:	e7b5      	b.n	800f91a <_strtod_l+0x2ba>
 800f9ae:	2a6e      	cmp	r2, #110	@ 0x6e
 800f9b0:	e7da      	b.n	800f968 <_strtod_l+0x308>
 800f9b2:	498c      	ldr	r1, [pc, #560]	@ (800fbe4 <_strtod_l+0x584>)
 800f9b4:	a819      	add	r0, sp, #100	@ 0x64
 800f9b6:	f001 f9a3 	bl	8010d00 <__match>
 800f9ba:	2800      	cmp	r0, #0
 800f9bc:	f43f aea4 	beq.w	800f708 <_strtod_l+0xa8>
 800f9c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f9c2:	4989      	ldr	r1, [pc, #548]	@ (800fbe8 <_strtod_l+0x588>)
 800f9c4:	3b01      	subs	r3, #1
 800f9c6:	a819      	add	r0, sp, #100	@ 0x64
 800f9c8:	9319      	str	r3, [sp, #100]	@ 0x64
 800f9ca:	f001 f999 	bl	8010d00 <__match>
 800f9ce:	b910      	cbnz	r0, 800f9d6 <_strtod_l+0x376>
 800f9d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f9d2:	3301      	adds	r3, #1
 800f9d4:	9319      	str	r3, [sp, #100]	@ 0x64
 800f9d6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800fbf8 <_strtod_l+0x598>
 800f9da:	f04f 0a00 	mov.w	sl, #0
 800f9de:	e678      	b.n	800f6d2 <_strtod_l+0x72>
 800f9e0:	4882      	ldr	r0, [pc, #520]	@ (800fbec <_strtod_l+0x58c>)
 800f9e2:	f000 fec9 	bl	8010778 <nan>
 800f9e6:	ec5b ab10 	vmov	sl, fp, d0
 800f9ea:	e672      	b.n	800f6d2 <_strtod_l+0x72>
 800f9ec:	eba8 0309 	sub.w	r3, r8, r9
 800f9f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f9f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9f4:	2f00      	cmp	r7, #0
 800f9f6:	bf08      	it	eq
 800f9f8:	462f      	moveq	r7, r5
 800f9fa:	2d10      	cmp	r5, #16
 800f9fc:	462c      	mov	r4, r5
 800f9fe:	bfa8      	it	ge
 800fa00:	2410      	movge	r4, #16
 800fa02:	f7f0 fd87 	bl	8000514 <__aeabi_ui2d>
 800fa06:	2d09      	cmp	r5, #9
 800fa08:	4682      	mov	sl, r0
 800fa0a:	468b      	mov	fp, r1
 800fa0c:	dc13      	bgt.n	800fa36 <_strtod_l+0x3d6>
 800fa0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	f43f ae5e 	beq.w	800f6d2 <_strtod_l+0x72>
 800fa16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa18:	dd78      	ble.n	800fb0c <_strtod_l+0x4ac>
 800fa1a:	2b16      	cmp	r3, #22
 800fa1c:	dc5f      	bgt.n	800fade <_strtod_l+0x47e>
 800fa1e:	4974      	ldr	r1, [pc, #464]	@ (800fbf0 <_strtod_l+0x590>)
 800fa20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fa24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa28:	4652      	mov	r2, sl
 800fa2a:	465b      	mov	r3, fp
 800fa2c:	f7f0 fdec 	bl	8000608 <__aeabi_dmul>
 800fa30:	4682      	mov	sl, r0
 800fa32:	468b      	mov	fp, r1
 800fa34:	e64d      	b.n	800f6d2 <_strtod_l+0x72>
 800fa36:	4b6e      	ldr	r3, [pc, #440]	@ (800fbf0 <_strtod_l+0x590>)
 800fa38:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fa3c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800fa40:	f7f0 fde2 	bl	8000608 <__aeabi_dmul>
 800fa44:	4682      	mov	sl, r0
 800fa46:	9808      	ldr	r0, [sp, #32]
 800fa48:	468b      	mov	fp, r1
 800fa4a:	f7f0 fd63 	bl	8000514 <__aeabi_ui2d>
 800fa4e:	4602      	mov	r2, r0
 800fa50:	460b      	mov	r3, r1
 800fa52:	4650      	mov	r0, sl
 800fa54:	4659      	mov	r1, fp
 800fa56:	f7f0 fc21 	bl	800029c <__adddf3>
 800fa5a:	2d0f      	cmp	r5, #15
 800fa5c:	4682      	mov	sl, r0
 800fa5e:	468b      	mov	fp, r1
 800fa60:	ddd5      	ble.n	800fa0e <_strtod_l+0x3ae>
 800fa62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa64:	1b2c      	subs	r4, r5, r4
 800fa66:	441c      	add	r4, r3
 800fa68:	2c00      	cmp	r4, #0
 800fa6a:	f340 8096 	ble.w	800fb9a <_strtod_l+0x53a>
 800fa6e:	f014 030f 	ands.w	r3, r4, #15
 800fa72:	d00a      	beq.n	800fa8a <_strtod_l+0x42a>
 800fa74:	495e      	ldr	r1, [pc, #376]	@ (800fbf0 <_strtod_l+0x590>)
 800fa76:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fa7a:	4652      	mov	r2, sl
 800fa7c:	465b      	mov	r3, fp
 800fa7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa82:	f7f0 fdc1 	bl	8000608 <__aeabi_dmul>
 800fa86:	4682      	mov	sl, r0
 800fa88:	468b      	mov	fp, r1
 800fa8a:	f034 040f 	bics.w	r4, r4, #15
 800fa8e:	d073      	beq.n	800fb78 <_strtod_l+0x518>
 800fa90:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800fa94:	dd48      	ble.n	800fb28 <_strtod_l+0x4c8>
 800fa96:	2400      	movs	r4, #0
 800fa98:	46a0      	mov	r8, r4
 800fa9a:	940a      	str	r4, [sp, #40]	@ 0x28
 800fa9c:	46a1      	mov	r9, r4
 800fa9e:	9a05      	ldr	r2, [sp, #20]
 800faa0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800fbf8 <_strtod_l+0x598>
 800faa4:	2322      	movs	r3, #34	@ 0x22
 800faa6:	6013      	str	r3, [r2, #0]
 800faa8:	f04f 0a00 	mov.w	sl, #0
 800faac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800faae:	2b00      	cmp	r3, #0
 800fab0:	f43f ae0f 	beq.w	800f6d2 <_strtod_l+0x72>
 800fab4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fab6:	9805      	ldr	r0, [sp, #20]
 800fab8:	f7ff f942 	bl	800ed40 <_Bfree>
 800fabc:	9805      	ldr	r0, [sp, #20]
 800fabe:	4649      	mov	r1, r9
 800fac0:	f7ff f93e 	bl	800ed40 <_Bfree>
 800fac4:	9805      	ldr	r0, [sp, #20]
 800fac6:	4641      	mov	r1, r8
 800fac8:	f7ff f93a 	bl	800ed40 <_Bfree>
 800facc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800face:	9805      	ldr	r0, [sp, #20]
 800fad0:	f7ff f936 	bl	800ed40 <_Bfree>
 800fad4:	9805      	ldr	r0, [sp, #20]
 800fad6:	4621      	mov	r1, r4
 800fad8:	f7ff f932 	bl	800ed40 <_Bfree>
 800fadc:	e5f9      	b.n	800f6d2 <_strtod_l+0x72>
 800fade:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fae0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800fae4:	4293      	cmp	r3, r2
 800fae6:	dbbc      	blt.n	800fa62 <_strtod_l+0x402>
 800fae8:	4c41      	ldr	r4, [pc, #260]	@ (800fbf0 <_strtod_l+0x590>)
 800faea:	f1c5 050f 	rsb	r5, r5, #15
 800faee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800faf2:	4652      	mov	r2, sl
 800faf4:	465b      	mov	r3, fp
 800faf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fafa:	f7f0 fd85 	bl	8000608 <__aeabi_dmul>
 800fafe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb00:	1b5d      	subs	r5, r3, r5
 800fb02:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fb06:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fb0a:	e78f      	b.n	800fa2c <_strtod_l+0x3cc>
 800fb0c:	3316      	adds	r3, #22
 800fb0e:	dba8      	blt.n	800fa62 <_strtod_l+0x402>
 800fb10:	4b37      	ldr	r3, [pc, #220]	@ (800fbf0 <_strtod_l+0x590>)
 800fb12:	eba9 0808 	sub.w	r8, r9, r8
 800fb16:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800fb1a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800fb1e:	4650      	mov	r0, sl
 800fb20:	4659      	mov	r1, fp
 800fb22:	f7f0 fe9b 	bl	800085c <__aeabi_ddiv>
 800fb26:	e783      	b.n	800fa30 <_strtod_l+0x3d0>
 800fb28:	4b32      	ldr	r3, [pc, #200]	@ (800fbf4 <_strtod_l+0x594>)
 800fb2a:	9308      	str	r3, [sp, #32]
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	1124      	asrs	r4, r4, #4
 800fb30:	4650      	mov	r0, sl
 800fb32:	4659      	mov	r1, fp
 800fb34:	461e      	mov	r6, r3
 800fb36:	2c01      	cmp	r4, #1
 800fb38:	dc21      	bgt.n	800fb7e <_strtod_l+0x51e>
 800fb3a:	b10b      	cbz	r3, 800fb40 <_strtod_l+0x4e0>
 800fb3c:	4682      	mov	sl, r0
 800fb3e:	468b      	mov	fp, r1
 800fb40:	492c      	ldr	r1, [pc, #176]	@ (800fbf4 <_strtod_l+0x594>)
 800fb42:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800fb46:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800fb4a:	4652      	mov	r2, sl
 800fb4c:	465b      	mov	r3, fp
 800fb4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb52:	f7f0 fd59 	bl	8000608 <__aeabi_dmul>
 800fb56:	4b28      	ldr	r3, [pc, #160]	@ (800fbf8 <_strtod_l+0x598>)
 800fb58:	460a      	mov	r2, r1
 800fb5a:	400b      	ands	r3, r1
 800fb5c:	4927      	ldr	r1, [pc, #156]	@ (800fbfc <_strtod_l+0x59c>)
 800fb5e:	428b      	cmp	r3, r1
 800fb60:	4682      	mov	sl, r0
 800fb62:	d898      	bhi.n	800fa96 <_strtod_l+0x436>
 800fb64:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800fb68:	428b      	cmp	r3, r1
 800fb6a:	bf86      	itte	hi
 800fb6c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800fc00 <_strtod_l+0x5a0>
 800fb70:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800fb74:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800fb78:	2300      	movs	r3, #0
 800fb7a:	9308      	str	r3, [sp, #32]
 800fb7c:	e07a      	b.n	800fc74 <_strtod_l+0x614>
 800fb7e:	07e2      	lsls	r2, r4, #31
 800fb80:	d505      	bpl.n	800fb8e <_strtod_l+0x52e>
 800fb82:	9b08      	ldr	r3, [sp, #32]
 800fb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb88:	f7f0 fd3e 	bl	8000608 <__aeabi_dmul>
 800fb8c:	2301      	movs	r3, #1
 800fb8e:	9a08      	ldr	r2, [sp, #32]
 800fb90:	3208      	adds	r2, #8
 800fb92:	3601      	adds	r6, #1
 800fb94:	1064      	asrs	r4, r4, #1
 800fb96:	9208      	str	r2, [sp, #32]
 800fb98:	e7cd      	b.n	800fb36 <_strtod_l+0x4d6>
 800fb9a:	d0ed      	beq.n	800fb78 <_strtod_l+0x518>
 800fb9c:	4264      	negs	r4, r4
 800fb9e:	f014 020f 	ands.w	r2, r4, #15
 800fba2:	d00a      	beq.n	800fbba <_strtod_l+0x55a>
 800fba4:	4b12      	ldr	r3, [pc, #72]	@ (800fbf0 <_strtod_l+0x590>)
 800fba6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fbaa:	4650      	mov	r0, sl
 800fbac:	4659      	mov	r1, fp
 800fbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbb2:	f7f0 fe53 	bl	800085c <__aeabi_ddiv>
 800fbb6:	4682      	mov	sl, r0
 800fbb8:	468b      	mov	fp, r1
 800fbba:	1124      	asrs	r4, r4, #4
 800fbbc:	d0dc      	beq.n	800fb78 <_strtod_l+0x518>
 800fbbe:	2c1f      	cmp	r4, #31
 800fbc0:	dd20      	ble.n	800fc04 <_strtod_l+0x5a4>
 800fbc2:	2400      	movs	r4, #0
 800fbc4:	46a0      	mov	r8, r4
 800fbc6:	940a      	str	r4, [sp, #40]	@ 0x28
 800fbc8:	46a1      	mov	r9, r4
 800fbca:	9a05      	ldr	r2, [sp, #20]
 800fbcc:	2322      	movs	r3, #34	@ 0x22
 800fbce:	f04f 0a00 	mov.w	sl, #0
 800fbd2:	f04f 0b00 	mov.w	fp, #0
 800fbd6:	6013      	str	r3, [r2, #0]
 800fbd8:	e768      	b.n	800faac <_strtod_l+0x44c>
 800fbda:	bf00      	nop
 800fbdc:	08013b11 	.word	0x08013b11
 800fbe0:	08013d24 	.word	0x08013d24
 800fbe4:	08013b09 	.word	0x08013b09
 800fbe8:	08013b40 	.word	0x08013b40
 800fbec:	08013ecd 	.word	0x08013ecd
 800fbf0:	08013c58 	.word	0x08013c58
 800fbf4:	08013c30 	.word	0x08013c30
 800fbf8:	7ff00000 	.word	0x7ff00000
 800fbfc:	7ca00000 	.word	0x7ca00000
 800fc00:	7fefffff 	.word	0x7fefffff
 800fc04:	f014 0310 	ands.w	r3, r4, #16
 800fc08:	bf18      	it	ne
 800fc0a:	236a      	movne	r3, #106	@ 0x6a
 800fc0c:	4ea9      	ldr	r6, [pc, #676]	@ (800feb4 <_strtod_l+0x854>)
 800fc0e:	9308      	str	r3, [sp, #32]
 800fc10:	4650      	mov	r0, sl
 800fc12:	4659      	mov	r1, fp
 800fc14:	2300      	movs	r3, #0
 800fc16:	07e2      	lsls	r2, r4, #31
 800fc18:	d504      	bpl.n	800fc24 <_strtod_l+0x5c4>
 800fc1a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fc1e:	f7f0 fcf3 	bl	8000608 <__aeabi_dmul>
 800fc22:	2301      	movs	r3, #1
 800fc24:	1064      	asrs	r4, r4, #1
 800fc26:	f106 0608 	add.w	r6, r6, #8
 800fc2a:	d1f4      	bne.n	800fc16 <_strtod_l+0x5b6>
 800fc2c:	b10b      	cbz	r3, 800fc32 <_strtod_l+0x5d2>
 800fc2e:	4682      	mov	sl, r0
 800fc30:	468b      	mov	fp, r1
 800fc32:	9b08      	ldr	r3, [sp, #32]
 800fc34:	b1b3      	cbz	r3, 800fc64 <_strtod_l+0x604>
 800fc36:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800fc3a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	4659      	mov	r1, fp
 800fc42:	dd0f      	ble.n	800fc64 <_strtod_l+0x604>
 800fc44:	2b1f      	cmp	r3, #31
 800fc46:	dd55      	ble.n	800fcf4 <_strtod_l+0x694>
 800fc48:	2b34      	cmp	r3, #52	@ 0x34
 800fc4a:	bfde      	ittt	le
 800fc4c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800fc50:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800fc54:	4093      	lslle	r3, r2
 800fc56:	f04f 0a00 	mov.w	sl, #0
 800fc5a:	bfcc      	ite	gt
 800fc5c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800fc60:	ea03 0b01 	andle.w	fp, r3, r1
 800fc64:	2200      	movs	r2, #0
 800fc66:	2300      	movs	r3, #0
 800fc68:	4650      	mov	r0, sl
 800fc6a:	4659      	mov	r1, fp
 800fc6c:	f7f0 ff34 	bl	8000ad8 <__aeabi_dcmpeq>
 800fc70:	2800      	cmp	r0, #0
 800fc72:	d1a6      	bne.n	800fbc2 <_strtod_l+0x562>
 800fc74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc76:	9300      	str	r3, [sp, #0]
 800fc78:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800fc7a:	9805      	ldr	r0, [sp, #20]
 800fc7c:	462b      	mov	r3, r5
 800fc7e:	463a      	mov	r2, r7
 800fc80:	f7ff f8c6 	bl	800ee10 <__s2b>
 800fc84:	900a      	str	r0, [sp, #40]	@ 0x28
 800fc86:	2800      	cmp	r0, #0
 800fc88:	f43f af05 	beq.w	800fa96 <_strtod_l+0x436>
 800fc8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fc8e:	2a00      	cmp	r2, #0
 800fc90:	eba9 0308 	sub.w	r3, r9, r8
 800fc94:	bfa8      	it	ge
 800fc96:	2300      	movge	r3, #0
 800fc98:	9312      	str	r3, [sp, #72]	@ 0x48
 800fc9a:	2400      	movs	r4, #0
 800fc9c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800fca0:	9316      	str	r3, [sp, #88]	@ 0x58
 800fca2:	46a0      	mov	r8, r4
 800fca4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fca6:	9805      	ldr	r0, [sp, #20]
 800fca8:	6859      	ldr	r1, [r3, #4]
 800fcaa:	f7ff f809 	bl	800ecc0 <_Balloc>
 800fcae:	4681      	mov	r9, r0
 800fcb0:	2800      	cmp	r0, #0
 800fcb2:	f43f aef4 	beq.w	800fa9e <_strtod_l+0x43e>
 800fcb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fcb8:	691a      	ldr	r2, [r3, #16]
 800fcba:	3202      	adds	r2, #2
 800fcbc:	f103 010c 	add.w	r1, r3, #12
 800fcc0:	0092      	lsls	r2, r2, #2
 800fcc2:	300c      	adds	r0, #12
 800fcc4:	f7fe f89b 	bl	800ddfe <memcpy>
 800fcc8:	ec4b ab10 	vmov	d0, sl, fp
 800fccc:	9805      	ldr	r0, [sp, #20]
 800fcce:	aa1c      	add	r2, sp, #112	@ 0x70
 800fcd0:	a91b      	add	r1, sp, #108	@ 0x6c
 800fcd2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800fcd6:	f7ff fbd7 	bl	800f488 <__d2b>
 800fcda:	901a      	str	r0, [sp, #104]	@ 0x68
 800fcdc:	2800      	cmp	r0, #0
 800fcde:	f43f aede 	beq.w	800fa9e <_strtod_l+0x43e>
 800fce2:	9805      	ldr	r0, [sp, #20]
 800fce4:	2101      	movs	r1, #1
 800fce6:	f7ff f929 	bl	800ef3c <__i2b>
 800fcea:	4680      	mov	r8, r0
 800fcec:	b948      	cbnz	r0, 800fd02 <_strtod_l+0x6a2>
 800fcee:	f04f 0800 	mov.w	r8, #0
 800fcf2:	e6d4      	b.n	800fa9e <_strtod_l+0x43e>
 800fcf4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fcf8:	fa02 f303 	lsl.w	r3, r2, r3
 800fcfc:	ea03 0a0a 	and.w	sl, r3, sl
 800fd00:	e7b0      	b.n	800fc64 <_strtod_l+0x604>
 800fd02:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800fd04:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800fd06:	2d00      	cmp	r5, #0
 800fd08:	bfab      	itete	ge
 800fd0a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800fd0c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800fd0e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800fd10:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800fd12:	bfac      	ite	ge
 800fd14:	18ef      	addge	r7, r5, r3
 800fd16:	1b5e      	sublt	r6, r3, r5
 800fd18:	9b08      	ldr	r3, [sp, #32]
 800fd1a:	1aed      	subs	r5, r5, r3
 800fd1c:	4415      	add	r5, r2
 800fd1e:	4b66      	ldr	r3, [pc, #408]	@ (800feb8 <_strtod_l+0x858>)
 800fd20:	3d01      	subs	r5, #1
 800fd22:	429d      	cmp	r5, r3
 800fd24:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800fd28:	da50      	bge.n	800fdcc <_strtod_l+0x76c>
 800fd2a:	1b5b      	subs	r3, r3, r5
 800fd2c:	2b1f      	cmp	r3, #31
 800fd2e:	eba2 0203 	sub.w	r2, r2, r3
 800fd32:	f04f 0101 	mov.w	r1, #1
 800fd36:	dc3d      	bgt.n	800fdb4 <_strtod_l+0x754>
 800fd38:	fa01 f303 	lsl.w	r3, r1, r3
 800fd3c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fd3e:	2300      	movs	r3, #0
 800fd40:	9310      	str	r3, [sp, #64]	@ 0x40
 800fd42:	18bd      	adds	r5, r7, r2
 800fd44:	9b08      	ldr	r3, [sp, #32]
 800fd46:	42af      	cmp	r7, r5
 800fd48:	4416      	add	r6, r2
 800fd4a:	441e      	add	r6, r3
 800fd4c:	463b      	mov	r3, r7
 800fd4e:	bfa8      	it	ge
 800fd50:	462b      	movge	r3, r5
 800fd52:	42b3      	cmp	r3, r6
 800fd54:	bfa8      	it	ge
 800fd56:	4633      	movge	r3, r6
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	bfc2      	ittt	gt
 800fd5c:	1aed      	subgt	r5, r5, r3
 800fd5e:	1af6      	subgt	r6, r6, r3
 800fd60:	1aff      	subgt	r7, r7, r3
 800fd62:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	dd16      	ble.n	800fd96 <_strtod_l+0x736>
 800fd68:	4641      	mov	r1, r8
 800fd6a:	9805      	ldr	r0, [sp, #20]
 800fd6c:	461a      	mov	r2, r3
 800fd6e:	f7ff f9a5 	bl	800f0bc <__pow5mult>
 800fd72:	4680      	mov	r8, r0
 800fd74:	2800      	cmp	r0, #0
 800fd76:	d0ba      	beq.n	800fcee <_strtod_l+0x68e>
 800fd78:	4601      	mov	r1, r0
 800fd7a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800fd7c:	9805      	ldr	r0, [sp, #20]
 800fd7e:	f7ff f8f3 	bl	800ef68 <__multiply>
 800fd82:	900e      	str	r0, [sp, #56]	@ 0x38
 800fd84:	2800      	cmp	r0, #0
 800fd86:	f43f ae8a 	beq.w	800fa9e <_strtod_l+0x43e>
 800fd8a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fd8c:	9805      	ldr	r0, [sp, #20]
 800fd8e:	f7fe ffd7 	bl	800ed40 <_Bfree>
 800fd92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd94:	931a      	str	r3, [sp, #104]	@ 0x68
 800fd96:	2d00      	cmp	r5, #0
 800fd98:	dc1d      	bgt.n	800fdd6 <_strtod_l+0x776>
 800fd9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	dd23      	ble.n	800fde8 <_strtod_l+0x788>
 800fda0:	4649      	mov	r1, r9
 800fda2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800fda4:	9805      	ldr	r0, [sp, #20]
 800fda6:	f7ff f989 	bl	800f0bc <__pow5mult>
 800fdaa:	4681      	mov	r9, r0
 800fdac:	b9e0      	cbnz	r0, 800fde8 <_strtod_l+0x788>
 800fdae:	f04f 0900 	mov.w	r9, #0
 800fdb2:	e674      	b.n	800fa9e <_strtod_l+0x43e>
 800fdb4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800fdb8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800fdbc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800fdc0:	35e2      	adds	r5, #226	@ 0xe2
 800fdc2:	fa01 f305 	lsl.w	r3, r1, r5
 800fdc6:	9310      	str	r3, [sp, #64]	@ 0x40
 800fdc8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800fdca:	e7ba      	b.n	800fd42 <_strtod_l+0x6e2>
 800fdcc:	2300      	movs	r3, #0
 800fdce:	9310      	str	r3, [sp, #64]	@ 0x40
 800fdd0:	2301      	movs	r3, #1
 800fdd2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fdd4:	e7b5      	b.n	800fd42 <_strtod_l+0x6e2>
 800fdd6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fdd8:	9805      	ldr	r0, [sp, #20]
 800fdda:	462a      	mov	r2, r5
 800fddc:	f7ff f9c8 	bl	800f170 <__lshift>
 800fde0:	901a      	str	r0, [sp, #104]	@ 0x68
 800fde2:	2800      	cmp	r0, #0
 800fde4:	d1d9      	bne.n	800fd9a <_strtod_l+0x73a>
 800fde6:	e65a      	b.n	800fa9e <_strtod_l+0x43e>
 800fde8:	2e00      	cmp	r6, #0
 800fdea:	dd07      	ble.n	800fdfc <_strtod_l+0x79c>
 800fdec:	4649      	mov	r1, r9
 800fdee:	9805      	ldr	r0, [sp, #20]
 800fdf0:	4632      	mov	r2, r6
 800fdf2:	f7ff f9bd 	bl	800f170 <__lshift>
 800fdf6:	4681      	mov	r9, r0
 800fdf8:	2800      	cmp	r0, #0
 800fdfa:	d0d8      	beq.n	800fdae <_strtod_l+0x74e>
 800fdfc:	2f00      	cmp	r7, #0
 800fdfe:	dd08      	ble.n	800fe12 <_strtod_l+0x7b2>
 800fe00:	4641      	mov	r1, r8
 800fe02:	9805      	ldr	r0, [sp, #20]
 800fe04:	463a      	mov	r2, r7
 800fe06:	f7ff f9b3 	bl	800f170 <__lshift>
 800fe0a:	4680      	mov	r8, r0
 800fe0c:	2800      	cmp	r0, #0
 800fe0e:	f43f ae46 	beq.w	800fa9e <_strtod_l+0x43e>
 800fe12:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fe14:	9805      	ldr	r0, [sp, #20]
 800fe16:	464a      	mov	r2, r9
 800fe18:	f7ff fa32 	bl	800f280 <__mdiff>
 800fe1c:	4604      	mov	r4, r0
 800fe1e:	2800      	cmp	r0, #0
 800fe20:	f43f ae3d 	beq.w	800fa9e <_strtod_l+0x43e>
 800fe24:	68c3      	ldr	r3, [r0, #12]
 800fe26:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fe28:	2300      	movs	r3, #0
 800fe2a:	60c3      	str	r3, [r0, #12]
 800fe2c:	4641      	mov	r1, r8
 800fe2e:	f7ff fa0b 	bl	800f248 <__mcmp>
 800fe32:	2800      	cmp	r0, #0
 800fe34:	da46      	bge.n	800fec4 <_strtod_l+0x864>
 800fe36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe38:	ea53 030a 	orrs.w	r3, r3, sl
 800fe3c:	d16c      	bne.n	800ff18 <_strtod_l+0x8b8>
 800fe3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d168      	bne.n	800ff18 <_strtod_l+0x8b8>
 800fe46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fe4a:	0d1b      	lsrs	r3, r3, #20
 800fe4c:	051b      	lsls	r3, r3, #20
 800fe4e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800fe52:	d961      	bls.n	800ff18 <_strtod_l+0x8b8>
 800fe54:	6963      	ldr	r3, [r4, #20]
 800fe56:	b913      	cbnz	r3, 800fe5e <_strtod_l+0x7fe>
 800fe58:	6923      	ldr	r3, [r4, #16]
 800fe5a:	2b01      	cmp	r3, #1
 800fe5c:	dd5c      	ble.n	800ff18 <_strtod_l+0x8b8>
 800fe5e:	4621      	mov	r1, r4
 800fe60:	2201      	movs	r2, #1
 800fe62:	9805      	ldr	r0, [sp, #20]
 800fe64:	f7ff f984 	bl	800f170 <__lshift>
 800fe68:	4641      	mov	r1, r8
 800fe6a:	4604      	mov	r4, r0
 800fe6c:	f7ff f9ec 	bl	800f248 <__mcmp>
 800fe70:	2800      	cmp	r0, #0
 800fe72:	dd51      	ble.n	800ff18 <_strtod_l+0x8b8>
 800fe74:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fe78:	9a08      	ldr	r2, [sp, #32]
 800fe7a:	0d1b      	lsrs	r3, r3, #20
 800fe7c:	051b      	lsls	r3, r3, #20
 800fe7e:	2a00      	cmp	r2, #0
 800fe80:	d06b      	beq.n	800ff5a <_strtod_l+0x8fa>
 800fe82:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800fe86:	d868      	bhi.n	800ff5a <_strtod_l+0x8fa>
 800fe88:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800fe8c:	f67f ae9d 	bls.w	800fbca <_strtod_l+0x56a>
 800fe90:	4b0a      	ldr	r3, [pc, #40]	@ (800febc <_strtod_l+0x85c>)
 800fe92:	4650      	mov	r0, sl
 800fe94:	4659      	mov	r1, fp
 800fe96:	2200      	movs	r2, #0
 800fe98:	f7f0 fbb6 	bl	8000608 <__aeabi_dmul>
 800fe9c:	4b08      	ldr	r3, [pc, #32]	@ (800fec0 <_strtod_l+0x860>)
 800fe9e:	400b      	ands	r3, r1
 800fea0:	4682      	mov	sl, r0
 800fea2:	468b      	mov	fp, r1
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	f47f ae05 	bne.w	800fab4 <_strtod_l+0x454>
 800feaa:	9a05      	ldr	r2, [sp, #20]
 800feac:	2322      	movs	r3, #34	@ 0x22
 800feae:	6013      	str	r3, [r2, #0]
 800feb0:	e600      	b.n	800fab4 <_strtod_l+0x454>
 800feb2:	bf00      	nop
 800feb4:	08013d50 	.word	0x08013d50
 800feb8:	fffffc02 	.word	0xfffffc02
 800febc:	39500000 	.word	0x39500000
 800fec0:	7ff00000 	.word	0x7ff00000
 800fec4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800fec8:	d165      	bne.n	800ff96 <_strtod_l+0x936>
 800feca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fecc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fed0:	b35a      	cbz	r2, 800ff2a <_strtod_l+0x8ca>
 800fed2:	4a9f      	ldr	r2, [pc, #636]	@ (8010150 <_strtod_l+0xaf0>)
 800fed4:	4293      	cmp	r3, r2
 800fed6:	d12b      	bne.n	800ff30 <_strtod_l+0x8d0>
 800fed8:	9b08      	ldr	r3, [sp, #32]
 800feda:	4651      	mov	r1, sl
 800fedc:	b303      	cbz	r3, 800ff20 <_strtod_l+0x8c0>
 800fede:	4b9d      	ldr	r3, [pc, #628]	@ (8010154 <_strtod_l+0xaf4>)
 800fee0:	465a      	mov	r2, fp
 800fee2:	4013      	ands	r3, r2
 800fee4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800fee8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800feec:	d81b      	bhi.n	800ff26 <_strtod_l+0x8c6>
 800feee:	0d1b      	lsrs	r3, r3, #20
 800fef0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800fef4:	fa02 f303 	lsl.w	r3, r2, r3
 800fef8:	4299      	cmp	r1, r3
 800fefa:	d119      	bne.n	800ff30 <_strtod_l+0x8d0>
 800fefc:	4b96      	ldr	r3, [pc, #600]	@ (8010158 <_strtod_l+0xaf8>)
 800fefe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ff00:	429a      	cmp	r2, r3
 800ff02:	d102      	bne.n	800ff0a <_strtod_l+0x8aa>
 800ff04:	3101      	adds	r1, #1
 800ff06:	f43f adca 	beq.w	800fa9e <_strtod_l+0x43e>
 800ff0a:	4b92      	ldr	r3, [pc, #584]	@ (8010154 <_strtod_l+0xaf4>)
 800ff0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ff0e:	401a      	ands	r2, r3
 800ff10:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ff14:	f04f 0a00 	mov.w	sl, #0
 800ff18:	9b08      	ldr	r3, [sp, #32]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d1b8      	bne.n	800fe90 <_strtod_l+0x830>
 800ff1e:	e5c9      	b.n	800fab4 <_strtod_l+0x454>
 800ff20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ff24:	e7e8      	b.n	800fef8 <_strtod_l+0x898>
 800ff26:	4613      	mov	r3, r2
 800ff28:	e7e6      	b.n	800fef8 <_strtod_l+0x898>
 800ff2a:	ea53 030a 	orrs.w	r3, r3, sl
 800ff2e:	d0a1      	beq.n	800fe74 <_strtod_l+0x814>
 800ff30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ff32:	b1db      	cbz	r3, 800ff6c <_strtod_l+0x90c>
 800ff34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ff36:	4213      	tst	r3, r2
 800ff38:	d0ee      	beq.n	800ff18 <_strtod_l+0x8b8>
 800ff3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff3c:	9a08      	ldr	r2, [sp, #32]
 800ff3e:	4650      	mov	r0, sl
 800ff40:	4659      	mov	r1, fp
 800ff42:	b1bb      	cbz	r3, 800ff74 <_strtod_l+0x914>
 800ff44:	f7ff fb6e 	bl	800f624 <sulp>
 800ff48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ff4c:	ec53 2b10 	vmov	r2, r3, d0
 800ff50:	f7f0 f9a4 	bl	800029c <__adddf3>
 800ff54:	4682      	mov	sl, r0
 800ff56:	468b      	mov	fp, r1
 800ff58:	e7de      	b.n	800ff18 <_strtod_l+0x8b8>
 800ff5a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ff5e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ff62:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ff66:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ff6a:	e7d5      	b.n	800ff18 <_strtod_l+0x8b8>
 800ff6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ff6e:	ea13 0f0a 	tst.w	r3, sl
 800ff72:	e7e1      	b.n	800ff38 <_strtod_l+0x8d8>
 800ff74:	f7ff fb56 	bl	800f624 <sulp>
 800ff78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ff7c:	ec53 2b10 	vmov	r2, r3, d0
 800ff80:	f7f0 f98a 	bl	8000298 <__aeabi_dsub>
 800ff84:	2200      	movs	r2, #0
 800ff86:	2300      	movs	r3, #0
 800ff88:	4682      	mov	sl, r0
 800ff8a:	468b      	mov	fp, r1
 800ff8c:	f7f0 fda4 	bl	8000ad8 <__aeabi_dcmpeq>
 800ff90:	2800      	cmp	r0, #0
 800ff92:	d0c1      	beq.n	800ff18 <_strtod_l+0x8b8>
 800ff94:	e619      	b.n	800fbca <_strtod_l+0x56a>
 800ff96:	4641      	mov	r1, r8
 800ff98:	4620      	mov	r0, r4
 800ff9a:	f7ff facd 	bl	800f538 <__ratio>
 800ff9e:	ec57 6b10 	vmov	r6, r7, d0
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ffa8:	4630      	mov	r0, r6
 800ffaa:	4639      	mov	r1, r7
 800ffac:	f7f0 fda8 	bl	8000b00 <__aeabi_dcmple>
 800ffb0:	2800      	cmp	r0, #0
 800ffb2:	d06f      	beq.n	8010094 <_strtod_l+0xa34>
 800ffb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d17a      	bne.n	80100b0 <_strtod_l+0xa50>
 800ffba:	f1ba 0f00 	cmp.w	sl, #0
 800ffbe:	d158      	bne.n	8010072 <_strtod_l+0xa12>
 800ffc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ffc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d15a      	bne.n	8010080 <_strtod_l+0xa20>
 800ffca:	4b64      	ldr	r3, [pc, #400]	@ (801015c <_strtod_l+0xafc>)
 800ffcc:	2200      	movs	r2, #0
 800ffce:	4630      	mov	r0, r6
 800ffd0:	4639      	mov	r1, r7
 800ffd2:	f7f0 fd8b 	bl	8000aec <__aeabi_dcmplt>
 800ffd6:	2800      	cmp	r0, #0
 800ffd8:	d159      	bne.n	801008e <_strtod_l+0xa2e>
 800ffda:	4630      	mov	r0, r6
 800ffdc:	4639      	mov	r1, r7
 800ffde:	4b60      	ldr	r3, [pc, #384]	@ (8010160 <_strtod_l+0xb00>)
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	f7f0 fb11 	bl	8000608 <__aeabi_dmul>
 800ffe6:	4606      	mov	r6, r0
 800ffe8:	460f      	mov	r7, r1
 800ffea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ffee:	9606      	str	r6, [sp, #24]
 800fff0:	9307      	str	r3, [sp, #28]
 800fff2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fff6:	4d57      	ldr	r5, [pc, #348]	@ (8010154 <_strtod_l+0xaf4>)
 800fff8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800fffc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fffe:	401d      	ands	r5, r3
 8010000:	4b58      	ldr	r3, [pc, #352]	@ (8010164 <_strtod_l+0xb04>)
 8010002:	429d      	cmp	r5, r3
 8010004:	f040 80b2 	bne.w	801016c <_strtod_l+0xb0c>
 8010008:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801000a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801000e:	ec4b ab10 	vmov	d0, sl, fp
 8010012:	f7ff f9c9 	bl	800f3a8 <__ulp>
 8010016:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801001a:	ec51 0b10 	vmov	r0, r1, d0
 801001e:	f7f0 faf3 	bl	8000608 <__aeabi_dmul>
 8010022:	4652      	mov	r2, sl
 8010024:	465b      	mov	r3, fp
 8010026:	f7f0 f939 	bl	800029c <__adddf3>
 801002a:	460b      	mov	r3, r1
 801002c:	4949      	ldr	r1, [pc, #292]	@ (8010154 <_strtod_l+0xaf4>)
 801002e:	4a4e      	ldr	r2, [pc, #312]	@ (8010168 <_strtod_l+0xb08>)
 8010030:	4019      	ands	r1, r3
 8010032:	4291      	cmp	r1, r2
 8010034:	4682      	mov	sl, r0
 8010036:	d942      	bls.n	80100be <_strtod_l+0xa5e>
 8010038:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801003a:	4b47      	ldr	r3, [pc, #284]	@ (8010158 <_strtod_l+0xaf8>)
 801003c:	429a      	cmp	r2, r3
 801003e:	d103      	bne.n	8010048 <_strtod_l+0x9e8>
 8010040:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010042:	3301      	adds	r3, #1
 8010044:	f43f ad2b 	beq.w	800fa9e <_strtod_l+0x43e>
 8010048:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8010158 <_strtod_l+0xaf8>
 801004c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8010050:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010052:	9805      	ldr	r0, [sp, #20]
 8010054:	f7fe fe74 	bl	800ed40 <_Bfree>
 8010058:	9805      	ldr	r0, [sp, #20]
 801005a:	4649      	mov	r1, r9
 801005c:	f7fe fe70 	bl	800ed40 <_Bfree>
 8010060:	9805      	ldr	r0, [sp, #20]
 8010062:	4641      	mov	r1, r8
 8010064:	f7fe fe6c 	bl	800ed40 <_Bfree>
 8010068:	9805      	ldr	r0, [sp, #20]
 801006a:	4621      	mov	r1, r4
 801006c:	f7fe fe68 	bl	800ed40 <_Bfree>
 8010070:	e618      	b.n	800fca4 <_strtod_l+0x644>
 8010072:	f1ba 0f01 	cmp.w	sl, #1
 8010076:	d103      	bne.n	8010080 <_strtod_l+0xa20>
 8010078:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801007a:	2b00      	cmp	r3, #0
 801007c:	f43f ada5 	beq.w	800fbca <_strtod_l+0x56a>
 8010080:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8010130 <_strtod_l+0xad0>
 8010084:	4f35      	ldr	r7, [pc, #212]	@ (801015c <_strtod_l+0xafc>)
 8010086:	ed8d 7b06 	vstr	d7, [sp, #24]
 801008a:	2600      	movs	r6, #0
 801008c:	e7b1      	b.n	800fff2 <_strtod_l+0x992>
 801008e:	4f34      	ldr	r7, [pc, #208]	@ (8010160 <_strtod_l+0xb00>)
 8010090:	2600      	movs	r6, #0
 8010092:	e7aa      	b.n	800ffea <_strtod_l+0x98a>
 8010094:	4b32      	ldr	r3, [pc, #200]	@ (8010160 <_strtod_l+0xb00>)
 8010096:	4630      	mov	r0, r6
 8010098:	4639      	mov	r1, r7
 801009a:	2200      	movs	r2, #0
 801009c:	f7f0 fab4 	bl	8000608 <__aeabi_dmul>
 80100a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80100a2:	4606      	mov	r6, r0
 80100a4:	460f      	mov	r7, r1
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d09f      	beq.n	800ffea <_strtod_l+0x98a>
 80100aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80100ae:	e7a0      	b.n	800fff2 <_strtod_l+0x992>
 80100b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010138 <_strtod_l+0xad8>
 80100b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80100b8:	ec57 6b17 	vmov	r6, r7, d7
 80100bc:	e799      	b.n	800fff2 <_strtod_l+0x992>
 80100be:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80100c2:	9b08      	ldr	r3, [sp, #32]
 80100c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d1c1      	bne.n	8010050 <_strtod_l+0x9f0>
 80100cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80100d0:	0d1b      	lsrs	r3, r3, #20
 80100d2:	051b      	lsls	r3, r3, #20
 80100d4:	429d      	cmp	r5, r3
 80100d6:	d1bb      	bne.n	8010050 <_strtod_l+0x9f0>
 80100d8:	4630      	mov	r0, r6
 80100da:	4639      	mov	r1, r7
 80100dc:	f7f0 fe2c 	bl	8000d38 <__aeabi_d2lz>
 80100e0:	f7f0 fa64 	bl	80005ac <__aeabi_l2d>
 80100e4:	4602      	mov	r2, r0
 80100e6:	460b      	mov	r3, r1
 80100e8:	4630      	mov	r0, r6
 80100ea:	4639      	mov	r1, r7
 80100ec:	f7f0 f8d4 	bl	8000298 <__aeabi_dsub>
 80100f0:	460b      	mov	r3, r1
 80100f2:	4602      	mov	r2, r0
 80100f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80100f8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80100fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80100fe:	ea46 060a 	orr.w	r6, r6, sl
 8010102:	431e      	orrs	r6, r3
 8010104:	d06f      	beq.n	80101e6 <_strtod_l+0xb86>
 8010106:	a30e      	add	r3, pc, #56	@ (adr r3, 8010140 <_strtod_l+0xae0>)
 8010108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801010c:	f7f0 fcee 	bl	8000aec <__aeabi_dcmplt>
 8010110:	2800      	cmp	r0, #0
 8010112:	f47f accf 	bne.w	800fab4 <_strtod_l+0x454>
 8010116:	a30c      	add	r3, pc, #48	@ (adr r3, 8010148 <_strtod_l+0xae8>)
 8010118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801011c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010120:	f7f0 fd02 	bl	8000b28 <__aeabi_dcmpgt>
 8010124:	2800      	cmp	r0, #0
 8010126:	d093      	beq.n	8010050 <_strtod_l+0x9f0>
 8010128:	e4c4      	b.n	800fab4 <_strtod_l+0x454>
 801012a:	bf00      	nop
 801012c:	f3af 8000 	nop.w
 8010130:	00000000 	.word	0x00000000
 8010134:	bff00000 	.word	0xbff00000
 8010138:	00000000 	.word	0x00000000
 801013c:	3ff00000 	.word	0x3ff00000
 8010140:	94a03595 	.word	0x94a03595
 8010144:	3fdfffff 	.word	0x3fdfffff
 8010148:	35afe535 	.word	0x35afe535
 801014c:	3fe00000 	.word	0x3fe00000
 8010150:	000fffff 	.word	0x000fffff
 8010154:	7ff00000 	.word	0x7ff00000
 8010158:	7fefffff 	.word	0x7fefffff
 801015c:	3ff00000 	.word	0x3ff00000
 8010160:	3fe00000 	.word	0x3fe00000
 8010164:	7fe00000 	.word	0x7fe00000
 8010168:	7c9fffff 	.word	0x7c9fffff
 801016c:	9b08      	ldr	r3, [sp, #32]
 801016e:	b323      	cbz	r3, 80101ba <_strtod_l+0xb5a>
 8010170:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8010174:	d821      	bhi.n	80101ba <_strtod_l+0xb5a>
 8010176:	a328      	add	r3, pc, #160	@ (adr r3, 8010218 <_strtod_l+0xbb8>)
 8010178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801017c:	4630      	mov	r0, r6
 801017e:	4639      	mov	r1, r7
 8010180:	f7f0 fcbe 	bl	8000b00 <__aeabi_dcmple>
 8010184:	b1a0      	cbz	r0, 80101b0 <_strtod_l+0xb50>
 8010186:	4639      	mov	r1, r7
 8010188:	4630      	mov	r0, r6
 801018a:	f7f0 fd15 	bl	8000bb8 <__aeabi_d2uiz>
 801018e:	2801      	cmp	r0, #1
 8010190:	bf38      	it	cc
 8010192:	2001      	movcc	r0, #1
 8010194:	f7f0 f9be 	bl	8000514 <__aeabi_ui2d>
 8010198:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801019a:	4606      	mov	r6, r0
 801019c:	460f      	mov	r7, r1
 801019e:	b9fb      	cbnz	r3, 80101e0 <_strtod_l+0xb80>
 80101a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80101a4:	9014      	str	r0, [sp, #80]	@ 0x50
 80101a6:	9315      	str	r3, [sp, #84]	@ 0x54
 80101a8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80101ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80101b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80101b2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80101b6:	1b5b      	subs	r3, r3, r5
 80101b8:	9311      	str	r3, [sp, #68]	@ 0x44
 80101ba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80101be:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80101c2:	f7ff f8f1 	bl	800f3a8 <__ulp>
 80101c6:	4650      	mov	r0, sl
 80101c8:	ec53 2b10 	vmov	r2, r3, d0
 80101cc:	4659      	mov	r1, fp
 80101ce:	f7f0 fa1b 	bl	8000608 <__aeabi_dmul>
 80101d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80101d6:	f7f0 f861 	bl	800029c <__adddf3>
 80101da:	4682      	mov	sl, r0
 80101dc:	468b      	mov	fp, r1
 80101de:	e770      	b.n	80100c2 <_strtod_l+0xa62>
 80101e0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80101e4:	e7e0      	b.n	80101a8 <_strtod_l+0xb48>
 80101e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8010220 <_strtod_l+0xbc0>)
 80101e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ec:	f7f0 fc7e 	bl	8000aec <__aeabi_dcmplt>
 80101f0:	e798      	b.n	8010124 <_strtod_l+0xac4>
 80101f2:	2300      	movs	r3, #0
 80101f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80101f6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80101f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80101fa:	6013      	str	r3, [r2, #0]
 80101fc:	f7ff ba6d 	b.w	800f6da <_strtod_l+0x7a>
 8010200:	2a65      	cmp	r2, #101	@ 0x65
 8010202:	f43f ab66 	beq.w	800f8d2 <_strtod_l+0x272>
 8010206:	2a45      	cmp	r2, #69	@ 0x45
 8010208:	f43f ab63 	beq.w	800f8d2 <_strtod_l+0x272>
 801020c:	2301      	movs	r3, #1
 801020e:	f7ff bb9e 	b.w	800f94e <_strtod_l+0x2ee>
 8010212:	bf00      	nop
 8010214:	f3af 8000 	nop.w
 8010218:	ffc00000 	.word	0xffc00000
 801021c:	41dfffff 	.word	0x41dfffff
 8010220:	94a03595 	.word	0x94a03595
 8010224:	3fcfffff 	.word	0x3fcfffff

08010228 <_strtod_r>:
 8010228:	4b01      	ldr	r3, [pc, #4]	@ (8010230 <_strtod_r+0x8>)
 801022a:	f7ff ba19 	b.w	800f660 <_strtod_l>
 801022e:	bf00      	nop
 8010230:	20000080 	.word	0x20000080

08010234 <_strtol_l.constprop.0>:
 8010234:	2b24      	cmp	r3, #36	@ 0x24
 8010236:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801023a:	4686      	mov	lr, r0
 801023c:	4690      	mov	r8, r2
 801023e:	d801      	bhi.n	8010244 <_strtol_l.constprop.0+0x10>
 8010240:	2b01      	cmp	r3, #1
 8010242:	d106      	bne.n	8010252 <_strtol_l.constprop.0+0x1e>
 8010244:	f7fd fdae 	bl	800dda4 <__errno>
 8010248:	2316      	movs	r3, #22
 801024a:	6003      	str	r3, [r0, #0]
 801024c:	2000      	movs	r0, #0
 801024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010252:	4834      	ldr	r0, [pc, #208]	@ (8010324 <_strtol_l.constprop.0+0xf0>)
 8010254:	460d      	mov	r5, r1
 8010256:	462a      	mov	r2, r5
 8010258:	f815 4b01 	ldrb.w	r4, [r5], #1
 801025c:	5d06      	ldrb	r6, [r0, r4]
 801025e:	f016 0608 	ands.w	r6, r6, #8
 8010262:	d1f8      	bne.n	8010256 <_strtol_l.constprop.0+0x22>
 8010264:	2c2d      	cmp	r4, #45	@ 0x2d
 8010266:	d12d      	bne.n	80102c4 <_strtol_l.constprop.0+0x90>
 8010268:	782c      	ldrb	r4, [r5, #0]
 801026a:	2601      	movs	r6, #1
 801026c:	1c95      	adds	r5, r2, #2
 801026e:	f033 0210 	bics.w	r2, r3, #16
 8010272:	d109      	bne.n	8010288 <_strtol_l.constprop.0+0x54>
 8010274:	2c30      	cmp	r4, #48	@ 0x30
 8010276:	d12a      	bne.n	80102ce <_strtol_l.constprop.0+0x9a>
 8010278:	782a      	ldrb	r2, [r5, #0]
 801027a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801027e:	2a58      	cmp	r2, #88	@ 0x58
 8010280:	d125      	bne.n	80102ce <_strtol_l.constprop.0+0x9a>
 8010282:	786c      	ldrb	r4, [r5, #1]
 8010284:	2310      	movs	r3, #16
 8010286:	3502      	adds	r5, #2
 8010288:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801028c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8010290:	2200      	movs	r2, #0
 8010292:	fbbc f9f3 	udiv	r9, ip, r3
 8010296:	4610      	mov	r0, r2
 8010298:	fb03 ca19 	mls	sl, r3, r9, ip
 801029c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80102a0:	2f09      	cmp	r7, #9
 80102a2:	d81b      	bhi.n	80102dc <_strtol_l.constprop.0+0xa8>
 80102a4:	463c      	mov	r4, r7
 80102a6:	42a3      	cmp	r3, r4
 80102a8:	dd27      	ble.n	80102fa <_strtol_l.constprop.0+0xc6>
 80102aa:	1c57      	adds	r7, r2, #1
 80102ac:	d007      	beq.n	80102be <_strtol_l.constprop.0+0x8a>
 80102ae:	4581      	cmp	r9, r0
 80102b0:	d320      	bcc.n	80102f4 <_strtol_l.constprop.0+0xc0>
 80102b2:	d101      	bne.n	80102b8 <_strtol_l.constprop.0+0x84>
 80102b4:	45a2      	cmp	sl, r4
 80102b6:	db1d      	blt.n	80102f4 <_strtol_l.constprop.0+0xc0>
 80102b8:	fb00 4003 	mla	r0, r0, r3, r4
 80102bc:	2201      	movs	r2, #1
 80102be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80102c2:	e7eb      	b.n	801029c <_strtol_l.constprop.0+0x68>
 80102c4:	2c2b      	cmp	r4, #43	@ 0x2b
 80102c6:	bf04      	itt	eq
 80102c8:	782c      	ldrbeq	r4, [r5, #0]
 80102ca:	1c95      	addeq	r5, r2, #2
 80102cc:	e7cf      	b.n	801026e <_strtol_l.constprop.0+0x3a>
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d1da      	bne.n	8010288 <_strtol_l.constprop.0+0x54>
 80102d2:	2c30      	cmp	r4, #48	@ 0x30
 80102d4:	bf0c      	ite	eq
 80102d6:	2308      	moveq	r3, #8
 80102d8:	230a      	movne	r3, #10
 80102da:	e7d5      	b.n	8010288 <_strtol_l.constprop.0+0x54>
 80102dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80102e0:	2f19      	cmp	r7, #25
 80102e2:	d801      	bhi.n	80102e8 <_strtol_l.constprop.0+0xb4>
 80102e4:	3c37      	subs	r4, #55	@ 0x37
 80102e6:	e7de      	b.n	80102a6 <_strtol_l.constprop.0+0x72>
 80102e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80102ec:	2f19      	cmp	r7, #25
 80102ee:	d804      	bhi.n	80102fa <_strtol_l.constprop.0+0xc6>
 80102f0:	3c57      	subs	r4, #87	@ 0x57
 80102f2:	e7d8      	b.n	80102a6 <_strtol_l.constprop.0+0x72>
 80102f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80102f8:	e7e1      	b.n	80102be <_strtol_l.constprop.0+0x8a>
 80102fa:	1c53      	adds	r3, r2, #1
 80102fc:	d108      	bne.n	8010310 <_strtol_l.constprop.0+0xdc>
 80102fe:	2322      	movs	r3, #34	@ 0x22
 8010300:	f8ce 3000 	str.w	r3, [lr]
 8010304:	4660      	mov	r0, ip
 8010306:	f1b8 0f00 	cmp.w	r8, #0
 801030a:	d0a0      	beq.n	801024e <_strtol_l.constprop.0+0x1a>
 801030c:	1e69      	subs	r1, r5, #1
 801030e:	e006      	b.n	801031e <_strtol_l.constprop.0+0xea>
 8010310:	b106      	cbz	r6, 8010314 <_strtol_l.constprop.0+0xe0>
 8010312:	4240      	negs	r0, r0
 8010314:	f1b8 0f00 	cmp.w	r8, #0
 8010318:	d099      	beq.n	801024e <_strtol_l.constprop.0+0x1a>
 801031a:	2a00      	cmp	r2, #0
 801031c:	d1f6      	bne.n	801030c <_strtol_l.constprop.0+0xd8>
 801031e:	f8c8 1000 	str.w	r1, [r8]
 8010322:	e794      	b.n	801024e <_strtol_l.constprop.0+0x1a>
 8010324:	08013d79 	.word	0x08013d79

08010328 <_strtol_r>:
 8010328:	f7ff bf84 	b.w	8010234 <_strtol_l.constprop.0>

0801032c <__ssputs_r>:
 801032c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010330:	688e      	ldr	r6, [r1, #8]
 8010332:	461f      	mov	r7, r3
 8010334:	42be      	cmp	r6, r7
 8010336:	680b      	ldr	r3, [r1, #0]
 8010338:	4682      	mov	sl, r0
 801033a:	460c      	mov	r4, r1
 801033c:	4690      	mov	r8, r2
 801033e:	d82d      	bhi.n	801039c <__ssputs_r+0x70>
 8010340:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010344:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010348:	d026      	beq.n	8010398 <__ssputs_r+0x6c>
 801034a:	6965      	ldr	r5, [r4, #20]
 801034c:	6909      	ldr	r1, [r1, #16]
 801034e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010352:	eba3 0901 	sub.w	r9, r3, r1
 8010356:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801035a:	1c7b      	adds	r3, r7, #1
 801035c:	444b      	add	r3, r9
 801035e:	106d      	asrs	r5, r5, #1
 8010360:	429d      	cmp	r5, r3
 8010362:	bf38      	it	cc
 8010364:	461d      	movcc	r5, r3
 8010366:	0553      	lsls	r3, r2, #21
 8010368:	d527      	bpl.n	80103ba <__ssputs_r+0x8e>
 801036a:	4629      	mov	r1, r5
 801036c:	f7fe fc1c 	bl	800eba8 <_malloc_r>
 8010370:	4606      	mov	r6, r0
 8010372:	b360      	cbz	r0, 80103ce <__ssputs_r+0xa2>
 8010374:	6921      	ldr	r1, [r4, #16]
 8010376:	464a      	mov	r2, r9
 8010378:	f7fd fd41 	bl	800ddfe <memcpy>
 801037c:	89a3      	ldrh	r3, [r4, #12]
 801037e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010386:	81a3      	strh	r3, [r4, #12]
 8010388:	6126      	str	r6, [r4, #16]
 801038a:	6165      	str	r5, [r4, #20]
 801038c:	444e      	add	r6, r9
 801038e:	eba5 0509 	sub.w	r5, r5, r9
 8010392:	6026      	str	r6, [r4, #0]
 8010394:	60a5      	str	r5, [r4, #8]
 8010396:	463e      	mov	r6, r7
 8010398:	42be      	cmp	r6, r7
 801039a:	d900      	bls.n	801039e <__ssputs_r+0x72>
 801039c:	463e      	mov	r6, r7
 801039e:	6820      	ldr	r0, [r4, #0]
 80103a0:	4632      	mov	r2, r6
 80103a2:	4641      	mov	r1, r8
 80103a4:	f7fd fc3b 	bl	800dc1e <memmove>
 80103a8:	68a3      	ldr	r3, [r4, #8]
 80103aa:	1b9b      	subs	r3, r3, r6
 80103ac:	60a3      	str	r3, [r4, #8]
 80103ae:	6823      	ldr	r3, [r4, #0]
 80103b0:	4433      	add	r3, r6
 80103b2:	6023      	str	r3, [r4, #0]
 80103b4:	2000      	movs	r0, #0
 80103b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103ba:	462a      	mov	r2, r5
 80103bc:	f000 fd61 	bl	8010e82 <_realloc_r>
 80103c0:	4606      	mov	r6, r0
 80103c2:	2800      	cmp	r0, #0
 80103c4:	d1e0      	bne.n	8010388 <__ssputs_r+0x5c>
 80103c6:	6921      	ldr	r1, [r4, #16]
 80103c8:	4650      	mov	r0, sl
 80103ca:	f7fe fb79 	bl	800eac0 <_free_r>
 80103ce:	230c      	movs	r3, #12
 80103d0:	f8ca 3000 	str.w	r3, [sl]
 80103d4:	89a3      	ldrh	r3, [r4, #12]
 80103d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80103da:	81a3      	strh	r3, [r4, #12]
 80103dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80103e0:	e7e9      	b.n	80103b6 <__ssputs_r+0x8a>
	...

080103e4 <_svfiprintf_r>:
 80103e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103e8:	4698      	mov	r8, r3
 80103ea:	898b      	ldrh	r3, [r1, #12]
 80103ec:	061b      	lsls	r3, r3, #24
 80103ee:	b09d      	sub	sp, #116	@ 0x74
 80103f0:	4607      	mov	r7, r0
 80103f2:	460d      	mov	r5, r1
 80103f4:	4614      	mov	r4, r2
 80103f6:	d510      	bpl.n	801041a <_svfiprintf_r+0x36>
 80103f8:	690b      	ldr	r3, [r1, #16]
 80103fa:	b973      	cbnz	r3, 801041a <_svfiprintf_r+0x36>
 80103fc:	2140      	movs	r1, #64	@ 0x40
 80103fe:	f7fe fbd3 	bl	800eba8 <_malloc_r>
 8010402:	6028      	str	r0, [r5, #0]
 8010404:	6128      	str	r0, [r5, #16]
 8010406:	b930      	cbnz	r0, 8010416 <_svfiprintf_r+0x32>
 8010408:	230c      	movs	r3, #12
 801040a:	603b      	str	r3, [r7, #0]
 801040c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010410:	b01d      	add	sp, #116	@ 0x74
 8010412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010416:	2340      	movs	r3, #64	@ 0x40
 8010418:	616b      	str	r3, [r5, #20]
 801041a:	2300      	movs	r3, #0
 801041c:	9309      	str	r3, [sp, #36]	@ 0x24
 801041e:	2320      	movs	r3, #32
 8010420:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010424:	f8cd 800c 	str.w	r8, [sp, #12]
 8010428:	2330      	movs	r3, #48	@ 0x30
 801042a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80105c8 <_svfiprintf_r+0x1e4>
 801042e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010432:	f04f 0901 	mov.w	r9, #1
 8010436:	4623      	mov	r3, r4
 8010438:	469a      	mov	sl, r3
 801043a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801043e:	b10a      	cbz	r2, 8010444 <_svfiprintf_r+0x60>
 8010440:	2a25      	cmp	r2, #37	@ 0x25
 8010442:	d1f9      	bne.n	8010438 <_svfiprintf_r+0x54>
 8010444:	ebba 0b04 	subs.w	fp, sl, r4
 8010448:	d00b      	beq.n	8010462 <_svfiprintf_r+0x7e>
 801044a:	465b      	mov	r3, fp
 801044c:	4622      	mov	r2, r4
 801044e:	4629      	mov	r1, r5
 8010450:	4638      	mov	r0, r7
 8010452:	f7ff ff6b 	bl	801032c <__ssputs_r>
 8010456:	3001      	adds	r0, #1
 8010458:	f000 80a7 	beq.w	80105aa <_svfiprintf_r+0x1c6>
 801045c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801045e:	445a      	add	r2, fp
 8010460:	9209      	str	r2, [sp, #36]	@ 0x24
 8010462:	f89a 3000 	ldrb.w	r3, [sl]
 8010466:	2b00      	cmp	r3, #0
 8010468:	f000 809f 	beq.w	80105aa <_svfiprintf_r+0x1c6>
 801046c:	2300      	movs	r3, #0
 801046e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010472:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010476:	f10a 0a01 	add.w	sl, sl, #1
 801047a:	9304      	str	r3, [sp, #16]
 801047c:	9307      	str	r3, [sp, #28]
 801047e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010482:	931a      	str	r3, [sp, #104]	@ 0x68
 8010484:	4654      	mov	r4, sl
 8010486:	2205      	movs	r2, #5
 8010488:	f814 1b01 	ldrb.w	r1, [r4], #1
 801048c:	484e      	ldr	r0, [pc, #312]	@ (80105c8 <_svfiprintf_r+0x1e4>)
 801048e:	f7ef fea7 	bl	80001e0 <memchr>
 8010492:	9a04      	ldr	r2, [sp, #16]
 8010494:	b9d8      	cbnz	r0, 80104ce <_svfiprintf_r+0xea>
 8010496:	06d0      	lsls	r0, r2, #27
 8010498:	bf44      	itt	mi
 801049a:	2320      	movmi	r3, #32
 801049c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80104a0:	0711      	lsls	r1, r2, #28
 80104a2:	bf44      	itt	mi
 80104a4:	232b      	movmi	r3, #43	@ 0x2b
 80104a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80104aa:	f89a 3000 	ldrb.w	r3, [sl]
 80104ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80104b0:	d015      	beq.n	80104de <_svfiprintf_r+0xfa>
 80104b2:	9a07      	ldr	r2, [sp, #28]
 80104b4:	4654      	mov	r4, sl
 80104b6:	2000      	movs	r0, #0
 80104b8:	f04f 0c0a 	mov.w	ip, #10
 80104bc:	4621      	mov	r1, r4
 80104be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80104c2:	3b30      	subs	r3, #48	@ 0x30
 80104c4:	2b09      	cmp	r3, #9
 80104c6:	d94b      	bls.n	8010560 <_svfiprintf_r+0x17c>
 80104c8:	b1b0      	cbz	r0, 80104f8 <_svfiprintf_r+0x114>
 80104ca:	9207      	str	r2, [sp, #28]
 80104cc:	e014      	b.n	80104f8 <_svfiprintf_r+0x114>
 80104ce:	eba0 0308 	sub.w	r3, r0, r8
 80104d2:	fa09 f303 	lsl.w	r3, r9, r3
 80104d6:	4313      	orrs	r3, r2
 80104d8:	9304      	str	r3, [sp, #16]
 80104da:	46a2      	mov	sl, r4
 80104dc:	e7d2      	b.n	8010484 <_svfiprintf_r+0xa0>
 80104de:	9b03      	ldr	r3, [sp, #12]
 80104e0:	1d19      	adds	r1, r3, #4
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	9103      	str	r1, [sp, #12]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	bfbb      	ittet	lt
 80104ea:	425b      	neglt	r3, r3
 80104ec:	f042 0202 	orrlt.w	r2, r2, #2
 80104f0:	9307      	strge	r3, [sp, #28]
 80104f2:	9307      	strlt	r3, [sp, #28]
 80104f4:	bfb8      	it	lt
 80104f6:	9204      	strlt	r2, [sp, #16]
 80104f8:	7823      	ldrb	r3, [r4, #0]
 80104fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80104fc:	d10a      	bne.n	8010514 <_svfiprintf_r+0x130>
 80104fe:	7863      	ldrb	r3, [r4, #1]
 8010500:	2b2a      	cmp	r3, #42	@ 0x2a
 8010502:	d132      	bne.n	801056a <_svfiprintf_r+0x186>
 8010504:	9b03      	ldr	r3, [sp, #12]
 8010506:	1d1a      	adds	r2, r3, #4
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	9203      	str	r2, [sp, #12]
 801050c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010510:	3402      	adds	r4, #2
 8010512:	9305      	str	r3, [sp, #20]
 8010514:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80105d8 <_svfiprintf_r+0x1f4>
 8010518:	7821      	ldrb	r1, [r4, #0]
 801051a:	2203      	movs	r2, #3
 801051c:	4650      	mov	r0, sl
 801051e:	f7ef fe5f 	bl	80001e0 <memchr>
 8010522:	b138      	cbz	r0, 8010534 <_svfiprintf_r+0x150>
 8010524:	9b04      	ldr	r3, [sp, #16]
 8010526:	eba0 000a 	sub.w	r0, r0, sl
 801052a:	2240      	movs	r2, #64	@ 0x40
 801052c:	4082      	lsls	r2, r0
 801052e:	4313      	orrs	r3, r2
 8010530:	3401      	adds	r4, #1
 8010532:	9304      	str	r3, [sp, #16]
 8010534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010538:	4824      	ldr	r0, [pc, #144]	@ (80105cc <_svfiprintf_r+0x1e8>)
 801053a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801053e:	2206      	movs	r2, #6
 8010540:	f7ef fe4e 	bl	80001e0 <memchr>
 8010544:	2800      	cmp	r0, #0
 8010546:	d036      	beq.n	80105b6 <_svfiprintf_r+0x1d2>
 8010548:	4b21      	ldr	r3, [pc, #132]	@ (80105d0 <_svfiprintf_r+0x1ec>)
 801054a:	bb1b      	cbnz	r3, 8010594 <_svfiprintf_r+0x1b0>
 801054c:	9b03      	ldr	r3, [sp, #12]
 801054e:	3307      	adds	r3, #7
 8010550:	f023 0307 	bic.w	r3, r3, #7
 8010554:	3308      	adds	r3, #8
 8010556:	9303      	str	r3, [sp, #12]
 8010558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801055a:	4433      	add	r3, r6
 801055c:	9309      	str	r3, [sp, #36]	@ 0x24
 801055e:	e76a      	b.n	8010436 <_svfiprintf_r+0x52>
 8010560:	fb0c 3202 	mla	r2, ip, r2, r3
 8010564:	460c      	mov	r4, r1
 8010566:	2001      	movs	r0, #1
 8010568:	e7a8      	b.n	80104bc <_svfiprintf_r+0xd8>
 801056a:	2300      	movs	r3, #0
 801056c:	3401      	adds	r4, #1
 801056e:	9305      	str	r3, [sp, #20]
 8010570:	4619      	mov	r1, r3
 8010572:	f04f 0c0a 	mov.w	ip, #10
 8010576:	4620      	mov	r0, r4
 8010578:	f810 2b01 	ldrb.w	r2, [r0], #1
 801057c:	3a30      	subs	r2, #48	@ 0x30
 801057e:	2a09      	cmp	r2, #9
 8010580:	d903      	bls.n	801058a <_svfiprintf_r+0x1a6>
 8010582:	2b00      	cmp	r3, #0
 8010584:	d0c6      	beq.n	8010514 <_svfiprintf_r+0x130>
 8010586:	9105      	str	r1, [sp, #20]
 8010588:	e7c4      	b.n	8010514 <_svfiprintf_r+0x130>
 801058a:	fb0c 2101 	mla	r1, ip, r1, r2
 801058e:	4604      	mov	r4, r0
 8010590:	2301      	movs	r3, #1
 8010592:	e7f0      	b.n	8010576 <_svfiprintf_r+0x192>
 8010594:	ab03      	add	r3, sp, #12
 8010596:	9300      	str	r3, [sp, #0]
 8010598:	462a      	mov	r2, r5
 801059a:	4b0e      	ldr	r3, [pc, #56]	@ (80105d4 <_svfiprintf_r+0x1f0>)
 801059c:	a904      	add	r1, sp, #16
 801059e:	4638      	mov	r0, r7
 80105a0:	f7fc fc4c 	bl	800ce3c <_printf_float>
 80105a4:	1c42      	adds	r2, r0, #1
 80105a6:	4606      	mov	r6, r0
 80105a8:	d1d6      	bne.n	8010558 <_svfiprintf_r+0x174>
 80105aa:	89ab      	ldrh	r3, [r5, #12]
 80105ac:	065b      	lsls	r3, r3, #25
 80105ae:	f53f af2d 	bmi.w	801040c <_svfiprintf_r+0x28>
 80105b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80105b4:	e72c      	b.n	8010410 <_svfiprintf_r+0x2c>
 80105b6:	ab03      	add	r3, sp, #12
 80105b8:	9300      	str	r3, [sp, #0]
 80105ba:	462a      	mov	r2, r5
 80105bc:	4b05      	ldr	r3, [pc, #20]	@ (80105d4 <_svfiprintf_r+0x1f0>)
 80105be:	a904      	add	r1, sp, #16
 80105c0:	4638      	mov	r0, r7
 80105c2:	f7fc fed3 	bl	800d36c <_printf_i>
 80105c6:	e7ed      	b.n	80105a4 <_svfiprintf_r+0x1c0>
 80105c8:	08013e79 	.word	0x08013e79
 80105cc:	08013e83 	.word	0x08013e83
 80105d0:	0800ce3d 	.word	0x0800ce3d
 80105d4:	0801032d 	.word	0x0801032d
 80105d8:	08013e7f 	.word	0x08013e7f

080105dc <__sflush_r>:
 80105dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80105e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105e4:	0716      	lsls	r6, r2, #28
 80105e6:	4605      	mov	r5, r0
 80105e8:	460c      	mov	r4, r1
 80105ea:	d454      	bmi.n	8010696 <__sflush_r+0xba>
 80105ec:	684b      	ldr	r3, [r1, #4]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	dc02      	bgt.n	80105f8 <__sflush_r+0x1c>
 80105f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	dd48      	ble.n	801068a <__sflush_r+0xae>
 80105f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80105fa:	2e00      	cmp	r6, #0
 80105fc:	d045      	beq.n	801068a <__sflush_r+0xae>
 80105fe:	2300      	movs	r3, #0
 8010600:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010604:	682f      	ldr	r7, [r5, #0]
 8010606:	6a21      	ldr	r1, [r4, #32]
 8010608:	602b      	str	r3, [r5, #0]
 801060a:	d030      	beq.n	801066e <__sflush_r+0x92>
 801060c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801060e:	89a3      	ldrh	r3, [r4, #12]
 8010610:	0759      	lsls	r1, r3, #29
 8010612:	d505      	bpl.n	8010620 <__sflush_r+0x44>
 8010614:	6863      	ldr	r3, [r4, #4]
 8010616:	1ad2      	subs	r2, r2, r3
 8010618:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801061a:	b10b      	cbz	r3, 8010620 <__sflush_r+0x44>
 801061c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801061e:	1ad2      	subs	r2, r2, r3
 8010620:	2300      	movs	r3, #0
 8010622:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010624:	6a21      	ldr	r1, [r4, #32]
 8010626:	4628      	mov	r0, r5
 8010628:	47b0      	blx	r6
 801062a:	1c43      	adds	r3, r0, #1
 801062c:	89a3      	ldrh	r3, [r4, #12]
 801062e:	d106      	bne.n	801063e <__sflush_r+0x62>
 8010630:	6829      	ldr	r1, [r5, #0]
 8010632:	291d      	cmp	r1, #29
 8010634:	d82b      	bhi.n	801068e <__sflush_r+0xb2>
 8010636:	4a2a      	ldr	r2, [pc, #168]	@ (80106e0 <__sflush_r+0x104>)
 8010638:	410a      	asrs	r2, r1
 801063a:	07d6      	lsls	r6, r2, #31
 801063c:	d427      	bmi.n	801068e <__sflush_r+0xb2>
 801063e:	2200      	movs	r2, #0
 8010640:	6062      	str	r2, [r4, #4]
 8010642:	04d9      	lsls	r1, r3, #19
 8010644:	6922      	ldr	r2, [r4, #16]
 8010646:	6022      	str	r2, [r4, #0]
 8010648:	d504      	bpl.n	8010654 <__sflush_r+0x78>
 801064a:	1c42      	adds	r2, r0, #1
 801064c:	d101      	bne.n	8010652 <__sflush_r+0x76>
 801064e:	682b      	ldr	r3, [r5, #0]
 8010650:	b903      	cbnz	r3, 8010654 <__sflush_r+0x78>
 8010652:	6560      	str	r0, [r4, #84]	@ 0x54
 8010654:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010656:	602f      	str	r7, [r5, #0]
 8010658:	b1b9      	cbz	r1, 801068a <__sflush_r+0xae>
 801065a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801065e:	4299      	cmp	r1, r3
 8010660:	d002      	beq.n	8010668 <__sflush_r+0x8c>
 8010662:	4628      	mov	r0, r5
 8010664:	f7fe fa2c 	bl	800eac0 <_free_r>
 8010668:	2300      	movs	r3, #0
 801066a:	6363      	str	r3, [r4, #52]	@ 0x34
 801066c:	e00d      	b.n	801068a <__sflush_r+0xae>
 801066e:	2301      	movs	r3, #1
 8010670:	4628      	mov	r0, r5
 8010672:	47b0      	blx	r6
 8010674:	4602      	mov	r2, r0
 8010676:	1c50      	adds	r0, r2, #1
 8010678:	d1c9      	bne.n	801060e <__sflush_r+0x32>
 801067a:	682b      	ldr	r3, [r5, #0]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d0c6      	beq.n	801060e <__sflush_r+0x32>
 8010680:	2b1d      	cmp	r3, #29
 8010682:	d001      	beq.n	8010688 <__sflush_r+0xac>
 8010684:	2b16      	cmp	r3, #22
 8010686:	d11e      	bne.n	80106c6 <__sflush_r+0xea>
 8010688:	602f      	str	r7, [r5, #0]
 801068a:	2000      	movs	r0, #0
 801068c:	e022      	b.n	80106d4 <__sflush_r+0xf8>
 801068e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010692:	b21b      	sxth	r3, r3
 8010694:	e01b      	b.n	80106ce <__sflush_r+0xf2>
 8010696:	690f      	ldr	r7, [r1, #16]
 8010698:	2f00      	cmp	r7, #0
 801069a:	d0f6      	beq.n	801068a <__sflush_r+0xae>
 801069c:	0793      	lsls	r3, r2, #30
 801069e:	680e      	ldr	r6, [r1, #0]
 80106a0:	bf08      	it	eq
 80106a2:	694b      	ldreq	r3, [r1, #20]
 80106a4:	600f      	str	r7, [r1, #0]
 80106a6:	bf18      	it	ne
 80106a8:	2300      	movne	r3, #0
 80106aa:	eba6 0807 	sub.w	r8, r6, r7
 80106ae:	608b      	str	r3, [r1, #8]
 80106b0:	f1b8 0f00 	cmp.w	r8, #0
 80106b4:	dde9      	ble.n	801068a <__sflush_r+0xae>
 80106b6:	6a21      	ldr	r1, [r4, #32]
 80106b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80106ba:	4643      	mov	r3, r8
 80106bc:	463a      	mov	r2, r7
 80106be:	4628      	mov	r0, r5
 80106c0:	47b0      	blx	r6
 80106c2:	2800      	cmp	r0, #0
 80106c4:	dc08      	bgt.n	80106d8 <__sflush_r+0xfc>
 80106c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80106ce:	81a3      	strh	r3, [r4, #12]
 80106d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80106d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106d8:	4407      	add	r7, r0
 80106da:	eba8 0800 	sub.w	r8, r8, r0
 80106de:	e7e7      	b.n	80106b0 <__sflush_r+0xd4>
 80106e0:	dfbffffe 	.word	0xdfbffffe

080106e4 <_fflush_r>:
 80106e4:	b538      	push	{r3, r4, r5, lr}
 80106e6:	690b      	ldr	r3, [r1, #16]
 80106e8:	4605      	mov	r5, r0
 80106ea:	460c      	mov	r4, r1
 80106ec:	b913      	cbnz	r3, 80106f4 <_fflush_r+0x10>
 80106ee:	2500      	movs	r5, #0
 80106f0:	4628      	mov	r0, r5
 80106f2:	bd38      	pop	{r3, r4, r5, pc}
 80106f4:	b118      	cbz	r0, 80106fe <_fflush_r+0x1a>
 80106f6:	6a03      	ldr	r3, [r0, #32]
 80106f8:	b90b      	cbnz	r3, 80106fe <_fflush_r+0x1a>
 80106fa:	f7fd f9f7 	bl	800daec <__sinit>
 80106fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d0f3      	beq.n	80106ee <_fflush_r+0xa>
 8010706:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010708:	07d0      	lsls	r0, r2, #31
 801070a:	d404      	bmi.n	8010716 <_fflush_r+0x32>
 801070c:	0599      	lsls	r1, r3, #22
 801070e:	d402      	bmi.n	8010716 <_fflush_r+0x32>
 8010710:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010712:	f7fd fb72 	bl	800ddfa <__retarget_lock_acquire_recursive>
 8010716:	4628      	mov	r0, r5
 8010718:	4621      	mov	r1, r4
 801071a:	f7ff ff5f 	bl	80105dc <__sflush_r>
 801071e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010720:	07da      	lsls	r2, r3, #31
 8010722:	4605      	mov	r5, r0
 8010724:	d4e4      	bmi.n	80106f0 <_fflush_r+0xc>
 8010726:	89a3      	ldrh	r3, [r4, #12]
 8010728:	059b      	lsls	r3, r3, #22
 801072a:	d4e1      	bmi.n	80106f0 <_fflush_r+0xc>
 801072c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801072e:	f7fd fb65 	bl	800ddfc <__retarget_lock_release_recursive>
 8010732:	e7dd      	b.n	80106f0 <_fflush_r+0xc>

08010734 <strncmp>:
 8010734:	b510      	push	{r4, lr}
 8010736:	b16a      	cbz	r2, 8010754 <strncmp+0x20>
 8010738:	3901      	subs	r1, #1
 801073a:	1884      	adds	r4, r0, r2
 801073c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010740:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010744:	429a      	cmp	r2, r3
 8010746:	d103      	bne.n	8010750 <strncmp+0x1c>
 8010748:	42a0      	cmp	r0, r4
 801074a:	d001      	beq.n	8010750 <strncmp+0x1c>
 801074c:	2a00      	cmp	r2, #0
 801074e:	d1f5      	bne.n	801073c <strncmp+0x8>
 8010750:	1ad0      	subs	r0, r2, r3
 8010752:	bd10      	pop	{r4, pc}
 8010754:	4610      	mov	r0, r2
 8010756:	e7fc      	b.n	8010752 <strncmp+0x1e>

08010758 <_sbrk_r>:
 8010758:	b538      	push	{r3, r4, r5, lr}
 801075a:	4d06      	ldr	r5, [pc, #24]	@ (8010774 <_sbrk_r+0x1c>)
 801075c:	2300      	movs	r3, #0
 801075e:	4604      	mov	r4, r0
 8010760:	4608      	mov	r0, r1
 8010762:	602b      	str	r3, [r5, #0]
 8010764:	f7f3 fc22 	bl	8003fac <_sbrk>
 8010768:	1c43      	adds	r3, r0, #1
 801076a:	d102      	bne.n	8010772 <_sbrk_r+0x1a>
 801076c:	682b      	ldr	r3, [r5, #0]
 801076e:	b103      	cbz	r3, 8010772 <_sbrk_r+0x1a>
 8010770:	6023      	str	r3, [r4, #0]
 8010772:	bd38      	pop	{r3, r4, r5, pc}
 8010774:	200035fc 	.word	0x200035fc

08010778 <nan>:
 8010778:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010780 <nan+0x8>
 801077c:	4770      	bx	lr
 801077e:	bf00      	nop
 8010780:	00000000 	.word	0x00000000
 8010784:	7ff80000 	.word	0x7ff80000

08010788 <__assert_func>:
 8010788:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801078a:	4614      	mov	r4, r2
 801078c:	461a      	mov	r2, r3
 801078e:	4b09      	ldr	r3, [pc, #36]	@ (80107b4 <__assert_func+0x2c>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	4605      	mov	r5, r0
 8010794:	68d8      	ldr	r0, [r3, #12]
 8010796:	b954      	cbnz	r4, 80107ae <__assert_func+0x26>
 8010798:	4b07      	ldr	r3, [pc, #28]	@ (80107b8 <__assert_func+0x30>)
 801079a:	461c      	mov	r4, r3
 801079c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80107a0:	9100      	str	r1, [sp, #0]
 80107a2:	462b      	mov	r3, r5
 80107a4:	4905      	ldr	r1, [pc, #20]	@ (80107bc <__assert_func+0x34>)
 80107a6:	f000 fba7 	bl	8010ef8 <fiprintf>
 80107aa:	f000 fbb7 	bl	8010f1c <abort>
 80107ae:	4b04      	ldr	r3, [pc, #16]	@ (80107c0 <__assert_func+0x38>)
 80107b0:	e7f4      	b.n	801079c <__assert_func+0x14>
 80107b2:	bf00      	nop
 80107b4:	20000030 	.word	0x20000030
 80107b8:	08013ecd 	.word	0x08013ecd
 80107bc:	08013e9f 	.word	0x08013e9f
 80107c0:	08013e92 	.word	0x08013e92

080107c4 <_calloc_r>:
 80107c4:	b570      	push	{r4, r5, r6, lr}
 80107c6:	fba1 5402 	umull	r5, r4, r1, r2
 80107ca:	b93c      	cbnz	r4, 80107dc <_calloc_r+0x18>
 80107cc:	4629      	mov	r1, r5
 80107ce:	f7fe f9eb 	bl	800eba8 <_malloc_r>
 80107d2:	4606      	mov	r6, r0
 80107d4:	b928      	cbnz	r0, 80107e2 <_calloc_r+0x1e>
 80107d6:	2600      	movs	r6, #0
 80107d8:	4630      	mov	r0, r6
 80107da:	bd70      	pop	{r4, r5, r6, pc}
 80107dc:	220c      	movs	r2, #12
 80107de:	6002      	str	r2, [r0, #0]
 80107e0:	e7f9      	b.n	80107d6 <_calloc_r+0x12>
 80107e2:	462a      	mov	r2, r5
 80107e4:	4621      	mov	r1, r4
 80107e6:	f7fd fa34 	bl	800dc52 <memset>
 80107ea:	e7f5      	b.n	80107d8 <_calloc_r+0x14>

080107ec <rshift>:
 80107ec:	6903      	ldr	r3, [r0, #16]
 80107ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80107f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80107f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80107fa:	f100 0414 	add.w	r4, r0, #20
 80107fe:	dd45      	ble.n	801088c <rshift+0xa0>
 8010800:	f011 011f 	ands.w	r1, r1, #31
 8010804:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010808:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801080c:	d10c      	bne.n	8010828 <rshift+0x3c>
 801080e:	f100 0710 	add.w	r7, r0, #16
 8010812:	4629      	mov	r1, r5
 8010814:	42b1      	cmp	r1, r6
 8010816:	d334      	bcc.n	8010882 <rshift+0x96>
 8010818:	1a9b      	subs	r3, r3, r2
 801081a:	009b      	lsls	r3, r3, #2
 801081c:	1eea      	subs	r2, r5, #3
 801081e:	4296      	cmp	r6, r2
 8010820:	bf38      	it	cc
 8010822:	2300      	movcc	r3, #0
 8010824:	4423      	add	r3, r4
 8010826:	e015      	b.n	8010854 <rshift+0x68>
 8010828:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801082c:	f1c1 0820 	rsb	r8, r1, #32
 8010830:	40cf      	lsrs	r7, r1
 8010832:	f105 0e04 	add.w	lr, r5, #4
 8010836:	46a1      	mov	r9, r4
 8010838:	4576      	cmp	r6, lr
 801083a:	46f4      	mov	ip, lr
 801083c:	d815      	bhi.n	801086a <rshift+0x7e>
 801083e:	1a9a      	subs	r2, r3, r2
 8010840:	0092      	lsls	r2, r2, #2
 8010842:	3a04      	subs	r2, #4
 8010844:	3501      	adds	r5, #1
 8010846:	42ae      	cmp	r6, r5
 8010848:	bf38      	it	cc
 801084a:	2200      	movcc	r2, #0
 801084c:	18a3      	adds	r3, r4, r2
 801084e:	50a7      	str	r7, [r4, r2]
 8010850:	b107      	cbz	r7, 8010854 <rshift+0x68>
 8010852:	3304      	adds	r3, #4
 8010854:	1b1a      	subs	r2, r3, r4
 8010856:	42a3      	cmp	r3, r4
 8010858:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801085c:	bf08      	it	eq
 801085e:	2300      	moveq	r3, #0
 8010860:	6102      	str	r2, [r0, #16]
 8010862:	bf08      	it	eq
 8010864:	6143      	streq	r3, [r0, #20]
 8010866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801086a:	f8dc c000 	ldr.w	ip, [ip]
 801086e:	fa0c fc08 	lsl.w	ip, ip, r8
 8010872:	ea4c 0707 	orr.w	r7, ip, r7
 8010876:	f849 7b04 	str.w	r7, [r9], #4
 801087a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801087e:	40cf      	lsrs	r7, r1
 8010880:	e7da      	b.n	8010838 <rshift+0x4c>
 8010882:	f851 cb04 	ldr.w	ip, [r1], #4
 8010886:	f847 cf04 	str.w	ip, [r7, #4]!
 801088a:	e7c3      	b.n	8010814 <rshift+0x28>
 801088c:	4623      	mov	r3, r4
 801088e:	e7e1      	b.n	8010854 <rshift+0x68>

08010890 <__hexdig_fun>:
 8010890:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010894:	2b09      	cmp	r3, #9
 8010896:	d802      	bhi.n	801089e <__hexdig_fun+0xe>
 8010898:	3820      	subs	r0, #32
 801089a:	b2c0      	uxtb	r0, r0
 801089c:	4770      	bx	lr
 801089e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80108a2:	2b05      	cmp	r3, #5
 80108a4:	d801      	bhi.n	80108aa <__hexdig_fun+0x1a>
 80108a6:	3847      	subs	r0, #71	@ 0x47
 80108a8:	e7f7      	b.n	801089a <__hexdig_fun+0xa>
 80108aa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80108ae:	2b05      	cmp	r3, #5
 80108b0:	d801      	bhi.n	80108b6 <__hexdig_fun+0x26>
 80108b2:	3827      	subs	r0, #39	@ 0x27
 80108b4:	e7f1      	b.n	801089a <__hexdig_fun+0xa>
 80108b6:	2000      	movs	r0, #0
 80108b8:	4770      	bx	lr
	...

080108bc <__gethex>:
 80108bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108c0:	b085      	sub	sp, #20
 80108c2:	468a      	mov	sl, r1
 80108c4:	9302      	str	r3, [sp, #8]
 80108c6:	680b      	ldr	r3, [r1, #0]
 80108c8:	9001      	str	r0, [sp, #4]
 80108ca:	4690      	mov	r8, r2
 80108cc:	1c9c      	adds	r4, r3, #2
 80108ce:	46a1      	mov	r9, r4
 80108d0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80108d4:	2830      	cmp	r0, #48	@ 0x30
 80108d6:	d0fa      	beq.n	80108ce <__gethex+0x12>
 80108d8:	eba9 0303 	sub.w	r3, r9, r3
 80108dc:	f1a3 0b02 	sub.w	fp, r3, #2
 80108e0:	f7ff ffd6 	bl	8010890 <__hexdig_fun>
 80108e4:	4605      	mov	r5, r0
 80108e6:	2800      	cmp	r0, #0
 80108e8:	d168      	bne.n	80109bc <__gethex+0x100>
 80108ea:	49a0      	ldr	r1, [pc, #640]	@ (8010b6c <__gethex+0x2b0>)
 80108ec:	2201      	movs	r2, #1
 80108ee:	4648      	mov	r0, r9
 80108f0:	f7ff ff20 	bl	8010734 <strncmp>
 80108f4:	4607      	mov	r7, r0
 80108f6:	2800      	cmp	r0, #0
 80108f8:	d167      	bne.n	80109ca <__gethex+0x10e>
 80108fa:	f899 0001 	ldrb.w	r0, [r9, #1]
 80108fe:	4626      	mov	r6, r4
 8010900:	f7ff ffc6 	bl	8010890 <__hexdig_fun>
 8010904:	2800      	cmp	r0, #0
 8010906:	d062      	beq.n	80109ce <__gethex+0x112>
 8010908:	4623      	mov	r3, r4
 801090a:	7818      	ldrb	r0, [r3, #0]
 801090c:	2830      	cmp	r0, #48	@ 0x30
 801090e:	4699      	mov	r9, r3
 8010910:	f103 0301 	add.w	r3, r3, #1
 8010914:	d0f9      	beq.n	801090a <__gethex+0x4e>
 8010916:	f7ff ffbb 	bl	8010890 <__hexdig_fun>
 801091a:	fab0 f580 	clz	r5, r0
 801091e:	096d      	lsrs	r5, r5, #5
 8010920:	f04f 0b01 	mov.w	fp, #1
 8010924:	464a      	mov	r2, r9
 8010926:	4616      	mov	r6, r2
 8010928:	3201      	adds	r2, #1
 801092a:	7830      	ldrb	r0, [r6, #0]
 801092c:	f7ff ffb0 	bl	8010890 <__hexdig_fun>
 8010930:	2800      	cmp	r0, #0
 8010932:	d1f8      	bne.n	8010926 <__gethex+0x6a>
 8010934:	498d      	ldr	r1, [pc, #564]	@ (8010b6c <__gethex+0x2b0>)
 8010936:	2201      	movs	r2, #1
 8010938:	4630      	mov	r0, r6
 801093a:	f7ff fefb 	bl	8010734 <strncmp>
 801093e:	2800      	cmp	r0, #0
 8010940:	d13f      	bne.n	80109c2 <__gethex+0x106>
 8010942:	b944      	cbnz	r4, 8010956 <__gethex+0x9a>
 8010944:	1c74      	adds	r4, r6, #1
 8010946:	4622      	mov	r2, r4
 8010948:	4616      	mov	r6, r2
 801094a:	3201      	adds	r2, #1
 801094c:	7830      	ldrb	r0, [r6, #0]
 801094e:	f7ff ff9f 	bl	8010890 <__hexdig_fun>
 8010952:	2800      	cmp	r0, #0
 8010954:	d1f8      	bne.n	8010948 <__gethex+0x8c>
 8010956:	1ba4      	subs	r4, r4, r6
 8010958:	00a7      	lsls	r7, r4, #2
 801095a:	7833      	ldrb	r3, [r6, #0]
 801095c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010960:	2b50      	cmp	r3, #80	@ 0x50
 8010962:	d13e      	bne.n	80109e2 <__gethex+0x126>
 8010964:	7873      	ldrb	r3, [r6, #1]
 8010966:	2b2b      	cmp	r3, #43	@ 0x2b
 8010968:	d033      	beq.n	80109d2 <__gethex+0x116>
 801096a:	2b2d      	cmp	r3, #45	@ 0x2d
 801096c:	d034      	beq.n	80109d8 <__gethex+0x11c>
 801096e:	1c71      	adds	r1, r6, #1
 8010970:	2400      	movs	r4, #0
 8010972:	7808      	ldrb	r0, [r1, #0]
 8010974:	f7ff ff8c 	bl	8010890 <__hexdig_fun>
 8010978:	1e43      	subs	r3, r0, #1
 801097a:	b2db      	uxtb	r3, r3
 801097c:	2b18      	cmp	r3, #24
 801097e:	d830      	bhi.n	80109e2 <__gethex+0x126>
 8010980:	f1a0 0210 	sub.w	r2, r0, #16
 8010984:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010988:	f7ff ff82 	bl	8010890 <__hexdig_fun>
 801098c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8010990:	fa5f fc8c 	uxtb.w	ip, ip
 8010994:	f1bc 0f18 	cmp.w	ip, #24
 8010998:	f04f 030a 	mov.w	r3, #10
 801099c:	d91e      	bls.n	80109dc <__gethex+0x120>
 801099e:	b104      	cbz	r4, 80109a2 <__gethex+0xe6>
 80109a0:	4252      	negs	r2, r2
 80109a2:	4417      	add	r7, r2
 80109a4:	f8ca 1000 	str.w	r1, [sl]
 80109a8:	b1ed      	cbz	r5, 80109e6 <__gethex+0x12a>
 80109aa:	f1bb 0f00 	cmp.w	fp, #0
 80109ae:	bf0c      	ite	eq
 80109b0:	2506      	moveq	r5, #6
 80109b2:	2500      	movne	r5, #0
 80109b4:	4628      	mov	r0, r5
 80109b6:	b005      	add	sp, #20
 80109b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109bc:	2500      	movs	r5, #0
 80109be:	462c      	mov	r4, r5
 80109c0:	e7b0      	b.n	8010924 <__gethex+0x68>
 80109c2:	2c00      	cmp	r4, #0
 80109c4:	d1c7      	bne.n	8010956 <__gethex+0x9a>
 80109c6:	4627      	mov	r7, r4
 80109c8:	e7c7      	b.n	801095a <__gethex+0x9e>
 80109ca:	464e      	mov	r6, r9
 80109cc:	462f      	mov	r7, r5
 80109ce:	2501      	movs	r5, #1
 80109d0:	e7c3      	b.n	801095a <__gethex+0x9e>
 80109d2:	2400      	movs	r4, #0
 80109d4:	1cb1      	adds	r1, r6, #2
 80109d6:	e7cc      	b.n	8010972 <__gethex+0xb6>
 80109d8:	2401      	movs	r4, #1
 80109da:	e7fb      	b.n	80109d4 <__gethex+0x118>
 80109dc:	fb03 0002 	mla	r0, r3, r2, r0
 80109e0:	e7ce      	b.n	8010980 <__gethex+0xc4>
 80109e2:	4631      	mov	r1, r6
 80109e4:	e7de      	b.n	80109a4 <__gethex+0xe8>
 80109e6:	eba6 0309 	sub.w	r3, r6, r9
 80109ea:	3b01      	subs	r3, #1
 80109ec:	4629      	mov	r1, r5
 80109ee:	2b07      	cmp	r3, #7
 80109f0:	dc0a      	bgt.n	8010a08 <__gethex+0x14c>
 80109f2:	9801      	ldr	r0, [sp, #4]
 80109f4:	f7fe f964 	bl	800ecc0 <_Balloc>
 80109f8:	4604      	mov	r4, r0
 80109fa:	b940      	cbnz	r0, 8010a0e <__gethex+0x152>
 80109fc:	4b5c      	ldr	r3, [pc, #368]	@ (8010b70 <__gethex+0x2b4>)
 80109fe:	4602      	mov	r2, r0
 8010a00:	21e4      	movs	r1, #228	@ 0xe4
 8010a02:	485c      	ldr	r0, [pc, #368]	@ (8010b74 <__gethex+0x2b8>)
 8010a04:	f7ff fec0 	bl	8010788 <__assert_func>
 8010a08:	3101      	adds	r1, #1
 8010a0a:	105b      	asrs	r3, r3, #1
 8010a0c:	e7ef      	b.n	80109ee <__gethex+0x132>
 8010a0e:	f100 0a14 	add.w	sl, r0, #20
 8010a12:	2300      	movs	r3, #0
 8010a14:	4655      	mov	r5, sl
 8010a16:	469b      	mov	fp, r3
 8010a18:	45b1      	cmp	r9, r6
 8010a1a:	d337      	bcc.n	8010a8c <__gethex+0x1d0>
 8010a1c:	f845 bb04 	str.w	fp, [r5], #4
 8010a20:	eba5 050a 	sub.w	r5, r5, sl
 8010a24:	10ad      	asrs	r5, r5, #2
 8010a26:	6125      	str	r5, [r4, #16]
 8010a28:	4658      	mov	r0, fp
 8010a2a:	f7fe fa3b 	bl	800eea4 <__hi0bits>
 8010a2e:	016d      	lsls	r5, r5, #5
 8010a30:	f8d8 6000 	ldr.w	r6, [r8]
 8010a34:	1a2d      	subs	r5, r5, r0
 8010a36:	42b5      	cmp	r5, r6
 8010a38:	dd54      	ble.n	8010ae4 <__gethex+0x228>
 8010a3a:	1bad      	subs	r5, r5, r6
 8010a3c:	4629      	mov	r1, r5
 8010a3e:	4620      	mov	r0, r4
 8010a40:	f7fe fdcf 	bl	800f5e2 <__any_on>
 8010a44:	4681      	mov	r9, r0
 8010a46:	b178      	cbz	r0, 8010a68 <__gethex+0x1ac>
 8010a48:	1e6b      	subs	r3, r5, #1
 8010a4a:	1159      	asrs	r1, r3, #5
 8010a4c:	f003 021f 	and.w	r2, r3, #31
 8010a50:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010a54:	f04f 0901 	mov.w	r9, #1
 8010a58:	fa09 f202 	lsl.w	r2, r9, r2
 8010a5c:	420a      	tst	r2, r1
 8010a5e:	d003      	beq.n	8010a68 <__gethex+0x1ac>
 8010a60:	454b      	cmp	r3, r9
 8010a62:	dc36      	bgt.n	8010ad2 <__gethex+0x216>
 8010a64:	f04f 0902 	mov.w	r9, #2
 8010a68:	4629      	mov	r1, r5
 8010a6a:	4620      	mov	r0, r4
 8010a6c:	f7ff febe 	bl	80107ec <rshift>
 8010a70:	442f      	add	r7, r5
 8010a72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010a76:	42bb      	cmp	r3, r7
 8010a78:	da42      	bge.n	8010b00 <__gethex+0x244>
 8010a7a:	9801      	ldr	r0, [sp, #4]
 8010a7c:	4621      	mov	r1, r4
 8010a7e:	f7fe f95f 	bl	800ed40 <_Bfree>
 8010a82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010a84:	2300      	movs	r3, #0
 8010a86:	6013      	str	r3, [r2, #0]
 8010a88:	25a3      	movs	r5, #163	@ 0xa3
 8010a8a:	e793      	b.n	80109b4 <__gethex+0xf8>
 8010a8c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010a90:	2a2e      	cmp	r2, #46	@ 0x2e
 8010a92:	d012      	beq.n	8010aba <__gethex+0x1fe>
 8010a94:	2b20      	cmp	r3, #32
 8010a96:	d104      	bne.n	8010aa2 <__gethex+0x1e6>
 8010a98:	f845 bb04 	str.w	fp, [r5], #4
 8010a9c:	f04f 0b00 	mov.w	fp, #0
 8010aa0:	465b      	mov	r3, fp
 8010aa2:	7830      	ldrb	r0, [r6, #0]
 8010aa4:	9303      	str	r3, [sp, #12]
 8010aa6:	f7ff fef3 	bl	8010890 <__hexdig_fun>
 8010aaa:	9b03      	ldr	r3, [sp, #12]
 8010aac:	f000 000f 	and.w	r0, r0, #15
 8010ab0:	4098      	lsls	r0, r3
 8010ab2:	ea4b 0b00 	orr.w	fp, fp, r0
 8010ab6:	3304      	adds	r3, #4
 8010ab8:	e7ae      	b.n	8010a18 <__gethex+0x15c>
 8010aba:	45b1      	cmp	r9, r6
 8010abc:	d8ea      	bhi.n	8010a94 <__gethex+0x1d8>
 8010abe:	492b      	ldr	r1, [pc, #172]	@ (8010b6c <__gethex+0x2b0>)
 8010ac0:	9303      	str	r3, [sp, #12]
 8010ac2:	2201      	movs	r2, #1
 8010ac4:	4630      	mov	r0, r6
 8010ac6:	f7ff fe35 	bl	8010734 <strncmp>
 8010aca:	9b03      	ldr	r3, [sp, #12]
 8010acc:	2800      	cmp	r0, #0
 8010ace:	d1e1      	bne.n	8010a94 <__gethex+0x1d8>
 8010ad0:	e7a2      	b.n	8010a18 <__gethex+0x15c>
 8010ad2:	1ea9      	subs	r1, r5, #2
 8010ad4:	4620      	mov	r0, r4
 8010ad6:	f7fe fd84 	bl	800f5e2 <__any_on>
 8010ada:	2800      	cmp	r0, #0
 8010adc:	d0c2      	beq.n	8010a64 <__gethex+0x1a8>
 8010ade:	f04f 0903 	mov.w	r9, #3
 8010ae2:	e7c1      	b.n	8010a68 <__gethex+0x1ac>
 8010ae4:	da09      	bge.n	8010afa <__gethex+0x23e>
 8010ae6:	1b75      	subs	r5, r6, r5
 8010ae8:	4621      	mov	r1, r4
 8010aea:	9801      	ldr	r0, [sp, #4]
 8010aec:	462a      	mov	r2, r5
 8010aee:	f7fe fb3f 	bl	800f170 <__lshift>
 8010af2:	1b7f      	subs	r7, r7, r5
 8010af4:	4604      	mov	r4, r0
 8010af6:	f100 0a14 	add.w	sl, r0, #20
 8010afa:	f04f 0900 	mov.w	r9, #0
 8010afe:	e7b8      	b.n	8010a72 <__gethex+0x1b6>
 8010b00:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010b04:	42bd      	cmp	r5, r7
 8010b06:	dd6f      	ble.n	8010be8 <__gethex+0x32c>
 8010b08:	1bed      	subs	r5, r5, r7
 8010b0a:	42ae      	cmp	r6, r5
 8010b0c:	dc34      	bgt.n	8010b78 <__gethex+0x2bc>
 8010b0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010b12:	2b02      	cmp	r3, #2
 8010b14:	d022      	beq.n	8010b5c <__gethex+0x2a0>
 8010b16:	2b03      	cmp	r3, #3
 8010b18:	d024      	beq.n	8010b64 <__gethex+0x2a8>
 8010b1a:	2b01      	cmp	r3, #1
 8010b1c:	d115      	bne.n	8010b4a <__gethex+0x28e>
 8010b1e:	42ae      	cmp	r6, r5
 8010b20:	d113      	bne.n	8010b4a <__gethex+0x28e>
 8010b22:	2e01      	cmp	r6, #1
 8010b24:	d10b      	bne.n	8010b3e <__gethex+0x282>
 8010b26:	9a02      	ldr	r2, [sp, #8]
 8010b28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010b2c:	6013      	str	r3, [r2, #0]
 8010b2e:	2301      	movs	r3, #1
 8010b30:	6123      	str	r3, [r4, #16]
 8010b32:	f8ca 3000 	str.w	r3, [sl]
 8010b36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010b38:	2562      	movs	r5, #98	@ 0x62
 8010b3a:	601c      	str	r4, [r3, #0]
 8010b3c:	e73a      	b.n	80109b4 <__gethex+0xf8>
 8010b3e:	1e71      	subs	r1, r6, #1
 8010b40:	4620      	mov	r0, r4
 8010b42:	f7fe fd4e 	bl	800f5e2 <__any_on>
 8010b46:	2800      	cmp	r0, #0
 8010b48:	d1ed      	bne.n	8010b26 <__gethex+0x26a>
 8010b4a:	9801      	ldr	r0, [sp, #4]
 8010b4c:	4621      	mov	r1, r4
 8010b4e:	f7fe f8f7 	bl	800ed40 <_Bfree>
 8010b52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010b54:	2300      	movs	r3, #0
 8010b56:	6013      	str	r3, [r2, #0]
 8010b58:	2550      	movs	r5, #80	@ 0x50
 8010b5a:	e72b      	b.n	80109b4 <__gethex+0xf8>
 8010b5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d1f3      	bne.n	8010b4a <__gethex+0x28e>
 8010b62:	e7e0      	b.n	8010b26 <__gethex+0x26a>
 8010b64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d1dd      	bne.n	8010b26 <__gethex+0x26a>
 8010b6a:	e7ee      	b.n	8010b4a <__gethex+0x28e>
 8010b6c:	08013d20 	.word	0x08013d20
 8010b70:	08013bb9 	.word	0x08013bb9
 8010b74:	08013ece 	.word	0x08013ece
 8010b78:	1e6f      	subs	r7, r5, #1
 8010b7a:	f1b9 0f00 	cmp.w	r9, #0
 8010b7e:	d130      	bne.n	8010be2 <__gethex+0x326>
 8010b80:	b127      	cbz	r7, 8010b8c <__gethex+0x2d0>
 8010b82:	4639      	mov	r1, r7
 8010b84:	4620      	mov	r0, r4
 8010b86:	f7fe fd2c 	bl	800f5e2 <__any_on>
 8010b8a:	4681      	mov	r9, r0
 8010b8c:	117a      	asrs	r2, r7, #5
 8010b8e:	2301      	movs	r3, #1
 8010b90:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010b94:	f007 071f 	and.w	r7, r7, #31
 8010b98:	40bb      	lsls	r3, r7
 8010b9a:	4213      	tst	r3, r2
 8010b9c:	4629      	mov	r1, r5
 8010b9e:	4620      	mov	r0, r4
 8010ba0:	bf18      	it	ne
 8010ba2:	f049 0902 	orrne.w	r9, r9, #2
 8010ba6:	f7ff fe21 	bl	80107ec <rshift>
 8010baa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010bae:	1b76      	subs	r6, r6, r5
 8010bb0:	2502      	movs	r5, #2
 8010bb2:	f1b9 0f00 	cmp.w	r9, #0
 8010bb6:	d047      	beq.n	8010c48 <__gethex+0x38c>
 8010bb8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010bbc:	2b02      	cmp	r3, #2
 8010bbe:	d015      	beq.n	8010bec <__gethex+0x330>
 8010bc0:	2b03      	cmp	r3, #3
 8010bc2:	d017      	beq.n	8010bf4 <__gethex+0x338>
 8010bc4:	2b01      	cmp	r3, #1
 8010bc6:	d109      	bne.n	8010bdc <__gethex+0x320>
 8010bc8:	f019 0f02 	tst.w	r9, #2
 8010bcc:	d006      	beq.n	8010bdc <__gethex+0x320>
 8010bce:	f8da 3000 	ldr.w	r3, [sl]
 8010bd2:	ea49 0903 	orr.w	r9, r9, r3
 8010bd6:	f019 0f01 	tst.w	r9, #1
 8010bda:	d10e      	bne.n	8010bfa <__gethex+0x33e>
 8010bdc:	f045 0510 	orr.w	r5, r5, #16
 8010be0:	e032      	b.n	8010c48 <__gethex+0x38c>
 8010be2:	f04f 0901 	mov.w	r9, #1
 8010be6:	e7d1      	b.n	8010b8c <__gethex+0x2d0>
 8010be8:	2501      	movs	r5, #1
 8010bea:	e7e2      	b.n	8010bb2 <__gethex+0x2f6>
 8010bec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010bee:	f1c3 0301 	rsb	r3, r3, #1
 8010bf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010bf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d0f0      	beq.n	8010bdc <__gethex+0x320>
 8010bfa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010bfe:	f104 0314 	add.w	r3, r4, #20
 8010c02:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010c06:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010c0a:	f04f 0c00 	mov.w	ip, #0
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c14:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8010c18:	d01b      	beq.n	8010c52 <__gethex+0x396>
 8010c1a:	3201      	adds	r2, #1
 8010c1c:	6002      	str	r2, [r0, #0]
 8010c1e:	2d02      	cmp	r5, #2
 8010c20:	f104 0314 	add.w	r3, r4, #20
 8010c24:	d13c      	bne.n	8010ca0 <__gethex+0x3e4>
 8010c26:	f8d8 2000 	ldr.w	r2, [r8]
 8010c2a:	3a01      	subs	r2, #1
 8010c2c:	42b2      	cmp	r2, r6
 8010c2e:	d109      	bne.n	8010c44 <__gethex+0x388>
 8010c30:	1171      	asrs	r1, r6, #5
 8010c32:	2201      	movs	r2, #1
 8010c34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010c38:	f006 061f 	and.w	r6, r6, #31
 8010c3c:	fa02 f606 	lsl.w	r6, r2, r6
 8010c40:	421e      	tst	r6, r3
 8010c42:	d13a      	bne.n	8010cba <__gethex+0x3fe>
 8010c44:	f045 0520 	orr.w	r5, r5, #32
 8010c48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c4a:	601c      	str	r4, [r3, #0]
 8010c4c:	9b02      	ldr	r3, [sp, #8]
 8010c4e:	601f      	str	r7, [r3, #0]
 8010c50:	e6b0      	b.n	80109b4 <__gethex+0xf8>
 8010c52:	4299      	cmp	r1, r3
 8010c54:	f843 cc04 	str.w	ip, [r3, #-4]
 8010c58:	d8d9      	bhi.n	8010c0e <__gethex+0x352>
 8010c5a:	68a3      	ldr	r3, [r4, #8]
 8010c5c:	459b      	cmp	fp, r3
 8010c5e:	db17      	blt.n	8010c90 <__gethex+0x3d4>
 8010c60:	6861      	ldr	r1, [r4, #4]
 8010c62:	9801      	ldr	r0, [sp, #4]
 8010c64:	3101      	adds	r1, #1
 8010c66:	f7fe f82b 	bl	800ecc0 <_Balloc>
 8010c6a:	4681      	mov	r9, r0
 8010c6c:	b918      	cbnz	r0, 8010c76 <__gethex+0x3ba>
 8010c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8010cd8 <__gethex+0x41c>)
 8010c70:	4602      	mov	r2, r0
 8010c72:	2184      	movs	r1, #132	@ 0x84
 8010c74:	e6c5      	b.n	8010a02 <__gethex+0x146>
 8010c76:	6922      	ldr	r2, [r4, #16]
 8010c78:	3202      	adds	r2, #2
 8010c7a:	f104 010c 	add.w	r1, r4, #12
 8010c7e:	0092      	lsls	r2, r2, #2
 8010c80:	300c      	adds	r0, #12
 8010c82:	f7fd f8bc 	bl	800ddfe <memcpy>
 8010c86:	4621      	mov	r1, r4
 8010c88:	9801      	ldr	r0, [sp, #4]
 8010c8a:	f7fe f859 	bl	800ed40 <_Bfree>
 8010c8e:	464c      	mov	r4, r9
 8010c90:	6923      	ldr	r3, [r4, #16]
 8010c92:	1c5a      	adds	r2, r3, #1
 8010c94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010c98:	6122      	str	r2, [r4, #16]
 8010c9a:	2201      	movs	r2, #1
 8010c9c:	615a      	str	r2, [r3, #20]
 8010c9e:	e7be      	b.n	8010c1e <__gethex+0x362>
 8010ca0:	6922      	ldr	r2, [r4, #16]
 8010ca2:	455a      	cmp	r2, fp
 8010ca4:	dd0b      	ble.n	8010cbe <__gethex+0x402>
 8010ca6:	2101      	movs	r1, #1
 8010ca8:	4620      	mov	r0, r4
 8010caa:	f7ff fd9f 	bl	80107ec <rshift>
 8010cae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010cb2:	3701      	adds	r7, #1
 8010cb4:	42bb      	cmp	r3, r7
 8010cb6:	f6ff aee0 	blt.w	8010a7a <__gethex+0x1be>
 8010cba:	2501      	movs	r5, #1
 8010cbc:	e7c2      	b.n	8010c44 <__gethex+0x388>
 8010cbe:	f016 061f 	ands.w	r6, r6, #31
 8010cc2:	d0fa      	beq.n	8010cba <__gethex+0x3fe>
 8010cc4:	4453      	add	r3, sl
 8010cc6:	f1c6 0620 	rsb	r6, r6, #32
 8010cca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010cce:	f7fe f8e9 	bl	800eea4 <__hi0bits>
 8010cd2:	42b0      	cmp	r0, r6
 8010cd4:	dbe7      	blt.n	8010ca6 <__gethex+0x3ea>
 8010cd6:	e7f0      	b.n	8010cba <__gethex+0x3fe>
 8010cd8:	08013bb9 	.word	0x08013bb9

08010cdc <L_shift>:
 8010cdc:	f1c2 0208 	rsb	r2, r2, #8
 8010ce0:	0092      	lsls	r2, r2, #2
 8010ce2:	b570      	push	{r4, r5, r6, lr}
 8010ce4:	f1c2 0620 	rsb	r6, r2, #32
 8010ce8:	6843      	ldr	r3, [r0, #4]
 8010cea:	6804      	ldr	r4, [r0, #0]
 8010cec:	fa03 f506 	lsl.w	r5, r3, r6
 8010cf0:	432c      	orrs	r4, r5
 8010cf2:	40d3      	lsrs	r3, r2
 8010cf4:	6004      	str	r4, [r0, #0]
 8010cf6:	f840 3f04 	str.w	r3, [r0, #4]!
 8010cfa:	4288      	cmp	r0, r1
 8010cfc:	d3f4      	bcc.n	8010ce8 <L_shift+0xc>
 8010cfe:	bd70      	pop	{r4, r5, r6, pc}

08010d00 <__match>:
 8010d00:	b530      	push	{r4, r5, lr}
 8010d02:	6803      	ldr	r3, [r0, #0]
 8010d04:	3301      	adds	r3, #1
 8010d06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d0a:	b914      	cbnz	r4, 8010d12 <__match+0x12>
 8010d0c:	6003      	str	r3, [r0, #0]
 8010d0e:	2001      	movs	r0, #1
 8010d10:	bd30      	pop	{r4, r5, pc}
 8010d12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d16:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010d1a:	2d19      	cmp	r5, #25
 8010d1c:	bf98      	it	ls
 8010d1e:	3220      	addls	r2, #32
 8010d20:	42a2      	cmp	r2, r4
 8010d22:	d0f0      	beq.n	8010d06 <__match+0x6>
 8010d24:	2000      	movs	r0, #0
 8010d26:	e7f3      	b.n	8010d10 <__match+0x10>

08010d28 <__hexnan>:
 8010d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d2c:	680b      	ldr	r3, [r1, #0]
 8010d2e:	6801      	ldr	r1, [r0, #0]
 8010d30:	115e      	asrs	r6, r3, #5
 8010d32:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010d36:	f013 031f 	ands.w	r3, r3, #31
 8010d3a:	b087      	sub	sp, #28
 8010d3c:	bf18      	it	ne
 8010d3e:	3604      	addne	r6, #4
 8010d40:	2500      	movs	r5, #0
 8010d42:	1f37      	subs	r7, r6, #4
 8010d44:	4682      	mov	sl, r0
 8010d46:	4690      	mov	r8, r2
 8010d48:	9301      	str	r3, [sp, #4]
 8010d4a:	f846 5c04 	str.w	r5, [r6, #-4]
 8010d4e:	46b9      	mov	r9, r7
 8010d50:	463c      	mov	r4, r7
 8010d52:	9502      	str	r5, [sp, #8]
 8010d54:	46ab      	mov	fp, r5
 8010d56:	784a      	ldrb	r2, [r1, #1]
 8010d58:	1c4b      	adds	r3, r1, #1
 8010d5a:	9303      	str	r3, [sp, #12]
 8010d5c:	b342      	cbz	r2, 8010db0 <__hexnan+0x88>
 8010d5e:	4610      	mov	r0, r2
 8010d60:	9105      	str	r1, [sp, #20]
 8010d62:	9204      	str	r2, [sp, #16]
 8010d64:	f7ff fd94 	bl	8010890 <__hexdig_fun>
 8010d68:	2800      	cmp	r0, #0
 8010d6a:	d151      	bne.n	8010e10 <__hexnan+0xe8>
 8010d6c:	9a04      	ldr	r2, [sp, #16]
 8010d6e:	9905      	ldr	r1, [sp, #20]
 8010d70:	2a20      	cmp	r2, #32
 8010d72:	d818      	bhi.n	8010da6 <__hexnan+0x7e>
 8010d74:	9b02      	ldr	r3, [sp, #8]
 8010d76:	459b      	cmp	fp, r3
 8010d78:	dd13      	ble.n	8010da2 <__hexnan+0x7a>
 8010d7a:	454c      	cmp	r4, r9
 8010d7c:	d206      	bcs.n	8010d8c <__hexnan+0x64>
 8010d7e:	2d07      	cmp	r5, #7
 8010d80:	dc04      	bgt.n	8010d8c <__hexnan+0x64>
 8010d82:	462a      	mov	r2, r5
 8010d84:	4649      	mov	r1, r9
 8010d86:	4620      	mov	r0, r4
 8010d88:	f7ff ffa8 	bl	8010cdc <L_shift>
 8010d8c:	4544      	cmp	r4, r8
 8010d8e:	d952      	bls.n	8010e36 <__hexnan+0x10e>
 8010d90:	2300      	movs	r3, #0
 8010d92:	f1a4 0904 	sub.w	r9, r4, #4
 8010d96:	f844 3c04 	str.w	r3, [r4, #-4]
 8010d9a:	f8cd b008 	str.w	fp, [sp, #8]
 8010d9e:	464c      	mov	r4, r9
 8010da0:	461d      	mov	r5, r3
 8010da2:	9903      	ldr	r1, [sp, #12]
 8010da4:	e7d7      	b.n	8010d56 <__hexnan+0x2e>
 8010da6:	2a29      	cmp	r2, #41	@ 0x29
 8010da8:	d157      	bne.n	8010e5a <__hexnan+0x132>
 8010daa:	3102      	adds	r1, #2
 8010dac:	f8ca 1000 	str.w	r1, [sl]
 8010db0:	f1bb 0f00 	cmp.w	fp, #0
 8010db4:	d051      	beq.n	8010e5a <__hexnan+0x132>
 8010db6:	454c      	cmp	r4, r9
 8010db8:	d206      	bcs.n	8010dc8 <__hexnan+0xa0>
 8010dba:	2d07      	cmp	r5, #7
 8010dbc:	dc04      	bgt.n	8010dc8 <__hexnan+0xa0>
 8010dbe:	462a      	mov	r2, r5
 8010dc0:	4649      	mov	r1, r9
 8010dc2:	4620      	mov	r0, r4
 8010dc4:	f7ff ff8a 	bl	8010cdc <L_shift>
 8010dc8:	4544      	cmp	r4, r8
 8010dca:	d936      	bls.n	8010e3a <__hexnan+0x112>
 8010dcc:	f1a8 0204 	sub.w	r2, r8, #4
 8010dd0:	4623      	mov	r3, r4
 8010dd2:	f853 1b04 	ldr.w	r1, [r3], #4
 8010dd6:	f842 1f04 	str.w	r1, [r2, #4]!
 8010dda:	429f      	cmp	r7, r3
 8010ddc:	d2f9      	bcs.n	8010dd2 <__hexnan+0xaa>
 8010dde:	1b3b      	subs	r3, r7, r4
 8010de0:	f023 0303 	bic.w	r3, r3, #3
 8010de4:	3304      	adds	r3, #4
 8010de6:	3401      	adds	r4, #1
 8010de8:	3e03      	subs	r6, #3
 8010dea:	42b4      	cmp	r4, r6
 8010dec:	bf88      	it	hi
 8010dee:	2304      	movhi	r3, #4
 8010df0:	4443      	add	r3, r8
 8010df2:	2200      	movs	r2, #0
 8010df4:	f843 2b04 	str.w	r2, [r3], #4
 8010df8:	429f      	cmp	r7, r3
 8010dfa:	d2fb      	bcs.n	8010df4 <__hexnan+0xcc>
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	b91b      	cbnz	r3, 8010e08 <__hexnan+0xe0>
 8010e00:	4547      	cmp	r7, r8
 8010e02:	d128      	bne.n	8010e56 <__hexnan+0x12e>
 8010e04:	2301      	movs	r3, #1
 8010e06:	603b      	str	r3, [r7, #0]
 8010e08:	2005      	movs	r0, #5
 8010e0a:	b007      	add	sp, #28
 8010e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e10:	3501      	adds	r5, #1
 8010e12:	2d08      	cmp	r5, #8
 8010e14:	f10b 0b01 	add.w	fp, fp, #1
 8010e18:	dd06      	ble.n	8010e28 <__hexnan+0x100>
 8010e1a:	4544      	cmp	r4, r8
 8010e1c:	d9c1      	bls.n	8010da2 <__hexnan+0x7a>
 8010e1e:	2300      	movs	r3, #0
 8010e20:	f844 3c04 	str.w	r3, [r4, #-4]
 8010e24:	2501      	movs	r5, #1
 8010e26:	3c04      	subs	r4, #4
 8010e28:	6822      	ldr	r2, [r4, #0]
 8010e2a:	f000 000f 	and.w	r0, r0, #15
 8010e2e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010e32:	6020      	str	r0, [r4, #0]
 8010e34:	e7b5      	b.n	8010da2 <__hexnan+0x7a>
 8010e36:	2508      	movs	r5, #8
 8010e38:	e7b3      	b.n	8010da2 <__hexnan+0x7a>
 8010e3a:	9b01      	ldr	r3, [sp, #4]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d0dd      	beq.n	8010dfc <__hexnan+0xd4>
 8010e40:	f1c3 0320 	rsb	r3, r3, #32
 8010e44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010e48:	40da      	lsrs	r2, r3
 8010e4a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010e4e:	4013      	ands	r3, r2
 8010e50:	f846 3c04 	str.w	r3, [r6, #-4]
 8010e54:	e7d2      	b.n	8010dfc <__hexnan+0xd4>
 8010e56:	3f04      	subs	r7, #4
 8010e58:	e7d0      	b.n	8010dfc <__hexnan+0xd4>
 8010e5a:	2004      	movs	r0, #4
 8010e5c:	e7d5      	b.n	8010e0a <__hexnan+0xe2>

08010e5e <__ascii_mbtowc>:
 8010e5e:	b082      	sub	sp, #8
 8010e60:	b901      	cbnz	r1, 8010e64 <__ascii_mbtowc+0x6>
 8010e62:	a901      	add	r1, sp, #4
 8010e64:	b142      	cbz	r2, 8010e78 <__ascii_mbtowc+0x1a>
 8010e66:	b14b      	cbz	r3, 8010e7c <__ascii_mbtowc+0x1e>
 8010e68:	7813      	ldrb	r3, [r2, #0]
 8010e6a:	600b      	str	r3, [r1, #0]
 8010e6c:	7812      	ldrb	r2, [r2, #0]
 8010e6e:	1e10      	subs	r0, r2, #0
 8010e70:	bf18      	it	ne
 8010e72:	2001      	movne	r0, #1
 8010e74:	b002      	add	sp, #8
 8010e76:	4770      	bx	lr
 8010e78:	4610      	mov	r0, r2
 8010e7a:	e7fb      	b.n	8010e74 <__ascii_mbtowc+0x16>
 8010e7c:	f06f 0001 	mvn.w	r0, #1
 8010e80:	e7f8      	b.n	8010e74 <__ascii_mbtowc+0x16>

08010e82 <_realloc_r>:
 8010e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e86:	4680      	mov	r8, r0
 8010e88:	4615      	mov	r5, r2
 8010e8a:	460c      	mov	r4, r1
 8010e8c:	b921      	cbnz	r1, 8010e98 <_realloc_r+0x16>
 8010e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e92:	4611      	mov	r1, r2
 8010e94:	f7fd be88 	b.w	800eba8 <_malloc_r>
 8010e98:	b92a      	cbnz	r2, 8010ea6 <_realloc_r+0x24>
 8010e9a:	f7fd fe11 	bl	800eac0 <_free_r>
 8010e9e:	2400      	movs	r4, #0
 8010ea0:	4620      	mov	r0, r4
 8010ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ea6:	f000 f840 	bl	8010f2a <_malloc_usable_size_r>
 8010eaa:	4285      	cmp	r5, r0
 8010eac:	4606      	mov	r6, r0
 8010eae:	d802      	bhi.n	8010eb6 <_realloc_r+0x34>
 8010eb0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010eb4:	d8f4      	bhi.n	8010ea0 <_realloc_r+0x1e>
 8010eb6:	4629      	mov	r1, r5
 8010eb8:	4640      	mov	r0, r8
 8010eba:	f7fd fe75 	bl	800eba8 <_malloc_r>
 8010ebe:	4607      	mov	r7, r0
 8010ec0:	2800      	cmp	r0, #0
 8010ec2:	d0ec      	beq.n	8010e9e <_realloc_r+0x1c>
 8010ec4:	42b5      	cmp	r5, r6
 8010ec6:	462a      	mov	r2, r5
 8010ec8:	4621      	mov	r1, r4
 8010eca:	bf28      	it	cs
 8010ecc:	4632      	movcs	r2, r6
 8010ece:	f7fc ff96 	bl	800ddfe <memcpy>
 8010ed2:	4621      	mov	r1, r4
 8010ed4:	4640      	mov	r0, r8
 8010ed6:	f7fd fdf3 	bl	800eac0 <_free_r>
 8010eda:	463c      	mov	r4, r7
 8010edc:	e7e0      	b.n	8010ea0 <_realloc_r+0x1e>

08010ede <__ascii_wctomb>:
 8010ede:	4603      	mov	r3, r0
 8010ee0:	4608      	mov	r0, r1
 8010ee2:	b141      	cbz	r1, 8010ef6 <__ascii_wctomb+0x18>
 8010ee4:	2aff      	cmp	r2, #255	@ 0xff
 8010ee6:	d904      	bls.n	8010ef2 <__ascii_wctomb+0x14>
 8010ee8:	228a      	movs	r2, #138	@ 0x8a
 8010eea:	601a      	str	r2, [r3, #0]
 8010eec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010ef0:	4770      	bx	lr
 8010ef2:	700a      	strb	r2, [r1, #0]
 8010ef4:	2001      	movs	r0, #1
 8010ef6:	4770      	bx	lr

08010ef8 <fiprintf>:
 8010ef8:	b40e      	push	{r1, r2, r3}
 8010efa:	b503      	push	{r0, r1, lr}
 8010efc:	4601      	mov	r1, r0
 8010efe:	ab03      	add	r3, sp, #12
 8010f00:	4805      	ldr	r0, [pc, #20]	@ (8010f18 <fiprintf+0x20>)
 8010f02:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f06:	6800      	ldr	r0, [r0, #0]
 8010f08:	9301      	str	r3, [sp, #4]
 8010f0a:	f000 f83f 	bl	8010f8c <_vfiprintf_r>
 8010f0e:	b002      	add	sp, #8
 8010f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f14:	b003      	add	sp, #12
 8010f16:	4770      	bx	lr
 8010f18:	20000030 	.word	0x20000030

08010f1c <abort>:
 8010f1c:	b508      	push	{r3, lr}
 8010f1e:	2006      	movs	r0, #6
 8010f20:	f000 fa08 	bl	8011334 <raise>
 8010f24:	2001      	movs	r0, #1
 8010f26:	f7f2 ffc9 	bl	8003ebc <_exit>

08010f2a <_malloc_usable_size_r>:
 8010f2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f2e:	1f18      	subs	r0, r3, #4
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	bfbc      	itt	lt
 8010f34:	580b      	ldrlt	r3, [r1, r0]
 8010f36:	18c0      	addlt	r0, r0, r3
 8010f38:	4770      	bx	lr

08010f3a <__sfputc_r>:
 8010f3a:	6893      	ldr	r3, [r2, #8]
 8010f3c:	3b01      	subs	r3, #1
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	b410      	push	{r4}
 8010f42:	6093      	str	r3, [r2, #8]
 8010f44:	da08      	bge.n	8010f58 <__sfputc_r+0x1e>
 8010f46:	6994      	ldr	r4, [r2, #24]
 8010f48:	42a3      	cmp	r3, r4
 8010f4a:	db01      	blt.n	8010f50 <__sfputc_r+0x16>
 8010f4c:	290a      	cmp	r1, #10
 8010f4e:	d103      	bne.n	8010f58 <__sfputc_r+0x1e>
 8010f50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f54:	f000 b932 	b.w	80111bc <__swbuf_r>
 8010f58:	6813      	ldr	r3, [r2, #0]
 8010f5a:	1c58      	adds	r0, r3, #1
 8010f5c:	6010      	str	r0, [r2, #0]
 8010f5e:	7019      	strb	r1, [r3, #0]
 8010f60:	4608      	mov	r0, r1
 8010f62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f66:	4770      	bx	lr

08010f68 <__sfputs_r>:
 8010f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f6a:	4606      	mov	r6, r0
 8010f6c:	460f      	mov	r7, r1
 8010f6e:	4614      	mov	r4, r2
 8010f70:	18d5      	adds	r5, r2, r3
 8010f72:	42ac      	cmp	r4, r5
 8010f74:	d101      	bne.n	8010f7a <__sfputs_r+0x12>
 8010f76:	2000      	movs	r0, #0
 8010f78:	e007      	b.n	8010f8a <__sfputs_r+0x22>
 8010f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f7e:	463a      	mov	r2, r7
 8010f80:	4630      	mov	r0, r6
 8010f82:	f7ff ffda 	bl	8010f3a <__sfputc_r>
 8010f86:	1c43      	adds	r3, r0, #1
 8010f88:	d1f3      	bne.n	8010f72 <__sfputs_r+0xa>
 8010f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010f8c <_vfiprintf_r>:
 8010f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f90:	460d      	mov	r5, r1
 8010f92:	b09d      	sub	sp, #116	@ 0x74
 8010f94:	4614      	mov	r4, r2
 8010f96:	4698      	mov	r8, r3
 8010f98:	4606      	mov	r6, r0
 8010f9a:	b118      	cbz	r0, 8010fa4 <_vfiprintf_r+0x18>
 8010f9c:	6a03      	ldr	r3, [r0, #32]
 8010f9e:	b90b      	cbnz	r3, 8010fa4 <_vfiprintf_r+0x18>
 8010fa0:	f7fc fda4 	bl	800daec <__sinit>
 8010fa4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010fa6:	07d9      	lsls	r1, r3, #31
 8010fa8:	d405      	bmi.n	8010fb6 <_vfiprintf_r+0x2a>
 8010faa:	89ab      	ldrh	r3, [r5, #12]
 8010fac:	059a      	lsls	r2, r3, #22
 8010fae:	d402      	bmi.n	8010fb6 <_vfiprintf_r+0x2a>
 8010fb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010fb2:	f7fc ff22 	bl	800ddfa <__retarget_lock_acquire_recursive>
 8010fb6:	89ab      	ldrh	r3, [r5, #12]
 8010fb8:	071b      	lsls	r3, r3, #28
 8010fba:	d501      	bpl.n	8010fc0 <_vfiprintf_r+0x34>
 8010fbc:	692b      	ldr	r3, [r5, #16]
 8010fbe:	b99b      	cbnz	r3, 8010fe8 <_vfiprintf_r+0x5c>
 8010fc0:	4629      	mov	r1, r5
 8010fc2:	4630      	mov	r0, r6
 8010fc4:	f000 f938 	bl	8011238 <__swsetup_r>
 8010fc8:	b170      	cbz	r0, 8010fe8 <_vfiprintf_r+0x5c>
 8010fca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010fcc:	07dc      	lsls	r4, r3, #31
 8010fce:	d504      	bpl.n	8010fda <_vfiprintf_r+0x4e>
 8010fd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010fd4:	b01d      	add	sp, #116	@ 0x74
 8010fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fda:	89ab      	ldrh	r3, [r5, #12]
 8010fdc:	0598      	lsls	r0, r3, #22
 8010fde:	d4f7      	bmi.n	8010fd0 <_vfiprintf_r+0x44>
 8010fe0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010fe2:	f7fc ff0b 	bl	800ddfc <__retarget_lock_release_recursive>
 8010fe6:	e7f3      	b.n	8010fd0 <_vfiprintf_r+0x44>
 8010fe8:	2300      	movs	r3, #0
 8010fea:	9309      	str	r3, [sp, #36]	@ 0x24
 8010fec:	2320      	movs	r3, #32
 8010fee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010ff2:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ff6:	2330      	movs	r3, #48	@ 0x30
 8010ff8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80111a8 <_vfiprintf_r+0x21c>
 8010ffc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011000:	f04f 0901 	mov.w	r9, #1
 8011004:	4623      	mov	r3, r4
 8011006:	469a      	mov	sl, r3
 8011008:	f813 2b01 	ldrb.w	r2, [r3], #1
 801100c:	b10a      	cbz	r2, 8011012 <_vfiprintf_r+0x86>
 801100e:	2a25      	cmp	r2, #37	@ 0x25
 8011010:	d1f9      	bne.n	8011006 <_vfiprintf_r+0x7a>
 8011012:	ebba 0b04 	subs.w	fp, sl, r4
 8011016:	d00b      	beq.n	8011030 <_vfiprintf_r+0xa4>
 8011018:	465b      	mov	r3, fp
 801101a:	4622      	mov	r2, r4
 801101c:	4629      	mov	r1, r5
 801101e:	4630      	mov	r0, r6
 8011020:	f7ff ffa2 	bl	8010f68 <__sfputs_r>
 8011024:	3001      	adds	r0, #1
 8011026:	f000 80a7 	beq.w	8011178 <_vfiprintf_r+0x1ec>
 801102a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801102c:	445a      	add	r2, fp
 801102e:	9209      	str	r2, [sp, #36]	@ 0x24
 8011030:	f89a 3000 	ldrb.w	r3, [sl]
 8011034:	2b00      	cmp	r3, #0
 8011036:	f000 809f 	beq.w	8011178 <_vfiprintf_r+0x1ec>
 801103a:	2300      	movs	r3, #0
 801103c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011040:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011044:	f10a 0a01 	add.w	sl, sl, #1
 8011048:	9304      	str	r3, [sp, #16]
 801104a:	9307      	str	r3, [sp, #28]
 801104c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011050:	931a      	str	r3, [sp, #104]	@ 0x68
 8011052:	4654      	mov	r4, sl
 8011054:	2205      	movs	r2, #5
 8011056:	f814 1b01 	ldrb.w	r1, [r4], #1
 801105a:	4853      	ldr	r0, [pc, #332]	@ (80111a8 <_vfiprintf_r+0x21c>)
 801105c:	f7ef f8c0 	bl	80001e0 <memchr>
 8011060:	9a04      	ldr	r2, [sp, #16]
 8011062:	b9d8      	cbnz	r0, 801109c <_vfiprintf_r+0x110>
 8011064:	06d1      	lsls	r1, r2, #27
 8011066:	bf44      	itt	mi
 8011068:	2320      	movmi	r3, #32
 801106a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801106e:	0713      	lsls	r3, r2, #28
 8011070:	bf44      	itt	mi
 8011072:	232b      	movmi	r3, #43	@ 0x2b
 8011074:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011078:	f89a 3000 	ldrb.w	r3, [sl]
 801107c:	2b2a      	cmp	r3, #42	@ 0x2a
 801107e:	d015      	beq.n	80110ac <_vfiprintf_r+0x120>
 8011080:	9a07      	ldr	r2, [sp, #28]
 8011082:	4654      	mov	r4, sl
 8011084:	2000      	movs	r0, #0
 8011086:	f04f 0c0a 	mov.w	ip, #10
 801108a:	4621      	mov	r1, r4
 801108c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011090:	3b30      	subs	r3, #48	@ 0x30
 8011092:	2b09      	cmp	r3, #9
 8011094:	d94b      	bls.n	801112e <_vfiprintf_r+0x1a2>
 8011096:	b1b0      	cbz	r0, 80110c6 <_vfiprintf_r+0x13a>
 8011098:	9207      	str	r2, [sp, #28]
 801109a:	e014      	b.n	80110c6 <_vfiprintf_r+0x13a>
 801109c:	eba0 0308 	sub.w	r3, r0, r8
 80110a0:	fa09 f303 	lsl.w	r3, r9, r3
 80110a4:	4313      	orrs	r3, r2
 80110a6:	9304      	str	r3, [sp, #16]
 80110a8:	46a2      	mov	sl, r4
 80110aa:	e7d2      	b.n	8011052 <_vfiprintf_r+0xc6>
 80110ac:	9b03      	ldr	r3, [sp, #12]
 80110ae:	1d19      	adds	r1, r3, #4
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	9103      	str	r1, [sp, #12]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	bfbb      	ittet	lt
 80110b8:	425b      	neglt	r3, r3
 80110ba:	f042 0202 	orrlt.w	r2, r2, #2
 80110be:	9307      	strge	r3, [sp, #28]
 80110c0:	9307      	strlt	r3, [sp, #28]
 80110c2:	bfb8      	it	lt
 80110c4:	9204      	strlt	r2, [sp, #16]
 80110c6:	7823      	ldrb	r3, [r4, #0]
 80110c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80110ca:	d10a      	bne.n	80110e2 <_vfiprintf_r+0x156>
 80110cc:	7863      	ldrb	r3, [r4, #1]
 80110ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80110d0:	d132      	bne.n	8011138 <_vfiprintf_r+0x1ac>
 80110d2:	9b03      	ldr	r3, [sp, #12]
 80110d4:	1d1a      	adds	r2, r3, #4
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	9203      	str	r2, [sp, #12]
 80110da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80110de:	3402      	adds	r4, #2
 80110e0:	9305      	str	r3, [sp, #20]
 80110e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80111b8 <_vfiprintf_r+0x22c>
 80110e6:	7821      	ldrb	r1, [r4, #0]
 80110e8:	2203      	movs	r2, #3
 80110ea:	4650      	mov	r0, sl
 80110ec:	f7ef f878 	bl	80001e0 <memchr>
 80110f0:	b138      	cbz	r0, 8011102 <_vfiprintf_r+0x176>
 80110f2:	9b04      	ldr	r3, [sp, #16]
 80110f4:	eba0 000a 	sub.w	r0, r0, sl
 80110f8:	2240      	movs	r2, #64	@ 0x40
 80110fa:	4082      	lsls	r2, r0
 80110fc:	4313      	orrs	r3, r2
 80110fe:	3401      	adds	r4, #1
 8011100:	9304      	str	r3, [sp, #16]
 8011102:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011106:	4829      	ldr	r0, [pc, #164]	@ (80111ac <_vfiprintf_r+0x220>)
 8011108:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801110c:	2206      	movs	r2, #6
 801110e:	f7ef f867 	bl	80001e0 <memchr>
 8011112:	2800      	cmp	r0, #0
 8011114:	d03f      	beq.n	8011196 <_vfiprintf_r+0x20a>
 8011116:	4b26      	ldr	r3, [pc, #152]	@ (80111b0 <_vfiprintf_r+0x224>)
 8011118:	bb1b      	cbnz	r3, 8011162 <_vfiprintf_r+0x1d6>
 801111a:	9b03      	ldr	r3, [sp, #12]
 801111c:	3307      	adds	r3, #7
 801111e:	f023 0307 	bic.w	r3, r3, #7
 8011122:	3308      	adds	r3, #8
 8011124:	9303      	str	r3, [sp, #12]
 8011126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011128:	443b      	add	r3, r7
 801112a:	9309      	str	r3, [sp, #36]	@ 0x24
 801112c:	e76a      	b.n	8011004 <_vfiprintf_r+0x78>
 801112e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011132:	460c      	mov	r4, r1
 8011134:	2001      	movs	r0, #1
 8011136:	e7a8      	b.n	801108a <_vfiprintf_r+0xfe>
 8011138:	2300      	movs	r3, #0
 801113a:	3401      	adds	r4, #1
 801113c:	9305      	str	r3, [sp, #20]
 801113e:	4619      	mov	r1, r3
 8011140:	f04f 0c0a 	mov.w	ip, #10
 8011144:	4620      	mov	r0, r4
 8011146:	f810 2b01 	ldrb.w	r2, [r0], #1
 801114a:	3a30      	subs	r2, #48	@ 0x30
 801114c:	2a09      	cmp	r2, #9
 801114e:	d903      	bls.n	8011158 <_vfiprintf_r+0x1cc>
 8011150:	2b00      	cmp	r3, #0
 8011152:	d0c6      	beq.n	80110e2 <_vfiprintf_r+0x156>
 8011154:	9105      	str	r1, [sp, #20]
 8011156:	e7c4      	b.n	80110e2 <_vfiprintf_r+0x156>
 8011158:	fb0c 2101 	mla	r1, ip, r1, r2
 801115c:	4604      	mov	r4, r0
 801115e:	2301      	movs	r3, #1
 8011160:	e7f0      	b.n	8011144 <_vfiprintf_r+0x1b8>
 8011162:	ab03      	add	r3, sp, #12
 8011164:	9300      	str	r3, [sp, #0]
 8011166:	462a      	mov	r2, r5
 8011168:	4b12      	ldr	r3, [pc, #72]	@ (80111b4 <_vfiprintf_r+0x228>)
 801116a:	a904      	add	r1, sp, #16
 801116c:	4630      	mov	r0, r6
 801116e:	f7fb fe65 	bl	800ce3c <_printf_float>
 8011172:	4607      	mov	r7, r0
 8011174:	1c78      	adds	r0, r7, #1
 8011176:	d1d6      	bne.n	8011126 <_vfiprintf_r+0x19a>
 8011178:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801117a:	07d9      	lsls	r1, r3, #31
 801117c:	d405      	bmi.n	801118a <_vfiprintf_r+0x1fe>
 801117e:	89ab      	ldrh	r3, [r5, #12]
 8011180:	059a      	lsls	r2, r3, #22
 8011182:	d402      	bmi.n	801118a <_vfiprintf_r+0x1fe>
 8011184:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011186:	f7fc fe39 	bl	800ddfc <__retarget_lock_release_recursive>
 801118a:	89ab      	ldrh	r3, [r5, #12]
 801118c:	065b      	lsls	r3, r3, #25
 801118e:	f53f af1f 	bmi.w	8010fd0 <_vfiprintf_r+0x44>
 8011192:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011194:	e71e      	b.n	8010fd4 <_vfiprintf_r+0x48>
 8011196:	ab03      	add	r3, sp, #12
 8011198:	9300      	str	r3, [sp, #0]
 801119a:	462a      	mov	r2, r5
 801119c:	4b05      	ldr	r3, [pc, #20]	@ (80111b4 <_vfiprintf_r+0x228>)
 801119e:	a904      	add	r1, sp, #16
 80111a0:	4630      	mov	r0, r6
 80111a2:	f7fc f8e3 	bl	800d36c <_printf_i>
 80111a6:	e7e4      	b.n	8011172 <_vfiprintf_r+0x1e6>
 80111a8:	08013e79 	.word	0x08013e79
 80111ac:	08013e83 	.word	0x08013e83
 80111b0:	0800ce3d 	.word	0x0800ce3d
 80111b4:	08010f69 	.word	0x08010f69
 80111b8:	08013e7f 	.word	0x08013e7f

080111bc <__swbuf_r>:
 80111bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111be:	460e      	mov	r6, r1
 80111c0:	4614      	mov	r4, r2
 80111c2:	4605      	mov	r5, r0
 80111c4:	b118      	cbz	r0, 80111ce <__swbuf_r+0x12>
 80111c6:	6a03      	ldr	r3, [r0, #32]
 80111c8:	b90b      	cbnz	r3, 80111ce <__swbuf_r+0x12>
 80111ca:	f7fc fc8f 	bl	800daec <__sinit>
 80111ce:	69a3      	ldr	r3, [r4, #24]
 80111d0:	60a3      	str	r3, [r4, #8]
 80111d2:	89a3      	ldrh	r3, [r4, #12]
 80111d4:	071a      	lsls	r2, r3, #28
 80111d6:	d501      	bpl.n	80111dc <__swbuf_r+0x20>
 80111d8:	6923      	ldr	r3, [r4, #16]
 80111da:	b943      	cbnz	r3, 80111ee <__swbuf_r+0x32>
 80111dc:	4621      	mov	r1, r4
 80111de:	4628      	mov	r0, r5
 80111e0:	f000 f82a 	bl	8011238 <__swsetup_r>
 80111e4:	b118      	cbz	r0, 80111ee <__swbuf_r+0x32>
 80111e6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80111ea:	4638      	mov	r0, r7
 80111ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111ee:	6823      	ldr	r3, [r4, #0]
 80111f0:	6922      	ldr	r2, [r4, #16]
 80111f2:	1a98      	subs	r0, r3, r2
 80111f4:	6963      	ldr	r3, [r4, #20]
 80111f6:	b2f6      	uxtb	r6, r6
 80111f8:	4283      	cmp	r3, r0
 80111fa:	4637      	mov	r7, r6
 80111fc:	dc05      	bgt.n	801120a <__swbuf_r+0x4e>
 80111fe:	4621      	mov	r1, r4
 8011200:	4628      	mov	r0, r5
 8011202:	f7ff fa6f 	bl	80106e4 <_fflush_r>
 8011206:	2800      	cmp	r0, #0
 8011208:	d1ed      	bne.n	80111e6 <__swbuf_r+0x2a>
 801120a:	68a3      	ldr	r3, [r4, #8]
 801120c:	3b01      	subs	r3, #1
 801120e:	60a3      	str	r3, [r4, #8]
 8011210:	6823      	ldr	r3, [r4, #0]
 8011212:	1c5a      	adds	r2, r3, #1
 8011214:	6022      	str	r2, [r4, #0]
 8011216:	701e      	strb	r6, [r3, #0]
 8011218:	6962      	ldr	r2, [r4, #20]
 801121a:	1c43      	adds	r3, r0, #1
 801121c:	429a      	cmp	r2, r3
 801121e:	d004      	beq.n	801122a <__swbuf_r+0x6e>
 8011220:	89a3      	ldrh	r3, [r4, #12]
 8011222:	07db      	lsls	r3, r3, #31
 8011224:	d5e1      	bpl.n	80111ea <__swbuf_r+0x2e>
 8011226:	2e0a      	cmp	r6, #10
 8011228:	d1df      	bne.n	80111ea <__swbuf_r+0x2e>
 801122a:	4621      	mov	r1, r4
 801122c:	4628      	mov	r0, r5
 801122e:	f7ff fa59 	bl	80106e4 <_fflush_r>
 8011232:	2800      	cmp	r0, #0
 8011234:	d0d9      	beq.n	80111ea <__swbuf_r+0x2e>
 8011236:	e7d6      	b.n	80111e6 <__swbuf_r+0x2a>

08011238 <__swsetup_r>:
 8011238:	b538      	push	{r3, r4, r5, lr}
 801123a:	4b29      	ldr	r3, [pc, #164]	@ (80112e0 <__swsetup_r+0xa8>)
 801123c:	4605      	mov	r5, r0
 801123e:	6818      	ldr	r0, [r3, #0]
 8011240:	460c      	mov	r4, r1
 8011242:	b118      	cbz	r0, 801124c <__swsetup_r+0x14>
 8011244:	6a03      	ldr	r3, [r0, #32]
 8011246:	b90b      	cbnz	r3, 801124c <__swsetup_r+0x14>
 8011248:	f7fc fc50 	bl	800daec <__sinit>
 801124c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011250:	0719      	lsls	r1, r3, #28
 8011252:	d422      	bmi.n	801129a <__swsetup_r+0x62>
 8011254:	06da      	lsls	r2, r3, #27
 8011256:	d407      	bmi.n	8011268 <__swsetup_r+0x30>
 8011258:	2209      	movs	r2, #9
 801125a:	602a      	str	r2, [r5, #0]
 801125c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011260:	81a3      	strh	r3, [r4, #12]
 8011262:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011266:	e033      	b.n	80112d0 <__swsetup_r+0x98>
 8011268:	0758      	lsls	r0, r3, #29
 801126a:	d512      	bpl.n	8011292 <__swsetup_r+0x5a>
 801126c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801126e:	b141      	cbz	r1, 8011282 <__swsetup_r+0x4a>
 8011270:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011274:	4299      	cmp	r1, r3
 8011276:	d002      	beq.n	801127e <__swsetup_r+0x46>
 8011278:	4628      	mov	r0, r5
 801127a:	f7fd fc21 	bl	800eac0 <_free_r>
 801127e:	2300      	movs	r3, #0
 8011280:	6363      	str	r3, [r4, #52]	@ 0x34
 8011282:	89a3      	ldrh	r3, [r4, #12]
 8011284:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011288:	81a3      	strh	r3, [r4, #12]
 801128a:	2300      	movs	r3, #0
 801128c:	6063      	str	r3, [r4, #4]
 801128e:	6923      	ldr	r3, [r4, #16]
 8011290:	6023      	str	r3, [r4, #0]
 8011292:	89a3      	ldrh	r3, [r4, #12]
 8011294:	f043 0308 	orr.w	r3, r3, #8
 8011298:	81a3      	strh	r3, [r4, #12]
 801129a:	6923      	ldr	r3, [r4, #16]
 801129c:	b94b      	cbnz	r3, 80112b2 <__swsetup_r+0x7a>
 801129e:	89a3      	ldrh	r3, [r4, #12]
 80112a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80112a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80112a8:	d003      	beq.n	80112b2 <__swsetup_r+0x7a>
 80112aa:	4621      	mov	r1, r4
 80112ac:	4628      	mov	r0, r5
 80112ae:	f000 f883 	bl	80113b8 <__smakebuf_r>
 80112b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112b6:	f013 0201 	ands.w	r2, r3, #1
 80112ba:	d00a      	beq.n	80112d2 <__swsetup_r+0x9a>
 80112bc:	2200      	movs	r2, #0
 80112be:	60a2      	str	r2, [r4, #8]
 80112c0:	6962      	ldr	r2, [r4, #20]
 80112c2:	4252      	negs	r2, r2
 80112c4:	61a2      	str	r2, [r4, #24]
 80112c6:	6922      	ldr	r2, [r4, #16]
 80112c8:	b942      	cbnz	r2, 80112dc <__swsetup_r+0xa4>
 80112ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80112ce:	d1c5      	bne.n	801125c <__swsetup_r+0x24>
 80112d0:	bd38      	pop	{r3, r4, r5, pc}
 80112d2:	0799      	lsls	r1, r3, #30
 80112d4:	bf58      	it	pl
 80112d6:	6962      	ldrpl	r2, [r4, #20]
 80112d8:	60a2      	str	r2, [r4, #8]
 80112da:	e7f4      	b.n	80112c6 <__swsetup_r+0x8e>
 80112dc:	2000      	movs	r0, #0
 80112de:	e7f7      	b.n	80112d0 <__swsetup_r+0x98>
 80112e0:	20000030 	.word	0x20000030

080112e4 <_raise_r>:
 80112e4:	291f      	cmp	r1, #31
 80112e6:	b538      	push	{r3, r4, r5, lr}
 80112e8:	4605      	mov	r5, r0
 80112ea:	460c      	mov	r4, r1
 80112ec:	d904      	bls.n	80112f8 <_raise_r+0x14>
 80112ee:	2316      	movs	r3, #22
 80112f0:	6003      	str	r3, [r0, #0]
 80112f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80112f6:	bd38      	pop	{r3, r4, r5, pc}
 80112f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80112fa:	b112      	cbz	r2, 8011302 <_raise_r+0x1e>
 80112fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011300:	b94b      	cbnz	r3, 8011316 <_raise_r+0x32>
 8011302:	4628      	mov	r0, r5
 8011304:	f000 f830 	bl	8011368 <_getpid_r>
 8011308:	4622      	mov	r2, r4
 801130a:	4601      	mov	r1, r0
 801130c:	4628      	mov	r0, r5
 801130e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011312:	f000 b817 	b.w	8011344 <_kill_r>
 8011316:	2b01      	cmp	r3, #1
 8011318:	d00a      	beq.n	8011330 <_raise_r+0x4c>
 801131a:	1c59      	adds	r1, r3, #1
 801131c:	d103      	bne.n	8011326 <_raise_r+0x42>
 801131e:	2316      	movs	r3, #22
 8011320:	6003      	str	r3, [r0, #0]
 8011322:	2001      	movs	r0, #1
 8011324:	e7e7      	b.n	80112f6 <_raise_r+0x12>
 8011326:	2100      	movs	r1, #0
 8011328:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801132c:	4620      	mov	r0, r4
 801132e:	4798      	blx	r3
 8011330:	2000      	movs	r0, #0
 8011332:	e7e0      	b.n	80112f6 <_raise_r+0x12>

08011334 <raise>:
 8011334:	4b02      	ldr	r3, [pc, #8]	@ (8011340 <raise+0xc>)
 8011336:	4601      	mov	r1, r0
 8011338:	6818      	ldr	r0, [r3, #0]
 801133a:	f7ff bfd3 	b.w	80112e4 <_raise_r>
 801133e:	bf00      	nop
 8011340:	20000030 	.word	0x20000030

08011344 <_kill_r>:
 8011344:	b538      	push	{r3, r4, r5, lr}
 8011346:	4d07      	ldr	r5, [pc, #28]	@ (8011364 <_kill_r+0x20>)
 8011348:	2300      	movs	r3, #0
 801134a:	4604      	mov	r4, r0
 801134c:	4608      	mov	r0, r1
 801134e:	4611      	mov	r1, r2
 8011350:	602b      	str	r3, [r5, #0]
 8011352:	f7f2 fda3 	bl	8003e9c <_kill>
 8011356:	1c43      	adds	r3, r0, #1
 8011358:	d102      	bne.n	8011360 <_kill_r+0x1c>
 801135a:	682b      	ldr	r3, [r5, #0]
 801135c:	b103      	cbz	r3, 8011360 <_kill_r+0x1c>
 801135e:	6023      	str	r3, [r4, #0]
 8011360:	bd38      	pop	{r3, r4, r5, pc}
 8011362:	bf00      	nop
 8011364:	200035fc 	.word	0x200035fc

08011368 <_getpid_r>:
 8011368:	f7f2 bd90 	b.w	8003e8c <_getpid>

0801136c <__swhatbuf_r>:
 801136c:	b570      	push	{r4, r5, r6, lr}
 801136e:	460c      	mov	r4, r1
 8011370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011374:	2900      	cmp	r1, #0
 8011376:	b096      	sub	sp, #88	@ 0x58
 8011378:	4615      	mov	r5, r2
 801137a:	461e      	mov	r6, r3
 801137c:	da0d      	bge.n	801139a <__swhatbuf_r+0x2e>
 801137e:	89a3      	ldrh	r3, [r4, #12]
 8011380:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011384:	f04f 0100 	mov.w	r1, #0
 8011388:	bf14      	ite	ne
 801138a:	2340      	movne	r3, #64	@ 0x40
 801138c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011390:	2000      	movs	r0, #0
 8011392:	6031      	str	r1, [r6, #0]
 8011394:	602b      	str	r3, [r5, #0]
 8011396:	b016      	add	sp, #88	@ 0x58
 8011398:	bd70      	pop	{r4, r5, r6, pc}
 801139a:	466a      	mov	r2, sp
 801139c:	f000 f848 	bl	8011430 <_fstat_r>
 80113a0:	2800      	cmp	r0, #0
 80113a2:	dbec      	blt.n	801137e <__swhatbuf_r+0x12>
 80113a4:	9901      	ldr	r1, [sp, #4]
 80113a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80113aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80113ae:	4259      	negs	r1, r3
 80113b0:	4159      	adcs	r1, r3
 80113b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80113b6:	e7eb      	b.n	8011390 <__swhatbuf_r+0x24>

080113b8 <__smakebuf_r>:
 80113b8:	898b      	ldrh	r3, [r1, #12]
 80113ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80113bc:	079d      	lsls	r5, r3, #30
 80113be:	4606      	mov	r6, r0
 80113c0:	460c      	mov	r4, r1
 80113c2:	d507      	bpl.n	80113d4 <__smakebuf_r+0x1c>
 80113c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80113c8:	6023      	str	r3, [r4, #0]
 80113ca:	6123      	str	r3, [r4, #16]
 80113cc:	2301      	movs	r3, #1
 80113ce:	6163      	str	r3, [r4, #20]
 80113d0:	b003      	add	sp, #12
 80113d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113d4:	ab01      	add	r3, sp, #4
 80113d6:	466a      	mov	r2, sp
 80113d8:	f7ff ffc8 	bl	801136c <__swhatbuf_r>
 80113dc:	9f00      	ldr	r7, [sp, #0]
 80113de:	4605      	mov	r5, r0
 80113e0:	4639      	mov	r1, r7
 80113e2:	4630      	mov	r0, r6
 80113e4:	f7fd fbe0 	bl	800eba8 <_malloc_r>
 80113e8:	b948      	cbnz	r0, 80113fe <__smakebuf_r+0x46>
 80113ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113ee:	059a      	lsls	r2, r3, #22
 80113f0:	d4ee      	bmi.n	80113d0 <__smakebuf_r+0x18>
 80113f2:	f023 0303 	bic.w	r3, r3, #3
 80113f6:	f043 0302 	orr.w	r3, r3, #2
 80113fa:	81a3      	strh	r3, [r4, #12]
 80113fc:	e7e2      	b.n	80113c4 <__smakebuf_r+0xc>
 80113fe:	89a3      	ldrh	r3, [r4, #12]
 8011400:	6020      	str	r0, [r4, #0]
 8011402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011406:	81a3      	strh	r3, [r4, #12]
 8011408:	9b01      	ldr	r3, [sp, #4]
 801140a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801140e:	b15b      	cbz	r3, 8011428 <__smakebuf_r+0x70>
 8011410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011414:	4630      	mov	r0, r6
 8011416:	f000 f81d 	bl	8011454 <_isatty_r>
 801141a:	b128      	cbz	r0, 8011428 <__smakebuf_r+0x70>
 801141c:	89a3      	ldrh	r3, [r4, #12]
 801141e:	f023 0303 	bic.w	r3, r3, #3
 8011422:	f043 0301 	orr.w	r3, r3, #1
 8011426:	81a3      	strh	r3, [r4, #12]
 8011428:	89a3      	ldrh	r3, [r4, #12]
 801142a:	431d      	orrs	r5, r3
 801142c:	81a5      	strh	r5, [r4, #12]
 801142e:	e7cf      	b.n	80113d0 <__smakebuf_r+0x18>

08011430 <_fstat_r>:
 8011430:	b538      	push	{r3, r4, r5, lr}
 8011432:	4d07      	ldr	r5, [pc, #28]	@ (8011450 <_fstat_r+0x20>)
 8011434:	2300      	movs	r3, #0
 8011436:	4604      	mov	r4, r0
 8011438:	4608      	mov	r0, r1
 801143a:	4611      	mov	r1, r2
 801143c:	602b      	str	r3, [r5, #0]
 801143e:	f7f2 fd8d 	bl	8003f5c <_fstat>
 8011442:	1c43      	adds	r3, r0, #1
 8011444:	d102      	bne.n	801144c <_fstat_r+0x1c>
 8011446:	682b      	ldr	r3, [r5, #0]
 8011448:	b103      	cbz	r3, 801144c <_fstat_r+0x1c>
 801144a:	6023      	str	r3, [r4, #0]
 801144c:	bd38      	pop	{r3, r4, r5, pc}
 801144e:	bf00      	nop
 8011450:	200035fc 	.word	0x200035fc

08011454 <_isatty_r>:
 8011454:	b538      	push	{r3, r4, r5, lr}
 8011456:	4d06      	ldr	r5, [pc, #24]	@ (8011470 <_isatty_r+0x1c>)
 8011458:	2300      	movs	r3, #0
 801145a:	4604      	mov	r4, r0
 801145c:	4608      	mov	r0, r1
 801145e:	602b      	str	r3, [r5, #0]
 8011460:	f7f2 fd8c 	bl	8003f7c <_isatty>
 8011464:	1c43      	adds	r3, r0, #1
 8011466:	d102      	bne.n	801146e <_isatty_r+0x1a>
 8011468:	682b      	ldr	r3, [r5, #0]
 801146a:	b103      	cbz	r3, 801146e <_isatty_r+0x1a>
 801146c:	6023      	str	r3, [r4, #0]
 801146e:	bd38      	pop	{r3, r4, r5, pc}
 8011470:	200035fc 	.word	0x200035fc

08011474 <pow>:
 8011474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011476:	ed2d 8b02 	vpush	{d8}
 801147a:	eeb0 8a40 	vmov.f32	s16, s0
 801147e:	eef0 8a60 	vmov.f32	s17, s1
 8011482:	ec55 4b11 	vmov	r4, r5, d1
 8011486:	f000 f873 	bl	8011570 <__ieee754_pow>
 801148a:	4622      	mov	r2, r4
 801148c:	462b      	mov	r3, r5
 801148e:	4620      	mov	r0, r4
 8011490:	4629      	mov	r1, r5
 8011492:	ec57 6b10 	vmov	r6, r7, d0
 8011496:	f7ef fb51 	bl	8000b3c <__aeabi_dcmpun>
 801149a:	2800      	cmp	r0, #0
 801149c:	d13b      	bne.n	8011516 <pow+0xa2>
 801149e:	ec51 0b18 	vmov	r0, r1, d8
 80114a2:	2200      	movs	r2, #0
 80114a4:	2300      	movs	r3, #0
 80114a6:	f7ef fb17 	bl	8000ad8 <__aeabi_dcmpeq>
 80114aa:	b1b8      	cbz	r0, 80114dc <pow+0x68>
 80114ac:	2200      	movs	r2, #0
 80114ae:	2300      	movs	r3, #0
 80114b0:	4620      	mov	r0, r4
 80114b2:	4629      	mov	r1, r5
 80114b4:	f7ef fb10 	bl	8000ad8 <__aeabi_dcmpeq>
 80114b8:	2800      	cmp	r0, #0
 80114ba:	d146      	bne.n	801154a <pow+0xd6>
 80114bc:	ec45 4b10 	vmov	d0, r4, r5
 80114c0:	f000 f848 	bl	8011554 <finite>
 80114c4:	b338      	cbz	r0, 8011516 <pow+0xa2>
 80114c6:	2200      	movs	r2, #0
 80114c8:	2300      	movs	r3, #0
 80114ca:	4620      	mov	r0, r4
 80114cc:	4629      	mov	r1, r5
 80114ce:	f7ef fb0d 	bl	8000aec <__aeabi_dcmplt>
 80114d2:	b300      	cbz	r0, 8011516 <pow+0xa2>
 80114d4:	f7fc fc66 	bl	800dda4 <__errno>
 80114d8:	2322      	movs	r3, #34	@ 0x22
 80114da:	e01b      	b.n	8011514 <pow+0xa0>
 80114dc:	ec47 6b10 	vmov	d0, r6, r7
 80114e0:	f000 f838 	bl	8011554 <finite>
 80114e4:	b9e0      	cbnz	r0, 8011520 <pow+0xac>
 80114e6:	eeb0 0a48 	vmov.f32	s0, s16
 80114ea:	eef0 0a68 	vmov.f32	s1, s17
 80114ee:	f000 f831 	bl	8011554 <finite>
 80114f2:	b1a8      	cbz	r0, 8011520 <pow+0xac>
 80114f4:	ec45 4b10 	vmov	d0, r4, r5
 80114f8:	f000 f82c 	bl	8011554 <finite>
 80114fc:	b180      	cbz	r0, 8011520 <pow+0xac>
 80114fe:	4632      	mov	r2, r6
 8011500:	463b      	mov	r3, r7
 8011502:	4630      	mov	r0, r6
 8011504:	4639      	mov	r1, r7
 8011506:	f7ef fb19 	bl	8000b3c <__aeabi_dcmpun>
 801150a:	2800      	cmp	r0, #0
 801150c:	d0e2      	beq.n	80114d4 <pow+0x60>
 801150e:	f7fc fc49 	bl	800dda4 <__errno>
 8011512:	2321      	movs	r3, #33	@ 0x21
 8011514:	6003      	str	r3, [r0, #0]
 8011516:	ecbd 8b02 	vpop	{d8}
 801151a:	ec47 6b10 	vmov	d0, r6, r7
 801151e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011520:	2200      	movs	r2, #0
 8011522:	2300      	movs	r3, #0
 8011524:	4630      	mov	r0, r6
 8011526:	4639      	mov	r1, r7
 8011528:	f7ef fad6 	bl	8000ad8 <__aeabi_dcmpeq>
 801152c:	2800      	cmp	r0, #0
 801152e:	d0f2      	beq.n	8011516 <pow+0xa2>
 8011530:	eeb0 0a48 	vmov.f32	s0, s16
 8011534:	eef0 0a68 	vmov.f32	s1, s17
 8011538:	f000 f80c 	bl	8011554 <finite>
 801153c:	2800      	cmp	r0, #0
 801153e:	d0ea      	beq.n	8011516 <pow+0xa2>
 8011540:	ec45 4b10 	vmov	d0, r4, r5
 8011544:	f000 f806 	bl	8011554 <finite>
 8011548:	e7c3      	b.n	80114d2 <pow+0x5e>
 801154a:	4f01      	ldr	r7, [pc, #4]	@ (8011550 <pow+0xdc>)
 801154c:	2600      	movs	r6, #0
 801154e:	e7e2      	b.n	8011516 <pow+0xa2>
 8011550:	3ff00000 	.word	0x3ff00000

08011554 <finite>:
 8011554:	b082      	sub	sp, #8
 8011556:	ed8d 0b00 	vstr	d0, [sp]
 801155a:	9801      	ldr	r0, [sp, #4]
 801155c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8011560:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8011564:	0fc0      	lsrs	r0, r0, #31
 8011566:	b002      	add	sp, #8
 8011568:	4770      	bx	lr
 801156a:	0000      	movs	r0, r0
 801156c:	0000      	movs	r0, r0
	...

08011570 <__ieee754_pow>:
 8011570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011574:	b091      	sub	sp, #68	@ 0x44
 8011576:	ed8d 1b00 	vstr	d1, [sp]
 801157a:	e9dd 1900 	ldrd	r1, r9, [sp]
 801157e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8011582:	ea5a 0001 	orrs.w	r0, sl, r1
 8011586:	ec57 6b10 	vmov	r6, r7, d0
 801158a:	d113      	bne.n	80115b4 <__ieee754_pow+0x44>
 801158c:	19b3      	adds	r3, r6, r6
 801158e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8011592:	4152      	adcs	r2, r2
 8011594:	4298      	cmp	r0, r3
 8011596:	4b98      	ldr	r3, [pc, #608]	@ (80117f8 <__ieee754_pow+0x288>)
 8011598:	4193      	sbcs	r3, r2
 801159a:	f080 84ea 	bcs.w	8011f72 <__ieee754_pow+0xa02>
 801159e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80115a2:	4630      	mov	r0, r6
 80115a4:	4639      	mov	r1, r7
 80115a6:	f7ee fe79 	bl	800029c <__adddf3>
 80115aa:	ec41 0b10 	vmov	d0, r0, r1
 80115ae:	b011      	add	sp, #68	@ 0x44
 80115b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115b4:	4a91      	ldr	r2, [pc, #580]	@ (80117fc <__ieee754_pow+0x28c>)
 80115b6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80115ba:	4590      	cmp	r8, r2
 80115bc:	463d      	mov	r5, r7
 80115be:	4633      	mov	r3, r6
 80115c0:	d806      	bhi.n	80115d0 <__ieee754_pow+0x60>
 80115c2:	d101      	bne.n	80115c8 <__ieee754_pow+0x58>
 80115c4:	2e00      	cmp	r6, #0
 80115c6:	d1ea      	bne.n	801159e <__ieee754_pow+0x2e>
 80115c8:	4592      	cmp	sl, r2
 80115ca:	d801      	bhi.n	80115d0 <__ieee754_pow+0x60>
 80115cc:	d10e      	bne.n	80115ec <__ieee754_pow+0x7c>
 80115ce:	b169      	cbz	r1, 80115ec <__ieee754_pow+0x7c>
 80115d0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80115d4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80115d8:	431d      	orrs	r5, r3
 80115da:	d1e0      	bne.n	801159e <__ieee754_pow+0x2e>
 80115dc:	e9dd 3200 	ldrd	r3, r2, [sp]
 80115e0:	18db      	adds	r3, r3, r3
 80115e2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80115e6:	4152      	adcs	r2, r2
 80115e8:	429d      	cmp	r5, r3
 80115ea:	e7d4      	b.n	8011596 <__ieee754_pow+0x26>
 80115ec:	2d00      	cmp	r5, #0
 80115ee:	46c3      	mov	fp, r8
 80115f0:	da3a      	bge.n	8011668 <__ieee754_pow+0xf8>
 80115f2:	4a83      	ldr	r2, [pc, #524]	@ (8011800 <__ieee754_pow+0x290>)
 80115f4:	4592      	cmp	sl, r2
 80115f6:	d84d      	bhi.n	8011694 <__ieee754_pow+0x124>
 80115f8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80115fc:	4592      	cmp	sl, r2
 80115fe:	f240 84c7 	bls.w	8011f90 <__ieee754_pow+0xa20>
 8011602:	ea4f 522a 	mov.w	r2, sl, asr #20
 8011606:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801160a:	2a14      	cmp	r2, #20
 801160c:	dd0f      	ble.n	801162e <__ieee754_pow+0xbe>
 801160e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8011612:	fa21 f402 	lsr.w	r4, r1, r2
 8011616:	fa04 f202 	lsl.w	r2, r4, r2
 801161a:	428a      	cmp	r2, r1
 801161c:	f040 84b8 	bne.w	8011f90 <__ieee754_pow+0xa20>
 8011620:	f004 0401 	and.w	r4, r4, #1
 8011624:	f1c4 0402 	rsb	r4, r4, #2
 8011628:	2900      	cmp	r1, #0
 801162a:	d158      	bne.n	80116de <__ieee754_pow+0x16e>
 801162c:	e00e      	b.n	801164c <__ieee754_pow+0xdc>
 801162e:	2900      	cmp	r1, #0
 8011630:	d154      	bne.n	80116dc <__ieee754_pow+0x16c>
 8011632:	f1c2 0214 	rsb	r2, r2, #20
 8011636:	fa4a f402 	asr.w	r4, sl, r2
 801163a:	fa04 f202 	lsl.w	r2, r4, r2
 801163e:	4552      	cmp	r2, sl
 8011640:	f040 84a3 	bne.w	8011f8a <__ieee754_pow+0xa1a>
 8011644:	f004 0401 	and.w	r4, r4, #1
 8011648:	f1c4 0402 	rsb	r4, r4, #2
 801164c:	4a6d      	ldr	r2, [pc, #436]	@ (8011804 <__ieee754_pow+0x294>)
 801164e:	4592      	cmp	sl, r2
 8011650:	d12e      	bne.n	80116b0 <__ieee754_pow+0x140>
 8011652:	f1b9 0f00 	cmp.w	r9, #0
 8011656:	f280 8494 	bge.w	8011f82 <__ieee754_pow+0xa12>
 801165a:	496a      	ldr	r1, [pc, #424]	@ (8011804 <__ieee754_pow+0x294>)
 801165c:	4632      	mov	r2, r6
 801165e:	463b      	mov	r3, r7
 8011660:	2000      	movs	r0, #0
 8011662:	f7ef f8fb 	bl	800085c <__aeabi_ddiv>
 8011666:	e7a0      	b.n	80115aa <__ieee754_pow+0x3a>
 8011668:	2400      	movs	r4, #0
 801166a:	bbc1      	cbnz	r1, 80116de <__ieee754_pow+0x16e>
 801166c:	4a63      	ldr	r2, [pc, #396]	@ (80117fc <__ieee754_pow+0x28c>)
 801166e:	4592      	cmp	sl, r2
 8011670:	d1ec      	bne.n	801164c <__ieee754_pow+0xdc>
 8011672:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8011676:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 801167a:	431a      	orrs	r2, r3
 801167c:	f000 8479 	beq.w	8011f72 <__ieee754_pow+0xa02>
 8011680:	4b61      	ldr	r3, [pc, #388]	@ (8011808 <__ieee754_pow+0x298>)
 8011682:	4598      	cmp	r8, r3
 8011684:	d908      	bls.n	8011698 <__ieee754_pow+0x128>
 8011686:	f1b9 0f00 	cmp.w	r9, #0
 801168a:	f2c0 8476 	blt.w	8011f7a <__ieee754_pow+0xa0a>
 801168e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011692:	e78a      	b.n	80115aa <__ieee754_pow+0x3a>
 8011694:	2402      	movs	r4, #2
 8011696:	e7e8      	b.n	801166a <__ieee754_pow+0xfa>
 8011698:	f1b9 0f00 	cmp.w	r9, #0
 801169c:	f04f 0000 	mov.w	r0, #0
 80116a0:	f04f 0100 	mov.w	r1, #0
 80116a4:	da81      	bge.n	80115aa <__ieee754_pow+0x3a>
 80116a6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80116aa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80116ae:	e77c      	b.n	80115aa <__ieee754_pow+0x3a>
 80116b0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80116b4:	d106      	bne.n	80116c4 <__ieee754_pow+0x154>
 80116b6:	4632      	mov	r2, r6
 80116b8:	463b      	mov	r3, r7
 80116ba:	4630      	mov	r0, r6
 80116bc:	4639      	mov	r1, r7
 80116be:	f7ee ffa3 	bl	8000608 <__aeabi_dmul>
 80116c2:	e772      	b.n	80115aa <__ieee754_pow+0x3a>
 80116c4:	4a51      	ldr	r2, [pc, #324]	@ (801180c <__ieee754_pow+0x29c>)
 80116c6:	4591      	cmp	r9, r2
 80116c8:	d109      	bne.n	80116de <__ieee754_pow+0x16e>
 80116ca:	2d00      	cmp	r5, #0
 80116cc:	db07      	blt.n	80116de <__ieee754_pow+0x16e>
 80116ce:	ec47 6b10 	vmov	d0, r6, r7
 80116d2:	b011      	add	sp, #68	@ 0x44
 80116d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116d8:	f000 bd52 	b.w	8012180 <__ieee754_sqrt>
 80116dc:	2400      	movs	r4, #0
 80116de:	ec47 6b10 	vmov	d0, r6, r7
 80116e2:	9302      	str	r3, [sp, #8]
 80116e4:	f000 fc88 	bl	8011ff8 <fabs>
 80116e8:	9b02      	ldr	r3, [sp, #8]
 80116ea:	ec51 0b10 	vmov	r0, r1, d0
 80116ee:	bb53      	cbnz	r3, 8011746 <__ieee754_pow+0x1d6>
 80116f0:	4b44      	ldr	r3, [pc, #272]	@ (8011804 <__ieee754_pow+0x294>)
 80116f2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80116f6:	429a      	cmp	r2, r3
 80116f8:	d002      	beq.n	8011700 <__ieee754_pow+0x190>
 80116fa:	f1b8 0f00 	cmp.w	r8, #0
 80116fe:	d122      	bne.n	8011746 <__ieee754_pow+0x1d6>
 8011700:	f1b9 0f00 	cmp.w	r9, #0
 8011704:	da05      	bge.n	8011712 <__ieee754_pow+0x1a2>
 8011706:	4602      	mov	r2, r0
 8011708:	460b      	mov	r3, r1
 801170a:	2000      	movs	r0, #0
 801170c:	493d      	ldr	r1, [pc, #244]	@ (8011804 <__ieee754_pow+0x294>)
 801170e:	f7ef f8a5 	bl	800085c <__aeabi_ddiv>
 8011712:	2d00      	cmp	r5, #0
 8011714:	f6bf af49 	bge.w	80115aa <__ieee754_pow+0x3a>
 8011718:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 801171c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8011720:	ea58 0804 	orrs.w	r8, r8, r4
 8011724:	d108      	bne.n	8011738 <__ieee754_pow+0x1c8>
 8011726:	4602      	mov	r2, r0
 8011728:	460b      	mov	r3, r1
 801172a:	4610      	mov	r0, r2
 801172c:	4619      	mov	r1, r3
 801172e:	f7ee fdb3 	bl	8000298 <__aeabi_dsub>
 8011732:	4602      	mov	r2, r0
 8011734:	460b      	mov	r3, r1
 8011736:	e794      	b.n	8011662 <__ieee754_pow+0xf2>
 8011738:	2c01      	cmp	r4, #1
 801173a:	f47f af36 	bne.w	80115aa <__ieee754_pow+0x3a>
 801173e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011742:	4619      	mov	r1, r3
 8011744:	e731      	b.n	80115aa <__ieee754_pow+0x3a>
 8011746:	0feb      	lsrs	r3, r5, #31
 8011748:	3b01      	subs	r3, #1
 801174a:	ea53 0204 	orrs.w	r2, r3, r4
 801174e:	d102      	bne.n	8011756 <__ieee754_pow+0x1e6>
 8011750:	4632      	mov	r2, r6
 8011752:	463b      	mov	r3, r7
 8011754:	e7e9      	b.n	801172a <__ieee754_pow+0x1ba>
 8011756:	3c01      	subs	r4, #1
 8011758:	431c      	orrs	r4, r3
 801175a:	d016      	beq.n	801178a <__ieee754_pow+0x21a>
 801175c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80117e8 <__ieee754_pow+0x278>
 8011760:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8011764:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011768:	f240 8112 	bls.w	8011990 <__ieee754_pow+0x420>
 801176c:	4b28      	ldr	r3, [pc, #160]	@ (8011810 <__ieee754_pow+0x2a0>)
 801176e:	459a      	cmp	sl, r3
 8011770:	4b25      	ldr	r3, [pc, #148]	@ (8011808 <__ieee754_pow+0x298>)
 8011772:	d916      	bls.n	80117a2 <__ieee754_pow+0x232>
 8011774:	4598      	cmp	r8, r3
 8011776:	d80b      	bhi.n	8011790 <__ieee754_pow+0x220>
 8011778:	f1b9 0f00 	cmp.w	r9, #0
 801177c:	da0b      	bge.n	8011796 <__ieee754_pow+0x226>
 801177e:	2000      	movs	r0, #0
 8011780:	b011      	add	sp, #68	@ 0x44
 8011782:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011786:	f000 bcf3 	b.w	8012170 <__math_oflow>
 801178a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80117f0 <__ieee754_pow+0x280>
 801178e:	e7e7      	b.n	8011760 <__ieee754_pow+0x1f0>
 8011790:	f1b9 0f00 	cmp.w	r9, #0
 8011794:	dcf3      	bgt.n	801177e <__ieee754_pow+0x20e>
 8011796:	2000      	movs	r0, #0
 8011798:	b011      	add	sp, #68	@ 0x44
 801179a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801179e:	f000 bcdf 	b.w	8012160 <__math_uflow>
 80117a2:	4598      	cmp	r8, r3
 80117a4:	d20c      	bcs.n	80117c0 <__ieee754_pow+0x250>
 80117a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80117aa:	2200      	movs	r2, #0
 80117ac:	2300      	movs	r3, #0
 80117ae:	f7ef f99d 	bl	8000aec <__aeabi_dcmplt>
 80117b2:	3800      	subs	r0, #0
 80117b4:	bf18      	it	ne
 80117b6:	2001      	movne	r0, #1
 80117b8:	f1b9 0f00 	cmp.w	r9, #0
 80117bc:	daec      	bge.n	8011798 <__ieee754_pow+0x228>
 80117be:	e7df      	b.n	8011780 <__ieee754_pow+0x210>
 80117c0:	4b10      	ldr	r3, [pc, #64]	@ (8011804 <__ieee754_pow+0x294>)
 80117c2:	4598      	cmp	r8, r3
 80117c4:	f04f 0200 	mov.w	r2, #0
 80117c8:	d924      	bls.n	8011814 <__ieee754_pow+0x2a4>
 80117ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80117ce:	2300      	movs	r3, #0
 80117d0:	f7ef f98c 	bl	8000aec <__aeabi_dcmplt>
 80117d4:	3800      	subs	r0, #0
 80117d6:	bf18      	it	ne
 80117d8:	2001      	movne	r0, #1
 80117da:	f1b9 0f00 	cmp.w	r9, #0
 80117de:	dccf      	bgt.n	8011780 <__ieee754_pow+0x210>
 80117e0:	e7da      	b.n	8011798 <__ieee754_pow+0x228>
 80117e2:	bf00      	nop
 80117e4:	f3af 8000 	nop.w
 80117e8:	00000000 	.word	0x00000000
 80117ec:	3ff00000 	.word	0x3ff00000
 80117f0:	00000000 	.word	0x00000000
 80117f4:	bff00000 	.word	0xbff00000
 80117f8:	fff00000 	.word	0xfff00000
 80117fc:	7ff00000 	.word	0x7ff00000
 8011800:	433fffff 	.word	0x433fffff
 8011804:	3ff00000 	.word	0x3ff00000
 8011808:	3fefffff 	.word	0x3fefffff
 801180c:	3fe00000 	.word	0x3fe00000
 8011810:	43f00000 	.word	0x43f00000
 8011814:	4b5a      	ldr	r3, [pc, #360]	@ (8011980 <__ieee754_pow+0x410>)
 8011816:	f7ee fd3f 	bl	8000298 <__aeabi_dsub>
 801181a:	a351      	add	r3, pc, #324	@ (adr r3, 8011960 <__ieee754_pow+0x3f0>)
 801181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011820:	4604      	mov	r4, r0
 8011822:	460d      	mov	r5, r1
 8011824:	f7ee fef0 	bl	8000608 <__aeabi_dmul>
 8011828:	a34f      	add	r3, pc, #316	@ (adr r3, 8011968 <__ieee754_pow+0x3f8>)
 801182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801182e:	4606      	mov	r6, r0
 8011830:	460f      	mov	r7, r1
 8011832:	4620      	mov	r0, r4
 8011834:	4629      	mov	r1, r5
 8011836:	f7ee fee7 	bl	8000608 <__aeabi_dmul>
 801183a:	4b52      	ldr	r3, [pc, #328]	@ (8011984 <__ieee754_pow+0x414>)
 801183c:	4682      	mov	sl, r0
 801183e:	468b      	mov	fp, r1
 8011840:	2200      	movs	r2, #0
 8011842:	4620      	mov	r0, r4
 8011844:	4629      	mov	r1, r5
 8011846:	f7ee fedf 	bl	8000608 <__aeabi_dmul>
 801184a:	4602      	mov	r2, r0
 801184c:	460b      	mov	r3, r1
 801184e:	a148      	add	r1, pc, #288	@ (adr r1, 8011970 <__ieee754_pow+0x400>)
 8011850:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011854:	f7ee fd20 	bl	8000298 <__aeabi_dsub>
 8011858:	4622      	mov	r2, r4
 801185a:	462b      	mov	r3, r5
 801185c:	f7ee fed4 	bl	8000608 <__aeabi_dmul>
 8011860:	4602      	mov	r2, r0
 8011862:	460b      	mov	r3, r1
 8011864:	2000      	movs	r0, #0
 8011866:	4948      	ldr	r1, [pc, #288]	@ (8011988 <__ieee754_pow+0x418>)
 8011868:	f7ee fd16 	bl	8000298 <__aeabi_dsub>
 801186c:	4622      	mov	r2, r4
 801186e:	4680      	mov	r8, r0
 8011870:	4689      	mov	r9, r1
 8011872:	462b      	mov	r3, r5
 8011874:	4620      	mov	r0, r4
 8011876:	4629      	mov	r1, r5
 8011878:	f7ee fec6 	bl	8000608 <__aeabi_dmul>
 801187c:	4602      	mov	r2, r0
 801187e:	460b      	mov	r3, r1
 8011880:	4640      	mov	r0, r8
 8011882:	4649      	mov	r1, r9
 8011884:	f7ee fec0 	bl	8000608 <__aeabi_dmul>
 8011888:	a33b      	add	r3, pc, #236	@ (adr r3, 8011978 <__ieee754_pow+0x408>)
 801188a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801188e:	f7ee febb 	bl	8000608 <__aeabi_dmul>
 8011892:	4602      	mov	r2, r0
 8011894:	460b      	mov	r3, r1
 8011896:	4650      	mov	r0, sl
 8011898:	4659      	mov	r1, fp
 801189a:	f7ee fcfd 	bl	8000298 <__aeabi_dsub>
 801189e:	4602      	mov	r2, r0
 80118a0:	460b      	mov	r3, r1
 80118a2:	4680      	mov	r8, r0
 80118a4:	4689      	mov	r9, r1
 80118a6:	4630      	mov	r0, r6
 80118a8:	4639      	mov	r1, r7
 80118aa:	f7ee fcf7 	bl	800029c <__adddf3>
 80118ae:	2400      	movs	r4, #0
 80118b0:	4632      	mov	r2, r6
 80118b2:	463b      	mov	r3, r7
 80118b4:	4620      	mov	r0, r4
 80118b6:	460d      	mov	r5, r1
 80118b8:	f7ee fcee 	bl	8000298 <__aeabi_dsub>
 80118bc:	4602      	mov	r2, r0
 80118be:	460b      	mov	r3, r1
 80118c0:	4640      	mov	r0, r8
 80118c2:	4649      	mov	r1, r9
 80118c4:	f7ee fce8 	bl	8000298 <__aeabi_dsub>
 80118c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80118cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80118d0:	2300      	movs	r3, #0
 80118d2:	9304      	str	r3, [sp, #16]
 80118d4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80118d8:	4606      	mov	r6, r0
 80118da:	460f      	mov	r7, r1
 80118dc:	4652      	mov	r2, sl
 80118de:	465b      	mov	r3, fp
 80118e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80118e4:	f7ee fcd8 	bl	8000298 <__aeabi_dsub>
 80118e8:	4622      	mov	r2, r4
 80118ea:	462b      	mov	r3, r5
 80118ec:	f7ee fe8c 	bl	8000608 <__aeabi_dmul>
 80118f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80118f4:	4680      	mov	r8, r0
 80118f6:	4689      	mov	r9, r1
 80118f8:	4630      	mov	r0, r6
 80118fa:	4639      	mov	r1, r7
 80118fc:	f7ee fe84 	bl	8000608 <__aeabi_dmul>
 8011900:	4602      	mov	r2, r0
 8011902:	460b      	mov	r3, r1
 8011904:	4640      	mov	r0, r8
 8011906:	4649      	mov	r1, r9
 8011908:	f7ee fcc8 	bl	800029c <__adddf3>
 801190c:	4652      	mov	r2, sl
 801190e:	465b      	mov	r3, fp
 8011910:	4606      	mov	r6, r0
 8011912:	460f      	mov	r7, r1
 8011914:	4620      	mov	r0, r4
 8011916:	4629      	mov	r1, r5
 8011918:	f7ee fe76 	bl	8000608 <__aeabi_dmul>
 801191c:	460b      	mov	r3, r1
 801191e:	4602      	mov	r2, r0
 8011920:	4680      	mov	r8, r0
 8011922:	4689      	mov	r9, r1
 8011924:	4630      	mov	r0, r6
 8011926:	4639      	mov	r1, r7
 8011928:	f7ee fcb8 	bl	800029c <__adddf3>
 801192c:	4b17      	ldr	r3, [pc, #92]	@ (801198c <__ieee754_pow+0x41c>)
 801192e:	4299      	cmp	r1, r3
 8011930:	4604      	mov	r4, r0
 8011932:	460d      	mov	r5, r1
 8011934:	468a      	mov	sl, r1
 8011936:	468b      	mov	fp, r1
 8011938:	f340 82ef 	ble.w	8011f1a <__ieee754_pow+0x9aa>
 801193c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8011940:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8011944:	4303      	orrs	r3, r0
 8011946:	f000 81e8 	beq.w	8011d1a <__ieee754_pow+0x7aa>
 801194a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801194e:	2200      	movs	r2, #0
 8011950:	2300      	movs	r3, #0
 8011952:	f7ef f8cb 	bl	8000aec <__aeabi_dcmplt>
 8011956:	3800      	subs	r0, #0
 8011958:	bf18      	it	ne
 801195a:	2001      	movne	r0, #1
 801195c:	e710      	b.n	8011780 <__ieee754_pow+0x210>
 801195e:	bf00      	nop
 8011960:	60000000 	.word	0x60000000
 8011964:	3ff71547 	.word	0x3ff71547
 8011968:	f85ddf44 	.word	0xf85ddf44
 801196c:	3e54ae0b 	.word	0x3e54ae0b
 8011970:	55555555 	.word	0x55555555
 8011974:	3fd55555 	.word	0x3fd55555
 8011978:	652b82fe 	.word	0x652b82fe
 801197c:	3ff71547 	.word	0x3ff71547
 8011980:	3ff00000 	.word	0x3ff00000
 8011984:	3fd00000 	.word	0x3fd00000
 8011988:	3fe00000 	.word	0x3fe00000
 801198c:	408fffff 	.word	0x408fffff
 8011990:	4bd5      	ldr	r3, [pc, #852]	@ (8011ce8 <__ieee754_pow+0x778>)
 8011992:	402b      	ands	r3, r5
 8011994:	2200      	movs	r2, #0
 8011996:	b92b      	cbnz	r3, 80119a4 <__ieee754_pow+0x434>
 8011998:	4bd4      	ldr	r3, [pc, #848]	@ (8011cec <__ieee754_pow+0x77c>)
 801199a:	f7ee fe35 	bl	8000608 <__aeabi_dmul>
 801199e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80119a2:	468b      	mov	fp, r1
 80119a4:	ea4f 532b 	mov.w	r3, fp, asr #20
 80119a8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80119ac:	4413      	add	r3, r2
 80119ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80119b0:	4bcf      	ldr	r3, [pc, #828]	@ (8011cf0 <__ieee754_pow+0x780>)
 80119b2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80119b6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80119ba:	459b      	cmp	fp, r3
 80119bc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80119c0:	dd08      	ble.n	80119d4 <__ieee754_pow+0x464>
 80119c2:	4bcc      	ldr	r3, [pc, #816]	@ (8011cf4 <__ieee754_pow+0x784>)
 80119c4:	459b      	cmp	fp, r3
 80119c6:	f340 81a5 	ble.w	8011d14 <__ieee754_pow+0x7a4>
 80119ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80119cc:	3301      	adds	r3, #1
 80119ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80119d0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80119d4:	f04f 0a00 	mov.w	sl, #0
 80119d8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80119dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80119de:	4bc6      	ldr	r3, [pc, #792]	@ (8011cf8 <__ieee754_pow+0x788>)
 80119e0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80119e4:	ed93 7b00 	vldr	d7, [r3]
 80119e8:	4629      	mov	r1, r5
 80119ea:	ec53 2b17 	vmov	r2, r3, d7
 80119ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 80119f2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80119f6:	f7ee fc4f 	bl	8000298 <__aeabi_dsub>
 80119fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80119fe:	4606      	mov	r6, r0
 8011a00:	460f      	mov	r7, r1
 8011a02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011a06:	f7ee fc49 	bl	800029c <__adddf3>
 8011a0a:	4602      	mov	r2, r0
 8011a0c:	460b      	mov	r3, r1
 8011a0e:	2000      	movs	r0, #0
 8011a10:	49ba      	ldr	r1, [pc, #744]	@ (8011cfc <__ieee754_pow+0x78c>)
 8011a12:	f7ee ff23 	bl	800085c <__aeabi_ddiv>
 8011a16:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8011a1a:	4602      	mov	r2, r0
 8011a1c:	460b      	mov	r3, r1
 8011a1e:	4630      	mov	r0, r6
 8011a20:	4639      	mov	r1, r7
 8011a22:	f7ee fdf1 	bl	8000608 <__aeabi_dmul>
 8011a26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011a2a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8011a2e:	106d      	asrs	r5, r5, #1
 8011a30:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8011a34:	f04f 0b00 	mov.w	fp, #0
 8011a38:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8011a3c:	4661      	mov	r1, ip
 8011a3e:	2200      	movs	r2, #0
 8011a40:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8011a44:	4658      	mov	r0, fp
 8011a46:	46e1      	mov	r9, ip
 8011a48:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8011a4c:	4614      	mov	r4, r2
 8011a4e:	461d      	mov	r5, r3
 8011a50:	f7ee fdda 	bl	8000608 <__aeabi_dmul>
 8011a54:	4602      	mov	r2, r0
 8011a56:	460b      	mov	r3, r1
 8011a58:	4630      	mov	r0, r6
 8011a5a:	4639      	mov	r1, r7
 8011a5c:	f7ee fc1c 	bl	8000298 <__aeabi_dsub>
 8011a60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011a64:	4606      	mov	r6, r0
 8011a66:	460f      	mov	r7, r1
 8011a68:	4620      	mov	r0, r4
 8011a6a:	4629      	mov	r1, r5
 8011a6c:	f7ee fc14 	bl	8000298 <__aeabi_dsub>
 8011a70:	4602      	mov	r2, r0
 8011a72:	460b      	mov	r3, r1
 8011a74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011a78:	f7ee fc0e 	bl	8000298 <__aeabi_dsub>
 8011a7c:	465a      	mov	r2, fp
 8011a7e:	464b      	mov	r3, r9
 8011a80:	f7ee fdc2 	bl	8000608 <__aeabi_dmul>
 8011a84:	4602      	mov	r2, r0
 8011a86:	460b      	mov	r3, r1
 8011a88:	4630      	mov	r0, r6
 8011a8a:	4639      	mov	r1, r7
 8011a8c:	f7ee fc04 	bl	8000298 <__aeabi_dsub>
 8011a90:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8011a94:	f7ee fdb8 	bl	8000608 <__aeabi_dmul>
 8011a98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011a9c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011aa0:	4610      	mov	r0, r2
 8011aa2:	4619      	mov	r1, r3
 8011aa4:	f7ee fdb0 	bl	8000608 <__aeabi_dmul>
 8011aa8:	a37d      	add	r3, pc, #500	@ (adr r3, 8011ca0 <__ieee754_pow+0x730>)
 8011aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aae:	4604      	mov	r4, r0
 8011ab0:	460d      	mov	r5, r1
 8011ab2:	f7ee fda9 	bl	8000608 <__aeabi_dmul>
 8011ab6:	a37c      	add	r3, pc, #496	@ (adr r3, 8011ca8 <__ieee754_pow+0x738>)
 8011ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011abc:	f7ee fbee 	bl	800029c <__adddf3>
 8011ac0:	4622      	mov	r2, r4
 8011ac2:	462b      	mov	r3, r5
 8011ac4:	f7ee fda0 	bl	8000608 <__aeabi_dmul>
 8011ac8:	a379      	add	r3, pc, #484	@ (adr r3, 8011cb0 <__ieee754_pow+0x740>)
 8011aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ace:	f7ee fbe5 	bl	800029c <__adddf3>
 8011ad2:	4622      	mov	r2, r4
 8011ad4:	462b      	mov	r3, r5
 8011ad6:	f7ee fd97 	bl	8000608 <__aeabi_dmul>
 8011ada:	a377      	add	r3, pc, #476	@ (adr r3, 8011cb8 <__ieee754_pow+0x748>)
 8011adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ae0:	f7ee fbdc 	bl	800029c <__adddf3>
 8011ae4:	4622      	mov	r2, r4
 8011ae6:	462b      	mov	r3, r5
 8011ae8:	f7ee fd8e 	bl	8000608 <__aeabi_dmul>
 8011aec:	a374      	add	r3, pc, #464	@ (adr r3, 8011cc0 <__ieee754_pow+0x750>)
 8011aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011af2:	f7ee fbd3 	bl	800029c <__adddf3>
 8011af6:	4622      	mov	r2, r4
 8011af8:	462b      	mov	r3, r5
 8011afa:	f7ee fd85 	bl	8000608 <__aeabi_dmul>
 8011afe:	a372      	add	r3, pc, #456	@ (adr r3, 8011cc8 <__ieee754_pow+0x758>)
 8011b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b04:	f7ee fbca 	bl	800029c <__adddf3>
 8011b08:	4622      	mov	r2, r4
 8011b0a:	4606      	mov	r6, r0
 8011b0c:	460f      	mov	r7, r1
 8011b0e:	462b      	mov	r3, r5
 8011b10:	4620      	mov	r0, r4
 8011b12:	4629      	mov	r1, r5
 8011b14:	f7ee fd78 	bl	8000608 <__aeabi_dmul>
 8011b18:	4602      	mov	r2, r0
 8011b1a:	460b      	mov	r3, r1
 8011b1c:	4630      	mov	r0, r6
 8011b1e:	4639      	mov	r1, r7
 8011b20:	f7ee fd72 	bl	8000608 <__aeabi_dmul>
 8011b24:	465a      	mov	r2, fp
 8011b26:	4604      	mov	r4, r0
 8011b28:	460d      	mov	r5, r1
 8011b2a:	464b      	mov	r3, r9
 8011b2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011b30:	f7ee fbb4 	bl	800029c <__adddf3>
 8011b34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011b38:	f7ee fd66 	bl	8000608 <__aeabi_dmul>
 8011b3c:	4622      	mov	r2, r4
 8011b3e:	462b      	mov	r3, r5
 8011b40:	f7ee fbac 	bl	800029c <__adddf3>
 8011b44:	465a      	mov	r2, fp
 8011b46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011b4a:	464b      	mov	r3, r9
 8011b4c:	4658      	mov	r0, fp
 8011b4e:	4649      	mov	r1, r9
 8011b50:	f7ee fd5a 	bl	8000608 <__aeabi_dmul>
 8011b54:	4b6a      	ldr	r3, [pc, #424]	@ (8011d00 <__ieee754_pow+0x790>)
 8011b56:	2200      	movs	r2, #0
 8011b58:	4606      	mov	r6, r0
 8011b5a:	460f      	mov	r7, r1
 8011b5c:	f7ee fb9e 	bl	800029c <__adddf3>
 8011b60:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011b64:	f7ee fb9a 	bl	800029c <__adddf3>
 8011b68:	46d8      	mov	r8, fp
 8011b6a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8011b6e:	460d      	mov	r5, r1
 8011b70:	465a      	mov	r2, fp
 8011b72:	460b      	mov	r3, r1
 8011b74:	4640      	mov	r0, r8
 8011b76:	4649      	mov	r1, r9
 8011b78:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8011b7c:	f7ee fd44 	bl	8000608 <__aeabi_dmul>
 8011b80:	465c      	mov	r4, fp
 8011b82:	4680      	mov	r8, r0
 8011b84:	4689      	mov	r9, r1
 8011b86:	4b5e      	ldr	r3, [pc, #376]	@ (8011d00 <__ieee754_pow+0x790>)
 8011b88:	2200      	movs	r2, #0
 8011b8a:	4620      	mov	r0, r4
 8011b8c:	4629      	mov	r1, r5
 8011b8e:	f7ee fb83 	bl	8000298 <__aeabi_dsub>
 8011b92:	4632      	mov	r2, r6
 8011b94:	463b      	mov	r3, r7
 8011b96:	f7ee fb7f 	bl	8000298 <__aeabi_dsub>
 8011b9a:	4602      	mov	r2, r0
 8011b9c:	460b      	mov	r3, r1
 8011b9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011ba2:	f7ee fb79 	bl	8000298 <__aeabi_dsub>
 8011ba6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011baa:	f7ee fd2d 	bl	8000608 <__aeabi_dmul>
 8011bae:	4622      	mov	r2, r4
 8011bb0:	4606      	mov	r6, r0
 8011bb2:	460f      	mov	r7, r1
 8011bb4:	462b      	mov	r3, r5
 8011bb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011bba:	f7ee fd25 	bl	8000608 <__aeabi_dmul>
 8011bbe:	4602      	mov	r2, r0
 8011bc0:	460b      	mov	r3, r1
 8011bc2:	4630      	mov	r0, r6
 8011bc4:	4639      	mov	r1, r7
 8011bc6:	f7ee fb69 	bl	800029c <__adddf3>
 8011bca:	4606      	mov	r6, r0
 8011bcc:	460f      	mov	r7, r1
 8011bce:	4602      	mov	r2, r0
 8011bd0:	460b      	mov	r3, r1
 8011bd2:	4640      	mov	r0, r8
 8011bd4:	4649      	mov	r1, r9
 8011bd6:	f7ee fb61 	bl	800029c <__adddf3>
 8011bda:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8011bde:	a33c      	add	r3, pc, #240	@ (adr r3, 8011cd0 <__ieee754_pow+0x760>)
 8011be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011be4:	4658      	mov	r0, fp
 8011be6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8011bea:	460d      	mov	r5, r1
 8011bec:	f7ee fd0c 	bl	8000608 <__aeabi_dmul>
 8011bf0:	465c      	mov	r4, fp
 8011bf2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011bf6:	4642      	mov	r2, r8
 8011bf8:	464b      	mov	r3, r9
 8011bfa:	4620      	mov	r0, r4
 8011bfc:	4629      	mov	r1, r5
 8011bfe:	f7ee fb4b 	bl	8000298 <__aeabi_dsub>
 8011c02:	4602      	mov	r2, r0
 8011c04:	460b      	mov	r3, r1
 8011c06:	4630      	mov	r0, r6
 8011c08:	4639      	mov	r1, r7
 8011c0a:	f7ee fb45 	bl	8000298 <__aeabi_dsub>
 8011c0e:	a332      	add	r3, pc, #200	@ (adr r3, 8011cd8 <__ieee754_pow+0x768>)
 8011c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c14:	f7ee fcf8 	bl	8000608 <__aeabi_dmul>
 8011c18:	a331      	add	r3, pc, #196	@ (adr r3, 8011ce0 <__ieee754_pow+0x770>)
 8011c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c1e:	4606      	mov	r6, r0
 8011c20:	460f      	mov	r7, r1
 8011c22:	4620      	mov	r0, r4
 8011c24:	4629      	mov	r1, r5
 8011c26:	f7ee fcef 	bl	8000608 <__aeabi_dmul>
 8011c2a:	4602      	mov	r2, r0
 8011c2c:	460b      	mov	r3, r1
 8011c2e:	4630      	mov	r0, r6
 8011c30:	4639      	mov	r1, r7
 8011c32:	f7ee fb33 	bl	800029c <__adddf3>
 8011c36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011c38:	4b32      	ldr	r3, [pc, #200]	@ (8011d04 <__ieee754_pow+0x794>)
 8011c3a:	4413      	add	r3, r2
 8011c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c40:	f7ee fb2c 	bl	800029c <__adddf3>
 8011c44:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011c48:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011c4a:	f7ee fc73 	bl	8000534 <__aeabi_i2d>
 8011c4e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011c50:	4b2d      	ldr	r3, [pc, #180]	@ (8011d08 <__ieee754_pow+0x798>)
 8011c52:	4413      	add	r3, r2
 8011c54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011c58:	4606      	mov	r6, r0
 8011c5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011c5e:	460f      	mov	r7, r1
 8011c60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011c64:	f7ee fb1a 	bl	800029c <__adddf3>
 8011c68:	4642      	mov	r2, r8
 8011c6a:	464b      	mov	r3, r9
 8011c6c:	f7ee fb16 	bl	800029c <__adddf3>
 8011c70:	4632      	mov	r2, r6
 8011c72:	463b      	mov	r3, r7
 8011c74:	f7ee fb12 	bl	800029c <__adddf3>
 8011c78:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8011c7c:	4632      	mov	r2, r6
 8011c7e:	463b      	mov	r3, r7
 8011c80:	4658      	mov	r0, fp
 8011c82:	460d      	mov	r5, r1
 8011c84:	f7ee fb08 	bl	8000298 <__aeabi_dsub>
 8011c88:	4642      	mov	r2, r8
 8011c8a:	464b      	mov	r3, r9
 8011c8c:	f7ee fb04 	bl	8000298 <__aeabi_dsub>
 8011c90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011c94:	f7ee fb00 	bl	8000298 <__aeabi_dsub>
 8011c98:	465c      	mov	r4, fp
 8011c9a:	4602      	mov	r2, r0
 8011c9c:	e036      	b.n	8011d0c <__ieee754_pow+0x79c>
 8011c9e:	bf00      	nop
 8011ca0:	4a454eef 	.word	0x4a454eef
 8011ca4:	3fca7e28 	.word	0x3fca7e28
 8011ca8:	93c9db65 	.word	0x93c9db65
 8011cac:	3fcd864a 	.word	0x3fcd864a
 8011cb0:	a91d4101 	.word	0xa91d4101
 8011cb4:	3fd17460 	.word	0x3fd17460
 8011cb8:	518f264d 	.word	0x518f264d
 8011cbc:	3fd55555 	.word	0x3fd55555
 8011cc0:	db6fabff 	.word	0xdb6fabff
 8011cc4:	3fdb6db6 	.word	0x3fdb6db6
 8011cc8:	33333303 	.word	0x33333303
 8011ccc:	3fe33333 	.word	0x3fe33333
 8011cd0:	e0000000 	.word	0xe0000000
 8011cd4:	3feec709 	.word	0x3feec709
 8011cd8:	dc3a03fd 	.word	0xdc3a03fd
 8011cdc:	3feec709 	.word	0x3feec709
 8011ce0:	145b01f5 	.word	0x145b01f5
 8011ce4:	be3e2fe0 	.word	0xbe3e2fe0
 8011ce8:	7ff00000 	.word	0x7ff00000
 8011cec:	43400000 	.word	0x43400000
 8011cf0:	0003988e 	.word	0x0003988e
 8011cf4:	000bb679 	.word	0x000bb679
 8011cf8:	08013f50 	.word	0x08013f50
 8011cfc:	3ff00000 	.word	0x3ff00000
 8011d00:	40080000 	.word	0x40080000
 8011d04:	08013f30 	.word	0x08013f30
 8011d08:	08013f40 	.word	0x08013f40
 8011d0c:	460b      	mov	r3, r1
 8011d0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011d12:	e5d7      	b.n	80118c4 <__ieee754_pow+0x354>
 8011d14:	f04f 0a01 	mov.w	sl, #1
 8011d18:	e65e      	b.n	80119d8 <__ieee754_pow+0x468>
 8011d1a:	a3b4      	add	r3, pc, #720	@ (adr r3, 8011fec <__ieee754_pow+0xa7c>)
 8011d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d20:	4630      	mov	r0, r6
 8011d22:	4639      	mov	r1, r7
 8011d24:	f7ee faba 	bl	800029c <__adddf3>
 8011d28:	4642      	mov	r2, r8
 8011d2a:	e9cd 0100 	strd	r0, r1, [sp]
 8011d2e:	464b      	mov	r3, r9
 8011d30:	4620      	mov	r0, r4
 8011d32:	4629      	mov	r1, r5
 8011d34:	f7ee fab0 	bl	8000298 <__aeabi_dsub>
 8011d38:	4602      	mov	r2, r0
 8011d3a:	460b      	mov	r3, r1
 8011d3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011d40:	f7ee fef2 	bl	8000b28 <__aeabi_dcmpgt>
 8011d44:	2800      	cmp	r0, #0
 8011d46:	f47f ae00 	bne.w	801194a <__ieee754_pow+0x3da>
 8011d4a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8011d4e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8011d52:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8011d56:	fa43 fa0a 	asr.w	sl, r3, sl
 8011d5a:	44da      	add	sl, fp
 8011d5c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8011d60:	489d      	ldr	r0, [pc, #628]	@ (8011fd8 <__ieee754_pow+0xa68>)
 8011d62:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8011d66:	4108      	asrs	r0, r1
 8011d68:	ea00 030a 	and.w	r3, r0, sl
 8011d6c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8011d70:	f1c1 0114 	rsb	r1, r1, #20
 8011d74:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8011d78:	fa4a fa01 	asr.w	sl, sl, r1
 8011d7c:	f1bb 0f00 	cmp.w	fp, #0
 8011d80:	4640      	mov	r0, r8
 8011d82:	4649      	mov	r1, r9
 8011d84:	f04f 0200 	mov.w	r2, #0
 8011d88:	bfb8      	it	lt
 8011d8a:	f1ca 0a00 	rsblt	sl, sl, #0
 8011d8e:	f7ee fa83 	bl	8000298 <__aeabi_dsub>
 8011d92:	4680      	mov	r8, r0
 8011d94:	4689      	mov	r9, r1
 8011d96:	4632      	mov	r2, r6
 8011d98:	463b      	mov	r3, r7
 8011d9a:	4640      	mov	r0, r8
 8011d9c:	4649      	mov	r1, r9
 8011d9e:	f7ee fa7d 	bl	800029c <__adddf3>
 8011da2:	2400      	movs	r4, #0
 8011da4:	a37c      	add	r3, pc, #496	@ (adr r3, 8011f98 <__ieee754_pow+0xa28>)
 8011da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011daa:	4620      	mov	r0, r4
 8011dac:	460d      	mov	r5, r1
 8011dae:	f7ee fc2b 	bl	8000608 <__aeabi_dmul>
 8011db2:	4642      	mov	r2, r8
 8011db4:	e9cd 0100 	strd	r0, r1, [sp]
 8011db8:	464b      	mov	r3, r9
 8011dba:	4620      	mov	r0, r4
 8011dbc:	4629      	mov	r1, r5
 8011dbe:	f7ee fa6b 	bl	8000298 <__aeabi_dsub>
 8011dc2:	4602      	mov	r2, r0
 8011dc4:	460b      	mov	r3, r1
 8011dc6:	4630      	mov	r0, r6
 8011dc8:	4639      	mov	r1, r7
 8011dca:	f7ee fa65 	bl	8000298 <__aeabi_dsub>
 8011dce:	a374      	add	r3, pc, #464	@ (adr r3, 8011fa0 <__ieee754_pow+0xa30>)
 8011dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dd4:	f7ee fc18 	bl	8000608 <__aeabi_dmul>
 8011dd8:	a373      	add	r3, pc, #460	@ (adr r3, 8011fa8 <__ieee754_pow+0xa38>)
 8011dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dde:	4680      	mov	r8, r0
 8011de0:	4689      	mov	r9, r1
 8011de2:	4620      	mov	r0, r4
 8011de4:	4629      	mov	r1, r5
 8011de6:	f7ee fc0f 	bl	8000608 <__aeabi_dmul>
 8011dea:	4602      	mov	r2, r0
 8011dec:	460b      	mov	r3, r1
 8011dee:	4640      	mov	r0, r8
 8011df0:	4649      	mov	r1, r9
 8011df2:	f7ee fa53 	bl	800029c <__adddf3>
 8011df6:	4604      	mov	r4, r0
 8011df8:	460d      	mov	r5, r1
 8011dfa:	4602      	mov	r2, r0
 8011dfc:	460b      	mov	r3, r1
 8011dfe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011e02:	f7ee fa4b 	bl	800029c <__adddf3>
 8011e06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011e0a:	4680      	mov	r8, r0
 8011e0c:	4689      	mov	r9, r1
 8011e0e:	f7ee fa43 	bl	8000298 <__aeabi_dsub>
 8011e12:	4602      	mov	r2, r0
 8011e14:	460b      	mov	r3, r1
 8011e16:	4620      	mov	r0, r4
 8011e18:	4629      	mov	r1, r5
 8011e1a:	f7ee fa3d 	bl	8000298 <__aeabi_dsub>
 8011e1e:	4642      	mov	r2, r8
 8011e20:	4606      	mov	r6, r0
 8011e22:	460f      	mov	r7, r1
 8011e24:	464b      	mov	r3, r9
 8011e26:	4640      	mov	r0, r8
 8011e28:	4649      	mov	r1, r9
 8011e2a:	f7ee fbed 	bl	8000608 <__aeabi_dmul>
 8011e2e:	a360      	add	r3, pc, #384	@ (adr r3, 8011fb0 <__ieee754_pow+0xa40>)
 8011e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e34:	4604      	mov	r4, r0
 8011e36:	460d      	mov	r5, r1
 8011e38:	f7ee fbe6 	bl	8000608 <__aeabi_dmul>
 8011e3c:	a35e      	add	r3, pc, #376	@ (adr r3, 8011fb8 <__ieee754_pow+0xa48>)
 8011e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e42:	f7ee fa29 	bl	8000298 <__aeabi_dsub>
 8011e46:	4622      	mov	r2, r4
 8011e48:	462b      	mov	r3, r5
 8011e4a:	f7ee fbdd 	bl	8000608 <__aeabi_dmul>
 8011e4e:	a35c      	add	r3, pc, #368	@ (adr r3, 8011fc0 <__ieee754_pow+0xa50>)
 8011e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e54:	f7ee fa22 	bl	800029c <__adddf3>
 8011e58:	4622      	mov	r2, r4
 8011e5a:	462b      	mov	r3, r5
 8011e5c:	f7ee fbd4 	bl	8000608 <__aeabi_dmul>
 8011e60:	a359      	add	r3, pc, #356	@ (adr r3, 8011fc8 <__ieee754_pow+0xa58>)
 8011e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e66:	f7ee fa17 	bl	8000298 <__aeabi_dsub>
 8011e6a:	4622      	mov	r2, r4
 8011e6c:	462b      	mov	r3, r5
 8011e6e:	f7ee fbcb 	bl	8000608 <__aeabi_dmul>
 8011e72:	a357      	add	r3, pc, #348	@ (adr r3, 8011fd0 <__ieee754_pow+0xa60>)
 8011e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e78:	f7ee fa10 	bl	800029c <__adddf3>
 8011e7c:	4622      	mov	r2, r4
 8011e7e:	462b      	mov	r3, r5
 8011e80:	f7ee fbc2 	bl	8000608 <__aeabi_dmul>
 8011e84:	4602      	mov	r2, r0
 8011e86:	460b      	mov	r3, r1
 8011e88:	4640      	mov	r0, r8
 8011e8a:	4649      	mov	r1, r9
 8011e8c:	f7ee fa04 	bl	8000298 <__aeabi_dsub>
 8011e90:	4604      	mov	r4, r0
 8011e92:	460d      	mov	r5, r1
 8011e94:	4602      	mov	r2, r0
 8011e96:	460b      	mov	r3, r1
 8011e98:	4640      	mov	r0, r8
 8011e9a:	4649      	mov	r1, r9
 8011e9c:	f7ee fbb4 	bl	8000608 <__aeabi_dmul>
 8011ea0:	2200      	movs	r2, #0
 8011ea2:	e9cd 0100 	strd	r0, r1, [sp]
 8011ea6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011eaa:	4620      	mov	r0, r4
 8011eac:	4629      	mov	r1, r5
 8011eae:	f7ee f9f3 	bl	8000298 <__aeabi_dsub>
 8011eb2:	4602      	mov	r2, r0
 8011eb4:	460b      	mov	r3, r1
 8011eb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011eba:	f7ee fccf 	bl	800085c <__aeabi_ddiv>
 8011ebe:	4632      	mov	r2, r6
 8011ec0:	4604      	mov	r4, r0
 8011ec2:	460d      	mov	r5, r1
 8011ec4:	463b      	mov	r3, r7
 8011ec6:	4640      	mov	r0, r8
 8011ec8:	4649      	mov	r1, r9
 8011eca:	f7ee fb9d 	bl	8000608 <__aeabi_dmul>
 8011ece:	4632      	mov	r2, r6
 8011ed0:	463b      	mov	r3, r7
 8011ed2:	f7ee f9e3 	bl	800029c <__adddf3>
 8011ed6:	4602      	mov	r2, r0
 8011ed8:	460b      	mov	r3, r1
 8011eda:	4620      	mov	r0, r4
 8011edc:	4629      	mov	r1, r5
 8011ede:	f7ee f9db 	bl	8000298 <__aeabi_dsub>
 8011ee2:	4642      	mov	r2, r8
 8011ee4:	464b      	mov	r3, r9
 8011ee6:	f7ee f9d7 	bl	8000298 <__aeabi_dsub>
 8011eea:	460b      	mov	r3, r1
 8011eec:	4602      	mov	r2, r0
 8011eee:	493b      	ldr	r1, [pc, #236]	@ (8011fdc <__ieee754_pow+0xa6c>)
 8011ef0:	2000      	movs	r0, #0
 8011ef2:	f7ee f9d1 	bl	8000298 <__aeabi_dsub>
 8011ef6:	ec41 0b10 	vmov	d0, r0, r1
 8011efa:	ee10 3a90 	vmov	r3, s1
 8011efe:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011f02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011f06:	da30      	bge.n	8011f6a <__ieee754_pow+0x9fa>
 8011f08:	4650      	mov	r0, sl
 8011f0a:	f000 f87d 	bl	8012008 <scalbn>
 8011f0e:	ec51 0b10 	vmov	r0, r1, d0
 8011f12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011f16:	f7ff bbd2 	b.w	80116be <__ieee754_pow+0x14e>
 8011f1a:	4c31      	ldr	r4, [pc, #196]	@ (8011fe0 <__ieee754_pow+0xa70>)
 8011f1c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011f20:	42a3      	cmp	r3, r4
 8011f22:	d91a      	bls.n	8011f5a <__ieee754_pow+0x9ea>
 8011f24:	4b2f      	ldr	r3, [pc, #188]	@ (8011fe4 <__ieee754_pow+0xa74>)
 8011f26:	440b      	add	r3, r1
 8011f28:	4303      	orrs	r3, r0
 8011f2a:	d009      	beq.n	8011f40 <__ieee754_pow+0x9d0>
 8011f2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f30:	2200      	movs	r2, #0
 8011f32:	2300      	movs	r3, #0
 8011f34:	f7ee fdda 	bl	8000aec <__aeabi_dcmplt>
 8011f38:	3800      	subs	r0, #0
 8011f3a:	bf18      	it	ne
 8011f3c:	2001      	movne	r0, #1
 8011f3e:	e42b      	b.n	8011798 <__ieee754_pow+0x228>
 8011f40:	4642      	mov	r2, r8
 8011f42:	464b      	mov	r3, r9
 8011f44:	f7ee f9a8 	bl	8000298 <__aeabi_dsub>
 8011f48:	4632      	mov	r2, r6
 8011f4a:	463b      	mov	r3, r7
 8011f4c:	f7ee fde2 	bl	8000b14 <__aeabi_dcmpge>
 8011f50:	2800      	cmp	r0, #0
 8011f52:	d1eb      	bne.n	8011f2c <__ieee754_pow+0x9bc>
 8011f54:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8011ff4 <__ieee754_pow+0xa84>
 8011f58:	e6f7      	b.n	8011d4a <__ieee754_pow+0x7da>
 8011f5a:	469a      	mov	sl, r3
 8011f5c:	4b22      	ldr	r3, [pc, #136]	@ (8011fe8 <__ieee754_pow+0xa78>)
 8011f5e:	459a      	cmp	sl, r3
 8011f60:	f63f aef3 	bhi.w	8011d4a <__ieee754_pow+0x7da>
 8011f64:	f8dd a010 	ldr.w	sl, [sp, #16]
 8011f68:	e715      	b.n	8011d96 <__ieee754_pow+0x826>
 8011f6a:	ec51 0b10 	vmov	r0, r1, d0
 8011f6e:	4619      	mov	r1, r3
 8011f70:	e7cf      	b.n	8011f12 <__ieee754_pow+0x9a2>
 8011f72:	491a      	ldr	r1, [pc, #104]	@ (8011fdc <__ieee754_pow+0xa6c>)
 8011f74:	2000      	movs	r0, #0
 8011f76:	f7ff bb18 	b.w	80115aa <__ieee754_pow+0x3a>
 8011f7a:	2000      	movs	r0, #0
 8011f7c:	2100      	movs	r1, #0
 8011f7e:	f7ff bb14 	b.w	80115aa <__ieee754_pow+0x3a>
 8011f82:	4630      	mov	r0, r6
 8011f84:	4639      	mov	r1, r7
 8011f86:	f7ff bb10 	b.w	80115aa <__ieee754_pow+0x3a>
 8011f8a:	460c      	mov	r4, r1
 8011f8c:	f7ff bb5e 	b.w	801164c <__ieee754_pow+0xdc>
 8011f90:	2400      	movs	r4, #0
 8011f92:	f7ff bb49 	b.w	8011628 <__ieee754_pow+0xb8>
 8011f96:	bf00      	nop
 8011f98:	00000000 	.word	0x00000000
 8011f9c:	3fe62e43 	.word	0x3fe62e43
 8011fa0:	fefa39ef 	.word	0xfefa39ef
 8011fa4:	3fe62e42 	.word	0x3fe62e42
 8011fa8:	0ca86c39 	.word	0x0ca86c39
 8011fac:	be205c61 	.word	0xbe205c61
 8011fb0:	72bea4d0 	.word	0x72bea4d0
 8011fb4:	3e663769 	.word	0x3e663769
 8011fb8:	c5d26bf1 	.word	0xc5d26bf1
 8011fbc:	3ebbbd41 	.word	0x3ebbbd41
 8011fc0:	af25de2c 	.word	0xaf25de2c
 8011fc4:	3f11566a 	.word	0x3f11566a
 8011fc8:	16bebd93 	.word	0x16bebd93
 8011fcc:	3f66c16c 	.word	0x3f66c16c
 8011fd0:	5555553e 	.word	0x5555553e
 8011fd4:	3fc55555 	.word	0x3fc55555
 8011fd8:	fff00000 	.word	0xfff00000
 8011fdc:	3ff00000 	.word	0x3ff00000
 8011fe0:	4090cbff 	.word	0x4090cbff
 8011fe4:	3f6f3400 	.word	0x3f6f3400
 8011fe8:	3fe00000 	.word	0x3fe00000
 8011fec:	652b82fe 	.word	0x652b82fe
 8011ff0:	3c971547 	.word	0x3c971547
 8011ff4:	4090cc00 	.word	0x4090cc00

08011ff8 <fabs>:
 8011ff8:	ec51 0b10 	vmov	r0, r1, d0
 8011ffc:	4602      	mov	r2, r0
 8011ffe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012002:	ec43 2b10 	vmov	d0, r2, r3
 8012006:	4770      	bx	lr

08012008 <scalbn>:
 8012008:	b570      	push	{r4, r5, r6, lr}
 801200a:	ec55 4b10 	vmov	r4, r5, d0
 801200e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8012012:	4606      	mov	r6, r0
 8012014:	462b      	mov	r3, r5
 8012016:	b991      	cbnz	r1, 801203e <scalbn+0x36>
 8012018:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801201c:	4323      	orrs	r3, r4
 801201e:	d03d      	beq.n	801209c <scalbn+0x94>
 8012020:	4b35      	ldr	r3, [pc, #212]	@ (80120f8 <scalbn+0xf0>)
 8012022:	4620      	mov	r0, r4
 8012024:	4629      	mov	r1, r5
 8012026:	2200      	movs	r2, #0
 8012028:	f7ee faee 	bl	8000608 <__aeabi_dmul>
 801202c:	4b33      	ldr	r3, [pc, #204]	@ (80120fc <scalbn+0xf4>)
 801202e:	429e      	cmp	r6, r3
 8012030:	4604      	mov	r4, r0
 8012032:	460d      	mov	r5, r1
 8012034:	da0f      	bge.n	8012056 <scalbn+0x4e>
 8012036:	a328      	add	r3, pc, #160	@ (adr r3, 80120d8 <scalbn+0xd0>)
 8012038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801203c:	e01e      	b.n	801207c <scalbn+0x74>
 801203e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8012042:	4291      	cmp	r1, r2
 8012044:	d10b      	bne.n	801205e <scalbn+0x56>
 8012046:	4622      	mov	r2, r4
 8012048:	4620      	mov	r0, r4
 801204a:	4629      	mov	r1, r5
 801204c:	f7ee f926 	bl	800029c <__adddf3>
 8012050:	4604      	mov	r4, r0
 8012052:	460d      	mov	r5, r1
 8012054:	e022      	b.n	801209c <scalbn+0x94>
 8012056:	460b      	mov	r3, r1
 8012058:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801205c:	3936      	subs	r1, #54	@ 0x36
 801205e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8012062:	4296      	cmp	r6, r2
 8012064:	dd0d      	ble.n	8012082 <scalbn+0x7a>
 8012066:	2d00      	cmp	r5, #0
 8012068:	a11d      	add	r1, pc, #116	@ (adr r1, 80120e0 <scalbn+0xd8>)
 801206a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801206e:	da02      	bge.n	8012076 <scalbn+0x6e>
 8012070:	a11d      	add	r1, pc, #116	@ (adr r1, 80120e8 <scalbn+0xe0>)
 8012072:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012076:	a31a      	add	r3, pc, #104	@ (adr r3, 80120e0 <scalbn+0xd8>)
 8012078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801207c:	f7ee fac4 	bl	8000608 <__aeabi_dmul>
 8012080:	e7e6      	b.n	8012050 <scalbn+0x48>
 8012082:	1872      	adds	r2, r6, r1
 8012084:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8012088:	428a      	cmp	r2, r1
 801208a:	dcec      	bgt.n	8012066 <scalbn+0x5e>
 801208c:	2a00      	cmp	r2, #0
 801208e:	dd08      	ble.n	80120a2 <scalbn+0x9a>
 8012090:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012094:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8012098:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801209c:	ec45 4b10 	vmov	d0, r4, r5
 80120a0:	bd70      	pop	{r4, r5, r6, pc}
 80120a2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80120a6:	da08      	bge.n	80120ba <scalbn+0xb2>
 80120a8:	2d00      	cmp	r5, #0
 80120aa:	a10b      	add	r1, pc, #44	@ (adr r1, 80120d8 <scalbn+0xd0>)
 80120ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80120b0:	dac1      	bge.n	8012036 <scalbn+0x2e>
 80120b2:	a10f      	add	r1, pc, #60	@ (adr r1, 80120f0 <scalbn+0xe8>)
 80120b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80120b8:	e7bd      	b.n	8012036 <scalbn+0x2e>
 80120ba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80120be:	3236      	adds	r2, #54	@ 0x36
 80120c0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80120c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80120c8:	4620      	mov	r0, r4
 80120ca:	4b0d      	ldr	r3, [pc, #52]	@ (8012100 <scalbn+0xf8>)
 80120cc:	4629      	mov	r1, r5
 80120ce:	2200      	movs	r2, #0
 80120d0:	e7d4      	b.n	801207c <scalbn+0x74>
 80120d2:	bf00      	nop
 80120d4:	f3af 8000 	nop.w
 80120d8:	c2f8f359 	.word	0xc2f8f359
 80120dc:	01a56e1f 	.word	0x01a56e1f
 80120e0:	8800759c 	.word	0x8800759c
 80120e4:	7e37e43c 	.word	0x7e37e43c
 80120e8:	8800759c 	.word	0x8800759c
 80120ec:	fe37e43c 	.word	0xfe37e43c
 80120f0:	c2f8f359 	.word	0xc2f8f359
 80120f4:	81a56e1f 	.word	0x81a56e1f
 80120f8:	43500000 	.word	0x43500000
 80120fc:	ffff3cb0 	.word	0xffff3cb0
 8012100:	3c900000 	.word	0x3c900000

08012104 <with_errno>:
 8012104:	b510      	push	{r4, lr}
 8012106:	ed2d 8b02 	vpush	{d8}
 801210a:	eeb0 8a40 	vmov.f32	s16, s0
 801210e:	eef0 8a60 	vmov.f32	s17, s1
 8012112:	4604      	mov	r4, r0
 8012114:	f7fb fe46 	bl	800dda4 <__errno>
 8012118:	eeb0 0a48 	vmov.f32	s0, s16
 801211c:	eef0 0a68 	vmov.f32	s1, s17
 8012120:	ecbd 8b02 	vpop	{d8}
 8012124:	6004      	str	r4, [r0, #0]
 8012126:	bd10      	pop	{r4, pc}

08012128 <xflow>:
 8012128:	4603      	mov	r3, r0
 801212a:	b507      	push	{r0, r1, r2, lr}
 801212c:	ec51 0b10 	vmov	r0, r1, d0
 8012130:	b183      	cbz	r3, 8012154 <xflow+0x2c>
 8012132:	4602      	mov	r2, r0
 8012134:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012138:	e9cd 2300 	strd	r2, r3, [sp]
 801213c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012140:	f7ee fa62 	bl	8000608 <__aeabi_dmul>
 8012144:	ec41 0b10 	vmov	d0, r0, r1
 8012148:	2022      	movs	r0, #34	@ 0x22
 801214a:	b003      	add	sp, #12
 801214c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012150:	f7ff bfd8 	b.w	8012104 <with_errno>
 8012154:	4602      	mov	r2, r0
 8012156:	460b      	mov	r3, r1
 8012158:	e7ee      	b.n	8012138 <xflow+0x10>
 801215a:	0000      	movs	r0, r0
 801215c:	0000      	movs	r0, r0
	...

08012160 <__math_uflow>:
 8012160:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012168 <__math_uflow+0x8>
 8012164:	f7ff bfe0 	b.w	8012128 <xflow>
 8012168:	00000000 	.word	0x00000000
 801216c:	10000000 	.word	0x10000000

08012170 <__math_oflow>:
 8012170:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012178 <__math_oflow+0x8>
 8012174:	f7ff bfd8 	b.w	8012128 <xflow>
 8012178:	00000000 	.word	0x00000000
 801217c:	70000000 	.word	0x70000000

08012180 <__ieee754_sqrt>:
 8012180:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012184:	4a68      	ldr	r2, [pc, #416]	@ (8012328 <__ieee754_sqrt+0x1a8>)
 8012186:	ec55 4b10 	vmov	r4, r5, d0
 801218a:	43aa      	bics	r2, r5
 801218c:	462b      	mov	r3, r5
 801218e:	4621      	mov	r1, r4
 8012190:	d110      	bne.n	80121b4 <__ieee754_sqrt+0x34>
 8012192:	4622      	mov	r2, r4
 8012194:	4620      	mov	r0, r4
 8012196:	4629      	mov	r1, r5
 8012198:	f7ee fa36 	bl	8000608 <__aeabi_dmul>
 801219c:	4602      	mov	r2, r0
 801219e:	460b      	mov	r3, r1
 80121a0:	4620      	mov	r0, r4
 80121a2:	4629      	mov	r1, r5
 80121a4:	f7ee f87a 	bl	800029c <__adddf3>
 80121a8:	4604      	mov	r4, r0
 80121aa:	460d      	mov	r5, r1
 80121ac:	ec45 4b10 	vmov	d0, r4, r5
 80121b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121b4:	2d00      	cmp	r5, #0
 80121b6:	dc0e      	bgt.n	80121d6 <__ieee754_sqrt+0x56>
 80121b8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80121bc:	4322      	orrs	r2, r4
 80121be:	d0f5      	beq.n	80121ac <__ieee754_sqrt+0x2c>
 80121c0:	b19d      	cbz	r5, 80121ea <__ieee754_sqrt+0x6a>
 80121c2:	4622      	mov	r2, r4
 80121c4:	4620      	mov	r0, r4
 80121c6:	4629      	mov	r1, r5
 80121c8:	f7ee f866 	bl	8000298 <__aeabi_dsub>
 80121cc:	4602      	mov	r2, r0
 80121ce:	460b      	mov	r3, r1
 80121d0:	f7ee fb44 	bl	800085c <__aeabi_ddiv>
 80121d4:	e7e8      	b.n	80121a8 <__ieee754_sqrt+0x28>
 80121d6:	152a      	asrs	r2, r5, #20
 80121d8:	d115      	bne.n	8012206 <__ieee754_sqrt+0x86>
 80121da:	2000      	movs	r0, #0
 80121dc:	e009      	b.n	80121f2 <__ieee754_sqrt+0x72>
 80121de:	0acb      	lsrs	r3, r1, #11
 80121e0:	3a15      	subs	r2, #21
 80121e2:	0549      	lsls	r1, r1, #21
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d0fa      	beq.n	80121de <__ieee754_sqrt+0x5e>
 80121e8:	e7f7      	b.n	80121da <__ieee754_sqrt+0x5a>
 80121ea:	462a      	mov	r2, r5
 80121ec:	e7fa      	b.n	80121e4 <__ieee754_sqrt+0x64>
 80121ee:	005b      	lsls	r3, r3, #1
 80121f0:	3001      	adds	r0, #1
 80121f2:	02dc      	lsls	r4, r3, #11
 80121f4:	d5fb      	bpl.n	80121ee <__ieee754_sqrt+0x6e>
 80121f6:	1e44      	subs	r4, r0, #1
 80121f8:	1b12      	subs	r2, r2, r4
 80121fa:	f1c0 0420 	rsb	r4, r0, #32
 80121fe:	fa21 f404 	lsr.w	r4, r1, r4
 8012202:	4323      	orrs	r3, r4
 8012204:	4081      	lsls	r1, r0
 8012206:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801220a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801220e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012212:	07d2      	lsls	r2, r2, #31
 8012214:	bf5c      	itt	pl
 8012216:	005b      	lslpl	r3, r3, #1
 8012218:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801221c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012220:	bf58      	it	pl
 8012222:	0049      	lslpl	r1, r1, #1
 8012224:	2600      	movs	r6, #0
 8012226:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801222a:	106d      	asrs	r5, r5, #1
 801222c:	0049      	lsls	r1, r1, #1
 801222e:	2016      	movs	r0, #22
 8012230:	4632      	mov	r2, r6
 8012232:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8012236:	1917      	adds	r7, r2, r4
 8012238:	429f      	cmp	r7, r3
 801223a:	bfde      	ittt	le
 801223c:	193a      	addle	r2, r7, r4
 801223e:	1bdb      	suble	r3, r3, r7
 8012240:	1936      	addle	r6, r6, r4
 8012242:	0fcf      	lsrs	r7, r1, #31
 8012244:	3801      	subs	r0, #1
 8012246:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801224a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801224e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8012252:	d1f0      	bne.n	8012236 <__ieee754_sqrt+0xb6>
 8012254:	4604      	mov	r4, r0
 8012256:	2720      	movs	r7, #32
 8012258:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801225c:	429a      	cmp	r2, r3
 801225e:	eb00 0e0c 	add.w	lr, r0, ip
 8012262:	db02      	blt.n	801226a <__ieee754_sqrt+0xea>
 8012264:	d113      	bne.n	801228e <__ieee754_sqrt+0x10e>
 8012266:	458e      	cmp	lr, r1
 8012268:	d811      	bhi.n	801228e <__ieee754_sqrt+0x10e>
 801226a:	f1be 0f00 	cmp.w	lr, #0
 801226e:	eb0e 000c 	add.w	r0, lr, ip
 8012272:	da42      	bge.n	80122fa <__ieee754_sqrt+0x17a>
 8012274:	2800      	cmp	r0, #0
 8012276:	db40      	blt.n	80122fa <__ieee754_sqrt+0x17a>
 8012278:	f102 0801 	add.w	r8, r2, #1
 801227c:	1a9b      	subs	r3, r3, r2
 801227e:	458e      	cmp	lr, r1
 8012280:	bf88      	it	hi
 8012282:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8012286:	eba1 010e 	sub.w	r1, r1, lr
 801228a:	4464      	add	r4, ip
 801228c:	4642      	mov	r2, r8
 801228e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8012292:	3f01      	subs	r7, #1
 8012294:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8012298:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801229c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80122a0:	d1dc      	bne.n	801225c <__ieee754_sqrt+0xdc>
 80122a2:	4319      	orrs	r1, r3
 80122a4:	d01b      	beq.n	80122de <__ieee754_sqrt+0x15e>
 80122a6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801232c <__ieee754_sqrt+0x1ac>
 80122aa:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8012330 <__ieee754_sqrt+0x1b0>
 80122ae:	e9da 0100 	ldrd	r0, r1, [sl]
 80122b2:	e9db 2300 	ldrd	r2, r3, [fp]
 80122b6:	f7ed ffef 	bl	8000298 <__aeabi_dsub>
 80122ba:	e9da 8900 	ldrd	r8, r9, [sl]
 80122be:	4602      	mov	r2, r0
 80122c0:	460b      	mov	r3, r1
 80122c2:	4640      	mov	r0, r8
 80122c4:	4649      	mov	r1, r9
 80122c6:	f7ee fc1b 	bl	8000b00 <__aeabi_dcmple>
 80122ca:	b140      	cbz	r0, 80122de <__ieee754_sqrt+0x15e>
 80122cc:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 80122d0:	e9da 0100 	ldrd	r0, r1, [sl]
 80122d4:	e9db 2300 	ldrd	r2, r3, [fp]
 80122d8:	d111      	bne.n	80122fe <__ieee754_sqrt+0x17e>
 80122da:	3601      	adds	r6, #1
 80122dc:	463c      	mov	r4, r7
 80122de:	1072      	asrs	r2, r6, #1
 80122e0:	0863      	lsrs	r3, r4, #1
 80122e2:	07f1      	lsls	r1, r6, #31
 80122e4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80122e8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80122ec:	bf48      	it	mi
 80122ee:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80122f2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80122f6:	4618      	mov	r0, r3
 80122f8:	e756      	b.n	80121a8 <__ieee754_sqrt+0x28>
 80122fa:	4690      	mov	r8, r2
 80122fc:	e7be      	b.n	801227c <__ieee754_sqrt+0xfc>
 80122fe:	f7ed ffcd 	bl	800029c <__adddf3>
 8012302:	e9da 8900 	ldrd	r8, r9, [sl]
 8012306:	4602      	mov	r2, r0
 8012308:	460b      	mov	r3, r1
 801230a:	4640      	mov	r0, r8
 801230c:	4649      	mov	r1, r9
 801230e:	f7ee fbed 	bl	8000aec <__aeabi_dcmplt>
 8012312:	b120      	cbz	r0, 801231e <__ieee754_sqrt+0x19e>
 8012314:	1ca0      	adds	r0, r4, #2
 8012316:	bf08      	it	eq
 8012318:	3601      	addeq	r6, #1
 801231a:	3402      	adds	r4, #2
 801231c:	e7df      	b.n	80122de <__ieee754_sqrt+0x15e>
 801231e:	1c63      	adds	r3, r4, #1
 8012320:	f023 0401 	bic.w	r4, r3, #1
 8012324:	e7db      	b.n	80122de <__ieee754_sqrt+0x15e>
 8012326:	bf00      	nop
 8012328:	7ff00000 	.word	0x7ff00000
 801232c:	200001f8 	.word	0x200001f8
 8012330:	200001f0 	.word	0x200001f0

08012334 <_init>:
 8012334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012336:	bf00      	nop
 8012338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801233a:	bc08      	pop	{r3}
 801233c:	469e      	mov	lr, r3
 801233e:	4770      	bx	lr

08012340 <_fini>:
 8012340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012342:	bf00      	nop
 8012344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012346:	bc08      	pop	{r3}
 8012348:	469e      	mov	lr, r3
 801234a:	4770      	bx	lr
